%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:01 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ARMC12)
} def

/sequence { (\
AGAGUUCUGGUUCCGGAAGGCCCCCCACAGGUGCCUUGGGCCUAGCUCUCACCUGGGCCCAGGGCAACACUGAAGAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.132920376 ubox
1 71 0.023075580 ubox
2 7 0.142246121 ubox
2 11 0.003205631 ubox
2 12 0.008416891 ubox
2 13 0.054820680 ubox
2 70 0.024307762 ubox
3 11 0.008960603 ubox
3 12 0.054759908 ubox
3 71 0.048722616 ubox
4 11 0.043775737 ubox
4 21 0.144941913 ubox
4 28 0.058636894 ubox
4 65 0.003605987 ubox
4 68 0.025497878 ubox
4 70 0.049939317 ubox
4 77 0.116773980 ubox
5 10 0.014455825 ubox
5 17 0.021101029 ubox
5 18 0.583431812 ubox
5 19 0.024566049 ubox
5 20 0.132026062 ubox
5 27 0.060761703 ubox
5 30 0.011506399 ubox
5 31 0.003246058 ubox
5 64 0.003600066 ubox
5 67 0.023521246 ubox
5 69 0.044165607 ubox
5 73 0.006650386 ubox
5 74 0.029194274 ubox
5 75 0.010687874 ubox
5 76 0.101659380 ubox
6 16 0.018175855 ubox
6 17 0.682437158 ubox
6 18 0.024734924 ubox
6 19 0.039566628 ubox
6 20 0.017770460 ubox
6 29 0.013966262 ubox
6 31 0.058734782 ubox
6 63 0.003580914 ubox
6 66 0.012153340 ubox
6 73 0.032997589 ubox
6 74 0.010576779 ubox
6 75 0.076863702 ubox
6 76 0.214659890 ubox
7 15 0.018750374 ubox
7 16 0.693596404 ubox
7 19 0.023928488 ubox
7 20 0.003443960 ubox
7 30 0.092771791 ubox
7 31 0.008404985 ubox
7 62 0.003587375 ubox
7 72 0.031398135 ubox
7 75 0.237788935 ubox
8 15 0.692569724 ubox
8 18 0.023848521 ubox
8 19 0.003449520 ubox
8 27 0.308320444 ubox
8 29 0.092511369 ubox
8 30 0.007991944 ubox
8 61 0.003572648 ubox
8 69 0.004227270 ubox
8 72 0.006277682 ubox
8 74 0.228863419 ubox
9 14 0.686476531 ubox
9 22 0.253511650 ubox
9 23 0.176914514 ubox
9 24 0.490258874 ubox
9 25 0.142908497 ubox
9 26 0.354090692 ubox
9 28 0.088931139 ubox
9 60 0.003494860 ubox
9 68 0.004639967 ubox
9 71 0.017425562 ubox
10 21 0.254381088 ubox
10 22 0.177078967 ubox
10 23 0.492356877 ubox
10 24 0.143063620 ubox
10 25 0.352748069 ubox
10 28 0.015799526 ubox
10 59 0.003453166 ubox
10 68 0.006003621 ubox
10 70 0.018339722 ubox
10 77 0.014046448 ubox
11 17 0.003939765 ubox
11 18 0.004643443 ubox
11 19 0.008680315 ubox
11 20 0.224518700 ubox
11 27 0.019168666 ubox
11 67 0.005858482 ubox
11 69 0.017161138 ubox
11 74 0.004732748 ubox
11 76 0.013944491 ubox
12 16 0.004388363 ubox
12 17 0.006598848 ubox
12 18 0.010861883 ubox
12 19 0.186578513 ubox
12 20 0.045454783 ubox
12 66 0.004001120 ubox
12 73 0.005811874 ubox
12 75 0.012997477 ubox
12 76 0.010741841 ubox
13 19 0.054948317 ubox
13 20 0.625106779 ubox
13 31 0.010841525 ubox
13 56 0.003311158 ubox
13 72 0.004949793 ubox
13 75 0.011797309 ubox
14 19 0.626867271 ubox
14 30 0.011012584 ubox
14 55 0.003311311 ubox
14 72 0.005608655 ubox
15 22 0.153939328 ubox
15 23 0.113432007 ubox
15 24 0.148867618 ubox
15 25 0.044207114 ubox
15 26 0.083403642 ubox
15 54 0.003238221 ubox
15 71 0.005679722 ubox
16 21 0.153566649 ubox
16 22 0.113515435 ubox
16 23 0.148669100 ubox
16 24 0.044358300 ubox
16 25 0.083392489 ubox
16 53 0.003226856 ubox
16 70 0.005657247 ubox
17 37 0.003733036 ubox
18 36 0.004390140 ubox
18 71 0.005643316 ubox
19 25 0.197979909 ubox
19 26 0.441330456 ubox
19 35 0.004673973 ubox
19 70 0.006230741 ubox
19 71 0.003617113 ubox
20 24 0.195708331 ubox
20 25 0.436404184 ubox
20 32 0.039222172 ubox
20 34 0.004758889 ubox
20 70 0.003875196 ubox
21 31 0.045572858 ubox
21 33 0.004803373 ubox
22 30 0.045487305 ubox
22 31 0.036640280 ubox
23 30 0.037174492 ubox
23 31 0.034727071 ubox
24 30 0.035025840 ubox
24 31 0.040803374 ubox
25 30 0.041420629 ubox
25 31 0.030230885 ubox
26 30 0.030327569 ubox
26 72 0.081500074 ubox
27 71 0.077246142 ubox
28 72 0.976532745 ubox
29 71 0.981707729 ubox
30 70 0.980593183 ubox
30 71 0.024632514 ubox
31 68 0.927908726 ubox
31 70 0.030263793 ubox
32 66 0.739846765 ubox
32 67 0.655822819 ubox
32 69 0.025352681 ubox
33 65 0.999260719 ubox
33 68 0.011823498 ubox
34 64 0.999980032 ubox
35 63 0.999972254 ubox
36 62 0.999074866 ubox
37 61 0.999078833 ubox
38 48 0.003232427 ubox
38 60 0.999980777 ubox
39 47 0.003259459 ubox
39 59 0.999988437 ubox
40 46 0.003278075 ubox
40 58 0.999989659 ubox
41 45 0.003254637 ubox
41 57 0.999988496 ubox
42 56 0.999979317 ubox
43 55 0.999455363 ubox
44 54 0.998826769 ubox
45 53 0.993115419 ubox
9 24 0.9500000 lbox
10 23 0.9500000 lbox
13 20 0.9500000 lbox
14 19 0.9500000 lbox
28 72 0.9500000 lbox
29 71 0.9500000 lbox
30 70 0.9500000 lbox
31 68 0.9500000 lbox
32 67 0.9500000 lbox
33 65 0.9500000 lbox
34 64 0.9500000 lbox
35 63 0.9500000 lbox
36 62 0.9500000 lbox
37 61 0.9500000 lbox
38 60 0.9500000 lbox
39 59 0.9500000 lbox
40 58 0.9500000 lbox
41 57 0.9500000 lbox
42 56 0.9500000 lbox
43 55 0.9500000 lbox
44 54 0.9500000 lbox
45 53 0.9500000 lbox
showpage
end
%%EOF
