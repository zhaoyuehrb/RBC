%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACGCGGAACUCUCUCGCGGUAAUUCGAAGUACCGCGCCUGCGUGCUGCAGUAGCGCCUGGUGGCGGUGGCAGUUUGCCCGCGGGUGUGUGAAGGGAGACAGUGUGGAGGCCACAGGGUACUCGCCACG\
) } def
/len { sequence length } bind def

/coor [
[215.91574097 340.84783936]
[219.81455994 333.22192383]
[212.62582397 320.05673218]
[205.43708801 306.89154053]
[198.24835205 293.72634888]
[191.05961609 280.56118774]
[183.87088013 267.39599609]
[170.47534180 266.90780640]
[158.99124146 259.78625488]
[152.49591064 247.81303406]
[152.79240417 234.08610535]
[159.91029358 222.21827698]
[153.03689575 208.88574219]
[146.16349792 195.55320740]
[139.29010010 182.22068787]
[132.41670227 168.88815308]
[125.54329681 155.55561829]
[118.51173401 142.30581665]
[111.32299805 129.14064026]
[104.13426208 115.97545624]
[90.48978424 109.74422455]
[75.83258057 112.93270874]
[61.17537689 116.12118530]
[46.51817703 119.30966949]
[40.39787674 133.56875610]
[27.04797745 141.47822571]
[11.60178661 139.99673462]
[-0.00132040 129.69395447]
[-3.29971194 114.53148651]
[2.97491074 100.33963013]
[16.40982628 92.57543945]
[31.83903694 94.22440338]
[43.32969666 104.65246582]
[57.98690033 101.46398163]
[72.64410400 98.27550507]
[87.30130768 95.08702850]
[96.00215912 82.86838531]
[94.22137451 67.97446442]
[92.44058990 53.08054733]
[90.65979767 38.18663025]
[88.87901306 23.29271317]
[87.09822845 8.39879417]
[85.31744385 -6.49512386]
[83.53665924 -21.38904190]
[81.75587463 -36.28295898]
[66.90911865 -52.99962616]
[75.69735718 -72.73958588]
[72.50887299 -87.39678955]
[69.32039642 -102.05399323]
[66.13191986 -116.71118927]
[62.94343948 -131.36839294]
[58.68626404 -136.63180542]
[57.91839981 -142.38705444]
[59.96955490 -146.79835510]
[57.48210526 -161.59066772]
[47.56344986 -173.91668701]
[53.08306122 -187.75082397]
[50.59561157 -202.54313660]
[48.10816193 -217.33544922]
[45.62070847 -232.12777710]
[34.76797867 -244.42208862]
[40.24459457 -259.87973022]
[56.41668320 -262.59921265]
[66.64778900 -249.78294373]
[60.41302490 -234.61521912]
[62.90047455 -219.82290649]
[65.38792419 -205.03059387]
[67.87537384 -190.23828125]
[77.61611176 -178.97029114]
[72.27442169 -164.07812500]
[74.76187134 -149.28581238]
[77.60063934 -134.55686951]
[80.78912354 -119.89967346]
[83.97760010 -105.24246979]
[87.16607666 -90.58526611]
[90.35456085 -75.92806244]
[97.93553162 -73.10015869]
[103.80953217 -67.39876556]
[106.93373871 -59.73009491]
[106.71126556 -51.35769272]
[103.10358429 -43.69436264]
[96.64978790 -38.06374741]
[98.43057251 -23.16982841]
[100.21136475 -8.27591038]
[101.99214935 6.61800814]
[103.77293396 21.51192665]
[105.55371857 36.40584564]
[107.33450317 51.29976273]
[109.11528778 66.19367981]
[110.89608002 81.08760071]
[117.29944611 108.78672028]
[124.48818207 121.95190430]
[131.67692566 135.11708069]
[138.60438538 141.22290039]
[138.87582397 148.68222046]
[145.74922180 162.01475525]
[152.62261963 175.34729004]
[159.49601746 188.67980957]
[166.36941528 202.01234436]
[173.24281311 215.34487915]
[189.95132446 217.65747070]
[201.89601135 229.33172607]
[204.53761292 245.65602112]
[197.03607178 260.20724487]
[204.22480774 273.37243652]
[211.41354370 286.53762817]
[218.60226440 299.70281982]
[225.79100037 312.86801147]
[232.97973633 326.03317261]
[252.97595215 336.03442383]
[252.15382385 357.62661743]
[260.56143188 370.04885864]
[268.96905518 382.47109985]
[279.87069702 383.93508911]
[287.96435547 391.05358887]
[290.69384766 401.25256348]
[287.37887573 411.04370117]
[295.18588257 423.85192871]
[309.83053589 431.23202515]
[310.49127197 447.61785889]
[296.48834229 456.15310669]
[282.22677612 448.05740356]
[282.37765503 431.65896606]
[274.57064819 418.85073853]
[256.97680664 410.96807861]
[256.54681396 390.87872314]
[248.13920593 378.45648193]
[239.73159790 366.03424072]
[231.64263916 366.22647095]
[224.07040405 363.11660767]
[218.31983948 357.15841675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[18 93]
[19 92]
[20 91]
[21 36]
[22 35]
[23 34]
[24 33]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[54 71]
[55 70]
[57 68]
[58 67]
[59 66]
[60 65]
[111 128]
[112 127]
[113 126]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
