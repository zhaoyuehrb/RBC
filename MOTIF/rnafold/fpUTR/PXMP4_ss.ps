%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACAGCCUAUAGACGCCACGAGUCGGCGGCGCUACCGAGGGGCUGUGGGCGCGCAGCUGGAACCUCCGGCUGUCAGUGCGCUUACAGUUCCUAACCCCGACCCUGCGCGCAGCCCGCACU\
) } def
/len { sequence length } bind def

/coor [
[89.09159088 334.60269165]
[73.93732452 336.74905396]
[59.52532578 331.59609985]
[49.16736984 320.32794189]
[45.24363327 305.53393555]
[48.65576172 290.61361694]
[58.61967850 278.99557495]
[72.84574890 273.34954834]
[74.36327362 258.42648315]
[61.71517944 252.21383667]
[51.94007111 242.02246094]
[46.23580933 229.07156372]
[45.31154251 214.92027283]
[49.29962158 201.27992249]
[57.73709488 189.80708313]
[69.61935425 181.90245056]
[83.51971436 178.53976440]
[85.41479492 163.65995789]
[87.30987549 148.78015137]
[89.01631165 133.87753296]
[90.53383636 118.95449066]
[81.37445068 110.09801483]
[78.95073700 97.58973694]
[84.13919067 85.95309448]
[95.06348419 79.39631653]
[96.95856476 64.51651001]
[98.85364532 49.63670349]
[100.74871826 34.75689316]
[102.64379883 19.87708664]
[100.60961151 10.85205173]
[104.77999878 4.64614105]
[107.05141449 -10.18088341]
[99.85496521 -14.94413662]
[94.44599915 -21.62499237]
[91.30961609 -29.59175110]
[90.71723175 -38.09898758]
[92.70328522 -46.35729599]
[97.06389618 -53.60654831]
[103.37760162 -59.18583679]
[111.04602051 -62.59373856]
[119.35054016 -63.53331375]
[123.84098816 -77.84540558]
[128.33143616 -92.15749359]
[132.82188416 -106.46958160]
[137.31233215 -120.78166962]
[141.80278015 -135.09376526]
[146.29321289 -149.40585327]
[150.78366089 -163.71794128]
[155.27410889 -178.03002930]
[159.76455688 -192.34211731]
[164.25500488 -206.65420532]
[168.74545288 -220.96629333]
[173.23590088 -235.27838135]
[177.72634888 -249.59046936]
[182.21679688 -263.90255737]
[185.97657776 -278.42370605]
[188.99606323 -293.11666870]
[192.01553345 -307.80960083]
[195.03501892 -322.50256348]
[198.05448914 -337.19552612]
[201.07397461 -351.88845825]
[204.09344482 -366.58142090]
[207.11293030 -381.27435303]
[210.13240051 -395.96731567]
[207.39822388 -412.69934082]
[222.71946716 -419.95852661]
[233.93632507 -407.24560547]
[224.82534790 -392.94781494]
[221.80587769 -378.25488281]
[218.78639221 -363.56192017]
[215.76692200 -348.86898804]
[212.74743652 -334.17602539]
[209.72796631 -319.48309326]
[206.70848083 -304.79013062]
[203.68901062 -290.09719849]
[200.66952515 -275.40423584]
[202.21192932 -272.93365479]
[202.81030273 -269.66937256]
[202.14393616 -265.99032593]
[200.04379272 -262.38897705]
[196.52888489 -259.41210938]
[192.03843689 -245.10002136]
[187.54798889 -230.78793335]
[183.05754089 -216.47584534]
[178.56709290 -202.16375732]
[174.07664490 -187.85166931]
[169.58619690 -173.53958130]
[165.09574890 -159.22749329]
[160.60531616 -144.91540527]
[156.11486816 -130.60331726]
[151.62442017 -116.29122162]
[147.13397217 -101.97913361]
[142.64352417 -87.66704559]
[138.15307617 -73.35495758]
[133.66262817 -59.04286575]
[145.93676758 -40.95248795]
[141.12689209 -19.35404015]
[121.87844086 -7.90946722]
[119.60702515 6.91755772]
[117.52360535 21.77216530]
[115.62853241 36.65197372]
[113.73345184 51.53178024]
[111.83837128 66.41159058]
[109.94329071 81.29139709]
[120.33363342 94.04817200]
[118.46192169 110.39414978]
[105.45687866 120.47201538]
[103.93935394 135.39505005]
[106.20152283 144.36566162]
[102.18968201 150.67523193]
[100.29460144 165.55503845]
[98.39952087 180.43484497]
[112.36805725 188.28788757]
[122.24837494 200.85533142]
[126.56178284 216.20883179]
[124.68090820 232.00679016]
[116.92078400 245.85140991]
[104.48654175 255.65272522]
[89.28630829 259.94403076]
[87.76878357 274.86706543]
[100.56710815 283.26119995]
[107.98836517 296.64715576]
[108.32720947 311.94891357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 120]
[9 119]
[17 112]
[18 111]
[19 110]
[20 108]
[21 107]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[31 99]
[32 98]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
