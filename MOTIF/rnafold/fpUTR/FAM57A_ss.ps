%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGACGGGGGCGGAGGGUUGAAAUCGCGCGGCCGGGCCGGGGCGCGCCGAGCCGAACCCAGCCACGCGGCGCCAGCGAGGCGGCCGGACCCGCAGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[77.62831879 258.85156250]
[77.62831879 243.85157776]
[77.62831879 228.85157776]
[77.62831879 213.85157776]
[77.62831879 198.85157776]
[66.66933441 183.04431152]
[76.56329346 165.61225891]
[75.64883423 150.64015198]
[74.73437500 135.66806030]
[73.81991577 120.69596100]
[67.40013123 107.13917542]
[56.39694595 96.94457245]
[45.39376068 86.74996948]
[34.35153580 87.79460144]
[24.79883957 82.60823822]
[19.86609840 73.17164612]
[21.01182938 62.80844879]
[10.65061474 51.96200943]
[0.28940025 41.11557007]
[-10.07181454 30.26913261]
[-20.43302917 19.42269516]
[-35.31783676 22.94260025]
[-49.86990738 18.56835365]
[-60.20993042 7.57061291]
[-63.63391113 -7.02844000]
[-59.31977844 -21.28515244]
[-69.68099213 -32.13159180]
[-80.04220581 -42.97803116]
[-90.56762695 -53.66519928]
[-101.25479126 -64.19061279]
[-111.94196320 -74.71603394]
[-122.62913513 -85.24144745]
[-137.89067078 -89.41230011]
[-141.52935791 -103.85560608]
[-152.21652222 -114.38102722]
[-168.01646423 -114.00990295]
[-179.39328003 -124.98001862]
[-179.59733582 -140.78298950]
[-168.50755310 -152.04319763]
[-152.70330811 -152.08015442]
[-141.56097412 -140.87194824]
[-141.69111633 -125.06819916]
[-131.00393677 -114.54277802]
[-116.50682068 -111.12477875]
[-112.10372162 -95.92861938]
[-101.41654968 -85.40320587]
[-90.72937775 -74.87778473]
[-80.04220581 -64.35237122]
[-72.94756317 -61.85923386]
[-69.19577026 -53.33924484]
[-58.83455276 -42.49280548]
[-48.47333908 -31.64636612]
[-34.03423691 -35.30394745]
[-19.60705757 -31.21585846]
[-9.09372997 -20.38367081]
[-5.38960600 -5.64676857]
[-9.58659077 9.06147957]
[0.77462423 19.90791893]
[11.13583851 30.75435638]
[21.49705315 41.60079575]
[31.85826874 52.44723511]
[50.70149994 56.30750656]
[55.58836365 75.74678802]
[66.59154510 85.94139099]
[77.59473419 96.13599396]
[85.33472443 84.00432587]
[98.26500702 79.40704346]
[110.65828705 83.51450348]
[117.53818512 93.81806946]
[132.49459839 94.96073914]
[147.45101929 96.10341644]
[162.40742493 97.24609375]
[177.37953186 98.16055298]
[192.36383057 98.84658813]
[207.34812927 99.53261566]
[220.12071228 89.82484436]
[235.63816833 93.89768982]
[241.99684143 108.62680054]
[234.31889343 122.71327972]
[218.49420166 125.35117340]
[206.66209412 114.51692200]
[191.67779541 113.83088684]
[176.69349670 113.14485931]
[169.74996948 116.03227997]
[161.26475525 112.20250702]
[146.30833435 111.05982971]
[131.35192871 109.91715240]
[116.39550781 108.77448273]
[110.40319824 117.05313110]
[100.34470367 121.35316467]
[88.79201508 119.78150177]
[89.70647430 134.75360107]
[90.62093353 149.72569275]
[91.53539276 164.69779968]
[100.24156189 171.56982422]
[103.56661224 181.91856384]
[100.61515045 192.14939880]
[92.62831879 198.85157776]
[92.62831879 213.85157776]
[92.62831879 228.85157776]
[92.62831879 243.85157776]
[92.62831879 258.85156250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[7 94]
[8 93]
[9 92]
[10 91]
[11 65]
[12 64]
[13 63]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[26 52]
[27 51]
[28 50]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[69 88]
[70 87]
[71 86]
[72 85]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
