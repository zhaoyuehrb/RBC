%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAGUCUACUUUCCGGUAGCGGUGCCAGGGCAGUGGCCUAAUACGGAACUCCAUUUCCCGGCGUGCCUCGCGGAGGCCGCUGAACUCAGAAGCGGGAGGCCGGUUCCGGUUGCAUCAGCGAGGGAUUCACGGCGAA\
) } def
/len { sequence length } bind def

/coor [
[111.47768402 121.89919281]
[104.48979187 128.05424500]
[94.71632385 131.65989685]
[83.17720795 131.58335876]
[70.24369812 139.18099976]
[57.31019211 146.77865601]
[49.33023453 160.43995667]
[34.43732834 160.21507263]
[21.50381660 167.81272888]
[8.57030773 175.41038513]
[-4.36320162 183.00804138]
[-17.29671097 190.60569763]
[-25.27666664 204.26698303]
[-40.16957474 204.04211426]
[-53.10308456 211.63977051]
[-66.03659058 219.23741150]
[-78.88342285 226.98074341]
[-91.64192200 234.86874390]
[-104.40042877 242.75674438]
[-117.15892792 250.64474487]
[-124.44609833 265.33587646]
[-140.82742310 266.10037231]
[-149.45118713 252.15180969]
[-141.44601440 237.83924866]
[-125.04693604 237.88624573]
[-112.28842926 229.99824524]
[-99.52993011 222.11024475]
[-86.77142334 214.22224426]
[-82.70201874 207.97668457]
[-73.63424683 206.30390930]
[-60.70073700 198.70625305]
[-47.76722717 191.10859680]
[-40.71236420 177.99075317]
[-24.89436340 177.67218018]
[-11.96085453 170.07452393]
[0.97265488 162.47688293]
[13.90616417 154.87922668]
[26.83967400 147.28157043]
[33.89453888 134.16371155]
[49.71253586 133.84515381]
[62.64604568 126.24749756]
[75.57955933 118.64984131]
[76.76118469 111.24350739]
[61.94855881 108.88000488]
[64.31230927 94.06742096]
[79.12444305 96.43084717]
[80.30606842 89.02451324]
[70.37876892 77.77957916]
[60.45146179 66.53463745]
[50.52415848 55.28970337]
[34.73680115 54.55831146]
[24.15252304 42.82167435]
[25.05078888 27.04293251]
[36.89867020 16.58333397]
[52.66703415 17.64837074]
[63.00078583 29.60617638]
[61.76909637 45.36239624]
[71.69640350 56.60733414]
[81.62370300 67.85227203]
[91.55101013 79.09720612]
[105.90818787 83.44133759]
[120.40435791 79.58634949]
[131.75253296 68.56230164]
[146.04078674 72.76881409]
[160.53695679 68.91382599]
[175.03314209 65.05883789]
[189.52931213 61.20384598]
[203.83648682 56.69775009]
[217.92541504 51.54975510]
[232.01435852 46.40175629]
[246.10328674 41.25376129]
[260.19223022 36.10576248]
[274.28115845 30.95776749]
[284.58770752 18.95419502]
[299.19738770 21.85355377]
[313.28631592 16.70555687]
[323.59286499 4.70198536]
[338.20257568 7.60134363]
[352.29150391 2.45334721]
[362.59805298 -9.55022430]
[377.20773315 -6.65086603]
[391.29666138 -11.79886246]
[405.38558960 -16.94685936]
[419.47454834 -22.09485626]
[406.64480591 -29.86647224]
[402.86566162 -44.38259888]
[410.27694702 -57.42380142]
[424.68218994 -61.60578156]
[437.92474365 -54.56058884]
[442.50628662 -40.27740479]
[435.83187866 -26.84309387]
[450.48745728 -30.03910255]
[465.14300537 -33.23511124]
[476.97772217 -43.73510742]
[491.06130981 -38.88723755]
[505.71688843 -42.08324432]
[520.37243652 -45.27925491]
[532.13055420 -56.71072006]
[547.83374023 -51.98387909]
[551.32781982 -35.96129608]
[539.01849365 -25.12563324]
[523.56842041 -30.62368965]
[508.91287231 -27.42768288]
[494.25732422 -24.23167419]
[483.47085571 -13.96027756]
[468.33901978 -18.57954597]
[453.68344116 -15.38353825]
[439.02789307 -12.18753052]
[424.62252808 -8.00591946]
[410.53359985 -2.85792303]
[396.44467163 2.29007363]
[382.35571289 7.43807030]
[373.05691528 19.07342339]
[357.43948364 16.54228401]
[343.35055542 21.69028091]
[334.05175781 33.32563400]
[318.43432617 30.79449272]
[304.34539795 35.94248962]
[295.04656982 47.57784271]
[279.42916870 45.04670334]
[265.34020996 50.19469833]
[251.25128174 55.34269714]
[237.16235352 60.49069214]
[223.07341003 65.63868713]
[208.98448181 70.78668976]
[207.68884277 73.36293030]
[205.25141907 75.55783844]
[201.82096863 76.91726685]
[197.71372986 77.05281067]
[193.38430786 75.70001984]
[178.88812256 79.55500793]
[164.39195251 83.40999603]
[149.89578247 87.26499176]
[139.58447266 98.01330566]
[124.25934601 94.08252716]
[109.76317596 97.93751526]
[113.57353973 101.57981873]
[115.69950867 107.38961792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[17 28]
[18 27]
[19 26]
[20 25]
[47 60]
[48 59]
[49 58]
[50 57]
[61 136]
[62 135]
[64 133]
[65 132]
[66 131]
[67 130]
[68 125]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[75 118]
[76 117]
[78 115]
[79 114]
[81 112]
[82 111]
[83 110]
[84 109]
[91 108]
[92 107]
[93 106]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
