%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUCACUAUCUCCCGGGUGAACGGAGCUUUCGCAGCUGGAGAAGGCUCAUCCACCUGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[98.25987244 185.02993774]
[88.92953491 197.10916138]
[75.27837372 203.93620300]
[60.01683426 204.15556335]
[46.17510223 197.72366333]
[36.50147247 185.91758728]
[32.91664124 171.08142090]
[36.13238525 156.16090393]
[45.51021576 144.11851501]
[59.18815994 137.34529114]
[74.45044708 137.18603516]
[80.77146149 123.58291626]
[87.09247589 109.97980499]
[83.74564362 98.58698273]
[89.00820923 87.94258881]
[100.09276581 83.68460846]
[107.06361389 70.40277100]
[114.03446198 57.12092590]
[121.00531006 43.83908844]
[127.97615814 30.55724716]
[134.94700623 17.27540588]
[127.86363983 5.21234941]
[127.76319122 -8.66680622]
[134.56314087 -20.64074898]
[146.34547424 -27.55370903]
[159.89630127 -27.64694595]
[167.50070190 -40.57648849]
[175.10510254 -53.50603485]
[182.70948792 -66.43557739]
[190.31388855 -79.36512756]
[197.91828918 -92.29467010]
[205.52268982 -105.22421265]
[213.12709045 -118.15376282]
[206.07691956 -131.87596130]
[207.58747864 -147.22918701]
[217.17672729 -159.31430054]
[231.78479004 -164.27496338]
[246.75027466 -160.52825928]
[257.29776001 -149.26974487]
[260.06155396 -134.09196472]
[254.15979004 -119.83810425]
[241.47566223 -111.05651093]
[226.05662537 -110.54936218]
[218.45222473 -97.61981964]
[210.84783936 -84.69026947]
[203.24343872 -71.76072693]
[195.63903809 -58.83118439]
[188.03463745 -45.90163803]
[180.43023682 -32.97209167]
[172.82585144 -20.04254723]
[179.85771179 -5.39721107]
[176.87385559 10.73910522]
[164.83168030 22.12659073]
[148.22885132 24.24625397]
[141.25799561 37.52809525]
[134.28715515 50.80993652]
[127.31629944 64.09177399]
[120.34545135 77.37361908]
[113.37460327 90.65545654]
[114.62579346 107.23095703]
[100.69559479 116.30081940]
[94.37458038 129.90393066]
[88.05355835 143.50704956]
[97.77361298 155.27494812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 63]
[12 62]
[13 61]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
