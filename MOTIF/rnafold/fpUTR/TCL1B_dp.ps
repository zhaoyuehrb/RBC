%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:40 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TCL1B)
} def

/sequence { (\
UGGAAAGCUACACGUGUGAGCCUAGAGGCGGGUCCCGGUUGCAGACUUGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.039759793 ubox
1 12 0.047092564 ubox
1 14 0.011803351 ubox
1 24 0.382067695 ubox
2 9 0.045909761 ubox
2 11 0.055280986 ubox
2 13 0.017427808 ubox
2 22 0.506655152 ubox
2 23 0.412361014 ubox
2 35 0.003633498 ubox
2 47 0.007700533 ubox
2 51 0.090767666 ubox
3 8 0.046456766 ubox
3 21 0.505382505 ubox
3 22 0.415027466 ubox
3 34 0.003667990 ubox
3 46 0.008310848 ubox
3 50 0.091596517 ubox
4 33 0.003535885 ubox
4 48 0.010130818 ubox
5 47 0.009732008 ubox
5 48 0.066824162 ubox
6 23 0.170938711 ubox
6 40 0.003297559 ubox
6 47 0.092689396 ubox
7 15 0.106582868 ubox
7 17 0.489918854 ubox
7 21 0.827705781 ubox
7 22 0.127327228 ubox
7 39 0.003636326 ubox
7 42 0.025857819 ubox
7 46 0.092809028 ubox
7 50 0.020447510 ubox
8 14 0.107165051 ubox
8 16 0.491481244 ubox
8 20 0.839371943 ubox
8 25 0.059789164 ubox
8 27 0.005350745 ubox
8 38 0.003669987 ubox
8 41 0.025917097 ubox
8 44 0.093148952 ubox
8 49 0.020334343 ubox
9 16 0.011373208 ubox
9 18 0.423389084 ubox
9 19 0.726500929 ubox
9 24 0.059932277 ubox
9 26 0.006369301 ubox
9 37 0.003359955 ubox
9 43 0.091013175 ubox
10 15 0.035978312 ubox
10 17 0.678018582 ubox
10 23 0.058834307 ubox
10 39 0.027140720 ubox
10 40 0.005094266 ubox
10 48 0.005811135 ubox
11 16 0.691957566 ubox
11 18 0.457374020 ubox
11 38 0.028415034 ubox
11 41 0.090087157 ubox
11 49 0.036392023 ubox
12 17 0.381480547 ubox
12 39 0.028054535 ubox
12 40 0.085174875 ubox
12 48 0.036551779 ubox
13 32 0.003191991 ubox
13 37 0.033020057 ubox
13 38 0.037859663 ubox
14 21 0.069892983 ubox
14 36 0.033249778 ubox
14 46 0.047415559 ubox
14 50 0.004085869 ubox
15 20 0.068840889 ubox
15 24 0.004984537 ubox
15 37 0.086051735 ubox
15 43 0.011562925 ubox
15 45 0.047358781 ubox
15 49 0.003949711 ubox
16 23 0.005065468 ubox
16 33 0.003316280 ubox
16 36 0.087760577 ubox
16 42 0.012017291 ubox
16 50 0.047779406 ubox
17 24 0.005161113 ubox
17 32 0.004775393 ubox
17 37 0.003330977 ubox
17 41 0.011717860 ubox
17 43 0.047425360 ubox
17 49 0.047814946 ubox
18 23 0.005213454 ubox
18 34 0.092845462 ubox
18 36 0.003378064 ubox
18 40 0.006189113 ubox
18 42 0.047386161 ubox
18 48 0.048181385 ubox
19 33 0.091209894 ubox
19 39 0.005370477 ubox
19 40 0.048008574 ubox
19 47 0.048461489 ubox
20 29 0.032819502 ubox
20 33 0.022847887 ubox
20 39 0.048859739 ubox
20 46 0.048374486 ubox
21 28 0.032871558 ubox
21 31 0.084321918 ubox
21 32 0.036450394 ubox
21 38 0.049123924 ubox
22 27 0.033649194 ubox
22 30 0.084269831 ubox
22 31 0.036480920 ubox
22 37 0.049075554 ubox
22 44 0.048991909 ubox
23 30 0.034993369 ubox
23 43 0.048725457 ubox
25 34 0.047115825 ubox
26 33 0.046395384 ubox
26 40 0.049920058 ubox
27 35 0.005727374 ubox
27 36 0.010095953 ubox
27 39 0.049785444 ubox
27 51 0.984127347 ubox
28 34 0.005705116 ubox
28 35 0.010024324 ubox
28 50 0.992651133 ubox
29 37 0.050792503 ubox
29 49 0.992663652 ubox
30 36 0.050990992 ubox
30 48 0.989407497 ubox
31 35 0.050168585 ubox
31 47 0.991595445 ubox
31 51 0.003244019 ubox
32 46 0.992673409 ubox
32 50 0.003287218 ubox
33 45 0.992398277 ubox
33 49 0.003267675 ubox
34 44 0.990535773 ubox
37 47 0.004580551 ubox
38 46 0.004855723 ubox
39 45 0.004915095 ubox
40 44 0.004585401 ubox
41 50 0.014000423 ubox
42 49 0.014058016 ubox
43 48 0.012675402 ubox
2 22 0.9500000 lbox
3 21 0.9500000 lbox
7 17 0.9500000 lbox
8 16 0.9500000 lbox
27 51 0.9500000 lbox
28 50 0.9500000 lbox
29 49 0.9500000 lbox
30 48 0.9500000 lbox
31 47 0.9500000 lbox
32 46 0.9500000 lbox
33 45 0.9500000 lbox
34 44 0.9500000 lbox
showpage
end
%%EOF
