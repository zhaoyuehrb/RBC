%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGAUGUUAGAGGCGCUCAGGGUGGCAGCAGAGCAGACGCCGGGCUGCGCGCUGGGAGCUGCGGUCUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[89.04044342 305.02581787]
[97.12900543 290.76022339]
[96.51717377 275.77270508]
[95.90534973 260.78518677]
[95.29351807 245.79768372]
[94.37609100 230.82575989]
[93.15345764 215.87567139]
[91.93081665 200.92558289]
[81.04933929 196.82595825]
[72.53986359 188.82460022]
[67.73603058 178.12034607]
[67.41183472 166.33972168]
[71.65722656 155.28981018]
[79.85809326 146.68103027]
[90.78482056 141.86245728]
[91.39665222 126.87494659]
[92.00847626 111.88742828]
[85.68797302 99.41574860]
[93.00400543 87.50074005]
[93.61583710 72.51322174]
[94.22766113 57.52570724]
[94.83949280 42.53819275]
[95.45131683 27.55067444]
[88.28334808 13.44639301]
[96.53334045 1.04530597]
[97.14516449 -13.94221115]
[97.75699615 -28.92972755]
[94.92086029 -37.91836929]
[98.71184540 -44.51245499]
[99.93448639 -59.46254349]
[101.15712738 -74.41263580]
[102.37976837 -89.36272430]
[90.78268433 -99.50243378]
[87.41919708 -114.35304260]
[93.37479401 -128.17312622]
[106.17302704 -135.74566650]
[107.39566803 -150.69575500]
[99.89571381 -165.27938843]
[109.00180817 -178.91798401]
[125.34638977 -177.58129883]
[132.11555481 -162.64440918]
[122.34575653 -149.47311401]
[121.12311554 -134.52302551]
[132.52093506 -124.97170258]
[136.15196228 -110.36760712]
[130.42030334 -96.26081848]
[117.32985687 -88.14008331]
[116.10721588 -73.18999481]
[114.88457489 -58.23990631]
[113.66193390 -43.28981781]
[112.74451447 -28.31789970]
[112.13268280 -13.33038235]
[111.52085114 1.65713477]
[118.73258972 14.68940830]
[110.43883514 28.16250229]
[109.82701111 43.15002060]
[109.21517944 58.13753510]
[108.60334778 73.12505341]
[107.99152374 88.11257172]
[114.31202698 100.58425140]
[106.99599457 112.49925995]
[106.38416290 127.48677826]
[105.77233887 142.47428894]
[121.14678955 153.33529663]
[127.14473724 171.02537537]
[121.63226318 188.72135925]
[106.88090515 199.70294189]
[108.10354614 214.65303040]
[109.32617950 229.60311890]
[113.23856354 238.17823792]
[110.28103638 245.18585205]
[110.89286041 260.17337036]
[111.50469208 275.16088867]
[112.11652374 290.14840698]
[121.34095001 303.70724487]
[113.96817017 318.35559082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 69]
[7 68]
[8 67]
[15 63]
[16 62]
[17 61]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[31 48]
[32 47]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
