%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCUGGGAACCGCGGGCGCUAGGCGCGCGCACCCAGCACUCGGUCCCAGCCGAUAAAUCUGGGGCAGCGCGCGGUAGGAGCUGCGGGCGGCCAGGCCCCUUCCUGCGUCCGCACCUGGCCCCGCGCGCCCCUCUCGGGCGUCCGGCUUCCGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[116.98722076 466.32275391]
[116.98722076 451.32275391]
[116.98722076 436.32275391]
[113.82601929 429.59902954]
[117.13737488 421.02899170]
[117.43187714 406.03186035]
[117.72638702 391.03475952]
[118.02088928 376.03765869]
[118.31539917 361.04055786]
[118.60990143 346.04342651]
[118.90440369 331.04632568]
[111.41847992 318.16958618]
[119.42523956 304.52398682]
[119.71974182 289.52688599]
[147.27003479 257.56143188]
[142.07827759 243.48857117]
[136.88652039 229.41571045]
[131.69477844 215.34283447]
[126.50301361 201.26995850]
[121.20999908 196.05595398]
[121.35044861 186.86950684]
[116.43599701 172.69740295]
[111.52154541 158.52531433]
[106.60708618 144.35322571]
[101.69263458 130.18113708]
[96.77818298 116.00904846]
[75.28652191 102.71224213]
[61.79029465 96.16609955]
[48.29407120 89.61996460]
[34.79784393 83.07382202]
[21.30162048 76.52768707]
[7.80539703 69.98154449]
[-5.69082737 63.43540955]
[-25.67112160 65.83912659]
[-35.90638351 49.46963882]
[-49.64920425 43.45840836]
[-63.39202118 37.44717407]
[-77.13484192 31.43594360]
[-90.87766266 25.42471123]
[-106.19065857 35.05339813]
[-124.06497955 33.61538696]
[-137.40664673 21.86939240]
[-141.03314209 4.62773418]
[-155.00137329 -0.83932328]
[-168.96958923 -6.30638075]
[-182.93782043 -11.77343845]
[-196.90605164 -17.24049568]
[-213.02975464 -14.24754238]
[-223.47644043 -26.88870049]
[-217.49943542 -42.15983200]
[-201.24737549 -44.35130310]
[-191.43898010 -31.20871925]
[-177.47076416 -25.74166298]
[-163.50253296 -20.27460480]
[-149.53431702 -14.80754757]
[-135.56608582 -9.34048939]
[-126.37624359 -17.36156654]
[-114.57283783 -20.71442032]
[-102.39582062 -18.69858170]
[-92.18351746 -11.63855553]
[-85.92361450 -0.83340973]
[-84.86642456 11.68189144]
[-71.12361145 17.69312286]
[-57.38079071 23.70435524]
[-43.63796997 29.71558952]
[-29.89515114 35.72682190]
[-20.69272804 31.14138985]
[-10.27065277 32.43292236]
[-2.13132811 39.41241074]
[0.85531139 49.93918610]
[14.35153580 56.48532486]
[27.84775925 63.03146362]
[41.34398270 69.57759857]
[54.84020996 76.12374115]
[68.33643341 82.66987610]
[81.83265686 89.21601868]
[69.43438721 80.77309418]
[63.92234421 66.82256317]
[67.20133209 52.18534088]
[78.13822174 41.91965103]
[92.95352936 39.57302856]
[106.52749634 45.95640945]
[114.16932678 58.86386490]
[113.23821259 73.83493805]
[104.05564117 85.69624329]
[114.86844635 75.29993439]
[125.68125153 64.90361786]
[136.49404907 54.50730896]
[147.30685425 44.11100006]
[158.11965942 33.71468735]
[168.93246460 23.31837845]
[179.74526978 12.92206764]
[181.97290039 6.60808802]
[186.40838623 2.95141768]
[191.19262695 2.34023595]
[202.40525818 -7.62355042]
[213.61788940 -17.58733749]
[224.83050537 -27.55112457]
[225.51060486 -43.34077454]
[237.21278381 -53.96312714]
[252.99436951 -53.11613083]
[263.49240112 -41.30229187]
[262.47860718 -25.53055382]
[250.55442810 -15.15800667]
[234.79429626 -16.33849907]
[223.58166504 -6.37471247]
[212.36904907 3.58907437]
[201.15641785 13.55286121]
[190.14158630 23.73487282]
[179.32878113 34.13118362]
[168.51597595 44.52749252]
[157.70317078 54.92380524]
[146.89036560 65.32011414]
[136.07756042 75.71642303]
[125.26475525 86.11273193]
[114.45195770 96.50904846]
[110.95027161 111.09459686]
[115.86473083 125.26668549]
[120.77918243 139.43878174]
[125.69363403 153.61087036]
[130.60807800 167.78295898]
[135.52253723 181.95504761]
[140.57588196 196.07820129]
[145.76763916 210.15107727]
[150.95939636 224.22395325]
[156.15115356 238.29681396]
[161.34291077 252.36968994]
[170.39625549 264.32949829]
[182.53150940 273.14627075]
[194.66676331 281.96304321]
[206.80201721 290.77984619]
[218.93727112 299.59661865]
[231.07252502 308.41339111]
[247.07922363 307.33398438]
[257.79635620 319.27224731]
[255.00268555 335.07019043]
[240.84124756 342.60897827]
[226.17549133 336.10546875]
[222.25573730 320.54864502]
[210.12048340 311.73187256]
[197.98522949 302.91510010]
[185.84997559 294.09829712]
[173.71472168 285.28152466]
[161.57946777 276.46475220]
[154.86381531 279.80392456]
[141.43251038 286.48223877]
[134.71685791 289.82138062]
[134.42234802 304.81851196]
[141.88720703 318.76791382]
[133.90151978 331.34082031]
[133.60700989 346.33795166]
[133.31250000 361.33505249]
[133.01800537 376.33215332]
[132.72349548 391.32925415]
[132.42898560 406.32638550]
[132.13449097 421.32348633]
[131.98722839 436.32275391]
[131.98722839 451.32275391]
[131.98722839 466.32275391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[11 150]
[13 148]
[14 147]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[21 122]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[85 116]
[86 115]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[95 108]
[96 107]
[97 106]
[98 105]
[128 144]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
