%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUAACUCGAACUCCAGGCUGUCAUGGCGGCAGGACGGCGAACUUGCAGUAUCUCCACGACCCGCCCCUACAGGUGCCAGUGCCUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[87.71928406 217.64378357]
[95.91787720 203.44114685]
[95.42192841 188.44934082]
[94.92597961 173.45755005]
[94.43003082 158.46574402]
[78.95625305 154.83091736]
[65.02387238 147.17985535]
[53.65340805 136.07299805]
[45.67770386 122.32389832]
[41.68096542 106.93962097]
[41.95594025 91.04703522]
[27.54463768 86.88599396]
[13.13333130 82.72495270]
[0.89652151 92.08265686]
[-14.32609940 92.43649292]
[-26.69189072 83.86029816]
[-31.57801819 69.81523132]
[-45.98932266 65.65419006]
[-60.40063095 61.49314499]
[-72.17808533 67.06196594]
[-84.18308258 63.15690994]
[-90.04252625 52.43255997]
[-104.30837250 47.79730606]
[-118.57421875 43.16205215]
[-132.84007263 38.52679443]
[-147.10591125 33.89154053]
[-163.02546692 37.82852173]
[-174.19822693 25.82429123]
[-169.13061523 10.22777462]
[-153.03575134 7.08333111]
[-142.47065735 19.62569427]
[-128.20481873 24.26094818]
[-113.93896484 28.89620399]
[-99.67311859 33.53145981]
[-85.40727234 38.16671371]
[-68.57028961 33.53082657]
[-56.23958588 47.08184052]
[-41.82828140 51.24288559]
[-27.41697502 55.40392685]
[-15.79638195 46.12493134]
[-0.76235777 45.46000671]
[11.92882252 53.87352753]
[17.29437447 68.31364441]
[31.70568085 72.47469330]
[46.11698532 76.63573456]
[51.21429443 67.30101776]
[57.91154099 59.03867722]
[65.98908997 52.11967087]
[75.18202972 46.77090454]
[85.18888092 43.16780090]
[95.68146515 41.42852020]
[106.31567383 41.61009979]
[116.74276733 43.70658875]
[126.62077332 47.64923477]
[135.62574768 53.30873108]
[143.46235657 60.49947739]
[149.87362671 68.98564911]
[154.64927673 78.48894501]
[157.63269043 88.69770050]
[158.72602844 99.27711487]
[173.62565613 101.00938416]
[188.52529907 102.74165344]
[197.16558838 91.85887146]
[209.97299194 86.75538635]
[223.51440430 88.68261719]
[234.21760559 97.02277374]
[239.31359863 109.48087311]
[254.14782715 111.70482635]
[268.98202515 113.92877960]
[283.81625366 116.15273285]
[296.37435913 106.55745697]
[312.02789307 108.73528290]
[321.48986816 121.39414215]
[319.14666748 137.02375793]
[306.38845825 146.35136414]
[290.78448486 143.84304810]
[281.59231567 130.98695374]
[266.75808716 128.76300049]
[251.92385864 126.53903961]
[237.08964539 124.31508636]
[226.05244446 136.34248352]
[209.87307739 139.52331543]
[194.80572510 132.42889404]
[186.79302979 117.64129639]
[171.89338684 115.90902710]
[156.99375916 114.17675781]
[147.37191772 134.71556091]
[130.68504333 150.07690430]
[109.42182922 157.96980286]
[109.91777802 172.96159363]
[110.41372681 187.95339966]
[110.90968323 202.94519043]
[120.02901459 216.57493591]
[112.54321289 231.16584778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[5 89]
[11 45]
[12 44]
[13 43]
[17 39]
[18 38]
[19 37]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[60 86]
[61 85]
[62 84]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
