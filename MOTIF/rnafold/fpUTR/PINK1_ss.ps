%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGAGGCACCGCCCCAAGUUUGUUGUGACCGGCGGGGGACGCCGGUGGUGGCGGCAGCGGCGGCUGCGGGGGCACCGGGCCGCGGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[105.00602722 216.35269165]
[89.72264862 214.83146667]
[77.25684357 205.85932922]
[70.96184540 191.84973145]
[72.53097534 176.57121277]
[81.54214478 164.13359070]
[95.57139587 157.88253784]
[97.05707550 142.95628357]
[98.54276276 128.03004456]
[79.90639496 114.27180481]
[79.62376404 94.05925751]
[67.63594818 85.04304504]
[55.64812851 76.02682495]
[43.66030884 67.01060486]
[31.67248726 57.99438858]
[19.53723335 49.17761230]
[7.25786114 40.56268311]
[10.76600933 55.14667511]
[7.78417730 69.84731293]
[-1.12925887 81.91175079]
[-14.30517006 89.08080292]
[-29.27623749 90.01200104]
[-43.23898315 84.53096771]
[-53.57874298 73.66407776]
[-58.35929871 59.44625854]
[-56.68544388 44.53994751]
[-48.87062454 31.73648643]
[-36.37823868 23.43345642]
[-21.54761124 21.18567657]
[-7.15893888 25.41240692]
[-15.15441513 12.72097778]
[-23.14989090 0.02954938]
[-31.14536667 -12.66187954]
[-39.14084244 -25.35330772]
[-47.13631821 -38.04473877]
[-55.13179398 -50.73616409]
[-70.39555359 -55.67551041]
[-75.91555786 -70.73901367]
[-67.45732117 -84.37124634]
[-51.50928116 -86.11473083]
[-40.30541611 -74.63200378]
[-42.44036484 -58.73163986]
[-34.44488907 -46.04021454]
[-26.44941330 -33.34878540]
[-18.45393753 -20.65735626]
[-10.45846176 -7.96592665]
[-2.46298623 4.72550201]
[5.53248978 17.41693115]
[15.87279129 28.28330994]
[28.15216255 36.89823914]
[35.58245087 38.18793488]
[40.68870544 46.00656891]
[52.67652512 55.02278900]
[64.66434479 64.03900146]
[76.65216827 73.05522156]
[88.63998413 82.07144165]
[104.95605469 77.02272797]
[121.55358124 85.84365845]
[127.53006744 105.46832275]
[142.36428833 107.69227600]
[157.15908813 102.08655548]
[168.59854126 111.62532806]
[183.43275452 113.84928894]
[198.26698303 116.07324219]
[213.10119629 118.29719543]
[227.93540955 120.52114868]
[242.76963806 122.74510193]
[251.92445374 120.90278625]
[258.05432129 125.29566956]
[272.80688477 128.00888062]
[287.55944824 130.72207642]
[301.53131104 122.83749390]
[316.35247803 128.97853088]
[320.65344238 144.43432617]
[311.13485718 157.34849548]
[295.09857178 157.81440735]
[284.84625244 145.47465515]
[270.09368896 142.76144409]
[255.34109497 140.04824829]
[240.54568481 137.57933044]
[225.71145630 135.35536194]
[210.87724304 133.13140869]
[196.04302979 130.90745544]
[181.20880127 128.68350220]
[166.37458801 126.45954895]
[152.64082336 132.22434998]
[140.14033508 122.52649689]
[125.30611420 120.30253601]
[113.46900177 129.51573181]
[111.98332214 144.44197083]
[110.49763489 159.36820984]
[123.01944733 168.26202393]
[129.40214539 182.23188782]
[127.92883301 197.51994324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 91]
[8 90]
[9 89]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 50]
[17 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[59 88]
[60 87]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
