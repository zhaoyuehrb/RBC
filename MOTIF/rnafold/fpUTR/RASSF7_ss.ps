%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGCUGGGGGCGGCAGGUUGCGGCGGCGCCGGAGCGGGUCUCCAGGCUGGCGAGCGCCCAGGACAGGC\
) } def
/len { sequence length } bind def

/coor [
[133.75596619 140.23941040]
[122.57923126 130.23536682]
[111.40249634 120.23133850]
[100.22576141 110.22731018]
[92.33932495 107.50695038]
[88.78848267 99.52501678]
[78.06520844 89.03639221]
[67.34192657 78.54776764]
[56.61864471 68.05914307]
[45.89536667 57.57051468]
[35.17208481 47.08189011]
[24.44880676 36.59326553]
[13.72552586 26.10463905]
[2.87757397 28.99593163]
[-8.07881260 26.95909691]
[-17.02931404 20.45934868]
[-22.27777481 10.81608105]
[-22.86744499 -0.06443392]
[-18.75466347 -10.06575108]
[-27.99539566 -21.88137054]
[-37.23612976 -33.69699097]
[-51.83244324 -39.80094147]
[-53.57833099 -54.59286880]
[-62.81906128 -66.40848541]
[-72.05979156 -78.22410583]
[-81.30052948 -90.03972626]
[-95.82095337 -98.79149628]
[-91.43086243 -115.16719818]
[-74.47983551 -115.48191071]
[-69.48490906 -99.28046417]
[-60.24417496 -87.46484375]
[-51.00344086 -75.64922333]
[-41.76271057 -63.83360291]
[-27.82735634 -58.57478333]
[-25.42050934 -42.93772125]
[-16.17977715 -31.12210274]
[-6.93904448 -19.30648232]
[12.24077225 -18.73164368]
[25.38673973 -4.35587072]
[24.21415138 15.38135910]
[34.93743134 25.86998367]
[45.66071320 36.35860825]
[56.38399124 46.84723663]
[67.10726929 57.33586121]
[77.83055115 67.82448578]
[88.55383301 78.31311035]
[99.27711487 88.80173492]
[110.22979736 99.05057526]
[121.40653229 109.05461121]
[132.58326721 119.05863953]
[143.75999451 129.06266785]
[151.78388977 126.70314789]
[160.04144287 127.47596741]
[167.36354065 131.21966553]
[172.73280334 137.35588074]
[175.42486572 144.97813416]
[175.10585022 152.98547363]
[171.87284851 160.24151611]
[180.58189392 172.45431519]
[189.29093933 184.66712952]
[204.89334106 185.71549988]
[216.13572693 196.58485413]
[217.70977783 212.14302063]
[208.87228394 225.04389954]
[193.79603577 229.19609070]
[179.59956360 222.63906860]
[172.98603821 208.46884155]
[177.07814026 193.37617493]
[168.36909485 181.16336060]
[159.66004944 168.95056152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[19 37]
[20 36]
[21 35]
[23 33]
[24 32]
[25 31]
[26 30]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
