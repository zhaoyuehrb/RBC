%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGCGCGCCGCGCGUGGGACAAUCGUAAAAGGGGCGGGACGCGCCGCGCUCGGGAUGUCGUGAAGCUGGGGGAGCUCGUCGCCGCCGCCGGCGGCUAGCGGGCGUCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[61.72662354 109.55052948]
[46.74788284 110.34886169]
[31.76914215 111.14719391]
[16.79040146 111.94552612]
[1.81166184 112.74385834]
[-8.72585201 124.21549988]
[-23.92779732 124.81174469]
[-34.79931641 114.69513702]
[-49.77805710 115.49346924]
[-64.75679779 116.29180908]
[-79.73553467 117.09014130]
[-94.71427917 117.88847351]
[-109.68106079 118.88612366]
[-124.63323975 120.08291626]
[-133.06304932 123.92938995]
[-139.99848938 121.10712433]
[-154.97723389 121.90545654]
[-169.95596313 122.70378876]
[-176.19813538 138.58139038]
[-188.66860962 150.14352417]
[-204.86735535 155.13706970]
[-221.57485962 152.61930847]
[-235.49203491 143.13546753]
[-243.89163208 128.60156250]
[-258.80664062 130.19595337]
[-271.73068237 140.29058838]
[-286.83142090 133.89533997]
[-288.57455444 117.58909607]
[-275.16687012 108.14632416]
[-260.40106201 115.28093719]
[-245.48602295 113.68653107]
[-242.08811951 101.00807190]
[-234.53295898 90.23526001]
[-223.71731567 82.68520355]
[-210.93823242 79.29021454]
[-197.73747253 80.48267365]
[-185.71548462 86.14012909]
[-176.33734131 95.59747314]
[-170.75430298 107.72505188]
[-155.77555847 106.92671204]
[-140.79681396 106.12837982]
[-125.83003235 105.13072968]
[-110.87785339 103.93394470]
[-104.37835693 100.21613312]
[-95.51261139 102.90972900]
[-80.53386688 102.11139679]
[-65.55513000 101.31306458]
[-50.57638931 100.51473236]
[-35.59764862 99.71640015]
[-25.86304855 88.50153351]
[-10.68384838 87.47853851]
[1.01332927 97.76512146]
[15.99206924 96.96678925]
[30.97080994 96.16844940]
[45.94955063 95.37011719]
[60.92829132 94.57178497]
[62.68726349 87.20063782]
[65.82329559 80.30185699]
[70.22064972 74.13005066]
[75.71704102 68.91299438]
[82.10961151 64.84323883]
[89.16243744 62.07097244]
[96.61524200 60.69850922]
[104.19295502 60.77649689]
[111.61592865 62.30206680]
[118.61020660 65.21891022]
[124.91765594 69.41938019]
[130.30549622 74.74845123]
[134.57489014 81.00946045]
[137.56826782 87.97132874]
[139.17515564 95.37712097]
[139.33625793 102.95352936]
[153.80776978 106.90006256]
[169.15744019 103.06623077]
[179.40058899 113.87950134]
[193.87211609 117.82604218]
[208.34362793 121.77258301]
[223.69329834 117.93874359]
[233.93646240 128.75201416]
[248.40797424 132.69856262]
[262.87948608 136.64509583]
[277.35101318 140.59162903]
[291.82254028 144.53817749]
[306.29403687 148.48471069]
[323.91567993 143.34970093]
[335.84326172 156.14717102]
[350.41473389 159.70706177]
[364.98617554 163.26696777]
[379.55761719 166.82687378]
[394.12905884 170.38676453]
[408.70053101 173.94667053]
[425.52209473 171.83212280]
[432.21066284 187.41093445]
[419.09225464 198.15075684]
[405.14062500 188.51811218]
[390.56918335 184.95822144]
[375.99771118 181.39831543]
[361.42626953 177.83840942]
[346.85482788 174.27851868]
[332.28338623 170.71861267]
[321.70407104 176.74783325]
[309.47323608 173.80761719]
[302.34750366 162.95623779]
[287.87597656 159.00968933]
[273.40447998 155.06315613]
[258.93295288 151.11660767]
[244.46144104 147.17007446]
[229.98991394 143.22354126]
[215.67535400 147.33966064]
[204.39709473 136.24409485]
[189.92556763 132.29756165]
[175.45405579 128.35102844]
[161.13949585 132.46714783]
[149.86123657 121.37158203]
[135.38970947 117.42504883]
[119.02899170 134.55374146]
[95.80704498 139.22349548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 43]
[14 42]
[16 41]
[17 40]
[18 39]
[24 31]
[25 30]
[72 115]
[73 114]
[75 112]
[76 111]
[77 110]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
