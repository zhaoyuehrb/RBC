%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAACCCACCUGCAGGAACCAACUCCGGACACAACACCAGCAUUAAAACAAUUUUUUUUUGUCUGUUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[56.95922852 183.71435547]
[66.80009460 171.34774780]
[64.86887360 156.47259521]
[62.93764877 141.59744263]
[61.00642395 126.72227478]
[61.97797012 141.69078064]
[55.04637146 154.99314880]
[42.22134781 162.77252197]
[27.22134781 162.77339172]
[14.39542198 154.99549866]
[7.46227789 141.69393921]
[8.43208790 126.72532654]
[17.02367020 114.42960358]
[30.74600601 108.37176514]
[45.61823654 110.30722809]
[30.89863968 107.42045593]
[16.17904282 104.53368378]
[3.20337558 113.55629730]
[-12.33676529 110.67887878]
[-21.22169113 97.60854340]
[-18.18013000 82.09969330]
[-5.01658821 73.35345459]
[10.45923805 76.55880737]
[19.06581688 89.81408691]
[33.78541565 92.70085907]
[48.50501251 95.58763123]
[58.28349686 84.21304321]
[53.22065353 70.09328461]
[38.28812790 65.87435913]
[28.71375656 53.66325760]
[28.17907906 38.15539551]
[36.88969040 25.31386757]
[51.49618149 20.07649803]
[66.38205719 24.45716667]
[75.82340240 36.77141571]
[76.18981934 52.28416443]
[67.34041595 65.03044128]
[72.40325928 79.15019989]
[100.46678162 69.74357605]
[121.16351318 85.01322174]
[135.38893127 80.25535583]
[149.61436462 75.49748230]
[156.71693420 61.63417816]
[171.21131897 57.01166916]
[184.38407898 63.86832047]
[198.60951233 59.11045074]
[212.83493042 54.35258102]
[227.06036377 49.59471130]
[235.47836304 35.93759537]
[251.42117310 34.14709473]
[262.65887451 45.59672928]
[260.57080078 61.50331879]
[246.75880432 69.66468811]
[231.81822205 63.82013702]
[217.59280396 68.57800293]
[203.36738586 73.33587646]
[189.14195251 78.09374237]
[182.74493408 91.49575043]
[168.38612366 96.52355194]
[154.37223816 89.72290802]
[140.14680481 94.48078156]
[125.92138672 99.23864746]
[120.86338043 119.87888336]
[100.60090637 131.69682312]
[75.88158417 124.79105377]
[77.81280518 139.66621399]
[79.74402618 154.54136658]
[81.67525482 169.41653442]
[94.34772491 178.86026001]
[96.54808807 194.51063538]
[86.97090149 207.08255005]
[71.29814911 209.11732483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[15 26]
[16 25]
[17 24]
[27 38]
[28 37]
[40 62]
[41 61]
[42 60]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
