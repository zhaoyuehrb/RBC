%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCGCGCCCCCCGCGCACGGACCCCCAUUACACUCGCGUCCCAGGCGGGGUCGACCCAGACGAGCCACGGGGCGGCGCAGAGCCCCACUCGCAGGGCGGCCGGGACCCACGCGCGUGGGUCCACGCAACAACCUAUAGGUGACAAAACACUCAGGAAGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[342.55187988 145.06118774]
[332.28036499 143.92918396]
[322.89453125 139.89891052]
[315.18246460 133.38429260]
[309.76940918 125.00435638]
[307.06747437 115.52486420]
[292.09164429 114.67368317]
[277.11581421 113.82250977]
[262.13998413 112.97132874]
[247.16415405 112.12014771]
[232.18095398 111.41071320]
[217.19169617 110.84309387]
[202.20243835 110.27547455]
[187.21318054 109.70784760]
[172.22392273 109.14022827]
[157.19573975 118.16583252]
[141.67791748 108.29019928]
[126.68060303 108.00634003]
[121.76847839 127.57540894]
[102.42625427 142.33889771]
[73.87109375 142.25914001]
[61.87071228 151.25863647]
[55.92924118 166.54362488]
[39.68232346 168.77290344]
[29.84338951 155.65316772]
[36.53389359 140.68087769]
[52.87121964 139.25825500]
[64.87159729 130.25875854]
[62.70295715 123.07913971]
[48.34371185 127.41642761]
[33.98439789 131.75349426]
[29.64755440 117.39411163]
[44.00642395 113.05718231]
[58.36566925 108.71989441]
[56.19702530 101.54026794]
[41.22119141 100.68909454]
[26.24536324 99.83791351]
[11.26953220 98.98673248]
[-3.70629787 98.13555145]
[-14.28900719 109.64817047]
[-29.80257988 111.61363220]
[-42.92198181 103.10391998]
[-47.45263290 88.13704681]
[-41.25529861 73.77992249]
[-27.25617027 66.81153870]
[-12.06520748 70.52214813]
[-2.85511875 83.15972137]
[12.12071133 84.01090240]
[27.09654236 84.86208344]
[42.07237244 85.71326447]
[57.04820251 86.56443787]
[61.92575836 72.37960815]
[49.59341812 63.84067535]
[37.26107788 55.30174255]
[21.75831032 58.37414932]
[8.67032528 49.51524353]
[5.76199532 33.98085785]
[14.75878048 20.98726654]
[30.32304764 18.24333763]
[43.22079086 27.37699509]
[45.80001450 42.96940231]
[58.13235474 51.50833511]
[70.46469116 60.04726791]
[100.62107086 57.59618378]
[121.70297241 72.37300110]
[126.96446228 93.00902557]
[141.96177673 93.29289246]
[151.80319214 84.91114807]
[164.31576538 85.48168182]
[172.79154968 94.15097046]
[187.78080750 94.71859741]
[202.77005005 95.28621674]
[217.75930786 95.85383606]
[232.74856567 96.42146301]
[241.48689270 93.60961151]
[248.01533508 97.14431763]
[262.99118042 97.99549866]
[277.96701050 98.84667969]
[292.94284058 99.69785309]
[307.91867065 100.54903412]
[314.61624146 86.67576599]
[327.15112305 76.94969177]
[343.15545654 73.72467041]
[359.36859131 78.07412720]
[364.11172485 63.84377670]
[368.85482788 49.61342621]
[373.59796143 35.38307571]
[364.46331787 22.83961678]
[364.47979736 7.32254982]
[373.64102173 -5.20149517]
[388.42431641 -9.91676807]
[403.14520264 -5.01014996]
[412.14321899 7.63166428]
[411.95840454 23.14763832]
[402.66186523 35.57156754]
[387.82830811 40.12619019]
[383.08517456 54.35654068]
[378.34207153 68.58689117]
[373.59893799 82.81723785]
[380.81033325 95.97003937]
[395.35864258 99.62334442]
[409.90695190 103.27664948]
[424.88278198 102.42547607]
[438.92346191 97.14725494]
[452.91354370 91.73641968]
[466.85180664 86.19344330]
[480.79010010 80.65046692]
[494.72836304 75.10749054]
[508.66662598 69.56450653]
[522.60491943 64.02153015]
[536.54315186 58.47855377]
[550.48144531 52.93557739]
[560.21820068 39.73981857]
[576.48193359 41.84283447]
[582.54193115 57.08121872]
[572.16418457 69.77902985]
[556.02441406 66.87384796]
[542.08612061 72.41682434]
[528.14788818 77.95980072]
[514.20959473 83.50278473]
[500.27133179 89.04576111]
[486.33306885 94.58873749]
[472.39480591 100.13171387]
[458.45651245 105.67469025]
[453.38076782 111.09237671]
[444.20166016 111.18792725]
[430.16098022 116.46614838]
[428.54153442 123.78921509]
[442.84497070 119.27121735]
[453.90930176 129.39941406]
[450.67007446 144.04548645]
[436.36657715 148.56317139]
[425.30264282 138.43536377]
[423.68319702 145.75843811]
[434.18896484 156.46492004]
[444.69473267 167.17141724]
[455.61465454 166.64738464]
[464.81838989 172.12881470]
[469.36807251 181.58329773]
[467.96875000 191.75964355]
[478.06182861 202.85603333]
[488.15490723 213.95240784]
[498.24798584 225.04878235]
[514.04449463 225.54580688]
[524.80175781 237.12406921]
[524.13775635 252.91441345]
[512.44641113 263.54867554]
[496.66397095 262.71777344]
[486.15390015 250.91462708]
[487.15161133 235.14186096]
[477.05853271 224.04548645]
[466.96545410 212.94911194]
[456.87234497 201.85273743]
[438.08572388 197.38522339]
[433.98822021 177.67718506]
[423.48248291 166.97068787]
[412.97671509 156.26419067]
[403.37915039 142.55105591]
[401.61862183 128.56443787]
[406.25363159 117.82496643]
[391.70532227 114.17165375]
[377.15701294 110.51834869]
[374.96865845 121.22662354]
[369.81088257 130.72729492]
[362.19268799 138.22831726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 80]
[7 79]
[8 78]
[9 77]
[10 76]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[17 67]
[18 66]
[21 28]
[22 27]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[52 63]
[53 62]
[54 61]
[84 99]
[85 98]
[86 97]
[87 96]
[100 162]
[101 161]
[102 160]
[103 127]
[104 126]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
[134 157]
[135 156]
[136 155]
[140 153]
[141 152]
[142 151]
[143 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
