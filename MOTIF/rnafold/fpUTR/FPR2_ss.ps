%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUCCAAUGGGAAGAAGAGAUCCAAUGGAUCCUCUAUCACGAAGAUAUUGAGAUAAGAACCAAUAUGGAUUUGCACCCACUGCAUUUGCAGCCUUGAGGUCAUAAGCAUCCUCAGGAAAAUGCACCAGGUGCUGCUGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[274.05310059 120.18360138]
[286.25253296 111.46099091]
[271.26681519 110.80669403]
[256.28109741 110.15240479]
[241.29537964 109.49811554]
[226.30964661 108.84382629]
[211.32392883 108.18953705]
[194.95170593 118.39381409]
[178.04972839 107.50000000]
[163.04972839 107.50000000]
[148.04972839 107.50000000]
[144.59609985 120.62647247]
[137.59265137 132.41604614]
[127.51405334 141.91940308]
[115.08564758 148.34709167]
[101.23151398 151.13481140]
[87.00586700 149.99211121]
[73.51280212 144.93069458]
[61.82065201 136.26933289]
[52.87745285 124.61478424]
[39.28283310 130.95405579]
[25.68821716 137.29333496]
[12.09360027 143.63259888]
[-1.50101614 149.97187805]
[-13.30085182 162.14562988]
[-28.26536751 154.17697144]
[-24.75071335 137.59132385]
[-7.84029007 136.37725830]
[5.75432682 130.03799438]
[19.34894371 123.69871521]
[32.94356155 117.35943604]
[46.53817749 111.02016449]
[45.55712891 96.05228424]
[31.25137520 91.54169464]
[16.94562149 87.03110504]
[2.54487395 82.83367157]
[-11.94401360 78.95138550]
[-26.43290138 75.06909943]
[-40.92178726 71.18681335]
[-55.47850037 77.93082428]
[-69.76211548 70.62617493]
[-72.81546021 54.87636185]
[-62.29627609 42.76329422]
[-46.27397919 43.57908630]
[-37.03950119 56.69792938]
[-22.55061531 60.58021545]
[-8.06172752 64.46250153]
[6.42715979 68.34478760]
[10.99654770 66.73412323]
[16.62779999 68.03109741]
[21.45620918 72.72535706]
[35.76196289 77.23593903]
[50.06771851 81.74652863]
[59.10185623 66.92670441]
[72.30664825 55.95116806]
[88.18119812 49.91107941]
[104.97074127 49.34548187]
[120.86042023 54.19522095]
[134.17150879 63.82222366]
[143.53868103 77.09068298]
[148.04972839 92.50000000]
[163.04972839 92.50000000]
[178.04972839 92.50000000]
[185.35275269 84.31121063]
[195.75473022 81.59128571]
[205.71415710 85.01410675]
[211.97822571 93.20381165]
[226.96394348 93.85810089]
[241.94966125 94.51239014]
[256.93539429 95.16668701]
[271.92111206 95.82097626]
[286.90682983 96.47526550]
[296.69085693 91.65107727]
[305.76062012 95.03282166]
[320.47241211 92.10646820]
[335.18417358 89.18010712]
[349.89596558 86.25375366]
[364.60775757 83.32740021]
[371.17623901 69.39323425]
[384.53399658 62.08406830]
[399.45779419 64.01907349]
[410.25131226 74.24832916]
[424.96310425 71.32197571]
[439.67489624 68.39562225]
[454.38665771 65.46926117]
[469.09844971 62.54290771]
[483.81021118 59.61655426]
[498.52200317 56.69020081]
[501.85534668 48.85330963]
[507.97830200 43.07090759]
[515.81500244 40.25497437]
[524.02935791 40.80525208]
[531.25256348 44.55425644]
[536.31152344 50.80785370]
[551.22241211 49.17485046]
[566.13323975 47.54184723]
[581.04406738 45.90884399]
[595.95489502 44.27584076]
[610.86578369 42.64283752]
[625.77661133 41.00983429]
[631.88885498 26.91954231]
[644.23687744 17.78599358]
[659.49914551 16.06607056]
[673.57019043 22.22242355]
[682.66503906 34.59902191]
[684.33709717 49.86662674]
[678.13665771 63.91832733]
[665.73162842 72.97428894]
[650.45886230 74.59849548]
[636.42663574 68.35404968]
[627.40960693 55.92068100]
[612.49877930 57.55368423]
[597.58795166 59.18668747]
[582.67706299 60.81969070]
[567.76623535 62.45269394]
[552.85540771 64.08569336]
[537.94451904 65.71869659]
[521.97686768 80.28938293]
[501.44836426 71.40197754]
[486.73657227 74.32833099]
[472.02478027 77.25469208]
[457.31301880 80.18104553]
[442.60122681 83.10739899]
[427.88946533 86.03375244]
[413.17767334 88.96010590]
[407.12033081 102.54121399]
[394.07302856 110.04001617]
[378.93496704 108.39901733]
[367.53408813 98.03917694]
[352.82232666 100.96553802]
[338.11053467 103.89189148]
[323.39877319 106.81824493]
[308.68698120 109.74459839]
[322.07373047 116.51181030]
[331.38705444 128.27029419]
[334.90890503 142.85099792]
[331.98962402 157.56417847]
[323.16775513 169.69572449]
[310.07061768 177.00772095]
[295.11428833 178.15132141]
[281.05770874 172.91557312]
[270.49395752 162.26631165]
[265.37167358 148.16801453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[9 63]
[10 62]
[11 61]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[33 53]
[34 52]
[35 51]
[36 48]
[37 47]
[38 46]
[39 45]
[74 133]
[75 132]
[76 131]
[77 130]
[78 129]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
