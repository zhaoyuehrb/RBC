%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCGAUCAUGUGACAGUCCGGAGGCCAGAACCGGGCAGGUUGCUUGAAGCGCAGGGGUUUGACAAAAACAAACGGUGACGGCGCCGCGGAAGGGUCU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 202.93638611]
[92.50000000 187.93638611]
[92.50000000 172.93638611]
[92.50000000 157.93638611]
[92.50000000 142.93638611]
[92.50000000 127.93638611]
[81.38426208 122.13923645]
[73.76536560 112.18340302]
[71.07444763 99.93899536]
[56.59566879 96.01917267]
[42.11689377 92.09934235]
[26.77432632 95.96149445]
[16.51123238 85.16713715]
[2.03245687 81.24730682]
[-12.44631863 77.32748413]
[-26.92509460 73.40765381]
[-41.40386963 69.48782349]
[-58.98806381 74.66886139]
[-70.96513367 61.94678116]
[-85.55881500 58.47913742]
[-100.15248871 55.01149368]
[-114.74617004 51.54384613]
[-129.33984375 48.07620239]
[-143.93353271 44.60855865]
[-154.97697449 55.38100815]
[-170.09591675 58.45043564]
[-184.46592712 52.83739853]
[-193.50160217 40.33299637]
[-194.31970215 24.92733955]
[-186.65914917 11.53631592]
[-172.96441650 4.43295240]
[-157.60543823 5.88390636]
[-145.48320007 15.42618370]
[-140.46588135 30.01487923]
[-125.87220001 33.48252487]
[-111.27852631 36.95016861]
[-96.68484497 40.41781235]
[-82.09117126 43.88545990]
[-67.49748993 47.35310364]
[-56.92575073 41.24931335]
[-44.65290833 44.14791489]
[-37.48403931 55.00904846]
[-23.00526619 58.92887497]
[-8.52648926 62.84870529]
[5.95228577 66.76853180]
[20.43106079 70.68836212]
[34.73801041 66.54583740]
[46.03672028 77.62056732]
[60.51549911 81.54039764]
[74.99427032 85.46022034]
[90.41717529 72.70785522]
[110.42697144 73.01908875]
[125.44581604 86.24493408]
[140.03948975 82.77728271]
[154.63317871 79.30963898]
[154.34178162 73.55818939]
[155.87129211 67.48431396]
[159.35104370 61.67383194]
[164.72239685 56.75146103]
[171.72935486 53.32124329]
[185.01953125 46.36629105]
[198.30970764 39.41133881]
[211.59986877 32.45638657]
[224.89004517 25.50143242]
[228.06469727 10.18949032]
[240.37091064 0.54112208]
[255.99807739 1.11199164]
[267.56750488 11.63255215]
[269.61648560 27.13531685]
[261.17755127 40.30035400]
[246.23529053 44.91153717]
[231.84500122 38.79160309]
[218.55482483 45.74655533]
[205.26464844 52.70150757]
[191.97448730 59.65646362]
[178.68431091 66.61141205]
[179.15081787 81.60415649]
[192.84765625 87.71941376]
[206.54450989 93.83467102]
[220.24136353 99.94992065]
[236.48754883 97.71540070]
[246.33073425 110.83195496]
[239.64506531 125.80639648]
[223.30819702 127.23430634]
[214.12609863 113.64677429]
[200.42926025 107.53151703]
[186.73240662 101.41625977]
[173.03555298 95.30101013]
[158.10081482 93.90332031]
[143.50714111 97.37096405]
[128.91346741 100.83860779]
[127.18307495 109.88796997]
[122.69487762 117.93415833]
[115.90420532 124.16087341]
[107.50000000 127.93638611]
[107.50000000 142.93638611]
[107.50000000 157.93638611]
[107.50000000 172.93638611]
[107.50000000 187.93638611]
[107.50000000 202.93638611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[9 50]
[10 49]
[11 48]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[53 91]
[54 90]
[55 89]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
