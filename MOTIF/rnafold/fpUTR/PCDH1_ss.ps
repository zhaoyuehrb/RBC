%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACUCGGGGAGCGGGAGCGCGGCGCGGACGCAAAGCCGCCGGGCUGCUGCGCCCAGAGCCAGCCGGAGCCGGAGCCGGAGCCCGAACUGCAGCUCCAGCCCCAGCCGUGCGGAGCCGCAGCCCAGGCCGGGGCCGGCGGCGGCUC\
) } def
/len { sequence length } bind def

/coor [
[113.62708282 122.50554657]
[105.50624847 125.72698975]
[96.77826691 126.11163330]
[88.40552521 123.61705017]
[81.31126404 118.51831055]
[76.27772522 111.37763977]
[61.46488571 113.73977661]
[46.65204239 116.10190582]
[34.24249268 125.91586304]
[20.45558357 120.27933502]
[5.64274120 122.64147186]
[-9.17010212 125.00360107]
[-21.57965088 134.81755066]
[-35.36656189 129.18103027]
[-50.17940140 131.54316711]
[-64.99224854 133.90530396]
[-79.80509186 136.26742554]
[-92.21463776 146.08139038]
[-106.00154877 140.44485474]
[-120.81439209 142.80699158]
[-135.62722778 145.16912842]
[-148.03678894 154.98307800]
[-161.82368469 149.34655762]
[-176.63653564 151.70867920]
[-191.44937134 154.07081604]
[-206.26222229 156.43295288]
[-221.04933167 158.95111084]
[-235.80908203 161.62503052]
[-241.60748291 175.92124939]
[-254.22767639 184.79447937]
[-269.64263916 185.41328430]
[-282.93347168 177.58021545]
[-289.85916138 163.79476929]
[-288.20971680 148.45584106]
[-278.51147461 136.45800781]
[-263.85910034 131.62976074]
[-248.92814636 135.51176453]
[-238.48300171 146.86528015]
[-223.72325134 144.19136047]
[-217.66116333 139.87498474]
[-208.62435913 141.62011719]
[-193.81150818 139.25798035]
[-178.99867249 136.89584351]
[-164.18582153 134.53370667]
[-152.83578491 124.88871002]
[-137.98936462 130.35627747]
[-123.17652130 127.99414825]
[-108.36367798 125.63201141]
[-97.01364899 115.98702240]
[-82.16722107 121.45458984]
[-67.35437775 119.09245300]
[-52.54153824 116.73032379]
[-37.72869492 114.36818695]
[-26.37865829 104.72319031]
[-11.53223610 110.19075775]
[3.28060675 107.82862854]
[18.09345055 105.46649170]
[29.44348526 95.82149506]
[44.28990936 101.28906250]
[59.10275269 98.92693329]
[73.91559601 96.56479645]
[84.70215607 78.59503174]
[105.19660187 74.20867920]
[122.39333344 86.18929291]
[136.87538147 82.28155518]
[151.35742188 78.37381744]
[165.83946228 74.46607971]
[180.32150269 70.55834198]
[188.23199463 57.13962936]
[202.97451782 53.38293076]
[215.71846008 61.00706863]
[230.20050049 57.09933090]
[244.68254089 53.19159317]
[259.16458130 49.28385544]
[273.64663696 45.37612152]
[281.55712891 31.95740509]
[296.29965210 28.20070648]
[309.04357910 35.82484436]
[323.52563477 31.91710663]
[338.00765991 28.00936890]
[352.48971558 24.10163307]
[356.26385498 20.30140686]
[360.68399048 18.55131340]
[364.84283447 18.74784279]
[368.01132202 20.43574142]
[382.71142578 17.45124817]
[389.49627686 1.99264681]
[404.00186157 -6.31530666]
[420.43930054 -4.38434362]
[432.38290405 6.83215427]
[447.01681519 3.53840351]
[461.65072632 0.24465294]
[476.28463745 -3.04909778]
[488.04901123 -13.62784767]
[502.16464233 -8.87408352]
[516.79852295 -12.16783428]
[531.43243408 -15.46158504]
[546.06634521 -18.75533485]
[560.70025635 -22.04908562]
[568.44750977 -27.01795959]
[575.67730713 -25.25457191]
[590.37744141 -28.23906326]
[595.87310791 -42.65436554]
[608.30346680 -51.79168701]
[623.70190430 -52.73534775]
[637.15496826 -45.18422699]
[644.36975098 -31.54785919]
[643.04406738 -16.17756081]
[633.60089111 -3.97793698]
[619.05358887 1.15815592]
[604.04412842 -2.40819049]
[593.36193848 -13.53896809]
[578.66180420 -10.55447578]
[563.99401855 -7.41517973]
[549.36010742 -4.12142897]
[534.72619629 -0.82767856]
[520.09228516 2.46607208]
[505.45837402 5.75982285]
[494.74072266 16.10298157]
[479.57836914 11.58480835]
[464.94445801 14.87855911]
[450.31057739 18.17230988]
[435.67666626 21.46606064]
[431.53408813 34.19712830]
[421.55017090 43.27889633]
[408.27313232 46.24821854]
[395.16430664 42.22091293]
[385.69592285 32.15134430]
[370.99581909 35.13583755]
[356.39746094 38.58367538]
[341.91540527 42.49141312]
[327.43338013 46.39915085]
[312.95132446 50.30688858]
[305.77246094 63.30686569]
[291.14126587 67.47616577]
[277.55438232 59.85816193]
[263.07232666 63.76589966]
[248.59028625 67.67363739]
[234.10824585 71.58137512]
[219.62619019 75.48911285]
[212.44732666 88.48908997]
[197.81613159 92.65839386]
[184.22924805 85.04039001]
[169.74719238 88.94812775]
[155.26515198 92.85586548]
[140.78311157 96.76360321]
[126.30107117 100.67134094]
[124.63117981 109.24671936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 61]
[7 60]
[8 59]
[10 57]
[11 56]
[12 55]
[14 53]
[15 52]
[16 51]
[17 50]
[19 48]
[20 47]
[21 46]
[23 44]
[24 43]
[25 42]
[26 41]
[27 39]
[28 38]
[64 147]
[65 146]
[66 145]
[67 144]
[68 143]
[71 140]
[72 139]
[73 138]
[74 137]
[75 136]
[78 133]
[79 132]
[80 131]
[81 130]
[85 129]
[86 128]
[90 123]
[91 122]
[92 121]
[93 120]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
