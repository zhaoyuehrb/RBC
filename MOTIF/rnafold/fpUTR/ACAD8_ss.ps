%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCGCAACGGAGGUCGAAGGCGUUCAGACUCUUAGCUGAACGCGGAGCUGCGGCGGCU\
) } def
/len { sequence length } bind def

/coor [
[84.77701569 235.69888306]
[68.56697845 233.21559143]
[62.86547089 217.83947754]
[73.53771973 205.38816833]
[75.80913544 190.56114197]
[78.08055115 175.73411560]
[67.62519836 167.09143066]
[62.86144257 154.27342224]
[65.17136383 140.68421936]
[74.04271698 129.99154663]
[87.17749786 125.13690186]
[90.19697571 110.44395447]
[85.96926880 97.11660767]
[95.11006927 86.53656769]
[98.12954712 71.84362030]
[93.32858276 56.76842880]
[103.46948242 45.85919189]
[106.48896027 31.16624451]
[99.85243988 23.51717186]
[97.75757599 13.75410175]
[100.59051514 4.32675648]
[107.51808167 -2.46615219]
[116.72669220 -5.03730106]
[121.93626404 -19.10358238]
[127.14584351 -33.16986465]
[132.35542297 -47.23614883]
[137.56500244 -61.30242920]
[142.77458191 -75.36871338]
[147.98416138 -89.43498993]
[153.19374084 -103.50127411]
[144.47752380 -116.33900452]
[145.00543213 -131.84709167]
[154.57447815 -144.06237793]
[169.50515747 -148.28782654]
[184.05632019 -142.89865112]
[192.63276672 -129.96713257]
[191.93664551 -114.46567535]
[182.23565674 -102.35491943]
[167.26002502 -98.29169464]
[162.05044556 -84.22541046]
[156.84086609 -70.15913391]
[151.63128662 -56.09284973]
[146.42170715 -42.02656937]
[141.21212769 -27.96028709]
[136.00254822 -13.89400482]
[130.79296875 0.17227761]
[136.60218811 19.72272110]
[121.18191528 34.18572235]
[118.16243744 48.87866974]
[123.17936707 62.90292358]
[112.82250214 74.86309814]
[109.80302429 89.55604553]
[114.03073120 102.88339233]
[104.88993073 113.46343231]
[101.87045288 128.15638733]
[113.36982727 140.30097961]
[115.48719788 156.72640991]
[107.60106659 171.10319519]
[92.90757751 178.00553894]
[90.63616180 192.83256531]
[88.36474609 207.65957642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 61]
[5 60]
[6 59]
[11 55]
[12 54]
[14 52]
[15 51]
[17 49]
[18 48]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
