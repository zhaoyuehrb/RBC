%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGCGCUCCAUGGCCGCGCCGUAACGGGGACCCAGCCGCCUCCCCGCCCAGCCCAGCCCAGCCCUUCCGCCCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[98.75589752 310.54144287]
[103.05166626 295.72424316]
[114.69129181 285.59890747]
[112.42893219 270.77047729]
[110.16656494 255.94207764]
[107.90419769 241.11366272]
[105.64183807 226.28526306]
[103.37947083 211.45684814]
[90.93168640 208.05104065]
[80.71311188 200.09165955]
[74.31732941 188.77381897]
[72.75945282 175.81982422]
[76.31515503 163.21714783]
[84.47275543 152.91346741]
[96.00648499 146.51564026]
[94.87204742 131.55859375]
[93.73761749 116.60155487]
[82.37084198 102.01046753]
[90.16048431 85.23473358]
[87.89811707 70.40632629]
[74.27316284 63.21836853]
[67.57157135 49.54569244]
[70.17518616 34.72391129]
[80.87908936 24.40090370]
[78.61672211 9.57249546]
[63.01218414 -0.81200343]
[59.75017166 -18.95264244]
[70.39264679 -33.61690521]
[67.01530457 -48.23174667]
[63.63796997 -62.84658813]
[60.26062775 -77.46143341]
[56.88328934 -92.07627106]
[53.50595093 -106.69110870]
[38.79398346 -111.10173035]
[28.27003670 -122.28842926]
[24.76500130 -137.24203491]
[29.22171402 -151.94010925]
[40.44134140 -162.42892456]
[55.40585709 -165.88706970]
[70.08988953 -161.38430786]
[80.54349518 -150.13186646]
[83.95471954 -135.15658569]
[79.40595245 -120.48674011]
[68.12078857 -110.06845093]
[71.49813080 -95.45361328]
[74.87547302 -80.83876801]
[78.25280762 -66.22393036]
[81.63014984 -51.60908890]
[85.00748444 -36.99424744]
[96.02497864 -33.05560684]
[103.76450348 -24.11942863]
[106.13797760 -12.41433525]
[102.41575623 -0.93808830]
[93.44512939 7.31013107]
[95.70749664 22.13854027]
[109.00271606 28.80000877]
[115.90769196 42.17107010]
[113.58816528 57.22009659]
[102.72652435 68.14395905]
[104.98889160 82.97237396]
[113.57471466 88.57387543]
[117.62915802 97.98953247]
[115.79881287 108.07630920]
[108.69466400 115.46712494]
[109.82909393 130.42416382]
[110.96352386 145.38121033]
[126.81584930 152.44651794]
[136.97897339 166.40731812]
[138.81356812 183.49006653]
[131.91705322 199.13081360]
[118.20787811 209.19448853]
[120.47024536 224.02288818]
[122.73261261 238.85130310]
[124.99497223 253.67971802]
[127.25733948 268.50811768]
[129.51969910 283.33651733]
[143.64913940 289.53030396]
[152.16792297 302.39239502]
[152.35775757 317.81860352]
[144.15806580 330.88644409]
[130.18533325 337.42602539]
[114.89820099 335.35058594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[15 66]
[16 65]
[17 64]
[19 60]
[20 59]
[24 55]
[25 54]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
