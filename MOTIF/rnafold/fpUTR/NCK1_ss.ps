%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCGCGUGCCCCGCCUCUCUCCCAAGAGCUACGCGGCGGCGGCGGAGCGCAGGCCUCGUGCCGUUACGGCCAUCACGGCGGCCGCAGUGGCGUCCUGGAGCCCUCCUCAGGUGAGCUGGAGCUGCCCGGCUCGGCAGCGGGAAGUGCUGAAGCUGCUGAAAG\
) } def
/len { sequence length } bind def

/coor [
[86.94199371 153.70333862]
[81.78548431 139.61750793]
[84.04026794 124.78794861]
[93.14940643 112.87207031]
[80.01858521 120.12339020]
[66.88777161 127.37471008]
[53.75695419 134.62603760]
[44.64370346 150.60282898]
[27.14067078 149.63690186]
[14.15028954 157.13690186]
[1.15990853 164.63690186]
[-11.83047295 172.13690186]
[-24.74886703 179.76023865]
[-37.59410095 187.50619507]
[-50.43933868 195.25215149]
[-63.28457260 202.99812317]
[-76.12980652 210.74407959]
[-85.47234344 231.96308899]
[-107.92178345 231.95890808]
[-119.97254944 240.89082336]
[-132.02331543 249.82272339]
[-144.07409668 258.75463867]
[-150.10137939 274.00598145]
[-166.36056519 276.14392090]
[-176.12561035 262.96908569]
[-169.35105896 248.03463745]
[-153.00599670 246.70385742]
[-140.95523071 237.77195740]
[-128.90444946 228.84004211]
[-116.85368347 219.90814209]
[-117.61196136 212.72799683]
[-115.79216766 205.67041016]
[-111.57820129 199.64009094]
[-105.46390533 195.42723083]
[-98.19556427 193.60411072]
[-90.68090820 194.44770813]
[-83.87577057 197.89884949]
[-71.03053284 190.15287781]
[-58.18529892 182.40692139]
[-45.34006500 174.66096497]
[-32.49482727 166.91499329]
[-28.37200928 160.73994446]
[-19.33047295 159.14653015]
[-6.34009171 151.64653015]
[6.65028954 144.14653015]
[19.64067078 136.64653015]
[23.08902931 125.02227020]
[33.88891983 118.67622375]
[46.50563431 121.49521637]
[59.63645172 114.24389648]
[72.76726532 106.99257660]
[85.89808655 99.74125671]
[86.02425385 95.55886078]
[87.40906525 91.44105530]
[80.28308105 78.24179840]
[73.15708923 65.04254150]
[66.03110504 51.84329224]
[58.77978516 38.71247482]
[51.40379333 25.65128136]
[44.02779770 12.59009075]
[36.65180588 -0.47110033]
[28.78390884 -13.24201298]
[20.43552017 -25.70413208]
[12.08713055 -38.16625214]
[-3.30919766 -42.67542267]
[-9.24963188 -57.57813263]
[-1.17717981 -71.44229889]
[14.71566486 -73.63251495]
[26.23727036 -62.46863937]
[24.54924965 -46.51464081]
[32.89763641 -34.05252075]
[41.24602890 -21.59040260]
[44.01477051 -20.93010330]
[46.68212509 -19.10817146]
[48.79486847 -16.16003036]
[49.92198944 -12.28776169]
[49.71299744 -7.84709406]
[57.08898926 5.21409702]
[64.46498108 18.27528763]
[71.84098053 31.33647919]
[77.89577484 35.63394928]
[79.23036194 44.71730423]
[86.35634613 57.91655731]
[93.48233032 71.11581421]
[100.60832214 84.31506348]
[113.73913574 91.56638336]
[128.70584106 90.56752777]
[143.67254639 89.56866455]
[158.63925171 88.56980896]
[173.60595703 87.57095337]
[188.53804016 86.14511108]
[203.42330933 84.29344940]
[218.30859375 82.44178772]
[233.19386292 80.59013367]
[248.04118347 78.45540619]
[262.84518433 76.03839874]
[277.64916992 73.62138367]
[292.45315552 71.20437622]
[307.25714111 68.78736115]
[316.48928833 56.24124908]
[331.53707886 54.00094604]
[343.44097900 62.87971497]
[358.24496460 60.46270370]
[373.04895020 58.04569244]
[359.87799072 50.86758041]
[351.95327759 38.13183594]
[351.33212280 23.14470482]
[358.17578125 9.79687881]
[370.70761108 1.55349493]
[385.67431641 0.55455661]
[399.19049072 7.05939150]
[407.74731445 19.37932587]
[409.12338257 34.31607056]
[402.96151733 47.99200821]
[390.86102295 56.85694122]
[405.85488892 57.28528214]
[420.84878540 57.71362305]
[435.84265137 58.14196396]
[450.83654785 58.57030487]
[465.83041382 58.99864578]
[480.82431030 59.42698669]
[492.14065552 48.39449692]
[507.94238281 48.67875671]
[518.85461426 60.11111450]
[518.40332031 75.90895844]
[506.85623169 86.69970703]
[491.06402588 86.08139801]
[480.39596558 74.42086792]
[465.40209961 73.99253082]
[450.40820312 73.56418610]
[435.41433716 73.13584900]
[420.42044067 72.70750427]
[405.42654419 72.27916718]
[390.43267822 71.85082245]
[375.46597290 72.84968567]
[360.66198730 75.26669312]
[345.85800171 77.68370056]
[337.39617920 89.88753510]
[322.41726685 92.54961395]
[309.67413330 83.59135437]
[294.87014771 86.00836182]
[280.06616211 88.42537689]
[265.26217651 90.84238434]
[250.45819092 93.25939941]
[246.96961975 96.58129883]
[241.34303284 97.71790314]
[235.04551697 95.47540283]
[220.16024780 97.32706451]
[205.27497864 99.17872620]
[190.38969421 101.03038788]
[187.93106079 103.61717224]
[184.07905579 105.11931610]
[179.36778259 104.88677216]
[174.60482788 102.53765869]
[159.63810730 103.53651428]
[144.67140198 104.53537750]
[129.70469666 105.53423309]
[114.73799896 106.53308868]
[128.84431458 111.63328552]
[138.75816345 122.89007568]
[142.03501892 137.52777100]
[137.86685181 151.93702698]
[127.28145599 162.56478882]
[112.88897705 166.79049683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 52]
[5 51]
[6 50]
[7 49]
[9 46]
[10 45]
[11 44]
[12 43]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[19 30]
[20 29]
[21 28]
[22 27]
[54 85]
[55 84]
[56 83]
[57 82]
[58 80]
[59 79]
[60 78]
[61 77]
[62 72]
[63 71]
[64 70]
[86 158]
[87 157]
[88 156]
[89 155]
[90 154]
[91 150]
[92 149]
[93 148]
[94 147]
[95 144]
[96 143]
[97 142]
[98 141]
[99 140]
[102 137]
[103 136]
[104 135]
[115 134]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
