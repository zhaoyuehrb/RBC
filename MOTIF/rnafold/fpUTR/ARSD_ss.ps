%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAUCCCGCAGCUGAGAGGGCGGAAGCCUUGGCACUAGCGGCGCCCGGGCGCGGAGUGCGCAGGGCAAGGUCCUGCGCUCUGGGCCAGCGCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[118.47595215 130.71997070]
[110.39033508 134.30915833]
[101.67196655 135.80897522]
[92.85176849 135.12805176]
[84.46689606 132.30789185]
[77.02796173 127.52023315]
[70.98799133 121.05661774]
[66.71482086 113.31069183]
[64.46866608 104.75415802]
[49.51399612 103.58889771]
[34.55932617 102.42363739]
[19.60465431 101.25838470]
[4.63366985 100.32583618]
[-10.35000610 99.62623596]
[-19.24744034 102.38816833]
[-25.78664207 98.66468048]
[-40.74131393 97.49942780]
[-52.68712616 107.49619293]
[-67.83668518 106.10141754]
[-77.29345703 94.65130615]
[-92.24813080 93.48604584]
[-107.20279694 92.32079315]
[-122.15747070 91.15553284]
[-137.11213684 89.99027252]
[-151.66690063 97.54614258]
[-165.34033203 88.49244690]
[-164.06637573 72.14286041]
[-149.15557861 65.31642914]
[-135.94688416 75.03560638]
[-120.99221039 76.20085907]
[-106.03754425 77.36611938]
[-91.08287048 78.53137970]
[-76.12820435 79.69663239]
[-65.01197052 69.84955597]
[-49.82920456 70.81826019]
[-39.57605362 82.54475403]
[-24.62138367 83.71001434]
[-9.65040016 84.64255524]
[5.33327579 85.34216309]
[12.28400803 82.45896912]
[20.76991081 86.30371094]
[35.72458267 87.46897125]
[50.67925262 88.63422394]
[65.63392639 89.79948425]
[77.89495087 71.77865601]
[98.32803345 64.19103241]
[119.37923431 69.84170532]
[133.26608276 86.64165497]
[148.04711914 84.08800507]
[162.82814026 81.53435516]
[177.60917664 78.98069763]
[192.39021301 76.42704773]
[207.17123413 73.87339020]
[221.95227051 71.31974030]
[236.73329163 68.76608276]
[251.47282410 65.98287201]
[266.16729736 62.97076416]
[280.70526123 59.27658081]
[295.05514526 54.90835953]
[306.00396729 43.48759842]
[320.43283081 47.18317795]
[334.78268433 42.81495667]
[349.13256836 38.44673538]
[363.48242188 34.07851410]
[377.83227539 29.71029282]
[392.18215942 25.34207344]
[406.53201294 20.97385216]
[420.88189697 16.60563087]
[435.23175049 12.23741055]
[448.62359619 1.84054506]
[462.32138062 11.83089256]
[456.51336670 27.75896645]
[439.59997559 26.58727646]
[425.25009155 30.95549774]
[410.90023804 35.32371902]
[396.55038452 39.69194031]
[382.20050049 44.06015778]
[367.85064697 48.42837906]
[353.50076294 52.79660034]
[339.15090942 57.16482162]
[324.80105591 61.53304291]
[314.87860107 72.64135742]
[299.42337036 69.25822449]
[285.07348633 73.62644196]
[283.07382202 76.73391724]
[279.38046265 78.95062256]
[274.46755981 79.44924164]
[269.17938232 77.66522217]
[254.48492432 80.67733002]
[248.45835876 85.18354034]
[239.28695679 83.54711914]
[224.50592041 86.10076904]
[209.72488403 88.65441895]
[194.94386292 91.20807648]
[180.16282654 93.76172638]
[165.38180542 96.31538391]
[150.60076904 98.86903381]
[135.81973267 101.42269135]
[134.38064575 110.15129089]
[130.84782410 118.26169586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[12 41]
[13 39]
[14 38]
[16 37]
[17 36]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[48 98]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[56 89]
[57 88]
[58 84]
[59 83]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
