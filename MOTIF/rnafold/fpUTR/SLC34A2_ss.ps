%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGUUUCUAUUAGGGCCCGUGGCCAUCAGCGAAGGGUCCGUCCUUCAGCCGUCUUGGGGAGCAAAGCCCGCAAUUUAUGUUUUCCAAGCCACAAAUGGACC\
) } def
/len { sequence length } bind def

/coor [
[148.55461121 129.94882202]
[152.84512329 144.32211304]
[152.36611938 159.31446838]
[147.16682434 173.38455200]
[137.78176880 185.08587646]
[125.17581177 193.21543884]
[110.64493561 196.93746948]
[95.68301392 195.86932373]
[81.82824707 190.12081909]
[70.50500488 180.28291321]
[62.87739944 167.36705017]
[59.72960281 152.70106506]
[61.38523102 137.79270935]
[67.67407990 124.17469025]
[77.94960022 113.24703217]
[91.15388489 106.13371277]
[76.35652161 103.67644501]
[61.55916595 101.21916962]
[46.76180649 98.76190186]
[31.96444893 96.30463409]
[17.16708946 93.84736633]
[6.10125828 104.56434631]
[-8.97698402 106.68566895]
[-22.25603676 99.60535431]
[-28.74200058 86.22364044]
[-43.53936005 83.76637268]
[-57.37255096 91.89179230]
[-72.29787445 86.00839233]
[-76.86589050 70.62941742]
[-67.57241821 57.55230713]
[-51.54660797 56.80869293]
[-41.08209229 68.96901703]
[-26.28473282 71.42628479]
[-15.82178688 60.85913086]
[-0.96703225 58.45075989]
[12.61628914 65.33165741]
[19.62435722 79.05001068]
[34.42171860 81.50727844]
[49.21907425 83.96454620]
[64.01643372 86.42181396]
[78.81379700 88.87908173]
[93.61115265 91.33634949]
[108.55076599 89.99176025]
[122.67156219 84.93180847]
[136.79235840 79.87186432]
[150.91316223 74.81191254]
[150.21983337 60.34925842]
[153.64848328 46.29826736]
[160.90937805 33.80813980]
[171.39968872 23.89778709]
[184.25360107 17.37268066]
[198.41377258 14.75941753]
[212.71823120 16.26321793]
[225.99580383 21.75184822]
[237.16198730 30.76718330]
[245.30747986 42.56344223]
[259.57333374 37.92818832]
[273.83917236 33.29293442]
[288.10501099 28.65767860]
[302.37088013 24.02242470]
[316.63671875 19.38716888]
[330.90255737 14.75191402]
[345.16839600 10.11665916]
[359.43426514 5.48140430]
[373.70010376 0.84614956]
[387.96594238 -3.78910542]
[389.12371826 -18.94588661]
[395.99804688 -32.50360870]
[407.54067993 -42.39482117]
[421.99145508 -47.11118317]
[437.14669800 -45.93348312]
[450.69537354 -39.04131317]
[460.57138062 -27.48567772]
[465.26873779 -13.02872849]
[464.07110596 2.12495494]
[457.16110229 15.66454601]
[445.59249878 25.52535439]
[431.12936401 30.20368004]
[415.97729492 28.98611259]
[402.44677734 22.05832100]
[392.60119629 10.47674274]
[378.33535767 15.11199760]
[364.06951904 19.74725151]
[349.80368042 24.38250732]
[335.53781128 29.01776123]
[321.27197266 33.65301514]
[307.00613403 38.28827286]
[292.74026489 42.92352676]
[278.47442627 47.55878067]
[264.20858765 52.19403839]
[249.94273376 56.82929230]
[250.12089539 72.41566467]
[245.49275208 87.32035828]
[236.49525452 100.09605408]
[223.99026489 109.49833679]
[209.18199158 114.60693359]
[193.50102234 114.91574097]
[178.46609497 110.38298035]
[165.53706360 101.43634033]
[155.97311401 88.93270874]
[141.85231018 93.99266052]
[127.73151398 99.05261230]
[113.61071777 104.11255646]
[127.87435913 108.75458527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[25 33]
[26 32]
[43 103]
[44 102]
[45 101]
[46 100]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
