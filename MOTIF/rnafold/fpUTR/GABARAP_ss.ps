%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGCUGAAUCCGCCCGCGCGUCGCCGCCGUCGUCGCCGCCCCCCGUCCCGGCCCCCCUGGGUUCCCUCAGCCCAGCCCUGUCCAGCCCGGUUCCCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[257.94747925 281.25350952]
[247.74487305 270.25772095]
[237.54228210 259.26193237]
[222.69483948 258.96337891]
[212.19132996 247.95744324]
[212.60514832 232.38610840]
[202.40255737 221.39031982]
[192.19996643 210.39454651]
[181.99737549 199.39877319]
[171.79478455 188.40298462]
[157.30409241 191.85047913]
[142.93780518 187.55328369]
[132.58291626 176.56954956]
[129.09321594 161.78039551]
[133.50337219 147.13465881]
[123.30078125 136.13888550]
[113.09819031 125.14310455]
[102.89559937 114.14732361]
[89.68666840 107.03929138]
[74.88930511 104.58202362]
[60.09194565 102.12475586]
[45.25948334 99.88912201]
[30.39523888 97.87562561]
[15.68135738 103.69045258]
[4.10787344 94.31475830]
[-10.75637245 92.30126190]
[-25.71711922 99.01751709]
[-38.85376358 89.20117188]
[-36.65245438 72.95043945]
[-21.37770653 66.98268127]
[-8.74287415 77.43701172]
[6.12137270 79.45050812]
[19.77206230 73.49166107]
[32.40873718 83.01137543]
[47.27298355 85.02487183]
[54.44084167 82.76682281]
[62.54921722 87.32740021]
[77.34657288 89.78466797]
[92.14393616 92.24193573]
[90.29521942 90.27632141]
[88.47468567 88.28359985]
[84.48413086 73.82415771]
[80.49357605 59.36471558]
[65.73378754 54.87561798]
[55.76146698 43.10461426]
[53.75875854 27.80779648]
[60.36471939 13.86631584]
[73.47140503 5.72885132]
[88.89652252 5.99203825]
[101.71797180 14.57189369]
[107.84448242 28.73061752]
[105.32109833 43.95021439]
[94.95301819 55.37416077]
[98.94357300 69.83360291]
[102.93412781 84.29304504]
[109.15971375 70.64599609]
[122.92942810 64.69661713]
[137.13392639 69.51659393]
[144.43940735 82.61735535]
[141.07402039 97.23495483]
[128.77532959 105.82228851]
[113.89137268 103.94473267]
[124.09396362 114.94051361]
[134.29655457 125.93628693]
[144.49914551 136.93206787]
[159.43350220 133.62870789]
[173.92051697 138.21385193]
[184.09971619 149.36061096]
[187.31130981 164.00784302]
[182.79057312 178.20039368]
[192.99316406 189.19618225]
[203.19575500 200.19195557]
[213.39834595 211.18772888]
[223.60093689 222.18351746]
[239.15965271 222.93449402]
[249.34988403 234.23110962]
[248.53805542 249.05934143]
[258.74066162 260.05511475]
[268.94323730 271.05090332]
[279.12786865 266.74493408]
[290.09658813 265.52688599]
[300.93579102 267.48596191]
[310.74609375 272.44723511]
[318.71707153 279.98718262]
[324.19415283 289.46987915]
[326.73233032 300.10052490]
[326.13235474 310.99212646]
[322.45626831 321.23950195]
[316.02127075 329.99441528]
[324.47106934 342.38800049]
[332.92086792 354.78158569]
[341.37069702 367.17517090]
[349.82049561 379.56875610]
[363.73870850 389.24963379]
[358.28909302 405.30386353]
[341.35369873 404.51147461]
[337.42691040 388.01855469]
[328.97711182 375.62496948]
[320.52731323 363.23138428]
[312.07751465 350.83779907]
[303.62768555 338.44421387]
[284.48010254 341.25427246]
[266.38919067 334.16967773]
[254.14649963 318.98596191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[15 65]
[16 64]
[17 63]
[18 62]
[19 39]
[20 38]
[21 37]
[22 35]
[23 34]
[25 32]
[26 31]
[41 55]
[42 54]
[43 53]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
