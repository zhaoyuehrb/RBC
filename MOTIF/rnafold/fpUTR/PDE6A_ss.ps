%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUGUUUUGCAGACAAGACCCAGAGAAGUCCAGACUGGACUUGUUGCAGACUGCAAAACUGCCAUUGGAAGGCCUCCGUCCCAGUCCUUCUACAGAGUAGCCAGUGGGAUUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[83.92493439 122.23239899]
[72.81114960 103.66796112]
[57.96383286 101.53323364]
[43.11650848 99.39851379]
[34.05280304 101.28766632]
[27.91342354 97.01081085]
[13.12652493 94.49135590]
[-1.66037345 91.97190857]
[-16.44727135 89.45246124]
[-31.23417091 86.93301392]
[-46.02106857 84.41355896]
[-60.80796814 81.89411163]
[-75.59486389 79.37466431]
[-90.38176727 76.85521698]
[-95.68966675 87.04274750]
[-103.47483063 95.46830750]
[-113.18525696 101.54663849]
[-124.13561249 104.85849762]
[-135.55560303 105.17953491]
[-146.64418030 102.49546814]
[-156.62567139 97.00255585]
[-164.80409241 89.09320068]
[-170.61166382 79.32800293]
[-173.64822388 68.39596558]
[-173.70875549 57.06590652]
[-188.04507446 52.65343857]
[-203.51069641 55.98888397]
[-213.39881897 44.85000992]
[-227.73513794 40.43754578]
[-242.07145691 36.02507782]
[-256.40777588 31.61261177]
[-270.74411011 27.20014572]
[-285.08041382 22.78767967]
[-299.41674805 18.37521362]
[-316.33370972 19.49472237]
[-322.09252930 3.54880977]
[-308.36398315 -6.39923620]
[-295.00427246 4.03889132]
[-280.66796875 8.45135689]
[-266.33163452 12.86382294]
[-251.99531555 17.27628899]
[-237.65899658 21.68875504]
[-223.32267761 26.10122108]
[-208.98634338 30.51368713]
[-194.54615784 26.86263466]
[-183.63261414 38.31711578]
[-169.29629517 42.72958374]
[-157.28979492 28.21437073]
[-140.17176819 20.23777580]
[-121.23918152 20.38144875]
[-104.15802002 28.65866852]
[-92.25339508 43.50381088]
[-87.86231995 62.06831360]
[-73.07541656 64.58776093]
[-58.28852081 67.10721588]
[-43.50162125 69.62666321]
[-28.71472168 72.14611053]
[-13.92782307 74.66555786]
[0.85907590 77.18501282]
[15.64597511 79.70446014]
[30.43287277 82.22390747]
[45.25123215 84.55119324]
[60.09855270 86.68591309]
[74.94587708 88.82063293]
[79.45642090 81.81625366]
[85.86131287 76.48862457]
[93.56995392 73.32901001]
[101.87152100 72.62876129]
[110.00051117 74.45245361]
[117.20734406 78.63191986]
[122.82746124 84.78176880]
[126.34262085 92.33491516]
[127.42869568 100.59486389]
[141.76501465 105.00733185]
[156.10134888 109.41979980]
[168.04339600 98.06726837]
[183.98161316 94.27327728]
[199.57881165 98.97372437]
[210.63900757 110.80599213]
[214.23612976 126.50222778]
[228.68217468 130.54103088]
[243.12820435 134.57983398]
[257.57424927 138.61862183]
[272.02029419 142.65742493]
[286.46633911 146.69622803]
[294.89334106 136.73516846]
[306.43978882 130.76086426]
[319.34500122 129.64396667]
[331.65646362 133.51747131]
[341.52517700 141.76205444]
[347.48339844 153.10478210]
[348.66278076 165.81558228]
[362.87973022 170.59873962]
[377.09667969 175.38189697]
[391.31359863 180.16505432]
[408.25390625 179.48509216]
[413.59683228 195.57513428]
[399.61468506 205.16343689]
[386.53045654 194.38198853]
[372.31350708 189.59883118]
[358.09655762 184.81567383]
[343.87963867 180.03251648]
[331.49157715 191.84465027]
[314.75836182 195.84675598]
[298.19744873 190.86720276]
[286.32568359 178.17153931]
[282.42752075 161.14225769]
[267.98150635 157.10346985]
[253.53544617 153.06466675]
[239.08941650 149.02586365]
[224.64337158 144.98707581]
[210.19732666 140.94827271]
[201.03546143 151.16300964]
[188.29525757 156.43507385]
[174.46182251 155.67395020]
[162.26051331 148.97203064]
[154.11997986 137.59782410]
[151.68887329 123.75611877]
[137.35255432 119.34365845]
[123.01623535 114.93119049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 64]
[3 63]
[4 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[25 47]
[26 46]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[73 120]
[74 119]
[75 118]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
