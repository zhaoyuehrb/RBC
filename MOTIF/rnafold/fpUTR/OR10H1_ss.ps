%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAAAUCCAGGUAUGGGGAAGGCUGAGAACUUUUCUUCAUGCAGUAACUGACAUCUCCCUGUCACAUCUCACCCCAGGCACAGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[108.01324463 247.99171448]
[106.44532013 233.07388306]
[104.87738800 218.15605164]
[91.21501923 212.22265625]
[82.29762268 200.16711426]
[80.60060883 185.16757202]
[86.67923737 171.24108887]
[98.99279022 162.16784668]
[97.42486572 147.25001526]
[72.38237762 138.42475891]
[56.03530884 117.50146484]
[53.53052902 91.06783295]
[39.43514252 85.93753052]
[25.33975220 80.80722809]
[11.24436188 75.67692566]
[-2.85102701 70.54662323]
[-16.94641685 65.41632080]
[-31.04180527 60.28601837]
[-45.13719559 55.15571594]
[-59.23258591 50.02541351]
[-73.32797241 44.89511108]
[-87.42336273 39.76480865]
[-101.51875305 34.63450623]
[-114.30720520 43.42285919]
[-129.81802368 42.98227310]
[-142.08699036 33.48215485]
[-146.39642334 18.57550049]
[-141.08926392 3.99421906]
[-128.20623779 -4.65488768]
[-112.70111084 -4.04606247]
[-100.53592682 5.58658934]
[-96.38845062 20.53911591]
[-82.29306030 25.66941833]
[-68.19766998 30.79972076]
[-54.10228348 35.93002319]
[-40.00689316 41.06032562]
[-25.91150284 46.19062805]
[-11.81611443 51.32093048]
[2.27927518 56.45123291]
[16.37466431 61.58153534]
[30.47005463 66.71183777]
[44.56544495 71.84214020]
[58.66083145 76.97244263]
[65.76446533 67.33314514]
[75.06023407 59.78553391]
[85.95291138 54.81289291]
[97.74504089 52.73362350]
[109.68155670 53.68085861]
[120.99815369 57.59395218]
[130.97021484 64.22234344]
[142.46089172 54.58052826]
[153.95155334 44.93871689]
[165.44221497 35.29690170]
[176.93289185 25.65508652]
[178.06047058 9.89107418]
[190.05917358 -0.39515921]
[205.81039429 0.89902657]
[215.96919250 13.00581455]
[214.50854492 28.74246216]
[202.29502869 38.77269363]
[186.57470703 37.14575577]
[175.08403015 46.78756714]
[163.59336853 56.42938232]
[152.10270691 66.07119751]
[140.61203003 75.71301270]
[143.64027405 81.70458984]
[145.79014587 88.06441498]
[147.01837158 94.66446686]
[147.30024719 101.37191772]
[146.63008118 108.05175018]
[145.02137756 114.56951904]
[142.50650024 120.79404449]
[139.13609314 126.60003662]
[134.97796631 131.87063599]
[130.11581421 136.49977112]
[124.64751434 140.39424133]
[118.68312836 143.47569275]
[112.34268951 145.68208313]
[113.91062164 160.59991455]
[127.84152222 166.91474915]
[136.68280029 179.27310181]
[138.14144897 194.29769897]
[131.92541504 207.94383240]
[119.79521942 216.58811951]
[121.36314392 231.50595093]
[122.93106842 246.42378235]
[133.00274658 259.36569214]
[126.58071136 274.45507812]
[110.27140045 276.16925049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[8 79]
[9 78]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
