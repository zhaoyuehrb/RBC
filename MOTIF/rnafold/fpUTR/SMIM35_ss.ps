%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAACAGGGCUCUCUCUCUUGGAUGUCUCAGCCAUGACAGAGACUUCUCACAUCGGAGCAGUGUCAUGGG\
) } def
/len { sequence length } bind def

/coor [
[97.38619232 128.52839661]
[83.50107574 123.41979980]
[74.01648712 112.06477356]
[59.23225021 114.59978485]
[44.44801331 117.13479614]
[29.66377449 119.66981506]
[15.96980858 131.76818848]
[-0.24904805 125.41549683]
[-14.91237640 128.57568359]
[-29.57570457 131.73587036]
[-44.23903275 134.89605713]
[-58.90236282 138.05624390]
[-66.04417419 151.96769714]
[-80.47720337 157.98614502]
[-95.38661957 153.26985168]
[-103.73264313 140.04571533]
[-101.57454681 124.55776215]
[-89.93131256 114.11893463]
[-74.30052185 113.65812683]
[-62.06254959 123.39292145]
[-47.39922333 120.23273468]
[-32.73589325 117.07254028]
[-18.07256508 113.91235352]
[-3.40923715 110.75216675]
[3.56184602 100.63725281]
[15.97843170 98.02052307]
[27.12876129 104.88557434]
[41.91300201 102.35056305]
[56.69723892 99.81555176]
[71.48147583 97.28053284]
[76.64147186 83.41444397]
[88.03155518 73.97197723]
[102.61380768 71.47160339]
[116.49892426 76.58020020]
[125.98351288 87.93522644]
[140.76774597 85.40021515]
[155.55198669 82.86520386]
[170.33622742 80.33018494]
[185.12046814 77.79517365]
[199.90470886 75.26016235]
[214.68893433 72.72515106]
[229.47317505 70.19013977]
[234.72933960 57.26488113]
[245.64836121 48.75443268]
[259.24945068 46.84386826]
[271.88790894 51.93507385]
[280.23181152 62.56830978]
[295.11032104 60.66304016]
[309.98883057 58.75777435]
[324.86734009 56.85250854]
[333.16317749 43.59683609]
[348.05462646 38.82408142]
[362.51034546 44.78779221]
[369.70483398 58.67208481]
[366.24102783 73.92121887]
[353.75448608 83.33502197]
[338.14089966 82.46858978]
[326.77261353 71.73101044]
[311.89410400 73.63628387]
[297.01559448 75.54154968]
[282.13708496 77.44681549]
[274.83874512 91.99501801]
[260.21008301 99.49789429]
[243.81213379 96.88521576]
[232.00819397 84.97438049]
[217.22395325 87.50939178]
[202.43971252 90.04440308]
[187.65547180 92.57941437]
[172.87123108 95.11442566]
[158.08700562 97.64943695]
[143.30276489 100.18444824]
[128.51852417 102.71946716]
[123.35852814 116.58555603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
