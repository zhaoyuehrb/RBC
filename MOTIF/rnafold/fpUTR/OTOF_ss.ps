%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGAGGGGGGUCGGGAGGAGGAGGAGGAGGCAGCGGCAGAGAAGAGAGAGGCGUGUGAGCCGUGCUCCACCGGCUAGCUCCUUCCCGCUGCUCCUGCCUGGCAGUGCCAGGCAGCCCACACCAGC\
) } def
/len { sequence length } bind def

/coor [
[79.22097015 278.20962524]
[65.72494507 285.26492310]
[50.52565765 286.21444702]
[36.25648117 280.89367676]
[25.38963318 270.22448730]
[19.80786324 256.05538940]
[20.47824287 240.84123230]
[27.28462982 227.21798706]
[39.04777145 217.54594421]
[53.72963715 213.50085449]
[55.93059540 198.66320801]
[57.94930267 183.79966736]
[59.78546524 168.91247559]
[57.45729446 161.81410217]
[61.85372162 153.68414307]
[64.05467987 138.84649658]
[66.25563812 124.00884247]
[51.27249527 123.29780579]
[38.28579330 115.79144287]
[30.19082451 103.16323853]
[28.79231071 88.22857666]
[34.40204239 74.31703949]
[45.76936722 64.53011322]
[60.36001205 61.04972458]
[74.92108917 64.65180969]
[86.20629883 74.53330994]
[91.69963837 88.49085236]
[90.22937775 73.56307983]
[88.75912476 58.63531113]
[87.28886414 43.70754242]
[85.81861115 28.77976990]
[81.82639313 20.44387627]
[84.50006104 13.46829224]
[83.39659882 -1.49106479]
[82.29312897 -16.45042229]
[81.18965912 -31.40977859]
[80.08618927 -46.36913681]
[78.98271942 -61.32849121]
[76.25405121 -65.01398468]
[75.03340912 -68.98216248]
[75.21601868 -72.70237732]
[76.52883911 -75.73812103]
[78.57847595 -77.79556274]
[78.94659424 -92.79104614]
[79.31471252 -107.78652954]
[79.68283081 -122.78200531]
[76.74104309 -131.54389954]
[80.24848938 -138.13973999]
[80.98450470 -153.12167358]
[81.72052002 -168.10360718]
[72.91297913 -184.21905518]
[82.86688995 -198.61715698]
[83.23500824 -213.61264038]
[83.60312653 -228.60812378]
[83.60312653 -243.60812378]
[83.23500824 -258.60360718]
[82.86688995 -273.59909058]
[79.49871826 -282.20608521]
[82.67829895 -288.96606445]
[82.67829895 -303.96606445]
[82.67829895 -318.96606445]
[82.67829895 -333.96606445]
[76.63195801 -349.80520630]
[90.17829895 -359.99996948]
[103.72463226 -349.80520630]
[97.67829895 -333.96606445]
[97.67829895 -318.96606445]
[97.67829895 -303.96606445]
[97.67829895 -288.96606445]
[97.86236572 -273.96719360]
[98.23049164 -258.97171021]
[98.59860992 -243.97624207]
[101.45655823 -240.03013611]
[101.79348755 -234.22329712]
[98.59860992 -228.24000549]
[98.23049164 -213.24452209]
[97.86236572 -198.24903870]
[106.00395966 -189.21342468]
[105.75566101 -176.65109253]
[96.70245361 -167.36758423]
[95.96643829 -152.38565063]
[95.23042297 -137.40373230]
[94.67831421 -122.41388702]
[94.31019592 -107.41841125]
[93.94207764 -92.42292786]
[93.57395935 -77.42744446]
[93.94207764 -62.43196106]
[95.04554749 -47.47260284]
[96.14901733 -32.51324844]
[97.25248718 -17.55389023]
[98.35594940 -2.59453321]
[99.45941925 12.36482334]
[100.74638367 27.30951309]
[102.21663666 42.23728561]
[103.68689728 57.16505432]
[105.15715027 72.09282684]
[106.62741089 87.02059937]
[114.96096039 99.49263763]
[128.18978882 106.56359100]
[141.41859436 113.63454437]
[154.64741516 120.70549011]
[167.87623596 127.77644348]
[181.10505676 134.84739685]
[194.33387756 141.91835022]
[211.15296936 144.05245972]
[213.75823975 160.80503845]
[198.38156128 167.94607544]
[187.26292419 155.14717102]
[174.03410339 148.07621765]
[160.80528259 141.00526428]
[147.57646179 133.93431091]
[134.34765625 126.86336517]
[121.11882782 119.79241180]
[107.89001465 112.72145844]
[101.19082642 116.09354401]
[87.79246521 122.83771515]
[81.09328461 126.20980072]
[78.89232635 141.04743958]
[76.69136810 155.88510132]
[74.67266083 170.74862671]
[72.83649445 185.63583374]
[74.90530396 194.64387512]
[70.76824188 200.86416626]
[68.56728363 215.70181274]
[81.44272614 223.83464050]
[89.89170837 236.50486755]
[92.45039368 251.51728821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 124]
[11 123]
[12 121]
[13 120]
[15 119]
[16 118]
[17 117]
[27 97]
[28 96]
[29 95]
[30 94]
[31 93]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[43 86]
[44 85]
[45 84]
[46 83]
[48 82]
[49 81]
[50 80]
[52 77]
[53 76]
[54 75]
[55 72]
[56 71]
[57 70]
[59 69]
[60 68]
[61 67]
[62 66]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
