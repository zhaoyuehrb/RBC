%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUCUUCCCUCUCCUCCCUCUGUCUCCUCAUUGCCACAGCCAACCGGCUCCCACAUAUCUGCACACACUUAAAUACAAAGGCCGGGAAGGGUCAGACCACCAUCCGGGUACUCUAAGUCCUCCCUCCCCCUUCUCCUUCACCCCCAAGUGUCUCCCACGACUGCCCUCCCCGACCUCUAGCUGACC\
) } def
/len { sequence length } bind def

/coor [
[115.97542572 247.09272766]
[120.06243896 261.59765625]
[120.69361115 276.65417480]
[117.83491516 291.45025635]
[111.64051056 305.18801880]
[102.44445038 317.12658691]
[90.74266815 326.62210083]
[77.16622925 333.16253662]
[62.44728851 336.39511108]
[47.37962723 336.14553833]
[32.77582169 332.42727661]
[19.42343521 325.44082642]
[8.04254818 315.56295776]
[-0.75308472 303.32638550]
[-6.48912573 289.39102173]
[-8.85623646 274.50836182]
[-7.72676277 259.48101807]
[-3.16161537 245.11940002]
[4.59301376 232.19799805]
[15.11892605 221.41366577]
[27.84847450 213.34797668]
[42.09516907 208.43591309]
[57.09070206 206.94235229]
[72.02638245 208.94787598]
[77.39026642 194.93969727]
[82.75414276 180.93153381]
[76.46903229 167.47668457]
[81.70921326 153.19400024]
[95.86450958 146.69282532]
[101.22839355 132.68464661]
[96.79985809 126.63171387]
[85.37673187 136.35345459]
[73.95361328 146.07519531]
[63.71005249 157.03282166]
[49.63533020 151.84608459]
[48.95176697 136.86167908]
[62.49613190 130.41506958]
[75.21945953 122.47045135]
[87.94277954 114.52583313]
[83.51424408 108.47289276]
[68.53961945 109.34506989]
[53.56500244 110.21723938]
[38.59037781 111.08941650]
[25.19388199 120.54805756]
[10.41962719 113.43093109]
[9.46610165 97.05953217]
[23.31421089 88.27534485]
[37.71820450 96.11479187]
[52.69282913 95.24262238]
[67.66744995 94.37044525]
[82.64207458 93.49827576]
[67.64421844 93.24464417]
[52.99391937 90.02458191]
[39.27202225 83.96574402]
[27.02255058 75.30834961]
[16.73116112 64.39563751]
[8.80587292 51.66026306]
[3.56090021 37.60713959]
[1.20418882 22.79343414]
[1.82917547 7.80645943]
[5.41108131 -6.75959539]
[11.80789471 -20.32723236]
[20.76600266 -32.35853577]
[31.93024445 -42.37650681]
[44.85799026 -49.98395920]
[59.03670120 -54.87928391]
[73.90422821 -56.86839676]
[88.87113190 -55.87243652]
[103.34400940 -51.93088531]
[116.74906158 -45.20001984]
[128.55482483 -35.94669342]
[138.29322815 -24.53777122]
[145.57817078 -11.42558289]
[150.12084961 2.87001467]
[151.74113464 17.78224564]
[150.37481689 32.71988678]
[146.07603455 47.09070969]
[139.01524353 60.32495499]
[129.47238159 71.89792633]
[117.82577515 81.35079193]
[104.53558350 88.30941772]
[118.30882263 82.36821747]
[132.08206177 76.42702484]
[141.68901062 63.85654068]
[156.43998718 65.92003632]
[170.21322632 59.97884369]
[183.98648071 54.03764725]
[197.75971985 48.09645081]
[207.36666870 35.52596664]
[222.11764526 37.58946609]
[235.89088440 31.64826965]
[249.66412354 25.70707321]
[263.43737793 19.76587677]
[270.09313965 13.48152828]
[277.48925781 13.84250641]
[291.35934448 8.13106155]
[305.22943115 2.41961670]
[303.84963989 -6.08149767]
[304.44851685 -14.84147263]
[307.07040405 -23.39725685]
[311.65081787 -31.27965927]
[318.01617432 -38.03898239]
[325.88943481 -43.27044296]
[334.90188599 -46.63793564]
[344.61007690 -47.89479065]
[354.51770020 -46.90024185]
[364.10089111 -43.63061905]
[372.83599854 -38.18441010]
[383.03860474 -49.18018723]
[393.24118042 -60.17596436]
[396.81433105 -80.00262451]
[415.49902344 -84.93684387]
[425.33047485 -96.26566315]
[435.16195679 -107.59448242]
[440.97689819 -123.52001953]
[457.88980103 -122.34095764]
[461.43878174 -105.76262665]
[446.49078369 -97.76300812]
[436.65930176 -86.43418884]
[426.82781982 -75.10536957]
[428.46353149 -64.99544525]
[424.16497803 -55.45819855]
[415.13555908 -49.75263977]
[404.23696899 -49.97337341]
[394.03436279 -38.97759628]
[383.83178711 -27.98181725]
[385.25671387 -20.61842728]
[399.48199463 -25.37674713]
[413.70727539 -30.13506699]
[427.93255615 -34.89338684]
[442.15780640 -39.65170670]
[456.38308716 -44.41003036]
[470.60836792 -49.16835022]
[484.83364868 -53.92667007]
[497.37695312 -62.15254974]
[512.37384033 -62.45862961]
[525.24237061 -54.75139236]
[532.05084229 -41.38559723]
[530.71911621 -26.44482994]
[521.65411377 -14.49386787]
[507.62536621 -9.18403339]
[492.92074585 -12.13673210]
[477.94729614 -11.24457741]
[462.97384644 -10.35242176]
[448.00039673 -9.46026611]
[433.02694702 -8.56811142]
[418.05352783 -7.67595577]
[403.08007812 -6.78380060]
[388.10662842 -5.89164543]
[389.53158569 1.47174537]
[403.09973145 7.86745739]
[416.66787720 14.26316929]
[432.19149780 10.21383572]
[444.94934082 19.94093704]
[445.15472412 35.98267746]
[432.65008545 46.03320312]
[417.02789307 42.38261032]
[410.27218628 27.83132553]
[396.70401001 21.43561363]
[383.13586426 15.03990173]
[359.63052368 34.46854019]
[331.00308228 34.01031876]
[310.94088745 16.28970718]
[297.07080078 22.00115204]
[283.20071411 27.71259689]
[269.37857056 33.53911972]
[255.60531616 39.48031616]
[241.83207703 45.42151260]
[228.05883789 51.36270905]
[219.43704224 63.50823593]
[203.70091248 61.86969376]
[189.92767334 67.81089020]
[176.15443420 73.75208282]
[162.38119507 79.69328308]
[153.75938416 91.83881378]
[138.02326965 90.20026398]
[124.25002289 96.14146423]
[110.47677612 102.08265686]
[117.95854187 110.46088409]
[120.18115234 123.37893677]
[115.23655701 138.04852295]
[109.87268066 152.05670166]
[116.06575012 166.34948730]
[110.42646027 180.47935486]
[96.76231384 186.29541016]
[91.39842987 200.30357361]
[86.03455353 214.31175232]
[98.48999786 222.79458618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 187]
[25 186]
[26 185]
[29 182]
[30 181]
[40 51]
[41 50]
[42 49]
[43 48]
[81 178]
[82 177]
[83 176]
[85 174]
[86 173]
[87 172]
[88 171]
[90 169]
[91 168]
[92 167]
[93 166]
[95 165]
[96 164]
[97 163]
[108 126]
[109 125]
[110 124]
[112 120]
[113 119]
[114 118]
[150 160]
[151 159]
[152 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
