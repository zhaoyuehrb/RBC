%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCAGAACACUGGCGGCCGAUCCCAACGAGGCUCCCUGGAGCCCGACGCAGAGCAGCGCCCUGGCCGGGCCAAGCAGGAGCCGGCAUC\
) } def
/len { sequence length } bind def

/coor [
[10.83381653 233.49874878]
[2.47673178 233.32009888]
[-5.91116190 245.75566101]
[-14.29905510 258.19122314]
[-22.68694878 270.62677002]
[-31.07484245 283.06234741]
[-31.67840004 299.45037842]
[-46.29723358 306.88150024]
[-59.89274597 297.71121216]
[-58.47903442 281.37313843]
[-43.51040649 274.67443848]
[-35.12251282 262.23889160]
[-26.73461914 249.80332947]
[-18.34672546 237.36776733]
[-9.95883179 224.93220520]
[-11.10774708 203.41062927]
[8.48105526 192.78793335]
[15.05662251 179.30601501]
[21.63219070 165.82411194]
[7.61272001 171.15837097]
[-7.30382442 169.57827759]
[-19.89459229 161.42520142]
[-27.43923569 148.46070862]
[-28.30766869 133.48587036]
[-22.31225967 119.73613739]
[-10.74836731 110.18226624]
[3.88552570 106.88845825]
[18.42763710 110.56636047]
[29.73601532 120.42134094]
[35.36738586 134.32412720]
[34.10436630 149.27296448]
[45.25154114 139.23600769]
[56.39871216 129.19905090]
[67.54588318 119.16208649]
[78.69305420 109.12512970]
[89.84022522 99.08817291]
[93.34553528 91.61753845]
[101.55601501 88.90379333]
[113.04668427 79.26197815]
[113.82646179 60.50767517]
[127.68142700 48.31314850]
[145.75854492 49.86740494]
[156.54864502 39.44753265]
[167.33874512 29.02765465]
[178.12884521 18.60778046]
[188.91893005 8.18790436]
[187.61497498 -5.34893131]
[194.31018066 -16.96055412]
[206.32264709 -22.45073318]
[219.09922791 -19.98838997]
[230.24639893 -30.02534866]
[241.39356995 -40.06230927]
[246.47183228 -55.04636002]
[261.10729980 -57.81263351]
[272.25448608 -67.84959412]
[279.97946167 -82.94134521]
[296.61990356 -79.69607544]
[298.10800171 -62.80756378]
[282.29144287 -56.70241928]
[271.14425659 -46.66546249]
[266.86331177 -32.39931870]
[251.43054199 -28.91513634]
[240.28337097 -18.87817574]
[229.13618469 -8.84121799]
[229.04014587 7.87680674]
[216.71334839 19.66064072]
[199.33880615 18.97800064]
[188.54872131 29.39787674]
[177.75862122 39.81775284]
[166.96852112 50.23762894]
[156.17842102 60.65750504]
[158.47227478 72.09285736]
[154.82725525 83.29940033]
[146.06668091 91.36154175]
[134.36050415 94.12079620]
[122.68849945 90.75264740]
[111.19783020 100.39445496]
[99.87718964 110.23534393]
[88.73001862 120.27230072]
[77.58283997 130.30926514]
[66.43566895 140.34622192]
[55.28849792 150.38317871]
[44.14132690 160.42013550]
[35.11410141 172.39967346]
[28.53853416 185.88157654]
[21.96296692 199.36349487]
[26.34812546 207.03599548]
[27.19441795 215.73654175]
[24.43115044 223.92901611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 86]
[18 85]
[19 84]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[38 77]
[39 76]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[50 64]
[51 63]
[52 62]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
