%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCACCCCCGCCCAGCCCGUGCCUAUAAGGCCUUGGCAAUGCAGGGGCCCGCACUGCUCCCAGACGACAUCAGAG\
) } def
/len { sequence length } bind def

/coor [
[191.34504700 176.23532104]
[179.24586487 167.36911011]
[165.14187622 172.08241272]
[150.79725647 167.53311157]
[141.77653503 155.26609802]
[141.70793152 139.86149597]
[129.60874939 130.99528503]
[117.50956726 122.12906647]
[105.41038513 113.26284790]
[91.53338623 111.55387115]
[85.72340393 98.83633423]
[73.62422180 89.97011566]
[58.91455841 94.54526520]
[44.49991989 89.63898468]
[35.84069443 77.33119202]
[36.08627701 62.46250916]
[23.98709488 53.59629059]
[11.88791275 44.73007202]
[-2.82174921 49.30522537]
[-17.23638535 44.39894104]
[-25.89561272 32.09114456]
[-25.65003014 17.22246552]
[-37.74921036 8.35624790]
[-49.84839249 -0.50996894]
[-61.94757462 -9.37618637]
[-78.29748535 -13.86134720]
[-78.51371765 -30.81391525]
[-62.28351593 -35.71463013]
[-53.08135986 -21.47536659]
[-40.98217773 -12.60915089]
[-28.88299561 -3.74293351]
[-16.78381348 5.12328339]
[-2.67981625 0.40997547]
[11.66479492 4.95927382]
[20.68552017 17.22629929]
[20.75412941 32.63088989]
[32.85331345 41.49710846]
[44.95249176 50.36332703]
[59.05649185 45.65001678]
[73.40110016 50.19931412]
[82.42182922 62.46634293]
[82.49043274 77.87093353]
[94.58961487 86.73715210]
[108.46661377 88.44612885]
[114.27659607 101.16366577]
[126.37577820 110.02988434]
[138.47496033 118.89610291]
[150.57414246 127.76232147]
[165.28381348 123.18716431]
[179.69844055 128.09344482]
[188.35766602 140.40124512]
[188.11209106 155.26992798]
[200.21127319 164.13613892]
[208.63450623 164.85397339]
[214.31069946 169.89225769]
[229.15802002 172.02697754]
[244.00535583 174.16169739]
[259.02041626 167.56774902]
[272.07650757 177.49095154]
[269.74267578 193.72319031]
[254.41973877 199.56610107]
[241.87062073 189.00901794]
[227.02330017 186.87429810]
[212.17597961 184.73957825]
[221.54039001 196.45741272]
[225.52999878 210.91711426]
[223.49926758 225.77902222]
[215.77676392 238.63838196]
[203.61204529 247.41445923]
[188.97344971 250.68727112]
[174.22955322 247.92721558]
[161.76603699 239.58091736]
[153.59956360 226.99884033]
[151.05151367 212.21684265]
[154.53416443 197.62673950]
[163.48402405 185.58929443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[6 48]
[7 47]
[8 46]
[9 45]
[11 43]
[12 42]
[16 38]
[17 37]
[18 36]
[22 32]
[23 31]
[24 30]
[25 29]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
