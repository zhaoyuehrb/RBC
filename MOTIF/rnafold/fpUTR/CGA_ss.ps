%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCUGCUGGUAUAAAAGCAGGUGAGGACUUCAUUAACUGCAGUUACUGAGAACUCAUAAGACGAAGCUAAAAUCCCUCUUCGGAUCCACAGUCAACCGCCCUGAACACAUCCUGCAAAAAGCCCAGAGAAAGGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[106.02777863 196.28752136]
[91.28857422 199.07244873]
[77.53128815 193.09439087]
[69.51005554 180.41923523]
[69.99680328 165.42712402]
[78.82360077 153.29873657]
[69.90052032 165.35604858]
[60.97744751 177.41336060]
[52.05436707 189.47067261]
[43.13129044 201.52796936]
[47.92472076 216.28611755]
[43.09606552 231.03276062]
[30.50204086 240.09753418]
[14.98530483 239.99484253]
[2.51236081 230.76417542]
[-2.12069058 215.95491028]
[2.86765385 201.26150513]
[15.55927372 192.33387756]
[31.07398224 192.60490417]
[39.99705887 180.54759216]
[48.92013550 168.49028015]
[57.84321594 156.43296814]
[66.76628876 144.37565613]
[61.91220856 130.18278503]
[47.47426224 126.11514282]
[33.03631592 122.04750061]
[18.59836960 117.97985840]
[4.16042328 113.91221619]
[-9.50988293 121.37950897]
[-24.09406853 117.04866791]
[-31.12874603 103.97010040]
[-45.56669235 99.90245819]
[-54.75504684 100.58524323]
[-60.27526855 95.58363342]
[-74.62037659 91.19980621]
[-90.07929993 94.56613159]
[-99.98964691 83.44702911]
[-114.33474731 79.06320190]
[-128.67985535 74.67937469]
[-143.02496338 70.29555511]
[-158.87286377 74.51170349]
[-170.25486755 62.70568085]
[-165.46214294 47.02251434]
[-149.42501831 43.59569550]
[-138.64114380 55.95044708]
[-124.29602814 60.33427048]
[-109.95092773 64.71809387]
[-95.60581970 69.10192108]
[-81.17295074 65.42203522]
[-70.23654938 76.85469818]
[-55.89144516 81.23852539]
[-41.49905014 85.46451569]
[-27.06110382 89.53215790]
[-14.23363113 82.04940796]
[0.46644461 85.96890259]
[8.22806549 99.47426605]
[22.66601181 103.54190826]
[37.10395813 107.60955048]
[51.54190445 111.67719269]
[65.97985077 115.74483490]
[66.56413269 90.94644165]
[81.82662964 73.91326904]
[102.58467102 71.16973877]
[107.74936676 57.08691025]
[112.91406250 43.00408936]
[103.65310669 35.50074768]
[96.90154266 25.70176315]
[93.20094299 14.41246033]
[92.84268188 2.55690360]
[95.84503174 -8.89774799]
[101.95253754 -19.02013969]
[110.65775299 -26.99044228]
[121.24336243 -32.16675568]
[132.84127808 -34.13679123]
[144.50387573 -32.75069046]
[150.88459778 -46.32590103]
[157.26531982 -59.90111160]
[163.64604187 -73.47631836]
[158.05090332 -88.25704956]
[164.62214661 -102.63043213]
[179.46121216 -108.06899261]
[193.76431274 -101.34613800]
[199.04568481 -86.45041656]
[192.17198181 -72.21919250]
[177.22125244 -67.09559631]
[170.84053040 -53.52038574]
[164.45980835 -39.94517517]
[158.07908630 -26.36996460]
[170.27490234 -12.73568535]
[175.37013245 4.88568258]
[172.31596375 23.02386475]
[161.67298889 38.08710480]
[145.50889587 47.07341003]
[126.99688721 48.16878128]
[121.83219147 62.25160599]
[116.66749573 76.33442688]
[128.80429077 88.32305145]
[132.63790894 106.17231750]
[125.64950562 124.32784271]
[108.90295410 136.41439819]
[121.61007690 144.38490295]
[134.31719971 152.35542297]
[147.11109924 160.18586731]
[159.99024963 167.87532043]
[172.86938477 175.56477356]
[183.97225952 165.33703613]
[197.49359131 158.65904236]
[212.33381653 156.06431580]
[227.28878784 157.75471497]
[241.14744568 163.58476257]
[252.78997803 173.07409668]
[261.27825928 185.44703674]
[265.93139648 199.69604492]
[266.38046265 214.66366577]
[262.59753418 229.13664246]
[275.47668457 236.82608032]
[290.73748779 232.71711731]
[304.39208984 240.67494202]
[308.33950806 255.97833252]
[300.23773193 269.54806519]
[284.89349365 273.33343506]
[271.41018677 265.08865356]
[267.78723145 249.70523071]
[254.90809631 242.01577759]
[243.96226501 252.21215820]
[230.57325745 258.91781616]
[215.82234192 261.58169556]
[200.90344238 259.97946167]
[187.02653503 254.23251343]
[175.31950378 244.79866028]
[166.73649597 232.43580627]
[161.98011780 218.14097595]
[161.44392395 203.06999207]
[165.17994690 188.44390869]
[152.30079651 180.75447083]
[139.42164612 173.06501770]
[132.00878906 172.33113098]
[126.34667969 165.06254578]
[113.63955688 157.09202576]
[100.93244171 149.12150574]
[113.57562256 157.19306946]
[119.49893188 170.97401428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[31 53]
[32 52]
[34 51]
[35 50]
[37 48]
[38 47]
[39 46]
[40 45]
[63 96]
[64 95]
[65 94]
[75 88]
[76 87]
[77 86]
[78 85]
[100 140]
[101 139]
[102 138]
[103 136]
[104 135]
[105 134]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
