%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCCCCGAAGCUCGCUGUGCGUGUGCGUGUGUGUGUCCCUCCGCCAACGCCGCCACCUCAGCCCGGCAA\
) } def
/len { sequence length } bind def

/coor [
[55.90196609 343.53906250]
[40.22568512 341.53164673]
[30.62658501 328.97644043]
[32.79963684 313.32226562]
[45.45561218 303.85644531]
[47.36087799 288.97793579]
[49.26614761 274.09942627]
[51.17141342 259.22091675]
[42.55041122 252.74807739]
[37.50072479 243.13015747]
[37.06113434 232.19360352]
[41.38725662 222.04977417]
[49.70782471 214.68733215]
[60.46123505 211.58244324]
[64.24090576 197.06645203]
[68.02057648 182.55046082]
[58.53328705 172.92353821]
[55.08862686 159.74076843]
[58.71129990 146.49250793]
[68.53972626 136.74290466]
[82.02792358 133.17105103]
[86.42026520 118.82855225]
[90.81260681 104.48605347]
[89.97348785 96.20339966]
[95.70772552 89.63526154]
[100.70481873 75.49209595]
[105.70191956 61.34893417]
[105.63957977 51.90501022]
[111.22290802 46.71927643]
[116.81575775 32.80093765]
[122.40859985 18.88260460]
[128.00144958 4.96426868]
[128.33998108 -4.47379303]
[134.13836670 -9.41789246]
[140.31687927 -23.08631897]
[141.05567932 -32.50151062]
[147.05867004 -37.19506454]
[153.81172180 -50.58895111]
[160.56477356 -63.98284149]
[155.37980652 -78.91239166]
[162.34535217 -93.09889221]
[177.32890320 -98.12573242]
[191.44094849 -91.01058197]
[196.30909729 -75.97473145]
[189.04515076 -61.93868637]
[173.95866394 -57.22978210]
[167.20561218 -43.83589554]
[160.45256042 -30.44200706]
[153.98530579 -16.90780067]
[147.80679321 -3.23937368]
[141.91978455 10.55711555]
[136.32693481 24.47545052]
[130.73408508 38.39378738]
[125.14124298 52.31212234]
[119.84507751 66.34603119]
[114.84798431 80.48919678]
[109.85088348 94.63235474]
[105.15510559 108.87839508]
[100.76276398 123.22089386]
[96.37042236 137.56340027]
[106.68547821 150.78462219]
[107.19416046 167.38160706]
[97.89395905 180.93876648]
[82.53656769 186.33012390]
[78.75689697 200.84613037]
[74.97722626 215.36212158]
[86.15355682 231.69764709]
[82.24754333 250.80276489]
[66.04991913 261.12619019]
[64.14465332 276.00469971]
[62.23938751 290.88320923]
[60.33411789 305.76171875]
[70.19654083 318.11111450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[7 70]
[8 69]
[14 66]
[15 65]
[16 64]
[21 60]
[22 59]
[23 58]
[25 57]
[26 56]
[27 55]
[29 54]
[30 53]
[31 52]
[32 51]
[34 50]
[35 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
