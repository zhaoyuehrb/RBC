%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAGAUCCUGGCGCCGAGCGACAGGUGCCGGAACAAACAGGCGAUGAGAAAUCGCGGACGCGGAACCAUUUCUUGGGCAGGACUUCCGGCGGAAAAGCGGGCUGUCUCGGAAACUCAGAGCCGGGUUCCUCCCGGGUUUCUGCCGGGUUUCUCCCUGCGGCUCCUGGGUUGUUGAGACUCUUGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[133.40943909 156.02828979]
[124.35916138 160.98580933]
[114.57687378 164.48110962]
[104.29885864 166.40679932]
[93.77705383 166.69367981]
[83.27281952 165.31295776]
[73.05050659 162.27760315]
[63.37075043 157.64241028]
[54.48385620 151.50329590]
[45.07621384 163.18646240]
[35.66856766 174.86961365]
[26.26092148 186.55278015]
[16.85327721 198.23593140]
[7.44563103 209.91909790]
[-1.96201432 221.60224915]
[-11.36965942 233.28541565]
[-7.18242836 248.22685242]
[-12.60880089 262.76419067]
[-25.56222534 271.30752563]
[-41.06184769 270.57174683]
[-53.14774323 260.83981323]
[-57.17264175 245.85382080]
[-51.58889008 231.37620544]
[-38.54354858 222.97390747]
[-23.05281830 223.87776184]
[-13.64517307 212.19461060]
[-4.23752785 200.51144409]
[5.17011738 188.82829285]
[14.57776260 177.14512634]
[23.98540878 165.46197510]
[33.39305496 153.77880859]
[42.80069733 142.09565735]
[39.73130417 135.25250244]
[26.04498672 141.39128113]
[12.35867119 147.53007507]
[1.23918402 157.59770203]
[-11.77179146 150.13348389]
[-8.69349003 135.45274353]
[6.21988153 133.84376526]
[19.90619850 127.70497131]
[33.59251404 121.56617737]
[30.52312088 114.72302246]
[15.54157066 113.97926331]
[0.56002086 113.23551178]
[-14.42152882 112.49175262]
[-29.40307808 111.74799347]
[-42.21296310 121.40648651]
[-57.71461487 117.27388763]
[-64.01649475 102.52038574]
[-56.28433609 88.46359253]
[-40.44958878 85.88668823]
[-28.65932274 96.76644897]
[-13.67777252 97.51020050]
[1.30377722 98.25395966]
[16.28532600 98.99771881]
[31.26687622 99.74147034]
[34.25217056 86.09491730]
[39.85292816 73.63775635]
[47.71428299 62.85107422]
[57.39746094 54.12239838]
[48.58068466 41.98714447]
[39.76390457 29.85189056]
[30.84710312 17.78993988]
[21.83088493 5.80212069]
[12.81466770 -6.18569946]
[3.79845071 -18.17351913]
[-5.89603758 -29.61977959]
[-16.23633957 -40.48615646]
[-26.57663918 -51.35253525]
[-42.51455688 -53.18622208]
[-50.89552307 -66.86609650]
[-45.29038239 -81.89812469]
[-29.99891853 -86.75102997]
[-16.75143242 -77.70207214]
[-15.71026230 -61.69283676]
[-5.36996078 -50.82645798]
[4.97034025 -39.96008301]
[5.38937330 -54.95422745]
[15.24379349 -66.26309204]
[30.03964233 -68.72943878]
[43.02949905 -61.22853088]
[48.28953552 -47.18103790]
[43.42099380 -32.99311066]
[30.64409637 -25.13493347]
[15.78627110 -27.18973732]
[24.80248833 -15.20191669]
[33.81870651 -3.21409655]
[42.83492279 8.77372360]
[49.37985992 12.23582268]
[51.89915848 21.03511238]
[60.71593857 33.17036819]
[69.53271484 45.30562210]
[88.34469604 38.48671341]
[108.34722137 37.95119476]
[127.49710846 43.75376129]
[143.83825684 55.30170441]
[155.70146179 71.41543579]
[161.87493896 90.44898224]
[176.86674500 89.95303345]
[191.85853577 89.45708466]
[206.85034180 88.96113586]
[221.84213257 88.46517944]
[231.21983337 79.59246826]
[243.72833252 79.49775696]
[252.64767456 87.68582916]
[267.64562988 87.43782043]
[282.64358521 87.18981171]
[297.64151001 86.94180298]
[312.63946533 86.69379425]
[327.63742065 86.44578552]
[342.63537598 86.19777679]
[356.30572510 78.23336029]
[369.15917969 85.75917053]
[384.15713501 85.51116180]
[399.15509033 85.26315308]
[414.15304565 85.01514435]
[429.15100098 84.76713562]
[444.14892578 84.51912689]
[459.14688110 84.27111816]
[474.14227295 83.89912415]
[489.13406372 83.40317535]
[504.12588501 82.90721893]
[519.11767578 82.41127014]
[534.09252930 81.54368591]
[549.04132080 80.30499268]
[563.99011230 79.06630707]
[569.51629639 64.88100433]
[580.60821533 54.54388809]
[595.02935791 50.06606293]
[609.90344238 52.28453445]
[622.28826904 60.70630646]
[629.75738525 73.61666870]
[644.70617676 72.37797546]
[659.65496826 71.13928986]
[674.60369873 69.90059662]
[689.55249023 68.66191101]
[698.43225098 55.79007721]
[713.52203369 51.68733978]
[727.69689941 58.29088211]
[734.26391602 72.48271942]
[730.12237549 87.56188965]
[717.22772217 96.40847778]
[701.66845703 94.84539032]
[690.79113770 83.61067200]
[675.84240723 84.84936523]
[660.89361572 86.08805847]
[645.94488525 87.32674408]
[630.99609375 88.56543732]
[625.75378418 102.52909851]
[614.92407227 112.87447357]
[600.61798096 117.51089478]
[585.65649414 115.46778107]
[573.01440430 107.09732056]
[565.22875977 94.01506805]
[550.28002930 95.25376129]
[535.33123779 96.49245453]
[532.77880859 98.94954681]
[528.90264893 100.28337097]
[524.24792480 99.88224030]
[519.61364746 97.40306854]
[504.62182617 97.89901733]
[489.63003540 98.39497375]
[474.63821411 98.89092255]
[468.04510498 102.26038361]
[459.39489746 99.26906586]
[444.39694214 99.51707458]
[429.39898682 99.76508331]
[414.40106201 100.01309204]
[399.40310669 100.26110077]
[384.40515137 100.50910950]
[369.40719604 100.75711823]
[356.80960083 108.70379639]
[342.88339233 101.19572449]
[327.88543701 101.44373322]
[312.88748169 101.69174194]
[297.88952637 101.93975067]
[282.89157104 102.18775940]
[267.89364624 102.43576813]
[252.89569092 102.68377686]
[238.36421204 112.50900269]
[222.33808899 103.45697784]
[207.34628296 103.95293427]
[192.35449219 104.44888306]
[177.36268616 104.94483185]
[162.37089539 105.44078064]
[161.16728210 115.27335358]
[158.41267395 124.86029053]
[154.15492249 133.95683289]
[148.48045349 142.32725525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[60 92]
[61 91]
[62 90]
[63 88]
[64 87]
[65 86]
[66 85]
[67 77]
[68 76]
[69 75]
[98 185]
[99 184]
[100 183]
[101 182]
[102 181]
[105 179]
[106 178]
[107 177]
[108 176]
[109 175]
[110 174]
[111 173]
[113 171]
[114 170]
[115 169]
[116 168]
[117 167]
[118 166]
[119 165]
[120 163]
[121 162]
[122 161]
[123 160]
[124 156]
[125 155]
[126 154]
[132 148]
[133 147]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
