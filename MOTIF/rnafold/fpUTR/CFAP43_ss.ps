%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGGUCUCCGGGAUACGGGUGUACACAGCAGCGGCGUCGCGGCCCGCAGCCCCGCGGCGGCGGAAAGGUAACCGACCCGCCCUGGGGUGCUGCGUGCGCUGCCUGCUCCCGCCUGAGGAAAACACUGCCC\
) } def
/len { sequence length } bind def

/coor [
[76.56974030 407.44424438]
[73.19542694 392.68307495]
[74.79938507 377.62631226]
[81.20761108 363.90722656]
[91.72499847 353.01394653]
[105.21070099 346.12811279]
[103.07597351 331.28079224]
[100.94125366 316.43347168]
[91.47142792 304.93688965]
[97.16600037 290.17605591]
[95.03128052 275.32873535]
[92.89656067 260.48138428]
[90.76183319 245.63407898]
[88.07653046 243.20889282]
[86.48036194 239.32165527]
[86.66617584 234.52183533]
[89.04395294 229.65539551]
[87.97386169 214.69360352]
[86.90377045 199.73182678]
[85.83368683 184.77005005]
[75.53577423 195.67660522]
[60.66096115 197.61047363]
[47.91661072 189.69961548]
[43.04943466 175.51121521]
[48.25414276 161.44313049]
[61.18382263 153.83895874]
[76.00820160 156.12759399]
[86.04188538 167.27517700]
[87.46772766 152.34309387]
[88.89356232 137.41102600]
[90.31940460 122.47894287]
[91.74524689 107.54685974]
[92.99330139 92.59886932]
[94.06338501 77.63709259]
[95.13347626 62.67530823]
[96.20355988 47.71352768]
[97.27365112 32.75174713]
[98.34373474 17.78996468]
[99.23571014 2.81650782]
[99.94944000 -12.16650200]
[100.66316986 -27.14951324]
[101.37689972 -42.13252258]
[102.09062195 -57.11553192]
[102.80435181 -72.09854126]
[89.82806396 -64.57418060]
[75.76789093 -69.80021667]
[70.85634613 -83.97332001]
[78.66788483 -96.77877808]
[93.51753998 -98.89721680]
[104.59847260 -88.78631592]
[107.08592224 -103.57863617]
[109.57337189 -118.37094879]
[112.06082153 -133.16326904]
[114.54827881 -147.95558167]
[117.03572845 -162.74789429]
[111.69403839 -177.64007568]
[121.43476868 -188.90805054]
[123.92221832 -203.70036316]
[126.40967560 -218.49267578]
[128.89712524 -233.28498840]
[131.38456726 -248.07731628]
[133.51928711 -262.92462158]
[135.30007935 -277.81854248]
[137.08087158 -292.71246338]
[125.60777283 -303.15985107]
[122.49963379 -318.36245728]
[128.95159912 -332.47457886]
[142.48274231 -340.06979370]
[157.89009094 -338.22763062]
[169.24917603 -327.65640259]
[172.19219971 -312.42095947]
[165.58753967 -298.37966919]
[151.97477722 -290.93167114]
[150.19400024 -276.03775024]
[148.41320801 -261.14385986]
[150.67193604 -256.83514404]
[150.17880249 -251.04988098]
[146.17687988 -245.58985901]
[143.68943787 -230.79754639]
[141.20198059 -216.00523376]
[138.71453857 -201.21292114]
[136.22708130 -186.42059326]
[141.74668884 -172.58647156]
[131.82803345 -160.26045227]
[129.34059143 -145.46812439]
[126.85314178 -130.67581177]
[124.36569214 -115.88349915]
[121.87824249 -101.09118652]
[119.39079285 -86.29886627]
[117.78736115 -71.38481140]
[117.07363129 -56.40180206]
[116.35990906 -41.41879272]
[115.64617920 -26.43578339]
[114.93244934 -11.45277309]
[114.21871948 3.53023648]
[117.07051849 10.42823696]
[113.30551910 18.86005211]
[112.23543549 33.82183456]
[111.16534424 48.78361511]
[110.09526062 63.74539566]
[109.02516937 78.70717621]
[107.95507812 93.66896057]
[110.58648682 101.37772369]
[106.67732239 108.97270203]
[105.25148773 123.90477753]
[103.82564545 138.83685303]
[102.39980316 153.76893616]
[100.97396088 168.70101929]
[100.79547119 183.69995117]
[101.86555481 198.66174316]
[102.93564606 213.62351990]
[104.00572968 228.58529663]
[105.60916138 243.49935913]
[107.74388123 258.34667969]
[109.87860107 273.19400024]
[112.01332855 288.04132080]
[121.63584137 300.59988403]
[115.78857422 314.29876709]
[117.92329407 329.14608765]
[120.05802155 343.99340820]
[134.93740845 346.80093384]
[148.09776306 354.28985596]
[158.11152649 365.64782715]
[163.89248657 379.64279175]
[164.81356812 394.75671387]
[160.77487183 409.35012817]
[152.21446228 421.84002686]
[140.06091309 430.87164307]
[125.63256836 435.46530151]
[110.49449158 435.12268066]
[96.28875732 429.88095093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 120]
[7 119]
[8 118]
[10 116]
[11 115]
[12 114]
[13 113]
[17 112]
[18 111]
[19 110]
[20 109]
[28 108]
[29 107]
[30 106]
[31 105]
[32 104]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
