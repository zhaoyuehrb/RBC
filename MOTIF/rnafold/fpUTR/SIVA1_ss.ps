%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGACGUCACGGCGUCGUUGGUAAGGGGCUGGCGGCCGGGGAGCUGCGUAGCUCCCGGCCCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[15.27177238 171.50958252]
[-2.20188475 180.79557800]
[-21.91923523 180.58511353]
[-39.06961441 170.99594116]
[-51.20486832 179.81271362]
[-63.34012604 188.62950134]
[-75.47537994 197.44627380]
[-87.61063385 206.26306152]
[-93.78282928 221.45634460]
[-110.06163788 223.43939209]
[-119.70081329 210.17219543]
[-112.78440094 195.30291748]
[-96.42741394 194.12780762]
[-84.29216003 185.31101990]
[-72.15690613 176.49424744]
[-60.02164841 167.67745972]
[-47.88639450 158.86068726]
[-51.17985535 148.44181824]
[-51.51167679 137.50228882]
[-48.84722137 126.86891174]
[-43.37866592 117.34799194]
[-35.51119232 109.66413879]
[-25.83296013 104.40516663]
[-15.07116127 101.97707367]
[-4.03736877 102.57279205]
[6.43365955 106.15680695]
[15.54713440 112.46718597]
[22.60856247 121.03468323]
[36.65208817 115.76406097]
[50.69561005 110.49343872]
[64.73913574 105.22281647]
[78.78265381 99.95219421]
[85.12103271 84.87405396]
[100.30146790 78.78474426]
[115.30274963 85.30293274]
[129.09567261 79.40755463]
[142.88858032 73.51217651]
[156.68150330 67.61680603]
[170.47441101 61.72142792]
[184.26733398 55.82605362]
[198.06024170 49.93067932]
[204.99142456 43.47555542]
[212.60671997 44.09566498]
[226.65025330 38.82504272]
[240.69377136 33.55442047]
[254.73728943 28.28380013]
[264.72903442 15.28006458]
[280.94876099 17.69924927]
[286.71102905 33.05270386]
[276.08807373 45.54610825]
[260.00790405 42.32732391]
[245.96440125 47.59794617]
[231.92086792 52.86856842]
[217.87734985 58.13919067]
[203.95562744 63.72359467]
[190.16270447 69.61897278]
[176.36979675 75.51434326]
[162.57687378 81.40972137]
[148.78395081 87.30509949]
[134.99104309 93.20046997]
[121.19812775 99.09584808]
[117.82454681 111.50927734]
[107.89910126 119.69218445]
[95.07014465 120.63672638]
[84.05327606 113.99571228]
[70.00975800 119.26633453]
[55.96623230 124.53695679]
[41.92271042 129.80758667]
[27.87918472 135.07820129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
