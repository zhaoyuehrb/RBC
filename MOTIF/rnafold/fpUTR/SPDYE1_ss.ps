%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGGGAAGGAGCGGCACAUGGGGUUGAGCAGAGGAGAAAAUCAGAAAGAUGGCUUAGAGAAGUCAGCAGUCUGCGAGUCUGGGGAGGAUGGAGAGUGGUUUGGGGUUUUGGGUCGGGGUCUAAGGUGAUCAG\
) } def
/len { sequence length } bind def

/coor [
[96.73354340 415.58065796]
[82.03826141 418.58877563]
[67.12004852 417.02450562]
[53.36837006 411.03356934]
[42.06404495 401.17395020]
[34.25994873 388.36395264]
[30.68294716 373.79669189]
[31.66619873 358.82894897]
[37.11812592 344.85479736]
[46.53093719 333.17581177]
[59.02793503 324.87973022]
[73.44515991 320.73925781]
[88.43980408 321.14001465]
[102.61528778 326.04467773]
[114.65130615 334.99645996]
[123.42718506 347.16226196]
[122.73948669 332.17800903]
[122.05178833 317.19378662]
[121.36408997 302.20956421]
[113.05142212 289.85040283]
[120.14789581 275.71002197]
[119.46019745 260.72579956]
[105.69892883 254.97314453]
[95.75911713 243.77005005]
[91.65234375 229.30299377]
[94.24468994 214.42684937]
[103.07474518 202.10137939]
[116.43465424 194.80247498]
[115.74695587 179.81823730]
[115.05925751 164.83401489]
[114.37155914 149.84979248]
[113.68386078 134.86557007]
[112.99616241 119.88133240]
[88.81657410 126.79504395]
[66.37309265 106.85343933]
[51.98510742 102.61244965]
[39.76981735 112.18148041]
[24.26172256 112.70937347]
[11.42400646 103.99314117]
[6.19303036 89.38436127]
[10.58021259 74.50039673]
[22.89859009 65.06444550]
[38.41149902 64.70481873]
[51.15390396 73.55979919]
[56.22609711 88.22447205]
[70.61407471 92.46545410]
[75.82538605 87.07173920]
[65.03794861 76.64910889]
[51.55779648 70.06993866]
[53.64954758 55.21650696]
[68.42242432 52.61610031]
[75.46057129 65.86167145]
[86.24801636 76.28429413]
[91.45932770 70.89057159]
[86.72604370 56.65695190]
[81.99275970 42.42332840]
[77.25946808 28.18970680]
[72.52618408 13.95608330]
[67.79290009 -0.27753893]
[55.17815399 -10.75609779]
[58.21180344 -26.87220764]
[73.77308655 -32.04699707]
[85.85389709 -20.95708656]
[82.02652740 -5.01082373]
[86.75981140 9.22279835]
[91.49309540 23.45642090]
[96.22637939 37.69004440]
[100.95966339 51.92366791]
[105.69294739 66.15728760]
[119.81651306 78.77857208]
[123.09881592 94.46715546]
[133.88626099 84.04453278]
[138.43463135 68.89122009]
[152.96380615 65.61215973]
[163.75125122 55.18953705]
[174.53869629 44.76691055]
[179.08706665 29.61359978]
[193.61624146 26.33453941]
[204.40368652 15.91191483]
[206.63510132 9.53710175]
[211.11218262 5.85904646]
[215.93280029 5.27288055]
[227.18673706 -4.64421701]
[238.44068909 -14.56131458]
[240.88264465 -30.41742897]
[254.87307739 -38.26901245]
[269.67971802 -32.09300232]
[273.94418335 -16.62710381]
[264.39511108 -3.73543239]
[248.35778809 -3.30737400]
[237.10383606 6.60972357]
[225.84989929 16.52682114]
[214.82630920 26.69935608]
[204.03886414 37.12198257]
[200.26208496 51.52979660]
[184.96131897 55.55435181]
[174.17387390 65.97697449]
[163.38642883 76.39960480]
[159.60964966 90.80741882]
[144.30888367 94.83197784]
[133.52143860 105.25460052]
[127.98039246 119.19363403]
[128.66809082 134.17785645]
[129.35578918 149.16209412]
[130.04348755 164.14631653]
[130.73118591 179.13053894]
[131.41888428 194.11477661]
[145.39118958 200.15927124]
[155.31309509 211.62411499]
[159.25715637 226.20028687]
[156.49278259 240.98268127]
[147.62092590 253.04914856]
[134.44442749 260.03808594]
[135.13212585 275.02230835]
[143.49397278 288.45324707]
[136.34831238 301.52188110]
[137.03601074 316.50610352]
[137.72370911 331.49032593]
[138.41140747 346.47454834]
[143.52116394 354.37390137]
[142.39117432 362.68255615]
[148.72178650 376.28121948]
[155.05239868 389.87988281]
[161.38301086 403.47851562]
[176.31474304 408.65722656]
[183.13591003 422.91369629]
[177.79963684 437.78985596]
[163.47183228 444.45989990]
[148.65293884 438.96664429]
[142.13473511 424.56912231]
[147.78436279 409.80914307]
[141.45375061 396.21047974]
[135.12313843 382.61184692]
[128.79252625 369.01318359]
[126.64962006 383.85931396]
[120.12872314 397.36776733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 119]
[17 118]
[18 117]
[19 116]
[21 114]
[22 113]
[28 107]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[35 46]
[36 45]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[71 101]
[72 100]
[74 98]
[75 97]
[76 96]
[78 94]
[79 93]
[82 92]
[83 91]
[84 90]
[121 134]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
