%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUCAAUGAACAUGACUUCUGGAGUCAAGGUUGUUGGGCCAUUCCCCCCGUUCCACUCACUGGGAAUAUAAAUAGCACCCACAGCGCAGAACACAGAGCCAGAGAGCUGGAAGUGAGAGCAGAUCCCUAACC\
) } def
/len { sequence length } bind def

/coor [
[43.54725266 214.82978821]
[51.72149658 227.40681458]
[54.57601166 242.13270569]
[51.69319534 256.85308838]
[43.49478912 269.41436768]
[31.18020821 277.97891235]
[16.55105209 281.29367065]
[1.74753749 278.87377930]
[-11.06461048 271.07321167]
[-20.01099777 259.03317261]
[-23.78278732 244.51513672]
[-21.82817268 229.64303589]
[-14.43287373 216.59236145]
[-27.95804787 223.07846069]
[-41.48322296 229.56457520]
[-51.47199249 244.98556519]
[-68.87803650 243.06706238]
[-82.25093079 249.86158752]
[-95.62382507 256.65612793]
[-108.99672699 263.45065308]
[-122.36962128 270.24517822]
[-135.74252319 277.03970337]
[-147.12472534 289.60479736]
[-162.34968567 282.14578247]
[-159.39685059 265.45095825]
[-142.53704834 263.66680908]
[-129.16415405 256.87228394]
[-115.79125214 250.07775879]
[-102.41835785 243.28321838]
[-89.04545593 236.48869324]
[-75.67256165 229.69416809]
[-71.59147644 218.24842834]
[-60.43181610 212.49922180]
[-47.96933365 216.03939819]
[-34.44416046 209.55329895]
[-20.91898537 203.06718445]
[-8.60436440 194.50271606]
[2.18307710 184.08009338]
[12.97051907 173.65747070]
[23.75796127 163.23483276]
[34.54540253 152.81221008]
[45.33284378 142.38958740]
[37.30637360 129.23840332]
[32.38980865 114.63685608]
[30.82704163 99.30924225]
[32.69558716 84.01589966]
[37.90275955 69.51544189]
[46.19025803 56.52717209]
[57.14698029 45.69535828]
[70.22941589 37.55732346]
[84.78862762 32.51674652]
[100.10238647 30.82366943]
[115.41107178 32.56207275]
[129.95529175 37.64572525]
[143.01358032 45.82245255]
[153.55920410 35.15522003]
[164.10482788 24.48798561]
[174.65045166 13.82075310]
[185.19607544 3.15351963]
[195.61869812 -7.63392210]
[205.91696167 -18.54015350]
[216.21520996 -29.44638634]
[220.06407166 -44.79229355]
[234.42764282 -48.73401642]
[244.72589111 -59.64025116]
[255.02415466 -70.54648590]
[265.32241821 -81.45271301]
[256.55596924 -94.82897186]
[251.21160889 -109.89365387]
[249.58995056 -125.78734589]
[251.77943420 -141.60437012]
[257.65142822 -156.44432068]
[266.86776733 -169.46340942]
[278.90026855 -179.92234802]
[293.06094360 -187.22842407]
[308.54141235 -190.96897888]
[324.45898438 -190.93484497]
[339.90704346 -187.13191223]
[354.00656128 -179.78065491]
[363.79397583 -191.14756775]
[361.09652710 -206.55073547]
[368.97586060 -220.05816650]
[383.71154785 -225.29203796]
[398.34585571 -219.78108215]
[405.96893311 -206.12741089]
[402.98138428 -190.77786255]
[390.79382324 -180.98002625]
[375.16088867 -181.36015320]
[365.37347412 -169.99324036]
[373.81533813 -158.73519897]
[379.70706177 -145.94944763]
[382.78332520 -132.20523071]
[382.90429688 -118.11513519]
[380.06192017 -104.30768585]
[374.38040161 -91.39939880]
[366.11071777 -79.96719360]
[355.61965942 -70.52263641]
[343.37344360 -63.48902512]
[329.91708374 -59.18246460]
[315.85000610 -57.79760742]
[301.79953003 -59.39888763]
[288.39276123 -63.91752243]
[276.22863770 -71.15445709]
[265.93038940 -60.24822617]
[255.63212585 -49.34199524]
[245.33387756 -38.43576050]
[242.22161865 -23.86994171]
[227.12144470 -19.14813042]
[216.82318115 -8.24189758]
[206.52493286 2.66433477]
[204.19946289 9.74952888]
[195.86331177 13.69914150]
[185.31768799 24.36637497]
[174.77206421 35.03360748]
[164.22644043 45.70084000]
[153.68081665 56.36807251]
[161.61332703 68.54887390]
[166.82531738 82.11838531]
[169.08666992 96.47744751]
[168.29751587 110.99205780]
[164.49270630 125.02130890]
[157.84025574 137.94575500]
[148.63388062 149.19471741]
[137.28010559 158.27151489]
[124.28022766 164.77534485]
[110.20827484 168.41905212]
[95.68557739 169.04173279]
[81.35337830 166.61590576]
[67.84451294 161.24867249]
[55.75547028 153.17703247]
[44.96802521 163.59965515]
[34.18058395 174.02227783]
[23.39314270 184.44490051]
[12.60570145 194.86752319]
[1.81825984 205.29016113]
[16.62639809 202.89871216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 36]
[14 35]
[15 34]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[37 135]
[38 134]
[39 133]
[40 132]
[41 131]
[42 130]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 110]
[61 109]
[62 108]
[64 106]
[65 105]
[66 104]
[67 103]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
