%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGCGGAUCCCGCAGCUGCAGGAGGCGCCCGGCCCGGCGGAGCAGCCCUAGCCGCCACCGUCGCUCUCGCAGCUCUCGUCGCCACUGCCACCGCCGCCGCCGUCACUGCGUCCUGGCUCCGGCUCCCGCGCCCUCCCGGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[120.15909576 430.72680664]
[129.44566345 418.94717407]
[143.32522583 413.25881958]
[158.20767212 415.13308716]
[170.24398804 424.08590698]
[166.46432495 409.56991577]
[162.68464661 395.05392456]
[158.90498352 380.53793335]
[144.99360657 375.28323364]
[136.74639893 362.69564819]
[137.50141907 347.48764038]
[147.17848206 335.50177002]
[143.39880371 320.98577881]
[139.61914062 306.46978760]
[128.92449951 296.10281372]
[132.93479919 280.79830933]
[129.15513611 266.28231812]
[125.37545776 251.76631165]
[121.72382355 248.59111023]
[120.07048035 243.06254578]
[121.75741577 236.55387878]
[118.59722137 221.89056396]
[115.43703461 207.22723389]
[112.27684784 192.56390381]
[109.11665344 177.90057373]
[98.87164307 167.08905029]
[103.52787781 151.96853638]
[100.36768341 137.30520630]
[97.20749664 122.64187622]
[81.67910767 113.59402466]
[77.52072144 96.10968018]
[87.31304169 81.03968048]
[83.53337097 66.52368927]
[79.75370026 52.00769424]
[75.97402954 37.49169922]
[62.74735260 24.72627640]
[67.98190308 8.00711823]
[63.89497375 -6.42538071]
[59.80804825 -20.85787964]
[55.72111893 -35.29037857]
[51.63419342 -49.72287750]
[47.54726410 -64.15538025]
[34.05261230 -76.63718414]
[38.93111420 -93.46367645]
[34.53877258 -107.80618286]
[30.14642906 -122.14868164]
[25.75408745 -136.49118042]
[15.26547909 -139.02157593]
[6.86063099 -145.65692139]
[2.03869390 -155.12725830]
[1.62340021 -165.66516113]
[5.62309408 -175.33561707]
[13.24161911 -182.39122009]
[9.77090645 -196.98416138]
[-0.94952315 -208.61958313]
[3.63296580 -222.79174805]
[0.16225395 -237.38468933]
[-14.46425819 -241.85821533]
[-24.81940079 -252.97882080]
[-28.19545746 -267.69168091]
[-23.78334236 -282.02310181]
[-12.86369991 -292.15359497]
[-16.33441162 -306.74655151]
[-27.05484200 -318.38195801]
[-22.47235298 -332.55410767]
[-25.94306374 -347.14706421]
[-37.59336472 -358.68841553]
[-33.16230011 -374.47756958]
[-17.20816994 -378.27203369]
[-6.14321804 -366.16836548]
[-11.35011578 -350.61776733]
[-7.87940359 -336.02484131]
[2.59277773 -325.43319702]
[-1.74146259 -310.21725464]
[1.72924924 -295.62429810]
[16.04046822 -291.49459839]
[26.43221283 -280.68405151]
[30.04143524 -266.02664185]
[25.80159950 -251.43484497]
[14.75520325 -240.85540771]
[18.22591400 -226.26245117]
[28.69809532 -215.67082214]
[24.36385536 -200.45487976]
[27.83456802 -185.86193848]
[45.11104965 -176.98846436]
[50.47929382 -158.00865173]
[40.09658813 -140.88352966]
[44.48892975 -126.54102325]
[48.88127136 -112.19852448]
[53.27361298 -97.85601807]
[63.83798599 -91.87510681]
[67.58848572 -79.90737915]
[61.97976303 -68.24230194]
[66.06668854 -53.80980301]
[70.15361786 -39.37730408]
[74.24054718 -24.94480705]
[78.32747650 -10.51230812]
[82.41439819 3.92019129]
[92.84944153 10.12399292]
[96.34508514 22.16863060]
[90.49002838 33.71202850]
[94.26969910 48.22802353]
[98.04936981 62.74401855]
[101.82904053 77.26000977]
[112.56093597 80.95596313]
[120.18347931 89.36611176]
[122.80976868 100.40859222]
[119.78968048 111.34992981]
[111.87082672 119.48168182]
[115.03101349 134.14501953]
[118.19120026 148.80833435]
[128.66224670 160.66868591]
[123.77998352 174.74038696]
[126.94017792 189.40371704]
[130.10035706 204.06704712]
[133.26055908 218.73036194]
[136.42074585 233.39369202]
[139.89144897 247.98664856]
[143.67112732 262.50265503]
[147.45079041 277.01864624]
[158.41577148 288.42388916]
[154.13513184 302.69012451]
[157.91479492 317.20611572]
[161.69447327 331.72210693]
[175.98811340 337.46649170]
[184.06413269 350.37506104]
[183.00309753 365.38632202]
[173.42097473 376.75827026]
[177.20063782 391.27426147]
[180.98031616 405.79025269]
[184.75997925 420.30624390]
[190.05615234 434.34014893]
[196.80920410 447.73403931]
[203.56225586 461.12792969]
[218.28747559 467.49560547]
[222.35081482 483.01556396]
[212.63522339 495.78219604]
[196.59367371 496.00204468]
[186.53187561 483.50643921]
[190.16838074 467.88098145]
[183.41531372 454.48709106]
[176.66226196 441.09320068]
[173.54223633 455.76513672]
[163.60902405 467.00485229]
[149.43200684 471.90505981]
[134.67825317 469.19827271]
[123.16403198 459.58459473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 131]
[6 130]
[7 129]
[8 128]
[12 124]
[13 123]
[14 122]
[16 120]
[17 119]
[18 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[27 111]
[28 110]
[29 109]
[32 104]
[33 103]
[34 102]
[35 101]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[44 90]
[45 89]
[46 88]
[47 87]
[53 84]
[54 83]
[56 81]
[57 80]
[62 75]
[63 74]
[65 72]
[66 71]
[132 142]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
