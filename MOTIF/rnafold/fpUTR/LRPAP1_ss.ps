%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCGCGCGGUGGGUGGGGGCGGGGUAGUGGGCGGGGCAUCGGCAGGCUAGGUUUUCUCCGCGCAGCGCCAGUCGCAGAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[83.33074951 209.82743835]
[73.16781616 198.79499817]
[68.59919739 184.50765991]
[70.47482300 169.62733459]
[58.94511795 179.22242737]
[53.28699875 193.99728394]
[38.55487442 196.19131470]
[27.02516747 205.78640747]
[15.49546051 215.38151550]
[12.60636806 231.16227722]
[-1.60036540 238.61535645]
[-16.22654915 232.02336121]
[-20.05222893 216.44313049]
[-10.14266777 203.82646179]
[5.90036535 203.85180664]
[17.43007278 194.25669861]
[28.95977974 184.66160583]
[33.79321671 170.57305908]
[49.35002518 167.69271851]
[60.87973022 158.09762573]
[70.04734039 146.22517395]
[76.41418457 132.64344788]
[82.78103638 119.06172943]
[89.14788818 105.48000336]
[95.01445770 91.67481232]
[100.37292480 77.66457367]
[105.73138428 63.65433121]
[99.53279114 49.36394119]
[105.16661835 35.23189926]
[118.82852173 29.41055489]
[124.18698120 15.40031338]
[121.89006805 -0.25327277]
[133.66340637 -9.37674713]
[139.02186584 -23.38698959]
[144.38032532 -37.39723206]
[149.73880005 -51.40747070]
[155.09725952 -65.41771698]
[160.45571899 -79.42795563]
[156.18519592 -98.96491241]
[171.24467468 -110.86474609]
[175.56616211 -125.22875214]
[179.88764954 -139.59275818]
[169.78459167 -151.25175476]
[167.61131287 -166.52526855]
[174.06129456 -180.53959656]
[187.07635498 -188.82281494]
[202.50344849 -188.73178101]
[215.41984558 -180.29553223]
[221.70396423 -166.20605469]
[219.35057068 -150.95924377]
[209.11062622 -139.42030334]
[194.25164795 -135.27127075]
[189.93016052 -120.90727234]
[185.60868835 -106.54325867]
[191.36027527 -97.75083923]
[191.18951416 -87.02310181]
[184.90585327 -78.05345917]
[174.46595764 -74.06948853]
[169.10749817 -60.05924988]
[163.74903870 -46.04900742]
[158.39057922 -32.03876877]
[153.03210449 -18.02852631]
[147.67364502 -4.01828384]
[150.35383606 10.63319588]
[138.19721985 20.75877571]
[132.83876038 34.76901627]
[139.12907410 48.22143555]
[133.89440918 62.50614548]
[119.74163055 69.01279449]
[114.38316345 83.02303314]
[109.02470398 97.03327942]
[110.09683990 102.43212128]
[107.93048096 108.00955200]
[102.72961426 111.84685516]
[96.36276245 125.42858124]
[89.99591064 139.01029968]
[83.62905884 152.59202576]
[97.55307770 147.01333618]
[112.53134155 147.82051086]
[125.77519989 154.86325073]
[134.81889343 166.83036804]
[137.97865295 181.49377441]
[134.66621399 196.12345886]
[125.49826813 207.99565125]
[112.18172455 214.89996338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[7 17]
[8 16]
[9 15]
[21 77]
[22 76]
[23 75]
[24 74]
[25 71]
[26 70]
[27 69]
[30 66]
[31 65]
[33 63]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[40 54]
[41 53]
[42 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
