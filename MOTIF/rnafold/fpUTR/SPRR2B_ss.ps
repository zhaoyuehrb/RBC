%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUGGUACUCGAGCACCGAUCUGCUUUGGAGAAACUGGUUAAUCCUGAGACUCCAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[36.32109070 164.91900635]
[27.90059853 169.94354248]
[18.30287552 171.72068787]
[8.72983742 170.05953979]
[0.36934111 165.19779968]
[-5.75220346 157.76832581]
[-20.30267143 161.41304016]
[-34.85314178 165.05773926]
[-49.40361023 168.70243835]
[-55.07557678 183.14572144]
[-68.17193604 191.46829224]
[-83.65686035 190.46994019]
[-95.57608795 180.53457642]
[-99.34642792 165.48252869]
[-93.51811218 151.10162354]
[-80.33224487 142.92161560]
[-64.85905457 144.08787537]
[-53.04831314 154.15197754]
[-38.49784470 150.50726318]
[-23.94737434 146.86256409]
[-9.39690590 143.21786499]
[-1.06856823 124.06604004]
[18.58276749 116.26718140]
[38.25181198 124.69940948]
[51.48062897 117.62846375]
[64.70944977 110.55751038]
[77.93827057 103.48655701]
[91.16709137 96.41561127]
[93.95957947 91.49417877]
[99.43687439 88.68161774]
[106.05762482 89.37290955]
[119.91581726 83.63265228]
[133.77401733 77.89240265]
[147.63220215 72.15215302]
[148.56724548 56.95718384]
[155.97669983 43.72891998]
[168.34420776 35.06492615]
[183.18603516 32.63979721]
[197.54972839 36.88167191]
[208.60151672 46.89783478]
[222.45971680 41.15758514]
[229.90283203 26.94563675]
[245.68157959 24.04549408]
[257.69183350 34.68190002]
[256.72036743 50.69551468]
[243.51240540 59.80206299]
[228.19996643 55.01577759]
[214.34176636 60.75603104]
[213.60948181 75.65332031]
[206.45227051 88.80944824]
[194.24269104 97.58937836]
[179.37117004 100.20816040]
[164.77809143 96.09364319]
[153.37245178 86.01034546]
[139.51426697 91.75059509]
[125.65607452 97.49085236]
[111.79787445 103.23110199]
[98.23803711 109.64442444]
[85.00921631 116.71537781]
[71.78040314 123.78633118]
[58.55158234 130.85728455]
[45.32276154 137.92823792]
[45.63977432 147.86314392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[31 57]
[32 56]
[33 55]
[34 54]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
