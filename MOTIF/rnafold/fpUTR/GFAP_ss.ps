%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCCAGUCUAGCCCACUCCUUCAUAAAGCCCUCGCAUCCCAGGAGCGAGCAGAGCCAGAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[70.65728760 265.42517090]
[62.90574646 251.84403992]
[65.74836731 236.46699524]
[77.84294891 226.55461121]
[77.84294891 211.55461121]
[75.27664185 208.66349792]
[74.18923187 204.25370789]
[75.34223938 199.14372253]
[79.04524994 194.48863220]
[81.14832306 179.63679504]
[83.25139618 164.78495789]
[77.37494659 151.09858704]
[86.97068024 138.51953125]
[89.07374573 123.66770172]
[77.25607300 112.73800659]
[74.11085510 96.95120239]
[80.83739471 82.32693481]
[94.87079620 74.44155121]
[96.27541351 59.50746536]
[97.68003845 44.57337570]
[98.73418427 29.61046219]
[99.43726349 14.62694836]
[100.14035034 -0.35656491]
[100.84342957 -15.34007835]
[86.59531403 -22.84587288]
[77.01313019 -35.71755981]
[73.93189240 -51.40716934]
[77.90580750 -66.83545685]
[88.10938263 -78.99619293]
[102.50828552 -85.54198456]
[102.50828552 -100.54198456]
[93.84458160 -114.46578217]
[101.80870819 -128.80122375]
[118.20785522 -128.80122375]
[126.17198181 -114.46578217]
[117.50828552 -100.54198456]
[117.50828552 -85.54198456]
[130.44294739 -80.04645538]
[140.29046631 -69.95861053]
[145.50486755 -56.81386948]
[145.24893188 -42.63118362]
[139.52848816 -29.60297394]
[129.19670105 -19.75619316]
[115.82694244 -14.63699436]
[115.12386322 0.34651902]
[114.42077637 15.33003235]
[113.71769714 30.31354523]
[116.65346527 37.38589096]
[112.61412811 45.97799683]
[111.20950317 60.91208649]
[109.80488586 75.84617615]
[120.52590179 83.93045807]
[125.80100250 96.27830505]
[124.23059845 109.61359406]
[116.23133850 120.39820099]
[103.92559052 125.77077484]
[101.82251740 140.62260437]
[107.54853821 155.37127686]
[98.10324097 166.88803101]
[96.00016785 181.73986816]
[93.89709473 196.59170532]
[92.84294891 211.55461121]
[92.84294891 226.55461121]
[104.93753052 236.46699524]
[107.78015137 251.84403992]
[100.02861023 265.42517090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[18 51]
[19 50]
[20 49]
[21 47]
[22 46]
[23 45]
[24 44]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
