%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUGGCUCCGACCGAGGGGCGGAGCCGCUGCUCGAGCUGCUGCUGGAUUGAACUCAGAGAAGCCGGGGGUGCUGGAAAUGUAAACAAGAAUAGACUGUUCAUUCCUGAUGGCUUUUAGUCUAUACUAACAUAUUGUUUGUC\
) } def
/len { sequence length } bind def

/coor [
[120.84406281 145.53062439]
[111.18058014 148.81092834]
[101.05274200 150.06399536]
[90.88117981 149.23777771]
[81.08834076 146.36660767]
[72.08095551 141.56968689]
[61.94710541 152.62886047]
[51.81325150 163.68801880]
[41.67939758 174.74717712]
[31.54554367 185.80633545]
[21.41169167 196.86549377]
[11.27783775 207.92465210]
[7.75036860 216.43449402]
[0.80025280 219.11145020]
[-9.57244301 229.94691467]
[-12.94258785 245.99603271]
[-28.60872841 250.84413147]
[-40.45487976 239.50390625]
[-36.29473877 223.64120483]
[-20.40790176 219.57421875]
[-10.03520679 208.73875427]
[0.21867792 197.79080200]
[10.35253143 186.73164368]
[20.48638344 175.67248535]
[30.62023735 164.61332703]
[40.75408936 153.55415344]
[50.88794327 142.49499512]
[61.02179718 131.43583679]
[54.80576706 121.56371307]
[51.04270172 110.52118683]
[49.93684769 98.90761566]
[51.54822540 87.35334015]
[55.78937912 76.48546600]
[62.43010712 66.89387512]
[52.78829193 55.40320587]
[37.99059677 49.80510330]
[35.73678207 35.08200455]
[26.09496689 23.59133911]
[16.45315170 12.10067272]
[8.47653580 7.49262381]
[6.72965240 0.25255406]
[-2.65919948 -11.44571304]
[-12.04805183 -23.14398003]
[-26.72010422 -29.06356239]
[-28.65220070 -43.83232117]
[-38.04105377 -55.53059006]
[-47.42990494 -67.22885895]
[-56.81875610 -78.92712402]
[-71.49080658 -84.84671021]
[-73.42290497 -99.61546326]
[-82.81175995 -111.31373596]
[-97.97948456 -108.89801788]
[-112.31723022 -114.40478516]
[-121.96822357 -126.35276031]
[-124.33638763 -141.52798462]
[-118.78469849 -155.84840393]
[-106.80653381 -165.46188354]
[-91.62396240 -167.78247070]
[-77.32102203 -162.18592834]
[-67.74512482 -150.17768860]
[-65.47213745 -134.98791504]
[-71.11349487 -120.70258331]
[-61.72463989 -109.00431824]
[-47.72414017 -103.92147827]
[-45.12049103 -88.31597900]
[-35.73163986 -76.61770630]
[-26.34278679 -64.91944122]
[-16.95393372 -53.22117615]
[-2.95343566 -48.13833237]
[-0.34978437 -32.53283310]
[9.03906727 -20.83456612]
[18.42791939 -9.13629818]
[27.94381905 2.45885873]
[37.58563232 13.94952583]
[47.22744751 25.44019127]
[61.33549500 30.21640778]
[64.27896118 45.76139450]
[73.92077637 57.25205994]
[94.04343414 50.28046799]
[115.24343872 52.30146790]
[133.68641663 62.94952774]
[146.03665161 80.29876709]
[150.06040955 101.21130371]
[164.83253479 103.81602478]
[179.60464478 106.42074585]
[194.37677002 109.02546692]
[209.14888000 111.63019562]
[223.92098999 114.23491669]
[238.84877014 115.70516968]
[253.84519958 116.03239441]
[267.81088257 108.59798431]
[280.36633301 116.61109161]
[295.36276245 116.93830872]
[310.35919189 117.26553345]
[325.35562134 117.59275818]
[340.35205078 117.91998291]
[355.34848022 118.24720764]
[370.34490967 118.57443237]
[385.34133911 118.90164948]
[391.00601196 107.20325470]
[400.65728760 98.56742859]
[412.82247925 94.26401520]
[425.66348267 94.90543365]
[437.25439453 100.35976410]
[445.87036133 109.77596283]
[450.24426270 121.71637726]
[465.21215820 122.69742584]
[479.67276001 114.96292877]
[493.45663452 123.84758759]
[492.38406372 140.21162415]
[477.55844116 147.22111511]
[464.23110962 137.66531372]
[449.26321411 136.68426514]
[440.28076172 151.29946899]
[425.07675171 159.43409729]
[407.75680542 158.79026794]
[393.04922485 149.45442200]
[385.01412964 133.89808655]
[370.01770020 133.57086182]
[355.02127075 133.24363708]
[340.02484131 132.91641235]
[325.02841187 132.58918762]
[310.03195190 132.26196289]
[295.03552246 131.93473816]
[280.03909302 131.60751343]
[267.14608765 139.06533813]
[253.51797485 131.02882385]
[238.52154541 130.70159912]
[248.54325867 141.86247253]
[249.22953796 156.84677124]
[240.26995850 168.87698364]
[225.71699524 172.51174927]
[212.15309143 166.10705566]
[205.71325684 152.55978394]
[209.31030273 137.99745178]
[221.31626892 129.00703430]
[206.54415894 126.40230560]
[191.77203369 123.79758453]
[176.99992371 121.19286346]
[162.22781372 118.58814240]
[147.45568848 115.98342133]
[143.22982788 125.27240753]
[137.20851135 133.51177979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[14 21]
[15 20]
[34 78]
[35 77]
[37 75]
[38 74]
[39 73]
[41 72]
[42 71]
[43 70]
[45 68]
[46 67]
[47 66]
[48 65]
[50 63]
[51 62]
[83 141]
[84 140]
[85 139]
[86 138]
[87 137]
[88 136]
[89 128]
[90 127]
[92 125]
[93 124]
[94 123]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
