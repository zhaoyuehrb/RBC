%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DPCD)
} def

/sequence { (\
GGAACGGUUGCCAUGGCAGCGGCUGGGCGUGCUGCUUAGCAGGGGAAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.004270264 ubox
1 12 0.050524408 ubox
1 24 0.003487555 ubox
1 33 0.003513353 ubox
1 36 0.007410238 ubox
1 37 0.003248607 ubox
2 8 0.005947532 ubox
2 9 0.009066336 ubox
2 11 0.050533541 ubox
2 23 0.003815195 ubox
2 32 0.003973593 ubox
2 35 0.008456336 ubox
2 36 0.003219538 ubox
2 37 0.030664861 ubox
3 8 0.009740120 ubox
3 9 0.012713606 ubox
3 36 0.031249414 ubox
3 37 0.015963775 ubox
4 8 0.010243974 ubox
4 30 0.028574749 ubox
4 36 0.016733113 ubox
5 15 0.003309180 ubox
5 21 0.357145755 ubox
5 25 0.032515615 ubox
5 29 0.029645603 ubox
5 31 0.013028699 ubox
5 34 0.063972495 ubox
6 12 0.016124377 ubox
6 20 0.263178993 ubox
6 24 0.032726698 ubox
6 28 0.029189177 ubox
6 30 0.011615667 ubox
6 33 0.064821462 ubox
7 11 0.015883908 ubox
7 17 0.006060947 ubox
7 20 0.796835468 ubox
7 23 0.032826105 ubox
7 32 0.065055507 ubox
7 40 0.043425766 ubox
8 16 0.006058154 ubox
8 19 0.834047981 ubox
8 22 0.032806833 ubox
8 26 0.025986503 ubox
8 31 0.063022257 ubox
8 39 0.043433360 ubox
8 42 0.330313412 ubox
8 43 0.018511960 ubox
8 44 0.011362251 ubox
8 45 0.010372530 ubox
8 46 0.190209863 ubox
8 47 0.180800608 ubox
8 48 0.047666349 ubox
8 49 0.009880564 ubox
9 15 0.005574964 ubox
9 18 0.839190526 ubox
9 21 0.034246256 ubox
9 25 0.020639354 ubox
9 29 0.063260393 ubox
9 38 0.043020710 ubox
9 41 0.407750641 ubox
9 42 0.012778781 ubox
9 43 0.006827651 ubox
9 44 0.007747705 ubox
9 45 0.204315639 ubox
9 46 0.205289605 ubox
9 47 0.039435209 ubox
9 48 0.013945617 ubox
10 17 0.840149864 ubox
10 20 0.035140940 ubox
10 23 0.028988595 ubox
10 28 0.082201146 ubox
10 37 0.042447609 ubox
10 40 0.419807915 ubox
11 16 0.837426081 ubox
11 19 0.035100202 ubox
11 22 0.029121603 ubox
11 27 0.082248264 ubox
11 39 0.418707293 ubox
11 43 0.211773417 ubox
11 44 0.216030855 ubox
11 45 0.108365294 ubox
12 21 0.029124256 ubox
12 26 0.082162545 ubox
12 42 0.211613006 ubox
12 43 0.215465409 ubox
12 44 0.108582662 ubox
14 21 0.007676143 ubox
14 25 0.055526916 ubox
14 34 0.004033850 ubox
14 38 0.069677222 ubox
14 41 0.173516959 ubox
15 20 0.011847264 ubox
15 24 0.081552611 ubox
15 33 0.006429537 ubox
15 36 0.455967750 ubox
15 37 0.053891572 ubox
15 40 0.165538540 ubox
16 23 0.082244856 ubox
16 32 0.006806084 ubox
16 35 0.477241501 ubox
16 36 0.007739253 ubox
16 40 0.183338414 ubox
17 22 0.082109048 ubox
17 31 0.006852623 ubox
17 34 0.477334523 ubox
17 39 0.190804519 ubox
18 30 0.006383412 ubox
18 33 0.477220409 ubox
18 36 0.217575651 ubox
18 37 0.042749327 ubox
19 28 0.006416244 ubox
19 30 0.005682297 ubox
19 32 0.477300838 ubox
19 35 0.237701602 ubox
19 36 0.006196770 ubox
20 27 0.006462057 ubox
20 29 0.010334867 ubox
20 31 0.477117856 ubox
20 34 0.237801131 ubox
21 28 0.020986240 ubox
21 30 0.427636749 ubox
21 33 0.237634289 ubox
22 28 0.413122820 ubox
22 30 0.078219901 ubox
22 32 0.237813921 ubox
22 40 0.839622468 ubox
23 27 0.410606646 ubox
23 29 0.110852871 ubox
23 31 0.237742714 ubox
23 39 0.840652219 ubox
23 42 0.004521990 ubox
24 31 0.003210674 ubox
24 38 0.840227545 ubox
24 41 0.004516522 ubox
25 30 0.021055787 ubox
25 36 0.003267450 ubox
25 37 0.838880901 ubox
25 40 0.004445004 ubox
26 35 0.004227364 ubox
26 36 0.839766956 ubox
27 35 0.840696319 ubox
28 34 0.840361218 ubox
29 33 0.518496609 ubox
30 41 0.024223926 ubox
31 40 0.027564942 ubox
32 39 0.027565068 ubox
32 42 0.059333661 ubox
32 43 0.003403058 ubox
32 45 0.010927048 ubox
33 38 0.025787032 ubox
33 41 0.059765839 ubox
33 44 0.010951597 ubox
34 40 0.060106100 ubox
35 39 0.059683745 ubox
35 42 0.014307241 ubox
35 43 0.013229940 ubox
35 44 0.020800340 ubox
35 45 0.017341155 ubox
35 49 0.005079076 ubox
36 41 0.013113714 ubox
36 42 0.013090746 ubox
36 43 0.020597762 ubox
36 44 0.017317637 ubox
36 48 0.005193923 ubox
37 41 0.010095265 ubox
37 42 0.017703291 ubox
37 43 0.016295786 ubox
37 47 0.004992669 ubox
7 20 0.9500000 lbox
8 19 0.9500000 lbox
9 18 0.9500000 lbox
10 17 0.9500000 lbox
11 16 0.9500000 lbox
22 40 0.9500000 lbox
23 39 0.9500000 lbox
24 38 0.9500000 lbox
25 37 0.9500000 lbox
26 36 0.9500000 lbox
27 35 0.9500000 lbox
28 34 0.9500000 lbox
showpage
end
%%EOF
