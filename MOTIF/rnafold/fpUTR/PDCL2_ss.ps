%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGGGCGCUCUUCCAGCCUGGAGAAGGCUGCGGGUCUCCAUCCGUGGCGCCUCGCCAGCUGCAGGACGACGCGGGCUCUUGAGGGGCAGAGCAGCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[76.85536194 368.81500244]
[69.10382080 355.23385620]
[71.94644165 339.85681152]
[84.04102325 329.94442749]
[84.04102325 314.94442749]
[84.04102325 299.94442749]
[73.68122864 292.12075806]
[69.70983124 279.55572510]
[73.81121826 266.82681274]
[84.68458557 258.70977783]
[85.13762665 243.71661377]
[85.59067535 228.72346497]
[86.04372406 213.73030090]
[86.49676514 198.73715210]
[79.14739990 185.78199768]
[87.29797363 172.22180176]
[87.75102234 157.22865295]
[85.06865692 153.09274292]
[85.07434845 147.19691467]
[88.71140289 141.35157776]
[90.06889343 126.41313171]
[91.42637634 111.47467804]
[85.73483276 98.70369720]
[93.63517761 87.16783905]
[94.99266052 72.22938538]
[96.35014343 57.29093933]
[93.98348999 48.29073334]
[97.98091125 41.92412949]
[99.78895569 27.03349686]
[93.77149963 12.40131474]
[102.98648834 0.69946712]
[104.79454041 -14.19116592]
[106.60258484 -29.08179855]
[108.41063690 -43.97243118]
[110.21868896 -58.86306381]
[102.57707977 -75.53105927]
[113.46606445 -89.20146942]
[114.82354736 -104.13991547]
[116.18103027 -119.07836914]
[117.53851318 -134.01681519]
[104.66717529 -140.31265259]
[94.75873566 -150.62150574]
[89.00171661 -163.67712402]
[88.07644653 -177.88557434]
[92.07472992 -191.51995850]
[100.49122620 -202.93017578]
[112.28718567 -210.74272156]
[126.01862335 -214.02592468]
[127.82667542 -228.91654968]
[129.63471985 -243.80718994]
[131.44277954 -258.69781494]
[133.25082397 -273.58843994]
[129.15776062 -290.04089355]
[143.83418274 -298.52850342]
[156.05290222 -286.77523804]
[148.14144897 -271.78039551]
[146.33340454 -256.88977051]
[144.52536011 -241.99913025]
[142.71730042 -227.10850525]
[140.90925598 -212.21786499]
[154.77149963 -204.69979858]
[164.73799133 -192.42941284]
[169.27636719 -177.24688721]
[167.67117310 -161.44357300]
[160.13644409 -147.41616821]
[147.78773499 -137.30328369]
[132.47695923 -132.65933228]
[131.11947632 -117.72088623]
[129.76199341 -102.78243256]
[128.40451050 -87.84398651]
[135.94697571 -78.25336456]
[134.82920837 -65.69877625]
[125.10932159 -57.05501556]
[123.30126953 -42.16438293]
[121.49322510 -27.27374840]
[119.68517303 -12.38311577]
[117.87712097 2.50751734]
[124.02390289 16.07462120]
[114.67958832 28.84154701]
[112.87154388 43.73218155]
[111.28859711 58.64842224]
[109.93110657 73.58686829]
[108.57362366 88.52532196]
[114.26516724 101.29630280]
[106.36482239 112.83216095]
[105.00733948 127.77061462]
[103.64985657 142.70906067]
[102.74417877 157.68170166]
[102.29113007 172.67485046]
[109.60809326 186.70242310]
[101.48992157 199.19020081]
[101.03688049 214.18334961]
[100.58383179 229.17651367]
[100.13078308 244.16966248]
[99.67774200 259.16281128]
[111.87656403 271.58850098]
[111.40784454 288.65942383]
[99.04102325 299.94442749]
[99.04102325 314.94442749]
[99.04102325 329.94442749]
[111.13560486 339.85681152]
[113.97822571 355.23385620]
[106.22668457 368.81500244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[16 89]
[17 88]
[20 87]
[21 86]
[22 85]
[24 83]
[25 82]
[26 81]
[28 80]
[29 79]
[31 77]
[32 76]
[33 75]
[34 74]
[35 73]
[37 70]
[38 69]
[39 68]
[40 67]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
