%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACGGCUUCCGGGAUUUGGCGGGGCCUUUGUCUCUCGCUGCAGUCGCAGCUCCAGGUCUCGUCUUCACUGCUCU\
) } def
/len { sequence length } bind def

/coor [
[103.22706604 412.36834717]
[106.20157623 393.21624756]
[106.81340790 378.22872925]
[107.42523193 363.24121094]
[107.73120880 348.24435425]
[107.73120880 333.24435425]
[107.73120880 318.24435425]
[92.68022919 310.38684082]
[83.49233246 296.00567627]
[82.67987823 278.87225342]
[90.54514313 263.53125000]
[105.07707977 254.09515381]
[103.85443878 239.14506531]
[102.63179779 224.19497681]
[101.40916443 209.24488831]
[100.18652344 194.29479980]
[98.96388245 179.34471130]
[97.74124146 164.39462280]
[96.51860809 149.44453430]
[95.29596710 134.49444580]
[94.07332611 119.54435730]
[81.25319672 108.10338593]
[81.70308685 90.92639160]
[71.65097809 79.79287720]
[61.59886551 68.65937042]
[51.54675674 57.52585602]
[41.49464798 46.39234543]
[25.73324394 41.86352158]
[22.03773499 25.88618660]
[34.20973969 14.89645100]
[49.72774887 20.19961357]
[52.62815857 36.34023285]
[62.68026733 47.47374725]
[72.73237610 58.60725784]
[82.78448486 69.74076843]
[92.83660126 80.87428284]
[96.46715546 79.88467407]
[100.21764374 79.57794952]
[103.96074677 79.96453094]
[112.07035828 67.34573364]
[120.17996979 54.72692871]
[128.28958130 42.10812378]
[136.39920044 29.48932076]
[136.63859558 13.09192085]
[151.08877563 5.33791924]
[164.88461304 14.20396805]
[163.83413696 30.56943703]
[149.01799011 37.59893417]
[140.90838623 50.21773529]
[132.79876709 62.83654022]
[124.68916321 75.45534515]
[116.57955170 88.07414246]
[119.81430817 104.94980621]
[109.02341461 118.32171631]
[110.24605560 133.27180481]
[111.46869659 148.22189331]
[112.69132996 163.17198181]
[113.91397095 178.12207031]
[115.13661194 193.07215881]
[116.35925293 208.02224731]
[117.58188629 222.97233582]
[118.80452728 237.92242432]
[120.02716827 252.87251282]
[132.45227051 257.40029907]
[142.13847351 266.33392334]
[147.61466980 278.26687622]
[148.06837463 291.34112549]
[143.46604919 303.53625488]
[134.55262756 312.98187256]
[122.73120880 318.24435425]
[122.73120880 333.24435425]
[122.73120880 348.24435425]
[125.93162537 357.10983276]
[122.41275024 363.85305786]
[121.80091858 378.84057617]
[121.18909454 393.82809448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 72]
[6 71]
[7 70]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
