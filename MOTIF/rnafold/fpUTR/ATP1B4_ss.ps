%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAGUGUCUCCUGUACCAGCAGAAGCUCCAGAACUCUCACCCGAUUGCCUGCCUCUGCUGCGUCUUUGCCCACUGAACAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.77470398 310.78683472]
[96.40193939 295.48587036]
[103.19297791 281.76943970]
[115.58729553 272.78948975]
[113.37777710 257.95312500]
[111.16825104 243.11676025]
[108.95872498 228.28038025]
[106.74919891 213.44400024]
[92.68302917 210.99946594]
[80.05693054 204.28889465]
[70.13102722 193.96682739]
[63.90071869 181.04898071]
[61.99680710 166.81230164]
[64.62168884 152.66879272]
[71.52791595 140.02540588]
[82.04147339 130.14416504]
[95.12752533 124.01609802]
[93.46773529 109.10821533]
[91.53274536 94.23354340]
[89.32321930 79.39717102]
[87.11369324 64.56079102]
[84.90416718 49.72441864]
[82.69464111 34.88804626]
[80.48511505 20.05167198]
[78.27559662 5.21529722]
[68.58990479 -7.29462004]
[74.36805725 -21.02277565]
[72.15853119 -35.85914993]
[57.14878464 -37.26305771]
[42.91140366 -42.21889877]
[30.27412605 -50.43855286]
[19.97167206 -61.44413757]
[12.60301018 -74.59580231]
[8.59654522 -89.12892151]
[8.18520832 -104.19857025]
[11.39291286 -118.92861176]
[18.03316879 -132.46266174]
[27.71991730 -144.01385498]
[39.88998795 -152.91064453]
[53.83582306 -158.63577271]
[68.74663544 -160.85638428]
[83.75553131 -159.44337463]
[97.98990631 -154.47891235]
[110.62219238 -146.25158691]
[120.91797638 -135.23976135]
[128.27865601 -122.08363342]
[132.27630615 -107.54808807]
[132.67851257 -92.47819519]
[129.46188354 -77.75009918]
[122.81342316 -64.22008514]
[113.11966705 -52.67475510]
[100.94420624 -43.78534317]
[86.99490356 -38.06867599]
[89.20442963 -23.23229980]
[98.73207855 -11.78357983]
[93.11196899 3.00577188]
[95.32149506 17.84214592]
[97.53102112 32.67852020]
[99.74054718 47.51489258]
[101.95006561 62.35126877]
[104.15959167 77.18764496]
[106.36911774 92.02401733]
[110.66902924 99.09053040]
[108.37561798 107.44842529]
[110.03540802 122.35630798]
[125.43287659 125.98547363]
[138.65818787 134.61697388]
[148.14685059 147.20811462]
[152.78375244 162.24914551]
[152.03416443 177.94419861]
[146.00541687 192.42573547]
[135.43186951 203.97679138]
[121.58557129 211.23448181]
[123.79509735 226.07086182]
[126.00462341 240.90722656]
[128.21414185 255.74360657]
[130.42367554 270.57998657]
[144.89680481 275.55865479]
[155.38996887 286.70101929]
[159.49192810 301.44659424]
[156.26007080 316.40701294]
[146.43707275 328.14443970]
[132.28016663 333.96170044]
[117.04251099 332.52206421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[17 65]
[18 64]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[27 54]
[28 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
