%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUGCGCAGCCUGAGAGGGGGUGAGCUGACACUGUCCCAGCUGCCACCUAGACUCGGAGCUCCAUCCAAACCUCCAGCGAAGACAUCCCAGGUCGGGUGAAUCUUCCAGCCCUGGGGGUGGAGGUAGUAAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[94.55033112 218.88546753]
[80.66899109 213.20141602]
[68.68368530 204.18186951]
[59.37853622 192.41690063]
[53.36233902 178.67625427]
[51.02869034 163.85890198]
[52.53027344 148.93424988]
[57.76884460 134.87873840]
[66.40167999 122.61194611]
[77.86396790 112.93641663]
[91.40737915 106.48465729]
[76.52311707 104.62483978]
[61.63886261 102.76502228]
[46.73454285 101.07352448]
[31.81205559 99.55056000]
[16.88957024 98.02759552]
[1.96708465 96.50463104]
[-12.95540142 94.98166656]
[-30.86708450 104.10816193]
[-46.12757492 92.31417847]
[-61.10363770 91.46707916]
[-76.07969666 90.61997986]
[-91.06437683 89.94216919]
[-106.05575562 89.43373108]
[-121.04714203 88.92530060]
[-129.81477356 91.78035736]
[-136.37048340 88.23217010]
[-151.34654236 87.38507080]
[-166.32260132 86.53796387]
[-181.29867554 85.69086456]
[-196.27473450 84.84376526]
[-205.25158691 97.39046478]
[-219.59507751 103.07092285]
[-234.72825623 100.07253265]
[-245.82218933 89.35206604]
[-249.33682251 74.33039093]
[-244.15066528 59.80085754]
[-231.91859436 50.39979553]
[-216.54382324 49.12704849]
[-202.93237305 56.38874435]
[-195.42762756 69.86770630]
[-180.45156860 70.71480560]
[-165.47550964 71.56190491]
[-150.49945068 72.40900421]
[-135.52337646 73.25610352]
[-120.53870392 73.93391418]
[-105.54732513 74.44235229]
[-90.55594635 74.95078278]
[-83.70666504 72.00895691]
[-75.23259735 75.64391327]
[-60.25653839 76.49101257]
[-45.28047562 77.33811951]
[-38.22085190 69.80902100]
[-27.95742798 67.40263367]
[-17.87335205 71.16301727]
[-11.43243599 80.05918121]
[3.49004936 81.58214569]
[18.41253471 83.10511017]
[33.33502197 84.62807465]
[48.25750732 86.15103912]
[55.29036713 83.68002319]
[63.49868011 87.88076782]
[78.38293457 89.74058533]
[93.26718903 91.60040283]
[108.15145111 89.74058533]
[122.12044525 84.27549744]
[129.04273987 78.18415833]
[136.46739197 78.84867859]
[150.55633545 73.70068359]
[164.64526367 68.55268860]
[169.26770020 63.63627243]
[174.84710693 62.09050369]
[179.48884583 63.50617599]
[193.79602051 59.00008011]
[208.10317993 54.49398422]
[222.41035461 49.98788834]
[236.71752930 45.48179245]
[251.02468872 40.97569656]
[265.33187866 36.46959686]
[279.63903809 31.96350288]
[293.34875488 14.29315567]
[314.36251831 19.34765053]
[328.20443726 13.56826973]
[342.04635620 7.78888941]
[355.88827515 2.00950933]
[369.73019409 -3.76987100]
[383.43795776 -9.86059570]
[397.00457764 -16.25955200]
[410.57122803 -22.65850830]
[424.13784790 -29.05746651]
[437.70446777 -35.45642471]
[442.80798340 -50.41402435]
[457.02993774 -57.30683517]
[471.93276978 -52.04547882]
[478.67483521 -37.75141907]
[473.25619507 -22.90507126]
[458.89166260 -16.31451035]
[444.10342407 -21.88979721]
[430.53680420 -15.49083996]
[416.97018433 -9.09188271]
[403.40353394 -2.69292593]
[389.83691406 3.70603108]
[387.38815308 7.89571428]
[382.24105835 10.54647446]
[375.50958252 10.07204914]
[361.66766357 15.85142994]
[347.82571411 21.63080978]
[333.98379517 27.41019058]
[320.14187622 33.18957138]
[318.73312378 41.12802505]
[314.20758057 47.91458511]
[307.26132202 52.36877823]
[299.01861572 53.67964935]
[290.85015869 51.55246735]
[284.14514160 46.27067184]
[269.83795166 50.77676773]
[255.53079224 55.28286362]
[241.22361755 59.78895950]
[226.91645813 64.29505920]
[212.60928345 68.80115509]
[198.30210876 73.30725098]
[183.99494934 77.81334686]
[169.79325867 82.64162445]
[155.70433044 87.78961945]
[141.61538696 92.93761444]
[127.58553314 98.24449921]
[113.61653137 103.70957947]
[128.32949829 106.62993622]
[141.82034302 113.18716431]
[153.20642090 122.95227051]
[161.74279785 135.28637695]
[166.87100220 149.38253784]
[168.25550842 164.31849670]
[165.80575562 179.11709595]
[159.68199158 192.81015015]
[150.28488159 204.50178528]
[138.22923279 213.42709351]
[124.30374908 219.00212097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 64]
[12 63]
[13 62]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[20 52]
[21 51]
[22 50]
[23 48]
[24 47]
[25 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[65 127]
[66 126]
[68 125]
[69 124]
[70 123]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[78 117]
[79 116]
[80 115]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
