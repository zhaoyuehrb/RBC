%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGCGGGCGCGGAGCCGGAAGUGUUGUGGCCGCCGCCGCCGCGCGUCGCGGAGGCACGUGUGGAGCCCCGGCAGCAGGAGCGUCGCAGGUCCUUGGCCCUUGCCAGACAUUAGCACC\
) } def
/len { sequence length } bind def

/coor [
[37.85004807 207.31134033]
[34.75551605 192.63401794]
[36.02095795 177.68748474]
[41.53904724 163.73934937]
[50.84034348 151.97387695]
[36.45804977 156.23411560]
[22.07575226 160.49433899]
[7.69345665 164.75457764]
[0.11301693 178.36245728]
[-14.53336525 182.47805786]
[-27.45969391 175.16740417]
[-41.84198761 179.42764282]
[-56.22428513 183.68786621]
[-70.60658264 187.94810486]
[-82.89110565 201.58862305]
[-99.76888275 196.97814941]
[-114.03472900 201.61340332]
[-128.30058289 206.24865723]
[-142.56642151 210.88391113]
[-153.30021667 222.50700378]
[-167.79553223 219.08134460]
[-182.06137085 223.71659851]
[-195.25686646 234.36157227]
[-209.13870239 224.62858582]
[-203.62896729 208.59489441]
[-186.69662476 209.45074463]
[-172.43078613 204.81549072]
[-162.71737671 193.52394104]
[-147.20167542 196.61805725]
[-132.93583679 191.98280334]
[-118.66999054 187.34754944]
[-104.40413666 182.71229553]
[-98.57891083 172.02276611]
[-86.63359070 168.08955383]
[-74.86681366 173.56579590]
[-60.48451614 169.30557251]
[-46.10221863 165.04534912]
[-31.71992302 160.78511047]
[-24.86065865 147.61369324]
[-10.33565331 143.08833313]
[3.43322635 150.37226868]
[17.81552315 146.11204529]
[32.19781876 141.85180664]
[46.58011246 137.59158325]
[59.47121048 129.92218018]
[70.07781219 119.31558228]
[80.68441772 108.70898438]
[80.27400208 92.26544189]
[91.75172424 80.48323059]
[108.20037842 80.46305847]
[118.52569580 69.58244324]
[122.41266632 54.24614716]
[136.78598022 50.34011459]
[147.11129761 39.45949936]
[157.43661499 28.57888412]
[167.76193237 17.69826698]
[171.46156311 9.20842171]
[178.50280762 6.67245579]
[189.10940552 -3.93414617]
[193.39651489 -19.16343880]
[207.86714172 -22.69188118]
[218.47375488 -33.29848480]
[229.08035278 -43.90508652]
[239.68695068 -54.51168823]
[250.29354858 -65.11828613]
[254.58065796 -80.34757996]
[269.05130005 -83.87602234]
[279.65789795 -94.48262787]
[283.94497681 -109.71192169]
[298.41561890 -113.24036407]
[309.02221680 -123.84696198]
[307.47918701 -139.40823364]
[316.34234619 -152.29147339]
[331.42684937 -156.41363525]
[345.61019897 -149.82833862]
[352.19549561 -135.64497375]
[348.07333374 -120.56048584]
[335.19009399 -111.69730377]
[319.62884521 -113.24036407]
[309.02221680 -102.63375854]
[305.49377441 -88.16312408]
[290.26449585 -83.87602234]
[279.65789795 -73.26942444]
[276.12945557 -58.79878616]
[260.90014648 -54.51168823]
[250.29354858 -43.90508652]
[239.68695068 -33.29848480]
[229.08035278 -22.69188118]
[218.47375488 -12.08528042]
[214.94531250 2.38535762]
[199.71601868 6.67245579]
[189.10940552 17.27905655]
[178.64254761 28.02358627]
[168.31723022 38.90420151]
[157.99191284 49.78481674]
[147.66659546 60.66543198]
[144.51815796 75.22347260]
[129.40631104 79.90776062]
[119.08099365 90.78837585]
[120.91322327 103.40226746]
[115.17712402 114.78489685]
[103.94853973 120.81699371]
[91.29101562 119.31558228]
[80.68441772 129.92218018]
[70.07781219 140.52879333]
[84.85771179 137.96859741]
[99.74851227 139.77526855]
[113.48735809 145.79557800]
[124.90908051 155.51896667]
[133.04502869 168.12080383]
[137.20521545 182.53234863]
[137.03680420 197.53140259]
[132.55410767 211.84591675]
[124.13726044 224.26191711]
[112.50010681 233.72640991]
[98.62955475 239.43673706]
[83.70194244 240.90861511]
[68.98325348 238.01721191]
[55.72174835 231.00776672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 44]
[6 43]
[7 42]
[8 41]
[11 38]
[12 37]
[13 36]
[14 35]
[16 32]
[17 31]
[18 30]
[19 29]
[21 27]
[22 26]
[45 105]
[46 104]
[47 103]
[50 99]
[51 98]
[53 96]
[54 95]
[55 94]
[56 93]
[58 92]
[59 91]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[67 83]
[68 82]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
