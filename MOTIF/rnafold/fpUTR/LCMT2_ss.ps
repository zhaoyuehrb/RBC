%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGUGCCGGCGGAAGGGGAAGUCCAGGAGCAUGGGUGGUUUUUUUCCCCCUACCGAGGUCCGUGAGGUGUGUGCUAACCAAGGGGCGGCUCACAACCGUGACAGACUGCCAUUCCUGAGUCUCUUCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[63.70291138 414.86254883]
[60.53322983 429.89080811]
[50.26213837 441.31011963]
[35.65250778 446.04870605]
[20.63425255 442.83193970]
[9.24721050 432.52508545]
[4.55443859 417.90069580]
[7.81826830 402.89257812]
[18.16074562 391.53790283]
[32.79979706 386.89099121]
[35.94140244 372.22366333]
[39.08300400 357.55636597]
[42.05245972 342.85321045]
[44.84936142 328.11627197]
[47.64626312 313.37933350]
[50.44316483 298.64239502]
[53.24006271 283.90545654]
[56.03696442 269.16851807]
[58.83386612 254.43157959]
[61.63076782 239.69464111]
[53.66666794 232.96702576]
[49.22415161 223.44583130]
[49.18420792 212.85801697]
[53.62235260 203.15574646]
[61.78216934 196.15649414]
[72.20336151 193.20265198]
[76.02899933 178.69869995]
[79.85464478 164.19476318]
[83.68028259 149.69081116]
[87.50592804 135.18687439]
[90.81924438 120.55738068]
[93.61614227 105.82044220]
[87.98351288 106.77087402]
[81.82823181 105.36295319]
[75.94411469 101.46525574]
[62.56309128 94.68675232]
[49.18206406 87.90824890]
[40.01853180 86.80060577]
[35.56959152 80.81076813]
[22.35114861 73.72044373]
[7.89910507 79.69308472]
[-6.99527597 74.92953491]
[-15.29932213 61.67898941]
[-13.09211731 46.19795990]
[-1.41583610 35.79611206]
[14.21633911 35.38488007]
[26.42337227 45.15843201]
[29.44147682 60.50199890]
[42.65991974 67.59232330]
[55.96057129 74.52722168]
[69.34159851 81.30572510]
[82.72262573 88.08422852]
[72.10368347 77.48998260]
[71.33018494 62.50993729]
[80.80149078 50.87832642]
[95.62754059 48.60057831]
[108.15361786 56.85269165]
[111.91247559 71.37409210]
[104.96186829 84.66869354]
[115.69207764 74.18714905]
[126.42227936 63.70561218]
[137.15248108 53.22407150]
[141.61781311 38.04607773]
[156.12881470 34.68750381]
[166.85900879 24.20596123]
[166.71784973 6.75794506]
[178.96562195 -5.19256306]
[195.73220825 -4.64449167]
[206.21376038 -15.37469578]
[216.69529724 -26.10490036]
[227.05033875 -36.95723343]
[237.27745056 -47.93020248]
[247.50457764 -58.90317535]
[251.25355530 -74.27378082]
[265.59118652 -78.30883026]
[275.81829834 -89.28179932]
[286.04544067 -100.25476837]
[285.66638184 -115.82698822]
[296.19442749 -126.80945587]
[311.04251099 -127.07485962]
[321.26962280 -138.04783630]
[327.64578247 -153.75709534]
[344.50622559 -151.97888184]
[347.46493530 -135.28509521]
[332.24258423 -127.82070923]
[322.01547241 -116.84774017]
[322.79418945 -102.01773071]
[312.57876587 -90.74388885]
[297.01840210 -90.02765656]
[286.79129028 -79.05467987]
[276.56414795 -68.08171082]
[273.54669189 -53.49596405]
[258.47753906 -48.67605591]
[248.25042725 -37.70308685]
[238.02331543 -26.73011589]
[235.74278259 -19.62586212]
[227.42550659 -15.62335968]
[216.94395447 -4.89315462]
[206.46241760 5.83704996]
[208.41007996 18.62904549]
[202.52052307 30.36916351]
[190.75775146 36.63967896]
[177.34056091 34.93616486]
[166.61035156 45.41770554]
[162.91252136 59.84598923]
[147.63401794 63.95427322]
[136.90382385 74.43581390]
[126.17361450 84.91735840]
[115.44341278 95.39889526]
[108.35308075 108.61734009]
[105.55618286 123.35427856]
[107.35089111 128.45617676]
[106.98176575 133.23889160]
[104.95188141 136.91247559]
[102.00987244 139.01251221]
[98.18422699 153.51644897]
[94.35858917 168.02040100]
[90.53294373 182.52435303]
[86.70730591 197.02828979]
[97.76375580 213.69845581]
[93.21340942 232.86793518]
[76.36770630 242.49154663]
[73.57080078 257.22848511]
[70.77390289 271.96542358]
[67.97700500 286.70236206]
[65.18009949 301.43930054]
[62.38320160 316.17623901]
[59.58629990 330.91317749]
[56.78939819 345.65011597]
[58.26947021 354.76089478]
[53.75032806 360.69796753]
[50.60872269 375.36526489]
[47.46711731 390.03259277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 133]
[11 132]
[12 131]
[13 129]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 111]
[32 110]
[35 52]
[36 51]
[37 50]
[39 49]
[40 48]
[59 109]
[60 108]
[61 107]
[62 106]
[64 104]
[65 103]
[68 99]
[69 98]
[70 97]
[71 95]
[72 94]
[73 93]
[75 91]
[76 90]
[77 89]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
