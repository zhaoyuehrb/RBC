%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUGCUGUGGGGAGUGAUCACAUUUUUCACAACAGUAAGUCCCUGACUCCACCUCUUCUGCCACAAACGUCAGC\
) } def
/len { sequence length } bind def

/coor [
[102.15046692 142.55313110]
[85.94804382 140.22357178]
[71.81964111 131.95716858]
[61.85055542 118.97399902]
[57.51218414 103.19034576]
[42.59014511 101.66300201]
[28.07386398 107.95491028]
[16.20057678 98.96189880]
[1.27853799 97.43455505]
[-13.64350033 95.90720367]
[-28.56553841 94.37985992]
[-43.48757553 92.85251617]
[-58.40961456 91.32517242]
[-73.33164978 89.79782867]
[-88.25369263 88.27048492]
[-103.17572784 86.74314117]
[-118.09776306 85.21579742]
[-133.01980591 83.68844604]
[-147.75340271 90.88935852]
[-161.20339966 81.50695038]
[-159.53358459 65.19303131]
[-144.46173096 58.72997284]
[-131.49246216 68.76641083]
[-116.57041931 70.29375458]
[-101.64838409 71.82109833]
[-86.72634888 73.34844208]
[-71.80430603 74.87579346]
[-56.88227081 76.40313721]
[-41.96023178 77.93048096]
[-27.03819275 79.45782471]
[-12.11615562 80.98516846]
[2.80588269 82.51251221]
[17.72792053 84.03985596]
[31.17687798 77.63870239]
[44.11748886 86.74095917]
[59.03952789 88.26831055]
[64.78072357 76.02093506]
[74.07140350 66.19022369]
[85.97522736 59.76694489]
[99.29250336 57.39844513]
[112.68108368 59.32343292]
[124.79162598 65.34790039]
[134.40362549 74.86468506]
[140.54832458 86.91466522]
[142.60649109 100.28342438]
[157.35438538 103.02197266]
[172.10227966 105.76051331]
[186.85015869 108.49906158]
[201.59805298 111.23760986]
[208.24565125 97.68357086]
[218.30444336 86.42642212]
[231.02798462 78.30151367]
[245.47210693 73.91177368]
[260.56497192 73.58294678]
[275.18658447 77.33943939]
[288.25189209 84.90248871]
[298.79141235 95.71086884]
[306.02304077 108.96253204]
[309.41009521 123.67410278]
[308.70126343 138.75389099]
[303.94915771 153.08288574]
[295.50637817 165.59776306]
[283.99948120 175.36985779]
[270.28231812 181.67399597]
[255.37283325 184.04237366]
[240.37734985 182.29925537]
[226.40869141 176.57397461]
[214.50338745 167.29138184]
[205.54490662 155.14033508]
[200.19802856 141.02249146]
[198.85951233 125.98550415]
[184.11161804 123.24695587]
[169.36372375 120.50840759]
[154.61582947 117.76985931]
[139.86793518 115.03131866]
[131.25852966 128.95335388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
