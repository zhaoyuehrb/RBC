%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGGGCUUGCACACGCUGGUCACGCGGUCAGCUAUUGACACUUCCUGGUGGGAUCCGAGUGAGGCGACGGGGUAGGGGUUGGCGCUCAGGCGGCGACC\
) } def
/len { sequence length } bind def

/coor [
[104.92623901 127.25395966]
[93.81639862 125.67172241]
[84.76876068 119.97093201]
[72.52580261 128.63754272]
[60.28285217 137.30413818]
[53.48960495 151.59268188]
[38.63123322 152.63101196]
[26.38828087 161.29762268]
[14.14532757 169.96421814]
[1.90237343 178.63082886]
[-4.89087486 192.91937256]
[-19.74924469 193.95768738]
[-31.99219894 202.62429810]
[-38.35110092 217.74040222]
[-54.65310669 219.52273560]
[-64.12810516 206.13780212]
[-57.02902985 191.35487366]
[-40.65880585 190.38134766]
[-28.41585159 181.71473694]
[-22.49830246 168.04609680]
[-6.76423407 166.38787842]
[5.47871971 157.72126770]
[17.72167397 149.05465698]
[29.96462631 140.38806152]
[35.88217926 126.71940613]
[51.61624527 125.06119537]
[63.85919952 116.39458466]
[76.10214996 107.72797394]
[74.88667297 99.61322784]
[76.35147095 91.53974915]
[64.38121033 82.50023651]
[52.41095352 73.46071625]
[40.44069672 64.42119598]
[24.41678238 65.20464325]
[13.92207146 53.07036972]
[17.00720596 37.32675171]
[31.30553436 30.05094337]
[45.84860229 36.82432556]
[49.48021317 52.45093536]
[61.45047379 61.49045563]
[73.42073059 70.52997589]
[85.39099121 79.56949615]
[104.50596619 72.67340851]
[124.58383942 82.33070374]
[133.62335205 70.36044312]
[142.66287231 58.39018631]
[151.51698303 46.28214264]
[160.18359375 34.03918839]
[168.85020447 21.79623604]
[170.50842285 6.06216860]
[184.17706299 0.14461796]
[192.84367371 -12.09833527]
[188.36926270 -22.11607742]
[188.55215454 -33.00439453]
[193.28887939 -42.71928406]
[201.62757874 -49.46627426]
[211.95846558 -52.03179550]
[222.32437134 -50.00104523]
[232.08364868 -61.39212036]
[230.61817932 -77.12831879]
[240.77328491 -89.23822021]
[256.52407837 -90.53722382]
[268.52593994 -80.25466156]
[269.65835571 -64.49099731]
[259.24948120 -52.59852600]
[243.47471619 -51.63284683]
[233.71543884 -40.24177170]
[236.80223083 -21.16133308]
[224.89723206 -5.55786753]
[205.08662415 -3.43172836]
[196.42002869 8.81122589]
[195.38169861 23.66959572]
[181.09315491 30.46284294]
[172.42654419 42.70579910]
[163.75994873 54.94874954]
[162.44172668 62.35479736]
[154.63313293 67.42970276]
[145.59361267 79.39996338]
[136.55409241 91.37022400]
[137.01602173 106.36310577]
[146.77529907 117.75418091]
[156.53457642 129.14524841]
[166.29383850 140.53633118]
[176.05311584 151.92739868]
[190.90750122 157.37329102]
[193.31236267 172.07247925]
[203.07164001 183.46354675]
[212.83090210 194.85461426]
[228.46925354 199.79165649]
[231.74813843 215.85966492]
[219.29455566 226.52925110]
[203.91966248 220.82446289]
[201.43983459 204.61389160]
[191.68055725 193.22282410]
[181.92127991 181.83174133]
[167.76495361 177.20062256]
[164.66204834 161.68667603]
[154.90277100 150.29560852]
[145.14349365 138.90452576]
[135.38421631 127.51345825]
[125.62494659 116.12238312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[7 24]
[8 23]
[9 22]
[10 21]
[12 19]
[13 18]
[30 42]
[31 41]
[32 40]
[33 39]
[44 79]
[45 78]
[46 77]
[47 75]
[48 74]
[49 73]
[51 71]
[52 70]
[58 67]
[59 66]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
