%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCAGCUUCGCGCAGACCCGGAAGCGGACGGCGUGGAGUGACUAUCCCACCGCCGCGGGAUUGACUUCUAAAGACUCUUGGUAUGUGAGGAAGAAACCUGGAAGAGGAAGAGGAAAGCAAAGGAGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[97.92759705 124.42419434]
[92.14705658 138.26564026]
[86.36651611 152.10707092]
[80.58598328 165.94850159]
[74.80544281 179.78994751]
[81.04206085 194.31166077]
[75.10610199 208.95883179]
[60.51926041 215.04158020]
[45.93565750 208.95108032]
[40.00748062 194.30075073]
[46.25181580 179.78236389]
[60.96400452 174.00939941]
[66.74454498 160.16796875]
[72.52508545 146.32653809]
[78.30562592 132.48509216]
[84.08615875 118.64366150]
[80.36182404 114.66896057]
[77.60720825 109.96990967]
[75.95833588 104.77855682]
[75.49662781 99.35124207]
[61.34249878 94.38529205]
[47.18836975 89.41934204]
[33.03424072 84.45339203]
[21.59451485 91.66623688]
[8.28492832 90.95411682]
[-2.01370573 82.80388641]
[-5.65517569 70.38858032]
[-19.68991852 65.09462738]
[-33.72466278 59.80066681]
[-47.75940323 54.50671005]
[-59.87207794 59.11021042]
[-71.48792267 54.34335709]
[-76.53993225 43.28923035]
[-90.44769287 37.67013168]
[-106.14143372 39.67439651]
[-115.04351044 27.73277473]
[-128.95126343 22.11367607]
[-142.85902405 16.49457741]
[-156.76678467 10.87547874]
[-172.03688049 15.79520416]
[-185.32380676 6.80426407]
[-186.43498230 -9.20026207]
[-174.51799011 -19.94107056]
[-158.71453857 -17.17873383]
[-151.14768982 -3.03227925]
[-137.23992920 2.58681965]
[-123.33216858 8.20591831]
[-109.42440796 13.82501793]
[-94.72544861 11.41883755]
[-84.82859039 23.76237297]
[-70.92083740 29.38147163]
[-53.74622345 25.97152138]
[-42.46544647 40.47196579]
[-28.43070221 45.76592255]
[-14.39595985 51.05988312]
[-0.36121738 56.35383987]
[14.60321140 48.77006912]
[30.75480080 54.42509079]
[38.00019455 70.29926300]
[52.15431976 75.26521301]
[66.30844879 80.23116302]
[80.46257782 85.19712067]
[102.27838135 75.59415436]
[121.93976593 89.06917572]
[136.76849365 86.80889130]
[151.59721375 84.54860687]
[166.42594910 82.28832245]
[181.25466919 80.02803802]
[196.08338928 77.76775360]
[210.91212463 75.50746155]
[225.74084473 73.24717712]
[240.56958008 70.98689270]
[245.28576660 53.77062988]
[256.97052002 40.34524536]
[273.27511597 33.34007645]
[290.95211792 34.10087967]
[306.50219727 42.43153763]
[316.86672974 56.64190674]
[331.50164795 53.35272980]
[346.13659668 50.06354904]
[360.77151489 46.77436829]
[375.40646362 43.48519135]
[376.85671997 28.44011688]
[382.87805176 14.59866810]
[392.86932373 3.31135964]
[405.84255981 -4.32474756]
[420.52090454 -7.57266998]
[435.46411133 -6.12661600]
[449.20999146 -0.14072677]
[460.41738892 9.78724289]
[467.99703979 22.67559624]
[482.63198853 19.38641739]
[497.26690674 16.09723854]
[505.50689697 2.61102152]
[520.88903809 -1.01735342]
[534.28741455 7.36476421]
[537.75292969 22.78441238]
[529.22961426 36.09338760]
[513.77423096 39.39570999]
[500.55609131 30.73217201]
[485.92117310 34.02135086]
[471.28622437 37.31053162]
[469.95019531 52.20267487]
[464.06857300 65.97136688]
[454.20587158 77.26325989]
[441.31842041 84.96421051]
[426.66189575 88.30924988]
[411.66888428 86.95851898]
[397.80880737 81.03176117]
[386.44396973 71.09783173]
[378.69564819 58.12012482]
[364.06069946 61.40930557]
[349.42578125 64.69848633]
[334.79083252 67.98766327]
[320.15591431 71.27684021]
[318.65863037 83.56639099]
[313.42025757 94.81111908]
[304.94158936 103.89999390]
[294.04440308 109.92978668]
[281.79174805 112.29483795]
[269.38439941 110.74787140]
[258.04306030 105.42574310]
[248.88830566 96.83747101]
[242.82986450 85.81562042]
[228.00112915 88.07590485]
[213.17240906 90.33618927]
[198.34368896 92.59647369]
[183.51495361 94.85676575]
[168.68623352 97.11705017]
[153.85749817 99.37733459]
[139.02877808 101.63761902]
[124.20005035 103.89790344]
[121.10391235 112.46840668]
[115.09107208 119.31568909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[20 62]
[21 61]
[22 60]
[23 59]
[27 56]
[28 55]
[29 54]
[30 53]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
[64 132]
[65 131]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
