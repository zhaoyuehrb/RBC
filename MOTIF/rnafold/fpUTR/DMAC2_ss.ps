%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAGCUAAUGGACAGGCAAGGGUGGGGCCUGUAGGAUAAGAGAGCUUGGAAGGGAUUGUUCGAGG\
) } def
/len { sequence length } bind def

/coor [
[127.63222504 168.40385437]
[114.05102539 172.42372131]
[99.95192719 173.77415466]
[85.85459137 172.40534973]
[72.27864838 168.36778259]
[59.72447205 161.81027222]
[48.65480423 152.97450256]
[39.47765350 142.18617249]
[32.53127670 129.84291077]
[28.07171249 116.39967346]
[26.26333427 102.35196686]
[27.17279243 88.21756744]
[30.76656914 74.51745605]
[36.91220474 61.75659943]
[24.94194412 52.71707916]
[12.97168636 43.67756271]
[1.00142765 34.63804245]
[-10.96883106 25.59852219]
[-22.93908882 16.55900192]
[-37.38041687 21.98593330]
[-52.45843887 18.72144890]
[-63.36180878 7.80723524]
[-66.61130524 -7.27402210]
[-61.17002106 -21.70994949]
[-48.77425385 -30.89409447]
[-33.37944412 -31.89582825]
[-19.89802551 -24.39550400]
[-12.63186550 -10.78644562]
[-13.89956951 4.58874416]
[-1.92931128 13.62826347]
[10.04094696 22.66778374]
[22.01120567 31.70730209]
[33.98146439 40.74682236]
[45.95172119 49.78634262]
[57.92919159 39.39740372]
[71.84986877 31.80764008]
[87.07077789 27.36761856]
[102.88887024 26.28241539]
[118.57353210 28.60215759]
[133.40029907 34.21969986]
[146.68434143 42.87556839]
[157.81207275 54.16996002]
[166.26951599 67.58119965]
[171.66604614 82.48983002]
[173.75238037 98.20724487]
[172.43217468 114.00745392]
[167.76638794 129.16067505]
[180.87071228 136.45974731]
[193.97505188 143.75881958]
[207.07939148 151.05787659]
[220.18373108 158.35694885]
[233.28805542 165.65602112]
[247.30755615 159.00518799]
[262.55258179 161.89808655]
[273.16110229 173.22233582]
[275.05395508 188.62353516]
[267.50326538 202.17959595]
[253.41246033 208.67794800]
[238.19972229 205.61984253]
[227.71466064 194.18116760]
[225.98899841 178.76036072]
[212.88465881 171.46128845]
[199.78031921 164.16221619]
[186.67597961 156.86315918]
[173.57165527 149.56408691]
[160.46731567 142.26501465]
[151.27610779 153.04138184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
