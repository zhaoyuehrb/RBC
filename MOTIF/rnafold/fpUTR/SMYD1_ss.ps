%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUGCUGAAGGUGCUGAAAUAGCAAUGACAAGAGACUUGGCUCAGUGUUAAAUAACUGCCGCGCUGGCCUGACAGUCUCUGAG\
) } def
/len { sequence length } bind def

/coor [
[135.18809509 157.18786621]
[122.35928345 164.96099854]
[107.40290070 166.10412598]
[93.54180145 160.37089539]
[83.76281738 148.99673462]
[80.17314911 134.43258667]
[83.54631805 119.81678772]
[93.15609741 108.29830933]
[78.24608612 109.93887329]
[71.99917603 123.90037537]
[59.68404388 132.80174255]
[44.66672134 134.33355713]
[30.99047852 128.18405151]
[22.28719902 116.09610748]
[7.37718534 117.73667145]
[-7.53282928 119.37724304]
[-22.44284439 121.01780701]
[-37.35285950 122.65837860]
[-52.43567657 130.40078735]
[-64.05084991 118.05072784]
[-55.39883423 103.47064209]
[-38.99342728 107.74835968]
[-24.08341217 106.10779572]
[-9.17339706 104.46722412]
[5.73661709 102.82666016]
[20.64663124 101.18608856]
[26.51340675 87.49497986]
[38.52537155 78.51897430]
[53.51647949 76.74892426]
[67.47241211 82.75964355]
[76.60551453 95.02886200]
[91.51552582 93.38829041]
[105.79821777 88.80518341]
[118.87895203 81.46391296]
[131.95970154 74.12265015]
[145.04043579 66.78137970]
[158.12118530 59.44011307]
[171.20191956 52.09884262]
[184.28265381 44.75757599]
[193.65718079 25.67119598]
[214.15708923 25.86883354]
[226.35644531 17.14095116]
[238.55578613 8.41306686]
[243.87239075 0.68856239]
[251.36387634 -0.40117300]
[263.87384033 -8.67768955]
[276.38381958 -16.95420456]
[288.89376831 -25.23072052]
[301.40374756 -33.50723648]
[313.91369629 -41.78375244]
[311.79806519 -56.89953613]
[316.45861816 -71.43370056]
[326.97000122 -82.50048828]
[341.24514771 -87.90258026]
[356.44976807 -86.56737518]
[369.56491089 -78.75998688]
[377.98660278 -66.03058624]
[380.04272461 -50.90658951]
[375.32495117 -36.39088440]
[364.77008057 -25.36557770]
[350.47375488 -20.01974678]
[335.27453613 -21.41481400]
[322.19021606 -29.27378654]
[309.68026733 -20.99727058]
[297.17028809 -12.72075367]
[284.66030884 -4.44423819]
[272.15036011 3.83227825]
[259.64038086 12.10879421]
[247.28367615 20.61241341]
[235.08432007 29.34029579]
[222.88497925 38.06818008]
[222.84901428 47.35884476]
[218.35021973 55.64731979]
[210.34535217 60.89322281]
[200.67124939 61.73442841]
[191.62393188 57.83831787]
[178.54318237 65.17958832]
[165.46244812 72.52085114]
[152.38169861 79.86212158]
[139.30096436 87.20338440]
[126.22022247 94.54465485]
[113.13948059 101.88592529]
[127.65644073 105.66187286]
[138.90438843 115.58577728]
[144.45956421 129.51918030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 32]
[9 31]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[41 71]
[42 70]
[43 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
