%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGAGAAAUCUCCUCAAGCCAGAGCCUGUGCUGUGAGGGGCUUCGGGACCUUGGGGCAGCUCCUGAGUUCAGACAGAGUUCAGGAAGGGAGACAGGGGCACAGAGAGACAGAGGUUCAUGGACUGAGGCAAAGGCUGGGCCAGGCUCAGCAACCCAGGCCUCCCGCAGGCAGGCAGAGGCUGCCCUGUAACCC\
) } def
/len { sequence length } bind def

/coor [
[72.18256378 584.18145752]
[60.60612106 574.64282227]
[52.86643600 561.79382324]
[49.84675217 547.09832764]
[44.91676331 561.26507568]
[39.98677826 575.43176270]
[35.05678940 589.59844971]
[30.12680244 603.76513672]
[33.73292542 619.76287842]
[21.49966621 630.68438721]
[6.01155233 625.29455566]
[3.20142794 609.13793945]
[15.96010780 598.83514404]
[20.89009476 584.66845703]
[25.82008362 570.50177002]
[30.75007057 556.33508301]
[35.68005753 542.16833496]
[33.40757751 536.30157471]
[34.68961716 529.34667969]
[39.92184448 523.48577881]
[41.59282303 508.57916260]
[43.26380157 493.67254639]
[44.93478012 478.76589966]
[33.82888031 468.87664795]
[30.63799667 454.17010498]
[36.79063797 440.24179077]
[50.11901855 432.51776123]
[51.78999710 417.61114502]
[53.46097183 402.70449829]
[55.13195038 387.79785156]
[56.80292892 372.89120483]
[58.47390366 357.98458862]
[56.09204483 350.97906494]
[60.29222870 342.85424805]
[62.20070267 327.97613525]
[64.10917664 313.09805298]
[66.01764679 298.21997070]
[67.92612457 283.34185791]
[61.87101364 269.73358154]
[71.30125427 257.02999878]
[73.20972443 242.15191650]
[75.11820221 227.27381897]
[77.02667236 212.39572144]
[78.93515015 197.51762390]
[80.84362030 182.63952637]
[82.75209045 167.76142883]
[80.48224640 160.71881104]
[84.81146240 152.66201782]
[86.95694733 137.81625366]
[89.10243225 122.97047424]
[66.25733185 98.03353119]
[86.47120667 60.05328369]
[76.60727692 48.75271606]
[66.74333954 37.45214844]
[56.87940979 26.15158081]
[47.01547623 14.85101414]
[32.87246704 20.25477219]
[17.76236725 20.49326134]
[3.50917363 15.55699635]
[-8.17316151 6.05999041]
[-15.88682938 -6.83655167]
[-18.71740532 -21.56619263]
[-16.34221077 -36.34751892]
[-9.06697178 -49.39957428]
[-18.93090439 -60.70014191]
[-28.79483795 -72.00070953]
[-38.65877151 -83.30127716]
[-48.52270508 -94.60184479]
[-58.38663864 -105.90241241]
[-68.25057220 -117.20298004]
[-78.11450195 -128.50354004]
[-87.97843933 -139.80410767]
[-97.84236908 -151.10467529]
[-113.68679810 -153.62136841]
[-121.47233582 -167.64866638]
[-115.22659302 -182.42602539]
[-99.74076080 -186.61752319]
[-86.89424896 -177.00779724]
[-86.54180145 -160.96861267]
[-76.67787170 -149.66804504]
[-66.81393433 -138.36747742]
[-56.95000076 -127.06690979]
[-47.08607101 -115.76634216]
[-37.22213745 -104.46577454]
[-27.35820389 -93.16520691]
[-17.49427032 -81.86463928]
[-7.63033724 -70.56407166]
[2.23359561 -59.26350784]
[16.14907455 -64.70820618]
[31.11578560 -65.06411743]
[45.32780075 -60.26900101]
[57.06364441 -50.88330078]
[64.89482880 -38.02473831]
[67.85968781 -23.23521996]
[65.58146667 -8.29595280]
[58.31604385 4.98708105]
[68.17997742 16.28764915]
[78.04390717 27.58821678]
[87.90784454 38.88878250]
[97.77177429 50.18935013]
[112.73316956 49.11384201]
[120.87933350 36.51860428]
[121.37670898 18.11649704]
[137.28819275 10.72603989]
[145.23248291 -1.99749792]
[153.17675781 -14.72103596]
[148.24864197 -24.20617867]
[147.71264648 -34.80078888]
[151.59869385 -44.58462906]
[159.14125061 -51.81232071]
[168.92918396 -55.22465515]
[179.16943359 -54.26765442]
[187.71310425 -66.59671021]
[182.46289062 -81.19859314]
[186.83045959 -96.08831787]
[199.13638306 -105.54048920]
[214.64880371 -105.92054749]
[227.40287781 -97.08236694]
[232.49438477 -82.42439270]
[227.96554565 -67.58292389]
[215.55778503 -58.26480103]
[200.04216003 -58.05303955]
[191.49848938 -45.72397995]
[196.38221741 -26.87497330]
[185.67958069 -10.24508190]
[165.90029907 -6.77675486]
[157.95602417 5.94678259]
[150.01173401 18.67032051]
[152.43008423 30.53005981]
[145.90594482 41.19797897]
[133.47457886 44.66477203]
[125.32840729 57.26000595]
[129.19859314 63.68430710]
[142.04731750 55.94413376]
[149.78729248 68.79297638]
[136.93896484 76.53291321]
[140.80915833 82.95721436]
[155.75149536 81.64325714]
[170.69383240 80.32929993]
[185.63616943 79.01535034]
[200.57852173 77.70139313]
[215.52085876 76.38743591]
[230.46319580 75.07347870]
[245.71179199 67.66292572]
[257.05398560 80.26416016]
[248.08503723 94.65145874]
[231.77714539 90.01582336]
[216.83480835 91.32977295]
[201.89247131 92.64373016]
[186.95013428 93.95768738]
[172.00779724 95.27164459]
[157.06544495 96.58559418]
[142.12310791 97.89955139]
[133.13121033 115.53318024]
[118.62106323 124.79428864]
[103.94820404 125.11595917]
[101.80271912 139.96173096]
[99.65723419 154.80749512]
[97.63018799 169.66990662]
[95.72171783 184.54800415]
[93.81324005 199.42610168]
[91.90476990 214.30419922]
[89.99629211 229.18228149]
[88.08782196 244.06037903]
[86.17935181 258.93847656]
[92.09794617 273.61093140]
[82.80422211 285.25033569]
[80.89574432 300.12841797]
[78.98727417 315.00653076]
[77.07879639 329.88461304]
[75.17032623 344.76272583]
[73.38053894 359.65554810]
[71.70956421 374.56219482]
[70.03858948 389.46884155]
[68.36760712 404.37545776]
[66.69663239 419.28210449]
[65.02565765 434.18875122]
[76.31305695 444.67208862]
[79.22911835 459.61700439]
[72.86125183 473.25204468]
[59.84141541 480.43685913]
[58.17043686 495.34350586]
[56.49946213 510.25015259]
[54.82848358 525.15679932]
[63.89619064 513.20788574]
[76.42516327 504.96014404]
[90.98546600 501.35494995]
[105.91534424 502.80371094]
[119.51083374 509.14108276]
[130.22030640 519.64379883]
[136.82147217 533.11322021]
[138.56094360 548.01202393]
[135.24020386 562.63983154]
[127.23825073 575.32714844]
[115.46833801 584.62603760]
[101.27375793 589.47515869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[20 184]
[21 183]
[22 182]
[23 181]
[27 177]
[28 176]
[29 175]
[30 174]
[31 173]
[32 172]
[34 171]
[35 170]
[36 169]
[37 168]
[38 167]
[40 165]
[41 164]
[42 163]
[43 162]
[44 161]
[45 160]
[46 159]
[48 158]
[49 157]
[50 156]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[101 132]
[102 131]
[104 128]
[105 127]
[106 126]
[112 123]
[113 122]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
[142 148]
[143 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
