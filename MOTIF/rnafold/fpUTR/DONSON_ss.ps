%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGGGCCCGGCGCGCGCGGGAAGUCUCUGUAGGGCGGCCGGCUACCCUCAGCCGCCGCGCGUC\
) } def
/len { sequence length } bind def

/coor [
[19.18262291 253.10722351]
[14.32979298 254.65641785]
[5.29027367 266.62667847]
[-3.74924612 278.59695435]
[-2.96579862 294.62084961]
[-15.10007191 305.11557007]
[-30.84368896 302.03042603]
[-38.11949539 287.73211670]
[-31.34611511 273.18902588]
[-15.71950436 269.55743408]
[-6.67998505 257.58715820]
[2.35953450 245.61689758]
[10.83658123 233.24194336]
[18.73306274 220.48869324]
[26.62954521 207.73542786]
[34.52602768 194.98217773]
[42.42251205 182.22891235]
[50.31899261 169.47566223]
[58.21547699 156.72239685]
[66.11196136 143.96914673]
[73.71176147 131.03689575]
[81.01082611 117.93256378]
[88.30989838 104.82822418]
[73.40593719 106.52296448]
[60.69176483 98.56370544]
[55.70479965 84.41696930]
[60.61702728 70.24411011]
[73.28901672 62.21785736]
[88.20170593 63.83390808]
[98.86014557 74.38842010]
[100.62239075 89.28388977]
[111.70752716 79.17845154]
[122.79265594 69.07302094]
[127.22229004 60.68427277]
[134.63098145 58.77144623]
[146.17098999 49.18874359]
[157.71099854 39.60604477]
[169.25100708 30.02334023]
[174.92500305 15.25457668]
[189.65946960 13.07636833]
[201.19947815 3.49366593]
[206.37675476 -12.06679153]
[222.49336243 -15.09786320]
[232.96989441 -2.48144245]
[227.02902222 12.80377960]
[210.78218079 15.03367519]
[199.24217224 24.61637688]
[194.39360046 38.69972229]
[178.83370972 41.56335068]
[167.29370117 51.14605331]
[155.75369263 60.72875595]
[144.21368408 70.31145477]
[132.89808655 80.15814972]
[121.81295776 90.26358795]
[110.72782898 100.36901855]
[101.41423035 112.12728882]
[94.11516571 125.23162842]
[86.81609344 138.33596802]
[85.28196716 147.69754028]
[78.86521149 151.86563110]
[70.96873474 164.61888123]
[63.07225037 177.37214661]
[55.17576599 190.12539673]
[47.27928543 202.87864685]
[39.38280106 215.63191223]
[31.48632050 228.38516235]
[23.58983803 241.13842773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 58]
[22 57]
[23 56]
[31 55]
[32 54]
[33 53]
[35 52]
[36 51]
[37 50]
[38 49]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
