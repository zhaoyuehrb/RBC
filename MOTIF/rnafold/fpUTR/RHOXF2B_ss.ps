%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGAUACACUGUUGCUGAGUCUAGACACCAGAAGAACGUUGCAGGCGGCGACUCACAGUUCUAGCACUGCCUAGGAGAGCGUGGUGGCCCCAGCUCAGAAUCUGCAGAAGUGCACAGCUCCAUCCACACCACUCAGGGU\
) } def
/len { sequence length } bind def

/coor [
[157.77642822 293.28509521]
[159.26379395 286.71157837]
[155.64927673 272.15356445]
[152.03475952 257.59558105]
[148.42024231 243.03758240]
[144.80572510 228.47958374]
[141.19120789 213.92158508]
[125.81536102 208.27612305]
[116.71932983 194.45564270]
[117.63354492 177.76979065]
[128.39633179 164.77050781]
[124.46065521 150.29603577]
[120.52497101 135.82156372]
[116.58928680 121.34709167]
[104.72030640 124.95980835]
[93.27567291 122.79825592]
[84.74115753 116.03688812]
[71.33115387 122.75788879]
[57.92115402 129.47889709]
[51.58966827 136.17488098]
[44.13932419 136.19654846]
[30.58392334 142.61924744]
[25.50661659 157.58575439]
[11.29672718 164.50346375]
[-3.61526871 159.26820374]
[-10.38234901 144.98597717]
[-4.98972464 130.13015747]
[9.36325550 123.51445770]
[24.16122246 129.06384277]
[37.71662521 122.64114380]
[51.20015335 116.06889343]
[64.61015320 109.34789276]
[78.02015686 102.62689209]
[77.93006897 98.28762054]
[78.68840027 94.01418304]
[66.47560120 85.30513763]
[54.26279831 76.59609222]
[42.04999542 67.88705444]
[29.83719063 59.17800903]
[17.16161346 51.15742493]
[4.06203032 43.84983444]
[-9.03755283 36.54224014]
[-22.13713646 29.23464775]
[-35.23672104 21.92705536]
[-51.00067520 24.90653801]
[-63.06429291 14.33068657]
[-62.17340088 -1.68761134]
[-49.01141739 -10.86048794]
[-33.67508316 -6.15129805]
[-27.92912865 8.82747173]
[-14.82954407 16.13506508]
[-1.72996068 23.44265747]
[11.36962318 30.75024986]
[24.46920586 38.05784225]
[23.40146637 23.09589386]
[34.27865982 12.76696873]
[49.16544724 14.60642624]
[57.20133209 27.27230835]
[52.52381897 41.52435684]
[38.54623413 46.96520615]
[50.75903702 55.67424774]
[62.97183990 64.38329315]
[75.18464661 73.09233856]
[87.39744568 81.80137634]
[107.87728119 76.71036530]
[125.72320557 91.68018341]
[137.11851501 81.92584991]
[148.51380920 72.17151642]
[159.90911865 62.41718292]
[171.30442810 52.66285324]
[167.48188782 37.92685318]
[170.42448425 23.05311584]
[179.49603271 10.98135662]
[192.85440063 4.07376146]
[207.82545471 3.65283728]
[221.43823242 9.74853134]
[232.83354187 -0.00580084]
[244.22885132 -9.76013279]
[255.18153381 -20.00897026]
[265.67016602 -30.73225021]
[276.15878296 -41.45553207]
[286.64739990 -52.17881012]
[290.45187378 -60.57226181]
[297.48867798 -63.02006531]
[308.21194458 -73.50868988]
[318.93524170 -83.99731445]
[320.54977417 -99.95892334]
[334.11318970 -108.52705383]
[349.22082520 -103.12898254]
[354.28335571 -87.90563965]
[345.41726685 -74.53507233]
[329.42385864 -73.27404022]
[318.70056152 -62.78541183]
[307.97729492 -52.29678726]
[297.37069702 -41.69018555]
[286.88208008 -30.96690559]
[276.39343262 -20.24362564]
[265.90481567 -9.52034473]
[265.84457397 -6.64230156]
[264.59475708 -3.61697602]
[262.09405518 -0.91511828]
[258.45910645 0.97965246]
[253.98318481 1.63517332]
[242.58787537 11.38950539]
[231.19256592 21.14383698]
[235.11555481 35.53396225]
[232.39039612 50.26091003]
[223.50495911 62.39392090]
[210.17840576 69.49483490]
[195.02877808 70.10795593]
[181.05876160 64.05815887]
[169.66345215 73.81249237]
[158.26814270 83.56681824]
[146.87284851 93.32115173]
[135.47753906 103.07548523]
[131.06376648 117.41140747]
[134.99945068 131.88587952]
[138.93513489 146.36035156]
[142.87081909 160.83482361]
[156.12597656 164.77491760]
[165.61325073 174.68585205]
[168.91812134 187.88990784]
[165.27677917 200.89250183]
[155.74920654 210.30706787]
[159.36372375 224.86506653]
[162.97824097 239.42306519]
[166.59275818 253.98106384]
[170.20727539 268.53906250]
[173.82179260 283.09704590]
[177.75747681 297.57153320]
[182.01239014 311.95541382]
[186.26731873 326.33926392]
[200.27154541 333.66436768]
[204.91459656 348.77124023]
[197.44183350 362.69723511]
[182.28671265 367.18032837]
[168.44050598 359.56072998]
[164.11791992 344.35906982]
[171.88345337 330.59420776]
[167.62852478 316.21032715]
[163.37361145 301.82644653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[7 124]
[11 119]
[12 118]
[13 117]
[14 116]
[17 33]
[18 32]
[19 31]
[21 30]
[22 29]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[66 115]
[67 114]
[68 113]
[69 112]
[70 111]
[76 105]
[77 104]
[78 103]
[79 98]
[80 97]
[81 96]
[82 95]
[84 94]
[85 93]
[86 92]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
