%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAACCUUACACGGAGGGAAGCGGGAUCAGCACCCAACGCUGAACAUUUGUUUUAACCGCUGCAGACAUCUGGAUCCCUCAGUUACUGAUAGUAUAGCUAUUGAUAGCCAGAAGGCAACUUCCUUUAUACAAGGAUUCCAGU\
) } def
/len { sequence length } bind def

/coor [
[62.41329956 114.17721558]
[59.86535645 128.95922852]
[51.69897461 141.54136658]
[39.23551941 149.88775635]
[24.49165535 152.64791870]
[9.85302544 149.37522888]
[-2.31175447 140.59922791]
[-10.03435135 127.73993683]
[-12.06520271 112.87805176]
[-8.07570457 98.41831970]
[1.28861737 86.70040131]
[14.51256180 79.62033844]
[29.45899200 78.32402039]
[16.69066238 70.45193481]
[0.88307309 69.79568481]
[-5.89007998 56.53017807]
[-18.65840912 48.65808868]
[-31.42673874 40.78600311]
[-44.19506836 32.91391373]
[-56.96339798 25.04182816]
[-69.73172760 17.16974068]
[-83.47861481 11.16781425]
[-97.93186188 7.15488958]
[-112.38511658 3.14196420]
[-126.83836365 -0.87096077]
[-141.29161072 -4.88388586]
[-148.56454468 -2.24986672]
[-155.40657043 -3.57711363]
[-160.00781250 -7.74440908]
[-174.99989319 -8.23181152]
[-189.99197388 -8.71921444]
[-204.98405457 -9.20661736]
[-219.97613525 -9.69402027]
[-230.27626038 2.07208800]
[-245.73756409 4.41355228]
[-259.05966187 -3.77519464]
[-263.95230103 -18.62767792]
[-258.10528564 -33.13100815]
[-244.27943420 -40.43715668]
[-229.00286865 -37.09638214]
[-219.48873901 -24.68610001]
[-204.49665833 -24.19869614]
[-189.50457764 -23.71129417]
[-174.51249695 -23.22389030]
[-159.52041626 -22.73648834]
[-171.36447144 -31.94073868]
[-178.62355042 -45.06726837]
[-180.12309265 -59.99212646]
[-175.62045288 -74.30038452]
[-165.84419250 -85.67687988]
[-152.37615967 -92.28083038]
[-137.39556885 -93.04367828]
[-123.32637024 -87.84198761]
[-112.44503784 -77.51742554]
[-106.51222992 -63.74057007]
[-106.48792267 -48.74058914]
[-112.37604523 -34.94457245]
[-123.22385406 -24.58479691]
[-137.27868652 -19.33713531]
[-122.82543945 -15.32421112]
[-108.37219238 -11.31128597]
[-93.91893768 -7.29836035]
[-79.46569061 -3.28543544]
[-80.79278564 -15.74060822]
[-73.80874634 -24.87214661]
[-75.75321198 -39.74557877]
[-77.69767761 -54.61901474]
[-88.09323883 -67.30224609]
[-82.05462646 -82.54912567]
[-65.79384613 -84.67496490]
[-56.03860092 -71.49288177]
[-62.82424545 -56.56348038]
[-60.87977600 -41.69004822]
[-58.93531036 -26.81661224]
[-49.63556671 -17.95098495]
[-50.39044952 -4.33801270]
[-61.85964203 4.40141106]
[-49.09131241 12.27349854]
[-36.32298279 20.14558601]
[-23.55465126 28.01767349]
[-10.78632259 35.88975906]
[1.98200727 43.76184845]
[16.87632179 43.85503387]
[24.56274986 57.68360519]
[37.33108139 65.55569458]
[46.82969284 65.52597809]
[54.30569077 73.18684387]
[68.66860962 77.51194763]
[83.03153229 81.83705139]
[97.39444733 86.16215515]
[112.30651855 84.54037476]
[125.40386963 77.22878265]
[138.50122070 69.91719055]
[151.59857178 62.60560226]
[164.69593811 55.29401016]
[175.57875061 42.29399490]
[191.08338928 49.15274811]
[188.78479004 65.95014954]
[172.00752258 68.39136505]
[158.91017151 75.70295715]
[145.81282043 83.01454163]
[132.71546936 90.32613373]
[119.61811066 97.63772583]
[120.75122833 105.05163574]
[134.15309143 98.31443787]
[144.70182800 108.97859192]
[137.81918335 122.30635071]
[123.01746368 119.87944794]
[124.15058136 127.29335785]
[138.83395386 130.35903931]
[153.51733398 133.42471313]
[168.91790771 127.78959656]
[181.32305908 138.51547241]
[177.97143555 154.56846619]
[162.31089783 159.43463135]
[150.45166016 148.10809326]
[135.76828003 145.04241943]
[121.08490753 141.97674561]
[117.07993317 148.31788635]
[129.76210022 156.32804871]
[121.75173950 169.01008606]
[109.06999207 161.00019836]
[105.06501770 167.34133911]
[114.14263153 179.28274536]
[123.22024536 191.22413635]
[132.29786682 203.16552734]
[141.37547302 215.10693359]
[157.01358032 218.68873596]
[163.83325195 233.21014404]
[156.60304260 247.53158569]
[140.86933899 250.66687012]
[128.70169067 240.21087646]
[129.43408203 224.18453979]
[120.35646057 212.24314880]
[111.27884674 200.30175781]
[102.20124054 188.36035156]
[93.12362671 176.41896057]
[74.68984222 153.60894775]
[70.20709229 129.37506104]
[77.79530334 110.10240173]
[93.06934357 100.52507782]
[78.70642853 96.19997406]
[64.34350586 91.87486267]
[49.98058701 87.54975891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 85]
[14 84]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[65 74]
[66 73]
[67 72]
[87 144]
[88 143]
[89 142]
[90 141]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[109 118]
[110 117]
[111 116]
[123 137]
[124 136]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
