%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:47:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGCGGGCUGAGAAGGCGGUGGCUGCAGCAGCAGCGGCGGCGGAAACCCUAAAGUCCGAGUCCGGACUACGAGUGCGUGGCCUCCUAAUCCGGAUCCUAGUCCUGAGCGUGUCUGUGUGCGAGUGGAUCCCCUAGACGGUCCCGGACGCG\
) } def
/len { sequence length } bind def

/coor [
[225.53451538 264.56988525]
[224.50695801 259.32592773]
[214.63125610 248.03562927]
[207.81819153 245.05328369]
[204.67158508 236.41067505]
[195.02976990 224.91999817]
[185.38795471 213.42933655]
[171.27990723 208.65312195]
[168.33644104 193.10813904]
[158.69462585 181.61746216]
[149.05282593 170.12680054]
[134.94476318 165.35058594]
[132.00131226 149.80560303]
[122.35948944 138.31494141]
[103.92980957 145.38558960]
[83.72824860 143.82565308]
[65.69559479 133.49145508]
[53.53979492 115.99311066]
[39.29310226 120.68691254]
[28.60713768 132.35398865]
[14.09787941 128.98788452]
[-0.14881267 133.68168640]
[-10.83477688 145.34875488]
[-25.34403419 141.98265076]
[-39.59072495 146.67645264]
[-53.83741760 151.37025452]
[-68.08411407 156.06405640]
[-82.33080292 160.75785828]
[-92.84429932 173.34349060]
[-108.95193481 170.26516724]
[-114.08355713 154.68960571]
[-102.96018982 142.63958740]
[-87.02460480 146.51115417]
[-72.77790833 141.81735229]
[-58.53121948 137.12356567]
[-44.28452682 132.42976379]
[-30.03783607 127.73595428]
[-20.37088966 116.40460968]
[-4.84261322 119.43498993]
[9.40407848 114.74118805]
[19.07102394 103.40984344]
[34.59930038 106.44021606]
[48.84599304 101.74641418]
[50.53639221 86.84197235]
[37.70273590 79.07683563]
[24.86908340 71.31169891]
[11.45188999 78.78662109]
[-3.90494871 78.53545380]
[-17.07052040 70.62576294]
[-24.50335312 57.18520355]
[-24.20405006 41.82922745]
[-16.25312424 28.68851471]
[-2.78933549 21.29784775]
[12.56562710 21.64528275]
[25.68135452 29.63735771]
[33.02978134 43.12424850]
[32.63421631 58.47804642]
[45.46787262 66.24317932]
[58.30152512 74.00831604]
[69.69355011 63.36665344]
[83.42884064 57.13863754]
[97.92993164 55.68638992]
[99.77325439 40.80008316]
[101.61658478 25.91377640]
[103.45990753 11.02746773]
[105.30323029 -3.85883951]
[107.14655304 -18.74514771]
[108.98988342 -33.63145447]
[103.00710297 -48.27785110]
[112.24979401 -59.95783615]
[114.09311676 -74.84413910]
[108.11034393 -89.49053955]
[117.35302734 -101.17052460]
[119.19635010 -116.05683136]
[121.03968048 -130.94313049]
[118.98074341 -139.90731812]
[123.07672119 -146.11499023]
[125.22529602 -160.96031189]
[121.51008606 -177.50218201]
[136.37701416 -185.65145874]
[148.32339478 -173.62145996]
[140.07061768 -158.81173706]
[137.92204285 -143.96641541]
[135.92597961 -129.09980774]
[134.08265686 -114.21350861]
[132.23933411 -99.32719421]
[138.35395813 -85.74556732]
[128.97943115 -73.00081635]
[127.13610077 -58.11450958]
[133.25071716 -44.53288269]
[123.87619019 -31.78812981]
[122.03285980 -16.90182304]
[120.18953705 -2.01551509]
[118.34621429 12.87079239]
[116.50289154 27.75710106]
[114.65956879 42.64340973]
[112.81623840 57.52971649]
[122.83249664 61.96504211]
[131.45654297 68.71954346]
[138.16253662 77.38137054]
[142.54156494 87.42236328]
[144.32661438 98.23028564]
[143.40887451 109.14611053]
[139.84426880 119.50424957]
[133.85015869 128.67312622]
[143.49197388 140.16378784]
[158.28967285 145.76188660]
[160.54348755 160.48498535]
[170.18530273 171.97566223]
[179.82711792 183.46632385]
[194.62481689 189.06442261]
[196.87863159 203.78752136]
[206.52044678 215.27818298]
[216.16226196 226.76885986]
[225.92152405 238.15992737]
[235.79724121 249.45021057]
[246.01594543 260.43099976]
[256.56796265 271.09191895]
[267.11996460 281.75283813]
[277.67199707 292.41372681]
[292.87905884 296.77896118]
[296.33319092 311.26751709]
[306.88519287 321.92843628]
[312.04187012 323.32989502]
[315.74136353 326.29962158]
[317.62710571 330.00280762]
[317.73327637 333.58554077]
[327.60897827 344.87582397]
[337.48468018 356.16610718]
[347.36041260 367.45639038]
[357.23611450 378.74664307]
[372.67715454 377.21258545]
[386.05392456 385.07656860]
[392.22271729 399.31472778]
[388.81155396 414.45220947]
[377.13208008 424.66836548]
[361.67529297 426.03482056]
[348.38464355 418.02621460]
[342.37063599 403.72195435]
[345.94583130 388.62237549]
[336.07012939 377.33209229]
[326.19442749 366.04180908]
[316.31869507 354.75152588]
[306.44299316 343.46124268]
[296.22430420 332.48043823]
[285.67227173 321.81951904]
[271.21994019 318.21685791]
[267.01107788 302.96575928]
[256.45907593 292.30484009]
[245.90704346 281.64395142]
[235.35504150 270.98303223]
[231.78918457 270.61987305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[5 114]
[6 113]
[7 112]
[9 110]
[10 109]
[11 108]
[13 106]
[14 105]
[18 43]
[19 42]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[44 59]
[45 58]
[46 57]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[70 89]
[71 88]
[73 86]
[74 85]
[75 84]
[77 83]
[78 82]
[117 151]
[118 150]
[119 149]
[120 148]
[122 146]
[123 145]
[127 144]
[128 143]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
