%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAACUAGCUUCCCCUUAGUACAUUGAAAUUCAAAGUCAUGCUUGUAACUGUUAAUGAAAGCAGAUUUAAAGCAACACCACCAUCACUGGAGUAUUUUUAGUUAUAUACGAUUGAGACUACCAAGC\
) } def
/len { sequence length } bind def

/coor [
[90.57757568 217.71929932]
[87.28509521 232.72113037]
[76.92095947 244.05604553]
[62.27306366 248.67498779]
[47.28162003 245.33551025]
[35.97925186 234.93589783]
[31.40623856 220.27359009]
[34.79269791 205.29267883]
[45.22769165 194.02296448]
[59.90425873 189.49594116]
[63.16571045 174.85479736]
[66.42716217 160.21366882]
[69.68861389 145.57252502]
[64.82122803 139.86651611]
[54.93969727 151.15170288]
[50.65839386 165.52774048]
[36.98033142 171.68489075]
[23.37978554 165.35835266]
[19.27733612 150.93025208]
[27.51459312 138.39440918]
[42.38467407 136.43351746]
[55.08645248 128.45449829]
[50.21906662 122.74848938]
[35.24686050 123.66117859]
[21.94304085 132.22383118]
[8.76856613 125.27526855]
[-6.20364141 126.18795776]
[-21.17584801 127.10064697]
[-36.14805603 128.01333618]
[-51.58994675 135.01222229]
[-62.59005356 122.11128998]
[-53.23842621 107.96973419]
[-37.06074524 113.04112244]
[-22.08853912 112.12843323]
[-7.11633110 111.21574402]
[7.85587645 110.30305481]
[20.08878326 101.80568695]
[34.33417130 108.68897247]
[49.30637741 107.77628326]
[53.10471725 86.75731659]
[64.76493073 70.16162872]
[81.39494324 60.55290985]
[77.42452240 46.08792496]
[73.45409393 31.62294388]
[69.48366547 17.15796280]
[65.51323700 2.69297981]
[52.06038666 -5.15931511]
[48.23986816 -19.88542366]
[55.80873871 -32.66226959]
[51.83831024 -47.12725449]
[47.69204712 -61.54281616]
[43.37055969 -75.90682983]
[39.04907227 -90.27083588]
[34.72758865 -104.63484192]
[30.40610123 -118.99885559]
[16.36810684 -126.25904083]
[11.65515232 -141.34425354]
[19.06334877 -155.30470276]
[34.19754410 -159.85789490]
[48.07889175 -152.30252075]
[52.47183228 -137.12103271]
[44.77011108 -123.32034302]
[49.09159470 -108.95632935]
[53.41308212 -94.59232330]
[57.73456955 -80.22831726]
[62.05605698 -65.86430359]
[67.04727936 -60.30810547]
[66.30329132 -51.09767914]
[70.27371979 -36.63269806]
[83.30467224 -29.51020050]
[87.53730774 -14.89721203]
[79.97821808 -1.27744687]
[83.94864655 13.18753529]
[87.91907501 27.65251732]
[91.88950348 42.11750031]
[95.85992432 56.58248138]
[102.34802246 56.44879150]
[108.78412628 57.27927780]
[115.02576447 59.05555725]
[120.93474579 61.73830414]
[126.38025665 65.26812744]
[131.24172974 69.56687164]
[135.41154480 74.53938293]
[148.91474915 68.00762939]
[162.41793823 61.47587204]
[171.17970276 47.61357117]
[187.55262756 48.54061127]
[194.69364929 63.30333328]
[185.25668335 76.71511078]
[168.94969177 74.97906494]
[155.44650269 81.51081848]
[141.94331360 88.04257202]
[143.53364563 102.65376282]
[140.18031311 116.96359253]
[152.79013062 125.08716583]
[165.39994812 133.21073914]
[181.19143677 134.18013000]
[187.70036316 147.57725525]
[200.31018066 155.70083618]
[212.91999817 163.82441711]
[225.52981567 171.94798279]
[238.13963318 180.07156372]
[250.74945068 188.19514465]
[263.35928345 196.31871033]
[275.96908569 204.44229126]
[291.36096191 200.85540771]
[304.73666382 209.27360535]
[308.16061401 224.70254517]
[299.60147095 237.98849487]
[284.13717651 241.24913025]
[270.94247437 232.54998779]
[267.84552002 217.05210876]
[255.23570251 208.92852783]
[242.62588501 200.80496216]
[230.01606750 192.68138123]
[217.40625000 184.55780029]
[204.79643250 176.43423462]
[192.18661499 168.31065369]
[179.57678223 160.18707275]
[164.68724060 159.79873657]
[157.27636719 145.82055664]
[144.66654968 137.69699097]
[132.05673218 129.57341003]
[112.08764648 145.88508606]
[84.32975769 148.83398438]
[81.06829834 163.47511292]
[77.80684662 178.11625671]
[74.54539490 192.75738525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 128]
[11 127]
[12 126]
[13 125]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[29 33]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[49 69]
[50 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[83 92]
[84 91]
[85 90]
[94 123]
[95 122]
[96 121]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
