%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUGCCUUUCCCCAUUGGGUCUCUGUAAGAGUCACACGCUUUGGGCAUCCUUGAAAAGAAUCUUCUGAGGCCUCAGCAUUUUAUCUGAGUCUUCUGAAUCCCACUUAGAACUGUGUUGAGCUCUCACCCAUCACG\
) } def
/len { sequence length } bind def

/coor [
[68.77037811 179.39274597]
[54.22078323 171.99139404]
[41.34719467 161.95439148]
[30.62092590 149.64920044]
[22.43467140 135.52630615]
[8.30075836 140.54949951]
[-5.83315611 145.57269287]
[-19.96706963 150.59588623]
[-34.10098267 155.61907959]
[-33.73363876 170.72943115]
[-38.04888535 185.19390869]
[-46.61206055 197.59956360]
[-58.57419586 206.73861694]
[-72.75614929 211.72607422]
[-87.76487732 212.08534241]
[-102.13021851 207.79383850]
[-114.44893646 199.28387451]
[-123.52176666 187.39923096]
[-137.65568542 192.42242432]
[-151.78959656 197.44561768]
[-162.20188904 209.35757446]
[-176.78536987 206.32911682]
[-190.91928101 211.35231018]
[-205.05319214 216.37551880]
[-213.21420288 230.18774414]
[-229.12072754 232.27621460]
[-240.57066345 221.03884888]
[-238.78059387 205.09597778]
[-225.12370300 196.67761230]
[-210.07638550 202.24159241]
[-195.94247437 197.21839905]
[-181.80856323 192.19520569]
[-172.40721130 180.64254761]
[-156.81278992 183.31170654]
[-142.67887878 178.28851318]
[-128.54496765 173.26531982]
[-129.00732422 158.32051086]
[-124.82208252 143.94505310]
[-116.38704681 131.55027771]
[-104.51787567 122.35714722]
[-90.36924744 117.27590942]
[-75.32254028 116.81602478]
[-60.85092545 121.03511810]
[-48.37517929 129.53207397]
[-39.12417603 141.48516846]
[-24.99026299 136.46197510]
[-10.85634995 131.43878174]
[3.27756381 126.41558075]
[17.41147804 121.39238739]
[15.05123520 107.88705444]
[14.88476562 94.17803955]
[16.91636848 80.61937714]
[21.09357834 67.56121063]
[27.30851936 55.34077072]
[35.40069199 44.27363586]
[45.16112137 34.64561462]
[56.33774567 26.70534897]
[68.64193726 20.65789223]
[81.75593567 16.65942001]
[95.34107971 14.81318855]
[109.04653931 15.16687870]
[122.51837921 17.71135521]
[135.40869141 22.38090897]
[147.38458252 29.05494881]
[158.13677979 37.56112289]
[167.38761902 47.67975616]
[174.89819336 59.14954376]
[180.47454834 71.67427826]
[195.00668335 67.95716095]
[209.53881836 64.24004364]
[224.07095337 60.52293015]
[238.60308838 56.80581284]
[250.05546570 45.89005661]
[264.30313110 50.23210526]
[278.83526611 46.51498795]
[293.36740112 42.79787064]
[307.89953613 39.08075714]
[322.43167114 35.36363983]
[336.96380615 31.64652252]
[351.49597168 27.92940521]
[366.02810669 24.21228790]
[370.16934204 11.01443768]
[380.22671509 1.67677939]
[393.48385620 -1.42545187]
[406.43209839 2.41834378]
[415.69906616 12.09487057]
[430.31207275 8.70951462]
[444.92504883 5.32415915]
[459.53802490 1.93880343]
[474.15103149 -1.44655228]
[488.76400757 -4.83190823]
[503.37698364 -8.21726322]
[506.67465210 -23.11988640]
[516.11853027 -35.11056900]
[529.83343506 -41.80855560]
[545.09637451 -41.88395309]
[558.87683105 -35.32179260]
[568.43865967 -23.42499542]
[571.88342285 -8.55567932]
[568.52709961 6.33384085]
[559.03613281 18.28724098]
[545.29486084 24.93116570]
[530.03179932 24.94645691]
[516.27728271 18.33008194]
[506.76235962 6.39572239]
[492.14935303 9.78107834]
[477.53637695 13.16643429]
[462.92340088 16.55179024]
[448.31039429 19.93714523]
[433.69741821 23.32250023]
[419.08444214 26.70785713]
[413.20065308 41.99064636]
[399.24392700 50.87011719]
[382.57733154 49.70079803]
[369.74520874 38.74442673]
[355.21307373 42.46154404]
[340.68093872 46.17866135]
[326.14880371 49.89577866]
[311.61666870 53.61289215]
[297.08453369 57.33000946]
[282.55236816 61.04712677]
[268.02023315 64.76424408]
[257.60729980 75.41413116]
[242.32020569 71.33795166]
[227.78807068 75.05506897]
[213.25593567 78.77218628]
[198.72380066 82.48930359]
[184.19166565 86.20642090]
[185.27764893 102.49418640]
[183.24156189 118.69064331]
[178.15795898 134.20281982]
[170.21292114 148.46281433]
[159.69735718 160.94854736]
[146.99621582 171.20291138]
[132.57452393 178.85047913]
[116.96025085 183.61129761]
[100.72505188 185.31103516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[18 36]
[19 35]
[20 34]
[22 32]
[23 31]
[24 30]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[74 122]
[75 121]
[76 120]
[77 119]
[78 118]
[79 117]
[80 116]
[81 115]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
