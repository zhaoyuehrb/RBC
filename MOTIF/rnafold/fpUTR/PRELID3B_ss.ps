%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCUGCGCACUGCGCCGCCGGCUGGGGUGCUGGGGGCGGGGCAGGGGCAGGUGUAGCCUCUGUGCCUCGUUGUCCCCUGGCGCUACCCGGACAUCUCUCAGGGUGCCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[117.73573303 216.84260559]
[112.85417175 231.02606201]
[102.13275146 241.51658630]
[87.84639740 246.08825684]
[73.02646637 243.77102661]
[60.81751251 235.05659485]
[53.81009674 221.79400635]
[53.49104691 206.79759216]
[43.84923172 218.28825378]
[34.20741653 229.77893066]
[24.56560326 241.26959229]
[19.01616859 257.28958130]
[2.08600950 256.39178467]
[-1.73802686 239.87474060]
[13.07493591 231.62777710]
[22.71675110 220.13711548]
[32.35856247 208.64643860]
[42.00037766 197.15577698]
[43.32931900 187.82754517]
[51.87966156 181.53294373]
[58.12753677 167.89607239]
[64.37541199 154.25921631]
[70.62328339 140.62234497]
[76.87115479 126.98548126]
[83.11903381 113.34861755]
[81.44313812 103.82214355]
[84.19036865 95.74656677]
[89.70729828 90.81177521]
[95.87811279 89.56172943]
[95.47539520 74.56713867]
[95.07267761 59.57254410]
[94.66995239 44.57795334]
[94.26723480 29.58335876]
[93.86451721 14.58876610]
[93.46179199 -0.40582687]
[93.05907440 -15.40042019]
[92.65635681 -30.39501190]
[92.25363159 -45.38960648]
[91.85091400 -60.38419724]
[90.64391327 -75.33555603]
[88.63611603 -90.20057678]
[86.62831879 -105.06558990]
[84.62052155 -119.93061066]
[82.61273193 -134.79562378]
[80.60493469 -149.66064453]
[78.59713745 -164.52566528]
[76.19096375 -179.33142090]
[73.38816071 -194.06723022]
[70.58535004 -208.80305481]
[67.78254700 -223.53886414]
[64.97973633 -238.27468872]
[51.24600601 -245.75254822]
[45.58019257 -260.32763672]
[50.65752029 -275.11798096]
[64.08063507 -283.14007568]
[79.51155090 -280.60610962]
[89.66425323 -268.71258545]
[89.74495697 -253.07519531]
[79.71555328 -241.07748413]
[82.51836395 -226.34167480]
[85.32116699 -211.60585022]
[88.12397766 -196.87004089]
[90.92678070 -182.13423157]
[94.40979004 -178.69393921]
[95.68428802 -172.98570251]
[93.46215057 -166.53346252]
[95.46994781 -151.66844177]
[97.47774506 -136.80342102]
[99.48554230 -121.93840790]
[101.49333954 -107.07338715]
[103.50113678 -92.20837402]
[105.50893402 -77.34335327]
[107.80035400 -75.51963806]
[109.45696259 -72.61915588]
[110.04153442 -68.89855194]
[109.22566986 -64.77626038]
[106.84550476 -60.78691864]
[107.24822998 -45.79232407]
[107.65094757 -30.79773331]
[108.05366516 -15.80313969]
[108.45639038 -0.80854678]
[108.85910797 14.18604660]
[109.26182556 29.18063927]
[109.66455078 44.17523193]
[110.06726837 59.16982651]
[110.46998596 74.16442108]
[110.87270355 89.15901184]
[118.54643250 102.04753113]
[131.53680420 109.54753113]
[144.52719116 117.04753113]
[157.51757812 124.54753113]
[173.33752441 124.74691772]
[180.49101257 137.81124878]
[193.48139954 145.31124878]
[208.68037415 140.97921753]
[222.45007324 148.73622131]
[226.62117004 163.98014832]
[218.71902466 177.66706848]
[203.43183899 181.67675781]
[189.82923889 173.63035583]
[185.98139954 158.30163574]
[172.99101257 150.80163574]
[158.10021973 151.13870239]
[150.01757812 137.53791809]
[137.02719116 130.03791809]
[124.03681183 122.53791046]
[111.04643250 115.03791046]
[96.75589752 119.59648895]
[90.50801849 133.23335266]
[84.26014709 146.87022400]
[78.01227570 160.50708008]
[71.76439667 174.14395142]
[65.51652527 187.78080750]
[79.20201111 181.64016724]
[94.18812561 182.28553772]
[107.29502869 189.57998657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 18]
[9 17]
[10 16]
[11 15]
[20 113]
[21 112]
[22 111]
[23 110]
[24 109]
[25 108]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[88 107]
[89 106]
[90 105]
[91 104]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
