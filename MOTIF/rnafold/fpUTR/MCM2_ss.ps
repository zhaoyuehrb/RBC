%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGUCGCGUUCCGUAGGGCUCUUCCCGGGCUUUGGUGGGUCACGUGAACCACUUUUCGCGCGAAACCUGGUUGUUGCUGUAGUGGCGGAGAGGAUCGUGGUACUGCU\
) } def
/len { sequence length } bind def

/coor [
[94.62239838 161.40341187]
[79.85443878 164.03158569]
[65.76696014 158.87959290]
[56.17887497 147.34405518]
[53.68935776 132.55209351]
[58.97328568 118.51356506]
[70.59826660 109.03412628]
[85.41237640 106.68342590]
[70.42588806 106.04681396]
[55.43940735 105.41019440]
[40.45292282 104.77357483]
[25.46643639 104.13695526]
[10.46793842 103.92469025]
[-4.53055954 104.13695526]
[-19.52905846 104.34922028]
[-35.03008270 114.16211700]
[-50.03717422 105.18700409]
[-65.02365875 105.82361603]
[-80.01014709 106.46023560]
[-94.99662781 107.09685516]
[-109.98311615 107.73347473]
[-124.96959686 108.37009430]
[-139.95608521 109.00670624]
[-154.94256592 109.64332581]
[-166.81031799 120.43850708]
[-182.62623596 117.74844360]
[-190.25769043 103.63673401]
[-183.85049438 88.92866516]
[-168.31968689 84.90701294]
[-155.57917786 94.65684509]
[-140.59269714 94.02022552]
[-125.60621643 93.38360596]
[-110.61972809 92.74698639]
[-95.63324738 92.11037445]
[-80.64675903 91.47375488]
[-65.66027832 90.83713531]
[-50.67379379 90.20051575]
[-42.18043137 81.45895386]
[-29.60234833 80.88911438]
[-19.74131966 89.35072327]
[-4.74282217 89.13845825]
[10.25567532 88.92619324]
[14.25601006 86.07872772]
[20.11923218 85.81591034]
[26.10305405 89.15047455]
[41.08953857 89.78708649]
[56.07602310 90.42370605]
[71.06250763 91.06032562]
[86.04899597 91.69694519]
[98.70935822 83.65237427]
[104.49860382 69.81457520]
[110.28784943 55.97677994]
[116.07708740 42.13898087]
[121.86633301 28.30118179]
[116.11271667 13.82590485]
[122.18095398 -0.12512058]
[136.01637268 -5.52110910]
[141.80561829 -19.35890770]
[147.59486389 -33.19670486]
[153.38410950 -47.03450394]
[150.76556396 -63.22323990]
[163.64538574 -73.37421417]
[178.77391052 -67.04496765]
[180.58822632 -50.74649429]
[167.22190857 -41.24526215]
[161.43266296 -27.40746307]
[155.64341736 -13.56966400]
[149.85417175 0.26813433]
[155.72538757 13.90867901]
[150.05139160 28.02464485]
[135.70413208 34.09042358]
[129.91488647 47.92822266]
[124.12564850 61.76602173]
[118.33640289 75.60382080]
[112.54715729 89.44161987]
[122.16505432 77.93092346]
[137.01876831 75.84117889]
[149.43930054 84.25131989]
[153.01390076 98.81916809]
[145.89698792 112.02331543]
[131.76304626 117.04643250]
[117.90797424 111.29365540]
[129.44400024 120.88116455]
[140.98001099 130.46867371]
[152.51603699 140.05616760]
[164.05206299 149.64367676]
[175.58807373 159.23118591]
[191.14677429 162.10128784]
[195.98948669 176.18664551]
[207.52551270 185.77415466]
[219.19604492 195.19744873]
[230.99876404 204.45465088]
[247.03433228 203.96478271]
[257.30508423 216.28919983]
[253.93215942 231.97367859]
[239.50299072 238.98643494]
[225.08639526 231.94786072]
[221.74154663 216.25737000]
[209.93882751 207.00016785]
[202.62684631 205.32400513]
[197.93800354 197.31016541]
[186.40197754 187.72267151]
[171.66841125 185.53833008]
[166.00057983 170.76719666]
[154.46455383 161.17970276]
[142.92852783 151.59219360]
[131.39251709 142.00468445]
[119.85649109 132.41717529]
[108.32047272 122.82968140]
[111.08708191 137.57232666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 42]
[14 41]
[15 40]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[57 68]
[58 67]
[59 66]
[60 65]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[89 102]
[90 101]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
