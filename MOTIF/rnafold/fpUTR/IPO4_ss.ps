%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUUGAAUCACCUUGGCAACCCGCGGGGCGUGCAGCAACGCCCUUUCCUCCGGAAGUGGGUGUCAGAACCUCCACGUGCUGUCCCUCCCCCUCCCCUUUUCGGCCCAGUAGCGGCGGCUCAGUUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[103.65893555 167.90892029]
[93.88054657 167.73153687]
[84.22870636 166.15342712]
[74.90303040 163.20721436]
[66.09637451 158.95382690]
[57.99087143 153.48124695]
[50.75414658 146.90261841]
[44.53586197 139.35401917]
[39.46461105 130.99156189]
[35.64527512 121.98816681]
[33.15684128 112.53003693]
[32.05076981 102.81278229]
[32.34993362 93.03736115]
[34.04814911 83.40592957]
[19.99390221 78.16396332]
[5.93965721 72.92200470]
[-8.11458874 67.68003845]
[-22.16883469 62.43807983]
[-36.22307968 57.19611740]
[-45.45696640 57.11817932]
[-50.54692841 51.65855789]
[-64.47245026 46.08361816]
[-78.39796448 40.50868225]
[-92.32348633 34.93374634]
[-106.24900055 29.35880852]
[-133.04130554 44.69906235]
[-147.93521118 42.91827774]
[-162.82913208 41.13748932]
[-177.72305298 39.35670471]
[-192.61697388 37.57592010]
[-207.51089478 35.79513168]
[-222.40481567 34.01434708]
[-234.67132568 43.97969055]
[-250.38281250 42.26943588]
[-260.21789551 29.89824677]
[-258.34164429 14.20572758]
[-245.86715698 4.50197315]
[-230.19534302 6.54404974]
[-220.62402344 19.12042809]
[-205.73010254 20.90121460]
[-190.83618164 22.68200111]
[-175.94227600 24.46278572]
[-161.04835510 26.24357224]
[-146.15443420 28.02435875]
[-131.26051331 29.80514336]
[-124.22895050 16.55534744]
[-134.05186462 5.21910429]
[-143.87477112 -6.11713934]
[-153.69767761 -17.45338249]
[-168.63963318 -25.46429062]
[-165.07812500 -42.03993607]
[-148.16435242 -43.20622253]
[-142.36143494 -27.27629471]
[-132.53852844 -15.94005013]
[-122.71561432 -4.60380697]
[-112.89270782 6.73243666]
[-100.67406464 15.43329048]
[-86.74855042 21.00822639]
[-72.82302856 26.58316422]
[-58.89751053 32.15810013]
[-44.97199249 37.73303604]
[-30.98111725 43.14186859]
[-16.92687225 48.38383484]
[-2.87262607 53.62579727]
[11.18161964 58.86775970]
[25.23586655 64.10971832]
[39.29011154 69.35168457]
[47.16575623 57.18000031]
[57.44235992 46.95419693]
[69.65292358 39.13896942]
[83.24256134 34.08946991]
[97.59370422 32.03516006]
[112.05420685 33.06939316]
[125.96691895 37.14517593]
[138.69961548 44.07728958]
[149.67367554 53.55071259]
[158.39039612 65.13494110]
[164.45365906 78.30355835]
[179.11085510 75.11508179]
[193.76806641 71.92659760]
[208.42526245 68.73812103]
[223.08247375 65.54963684]
[231.64537048 52.53754425]
[246.55526733 49.51277161]
[258.90756226 57.75637054]
[273.56475830 54.56789398]
[275.57830811 39.54386520]
[282.61169434 26.11601257]
[293.81561279 15.90581226]
[307.83709717 10.14619827]
[322.98306274 9.53267002]
[337.42446899 14.13931561]
[349.41751099 23.40985870]
[357.51391602 36.22483444]
[360.73608398 51.03677750]
[358.69482422 66.05706787]
[351.63671875 79.47193909]
[340.41400146 89.66146851]
[326.38189697 95.39523315]
[311.23486328 95.98085022]
[296.80197144 91.34760284]
[284.82601929 82.05496979]
[276.75323486 69.22509766]
[262.09603882 72.41357422]
[254.28451538 85.04353333]
[239.46545410 88.48590851]
[226.27095032 80.20684052]
[211.61375427 83.39532471]
[196.95654297 86.58380127]
[182.29934692 89.77227783]
[167.64213562 92.96076202]
[165.59945679 117.93656158]
[154.64999390 140.47702026]
[136.28038025 157.52168274]
[142.83454895 171.01400757]
[149.38871765 184.50633240]
[155.94288635 197.99865723]
[162.49705505 211.49098206]
[169.05122375 224.98332214]
[184.06637573 229.91490173]
[191.12188721 244.05686951]
[186.03182983 259.01904297]
[171.81605530 265.92465210]
[156.90852356 260.67669678]
[150.15361023 246.38870239]
[155.55889893 231.53749084]
[149.00473022 218.04515076]
[142.45056152 204.55282593]
[135.89639282 191.06050110]
[129.34222412 177.56817627]
[122.78805542 164.07585144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[46 56]
[47 55]
[48 54]
[49 53]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[85 104]
[86 103]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
