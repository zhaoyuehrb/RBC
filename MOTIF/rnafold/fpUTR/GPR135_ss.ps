%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGCCCAGCUCCCCGCGGCGGCCGCUAGCCCCCGGCCCCGAGCCACCACUCCGACCUAGCGGCCGCCGCCCCCGGUGCGGGAUGAGGAGAUCCGCGGCCGCCACUGGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.28035736 174.42712402]
[98.83648682 163.66026306]
[96.24694061 148.88546753]
[102.40682983 135.20826721]
[95.38070679 148.46095276]
[88.35457611 161.71363831]
[81.32845306 174.96630859]
[79.25128174 191.79254150]
[62.50761795 194.45449829]
[55.31457520 179.10209656]
[68.07576752 167.94018555]
[75.10189819 154.68750000]
[82.12802124 141.43482971]
[89.15415192 128.18214417]
[79.87834930 119.64234161]
[75.47755432 108.76482391]
[76.12616730 97.92242432]
[80.97273254 89.18441772]
[71.26194000 77.75198364]
[61.55114746 66.31955719]
[51.84035110 54.88712692]
[42.12955856 43.45469284]
[32.41876221 32.02226257]
[22.70796967 20.58983231]
[12.99717522 9.15740204]
[3.28638053 -2.27502894]
[-6.42441368 -13.70745945]
[-16.13520813 -25.13989067]
[-25.84600258 -36.57232285]
[-35.55679703 -48.00475311]
[-45.26758957 -59.43718338]
[-57.23732758 -58.07514954]
[-68.24188995 -62.67244339]
[-75.53626251 -71.95482635]
[-77.36331177 -83.49590302]
[-73.37592316 -94.35079956]
[-82.45353699 -106.29219818]
[-91.53115082 -118.23358917]
[-106.10805511 -114.00532532]
[-121.22770691 -115.33226776]
[-134.84527588 -122.03496552]
[-145.11912537 -133.20692444]
[-150.65977478 -147.33723450]
[-150.71791077 -162.51487732]
[-145.28567505 -176.68721008]
[-135.09771729 -187.93756104]
[-121.53189087 -194.74436951]
[-106.42285156 -196.18710327]
[-91.81398010 -192.07063293]
[-79.68100739 -182.95167542]
[-71.66481018 -170.06350708]
[-68.84951782 -155.14913940]
[-71.61587524 -140.22560120]
[-79.58975220 -127.31120300]
[-70.51214600 -115.36981201]
[-61.43452835 -103.42841339]
[-43.27103806 -102.15029144]
[-31.50466537 -87.84310913]
[-33.83515930 -69.14797974]
[-24.12436485 -57.71554565]
[-14.41357136 -46.28311539]
[-4.70277739 -34.85068512]
[5.00801706 -23.41825485]
[14.71881104 -11.98582268]
[24.42960548 -0.55339229]
[34.14039993 10.87903881]
[43.85119247 22.31147003]
[53.56198883 33.74390030]
[63.27278137 45.17633057]
[72.98357391 56.60876083]
[82.69437408 68.04119110]
[92.40516663 79.47362518]
[118.99080658 82.18085480]
[127.59696198 112.25861359]
[141.93624878 116.66145325]
[156.27552795 121.06429291]
[170.61480713 125.46712494]
[184.95408630 129.86996460]
[199.29336548 134.27281189]
[213.63265991 138.67564392]
[228.03024292 142.88391113]
[242.48348999 146.89683533]
[256.93673706 150.90975952]
[268.61422729 145.23091125]
[280.62963867 148.96569824]
[286.63235474 159.56365967]
[300.97164917 163.96650696]
[316.43502808 160.62068176]
[326.33059692 171.75291443]
[340.66989136 176.15574646]
[356.52337646 171.96061707]
[367.88970947 183.78170776]
[363.07617188 199.45851135]
[347.03454590 202.86405945]
[336.26705933 190.49502563]
[321.92776489 186.09219360]
[307.49002075 189.75292969]
[296.56878662 178.30578613]
[282.22952271 173.90295410]
[265.43426514 178.79032898]
[252.92381287 165.36300659]
[238.47056580 161.35008240]
[224.01731873 157.33715820]
[216.63241577 158.59651184]
[209.22981262 153.01492310]
[194.89053345 148.61209106]
[180.55125427 144.20924377]
[166.21195984 139.80641174]
[151.87268066 135.40356445]
[137.53340149 131.00073242]
[123.19412231 126.59789276]
[137.22077942 131.91322327]
[145.83721924 144.19154358]
[146.06582642 159.18978882]
[137.82759094 171.72500610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[7 11]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[36 56]
[37 55]
[38 54]
[74 111]
[75 110]
[76 109]
[77 108]
[78 107]
[79 106]
[80 105]
[81 103]
[82 102]
[83 101]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
