%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAGACGCUCGCCGUCCCCUGACCCCCAGCUCAGCGCCGGCUCCAAGCCCAGCCAGUGAUCCCUCUAGCCUUCUCCAGUCGCCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[98.40775299 231.61885071]
[108.58814240 219.53019714]
[107.07061768 204.60716248]
[105.55309296 189.68412781]
[104.03556824 174.76107788]
[95.05036926 162.88188171]
[101.35182953 148.36973572]
[99.83430481 133.44670105]
[98.31678009 118.52365875]
[86.61190796 109.14304352]
[71.71662903 110.91239929]
[56.82134247 112.68174744]
[50.69532013 126.69670868]
[38.45756531 135.70416260]
[23.45404243 137.36569214]
[9.72516918 131.33459473]
[0.91775823 119.32231140]
[-13.97752285 121.09165955]
[-28.87280464 122.86101532]
[-41.67745972 133.10664368]
[-56.85223770 126.88906860]
[-58.78662491 110.60440826]
[-45.49069214 101.00492096]
[-30.64215469 107.96572876]
[-15.74687386 106.19638062]
[-0.85159254 104.42703247]
[4.89665270 90.68572998]
[16.83060265 81.60626221]
[31.80585480 79.70673370]
[45.81320572 85.59663391]
[55.05199432 97.78646851]
[69.94727325 96.01711273]
[84.84255219 94.24776459]
[71.62321472 87.15910339]
[69.74594116 72.27703857]
[80.79080200 62.12760544]
[95.46148682 65.25344086]
[101.40988159 79.02365112]
[104.42935944 64.33070374]
[107.44883728 49.63775253]
[102.64787292 34.56256485]
[112.78877258 23.65332603]
[115.80825043 8.96037769]
[118.82772827 -5.73257160]
[121.84720612 -20.42551994]
[111.28751373 -31.79533005]
[109.46098328 -47.20452881]
[117.06994629 -60.72796631]
[131.18859863 -67.16560364]
[146.38803101 -64.04203796]
[156.82376099 -52.55834579]
[158.48303223 -37.13024139]
[150.72781372 -23.69014168]
[136.54016113 -17.40604210]
[133.52067566 -2.71309376]
[130.50120544 11.97985554]
[127.48172760 26.67280388]
[132.49865723 40.69705582]
[122.14179230 52.65723038]
[119.12231445 67.35018158]
[116.10283661 82.04312897]
[124.01390076 69.29891205]
[135.14698792 59.24633789]
[148.62994385 52.67292023]
[163.40652466 50.09361267]
[178.31912231 51.71047592]
[192.19950867 57.39685059]
[203.96029663 66.70726776]
[212.68016052 78.91235352]
[217.67597961 93.05596924]
[218.55638123 108.03010559]
[215.25239563 122.66171265]
[208.02287292 135.80453491]
[197.43415833 146.42900085]
[184.31576538 153.70275879]
[169.69537354 157.05601501]
[154.71835327 156.22607422]
[140.55798340 151.27793884]
[128.32359314 142.59925842]
[118.97360229 130.86990356]
[113.23981476 117.00613403]
[114.75733948 131.92918396]
[116.27486420 146.85221863]
[125.36861420 159.79881287]
[118.95860291 173.24356079]
[120.47612762 188.16659546]
[121.99365234 203.08963013]
[123.51117706 218.01268005]
[135.91659546 227.80456543]
[137.68164062 243.50999451]
[127.75913239 255.81118774]
[112.03592682 257.41009521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[7 83]
[8 82]
[9 81]
[10 33]
[11 32]
[12 31]
[17 26]
[18 25]
[19 24]
[38 61]
[39 60]
[40 59]
[42 57]
[43 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
