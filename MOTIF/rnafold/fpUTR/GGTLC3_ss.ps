%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAAUGCGGCAAGGGUCUGGAGGCUGAGGACCAGGCAGACAGACAUUCAGAGUUGCUGGAACGCGACAGAGACAGGGAGUCAGACUGGUCAUGCAAGGCCAGCUCUGGGGUCUCAGCAGGUGGUCCGCAAC\
) } def
/len { sequence length } bind def

/coor [
[-24.51261139 164.22793579]
[-37.64709091 164.17645264]
[-48.17827988 156.65830994]
[-62.48696518 161.15957642]
[-76.79565430 165.66084290]
[-91.10434723 170.16212463]
[-105.41303253 174.66339111]
[-119.72171783 179.16465759]
[-120.03265381 193.53691101]
[-124.77297211 207.08569336]
[-133.46383667 218.48271179]
[-145.23979187 226.61499023]
[-158.93493652 230.69358826]
[-173.19836426 230.33006287]
[-186.62742615 225.57353210]
[-197.90563965 216.90440369]
[-205.93174744 205.18595886]
[-220.34202576 209.35055542]
[-234.75230408 213.51515198]
[-249.16258240 217.67976379]
[-263.57284546 221.84436035]
[-277.98312378 226.00895691]
[-281.58978271 240.93838501]
[-292.18954468 252.05325317]
[-306.93118286 256.36370850]
[-321.84921265 252.71029663]
[-332.93081665 242.07574463]
[-337.19503784 227.32067871]
[-333.49490356 212.41415405]
[-322.82565308 201.36595154]
[-308.05728149 197.14797974]
[-293.16244507 200.89485168]
[-282.14773560 211.59867859]
[-267.73745728 207.43408203]
[-253.32717896 203.26948547]
[-238.91690063 199.10487366]
[-224.50662231 194.94027710]
[-210.09634399 190.77568054]
[-209.24046326 175.09748840]
[-203.07257080 160.62902832]
[-192.31712341 149.11634827]
[-178.25343323 141.95553589]
[-162.56340027 140.02346802]
[-147.13049316 143.57049561]
[-133.81355286 152.18811035]
[-124.22299194 164.85597229]
[-109.91429901 160.35469055]
[-95.60561371 155.85342407]
[-81.29692841 151.35215759]
[-66.98823547 146.85089111]
[-52.67954636 142.34962463]
[-45.59163666 127.14500427]
[-29.39619255 121.61958313]
[-13.89516068 129.63027954]
[0.30407405 124.79481506]
[14.50330925 119.95935059]
[28.70254517 115.12388611]
[42.90177917 110.28842163]
[48.26954651 105.10591888]
[57.49091721 105.51027679]
[71.79960632 101.00901031]
[86.10829163 96.50773621]
[95.70160675 86.33621216]
[109.39043427 89.18357086]
[123.69912720 84.68230438]
[138.00781250 80.18103027]
[141.40669250 64.04495239]
[152.39593506 51.87593079]
[167.92481995 46.91180801]
[183.75241089 50.40949631]
[195.60569763 61.32835388]
[209.80493164 56.49288940]
[224.00416565 51.65742493]
[238.20339966 46.82196045]
[252.40263367 41.98649597]
[254.16932678 34.43371582]
[258.45401001 28.05039215]
[264.66290283 23.63405800]
[271.96582031 21.71568108]
[279.40704346 22.49614906]
[286.03030396 25.82638741]
[291.00177002 31.23281670]
[305.66909790 28.09121132]
[320.33642578 24.94960785]
[335.00375366 21.80800438]
[349.67105103 18.66640091]
[364.30056763 15.35308075]
[378.89019775 11.86849976]
[393.47982788 8.38391972]
[408.06948853 4.89933968]
[422.65911865 1.41475916]
[437.24877930 -2.06982136]
[445.30770874 -15.66501617]
[460.63995361 -19.49875259]
[474.14916992 -11.29654408]
[477.82058716 4.07538509]
[469.47601318 17.49714279]
[454.06613159 21.00583649]
[440.73333740 12.51982212]
[426.14370728 16.00440216]
[411.55407715 19.48898315]
[396.96441650 22.97356415]
[382.37478638 26.45814323]
[367.78512573 29.94272423]
[361.95565796 34.59980774]
[352.81268311 33.33372116]
[338.14535522 36.47532654]
[323.47802734 39.61692810]
[308.81069946 42.75853348]
[294.14337158 45.90013885]
[279.42984009 62.84950256]
[257.23809814 56.18572998]
[243.03886414 61.02119446]
[228.83963013 65.85665894]
[214.64039612 70.69212341]
[200.44116211 75.52758789]
[198.66326904 89.11872101]
[191.15016174 100.66238403]
[179.32942200 107.85997009]
[165.49296570 109.24881744]
[152.35272217 104.49907684]
[142.50907898 94.48972321]
[128.20039368 98.99098969]
[113.89170837 103.49226379]
[104.29839325 113.66378784]
[90.60956573 110.81642914]
[76.30087280 115.31769562]
[61.99218750 119.81896973]
[47.73724365 124.48765564]
[33.53800964 129.32312012]
[19.33877373 134.15858459]
[5.13953924 138.99404907]
[-9.05969620 143.82951355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 46]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[54 133]
[55 132]
[56 131]
[57 130]
[58 129]
[60 128]
[61 127]
[62 126]
[64 124]
[65 123]
[66 122]
[71 116]
[72 115]
[73 114]
[74 113]
[75 112]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
