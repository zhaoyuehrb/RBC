%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAGAUCCGCCAUAUUGUCUACUGAAAGCUGCCGCUGAAGCUGCCGCCGUUGCCUCCGCCGCCAAGAGUGAGCGAGCGGACCCGCG\
) } def
/len { sequence length } bind def

/coor [
[151.34982300 146.57600403]
[145.34280396 152.44194031]
[138.67073059 157.53871155]
[131.43144226 161.79151917]
[123.73114777 165.13801575]
[115.68276978 167.52909851]
[107.40437317 168.92970276]
[99.01736450 169.31927490]
[90.64477539 168.69212341]
[82.40940094 167.05743408]
[74.43203735 164.43917847]
[66.82968903 160.87576294]
[59.71386337 156.41946411]
[53.18893433 151.13562012]
[47.35060120 145.10176086]
[42.28450394 138.40637207]
[38.06494141 131.14765930]
[34.75381088 123.43209076]
[32.39967346 115.37282562]
[31.03706169 107.08808899]
[30.68595886 98.69938660]
[31.35151482 90.32975769]
[33.02397156 82.10197449]
[35.67879105 74.13670349]
[39.27704239 66.55078125]
[43.76594162 59.45547104]
[49.07965088 52.95484924]
[55.14023209 47.14426041]
[61.85879517 42.10892868]
[69.13678741 37.92271042]
[63.95124054 23.84754944]
[51.92023087 13.57304955]
[54.78062439 -1.04431784]
[49.59507751 -15.11947727]
[37.56406403 -25.39397812]
[40.42445755 -40.01134491]
[35.23891068 -54.08650208]
[22.29587746 -64.15675354]
[24.81316566 -80.36154175]
[40.20120621 -86.03077698]
[52.63010406 -75.33243561]
[49.31407166 -59.27204895]
[54.49961853 -45.19689178]
[66.15972137 -35.92913818]
[63.67023468 -20.30502319]
[68.85578156 -6.22986364]
[80.51588440 3.03788662]
[78.02639771 18.66200256]
[83.21194458 32.73716354]
[110.34317780 31.44967842]
[135.88668823 40.68496704]
[155.92144775 59.02536774]
[167.37200928 83.65555573]
[168.48066711 110.79468536]
[182.95808411 114.71957397]
[201.98072815 108.51902771]
[215.31436157 122.33687592]
[230.03256226 125.23076630]
[244.75076294 128.12466431]
[259.46896362 131.01855469]
[274.18716431 133.91244507]
[288.95413208 136.54612732]
[303.76528931 138.91879272]
[318.57644653 141.29144287]
[333.42718506 143.40234375]
[348.31286621 145.25082397]
[363.19818115 138.36900330]
[376.44290161 148.03901672]
[374.42202759 164.31317139]
[359.21441650 170.45001221]
[346.46438599 160.13648987]
[331.57870483 158.28800964]
[324.39407349 160.64064026]
[316.20379639 156.10261536]
[301.39263916 153.72994995]
[286.58148193 151.35728455]
[279.31826782 153.45489502]
[271.29327393 148.63063049]
[256.57507324 145.73674011]
[241.85687256 142.84284973]
[227.13867188 139.94895935]
[212.42047119 137.05506897]
[204.24787903 143.63172913]
[193.57229614 144.52099609]
[184.03619385 139.16975403]
[179.03318787 129.19697571]
[164.55578613 125.27208710]
[161.02728271 132.89070129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 49]
[31 48]
[33 46]
[34 45]
[36 43]
[37 42]
[54 87]
[55 86]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 76]
[63 75]
[64 74]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
