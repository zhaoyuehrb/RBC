%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAAGGAAACUGUUGAGAAACCGAAACUACUGGGGAAAGGGAGGGCUCACUGAGAACCAUCCCAGUAACCCGACCGCCGCUGGUCUUCGCUGGACACC\
) } def
/len { sequence length } bind def

/coor [
[21.69649124 380.38717651]
[14.26330185 393.59790039]
[2.75803137 403.46728516]
[-11.43000412 408.80352783]
[-26.58753014 408.96224976]
[-40.88420486 403.92428589]
[-52.59362793 394.29800415]
[-60.30183792 381.24584961]
[-63.07802200 366.34387207]
[-60.58695221 351.39160156]
[-53.12942886 338.19458008]
[-41.60599136 328.34643555]
[-27.40814590 323.03634644]
[-12.25035191 322.90554810]
[-7.26503038 308.75823975]
[-2.27970839 294.61093140]
[2.70561361 280.46359253]
[-0.36188555 265.88830566]
[11.52213669 255.44412231]
[16.50745964 241.29681396]
[15.25605011 238.60258484]
[15.09377098 235.20954895]
[16.30890083 231.56877136]
[19.00590897 228.23266602]
[23.07411385 225.78247070]
[29.76018906 212.35502625]
[36.44626617 198.92758179]
[43.13233948 185.50012207]
[38.96917343 175.93667603]
[40.89049530 165.45930481]
[48.48570251 157.67768860]
[59.34756470 155.41207886]
[66.84756470 142.42170715]
[74.34756470 129.43132019]
[81.84756470 116.44094086]
[89.34756470 103.45055389]
[96.64663696 90.34622192]
[103.74303436 77.13103485]
[99.95125580 66.70340729]
[102.56896210 56.14934158]
[110.46556091 49.00017166]
[120.78819275 47.50526047]
[128.68467712 34.75200272]
[125.28277588 19.55118561]
[133.47261047 6.73005724]
[147.98522949 3.58054233]
[155.88171387 -9.17271423]
[163.77819824 -21.92597198]
[159.18954468 -34.69959641]
[162.79774475 -47.58094025]
[173.04988098 -55.86621475]
[186.01101685 -56.66678238]
[194.29649353 -69.17082214]
[202.58195496 -81.67485809]
[210.86743164 -94.17889404]
[212.04034424 -109.95655823]
[225.52026367 -116.29222870]
[233.80574036 -128.79626465]
[234.27467346 -145.18870544]
[248.83198547 -152.73965454]
[262.50234985 -143.68133545]
[261.22286987 -127.33218384]
[246.30978394 -120.51079559]
[238.02430725 -108.00675964]
[237.44403076 -93.12345886]
[223.37147522 -85.89341736]
[215.08599854 -73.38938141]
[206.80052185 -60.88534546]
[198.51504517 -48.38130951]
[202.59175110 -32.14643860]
[193.55908203 -17.65702438]
[176.53144836 -14.02948952]
[168.63496399 -1.27623224]
[160.73847961 11.47702503]
[164.38798523 25.87204933]
[156.56150818 38.91815567]
[141.43792725 42.64848328]
[133.54145813 55.40174103]
[134.54086304 74.60832977]
[116.95822144 84.22743988]
[109.86181641 97.44262695]
[109.09693909 105.61953735]
[102.33794403 110.95055389]
[94.83794403 123.94094086]
[87.33794403 136.93132019]
[79.83794403 149.92170715]
[72.33794403 162.91207886]
[73.41567993 182.92495728]
[56.55979156 192.18620300]
[49.87371445 205.61364746]
[43.18763733 219.04110718]
[36.50156403 232.46855164]
[30.65477562 246.28213501]
[25.66945267 260.42944336]
[28.38036919 276.01666260]
[16.85293007 285.44891357]
[11.86760807 299.59625244]
[6.88228607 313.74356079]
[1.89696419 327.89086914]
[13.62410927 337.49554443]
[21.35635757 350.53350830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 99]
[15 98]
[16 97]
[17 96]
[19 94]
[20 93]
[25 92]
[26 91]
[27 90]
[28 89]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 81]
[38 80]
[42 78]
[43 77]
[46 74]
[47 73]
[48 72]
[52 69]
[53 68]
[54 67]
[55 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
