%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAGCAAGUCACCCAGGUCAAGCCUGUUCUAGAAGAAACAACUAUAGCAAAAGCCCUAAGGUUGGAGUGUGGCUGCCAGAGCUCACAC\
) } def
/len { sequence length } bind def

/coor [
[125.54184723 155.92944336]
[118.56459045 158.61607361]
[111.31282043 160.43598938]
[103.89376831 161.36225891]
[96.41715240 161.38119507]
[88.99350739 160.49252319]
[81.73260498 158.70936584]
[74.74182129 156.05812073]
[68.12451935 152.57795715]
[61.97854233 148.32035828]
[56.39476776 143.34826660]
[51.45576477 137.73519897]
[47.23456192 131.56416321]
[43.79357529 124.92640686]
[41.18368530 117.92007446]
[39.44348145 110.64876556]
[24.46359062 111.42518616]
[9.48369789 112.20159912]
[-5.49619484 112.97801971]
[-20.47608757 113.75444031]
[-35.98102188 120.61253357]
[-46.86328506 107.61204529]
[-37.38337326 93.55617523]
[-21.25250816 98.77455139]
[-6.27261496 97.99813080]
[8.70727730 97.22171021]
[23.68717003 96.44528961]
[38.66706085 95.66886902]
[39.98277283 86.64258575]
[42.61940384 77.91028595]
[46.51892853 69.66416168]
[51.59552002 62.08569717]
[57.73744583 55.34169006]
[64.80953217 49.58057022]
[72.65612030 44.92913437]
[81.10453033 41.48974991]
[89.96880341 39.33812332]
[99.05385590 38.52160645]
[108.15973663 39.05817032]
[117.08602142 40.93600082]
[125.63626099 44.11377716]
[133.50683594 31.34450912]
[141.37739563 18.57524300]
[149.24797058 5.80597639]
[157.11853027 -6.96329021]
[157.77290344 -22.77095795]
[171.03759766 -29.54569054]
[178.90817261 -42.31495667]
[186.77873230 -55.08422470]
[180.75341797 -69.38370514]
[184.31663513 -84.48612976]
[196.09826660 -94.58429718]
[211.56800842 -95.79525757]
[224.77746582 -87.65338135]
[230.64729309 -73.28937531]
[226.92045593 -58.22650146]
[215.02998352 -48.25673294]
[199.54800415 -47.21365738]
[191.67742920 -34.44438934]
[183.80686951 -21.67512321]
[183.71545410 -6.78079891]
[169.88780212 0.90727711]
[162.01722717 13.67654419]
[154.14666748 26.44581032]
[146.27609253 39.21507645]
[138.40553284 51.98434448]
[157.11624146 77.23548889]
[160.90444946 108.43421173]
[148.78044128 137.42936707]
[159.47817993 147.94403076]
[170.17593384 158.45869446]
[180.87367249 168.97335815]
[191.57142639 179.48802185]
[202.44906616 189.81646729]
[213.50337219 199.95562744]
[224.55767822 210.09478760]
[240.58331299 210.84199524]
[249.87385559 223.92120361]
[245.30236816 239.29914856]
[230.37573242 245.17918396]
[216.54437256 237.05065918]
[214.41851807 221.14907837]
[203.36421204 211.00993347]
[192.30992126 200.87077332]
[185.09884644 198.62213135]
[181.05676270 190.18577576]
[170.35900879 179.67111206]
[159.66127014 169.15644836]
[148.96351624 158.64178467]
[138.26576233 148.12710571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
[49 58]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
