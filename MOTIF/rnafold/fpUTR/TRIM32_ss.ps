%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCUCAACGGCGCGUGCGCAGAGGGAGGCAGGCGGGUGGGCUGCCGGCGGUGGACUCGUCGGAGCCGCGGGCGGUCAGCAGGAAUUUGACCCUCUAGGGCAUGAAUACUGUGCUGUUCAGUUCUGAGCUGUGCUAGCAAUACCCUUCAAAGGAAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[101.33804321 245.55343628]
[88.19719696 234.84107971]
[94.85315704 219.24830627]
[95.43479156 204.25958252]
[96.01641846 189.27087402]
[96.59805298 174.28215027]
[97.17967987 159.29342651]
[82.38282013 143.87495422]
[76.89305115 126.55267334]
[64.86120605 135.51005554]
[62.21001053 148.16564941]
[51.96300888 155.37472534]
[39.95126724 153.70407104]
[27.74798775 162.42645264]
[15.54470634 171.14883423]
[8.81672668 185.46823120]
[-6.03675079 186.57434082]
[-18.24003220 195.29672241]
[-30.44331360 204.01910400]
[-28.87656403 219.29786682]
[-35.17374802 233.30647278]
[-47.64094925 242.27667236]
[-62.92455673 243.79551697]
[-76.91336060 237.45446777]
[-85.84442902 224.95919800]
[-87.31536865 209.67091370]
[-80.93048859 195.70205688]
[-68.40729523 186.81019592]
[-53.11446762 185.38719177]
[-39.16569519 191.81581116]
[-26.96241188 183.09342957]
[-14.75913143 174.37104797]
[-8.90401173 160.67555237]
[6.82232523 158.94555664]
[19.02560616 150.22317505]
[31.22888756 141.50079346]
[37.59020615 125.16785431]
[55.90382385 123.47820282]
[67.93566895 114.52082062]
[64.84227753 98.29416656]
[69.49205780 82.44320679]
[58.38389969 72.36309052]
[47.27573776 62.28297424]
[36.16757584 52.20285416]
[25.05941772 42.12273788]
[13.95125771 32.04261780]
[2.84309697 21.96250153]
[-12.57606411 18.41848755]
[-16.80164337 4.13585043]
[-27.90980339 -5.94426775]
[-39.01796341 -16.02438545]
[-50.12612534 -26.10450363]
[-54.51204300 -26.88289452]
[-58.04530334 -28.84292030]
[-60.45516205 -31.56189156]
[-61.63970184 -34.57234573]
[-61.66555786 -37.42229843]
[-71.95918274 -48.33290482]
[-82.25280762 -59.24350739]
[-98.10964966 -63.42592239]
[-102.15431976 -79.31845856]
[-90.22601318 -90.57223511]
[-74.59554291 -85.61033630]
[-71.34220123 -69.53713226]
[-61.04857635 -58.62652969]
[-50.75495148 -47.71592331]
[-40.04600525 -37.21266556]
[-28.93784523 -27.13254547]
[-17.82968521 -17.05242729]
[-6.72152519 -6.97231007]
[7.90310669 -4.14929485]
[12.92321491 10.85434151]
[24.03137589 20.93445969]
[35.13953400 31.01457596]
[46.24769592 41.09469604]
[57.35585403 51.17481232]
[68.46401215 61.25493240]
[79.57217407 71.33504486]
[116.16457367 55.56933975]
[157.45919800 85.09680939]
[165.94331360 72.72668457]
[174.42741394 60.35656357]
[182.91151428 47.98643875]
[174.70823669 33.96192932]
[173.43479919 17.82269478]
[179.29492188 2.79344964]
[191.07200623 -8.14495087]
[206.38142395 -12.84670544]
[222.15315247 -10.42188549]
[230.39579773 -22.95420265]
[232.51354980 -31.89154053]
[238.92173767 -35.64747620]
[247.40585327 -48.01760101]
[255.88995361 -60.38772583]
[256.62060547 -76.77059174]
[271.29666138 -84.08809662]
[284.82061768 -74.81262970]
[283.28021240 -58.48598480]
[268.26007080 -51.90362549]
[259.77597046 -39.53350067]
[251.29187012 -27.16337395]
[242.92810059 -14.71156788]
[234.68547058 -2.17925024]
[242.40814209 9.37664318]
[245.14279175 23.04805565]
[242.44273376 36.77055740]
[234.68444824 48.45908356]
[223.01557922 56.32476044]
[209.18518066 59.14864731]
[195.28163147 56.47053909]
[186.79753113 68.84066772]
[178.31343079 81.21079254]
[169.82933044 93.58091736]
[175.50233459 107.46677399]
[190.22116089 110.35746002]
[204.93998718 113.24814606]
[219.68615723 115.99597931]
[234.45826721 118.60070038]
[249.39234924 113.37731934]
[260.58270264 123.20713806]
[275.35482788 125.81186676]
[290.12692261 128.41658020]
[304.89904785 131.02130127]
[319.67117310 133.62603760]
[336.31961060 130.42198181]
[344.00717163 145.53282166]
[331.61502075 157.10307312]
[317.06643677 148.39814758]
[302.29434204 145.79342651]
[287.52221680 143.18870544]
[272.75009155 140.58398438]
[257.97796631 137.97926331]
[244.10049438 143.38894653]
[231.85354614 133.37281799]
[217.08143616 130.76809692]
[209.91282654 132.71311951]
[202.04930115 127.96697235]
[187.33047485 125.07628632]
[172.61164856 122.18560791]
[168.13294983 128.20152283]
[182.34384155 133.00263977]
[182.16894531 148.00161743]
[167.84996033 152.47003174]
[159.17556763 140.23338318]
[154.69688416 146.24929810]
[161.68754578 159.52072144]
[168.67819214 172.79216003]
[182.83259583 181.07374573]
[182.46717834 197.46881104]
[167.95783997 205.11152649]
[154.23054504 196.13972473]
[155.40676880 179.78280640]
[148.41610718 166.51138306]
[141.42546082 153.23995972]
[134.11119080 154.89872742]
[119.48266602 158.21627808]
[112.16840363 159.87506104]
[111.58676910 174.86378479]
[111.00514221 189.85249329]
[110.42350769 204.84121704]
[109.84188080 219.82994080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 161]
[4 160]
[5 159]
[6 158]
[7 157]
[9 39]
[10 38]
[13 36]
[14 35]
[15 34]
[17 32]
[18 31]
[19 30]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[49 70]
[50 69]
[51 68]
[52 67]
[57 66]
[58 65]
[59 64]
[80 113]
[81 112]
[82 111]
[83 110]
[89 103]
[90 102]
[92 101]
[93 100]
[94 99]
[114 139]
[115 138]
[116 137]
[117 135]
[118 134]
[120 132]
[121 131]
[122 130]
[123 129]
[124 128]
[145 154]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
