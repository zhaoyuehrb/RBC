%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUUCCUCCGGGGCCGCUGGCACUGCGGCCGCUCCGCAGGCAGAGAAGCCGGGAGCGGGCGAGGCGGCGGCGGCAGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[129.83305359 182.33316040]
[129.27218628 167.34365845]
[128.71131897 152.35414124]
[127.87026978 137.37774658]
[126.74931335 122.41968536]
[119.71775055 119.81065369]
[98.62303925 111.98355865]
[88.01644135 122.59016418]
[84.29698944 138.56193542]
[68.52881622 143.06713867]
[56.93286514 131.47119141]
[61.43806076 115.70301056]
[77.40983582 111.98355865]
[88.01644135 101.37696075]
[95.51644135 88.38657379]
[99.39872742 73.89768982]
[103.28101349 59.40880203]
[107.16329956 44.91991425]
[111.04558563 30.43102646]
[114.92787170 15.94213963]
[118.81015778 1.45325243]
[122.14797211 -13.17066669]
[124.93664551 -27.90916252]
[123.44239044 -37.17659760]
[128.11500549 -43.14207840]
[131.45281982 -57.76599884]
[130.30612183 -67.08281708]
[135.19853210 -72.86941528]
[139.08081055 -87.35830688]
[135.17890930 -102.69081116]
[145.94662476 -112.98184967]
[149.82890320 -127.47073364]
[153.71119690 -141.95962524]
[157.59347534 -156.44851685]
[161.47576904 -170.93739319]
[165.35804749 -185.42628479]
[169.24034119 -199.91517639]
[163.11897278 -209.27780151]
[163.30093384 -220.23974609]
[169.47395325 -229.02941895]
[179.30729675 -232.76248169]
[184.26148987 -246.92073059]
[189.21568298 -261.07897949]
[182.13349915 -275.20761108]
[187.19531250 -290.17938232]
[201.39804077 -297.11178589]
[216.31544495 -291.89196777]
[223.09730530 -277.61672974]
[217.72004700 -262.75534058]
[203.37393188 -256.12478638]
[198.41973877 -241.96655273]
[193.46556091 -227.80830383]
[198.65275574 -209.33515930]
[183.72921753 -196.03288269]
[179.84693909 -181.54400635]
[175.96464539 -167.05511475]
[172.08236694 -152.56622314]
[168.20007324 -138.07733154]
[164.31779480 -123.58844757]
[160.43550110 -109.09956360]
[164.61511230 -94.80339813]
[153.56970215 -83.47602081]
[149.68740845 -68.98712921]
[146.07673645 -54.42818451]
[142.73892212 -39.80426407]
[139.67514038 -25.12048912]
[136.88645935 -10.38199234]
[138.93922424 -5.81948614]
[137.96575928 0.09839638]
[133.29904175 5.33553791]
[129.41676331 19.82442474]
[125.53446960 34.31331253]
[121.65218353 48.80220032]
[117.76989746 63.29108810]
[113.88761139 77.77997589]
[110.00532532 92.26885986]
[141.70736694 121.29873657]
[142.82832336 136.25679016]
[146.67024231 144.82170105]
[143.70083618 151.79327393]
[144.26170349 166.78279114]
[144.82257080 181.77229309]
[147.73194885 200.93438721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 78]
[5 77]
[7 14]
[8 13]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[22 67]
[23 66]
[25 65]
[26 64]
[28 63]
[29 62]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
