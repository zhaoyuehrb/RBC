%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAACAAAGACUCGGAGCGAGCGAGGGGGCGGGGGUGGGGCGGAAUCCCGGCCGCCGGCGAGGCGGGGGAGGCGGCGGCGCAGGGUCGCCCCGGCCGGGCGGGCGGGGUCGCGCCUGGUGGCGGUCCCCGCGCCGAGGCGCCGCUAGGGCGGGCGGGGGUCGGGACGCCGGGCUAGGGGCGCGUC\
) } def
/len { sequence length } bind def

/coor [
[89.78196716 114.66440582]
[76.83378601 122.23703766]
[63.88561249 129.80966187]
[78.88494110 129.66754150]
[91.37244415 137.97792053]
[97.03279114 151.86894226]
[93.90991211 166.54025269]
[83.08300018 176.92187500]
[68.29353333 179.42617798]
[54.65233612 173.18777466]
[46.87343979 160.36245728]
[47.64513397 145.38197327]
[39.53552246 158.00077820]
[31.42590904 170.61958313]
[23.31629753 183.23838806]
[19.83951950 199.83201599]
[2.93191385 201.08467102]
[-2.95229197 185.18460083]
[10.69749451 175.12876892]
[18.80710602 162.50996399]
[26.91671944 149.89117432]
[35.02633286 137.27236938]
[30.86610413 131.03196716]
[15.89721870 131.99760437]
[22.54565048 118.55118561]
[18.38542366 112.31079102]
[3.61819601 114.94308472]
[-8.61003494 124.98205566]
[-22.49759293 119.59828186]
[-37.26482010 122.23057556]
[-52.03205109 124.86286926]
[-64.26027679 134.90184021]
[-78.14783478 129.51806641]
[-92.91506958 132.15036011]
[-107.68229675 134.78265381]
[-122.44952393 137.41494751]
[-137.21675110 140.04724121]
[-143.87153625 154.06484985]
[-157.51081848 161.46417236]
[-172.88998413 159.40000916]
[-184.09544373 148.66609192]
[-186.81848145 133.38980103]
[-180.01202393 119.44521332]
[-166.29328918 112.19429016]
[-150.93740845 114.42515564]
[-139.84904480 125.28000641]
[-125.08181763 122.64771271]
[-110.31459045 120.01542664]
[-95.54735565 117.38313293]
[-80.78012848 114.75083923]
[-69.60815430 104.90014648]
[-54.66434097 110.09564209]
[-39.89711380 107.46334839]
[-25.12988472 104.83105469]
[-13.95790577 94.98036194]
[0.98590332 100.17584991]
[15.75313187 97.54356384]
[44.14399338 99.89578247]
[56.31298447 116.86148834]
[69.26116180 109.28885651]
[82.20933533 101.71623230]
[88.85902405 82.64079285]
[111.73471832 79.77789307]
[114.49095917 65.03329468]
[117.24720001 50.28870010]
[120.00344086 35.54410172]
[114.93366241 20.55718040]
[124.87785339 9.46833897]
[127.63409424 -5.27625751]
[130.39033508 -20.02085495]
[128.88973999 -29.05284882]
[133.31871033 -34.98908615]
[136.32226562 -49.68529892]
[139.32582092 -64.38151550]
[134.50851440 -79.45149231]
[144.63758850 -90.37171173]
[147.64114380 -105.06792450]
[142.82383728 -120.13790131]
[152.95291138 -131.05812073]
[155.95645142 -145.75433350]
[154.60780334 -154.81027222]
[159.13587952 -160.67126465]
[162.38589478 -175.31494141]
[165.63589478 -189.95863342]
[168.88591003 -204.60231018]
[172.01280212 -219.27276611]
[175.01635742 -233.96899414]
[170.19905090 -249.03895569]
[180.32812500 -259.95919800]
[183.33168030 -274.65539551]
[186.33522034 -289.35162354]
[189.33877563 -304.04782104]
[192.34233093 -318.74404907]
[195.34587097 -333.44024658]
[190.52857971 -348.51022339]
[200.65763855 -359.43045044]
[203.66119385 -374.12664795]
[197.96101379 -389.50326538]
[208.63432312 -401.95367432]
[224.70135498 -398.66995239]
[229.63371277 -383.03012085]
[218.35740662 -371.12310791]
[215.35385132 -356.42691040]
[220.38598633 -342.40808105]
[210.04208374 -330.43670654]
[207.03854370 -315.74047852]
[204.03498840 -301.04428101]
[201.03143311 -286.34805298]
[198.02789307 -271.65185547]
[195.02433777 -256.95562744]
[200.05647278 -242.93682861]
[189.71257019 -230.96543884]
[186.70901489 -216.26922607]
[188.45367432 -209.07124329]
[183.52960205 -201.35229492]
[180.27958679 -186.70861816]
[177.02957153 -172.06492615]
[173.77955627 -157.42124939]
[170.65266418 -142.75077820]
[167.64912415 -128.05456543]
[172.68125916 -114.03576660]
[162.33735657 -102.06437683]
[159.33380127 -87.36816406]
[164.36593628 -73.34935760]
[154.02203369 -61.37796021]
[151.01847839 -46.68174744]
[148.01492310 -31.98553467]
[145.13493347 -17.26461220]
[142.37869263 -2.52001476]
[139.62245178 12.22458172]
[144.88937378 26.15687370]
[134.74804688 38.30034637]
[131.99179077 53.04494095]
[129.23554993 67.78953552]
[126.47930908 82.53413391]
[131.54377747 96.65331268]
[143.04344177 106.28440094]
[158.59117126 109.21334839]
[163.38055420 123.31693268]
[174.88020325 132.94802856]
[186.37986755 142.57910156]
[197.87953186 152.21018982]
[209.37919617 161.84127808]
[224.92691040 164.77023315]
[229.71629333 178.87380981]
[241.21595764 188.50489807]
[252.71562195 198.13598633]
[264.21527100 207.76707458]
[277.31219482 203.43266296]
[290.73306274 206.11968994]
[300.98812866 215.02026367]
[305.46493530 227.72517395]
[303.09338379 240.87530518]
[314.42965698 250.69822693]
[325.76589966 260.52111816]
[337.10214233 270.34405518]
[351.58984375 265.24487305]
[366.68319702 268.08853149]
[378.32214355 278.11001587]
[383.37588501 292.61364746]
[380.48495483 307.69802856]
[370.42700195 319.30551147]
[355.90759277 324.31372070]
[340.83236694 321.37554932]
[329.25646973 311.28128052]
[324.29379272 296.74624634]
[327.27920532 281.68029785]
[315.94296265 271.85736084]
[304.60671997 262.03445435]
[293.27047729 252.21154785]
[277.41900635 256.44177246]
[262.01251221 250.33601379]
[253.18714905 236.11332703]
[254.58419800 219.26673889]
[243.08453369 209.63565063]
[231.58486938 200.00456238]
[220.08522034 190.37347412]
[205.36001587 188.13340759]
[199.74810791 173.34094238]
[188.24844360 163.70985413]
[176.74877930 154.07876587]
[165.24913025 144.44767761]
[153.74946594 134.81660461]
[139.02427673 132.57652283]
[133.41235352 117.78405762]
[121.91269684 108.15296936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[12 22]
[13 21]
[14 20]
[15 19]
[26 57]
[27 56]
[29 54]
[30 53]
[31 52]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[63 135]
[64 134]
[65 133]
[66 132]
[68 130]
[69 129]
[70 128]
[72 127]
[73 126]
[74 125]
[76 123]
[77 122]
[79 120]
[80 119]
[82 118]
[83 117]
[84 116]
[85 115]
[86 113]
[87 112]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
[136 186]
[137 185]
[139 183]
[140 182]
[141 181]
[142 180]
[143 179]
[145 177]
[146 176]
[147 175]
[148 174]
[153 170]
[154 169]
[155 168]
[156 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
