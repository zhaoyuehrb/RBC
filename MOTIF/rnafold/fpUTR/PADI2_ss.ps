%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCUGCUGGAGAAGGCGCACCUGCUGCAGGUGCUCCCGGCCGCCCCGGACCAGCGAGCGCGGGCACUGCGGCGGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[80.17002869 119.71595001]
[67.08605957 127.05146027]
[54.00209045 134.38696289]
[40.91812134 141.72247314]
[27.83414841 149.05798340]
[18.94714737 165.05149841]
[1.51735735 164.43406677]
[-11.27965546 172.25944519]
[-24.07666779 180.08480835]
[-36.87368011 187.91018677]
[-40.33354187 203.33111572]
[-53.72879791 211.71817017]
[-69.11228180 208.09545898]
[-77.35724640 194.61228943]
[-73.57209778 179.26795959]
[-60.00249863 171.16601562]
[-44.69905472 175.11317444]
[-31.90204048 167.28779602]
[-19.10502815 159.46243286]
[-6.30801535 151.63705444]
[-3.08534241 139.81526184]
[7.72736311 133.23538208]
[20.49863815 135.97401428]
[33.58261108 128.63850403]
[46.66658020 121.30300140]
[59.75055313 113.96749115]
[72.83452606 106.63198090]
[72.11428070 97.91838074]
[74.12023926 89.40828705]
[78.65628052 81.93367767]
[85.27895355 76.22528076]
[93.34079742 72.84117889]
[102.05367279 72.11221313]
[110.56577301 74.10964203]
[118.04492188 78.63819122]
[123.75994873 85.25513458]
[138.15959167 81.05391693]
[152.55923462 76.85269165]
[166.95887756 72.65147400]
[181.35852051 68.45025635]
[192.43928528 57.15745926]
[206.82424927 61.02041245]
[221.22389221 56.81919098]
[235.62353516 52.61797333]
[250.02317810 48.41675186]
[264.42282104 44.21553040]
[278.46350098 38.93731689]
[292.06475830 32.61233902]
[305.66604614 26.28736115]
[319.26730347 19.96238518]
[319.42211914 4.70005226]
[326.19137573 -8.97986031]
[338.23101807 -18.36119652]
[353.15060425 -21.58128548]
[367.98782349 -18.00077629]
[379.79672241 -8.33058071]
[386.23263550 5.50927544]
[386.01773071 20.77087975]
[379.19467163 34.42403030]
[367.11816406 43.75788116]
[352.18600464 46.91919327]
[337.36300659 43.28028107]
[325.59228516 33.56365967]
[311.99102783 39.88863754]
[298.38973999 46.21361160]
[284.78848267 52.53858948]
[283.75857544 55.40617371]
[281.38519287 57.97857285]
[277.79953003 59.68143463]
[273.36157227 60.01001740]
[268.62405396 58.61517334]
[254.22439575 62.81639481]
[239.82475281 67.01761627]
[225.42510986 71.21883392]
[211.02546692 75.42005920]
[200.97465515 86.41235352]
[185.55975342 82.84989929]
[171.16011047 87.05111694]
[156.76046753 91.25234222]
[142.36080933 95.45355988]
[127.96117401 99.65477753]
[119.91625977 119.62878418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[7 20]
[8 19]
[9 18]
[10 17]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 66]
[48 65]
[49 64]
[50 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
