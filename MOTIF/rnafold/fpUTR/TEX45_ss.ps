%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGCAGCCUGGGAAGGAACAUGAGGAUCCUCUGAGAGACCAGGGACAGAGGGAGACCCAAAGAUCUGGUCUGUAGCUAAGUGAAUUUUCUAAAACUCAUUGAUUCACACGCCAUCCCUUGAGGUGGCUGGUGUCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[102.61476135 214.33036804]
[101.28906250 199.38905334]
[99.96335602 184.44775391]
[98.63765717 169.50645447]
[97.31195831 154.56515503]
[95.98625183 139.62385559]
[84.00451660 137.63200378]
[72.88027954 132.01046753]
[63.71280670 123.10365295]
[57.46868515 111.58790588]
[44.53396988 119.18350220]
[36.55183792 132.84352112]
[21.65896606 132.61628723]
[8.72424793 140.21188354]
[-4.21047068 147.80747986]
[-10.08391666 154.90864563]
[-17.51642036 155.42439270]
[-30.61600304 162.73197937]
[-43.71558762 170.03956604]
[-44.57419586 185.44302368]
[-53.64273834 197.92361450]
[-68.02746582 203.49882507]
[-83.13827515 200.38964844]
[-94.15335846 189.58818054]
[-97.55783844 174.54115295]
[-92.26535797 160.05001831]
[-79.96473694 150.73883057]
[-64.58104706 149.57876587]
[-51.02317810 156.93998718]
[-37.92359543 149.63240051]
[-24.82401276 142.32479858]
[-11.80606461 134.87275696]
[1.12865353 127.27716064]
[14.06337166 119.68156433]
[21.12032509 106.56483459]
[36.93837357 106.24878693]
[49.87309265 98.65319061]
[52.51412201 83.88751984]
[43.01426315 72.27922058]
[33.51440430 60.67091370]
[24.01454926 49.06261063]
[14.51469231 37.45430756]
[5.01483488 25.84600258]
[-4.48502207 14.23769855]
[-13.98487949 2.62939477]
[-27.62788010 6.47574091]
[-41.66218185 4.82188940]
[-53.96152496 -2.04818368]
[-62.67527008 -13.06276131]
[-66.50685120 -26.52944565]
[-64.90662384 -40.39516068]
[-58.15042877 -52.55914307]
[-67.39115906 -64.37476349]
[-76.63188934 -76.19038391]
[-91.15232086 -84.94215393]
[-86.76222992 -101.31784821]
[-69.81120300 -101.63256836]
[-64.81626892 -85.43111420]
[-55.57553864 -73.61549377]
[-46.33480835 -61.79987717]
[-30.82879639 -65.50820160]
[-15.19703197 -62.08921432]
[-2.56368613 -52.17456055]
[4.52388668 -37.69923019]
[4.60871553 -21.52408600]
[-2.37657547 -6.87046242]
[7.12328148 4.73784161]
[16.62313843 16.34614563]
[26.12299538 27.95444870]
[35.62285233 39.56275177]
[45.12271118 51.17105484]
[54.62256622 62.77936172]
[64.12242126 74.38766479]
[70.40986633 67.96630096]
[77.79565430 63.01771927]
[85.94667816 59.71772003]
[94.50473022 58.16888046]
[103.10212708 58.39775085]
[111.37755585 60.35535049]
[118.99123383 63.92086411]
[125.63883972 68.90834045]
[131.06370544 75.07599640]
[144.32174683 68.05998230]
[157.57977295 61.04396820]
[170.83781433 54.02795410]
[184.09585571 47.01194000]
[197.35388184 39.99592590]
[210.61192322 32.97991180]
[209.14990234 17.84944725]
[213.59413147 3.31269002]
[223.26689148 -8.41360950]
[236.69316101 -15.54127598]
[251.82554626 -16.98339272]
[266.35644531 -12.52004623]
[278.07000732 -2.83186603]
[285.17999268 10.60377216]
[286.60220337 25.73802948]
[282.11975098 40.26304245]
[272.41616821 51.96385193]
[258.97119141 59.05617142]
[243.83508301 60.45847321]
[229.31597900 55.95691299]
[217.62794495 46.23794556]
[204.36990356 53.25395966]
[191.11186218 60.26997375]
[177.85382080 67.28598785]
[164.59579468 74.30200195]
[151.33775330 81.31801605]
[138.07971191 88.33403015]
[139.76673889 97.81680298]
[139.12792969 107.42726898]
[136.20066833 116.60333252]
[148.41348267 125.31237793]
[160.62628174 134.02142334]
[172.83908081 142.73046875]
[185.05189514 151.43951416]
[197.26469421 160.14854431]
[212.80856323 157.29130554]
[225.77249146 166.33076477]
[228.46524048 181.90397644]
[219.28921509 194.77162170]
[203.68841553 197.29956055]
[190.91850281 187.98800659]
[188.55564880 172.36135864]
[176.34284973 163.65231323]
[164.13003540 154.94326782]
[151.91723633 146.23422241]
[139.70443726 137.52517700]
[127.49163055 128.81613159]
[122.50645447 132.85755920]
[116.93688965 136.04582214]
[110.92755890 138.29814148]
[112.25325775 153.23945618]
[113.57895660 168.18075562]
[114.90466309 183.12205505]
[116.23036194 198.06335449]
[117.55606079 213.00465393]
[128.88601685 224.36299133]
[126.92674255 240.28594971]
[113.18122101 248.55882263]
[98.19384766 242.83534241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[4 134]
[5 133]
[6 132]
[10 37]
[11 36]
[13 34]
[14 33]
[15 32]
[17 31]
[18 30]
[19 29]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[52 60]
[53 59]
[54 58]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
