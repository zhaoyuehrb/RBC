%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUUUCCUGGAGCAAUGUCACAGGGUGGCUCCAUUUUCCAUUUGAGCUCAAAUAUUUUGCUGCUUCCUCUGUAGCUGCCAGACCUGCUCUUGCUGCUGCUCAGGUAGAACAUCUGGGAGGUCCCUUGCUGACCACUGGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[-19.03180885 218.41995239]
[-34.88160706 215.44616699]
[-44.35873413 227.07304382]
[-53.83585739 238.69990540]
[-63.31298447 250.32676697]
[-64.76779175 256.89382935]
[-68.75456238 261.06848145]
[-73.45198822 262.23663330]
[-83.41726685 273.44790649]
[-93.38255310 284.65921021]
[-103.34783936 295.87051392]
[-113.19275665 307.18765259]
[-122.91618347 318.60934448]
[-121.40126801 334.34085083]
[-131.51824951 346.48260498]
[-147.26490784 347.83111572]
[-159.29902649 337.58630371]
[-160.48097229 321.82629395]
[-150.10951233 309.90115356]
[-134.33787537 308.88589478]
[-124.61444855 297.46420288]
[-122.65965271 290.28131104]
[-114.55913544 285.90521240]
[-104.59384918 274.69393921]
[-94.62856293 263.48263550]
[-84.66327667 252.27133179]
[-74.93985748 240.84963989]
[-65.46273041 229.22277832]
[-55.98559952 217.59591675]
[-46.50847244 205.96903992]
[-52.20220947 193.51388550]
[-51.95774078 179.75488281]
[-45.76575470 167.39128113]
[-34.78934097 158.87330627]
[-21.14593697 155.91664124]
[-7.49896860 159.15704346]
[2.22445750 147.73535156]
[11.94788361 136.31367493]
[21.67130852 124.89197540]
[31.39473534 113.47029114]
[41.11816025 102.04859924]
[38.40827179 87.29541779]
[25.26058388 80.07472992]
[12.11289692 72.85404205]
[-1.03479111 65.63335419]
[-14.18247890 58.41267014]
[-30.55739212 59.30388641]
[-39.28881454 45.42245102]
[-31.39460754 31.04839134]
[-14.99565506 30.96851158]
[-6.96179295 45.26498413]
[6.18589497 52.48566818]
[19.33358192 59.70635605]
[32.48126984 66.92704010]
[45.62895966 74.14772797]
[51.68714905 69.72637939]
[39.53309631 60.93553543]
[44.13789749 46.65982819]
[59.13786316 46.62784576]
[63.80353546 60.88368607]
[69.86172485 56.46234131]
[66.99434662 41.73895264]
[64.12696838 27.01556587]
[61.25959015 12.29217815]
[58.39220810 -2.43120956]
[44.62582779 -9.84880352]
[38.89617157 -24.39889145]
[43.90861511 -39.21136856]
[57.29643250 -47.29223251]
[72.73830414 -44.82595062]
[82.94305420 -32.97702026]
[83.09230804 -17.34015083]
[73.11560059 -5.29858875]
[75.98297882 9.42479801]
[78.85035706 24.14818573]
[81.71773529 38.87157440]
[84.58511353 53.59495926]
[103.53155518 55.57753754]
[118.55376434 64.30738831]
[127.64957428 77.11594391]
[140.94856262 70.17787170]
[154.24755859 63.23979568]
[167.54653931 56.30172348]
[180.84553528 49.36364746]
[191.09629822 30.59819031]
[211.64372253 32.07620621]
[224.47085571 24.30031586]
[237.29800415 16.52442741]
[250.12513733 8.74853897]
[262.95227051 0.97265035]
[264.36572266 -14.36711502]
[274.42309570 -25.79962349]
[289.11016846 -29.07901764]
[302.74871826 -23.15219307]
[315.57586670 -30.92808151]
[322.99151611 -45.55477905]
[339.37890625 -46.17569733]
[347.88009644 -32.15208435]
[339.74981689 -17.91023254]
[323.35177612 -18.10094070]
[310.52462769 -10.32505131]
[309.47097778 4.50828362]
[299.77014160 16.01297188]
[284.98214722 19.64187431]
[270.72817993 13.79979229]
[257.90103149 21.57567978]
[245.07388306 29.35156822]
[232.24674988 37.12745667]
[219.41960144 44.90334702]
[218.72053528 53.87812424]
[213.86166382 61.61992645]
[205.84480286 66.29124451]
[196.43745422 66.71370697]
[187.78359985 62.66263962]
[174.48461914 69.60071564]
[161.18562317 76.53878784]
[147.88664246 83.47686005]
[134.58764648 90.41493225]
[135.89109802 100.08958435]
[134.53936768 109.75761414]
[130.63246155 118.70378113]
[141.51858521 129.02328491]
[152.40472412 139.34278870]
[163.29084778 149.66229248]
[178.80534363 147.70413208]
[191.92074585 156.22001648]
[196.44435120 171.18901062]
[190.24026489 185.54322815]
[176.23785400 192.50502014]
[161.04864502 188.78726196]
[151.84449768 176.14535522]
[152.97134399 160.54841614]
[142.08522034 150.22891235]
[131.19908142 139.90940857]
[120.31295776 129.58990479]
[104.65796661 138.86485291]
[84.94512939 139.63163757]
[65.84715271 130.28515625]
[52.53985214 111.77202606]
[42.81642532 123.19371796]
[33.09299850 134.61540222]
[23.36957359 146.03709412]
[13.64614677 157.45878601]
[3.92272091 168.88047791]
[9.62635136 184.36433411]
[6.78000498 200.52287292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 21]
[13 20]
[36 144]
[37 143]
[38 142]
[39 141]
[40 140]
[41 139]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[80 118]
[81 117]
[82 116]
[83 115]
[84 114]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[94 101]
[95 100]
[121 135]
[122 134]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
