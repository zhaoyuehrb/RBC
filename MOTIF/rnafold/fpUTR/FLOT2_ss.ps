%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACACUUCCGGCGGGGCUGCGACCGCAGAGGGGCGCGGGCGAGCGAGCGGGCGGCCGGCCGCUGGGGGUGGCGGGAUAGGCUGGGCGCGGCCGGCGCUGCAGACCCGCUGCUGUUGUCCGGGUCUGUGCGGUCCCGAGGGCCCUCCGUGCCGCCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-70.38391113 370.07687378]
[-65.55936432 384.27981567]
[-70.84156036 398.31900024]
[-83.83184814 405.81918335]
[-98.63128662 403.37448120]
[-108.51942444 392.09509277]
[-109.00655365 377.10461426]
[-119.45873260 387.86343384]
[-129.91090393 398.62225342]
[-140.36308289 409.38104248]
[-140.96524048 422.29650879]
[-149.93260193 431.04504395]
[-162.05627441 431.30938721]
[-172.71386719 441.86477661]
[-183.37144470 452.42013550]
[-194.02903748 462.97552490]
[-191.54248047 478.29205322]
[-198.56370544 492.12976074]
[-212.39289856 499.16775513]
[-227.71244812 496.69976807]
[-238.63168335 485.67477417]
[-240.95191956 470.33215332]
[-233.78100586 456.57144165]
[-219.87628174 449.68389893]
[-204.58441162 452.31793213]
[-193.92681885 441.76254272]
[-183.26924133 431.20718384]
[-172.61164856 420.65182495]
[-168.93331909 403.51351929]
[-151.12190247 398.92886353]
[-140.66972351 388.17007446]
[-130.21754456 377.41125488]
[-119.76535797 366.65243530]
[-110.06216431 355.21356201]
[-101.15209198 343.14663696]
[-92.24202728 331.07971191]
[-83.33195496 319.01278687]
[-74.42188263 306.94586182]
[-73.08618164 292.11129761]
[-58.66445160 285.60556030]
[-49.75437927 273.53863525]
[-40.84430695 261.47171021]
[-31.93423653 249.40480042]
[-30.48386955 242.12098694]
[-22.73433495 237.19340515]
[-13.59335899 225.30043030]
[-13.32323742 220.48849487]
[-9.99548149 215.80732727]
[-3.86377001 213.13430786]
[5.72874117 201.60246277]
[15.32125187 190.07060242]
[24.91376305 178.53874207]
[34.50627518 167.00688171]
[36.69701004 152.27427673]
[51.47059631 146.61283875]
[61.06310654 135.08097839]
[70.65561676 123.54912567]
[80.24813080 112.01726532]
[74.61349487 92.93014526]
[86.31211090 73.77215576]
[78.35787201 61.05484009]
[70.40363312 48.33752441]
[62.44939804 35.62020874]
[54.49516296 22.90289497]
[46.54092789 10.18557835]
[33.01549911 -0.03690349]
[39.09427261 -15.86361694]
[55.98524094 -14.40367508]
[59.25824356 2.23134208]
[67.21247864 14.94865799]
[75.16671753 27.66597366]
[83.12094879 40.38328934]
[91.07518768 53.10060501]
[99.02942657 65.81792450]
[113.75168610 68.69109344]
[125.90390778 59.89771652]
[138.05613708 51.10434341]
[150.20835876 42.31097031]
[162.36058044 33.51759720]
[148.46014404 22.33222961]
[143.64576721 0.71634227]
[147.08416748 -13.88425446]
[150.52256775 -28.48485184]
[153.96096802 -43.08544922]
[157.39935303 -57.68604660]
[152.15805054 -73.22505188]
[163.19618225 -85.35318756]
[179.15866089 -81.59407043]
[183.62467957 -65.81475067]
[171.99995422 -54.24765015]
[168.56155396 -39.64705276]
[165.12316895 -25.04645538]
[161.68476868 -10.44585800]
[158.24636841 4.15473890]
[163.72549438 9.27618408]
[174.68374634 19.51907349]
[180.16287231 24.64051819]
[194.49848938 20.22576904]
[208.83410645 15.81101894]
[216.15676880 10.26890373]
[223.48870850 11.45220089]
[237.90673828 7.31455326]
[252.32478333 3.17690516]
[266.74282837 -0.96074295]
[281.16085815 -5.09839106]
[295.57888794 -9.23603916]
[309.99694824 -13.37368679]
[324.41497803 -17.51133537]
[338.83300781 -21.64898300]
[345.77722168 -32.55537415]
[357.90747070 -35.68713379]
[368.55773926 -29.88841820]
[383.05282593 -33.74742889]
[394.27908325 -45.70165253]
[410.18090820 -41.69363403]
[414.39987183 -25.84647560]
[402.59585571 -14.46237850]
[386.91183472 -19.25232506]
[372.41674805 -15.39331436]
[360.70388794 -2.35260081]
[342.97067261 -7.23094368]
[328.55264282 -3.09329557]
[314.13458252 1.04435253]
[299.71655273 5.18200064]
[285.29852295 9.31964874]
[270.88046265 13.45729637]
[256.46243286 17.59494400]
[242.04438782 21.73259354]
[227.62635803 25.87024117]
[213.24885559 30.14663887]
[198.91323853 34.56138611]
[184.57762146 38.97613907]
[171.15396118 45.66982269]
[159.00173950 54.46319580]
[146.84950256 63.25656891]
[134.69728088 72.04994202]
[122.54505920 80.84331512]
[127.94075775 98.75096893]
[121.52441406 115.20384979]
[107.21951294 123.65948486]
[91.77998352 121.60977936]
[82.18747711 133.14163208]
[72.59496307 144.67349243]
[63.00245285 156.20535278]
[60.12559509 171.76280212]
[46.03813171 176.59939575]
[36.44562149 188.13125610]
[26.85310936 199.66311646]
[17.26059914 211.19496155]
[7.66808701 222.72682190]
[-1.70039594 234.44140625]
[-10.84137154 246.33438110]
[-19.86731339 258.31488037]
[-28.77738571 270.38180542]
[-37.68745804 282.44873047]
[-46.59753036 294.51565552]
[-48.57053757 310.21334839]
[-62.35495758 315.85595703]
[-71.26502991 327.92288208]
[-80.17510223 339.98980713]
[-89.08517456 352.05670166]
[-97.99524689 364.12362671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 33]
[8 32]
[9 31]
[10 30]
[13 28]
[14 27]
[15 26]
[16 25]
[34 162]
[35 161]
[36 160]
[37 159]
[38 158]
[40 156]
[41 155]
[42 154]
[43 153]
[45 152]
[46 151]
[49 150]
[50 149]
[51 148]
[52 147]
[53 146]
[55 144]
[56 143]
[57 142]
[58 141]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[75 137]
[76 136]
[77 135]
[78 134]
[79 133]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[97 132]
[98 131]
[99 130]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
