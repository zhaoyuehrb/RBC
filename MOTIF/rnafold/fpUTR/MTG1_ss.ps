%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCCCGCAGUGCCGGAGGCCCGCAGCGCCGGAACCUCAGAGGCGGGUCGCAGCGGCGCAGAGGAGGUCAGCUGCGGGAGCGUUUCCGGGGACGGUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[200.88677979 287.30798340]
[195.60908508 282.51651001]
[192.13047791 276.23480225]
[190.85113525 269.11593628]
[191.94056702 261.91262817]
[195.31596375 255.39756775]
[187.24070740 242.75675964]
[179.16545105 230.11595154]
[171.09017944 217.47512817]
[163.01492310 204.83432007]
[154.93966675 192.19349670]
[146.86441040 179.55268860]
[138.78915405 166.91186523]
[130.33934021 154.51829529]
[121.52256775 142.38304138]
[112.70578766 130.24778748]
[95.86354065 132.54620361]
[80.13169861 126.10777283]
[69.73339081 112.66086578]
[67.45997620 95.81521606]
[73.92175293 80.09295654]
[64.39501953 68.50669861]
[54.69602585 57.06425476]
[44.82694244 45.76818466]
[34.95786285 34.47211075]
[25.08878136 23.17604065]
[10.18237400 17.87419319]
[7.63534880 3.19897866]
[-2.23373222 -8.09709358]
[-12.10281277 -19.39316559]
[-22.13977242 -30.54033852]
[-32.34236145 -41.53611755]
[-44.27780151 -39.64875031]
[-55.50123215 -43.78923798]
[-63.19419098 -52.79195023]
[-65.48652649 -64.28656769]
[-61.91001129 -75.32149506]
[-71.43675232 -86.90775299]
[-80.96348572 -98.49400330]
[-95.69346619 -106.88829803]
[-91.70488739 -123.36639404]
[-74.76661682 -124.09528351]
[-69.37722778 -108.02074432]
[-59.85049438 -96.43448639]
[-50.32375717 -84.84823608]
[-32.14730835 -84.28578949]
[-19.81978226 -70.49150848]
[-21.34658432 -51.73870850]
[-11.14399433 -40.74292755]
[-4.17329645 -37.93466568]
[-0.80674106 -29.26224518]
[9.06233978 -17.96617317]
[18.93142128 -6.67010212]
[33.13192749 -2.17622638]
[36.38485336 13.30695915]
[46.25393295 24.60303116]
[56.12301636 35.89910507]
[65.99209595 47.19517517]
[72.87566376 50.21071243]
[75.98126984 58.97996140]
[85.50801086 70.56621552]
[97.83406830 67.26356506]
[110.48780060 68.91348267]
[121.55487061 75.26636505]
[129.36099243 85.36109924]
[132.72520447 97.67050171]
[131.13853455 110.33232117]
[124.84104156 121.43099976]
[133.65782166 133.56625366]
[142.47460938 145.70150757]
[148.58755493 148.85691833]
[151.61181641 153.91331482]
[151.42996216 158.83660889]
[159.50521851 171.47743225]
[167.58047485 184.11824036]
[175.65574646 196.75906372]
[183.73100281 209.39987183]
[191.80625916 222.04067993]
[199.88151550 234.68150330]
[207.95677185 247.32231140]
[230.28926086 255.69882202]
[232.13505554 278.78933716]
[242.33764648 289.78509521]
[252.54023743 300.78088379]
[267.84991455 299.07223511]
[281.07556152 306.61782837]
[287.24902344 320.34197998]
[284.19396973 334.89547729]
[294.39654541 345.89126587]
[304.59915161 356.88705444]
[320.42068481 361.20111084]
[324.33312988 377.12670898]
[312.31170654 388.28094482]
[296.72302246 383.18933105]
[293.60336304 367.08963013]
[283.40078735 356.09387207]
[273.19818115 345.09808350]
[258.45706177 347.05700684]
[245.23265076 339.87518311]
[238.69648743 326.12268066]
[241.54444885 310.98345947]
[231.34185791 299.98770142]
[221.13926697 288.99191284]
[214.37890625 290.69384766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 80]
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 70]
[15 69]
[16 68]
[21 61]
[22 60]
[23 58]
[24 57]
[25 56]
[26 55]
[28 53]
[29 52]
[30 51]
[31 49]
[32 48]
[37 45]
[38 44]
[39 43]
[82 103]
[83 102]
[84 101]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
