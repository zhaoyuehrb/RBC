%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCAGGAGACUACAGCAAACGAGUGUAUCAAGGAGUGAGAGUGAAGCAUACAGUCAAAGAUCUCCUGGCAGAAAAACGAUCCGGGCAGACAAGUAACUCAAGACUUAAUGGCAGCGUCAGUUCCUCUCAGUCUCCAUUUGUGCAG\
) } def
/len { sequence length } bind def

/coor [
[-115.67472076 614.92047119]
[-119.76165009 629.35296631]
[-123.84857941 643.78546143]
[-115.92306519 657.45886230]
[-120.06812286 672.70989990]
[-133.82455444 680.49041748]
[-149.03091431 676.18432617]
[-156.66554260 662.34643555]
[-152.19894409 647.18646240]
[-138.28108215 639.69854736]
[-134.19415283 625.26605225]
[-130.10722351 610.83355713]
[-139.32008362 601.11822510]
[-142.53808594 588.01000977]
[-138.81219482 574.92425537]
[-129.01712036 565.32525635]
[-115.64885712 561.80950928]
[-111.25651550 547.46697998]
[-112.70121002 542.84863281]
[-111.21040344 537.27404785]
[-106.36139679 532.61621094]
[-101.36429596 518.47302246]
[-96.36720276 504.32986450]
[-91.37010956 490.18670654]
[-86.37300873 476.04354858]
[-81.37591553 461.90039062]
[-76.37881470 447.75723267]
[-81.06212616 442.18121338]
[-83.50736237 435.24948120]
[-83.35652161 427.83215332]
[-80.58073425 420.87829590]
[-75.49006653 415.29470825]
[-68.69963837 411.82751465]
[-61.05549622 410.96276855]
[-54.58825302 397.42855835]
[-48.12100601 383.89437866]
[-49.61486435 369.07485962]
[-36.68370819 359.95916748]
[-30.21646500 346.42495728]
[-23.74921989 332.89074707]
[-17.28197670 319.35653687]
[-10.81473160 305.82235718]
[-4.34748745 292.28814697]
[-4.30115080 284.84533691]
[2.40335417 278.53750610]
[9.15641022 265.14364624]
[15.90946674 251.74974060]
[8.70899010 240.46182251]
[8.03855133 226.98106384]
[14.18142986 214.84082031]
[25.62097931 207.27638245]
[39.41361237 206.36300659]
[46.44944000 193.11546326]
[44.28496170 173.94154358]
[61.40179062 163.38034058]
[67.86903381 149.84613037]
[74.33628082 136.31192017]
[80.80352783 122.77771759]
[72.65328979 111.81043243]
[70.25721741 98.35805511]
[74.11949158 85.25115967]
[83.42741394 75.24765778]
[96.22247314 70.45242310]
[98.12773895 55.57391357]
[100.03300476 40.69540787]
[101.78025818 25.79751968]
[103.36929321 10.88192463]
[104.95832825 -4.03366995]
[106.54736328 -18.94926453]
[108.13639832 -33.86486053]
[95.13666534 -41.86296463]
[86.90178680 -54.71401596]
[85.06680298 -69.86643219]
[89.99605560 -84.31167603]
[100.71083069 -95.18164825]
[115.08370972 -100.31810760]
[130.26094055 -98.70119476]
[143.22908020 -90.65196228]
[151.41328430 -77.76857758]
[153.18858337 -62.60906219]
[148.20248413 -48.18333435]
[137.44499207 -37.35564041]
[123.05199432 -32.27582169]
[121.46295929 -17.36022949]
[119.87392426 -2.44463396]
[118.28488922 12.47096062]
[116.69585419 27.38655472]
[119.13166046 34.41964722]
[114.91151428 42.60067749]
[113.00624847 57.47918320]
[111.10098267 72.35768890]
[117.45779419 75.86383057]
[122.77771759 80.80352783]
[136.31192017 74.33628082]
[149.84613037 67.86903381]
[163.38034058 61.40179062]
[166.06477356 46.11868286]
[177.24308777 35.35648346]
[192.61698914 33.25348282]
[206.27490234 40.61832428]
[212.96508789 54.61907578]
[210.11502075 69.87216949]
[198.82061768 80.51246643]
[183.42480469 82.44857025]
[169.84757996 74.93599701]
[156.31336975 81.40324402]
[142.77917480 87.87048340]
[129.24496460 94.33773041]
[126.69367218 113.22032928]
[113.22032928 126.69367218]
[94.33773041 129.24496460]
[87.87048340 142.77917480]
[81.40324402 156.31336975]
[74.93599701 169.84757996]
[79.17337799 179.95980835]
[77.14842224 190.51094055]
[69.77716064 198.02114868]
[59.69697189 200.15129089]
[52.66114807 213.39881897]
[60.28691101 228.45954895]
[57.48639297 244.93879700]
[45.55253220 256.40518188]
[29.30335426 258.50280762]
[22.55029869 271.89669800]
[15.79724216 285.29058838]
[9.18671894 298.75537109]
[2.71947503 312.28958130]
[-3.74776959 325.82379150]
[-10.21501350 339.35800171]
[-16.68225861 352.89221191]
[-23.14950180 366.42642212]
[-22.11822701 382.21398926]
[-34.58679962 390.36160278]
[-41.05404663 403.89581299]
[-47.52128983 417.43002319]
[-43.57971954 440.27047729]
[-62.23565292 452.75433350]
[-67.23274994 466.89749146]
[-72.22985077 481.04064941]
[-77.22694397 495.18380737]
[-82.22404480 509.32696533]
[-87.22113800 523.47015381]
[-92.21823120 537.61328125]
[-96.91400909 551.85931396]
[-101.30635071 566.20184326]
[-90.95955658 579.54052734]
[-90.57999420 596.25177002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[17 145]
[18 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[34 135]
[35 134]
[36 133]
[38 131]
[39 130]
[40 129]
[41 128]
[42 127]
[43 126]
[45 125]
[46 124]
[47 123]
[52 119]
[53 118]
[55 114]
[56 113]
[57 112]
[58 111]
[63 91]
[64 90]
[65 89]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
