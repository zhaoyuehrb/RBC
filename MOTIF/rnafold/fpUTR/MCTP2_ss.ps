%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCAUUGCAGUUUUCAGUAGAGGUGUACUUCUGAGAAGUGGCUUCUUGGGUCUUCAUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[83.57849884 263.40167236]
[68.22208405 264.87951660]
[54.51493073 257.80010986]
[46.83095551 244.42253113]
[47.62207413 229.01545715]
[56.63585281 216.49526978]
[70.99601746 210.85708618]
[73.83478546 196.12814331]
[76.67355347 181.39921570]
[79.51232910 166.67028809]
[82.35109711 151.94136047]
[68.59546661 144.97937012]
[57.32022095 134.46484375]
[49.41589355 121.22821045]
[45.50679016 106.31494904]
[45.90164948 90.90291595]
[50.56928635 76.20938873]
[59.14104843 63.39488220]
[70.93991852 53.47151184]
[85.03400421 47.22304153]
[100.31012726 45.14298248]
[102.44484711 30.29566002]
[104.57956696 15.44833851]
[106.71429443 0.60101700]
[108.84901428 -14.24630451]
[110.98373413 -29.09362602]
[109.06990814 -38.40117645]
[113.58957672 -44.58998871]
[116.42834473 -59.31891632]
[119.26711273 -74.04785156]
[122.10588074 -88.77677917]
[124.94465637 -103.50570679]
[127.78342438 -118.23464203]
[124.84392548 -134.93180847]
[140.07482910 -142.37867737]
[151.44700623 -129.80448914]
[142.51235962 -115.39587402]
[139.67358398 -100.66693878]
[136.83480835 -85.93801117]
[133.99604797 -71.20908356]
[131.15727234 -56.48014832]
[128.31851196 -41.75122070]
[125.83106232 -26.95890427]
[123.69633484 -12.11158180]
[121.56161499 2.73573947]
[119.42688751 17.58306122]
[117.29216766 32.43038177]
[115.15744781 47.27770615]
[128.43637085 53.08772278]
[139.73013306 62.17269897]
[148.25033569 73.89840698]
[153.40217590 87.44627380]
[154.82598877 101.87052155]
[152.42239380 116.16418457]
[146.35917664 129.32942200]
[137.05961609 140.44715881]
[125.17292023 148.74128723]
[111.52888489 153.63276672]
[97.08002472 154.78012085]
[94.24125671 169.50906372]
[91.40248871 184.23799133]
[88.56372070 198.96691895]
[85.72495270 213.69584656]
[96.96096802 224.26728821]
[100.67578125 239.24072266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
