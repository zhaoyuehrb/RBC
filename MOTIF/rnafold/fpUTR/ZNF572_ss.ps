%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCUGCCUUCCGGGUUUGAGAGUUUAGGACCCUGGGUUGGUGGGGUCAGAGGGAGAGGGGGUACCUUCCUCCCGGACCGCUGGGGGUGCAGGGCGCCUUGGGUGUAGCACCCAGAACAGGUUUCUGAUCUCUAACUUGGCUGUGAUCAUUGUG\
) } def
/len { sequence length } bind def

/coor [
[85.77454376 682.46221924]
[73.45169067 673.79644775]
[63.36649323 662.60559082]
[56.02481842 649.45080566]
[51.79492188 634.99206543]
[50.88897705 619.95452881]
[53.35242081 605.09252930]
[59.06169510 591.15148926]
[67.73041534 578.83074951]
[78.92377472 568.74829102]
[92.08030701 561.40979004]
[106.54008484 557.18341064]
[105.63441467 542.21075439]
[104.72873688 527.23809814]
[103.82305908 512.26550293]
[102.91738129 497.29284668]
[102.01170349 482.32022095]
[101.10602570 467.34759521]
[98.14527130 463.53378296]
[97.58738708 457.80548096]
[100.47770691 451.75613403]
[100.17565155 436.75918579]
[99.87359619 421.76220703]
[99.57154083 406.76525879]
[91.57952118 394.19638062]
[99.03736115 380.24319458]
[98.73529816 365.24624634]
[98.43324280 350.24926758]
[98.13118744 335.25231934]
[97.82913208 320.25537109]
[97.52707672 305.25839233]
[89.53505707 292.68951416]
[96.99289703 278.73632812]
[96.69084167 263.73937988]
[96.38877869 248.74241638]
[96.08672333 233.74545288]
[85.20024872 223.64495850]
[84.68029022 208.44020081]
[95.34844208 197.08995056]
[95.04638672 182.09300232]
[94.74433136 167.09603882]
[94.44227600 152.09907532]
[93.98922729 137.10592651]
[93.38523865 122.11808777]
[73.82189941 105.57202911]
[80.15524292 76.91397095]
[71.63426971 64.56921387]
[63.11330032 52.22445297]
[54.59232712 39.87969589]
[43.72715759 38.52593994]
[35.58907318 31.53449249]
[32.73332596 21.42138481]
[35.87814713 11.62552071]
[27.86115837 -1.05233085]
[19.84417152 -13.73018169]
[11.82718372 -26.40803337]
[3.81019616 -39.08588409]
[-4.33403826 -51.68236923]
[-12.60469437 -64.19621277]
[-20.87535095 -76.71005249]
[-29.14600754 -89.22389984]
[-44.05102158 -96.06295013]
[-45.31112671 -112.41361237]
[-31.63003731 -121.45572662]
[-17.08168411 -113.88753510]
[-16.63216591 -97.49455261]
[-8.36150932 -84.98071289]
[-0.09085272 -72.46686554]
[8.17980385 -59.95302582]
[14.52798748 -56.08466339]
[16.48804665 -47.10287094]
[24.50503540 -34.42502213]
[32.52202225 -21.74716949]
[40.53900909 -9.06931782]
[48.55599594 3.60853314]
[66.28236389 11.24866390]
[66.93708801 31.35872459]
[75.45806122 43.70348358]
[83.97902679 56.04824066]
[92.50000000 68.39299774]
[107.50000000 68.39299774]
[116.02097321 56.04824066]
[124.54193878 43.70348358]
[126.01366425 27.95087624]
[139.61125183 21.87182426]
[148.13221741 9.52706528]
[156.65319824 -2.81769252]
[165.17416382 -15.16245079]
[173.69512939 -27.50720787]
[182.21611023 -39.85196686]
[190.73707581 -52.19672394]
[194.75868225 -68.66678619]
[211.69839478 -69.36170959]
[217.05552673 -53.27639008]
[203.08183289 -43.67575455]
[194.56086731 -31.33099556]
[186.03988647 -18.98623657]
[177.51892090 -6.64147949]
[168.99795532 5.70327854]
[160.47697449 18.04803658]
[151.95600891 30.39279366]
[151.09376526 45.26242065]
[136.88670349 52.22445297]
[128.36572266 64.56921387]
[119.84475708 76.91397095]
[126.10410309 87.43289948]
[127.48182678 98.99383545]
[124.21541595 109.54537201]
[117.32708740 117.40229034]
[108.37307739 121.51409912]
[108.97706604 136.50193787]
[112.46620941 145.00724792]
[109.43923187 151.79702759]
[109.74128723 166.79397583]
[110.04334259 181.79093933]
[110.34539795 196.78790283]
[121.46193695 207.69938660]
[121.55462646 222.91273499]
[111.08368683 233.44340515]
[111.38574219 248.44036865]
[111.68779755 263.43731689]
[111.98985291 278.43426514]
[120.00347900 292.07583618]
[112.52404022 304.95632935]
[112.82609558 319.95330811]
[113.12815094 334.95025635]
[113.43020630 349.94720459]
[113.73226166 364.94418335]
[114.03431702 379.94113159]
[122.04794312 393.58270264]
[114.56849670 406.46319580]
[114.87055969 421.46017456]
[115.17261505 436.45712280]
[115.47467041 451.45407104]
[116.07865906 466.44192505]
[116.98433685 481.41455078]
[117.89001465 496.38717651]
[118.79569244 511.35980225]
[119.70137024 526.33245850]
[120.60704803 541.30505371]
[121.51271820 556.27770996]
[136.37651062 558.73034668]
[150.32167053 564.42950439]
[162.64872742 573.08923340]
[172.73934937 584.27526855]
[180.08740234 597.42645264]
[184.32429504 611.88317871]
[185.23753357 626.92028809]
[182.78129578 641.78344727]
[177.07876587 655.72723389]
[168.41601562 668.05218506]
[157.22755432 678.14007568]
[144.07458496 685.48498535]
[129.61685181 689.71838379]
[114.57954407 690.62792969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[21 134]
[22 133]
[23 132]
[24 131]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[33 122]
[34 121]
[35 120]
[36 119]
[39 116]
[40 115]
[41 114]
[42 113]
[43 111]
[44 110]
[46 80]
[47 79]
[48 78]
[49 77]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 69]
[59 68]
[60 67]
[61 66]
[81 105]
[82 104]
[83 103]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
