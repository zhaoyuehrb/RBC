%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCGGCGGGGGCGCCGCGGAGAGCGGAGGGCGCCGGGCUGCGGAACGCGAAGCGGAGGGCGCGGGACCCUGCACGCCGCCCGCGGGCCCAUGUGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[148.80381775 297.76879883]
[160.07659912 287.60568237]
[154.70820618 273.59924316]
[149.33979797 259.59280396]
[143.97140503 245.58636475]
[138.60299683 231.57992554]
[133.17794800 226.37237549]
[133.29162598 217.06361389]
[128.35285950 202.89997864]
[123.41410065 188.73632812]
[118.47534180 174.57269287]
[113.32115936 160.48602295]
[107.95275879 146.47958374]
[102.58436584 132.47314453]
[97.21596527 118.46670532]
[83.96697998 111.43361664]
[69.35774231 114.83511353]
[54.74850845 118.23661804]
[40.13927078 121.63812256]
[30.47643280 134.44473267]
[14.43592930 134.73074341]
[4.32266188 122.27677917]
[7.89466429 106.63643646]
[22.41180229 99.80764771]
[36.73776627 107.02888489]
[51.34700394 103.62738037]
[65.95623779 100.22588348]
[80.56547546 96.82437897]
[89.52964783 84.79759216]
[88.61518860 69.82549286]
[87.70072937 54.85339355]
[86.78627014 39.88129425]
[75.23326111 29.43305016]
[74.51915741 14.23618603]
[84.55115509 3.28654718]
[83.63669586 -11.68555260]
[82.72223663 -26.65765190]
[74.15801239 -39.96046066]
[81.10501862 -53.13575363]
[80.19055176 -68.10785675]
[79.27609253 -83.07995605]
[68.42412567 -87.59197235]
[60.13592911 -95.85101318]
[55.62588882 -106.59127808]
[55.53361511 -118.18776703]
[59.83350754 -128.90208435]
[67.84450531 -137.14305115]
[78.33763885 -141.70300293]
[78.79508209 -156.69602966]
[79.25252533 -171.68904114]
[73.69203186 -187.70520020]
[87.54297638 -197.48210144]
[100.77210999 -186.87898254]
[94.24555206 -171.23159790]
[93.78810883 -156.23858643]
[93.33066559 -141.24555969]
[108.67679596 -130.89002991]
[114.91949463 -113.30523682]
[109.45288086 -95.31049347]
[94.24819183 -83.99441528]
[95.16265869 -69.02231598]
[96.07711792 -54.05021286]
[104.57592773 -41.81830978]
[97.69433594 -27.57211113]
[98.60879517 -12.60001183]
[99.52325439 2.37208748]
[110.81326294 12.01942921]
[111.95394135 27.19024086]
[101.75836945 38.96683121]
[102.67282867 53.93893051]
[103.58728790 68.91103363]
[104.50174713 83.88313293]
[112.24316406 88.40488434]
[116.58887482 96.32486725]
[116.23890686 105.42069244]
[111.22239685 113.09831238]
[116.59079742 127.10474396]
[121.95919800 141.11119080]
[127.32759857 155.11761475]
[133.42211914 162.15487671]
[132.63897705 169.63394165]
[137.57774353 183.79757690]
[142.51649475 197.96121216]
[147.45526123 212.12484741]
[152.60943604 226.21153259]
[157.97784424 240.21795654]
[163.34623718 254.22439575]
[168.71464539 268.23083496]
[174.08303833 282.23727417]
[189.26077271 282.26239014]
[203.40310669 287.77230835]
[214.59738159 298.02182007]
[221.32966614 311.62478638]
[222.68949890 326.74151611]
[218.49295044 341.32757568]
[209.30757141 353.41033936]
[196.37561035 361.35571289]
[181.44601440 364.08914185]
[166.53788757 361.24096680]
[153.66741943 353.19635010]
[144.57525635 341.04330444]
[140.49102783 326.42538452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 79]
[13 78]
[14 77]
[15 76]
[16 28]
[17 27]
[18 26]
[19 25]
[29 72]
[30 71]
[31 70]
[32 69]
[35 66]
[36 65]
[37 64]
[39 62]
[40 61]
[41 60]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
