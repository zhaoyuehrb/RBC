%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:47:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGUGGGGGCGGGGACUGCUGGAGUUGCGGGGCCUGCCUGGGGUAGGGCGGGGCAGGACAGCUUGGAGAUAGGGCCCGGAAUUGCGGGCGUCACUCUGCUCCUGCGACCUAGCCAGGCGUGAGGGAGUGACAGCAGCGCAUUCGCGGGACGAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[102.38938141 899.11187744]
[98.14762878 884.45001221]
[100.69594574 869.40118408]
[109.52837372 856.95324707]
[122.89122009 849.57781982]
[122.00815582 834.60382080]
[110.12183380 828.46191406]
[102.77462769 817.15093994]
[101.98275757 803.57781982]
[108.06095886 791.29486084]
[119.51187134 783.56976318]
[118.92297363 768.58135986]
[118.33407593 753.59289551]
[117.74517822 738.60449219]
[117.15628052 723.61602783]
[106.54302979 716.25640869]
[102.05472565 703.93841553]
[105.54767609 691.09997559]
[115.95860291 682.50555420]
[115.66410065 667.50842285]
[115.36959839 652.51129150]
[115.07508850 637.51422119]
[114.78058624 622.51708984]
[103.89919281 612.41113281]
[103.38688660 597.20611572]
[114.06075287 585.86120605]
[113.76625061 570.86413574]
[113.47174835 555.86700439]
[113.17723846 540.86993408]
[112.88273621 525.87280273]
[103.09279633 519.89733887]
[97.36447906 509.82229614]
[97.23353577 498.11315918]
[102.84918976 487.70089722]
[112.90763855 481.24826050]
[113.20214844 466.25112915]
[113.49665070 451.25402832]
[113.34939575 436.25476074]
[112.76049805 421.26632690]
[112.17160034 406.27789307]
[111.58270264 391.28945923]
[110.99380493 376.30102539]
[110.40490723 361.31256104]
[101.72107697 352.84472656]
[101.13718414 340.32781982]
[109.51442719 330.47592163]
[109.21991730 315.47882080]
[108.92541504 300.48171997]
[108.63090515 285.48461914]
[108.04200745 270.49615479]
[107.15895081 255.52218628]
[106.27588654 240.54820251]
[105.39282227 225.57421875]
[104.50975800 210.60023499]
[103.47973633 195.63563538]
[102.30284882 180.68188477]
[101.12596130 165.72811890]
[99.94908142 150.77435303]
[98.33234406 135.86174011]
[96.27715302 121.00320435]
[94.22196960 106.14466095]
[84.88135529 108.19876862]
[74.44605255 104.58875275]
[65.62061310 95.10070801]
[59.60937881 81.35788727]
[53.59814835 67.61507416]
[47.58691406 53.87225342]
[34.06938553 44.58739853]
[35.62111664 28.26183128]
[50.64581680 21.68989182]
[63.68736649 31.63222885]
[61.32973480 47.86101913]
[67.34096527 61.60383987]
[73.35219574 75.34665680]
[79.36343384 89.08947754]
[94.22196960 87.03429413]
[96.27715302 72.17575073]
[98.33234406 57.31721115]
[100.38752747 42.45867157]
[102.44271088 27.60013199]
[92.70530701 15.15190125]
[94.70504761 -0.52536136]
[107.25553131 -10.13061428]
[122.91077423 -7.96523190]
[132.38279724 4.68610334]
[130.05201721 20.31757927]
[117.30125427 29.65531731]
[115.24606323 44.51385880]
[113.19087982 59.37239838]
[111.13569641 74.23093414]
[109.08051300 89.08947754]
[109.08051300 104.08947754]
[111.13569641 118.94802094]
[113.19087982 133.80656433]
[116.46517181 138.00448608]
[117.64706421 142.58213806]
[116.94874573 146.66580200]
[114.90283966 149.59747314]
[116.07972717 164.55123901]
[117.25661469 179.50498962]
[118.43349457 194.45875549]
[122.24363708 202.81900024]
[119.48374939 209.71717834]
[120.36680603 224.69116211]
[121.24987030 239.66514587]
[122.13293457 254.63912964]
[123.01599121 269.61309814]
[126.37045288 275.40762329]
[126.27038574 281.15521240]
[123.62801361 285.19009399]
[123.92252350 300.18719482]
[124.21702576 315.18432617]
[124.51153564 330.18142700]
[134.39903259 345.68740845]
[125.39334106 360.72369385]
[125.98223877 375.71212769]
[126.57113647 390.70056152]
[127.16003418 405.68899536]
[127.74893188 420.67742920]
[128.33782959 435.66586304]
[131.18487549 440.16452026]
[131.91239929 444.83596802]
[130.81716919 448.83151245]
[128.49375916 451.54852295]
[128.19924927 466.54565430]
[127.90474701 481.54275513]
[141.54115295 494.63583374]
[141.33502197 513.22119141]
[127.87984467 525.57830811]
[128.17434692 540.57537842]
[128.46885681 555.57250977]
[128.76335144 570.56964111]
[129.05786133 585.56671143]
[140.16889954 596.48382568]
[140.25393677 611.69720459]
[129.77769470 622.22259521]
[130.07220459 637.21972656]
[130.36669922 652.21679688]
[130.66120911 667.21392822]
[130.95571899 682.21105957]
[143.77749634 694.07501221]
[144.07218933 711.20397949]
[132.14471436 723.02716064]
[132.73361206 738.01556396]
[133.32250977 753.00402832]
[133.91140747 767.99243164]
[134.50030518 782.98089600]
[148.67564392 792.16339111]
[154.54446411 807.82354736]
[149.98670959 823.74182129]
[136.98214722 833.72076416]
[137.86520386 848.69470215]
[152.00231934 854.44842529]
[162.23661804 865.77191162]
[166.53607178 880.41699219]
[164.04704285 895.47576904]
[155.26370239 907.95837402]
[141.93000793 915.38641357]
[126.69335938 916.28491211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 152]
[6 151]
[11 147]
[12 146]
[13 145]
[14 144]
[15 143]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[26 133]
[27 132]
[28 131]
[29 130]
[30 129]
[35 126]
[36 125]
[37 124]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[46 113]
[47 112]
[48 111]
[49 110]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[55 101]
[56 100]
[57 99]
[58 98]
[59 94]
[60 93]
[61 92]
[64 75]
[65 74]
[66 73]
[67 72]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
