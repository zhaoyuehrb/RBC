%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:58 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (L3MBTL1)
} def

/sequence { (\
GCAGGCGCGCGGCGCCCGGCUCGGACCGUAGCUAGGCGCUGGGCGGCCACCGGCUGGCCAGGCAGGGGAGGUCAGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 20 0.059695963 ubox
1 47 0.044564317 ubox
1 54 0.013111950 ubox
1 63 0.007965223 ubox
1 76 0.026001835 ubox
2 19 0.059794580 ubox
2 46 0.044681247 ubox
2 53 0.014541127 ubox
2 62 0.007968816 ubox
2 75 0.026223704 ubox
4 16 0.062214654 ubox
4 17 0.007898842 ubox
4 48 0.991504765 ubox
4 51 0.049296366 ubox
4 59 0.007921740 ubox
4 73 0.011201269 ubox
5 15 0.062423717 ubox
5 16 0.006449685 ubox
5 47 0.992182724 ubox
5 50 0.049098807 ubox
5 58 0.007918806 ubox
5 72 0.010658884 ubox
5 76 0.008915317 ubox
6 14 0.062592948 ubox
6 45 0.706501947 ubox
6 46 0.703267041 ubox
6 57 0.007876358 ubox
6 71 0.010513578 ubox
6 75 0.008998680 ubox
7 13 0.062582264 ubox
7 15 0.004515653 ubox
7 44 0.995403005 ubox
8 12 0.062127831 ubox
8 14 0.004515923 ubox
8 43 0.996918072 ubox
8 45 0.042427139 ubox
9 13 0.004225050 ubox
9 44 0.042525093 ubox
10 41 0.996530983 ubox
10 43 0.040903854 ubox
11 40 0.997141358 ubox
12 39 0.998017044 ubox
13 38 0.998009578 ubox
14 37 0.998009429 ubox
15 36 0.997839292 ubox
16 35 0.996911854 ubox
16 36 0.019131041 ubox
17 28 0.014643322 ubox
17 35 0.027030648 ubox
18 27 0.014678118 ubox
18 33 0.978949019 ubox
19 26 0.014622465 ubox
19 32 0.997889288 ubox
19 76 0.016751816 ubox
20 31 0.997886421 ubox
20 75 0.016979776 ubox
21 30 0.983808688 ubox
21 74 0.015893067 ubox
22 28 0.930980681 ubox
23 27 0.871597760 ubox
23 73 0.004675765 ubox
24 73 0.062468465 ubox
25 72 0.062691793 ubox
26 71 0.062758329 ubox
27 70 0.062739892 ubox
32 65 0.018995496 ubox
32 66 0.039803615 ubox
32 67 0.043574540 ubox
33 64 0.017615614 ubox
33 65 0.039373143 ubox
33 66 0.042763730 ubox
36 63 0.062614433 ubox
37 62 0.062612105 ubox
39 61 0.062642033 ubox
40 60 0.062744152 ubox
41 59 0.062767455 ubox
42 58 0.062758615 ubox
44 56 0.062786711 ubox
45 51 0.006286116 ubox
45 55 0.063213489 ubox
45 59 0.011596424 ubox
45 73 0.038038749 ubox
46 50 0.006427033 ubox
46 54 0.063856244 ubox
46 58 0.011793756 ubox
46 72 0.045588622 ubox
47 53 0.063995321 ubox
47 57 0.011798852 ubox
47 68 0.011585820 ubox
47 71 0.046124129 ubox
48 52 0.063640116 ubox
48 56 0.011798173 ubox
48 67 0.011644693 ubox
48 70 0.046078079 ubox
49 55 0.010918280 ubox
49 72 0.029591313 ubox
50 66 0.027429968 ubox
50 67 0.031643697 ubox
50 68 0.035388598 ubox
50 71 0.031622420 ubox
51 65 0.027462112 ubox
51 66 0.031576166 ubox
51 67 0.035417659 ubox
51 70 0.031629604 ubox
52 73 0.068639769 ubox
53 63 0.041895417 ubox
53 72 0.068978702 ubox
53 76 0.981799222 ubox
54 62 0.041958095 ubox
54 65 0.045229179 ubox
54 66 0.008212864 ubox
54 67 0.010578794 ubox
54 68 0.003176291 ubox
54 71 0.069012003 ubox
54 75 0.993191219 ubox
55 61 0.041446417 ubox
55 64 0.045319593 ubox
55 65 0.007490696 ubox
55 66 0.010249989 ubox
55 70 0.068533234 ubox
55 74 0.993210663 ubox
56 63 0.045013728 ubox
56 73 0.993429353 ubox
57 63 0.014283459 ubox
57 72 0.993153590 ubox
58 62 0.015207652 ubox
58 66 0.023845418 ubox
58 67 0.065138435 ubox
58 68 0.014993549 ubox
58 71 0.993363142 ubox
59 65 0.024515746 ubox
59 66 0.065574827 ubox
59 67 0.016533304 ubox
59 70 0.992544065 ubox
61 73 0.006754464 ubox
62 72 0.006826346 ubox
63 71 0.006836301 ubox
66 73 0.003313699 ubox
67 73 0.003344230 ubox
4 48 0.9500000 lbox
5 47 0.9500000 lbox
6 46 0.9500000 lbox
7 44 0.9500000 lbox
8 43 0.9500000 lbox
10 41 0.9500000 lbox
11 40 0.9500000 lbox
12 39 0.9500000 lbox
13 38 0.9500000 lbox
14 37 0.9500000 lbox
15 36 0.9500000 lbox
16 35 0.9500000 lbox
18 33 0.9500000 lbox
19 32 0.9500000 lbox
20 31 0.9500000 lbox
21 30 0.9500000 lbox
22 28 0.9500000 lbox
23 27 0.9500000 lbox
53 76 0.9500000 lbox
54 75 0.9500000 lbox
55 74 0.9500000 lbox
56 73 0.9500000 lbox
57 72 0.9500000 lbox
58 71 0.9500000 lbox
59 70 0.9500000 lbox
showpage
end
%%EOF
