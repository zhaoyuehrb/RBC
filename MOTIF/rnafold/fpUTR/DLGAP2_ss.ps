%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCCGCGAGCCCCGGGAGCCGUCGGUCUGAGGAGGGGCCGCUUCGCCAUGUCGCCCCGCACCUGCUGAGCCCGGAGCGUCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[95.83007050 246.25410461]
[82.93205261 255.38737488]
[67.36786652 252.64299011]
[58.37146378 239.64913940]
[61.28025055 224.11483765]
[74.36849976 215.25631714]
[76.97322083 200.48419189]
[79.31973267 185.66886902]
[81.40733337 170.81484985]
[79.17160034 163.59642029]
[83.83575439 155.48240662]
[86.44047546 140.71028137]
[88.78699493 125.89495850]
[90.87458801 111.04093933]
[85.81545258 98.00649261]
[94.27138519 86.87146759]
[96.35898590 72.01744843]
[98.44657898 57.16342545]
[100.53417969 42.30940247]
[102.62177277 27.45538139]
[96.08030701 21.51348305]
[92.58682251 13.50030041]
[92.68322754 4.85489273]
[96.27423859 -2.90475678]
[102.65785217 -8.44826984]
[110.66111755 -10.86083984]
[114.79567719 -25.27976608]
[118.93023682 -39.69869232]
[123.06479645 -54.11761475]
[127.19936371 -68.53654480]
[125.80155182 -74.02949524]
[126.71292114 -78.95522308]
[129.27699280 -82.48539734]
[132.59405518 -84.20385742]
[138.21315002 -98.11161804]
[143.83224487 -112.01937103]
[139.94204712 -131.64830017]
[155.25631714 -143.23684692]
[159.89157104 -157.50270081]
[164.52682495 -171.76853943]
[169.16207886 -186.03439331]
[173.79733276 -200.30023193]
[170.70321655 -215.81593323]
[181.99476624 -225.52934265]
[186.63002014 -239.79518127]
[177.40071106 -252.26913452]
[177.29971313 -267.78588867]
[186.36585999 -280.37890625]
[201.11303711 -285.20596313]
[215.87065125 -280.41091919]
[224.96409607 -267.83758545]
[224.89675903 -252.32066345]
[215.69453430 -239.82672119]
[200.89585876 -235.15992737]
[196.26060486 -220.89408875]
[199.68627930 -206.39877319]
[188.06317139 -195.66497803]
[183.42791748 -181.39913940]
[178.79266357 -167.13328552]
[174.15740967 -152.86744690]
[169.52215576 -138.60159302]
[175.07089233 -129.70520020]
[174.67895508 -119.00508881]
[168.23217773 -110.17922974]
[157.74000549 -106.40027618]
[152.12091064 -92.49251556]
[146.50180054 -78.58476257]
[141.61828613 -64.40198517]
[137.48371887 -49.98305511]
[133.34916687 -35.56412888]
[129.21459961 -21.14520454]
[125.08004761 -6.72627974]
[132.82325745 13.38691998]
[117.47579193 29.54297829]
[115.38819885 44.39699936]
[113.30060577 59.25102234]
[111.21300507 74.10504150]
[109.12541199 88.95906067]
[114.18454742 101.99350739]
[105.72861481 113.12853241]
[103.64101410 127.98255157]
[105.56951904 137.14074707]
[101.21259308 143.31500244]
[98.60787201 158.08712769]
[96.26135254 172.90245056]
[94.17375946 187.75646973]
[96.10226440 196.91465759]
[91.74533844 203.08891296]
[89.14060974 217.86103821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 89]
[7 88]
[8 86]
[9 85]
[11 84]
[12 83]
[13 81]
[14 80]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[34 67]
[35 66]
[36 65]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
