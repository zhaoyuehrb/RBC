%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGCGGCGAGAGCGGGUAUGUGGGCGGGAGGCCGGAGCAGCUGUCAGGCUGAAGUCCUGCGAGCGACGCGCGGCGGGGCGGCGAGAGGAAACGCGGCGCCGGGCCGGGCCCGGCCCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[42.34481430 252.81065369]
[30.55367470 250.81030273]
[22.67605591 263.57522583]
[14.79843616 276.34011841]
[6.92081690 289.10504150]
[-0.95680237 301.86996460]
[-8.83442211 314.63488770]
[-3.74772453 329.42202759]
[-9.40430450 344.00067139]
[-23.13329887 351.48724365]
[-38.45229340 348.34680176]
[-48.12813187 336.06216431]
[-47.59217453 320.43377686]
[-37.09748840 308.84088135]
[-21.59933853 306.75726318]
[-13.72171974 293.99234009]
[-5.84410000 281.22741699]
[2.03351927 268.46252441]
[9.91113853 255.69760132]
[17.78875732 242.93267822]
[8.47357750 227.53425598]
[8.15852165 209.45632935]
[17.01328468 193.59614563]
[32.71204758 184.29261780]
[51.04378891 184.13932800]
[57.93748856 170.81727600]
[64.83118439 157.49523926]
[71.72488403 144.17318726]
[70.70230103 129.31372070]
[83.91635895 120.61319733]
[90.81005859 107.29114532]
[86.44088745 104.30956268]
[83.30146027 99.07700348]
[82.43563843 92.19467926]
[72.72980499 80.75804138]
[57.90107346 75.24266815]
[55.56505966 60.53239059]
[45.85922241 49.09575272]
[36.15338135 37.65911484]
[16.92377090 31.86296654]
[14.02498531 12.81199455]
[3.75677896 1.87746549]
[-6.51142788 -9.05706406]
[-16.77963448 -19.99159241]
[-27.04784012 -30.92612267]
[-42.89490891 -35.14542389]
[-46.90258789 -51.04732895]
[-34.94812393 -62.27331924]
[-19.32924271 -57.27505875]
[-16.11331177 -41.19432831]
[-5.84510469 -30.25979996]
[4.42310190 -19.32526970]
[14.69130802 -8.39074135]
[24.95951462 2.54378843]
[35.29766846 1.95598233]
[44.41233063 7.31986856]
[49.11054993 17.04088402]
[47.59001923 27.95327568]
[57.29586029 39.38991547]
[67.00170135 50.82655334]
[81.13619995 55.52389908]
[84.16644287 71.05220032]
[93.87227631 82.48883820]
[88.61816406 68.43913269]
[93.06365204 54.11301804]
[105.34838867 45.50574112]
[120.33140564 46.21930313]
[131.74255371 55.95509720]
[134.80645752 70.63884735]
[128.24092102 84.12564087]
[114.79225159 90.77164459]
[129.69642639 89.07879639]
[142.53521729 79.83348846]
[156.05438232 86.08500671]
[170.95855713 84.39215851]
[185.86273193 82.69931793]
[200.76689148 81.00646973]
[215.62382507 78.93961334]
[230.42410278 76.50005341]
[242.78216553 66.62135315]
[256.59835815 72.18570709]
[271.39865112 69.74614716]
[283.75671387 59.86744308]
[297.57290649 65.43180084]
[312.37319946 62.99224472]
[327.17349243 60.55268860]
[334.01046753 46.62302399]
[347.74502563 39.40213776]
[363.09597778 41.66660690]
[374.16055298 52.54570007]
[376.68420410 67.85617828]
[369.69653320 81.71085358]
[355.88446045 88.78232574]
[340.55895996 86.35145569]
[329.61303711 75.35297394]
[314.81274414 77.79253387]
[300.01248169 80.23209381]
[288.71301270 89.93630219]
[273.83819580 84.54644012]
[259.03793335 86.98600006]
[247.73847961 96.69020844]
[232.86366272 91.30034637]
[218.06336975 93.73990631]
[214.54757690 97.12171173]
[208.83468628 98.25803375]
[202.45974731 95.91063690]
[187.55557251 97.60348511]
[172.65139771 99.29633331]
[157.74723816 100.98917389]
[145.97447205 110.11339569]
[131.38926697 103.98296356]
[116.48509216 105.67581177]
[104.13211060 114.18484497]
[97.23841095 127.50689697]
[97.76790619 143.31924438]
[85.04692841 151.06687927]
[78.15322876 164.38893127]
[71.25953674 177.71098328]
[64.36583710 191.03302002]
[72.20022583 200.39006042]
[76.36231232 211.82504272]
[76.37549591 223.95904541]
[72.26199341 235.33744812]
[64.53728485 244.60432434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[25 119]
[26 118]
[27 117]
[28 116]
[30 114]
[31 113]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[71 112]
[72 111]
[74 109]
[75 108]
[76 107]
[77 106]
[78 103]
[79 102]
[81 100]
[82 99]
[84 97]
[85 96]
[86 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
