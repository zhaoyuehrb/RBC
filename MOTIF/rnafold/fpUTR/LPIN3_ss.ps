%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGAAGGAGUGGAGCCGUGCUCUCACCCUGUCUUAGAGGACCCGGAAGCGCCAAGUGACUGAGGGCCGAAGACACUCACCUGUGGAGCCUGUGCACGUAGGUAGAGGCGGCGGCUCUGAGUCCAGGAGCUCCAGUGGGCAGCUCCCCAGCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[101.43650818 164.71954346]
[99.36848450 149.86279297]
[91.02900696 150.18145752]
[82.57359314 149.08569336]
[74.24504852 146.54737854]
[66.29199219 142.58056641]
[56.49966049 153.94323730]
[46.70732880 165.30589294]
[43.45106888 173.89851379]
[36.60753632 176.79385376]
[26.59262276 187.96084595]
[16.57770729 199.12782288]
[6.67360115 210.39320374]
[-3.11873078 221.75585938]
[-12.91106224 233.11853027]
[-22.70339394 244.48120117]
[-28.46335983 260.42669678]
[-45.38022614 259.30599976]
[-48.98637009 242.74000549]
[-34.06606293 234.68887329]
[-24.27373123 223.32620239]
[-14.48139954 211.96353149]
[-4.68906784 200.60086060]
[-2.69406748 193.44287109]
[5.41072512 189.11289978]
[15.42564011 177.94592285]
[25.44055367 166.77894592]
[35.34466171 155.51356506]
[45.13699341 144.15089417]
[54.92932510 132.78822327]
[47.81756592 119.58130646]
[32.94110107 121.50246429]
[18.06464005 123.42362213]
[3.18817663 125.34477234]
[-9.51133060 135.72044373]
[-24.74872398 129.65794373]
[-26.84908104 113.39385986]
[-13.65173149 103.65927887]
[1.26701975 110.46831512]
[16.14348221 108.54715729]
[31.01994705 106.62599945]
[45.89640808 104.70484161]
[47.17750931 99.27674103]
[48.98690414 94.15274811]
[51.27662277 89.38259888]
[37.26761246 84.02091980]
[22.09083366 89.22138977]
[8.64036751 80.47698975]
[7.23426056 64.49568176]
[18.95115852 53.53694534]
[34.80286026 56.00739288]
[42.62929535 70.01190948]
[56.63830566 75.37358856]
[64.69330597 64.78446198]
[75.26157379 56.70211792]
[87.59081268 51.70187759]
[100.80339050 50.13968277]
[113.95877838 52.12673950]
[120.27565765 38.52170563]
[126.59254456 24.91666794]
[132.90942383 11.31163120]
[131.70327759 -4.46353197]
[144.08081055 -12.74882507]
[150.39768982 -26.35386086]
[156.71456909 -39.95889664]
[163.03144836 -53.56393433]
[169.34832764 -67.16896820]
[175.66520691 -80.77400208]
[181.98208618 -94.37904358]
[172.82962036 -102.32937622]
[167.27729797 -114.10323334]
[166.89628601 -128.01127625]
[172.45202637 -141.74043274]
[183.66981506 -152.73796082]
[183.66981506 -167.73796082]
[183.66981506 -182.73796082]
[172.31866455 -193.73464966]
[172.15158081 -209.53805542]
[183.26766968 -220.77229309]
[199.07196045 -220.77229309]
[210.18803406 -209.53805542]
[210.02095032 -193.73464966]
[198.66981506 -182.73796082]
[198.66981506 -167.73796082]
[198.66981506 -152.73796082]
[205.64749146 -149.98805237]
[219.60284424 -144.48823547]
[226.58052063 -141.73832703]
[236.81411743 -152.70526123]
[247.04769897 -163.67219543]
[257.28128052 -174.63912964]
[261.03933716 -190.00753784]
[275.37936401 -194.03411865]
[285.61294556 -205.00105286]
[295.84652710 -215.96798706]
[295.04974365 -231.75218201]
[305.70928955 -243.42051697]
[321.50100708 -244.05035400]
[333.05599976 -233.26805115]
[333.51885986 -217.47055054]
[322.61499023 -206.03021240]
[306.81344604 -205.73440552]
[296.57986450 -194.76747131]
[286.34628296 -183.80053711]
[283.32022095 -169.21656799]
[268.24822998 -164.40554810]
[258.01464844 -153.43861389]
[247.78105164 -142.47167969]
[237.54745483 -131.50474548]
[234.87145996 -104.87328339]
[217.13845825 -88.46865845]
[195.58712769 -88.06216431]
[189.27024841 -74.45712280]
[182.95336914 -60.85208893]
[176.63648987 -47.24705124]
[170.31961060 -33.64201736]
[164.00271606 -20.03697968]
[157.68583679 -6.43194342]
[159.34381104 8.37009716]
[146.51446533 17.62851334]
[140.19757080 31.23354912]
[133.88069153 44.83858490]
[127.56381226 58.44362259]
[144.08222961 76.68789673]
[149.86305237 100.61054993]
[143.49819946 124.38448334]
[155.33052063 133.60382080]
[167.16282654 142.82316589]
[178.99514771 152.04251099]
[190.82746887 161.26185608]
[202.65977478 170.48120117]
[214.58259583 179.58320618]
[226.59475708 188.56697083]
[242.93392944 189.96821594]
[249.64402771 204.93171692]
[239.82228088 218.06433105]
[223.57244873 215.85633850]
[217.61097717 200.57913208]
[205.59883118 191.59536743]
[198.32008362 190.09974670]
[193.44042969 182.31352234]
[181.60812378 173.09417725]
[169.77580261 163.87483215]
[157.94348145 154.65548706]
[146.11117554 145.43614197]
[134.27885437 136.21679688]
[129.81048584 139.97538757]
[124.93339539 143.18589783]
[119.71446228 145.80432129]
[114.22523499 147.79475403]
[116.29326630 162.65151978]
[130.04728699 169.83529663]
[136.92184448 183.74644470]
[134.27352905 199.03585815]
[123.12066650 209.82443237]
[107.75177002 211.96374512]
[94.07649231 204.63119507]
[87.35324860 190.64628601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[6 30]
[7 29]
[8 28]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[15 21]
[16 20]
[31 42]
[32 41]
[33 40]
[34 39]
[45 53]
[46 52]
[58 123]
[59 122]
[60 121]
[61 120]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[74 85]
[75 84]
[76 83]
[88 109]
[89 108]
[90 107]
[91 106]
[93 104]
[94 103]
[95 102]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
