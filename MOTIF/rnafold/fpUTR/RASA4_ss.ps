%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUCCAGCGCCCGCCGCCCGCCACCCCGGACCCCGGUGUCUGGCUUCCCCCGAGCCGGGACCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[100.81576538 190.11932373]
[89.42338562 200.42025757]
[74.40346527 203.62924194]
[59.79629135 198.88308716]
[49.53112030 187.45846558]
[46.36922455 172.42855835]
[51.16114807 157.83633423]
[62.61788177 147.60702515]
[77.65762329 144.49226379]
[82.29287720 130.22640991]
[86.92813110 115.96056366]
[78.07529449 103.35424042]
[80.16372681 86.97704315]
[93.57245636 75.55220795]
[83.70337677 64.25613403]
[73.83429718 52.96006393]
[63.96521378 41.66399384]
[54.09613037 30.36791992]
[39.06963348 33.22302628]
[24.72627831 28.20655632]
[14.88509083 16.76027298]
[12.11312199 2.02351093]
[17.05641365 -12.02744865]
[7.18733263 -23.32352066]
[-8.65823746 -25.83299065]
[-16.45016861 -39.85673523]
[-10.21115780 -54.63693237]
[5.27275991 -58.83548737]
[18.12364769 -49.23162079]
[18.48340416 -33.19260025]
[28.35248566 -21.89653015]
[42.93983459 -24.90897560]
[57.17113495 -20.18393135]
[67.19281006 -8.89533615]
[70.23852539 5.99158525]
[65.39220428 20.49883842]
[75.26128387 31.79491043]
[85.13036346 43.09098434]
[94.99944305 54.38705444]
[104.86853027 65.68312836]
[118.91204834 70.95375061]
[133.77629089 68.94025421]
[148.64054871 66.92675018]
[163.50479126 64.91325378]
[178.36903381 62.89975357]
[193.23327637 60.88625336]
[208.09753418 58.87275696]
[222.96177673 56.85925674]
[233.78538513 45.01742554]
[249.78178406 46.24012756]
[258.67990112 59.58940506]
[253.65383911 74.82483673]
[238.55920410 80.25910950]
[224.97528076 71.72350311]
[210.11102295 73.73699951]
[195.24678040 75.75050354]
[180.38253784 77.76399994]
[165.51829529 79.77749634]
[150.65403748 81.79100037]
[135.78979492 83.80449677]
[120.92555237 85.81799316]
[123.98162079 95.78645325]
[122.70407867 105.74362946]
[117.63512421 113.95665741]
[109.94852448 119.12752533]
[101.19397736 120.59581757]
[96.55872345 134.86166382]
[91.92346954 149.12751770]
[102.26006317 160.48754883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 68]
[10 67]
[11 66]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[23 31]
[24 30]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
