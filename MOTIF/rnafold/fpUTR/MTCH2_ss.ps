%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCCUGCCGUUUCUCGGGGCGGGACGGGGGGGCGGGGACUGGGCGGAGAGGCGCGUGCUGCUGCGUGCGUGCGCGCGCGCCGCGGGCGGGCCAGUGAAACCGGCGGCCCUGGCACGUGACCUAGGACCGGCUCACCGGGUCGCUUGGUGGCUCCGUCUGUCUGUCCGUCCGCCCGCGGGUGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[115.70243835 888.59942627]
[118.03508759 873.13677979]
[129.79531860 862.82995605]
[129.29936218 847.83813477]
[128.80342102 832.84637451]
[128.30746460 817.85455322]
[127.81151581 802.86279297]
[127.31556702 787.87097168]
[126.81961823 772.87915039]
[126.32366180 757.88739014]
[111.72376251 754.44598389]
[104.58455658 767.63812256]
[107.76570129 783.36260986]
[97.34523010 795.56072998]
[81.31683350 794.87506104]
[71.97612762 781.83160400]
[76.48850250 766.43621826]
[91.39244843 760.49890137]
[98.53166199 747.30682373]
[103.04882050 733.00311279]
[104.78108978 718.10345459]
[106.51335907 703.20385742]
[108.24562836 688.30419922]
[109.97789764 673.40454102]
[111.71016693 658.50494385]
[113.07239532 643.56689453]
[114.06375885 628.59973145]
[115.05511475 613.63250732]
[116.04647064 598.66528320]
[117.03783417 583.69812012]
[118.02919006 568.73089600]
[111.14996338 555.52008057]
[119.78240204 542.26141357]
[120.77376556 527.29425049]
[121.76512146 512.32702637]
[122.75648499 497.35983276]
[123.74784088 482.39260864]
[124.73919678 467.42541504]
[125.73056030 452.45822144]
[126.72191620 437.49099731]
[127.46567535 422.50946045]
[127.96162415 407.51766968]
[128.45758057 392.52584839]
[128.95352173 377.53405762]
[129.44947815 362.54226685]
[129.94541931 347.55047607]
[130.44137573 332.55865479]
[130.93733215 317.56686401]
[131.43327332 302.57507324]
[116.56066132 290.09457397]
[114.56294250 270.51159668]
[126.94300079 254.86274719]
[123.74350739 240.20794678]
[120.54401398 225.55314636]
[117.22347260 210.92529297]
[113.78211212 196.32539368]
[110.34075165 181.72549438]
[106.89939880 167.12559509]
[103.45803833 152.52569580]
[100.01667786 137.92579651]
[96.57531738 123.32589722]
[93.13396454 108.72599792]
[86.54601288 95.25012970]
[77.13836670 83.56697083]
[62.45681763 77.67098236]
[60.50098038 62.90534973]
[51.09333420 51.22219086]
[41.68569183 39.53902817]
[32.27804565 27.85587120]
[22.87039948 16.17271233]
[13.46275425 4.48955250]
[4.05510855 -7.19360685]
[-11.42553234 -12.60487080]
[-14.21329975 -28.76532936]
[-1.44037604 -39.05048752]
[13.75354862 -32.87985611]
[15.73826790 -16.60125160]
[25.14591217 -4.91809320]
[34.55355835 6.76506615]
[43.96120453 18.44822502]
[53.36885071 30.13138390]
[62.77649307 41.81454468]
[72.18414307 53.49770355]
[86.19279480 58.55803299]
[88.82152557 74.15932465]
[98.22917175 85.84248352]
[112.70730591 81.92028809]
[114.93125916 67.08606720]
[117.15521240 52.25185013]
[119.37916565 37.41763306]
[112.34905243 26.58972740]
[114.51844788 14.27042198]
[124.18479156 6.97926092]
[126.65370941 -7.81615877]
[129.12263489 -22.61157799]
[123.76229095 -37.49705124]
[133.48890686 -48.77722168]
[135.95782471 -63.57264328]
[132.60098267 -80.19094086]
[147.64056396 -88.01699829]
[159.32415771 -75.73163605]
[150.75325012 -61.10372162]
[148.28431702 -46.30830383]
[153.82125854 -32.48109818]
[143.91804504 -20.14266014]
[141.44912720 -5.34723997]
[138.98020935 9.44817924]
[146.01490784 25.51714516]
[134.21339417 39.64158630]
[131.98942566 54.47580338]
[129.76547241 69.31002045]
[127.54151917 84.14424133]
[120.55798340 100.79264069]
[107.73385620 105.28463745]
[111.17521667 119.88453674]
[114.61657715 134.48443604]
[118.05793762 149.08433533]
[121.49929810 163.68423462]
[124.94065094 178.28413391]
[128.38201904 192.88403320]
[131.82336426 207.48393250]
[136.84666443 215.13513184]
[135.19882202 222.35363770]
[138.39831543 237.00845337]
[141.59780884 251.66325378]
[146.65989685 252.73283386]
[151.38061523 254.74623108]
[155.58749390 257.61236572]
[159.13029480 261.20935059]
[161.88630676 265.38964844]
[176.48620605 261.94830322]
[191.08610535 258.50692749]
[205.68600464 255.06558228]
[217.25074768 243.43850708]
[233.03097534 247.90132141]
[236.79333496 263.86303711]
[224.66743469 274.90362549]
[209.12736511 269.66546631]
[194.52746582 273.10684204]
[179.92756653 276.54818726]
[165.32766724 279.98956299]
[159.57861328 294.56222534]
[146.42507935 303.07101440]
[145.92912292 318.06280518]
[145.43318176 333.05462646]
[144.93722534 348.04641724]
[144.44126892 363.03820801]
[143.94532776 378.03002930]
[143.44937134 393.02182007]
[142.95343018 408.01361084]
[142.45747375 423.00540161]
[145.24237061 429.03375244]
[144.64164734 434.70770264]
[141.68911743 438.48236084]
[140.69776917 453.44958496]
[139.70640564 468.41677856]
[138.71504211 483.38397217]
[137.72369385 498.35119629]
[136.73233032 513.31842041]
[135.74096680 528.28558350]
[134.74960327 543.25280762]
[141.55793762 557.53417969]
[132.99639893 569.72222900]
[132.00503540 584.68945312]
[131.01367188 599.65667725]
[130.02232361 614.62384033]
[129.03096008 629.59106445]
[128.03959656 644.55828857]
[130.36419678 649.27203369]
[130.61119080 653.93743896]
[129.14994812 657.76739502]
[126.60980225 660.23718262]
[124.87753296 675.13684082]
[123.14526367 690.03649902]
[121.41299438 704.93609619]
[119.68072510 719.83575439]
[117.94845581 734.73541260]
[141.31546021 757.39141846]
[141.81141663 772.38323975]
[142.30735779 787.37500000]
[142.80331421 802.36682129]
[143.29927063 817.35864258]
[143.79521179 832.35040283]
[144.29116821 847.34222412]
[144.78712463 862.33398438]
[157.20281982 871.84106445]
[160.55230713 887.11572266]
[153.25404358 900.94573975]
[138.75404358 906.80102539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 185]
[4 184]
[5 183]
[6 182]
[7 181]
[8 180]
[9 179]
[10 178]
[11 19]
[12 18]
[20 177]
[21 176]
[22 175]
[23 174]
[24 173]
[25 172]
[26 168]
[27 167]
[28 166]
[29 165]
[30 164]
[31 163]
[33 161]
[34 160]
[35 159]
[36 158]
[37 157]
[38 156]
[39 155]
[40 154]
[41 151]
[42 150]
[43 149]
[44 148]
[45 147]
[46 146]
[47 145]
[48 144]
[49 143]
[52 125]
[53 124]
[54 123]
[55 121]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
[61 115]
[62 114]
[63 86]
[64 85]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[87 112]
[88 111]
[89 110]
[90 109]
[93 107]
[94 106]
[95 105]
[97 103]
[98 102]
[130 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
