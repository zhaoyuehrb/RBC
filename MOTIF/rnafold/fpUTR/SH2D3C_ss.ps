%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUUCACUGGUUUAAAAAUACACAGAGGAAGCGAGUAAGAGAAAGGGGAAGGGGAGGUGGGAGAGGCACCUCAACUUUGAUGUCCCGAGCCUUGAGUGGCCACUCGCAAGCUGGCCAAGGGCUUCACACAAUUUGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[80.56530762 145.78224182]
[88.65440369 133.15385437]
[93.27111053 118.88198853]
[82.37727356 129.19335938]
[71.48343658 139.50471497]
[60.58959579 149.81608582]
[49.69575500 160.12745667]
[44.89556503 177.86781311]
[27.72986221 181.35316467]
[17.06516647 191.90135193]
[6.40047073 202.44953918]
[-4.14771700 213.11422729]
[-14.57812309 223.89414978]
[-11.76599216 239.15428162]
[-18.49096489 253.13835144]
[-32.16715240 260.46920776]
[-47.53578568 258.32800293]
[-58.68730545 247.53802490]
[-61.33372498 232.24829102]
[-54.45744705 218.33799744]
[-40.70253754 211.15592957]
[-25.35803986 213.46374512]
[-14.92763424 202.68382263]
[-12.51834583 195.63511658]
[-4.14771700 191.78483582]
[6.51697922 181.23664856]
[17.18167496 170.68846130]
[17.57680511 158.54992676]
[26.44313049 149.67236328]
[39.38438797 149.23361206]
[50.27822876 138.92224121]
[61.17206573 128.61088562]
[72.06590271 118.29951477]
[82.95974731 107.98815155]
[71.56317139 117.74099731]
[57.12664413 121.81367493]
[42.31326675 119.45488739]
[29.85566521 111.09976196]
[22.05188751 98.28956604]
[20.34149933 83.38739777]
[25.04001617 69.14225769]
[35.28070068 58.18194962]
[49.17445374 52.52831650]
[64.15830231 53.22428513]
[77.46817017 60.14146805]
[86.64878845 72.00385284]
[90.00658417 86.62013245]
[87.38383484 71.85120392]
[84.76108551 57.08227921]
[81.33154297 42.47959900]
[77.10555267 28.08720589]
[72.87956238 13.69481182]
[68.65357971 -0.69758302]
[55.06376648 -8.31038761]
[50.98303604 -22.96652412]
[58.32443237 -35.87541580]
[54.09844589 -50.26781082]
[49.87245560 -64.66020203]
[45.64646912 -79.05259705]
[41.42047882 -93.44499207]
[37.19449234 -107.83738708]
[22.79718590 -113.94080353]
[15.73749828 -127.89411163]
[19.34879494 -143.10899353]
[31.92593384 -152.40144348]
[47.53037262 -151.38385010]
[58.79417419 -140.53669739]
[60.39891434 -124.98166656]
[51.58688354 -112.06337738]
[55.81287384 -97.67098236]
[60.03886032 -83.27858734]
[64.26484680 -68.88619232]
[68.49083710 -54.49379730]
[72.71682739 -40.10140228]
[85.87187958 -33.21081161]
[90.36265564 -18.67507744]
[83.04596710 -4.92357159]
[87.27195740 9.46882343]
[91.49794769 23.86121750]
[95.72393799 38.25361252]
[105.43811035 26.82405281]
[120.43613434 27.06756783]
[129.77413940 38.80646515]
[126.63829803 53.47501755]
[113.31679535 60.36977386]
[99.53000641 54.45952988]
[102.15275574 69.22845459]
[104.77550507 83.99738312]
[116.21896362 93.69518280]
[131.21806335 93.85994720]
[146.21716309 94.02471161]
[161.21624756 94.18947601]
[176.21534729 94.35424042]
[191.21444702 94.51900482]
[206.21353149 94.68376923]
[210.89314270 92.03848267]
[215.63871765 91.55578613]
[219.59725952 92.88601685]
[222.18653870 95.38605499]
[237.14221191 96.53829956]
[252.09790039 97.69054413]
[267.05358887 98.84278870]
[282.00924683 99.99503326]
[296.96493530 101.14727783]
[311.93237305 102.13517761]
[326.90975952 102.95861053]
[341.28814697 95.07231903]
[355.16476440 103.81139374]
[354.26455688 120.18580627]
[339.51351929 127.35098267]
[326.08633423 117.93598938]
[311.10894775 117.11255646]
[304.20413208 119.90766907]
[295.81268311 116.10295868]
[280.85699463 114.95071411]
[265.90133667 113.79846954]
[250.94564819 112.64622498]
[235.98997498 111.49398041]
[221.03430176 110.34172821]
[206.04876709 109.68286896]
[191.04968262 109.51810455]
[176.05058289 109.35334015]
[161.05148315 109.18856812]
[146.05239868 109.02380371]
[131.05329895 108.85903931]
[116.05419922 108.69427490]
[129.13815308 116.02981567]
[143.83676147 119.02160645]
[157.00265503 126.20904541]
[167.46829224 136.95475769]
[174.30560303 150.30583191]
[176.90824890 165.07832336]
[175.04542542 179.96220398]
[168.88233948 193.63760376]
[158.96553040 204.89178467]
[146.17439270 212.72676086]
[131.64324951 216.44773865]
[116.66068268 215.72473145]
[102.55533600 210.62185669]
[90.57806396 201.59164429]
[81.79098511 189.43486023]
[76.97333527 175.22956848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[9 27]
[10 26]
[11 25]
[12 23]
[13 22]
[47 88]
[48 87]
[49 86]
[50 80]
[51 79]
[52 78]
[53 77]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
