%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCCGCGGUCCCGCCGGAAGGACUUAAGCGCCCCGGAGCCGGGAGGCGAACUUGGGACCCGCUGGCCUCGCUCGGUGCGCGCCUCCCUCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[205.60667419 353.51336670]
[199.53492737 339.79718018]
[193.46318054 326.08099365]
[187.39141846 312.36480713]
[181.31967163 298.64859009]
[175.02886963 285.03149414]
[168.52059937 271.51696777]
[162.01234436 258.00244141]
[156.16493225 253.25344849]
[155.51988220 243.94880676]
[149.44813538 230.23262024]
[143.37638855 216.51643372]
[128.79956055 213.57460022]
[118.62984467 202.48222351]
[116.92178345 187.35159302]
[124.53865814 173.96168518]
[118.46691132 160.24549866]
[112.39515686 146.52931213]
[106.32341003 132.81312561]
[100.25166321 119.09693146]
[86.77383423 113.77768707]
[80.90871429 100.52828979]
[86.03215027 86.97481537]
[79.96040344 73.25862885]
[67.29923248 63.77150345]
[69.22253418 49.00159454]
[63.15078354 35.28540802]
[57.07903290 21.56921768]
[51.00728226 7.85302782]
[44.93553162 -5.86316156]
[38.86378098 -19.57935143]
[32.35552597 -33.09388351]
[25.41745186 -46.39287186]
[18.47937775 -59.69186401]
[11.54130268 -72.99085236]
[4.39096546 -86.17693329]
[-2.96979761 -99.24671173]
[-18.37220764 -101.94852448]
[-28.39482117 -113.95190430]
[-28.30526733 -129.58923340]
[-18.14583015 -141.47703552]
[-2.71348500 -144.00225830]
[10.70508575 -135.97256470]
[15.77404499 -121.17933655]
[10.09998322 -106.60747528]
[17.46074677 -93.53769684]
[23.60041428 -89.17311096]
[24.84029198 -79.92892456]
[31.77836609 -66.62993622]
[38.71644211 -53.33094788]
[45.65451431 -40.03195953]
[50.03616714 -37.73246384]
[52.92055511 -32.56056213]
[52.57997131 -25.65110016]
[58.65172195 -11.93491173]
[64.72347260 1.78127766]
[70.79521942 15.49746704]
[76.86697388 29.21365547]
[82.93872070 42.92984390]
[95.16559601 51.43589401]
[93.67658997 67.18687439]
[99.74833679 80.90306854]
[113.22616577 86.22231293]
[119.09128571 99.47171021]
[113.96784973 113.02518463]
[120.03959656 126.74137115]
[126.11135101 140.45756531]
[132.18310547 154.17375183]
[138.25485229 167.88993835]
[153.28793335 171.25337219]
[163.34046936 182.69015503]
[164.71479797 197.67597961]
[157.09257507 210.44468689]
[163.16432190 224.16087341]
[169.23606873 237.87705994]
[175.52688599 251.49417114]
[182.03514099 265.00869751]
[188.54339600 278.52322388]
[195.21023560 285.04592896]
[195.03585815 292.57684326]
[201.10762024 306.29302979]
[207.17936707 320.00924683]
[213.25111389 333.72543335]
[219.32286072 347.44161987]
[234.51852417 347.04119873]
[248.70892334 352.49105835]
[259.73013306 362.96011353]
[265.90148926 376.85192871]
[266.28192139 392.04809570]
[260.81341553 406.23132324]
[250.32986450 417.23876953]
[236.42993164 423.39184570]
[221.23327637 423.75228882]
[207.05725098 418.26510620]
[196.06362915 407.76708984]
[189.92883301 393.85906982]
[189.58837891 378.66195679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 78]
[7 77]
[8 76]
[10 75]
[11 74]
[12 73]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[23 62]
[24 61]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 51]
[33 50]
[34 49]
[35 48]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
