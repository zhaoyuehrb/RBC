%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCGAGAAAGCAACCCAGCGCGCCGCCCGCUCCUCACGUGUCCCUCCCGGCCCCGGGGCCACCUCACGUUCUGCUUCCGUCUGACCCCUCCGACUUCCGGUAAAGAGUCCCUAUCCGCACCUCCGCUCCCACCCGGCGCCUCGGCGCGCCCGCCCUCCG\
) } def
/len { sequence length } bind def

/coor [
[57.38003540 468.22616577]
[42.28917694 471.43078613]
[27.86950302 465.94656372]
[18.72228622 453.52352905]
[17.76636505 438.12579346]
[25.30677223 424.66677856]
[38.93739319 417.44113159]
[40.09266281 402.48568726]
[41.24792862 387.53024292]
[33.89318466 380.35253906]
[31.68223763 370.09109497]
[35.58880997 360.11135864]
[44.53860855 353.82443237]
[46.26936722 338.92462158]
[38.40074158 333.67132568]
[32.97476959 325.84991455]
[30.78306961 316.52670288]
[32.17274857 306.99200439]
[36.99221420 298.58142090]
[44.60644150 292.48889160]
[53.98036194 289.59722900]
[56.85353088 274.87496948]
[59.72670364 260.15270996]
[62.59987259 245.43046570]
[65.47304535 230.70820618]
[68.34621429 215.98594666]
[71.21938324 201.26368713]
[74.09255219 186.54142761]
[65.45699310 176.94073486]
[63.91970062 163.92327881]
[70.26718140 152.23251343]
[82.37120819 146.25923157]
[85.52758026 131.59507751]
[76.24030304 127.42234039]
[68.21250153 120.48323059]
[62.27328491 111.17565155]
[59.12135315 100.14585876]
[59.25106430 88.24472809]
[62.89332581 76.46223450]
[50.25325012 68.38581848]
[37.61317825 60.30939484]
[24.97310448 52.23297501]
[12.33303165 44.15655899]
[-3.02767920 52.60923386]
[-20.46570396 52.14961243]
[-35.20907211 42.99310684]
[-43.26848602 27.72278595]
[-42.51660538 10.56133080]
[-55.45853424 2.97802949]
[-68.40045929 -4.60527229]
[-81.34239197 -12.18857384]
[-94.28432465 -19.77187538]
[-110.67768097 -19.33609962]
[-119.01992798 -33.45484161]
[-110.72928619 -47.60395050]
[-94.33444977 -47.22803497]
[-86.70101929 -32.71380615]
[-73.75909424 -25.13050270]
[-60.81716156 -17.54720116]
[-47.87523270 -9.96389961]
[-34.93330383 -2.38059831]
[-24.64152527 -9.79797649]
[-12.25949383 -12.76680851]
[0.36939687 -10.80855846]
[11.35110092 -4.18095636]
[19.02498817 6.15529346]
[22.21493149 18.67563438]
[20.40945053 31.51648331]
[33.04952240 39.59290314]
[45.68959808 47.66932297]
[58.32966995 55.74574280]
[70.96974182 63.82216263]
[78.02291870 61.27210999]
[70.80224609 48.12440872]
[58.90921402 38.98352814]
[58.01318359 24.01031494]
[68.73122406 13.51633549]
[83.68217468 14.72845554]
[92.56978607 26.81192589]
[89.27247620 41.44655609]
[92.12925720 56.17200470]
[99.18243408 53.62195206]
[103.73512268 39.32954025]
[108.28781128 25.03713036]
[105.10403442 9.53957939]
[116.33923340 -0.23894419]
[120.89192200 -14.53135490]
[116.86296082 -30.42787933]
[128.80238342 -41.66986084]
[144.42794800 -36.69250870]
[147.66540527 -20.61609840]
[135.18434143 -9.97866344]
[130.63163757 4.31374741]
[134.14106750 18.78901100]
[122.58022308 29.58982277]
[118.02753448 43.88223267]
[113.47483826 58.17464447]
[123.86953735 66.81370544]
[130.43525696 77.55666351]
[132.94900513 88.95177460]
[147.86480713 87.36467743]
[162.78060913 85.77758789]
[177.69641113 84.19049072]
[183.99334717 70.25148773]
[196.34031677 61.39433670]
[211.36303711 59.91637802]
[225.01713562 66.11488342]
[233.67701721 78.23396301]
[248.59281921 76.64686584]
[263.50860596 75.05976868]
[278.42440796 73.47267914]
[282.04855347 58.75393295]
[290.49081421 46.16408920]
[302.73175049 37.22343445]
[317.29321289 33.01159668]
[332.41683960 34.03717422]
[346.27636719 40.17632294]
[357.19818115 50.68770981]
[363.86346436 64.30204010]
[365.46731567 79.37530518]
[361.81607056 94.08734894]
[353.35061646 106.66161346]
[341.09323120 115.57969666]
[326.52404785 119.76469421]
[311.40231323 118.71124268]
[297.55413818 112.54656982]
[286.65167236 102.01506805]
[280.01150513 88.38848114]
[265.09570312 89.97557068]
[250.17990112 91.56266785]
[235.26409912 93.14976501]
[229.34828186 106.81974792]
[217.30419922 115.75262451]
[202.30683899 117.46891022]
[188.37255859 111.40818024]
[179.28350830 99.10629272]
[164.36770630 100.69338989]
[149.45190430 102.28047943]
[134.53610229 103.86757660]
[123.23702240 125.84069061]
[100.19172668 134.75144958]
[97.03536224 149.41560364]
[106.79109955 163.90847778]
[103.14213562 180.64874268]
[88.81481171 189.41459656]
[85.94164276 204.13685608]
[83.06847382 218.85911560]
[80.19530487 233.58137512]
[77.32212830 248.30363464]
[74.44895935 263.02587891]
[71.57579041 277.74813843]
[68.70262146 292.47039795]
[81.58652496 309.03051758]
[78.21135712 329.44387817]
[61.16918182 340.65539551]
[59.43842316 355.55520630]
[68.29241180 373.63009644]
[56.20337677 388.68551636]
[55.04810715 403.64096069]
[53.89283752 418.59640503]
[66.25205231 427.82968140]
[71.63598633 442.28707886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 160]
[8 159]
[9 158]
[13 156]
[14 155]
[21 152]
[22 151]
[23 150]
[24 149]
[25 148]
[26 147]
[27 146]
[28 145]
[32 142]
[33 141]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[82 97]
[83 96]
[84 95]
[86 93]
[87 92]
[100 139]
[101 138]
[102 137]
[103 136]
[108 131]
[109 130]
[110 129]
[111 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
