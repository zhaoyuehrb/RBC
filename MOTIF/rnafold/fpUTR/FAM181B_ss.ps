%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCAGCGAGCCAGGCCCGGAACUAGUAGGCUGCGCCGCGCGCGCCGCGCCGGGGCGGGAGCUGGGUCUGGGCGGCGGGCAGGAGCUGGCGGGGGCGCACGGGCAGCGCUGCGGACAGCCCGGGAGCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[46.72402191 705.97326660]
[33.66296387 695.16375732]
[40.43435669 679.62078857]
[41.12710953 664.63677979]
[41.81986237 649.65277100]
[34.67860794 636.58178711]
[43.04499054 623.15362549]
[43.73774338 608.16967773]
[44.43049622 593.18566895]
[41.57141876 586.29693604]
[45.31626129 577.86474609]
[46.35492706 562.90075684]
[39.39980698 557.13409424]
[35.87335968 548.66564941]
[36.70437622 539.39105225]
[41.83024979 531.45166016]
[50.18198013 526.74072266]
[52.25432587 511.88458252]
[54.32667160 497.02841187]
[56.39901733 482.17227173]
[58.47135925 467.31610107]
[44.19264603 458.42703247]
[35.16869354 444.16809082]
[33.23453903 427.34945679]
[38.82231140 411.31048584]
[50.86587524 399.25665283]
[67.00386810 393.61895752]
[68.38789368 378.68295288]
[69.77191925 363.74691772]
[71.15594482 348.81091309]
[72.36737061 333.85992432]
[73.40603638 318.89593506]
[74.44470215 303.93191528]
[75.48336792 288.96792603]
[76.52203369 274.00393677]
[73.82283783 267.05102539]
[77.76144409 258.70758057]
[79.14546967 243.77156067]
[80.52949524 228.83554077]
[73.99952698 215.44865417]
[82.97714233 202.42126465]
[84.36116791 187.48524475]
[85.74519348 172.54924011]
[87.12921906 157.61322021]
[80.59925079 144.22633362]
[89.57685852 131.19894409]
[90.96088409 116.26293182]
[76.82107544 101.29450989]
[83.85879517 77.33651733]
[79.75385284 62.90913010]
[75.64890289 48.48174286]
[71.54396057 34.05435944]
[60.32543182 22.89841270]
[64.28438568 8.53958321]
[60.17943573 -5.88780117]
[56.07449341 -20.31518555]
[51.96954727 -34.74256897]
[37.17466354 -39.11463165]
[27.10943413 -50.80628204]
[24.98563957 -66.08676147]
[31.48097420 -80.08012390]
[44.52280045 -88.32113647]
[59.94952011 -88.18012238]
[72.83852386 -79.70207977]
[79.07697296 -65.59232330]
[76.67420197 -50.35321808]
[66.39693451 -38.84751511]
[70.50187683 -24.42012978]
[74.60681915 -9.99274635]
[78.71176910 4.43463898]
[89.63668060 14.55864239]
[85.97134399 29.94941521]
[90.07629395 44.37680054]
[94.18123627 58.80418396]
[98.28617859 73.23156738]
[112.92644501 76.49695587]
[122.77313995 65.18136597]
[125.99539948 49.69176865]
[140.18698120 45.16978455]
[150.03367615 33.85419464]
[159.88037109 22.53860283]
[162.48493958 6.34760952]
[177.90330505 0.76137221]
[190.27438354 11.52653313]
[186.87185669 27.56881714]
[171.19596863 32.38529968]
[161.34927368 43.70088959]
[151.50257874 55.01647949]
[148.98460388 69.69670868]
[134.08872986 75.02806091]
[124.24203491 86.34365082]
[121.66377258 108.34381104]
[105.89689636 117.64695740]
[104.51287079 132.58296204]
[110.94384766 147.03817749]
[102.06523132 158.99725342]
[100.68120575 173.93325806]
[99.29718018 188.86927795]
[97.91315460 203.80528259]
[104.34413147 218.26049805]
[95.46550751 230.21957397]
[94.08148193 245.15557861]
[92.69745636 260.09158325]
[91.48603058 275.04260254]
[90.44736481 290.00659180]
[89.40869904 304.97058105]
[88.37003326 319.93460083]
[87.33136749 334.89859009]
[89.87533569 343.76730347]
[86.09195709 350.19494629]
[84.70793152 365.13095093]
[83.32391357 380.06695557]
[81.93988800 395.00299072]
[93.80496979 401.03393555]
[102.87197113 410.73388672]
[108.06464386 422.91931152]
[108.77761078 436.11367798]
[104.94689178 448.72628784]
[97.05494690 459.24411011]
[86.07005310 466.41326904]
[73.32751465 469.38845825]
[71.25517273 484.24459839]
[69.18282318 499.10076904]
[67.11048126 513.95690918]
[65.03813934 528.81304932]
[74.38799286 548.02905273]
[61.31892014 563.93945312]
[60.28025436 578.90344238]
[59.41448975 593.87841797]
[58.72173691 608.86242676]
[58.02898407 623.84643555]
[65.12068939 637.98919678]
[56.80385590 650.34552002]
[56.11110306 665.32952881]
[55.41835403 680.31353760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 135]
[4 134]
[5 133]
[7 131]
[8 130]
[9 129]
[11 128]
[12 127]
[17 125]
[18 124]
[19 123]
[20 122]
[21 121]
[27 113]
[28 112]
[29 111]
[30 110]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[37 103]
[38 102]
[39 101]
[41 99]
[42 98]
[43 97]
[44 96]
[46 94]
[47 93]
[49 75]
[50 74]
[51 73]
[52 72]
[54 70]
[55 69]
[56 68]
[57 67]
[76 91]
[77 90]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
