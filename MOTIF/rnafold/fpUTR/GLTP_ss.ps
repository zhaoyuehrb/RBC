%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGCCUGCGGCGGGCGGCUGUGACGGCCCCGGCGCUGACGGCGGCGGCCGGGGGGGCGGUGUCGACGCCCGCGGCGCCGGCUGGGGCAUCACCGCGGGCCUCGACCCCGAA\
) } def
/len { sequence length } bind def

/coor [
[94.01605225 138.10459900]
[80.10609436 133.04544067]
[70.01848602 144.14678955]
[66.46407318 159.56356812]
[52.17858505 163.77951050]
[42.09097672 174.88085938]
[32.00336838 185.98222351]
[21.91576004 197.08357239]
[18.39452934 205.66276550]
[11.39778042 208.34558105]
[1.01070440 219.16726685]
[-0.09950982 235.17185974]
[-13.38590431 244.16358948]
[-28.65629578 239.24476624]
[-34.19654465 224.18870544]
[-25.75664711 210.54510498]
[-9.81097126 208.78018188]
[0.57610500 197.95851135]
[10.81440258 186.99597168]
[20.90200996 175.89460754]
[30.98961830 164.79325867]
[41.07722855 153.69189453]
[43.91010666 139.06916809]
[58.91712570 134.05918884]
[69.00473022 122.95782471]
[64.37537384 114.78697205]
[61.85782242 105.73956299]
[61.60130310 96.35191345]
[63.62103271 87.18051910]
[67.79727173 78.76905823]
[57.11848450 68.23513794]
[46.43968964 57.70122528]
[35.76089859 47.16730881]
[25.08210754 36.63339233]
[14.40331459 26.09947586]
[3.72452283 15.56555843]
[-7.09715271 5.17848253]
[-18.05969238 -5.05981445]
[-29.02223206 -15.29811192]
[-39.98477173 -25.53640938]
[-56.07422256 -28.70839882]
[-61.11513519 -44.31356812]
[-49.92184448 -56.29865265]
[-34.00905228 -52.33443069]
[-29.74647331 -36.49894714]
[-18.78393364 -26.26065063]
[-7.82139492 -16.02235413]
[3.14114475 -5.78405714]
[10.27396011 -3.48732901]
[14.25843906 4.88676643]
[24.93723106 15.42068291]
[35.61602402 25.95459938]
[46.29481506 36.48851776]
[56.97360611 47.02243423]
[67.65239716 57.55635071]
[78.33119202 68.09026337]
[95.87911987 61.64916229]
[114.39488220 64.21514893]
[129.52986145 75.18556976]
[137.72944641 91.98391724]
[152.72804260 91.77903748]
[167.72663879 91.57415771]
[181.41984558 83.64908600]
[194.25161743 91.21183014]
[209.25021362 91.00695038]
[224.24880981 90.80207062]
[239.24742126 90.59719086]
[254.24601746 90.39231110]
[267.93920898 82.46723938]
[280.77099609 90.02997589]
[295.76959229 89.82509613]
[310.76818848 89.62021637]
[325.76678467 89.41533661]
[340.76538086 89.21045685]
[355.76397705 89.00557709]
[370.76260376 88.80069733]
[385.76119995 88.59581757]
[403.26684570 76.39508820]
[421.04385376 86.73032379]
[435.97534180 85.29830170]
[450.90682983 83.86627960]
[460.76962280 71.51715851]
[476.48489380 69.84210968]
[488.72906494 79.83490753]
[490.23785400 95.56701660]
[480.11614990 107.70484161]
[464.36898804 109.04723358]
[452.33886719 98.79776764]
[437.40737915 100.22978973]
[422.47589111 101.66181183]
[417.88409424 109.53588867]
[410.02355957 114.41952515]
[400.65286255 115.06716156]
[391.94119263 111.19866180]
[385.96606445 103.59442139]
[370.96746826 103.79930115]
[355.96887207 104.00418091]
[340.97027588 104.20906067]
[325.97167969 104.41394043]
[310.97305298 104.61882019]
[295.97445679 104.82369995]
[280.97586060 105.02857971]
[268.35546875 112.93899536]
[254.45089722 105.39090729]
[239.45230103 105.59578705]
[224.45368958 105.80066681]
[209.45509338 106.00554657]
[194.45649719 106.21042633]
[181.83609009 114.12084198]
[167.93151855 106.57276154]
[152.93292236 106.77764130]
[137.93432617 106.98252106]
[132.51162720 120.75482941]
[122.30140686 131.47087097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[5 22]
[6 21]
[7 20]
[8 19]
[10 18]
[11 17]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 48]
[38 47]
[39 46]
[40 45]
[60 112]
[61 111]
[62 110]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
