%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCGCCGCAGCCGGACGAGAAAGCGGAAGAUGGCGGCGGCGGCCGGGAGGCCGUGAGGAGAGCGGCGGCUGCGAGGGCGGCCGAUGGCGGCCGGGAGGCGCCCUCGGACACUUGCGGGUCGUUAGGGCGCGACGCUGGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[99.59285736 501.45404053]
[104.85528564 486.95196533]
[117.13658905 477.61529541]
[115.85586548 462.67007446]
[114.57514191 447.72485352]
[113.29442596 432.77963257]
[112.01370239 417.83441162]
[103.21797943 405.81420898]
[109.74874878 391.40380859]
[108.46802521 376.45858765]
[107.18730927 361.51336670]
[103.45600128 355.07189941]
[106.04239655 346.23565674]
[105.08134460 331.26647949]
[104.12029266 316.29727173]
[93.60868073 302.28253174]
[101.81792450 285.83618164]
[100.53720093 270.89096069]
[99.25647736 255.94573975]
[97.97576141 241.00051880]
[96.69503784 226.05529785]
[87.24581909 221.74346924]
[80.41426086 213.81239319]
[77.50498962 203.67268372]
[79.11694336 193.16564941]
[85.02152252 184.22898865]
[94.19223022 178.53941345]
[93.87168884 163.54284668]
[85.86417389 150.98382568]
[93.30480194 137.02145386]
[92.98425293 122.02488708]
[92.66370392 107.02831268]
[89.33689880 99.61857605]
[92.50000000 91.70861816]
[92.50000000 76.70861816]
[82.91651917 61.02324295]
[92.19315338 46.16218185]
[91.87260437 31.16560555]
[91.55205536 16.16903114]
[83.52162170 2.53735495]
[90.98517609 -10.35235500]
[90.66462708 -25.34892845]
[90.34407806 -40.34550476]
[90.02353668 -55.34207916]
[86.69213104 -63.92522430]
[89.85982513 -70.66176605]
[89.85982513 -85.66176605]
[76.66531372 -93.39818573]
[69.16427612 -106.61299133]
[69.28411102 -121.70776367]
[76.89250183 -134.62937927]
[89.85982513 -141.95837402]
[89.85982513 -156.95837402]
[89.85982513 -171.95837402]
[89.85982513 -186.95837402]
[89.85982513 -201.95837402]
[89.85982513 -216.95837402]
[81.74245453 -219.81530762]
[74.55279541 -224.51533508]
[68.70082855 -230.78143311]
[64.51808929 -238.24752808]
[62.23889160 -246.47991943]
[61.98724747 -255.00244141]
[63.77009583 -263.32397461]
[67.47737122 -270.96682739]
[72.88874817 -277.49411011]
[79.68674469 -282.53463745]
[87.47531128 -285.80419922]
[95.80293274 -287.12142944]
[98.35502625 -301.90274048]
[100.90711212 -316.68402100]
[103.45920563 -331.46533203]
[106.01129150 -346.24664307]
[108.56338501 -361.02792358]
[111.11547089 -375.80923462]
[104.94707489 -391.00405884]
[115.23410797 -403.77548218]
[131.39414978 -400.98535156]
[136.80314636 -385.50390625]
[125.89677429 -373.25714111]
[123.34468079 -358.47583008]
[120.79259491 -343.69454956]
[118.24050140 -328.91323853]
[115.68841553 -314.13195801]
[113.13632202 -299.35064697]
[110.58423615 -284.56933594]
[127.48276520 -270.45498657]
[132.71777344 -248.94122314]
[124.09761810 -228.41217041]
[104.85982513 -216.95837402]
[104.85982513 -201.95837402]
[104.85982513 -186.95837402]
[104.85982513 -171.95837402]
[104.85982513 -156.95837402]
[104.85982513 -141.95837402]
[117.82714844 -134.62937927]
[125.43554688 -121.70776367]
[125.55538177 -106.61299133]
[118.05433655 -93.39818573]
[104.85982513 -85.66176605]
[104.85982513 -70.66176605]
[105.02011108 -55.66262436]
[105.34065247 -40.66604996]
[105.66120148 -25.66947556]
[105.98175049 -10.67290115]
[113.98925781 1.88612032]
[106.54862976 15.84848499]
[106.86917877 30.84506035]
[107.18972778 45.84163284]
[115.72658539 54.47432327]
[116.07533264 67.01212311]
[107.50000000 76.70861816]
[107.50000000 91.70861816]
[107.66028595 106.70776367]
[107.98082733 121.70433807]
[108.30137634 136.70091248]
[116.33181763 150.33259583]
[108.86826324 163.22230530]
[109.18880463 178.21887207]
[124.41253662 191.22840881]
[125.26279449 210.93302917]
[111.64025879 224.77456665]
[112.92098236 239.71980286]
[114.20170593 254.66502380]
[115.48242950 269.61026001]
[116.76314545 284.55548096]
[126.13507080 293.48437500]
[126.85808563 306.00616455]
[119.08947754 315.33624268]
[120.05052948 330.30541992]
[121.01158142 345.27459717]
[122.13253021 360.23263550]
[123.41325378 375.17788696]
[124.69397736 390.12310791]
[133.58129883 403.21224976]
[126.95892334 416.55368042]
[128.23965454 431.49890137]
[129.52037048 446.44412231]
[130.80108643 461.38934326]
[132.08181763 476.33456421]
[145.77258301 483.44558716]
[153.42565918 496.84088135]
[152.59898376 512.24609375]
[143.55632019 524.74542236]
[129.18318176 530.35046387]
[114.06596375 527.27258301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[9 134]
[10 133]
[11 132]
[13 131]
[14 130]
[15 129]
[17 126]
[18 125]
[19 124]
[20 123]
[21 122]
[27 119]
[28 118]
[30 116]
[31 115]
[32 114]
[34 113]
[35 112]
[37 109]
[38 108]
[39 107]
[41 105]
[42 104]
[43 103]
[44 102]
[46 101]
[47 100]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
