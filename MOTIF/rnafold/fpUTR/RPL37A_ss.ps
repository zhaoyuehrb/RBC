%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGCUCGUCCGCCUAAUACCGCGCCUGCGCACCGCGUCUCUUCCUUUCUGGGCUCGGACCUAGGUCGCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[69.74447632 334.11410522]
[54.33769608 332.26730347]
[42.98179245 321.69265747]
[40.04335022 306.45632935]
[46.65225220 292.41702271]
[60.26724243 284.97314453]
[62.05251694 270.07977295]
[63.83779144 255.18637085]
[61.44187927 247.97657776]
[66.00157166 239.74073792]
[68.37754059 224.93011475]
[70.75351715 210.11947632]
[63.86344910 199.97123718]
[65.91001892 187.46693420]
[76.31925964 179.55438232]
[79.28216553 164.84991455]
[82.24507904 150.14546204]
[85.20799255 135.44099426]
[88.17089844 120.73654175]
[78.26808167 109.88208008]
[76.59712219 95.28437805]
[83.79096222 82.47291565]
[97.12464142 76.30055237]
[100.08754730 61.59608841]
[103.05046082 46.89162827]
[98.19152069 31.83502769]
[108.29035950 20.88684464]
[111.25326538 6.18238401]
[114.21617889 -8.52207661]
[117.17909241 -23.22653770]
[116.58274078 -38.21467590]
[112.46092987 -52.63725281]
[108.33911133 -67.05982208]
[104.21729279 -81.48239899]
[94.05130768 -95.05033875]
[104.27478790 -108.57501984]
[120.10105133 -102.49507904]
[118.63986969 -85.60421753]
[122.76168060 -71.18164062]
[126.88349915 -56.75906754]
[131.00531006 -42.33649445]
[138.19046021 -55.50363922]
[150.24385071 -64.43201447]
[164.93334961 -67.46820831]
[179.53868103 -64.04995728]
[191.35511780 -54.81027222]
[198.19442749 -41.46022415]
[198.79006958 -26.47205353]
[193.03172302 -12.62136841]
[181.98576355 -2.47312617]
[167.69775391 2.09335780]
[152.81364441 0.23243244]
[140.08975220 -7.71128416]
[131.88354492 -20.26362610]
[128.92063904 -5.55916548]
[125.95772552 9.14529514]
[122.99481964 23.84975624]
[128.06568909 37.85459518]
[117.75492096 49.85453796]
[114.79200745 64.55899811]
[111.82910156 79.26345825]
[121.73191833 90.11791992]
[123.40287781 104.71562195]
[116.20903778 117.52708435]
[102.87535858 123.69944763]
[99.91245270 138.40391541]
[96.94953918 153.10836792]
[93.98662567 167.81283569]
[91.02371979 182.51728821]
[97.36774445 199.66839600]
[85.56414795 212.49545288]
[83.18817139 227.30607605]
[80.81220245 242.11671448]
[78.73117065 256.97164917]
[76.94589996 271.86502075]
[75.16062164 286.75842285]
[86.63056946 297.20925903]
[89.73413086 312.41278076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 76]
[7 75]
[8 74]
[10 73]
[11 72]
[12 71]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[23 61]
[24 60]
[25 59]
[27 57]
[28 56]
[29 55]
[30 54]
[31 41]
[32 40]
[33 39]
[34 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
