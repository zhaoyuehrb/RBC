%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAAUGCUUGUUCCCUGUCCUCUGGCCCUUUGCAAAUAAAUGCCUUACCAGACCUGCCCUGCCACCCCACUCGCAGCCACCCAGCAAGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[75.41397095 321.13256836]
[67.48227692 334.46926880]
[53.21301651 340.56582642]
[38.09301376 337.07794189]
[27.93621826 325.34683228]
[26.64812279 309.88333130]
[34.72402954 296.63342285]
[49.05858231 290.69204712]
[52.43021774 276.07589722]
[55.80185318 261.45971680]
[54.20746994 254.09463501]
[59.52657318 246.42854309]
[63.36973953 231.92924500]
[67.21290588 217.42993164]
[71.05607605 202.93061829]
[64.49674225 184.86254883]
[78.47736359 170.51898193]
[81.37393188 155.80130005]
[84.27050781 141.08363342]
[66.80891418 128.87271118]
[57.13389206 109.88829803]
[57.51519012 88.58410645]
[67.86334991 69.95806885]
[58.81243515 57.99642563]
[49.76151657 46.03478241]
[40.71059799 34.07314301]
[31.65968132 22.11149979]
[18.84475327 24.94433212]
[5.96851492 22.66107178]
[-5.01151657 15.64554119]
[-12.44017410 4.99818420]
[-15.21411228 -7.63642216]
[-12.94556713 -20.32354355]
[-6.01611423 -31.13454437]
[-14.27377605 -43.65696716]
[-22.53143692 -56.17938614]
[-38.06148148 -59.11080933]
[-46.90092087 -72.21194458]
[-43.80546951 -87.71012878]
[-30.61160851 -96.41056061]
[-15.14701557 -93.15142822]
[-6.58656406 -79.86631775]
[-10.00901699 -64.43704987]
[-1.75135505 -51.91462708]
[6.50630665 -39.39220810]
[23.47891998 -41.09260178]
[39.10230255 -34.03070450]
[49.14189148 -20.02420235]
[50.82843399 -2.78583646]
[43.62132263 13.06058121]
[52.67224121 25.02222443]
[61.72315979 36.98386383]
[70.77407837 48.94550705]
[79.82499695 60.90715027]
[89.60643768 57.25358963]
[99.97340393 56.00817108]
[110.34187317 57.24105453]
[120.12772369 60.88278580]
[128.77966309 66.72820282]
[135.81030273 74.44800568]
[140.82353210 83.60729980]
[155.49237061 80.47278595]
[170.16120911 77.33827209]
[184.83004761 74.20375824]
[189.48403931 59.56695175]
[200.84371948 49.22996521]
[215.85337830 45.97339249]
[230.47552490 50.67323303]
[240.77685547 62.06525421]
[243.98637390 77.08506012]
[239.24072266 91.69240570]
[227.81646729 101.95796967]
[212.78666687 105.12038422]
[198.19427490 100.32897186]
[187.96456909 88.87259674]
[173.29573059 92.00711060]
[158.62689209 95.14162445]
[143.95805359 98.27613831]
[142.80340576 110.15631104]
[138.49765015 121.28879547]
[131.35777283 130.85403442]
[121.90940094 138.14787292]
[110.84809875 142.63333130]
[98.98817444 143.98019409]
[96.09160614 158.69787598]
[93.19503784 173.41554260]
[99.89715576 182.28564453]
[100.48822784 193.16500854]
[95.01398468 202.32769775]
[85.55538940 206.77377319]
[81.71221924 221.27308655]
[77.86905670 235.77239990]
[74.02588654 250.27171326]
[70.41801453 264.83135986]
[67.04637909 279.44750977]
[63.67473984 294.06369019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 96]
[9 95]
[10 94]
[12 93]
[13 92]
[14 91]
[15 90]
[17 86]
[18 85]
[19 84]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[34 45]
[35 44]
[36 43]
[61 78]
[62 77]
[63 76]
[64 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
