%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUGGGAGUGGGCGCGGGCGCAGGCGAACGGCUGCCGGUCAGGUGUCCUUGUCCCCUUGAGUUGCGCGGGUCGUGUUCGAGGGC\
) } def
/len { sequence length } bind def

/coor [
[217.67047119 172.79820251]
[204.50527954 165.60946655]
[191.34008789 158.42073059]
[178.17491150 151.23199463]
[165.00971985 144.04325867]
[150.13117981 144.73458862]
[141.72714233 131.33001709]
[128.56196594 124.14127350]
[115.39677429 116.95253754]
[98.54406738 122.85453033]
[82.57651520 114.86174774]
[77.20185089 97.83352661]
[63.55736923 91.60230255]
[49.91288757 85.37107849]
[34.14561844 86.67636871]
[25.78267670 74.35117340]
[12.13819599 68.11994934]
[-1.61533105 62.13325882]
[-15.47352409 56.39300919]
[-29.33171654 50.65275574]
[-45.04235077 52.51999283]
[-53.83987808 40.50114441]
[-67.69807434 34.76089096]
[-80.85769653 42.98305511]
[-96.33453369 41.86631393]
[-108.17742920 31.84007645]
[-111.83254242 16.75963402]
[-105.89441681 2.42372584]
[-92.64637756 -5.65519905]
[-77.18256378 -4.37062931]
[-65.44912720 5.78349257]
[-61.95782089 20.90269852]
[-48.09962845 26.64295006]
[-33.38022614 24.36513329]
[-23.59146500 36.79456329]
[-9.73327255 42.53481293]
[4.12492037 48.27506638]
[11.67983723 47.91739655]
[18.36942101 54.47547150]
[32.01390076 60.70669556]
[46.80522537 58.95569992]
[56.14411545 71.72659302]
[69.78859711 77.95781708]
[83.43307495 84.18904877]
[93.24095917 78.11930847]
[104.76339722 77.60001373]
[115.07751465 82.76289368]
[121.56694031 92.29827881]
[122.58551025 103.78735352]
[135.75070190 110.97608948]
[148.91587830 118.16482544]
[164.73609924 117.98767853]
[172.19845581 130.87808228]
[185.36364746 138.06681824]
[198.52882385 145.25553894]
[211.69401550 152.44427490]
[224.85920715 159.63301086]
[238.39028931 166.10678101]
[252.24847412 171.84704590]
[266.10665894 177.58729553]
[279.96487427 183.32754517]
[293.82305908 189.06779480]
[307.68124390 194.80804443]
[313.31509399 194.03752136]
[318.11883545 195.50976562]
[321.33813477 198.47196960]
[322.66082764 201.97482300]
[335.82598877 209.16355896]
[348.99118042 216.35229492]
[362.15637207 223.54103088]
[375.32156372 230.72976685]
[392.12094116 233.01391602]
[394.57659912 249.78907776]
[379.13677979 256.79257202]
[368.13281250 243.89495850]
[354.96765137 236.70622253]
[341.80245972 229.51748657]
[328.63726807 222.32875061]
[315.47207642 215.14001465]
[301.94100952 208.66624451]
[288.08279419 202.92599487]
[274.22460938 197.18572998]
[260.36642456 191.44548035]
[246.50822449 185.70523071]
[232.65003967 179.96498108]
[229.09260559 181.13301086]
[224.76611328 180.48501587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[7 51]
[8 50]
[9 49]
[12 44]
[13 43]
[14 42]
[16 40]
[17 39]
[18 37]
[19 36]
[20 35]
[22 33]
[23 32]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
