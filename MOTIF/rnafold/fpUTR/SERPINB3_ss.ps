%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUACUAACCACAGAGGGAGAGGCAGCAAGAGGAGAGGCAUAAAUUCAGGAUCUCACCCUUCAUUCCACAGACACACAUAGCCUCUCUGCCCACCUCUGCUUCCUCUAGGAACACAGGAGUUCCAGAUCACAUCGAGUUCACC\
) } def
/len { sequence length } bind def

/coor [
[63.40223312 339.91775513]
[57.29400635 326.21777344]
[53.84721756 311.61917114]
[53.18274689 296.63388062]
[55.32389069 281.78747559]
[60.19556808 267.60064697]
[67.62692261 254.57086182]
[77.35733795 243.15512085]
[89.04556274 233.75378418]
[102.28170013 226.69653320]
[116.60153961 222.23086548]
[131.50289917 220.51341248]
[146.46316528 221.60440063]
[160.95770264 225.46556091]
[174.47171021 231.95761108]
[166.46177673 219.27529907]
[158.45182800 206.59300232]
[150.44189453 193.91069031]
[137.10379028 187.28164673]
[136.27633667 171.48208618]
[128.26638794 158.79978943]
[120.25644684 146.11747742]
[112.24650574 133.43518066]
[104.23656464 120.75287628]
[88.08755493 117.51353455]
[79.14192200 103.68386841]
[82.80903625 87.62659454]
[74.52622223 75.12080383]
[66.24340057 62.61500549]
[62.12995911 60.76085281]
[59.15986633 57.95001984]
[57.49576569 54.67520142]
[57.11783218 51.43023682]
[57.84009933 48.64860916]
[50.67081833 35.47281647]
[43.50154114 22.29702759]
[36.33226013 9.12123775]
[29.16298294 -4.05455208]
[21.99370384 -17.23034286]
[14.82442570 -30.40613174]
[-1.85737514 -28.36016846]
[-18.01872253 -32.83806610]
[-31.21121788 -43.13241959]
[-39.44733810 -57.65687180]
[-41.49985504 -74.19049835]
[-37.08460617 -90.21741486]
[-26.89949417 -103.30961609]
[-34.63280106 -116.16247559]
[-52.68138504 -125.03066254]
[-52.37446213 -144.32109070]
[-60.65727997 -156.82688904]
[-68.94010162 -169.33268738]
[-83.95236969 -166.77305603]
[-98.70624542 -170.54705811]
[-110.64553070 -180.00080872]
[-117.70166779 -193.49638367]
[-118.65214539 -208.69561768]
[-113.33228302 -222.96511841]
[-102.66378021 -233.83264160]
[-88.49501801 -239.41529846]
[-73.28082275 -238.74588013]
[-59.65714264 -231.94033813]
[-49.98436356 -220.17781067]
[-45.93835449 -205.49620056]
[-48.22011185 -190.43919373]
[-56.43430328 -177.61550903]
[-48.15148544 -165.10971069]
[-39.86866760 -152.60391235]
[-29.62410545 -151.45616150]
[-21.55944061 -144.68679810]
[-18.52887154 -134.37316895]
[-21.77994537 -123.89578247]
[-14.04663658 -111.04293060]
[-1.01034224 -113.85282898]
[12.27812862 -112.48625183]
[24.51149368 -107.06340027]
[34.48186493 -98.10422516]
[41.20000458 -86.47859955]
[43.99348068 -73.32185364]
[42.57392120 -59.92394638]
[37.06674957 -47.60295105]
[28.00021553 -37.57541275]
[35.16949463 -24.39962006]
[42.33877182 -11.22383118]
[49.50805283 1.95195901]
[56.67733002 15.12774849]
[63.84661102 28.30353928]
[71.01589203 41.47932816]
[78.74919891 54.33218765]
[87.03201294 66.83798218]
[95.31483459 79.34378052]
[107.99000549 80.38393402]
[117.78459167 88.49614716]
[121.16740417 100.75578308]
[116.91886139 112.74293518]
[124.92881012 125.42523956]
[132.93875122 138.10754395]
[140.94869995 150.78984070]
[148.95863342 163.47215271]
[162.86965942 171.00831604]
[163.12419128 185.90075684]
[171.13414001 198.58305359]
[179.14407349 211.26535034]
[187.15402222 223.94766235]
[193.52966309 226.85041809]
[197.18078613 232.09719849]
[211.23245239 237.34608459]
[225.28411865 242.59495544]
[234.49406433 242.67477417]
[239.58128357 248.11276245]
[253.51593018 253.66484070]
[267.45059204 259.21691895]
[281.38522339 264.76898193]
[295.31988525 270.32104492]
[309.73706055 263.84640503]
[324.47988892 269.54061890]
[330.80175781 284.02542114]
[324.95196533 298.70724487]
[310.40115356 304.87561035]
[295.78198242 298.87094116]
[289.76782227 284.25570679]
[275.83316040 278.70364380]
[261.89849854 273.15155029]
[247.96386719 267.59948730]
[234.02920532 262.04742432]
[220.03523254 256.64663696]
[205.98356628 251.39773560]
[191.93190002 246.14886475]
[201.05288696 258.05715942]
[207.79365540 271.45724487]
[211.91780090 285.87915039]
[213.28071594 300.81710815]
[211.83457947 315.74722290]
[207.63011169 330.14593506]
[200.81477356 343.50823975]
[191.62757874 355.36550903]
[180.39070129 365.30197144]
[167.49826050 372.96908569]
[153.40235901 378.09799194]
[138.59736633 380.50881958]
[123.60247803 380.11700439]
[108.94358826 376.93630981]
[95.13476562 371.07827759]
[82.66030884 362.74835205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 104]
[16 103]
[17 102]
[18 101]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[27 91]
[28 90]
[29 89]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[47 73]
[48 72]
[50 68]
[51 67]
[52 66]
[106 128]
[107 127]
[108 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
