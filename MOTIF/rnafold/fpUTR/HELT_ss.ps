%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGGGACACUCGAGGAGGCACACGAGGCGGAAAAGUGGACGGGUGCCCCGCGCCACCGCCUCUCCCGAGGGCGCGUACUGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[118.88973236 358.05355835]
[121.75884247 338.88540649]
[122.28820801 323.89474487]
[122.81758118 308.90411377]
[123.34695435 293.91345215]
[123.87632751 278.92279053]
[105.14519501 269.67358398]
[93.11672974 252.51348877]
[90.79639435 231.62025452]
[98.81668854 212.11763000]
[115.26642609 198.81878662]
[111.59764862 184.27436829]
[107.92887878 169.72994995]
[104.26010895 155.18553162]
[99.46488953 149.34089661]
[100.72817230 140.06304932]
[97.57498169 125.39822388]
[94.42178345 110.73339081]
[85.00522614 122.40936279]
[70.34626007 125.58970642]
[56.93774033 118.86574554]
[50.71868515 105.21571350]
[54.44368362 90.68559265]
[66.46282959 81.71118164]
[81.45250702 82.26749420]
[92.77397919 92.10919189]
[93.30335236 77.11853790]
[93.83271790 62.12788010]
[94.36209106 47.13722229]
[94.89146423 32.14656830]
[95.42083740 17.15591049]
[95.95021057 2.16525483]
[93.64014435 -1.49192369]
[92.63249969 -5.31708765]
[92.82995605 -8.90256023]
[94.01883698 -11.90922832]
[95.89957428 -14.09707546]
[98.12450409 -15.34423637]
[101.27770233 -30.00907135]
[104.43089294 -44.67390442]
[98.32139587 -61.93451309]
[110.34493256 -74.58516693]
[112.97862244 -89.35214233]
[115.61230469 -104.11912537]
[118.24599457 -118.88610077]
[115.07460022 -135.54078674]
[130.20048523 -143.19871521]
[141.74639893 -130.78388977]
[133.01296997 -116.25241852]
[130.37928772 -101.48543549]
[127.74559784 -86.71846008]
[125.11191559 -71.95147705]
[131.81477356 -61.71490479]
[129.58515930 -49.27344894]
[119.09572601 -41.52070999]
[115.94253540 -26.85587692]
[112.78933716 -12.19104195]
[110.94086456 2.69462681]
[110.41149139 17.68528366]
[109.88211823 32.67593765]
[109.35274506 47.66659546]
[108.82337952 62.65724945]
[108.29400635 77.64790344]
[107.76463318 92.63856506]
[109.08661652 107.58019257]
[112.23981476 122.24502563]
[115.39300537 136.90986633]
[118.80452728 151.51676941]
[122.47329712 166.06118774]
[126.14206696 180.60560608]
[129.81083679 195.15002441]
[139.85925293 195.67601013]
[149.49450684 198.53390503]
[158.18382263 203.55982971]
[165.44815063 210.47018433]
[170.88845825 218.87767029]
[174.20777893 228.31294250]
[175.22729492 238.25090027]
[173.89605713 248.13978577]
[170.29348755 257.43194580]
[164.62458801 265.61410522]
[157.20838928 272.23562622]
[148.45989990 276.93350220]
[138.86698914 279.45214844]
[138.33761597 294.44281006]
[137.80824280 309.43347168]
[137.27886963 324.42413330]
[136.74949646 339.41479492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[11 71]
[12 70]
[13 69]
[14 68]
[16 67]
[17 66]
[18 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[38 57]
[39 56]
[40 55]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
