%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCCGCGGUGGGAGGAGGCACCGGCCGCGCGGCGGGAGGAGGUGCCGGCCGAGCACCGCAGACAGCGCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[152.84884644 296.42645264]
[148.77723694 281.98962402]
[144.70562744 267.55279541]
[140.63401794 253.11596680]
[124.99047852 249.59297180]
[113.13817596 238.65473938]
[108.31839752 223.16606140]
[111.91237640 207.25262451]
[123.04708099 195.20213318]
[118.41182709 180.93627930]
[113.77657318 166.67044067]
[109.14131927 152.40458679]
[104.50605774 138.13873291]
[99.87080383 123.87289429]
[85.91545105 119.27581787]
[77.29519653 107.37723541]
[77.27532196 92.68422699]
[85.86334991 80.76235962]
[81.22808838 66.49651337]
[67.28263092 54.66327667]
[71.27800751 37.69334412]
[66.08625031 23.62047386]
[60.89449310 9.54760456]
[55.70273972 -4.52526569]
[50.51098251 -18.59813499]
[45.31922531 -32.67100525]
[26.79232407 -39.73969650]
[19.15322876 -57.71971893]
[26.69583511 -75.42122650]
[19.88597679 -88.78632355]
[13.07612038 -102.15142059]
[6.26626253 -115.51652527]
[-6.31188107 -126.88430786]
[1.12967432 -142.11781311]
[17.82787323 -139.18412781]
[19.63136101 -122.32637787]
[26.44121742 -108.96128082]
[33.25107574 -95.59618378]
[40.06093216 -82.23108673]
[50.77124405 -81.74931335]
[60.32117844 -76.69840240]
[66.84608459 -67.98506165]
[69.03815460 -57.23849487]
[66.40808868 -46.50595474]
[59.39209747 -37.86276245]
[64.58385468 -23.78989220]
[69.77561188 -9.71702194]
[74.96736145 4.35584831]
[80.15911865 18.42871857]
[85.35087585 32.50158691]
[96.32937622 37.96505356]
[100.67919922 49.86202240]
[95.49394226 61.86125946]
[100.12919617 76.12710571]
[114.08454895 80.72418213]
[122.70480347 92.62276459]
[122.72467804 107.31577301]
[114.13665009 119.23764038]
[118.77191162 133.50347900]
[123.40716553 147.76933289]
[128.04241943 162.03518677]
[132.67767334 176.30102539]
[137.31292725 190.56687927]
[151.26617432 192.80732727]
[162.80442810 200.85099792]
[169.66761780 213.05169678]
[170.54222107 226.95610046]
[165.31224060 239.79708862]
[155.07084656 249.04435730]
[159.14245605 263.48120117]
[163.21406555 277.91802979]
[167.28567505 292.35485840]
[181.88972473 297.59902954]
[190.59434509 310.44461060]
[190.05242920 325.95223999]
[180.47236633 338.15887451]
[165.53787231 342.37081909]
[150.99157715 336.96853638]
[142.42681885 324.02926636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[18 54]
[19 53]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[29 39]
[30 38]
[31 37]
[32 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
