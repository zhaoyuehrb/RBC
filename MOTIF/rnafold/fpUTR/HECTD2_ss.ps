%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGCGCGGGCGGGGGCGGAGUGGCGGCGGCAGCGGCGGCUAGAAGCGGCAGCCCAGAGCCCUCUCGCGGCCGCGGCGGCAGCAGCAGCGCCAGCCCCAGCAACACUGAGGCCGCCGCCGCCGCCUGGCGCUCCCGCCGCCCGGCCCGAC\
) } def
/len { sequence length } bind def

/coor [
[98.75812531 537.18353271]
[97.54335785 522.23278809]
[96.32859039 507.28207397]
[92.63050842 500.83197021]
[95.24384308 492.01654053]
[94.33232880 477.04425049]
[93.42081451 462.07199097]
[92.50930786 447.09970093]
[91.59779358 432.12741089]
[89.15782166 429.50558472]
[87.89700317 425.54974365]
[88.43820953 420.84152222]
[91.11410522 416.22283936]
[91.11410522 401.22283936]
[91.11410522 386.22283936]
[91.11410522 371.22283936]
[91.11410522 356.22283936]
[91.11410522 341.22283936]
[91.11410522 326.22283936]
[91.11410522 311.22283936]
[91.11410522 296.22283936]
[91.11410522 281.22283936]
[79.60710144 274.38922119]
[72.93885040 262.66070557]
[72.95178223 249.06065369]
[79.74985504 237.15649414]
[91.64315033 230.12391663]
[91.94715881 215.12699890]
[92.25115967 200.13008118]
[92.55516815 185.13316345]
[92.85916901 170.13624573]
[93.16317749 155.13932800]
[93.46717834 140.14241028]
[93.77118683 125.14548492]
[94.07518768 110.14856720]
[85.61934662 106.20217896]
[80.93573761 95.57639313]
[70.06384277 85.24188995]
[59.19195175 74.90738678]
[48.32006073 64.57288361]
[37.44816971 54.23838043]
[22.11515808 50.33845901]
[18.22126770 35.96184921]
[7.34937572 25.62734604]
[-7.98363352 21.72742271]
[-11.87752438 7.35081339]
[-22.74941635 -2.98369026]
[-31.17810822 -6.65770006]
[-33.73423767 -13.63952065]
[-44.39444733 -24.19224167]
[-52.74694824 -28.03632164]
[-55.16105270 -35.06851196]
[-65.60520172 -45.83511734]
[-76.04934692 -56.60171890]
[-91.39089203 -54.27433014]
[-105.15495300 -61.43884659]
[-112.04896545 -75.34036255]
[-109.42205048 -90.63346100]
[-98.28430176 -101.43763733]
[-82.91841888 -103.59846497]
[-69.23288727 -96.28505707]
[-62.49008179 -82.30957031]
[-65.28274536 -67.04586792]
[-54.83859634 -56.27926636]
[-44.39444733 -45.51266098]
[-33.84172440 -34.85245132]
[-23.18151665 -24.29973030]
[-12.41491222 -13.85558224]
[-1.54302061 -3.52107835]
[13.01235867 -0.36034834]
[17.68387985 14.75545311]
[28.55577087 25.08995628]
[43.11114883 28.25068665]
[47.78267288 43.36648941]
[58.65456390 53.70099258]
[69.52645874 64.03549957]
[80.39834595 74.37000275]
[91.27024078 84.70450592]
[106.25791931 85.31238556]
[117.93103027 75.89228058]
[129.60415649 66.47218323]
[141.27726746 57.05207825]
[152.95037842 47.63197327]
[164.62350464 38.21187210]
[166.44552612 22.74196625]
[178.41792297 13.35493088]
[193.15489197 15.18729401]
[204.82800293 5.76719093]
[216.50111389 -3.65291214]
[214.23541260 -18.77950668]
[219.80857849 -32.91586685]
[231.63070679 -42.30222702]
[246.46453857 -44.49618149]
[260.31158447 -39.00756836]
[271.98468018 -48.42767334]
[271.06430054 -63.91742706]
[279.45269775 -76.97172546]
[293.92434692 -82.57092285]
[308.91461182 -78.56201172]
[318.65942383 -66.48650360]
[319.41174316 -50.98767471]
[310.88223267 -38.02514267]
[296.35070801 -32.58326340]
[281.40478516 -36.75455475]
[269.73168945 -27.33445168]
[272.17178345 -12.64052200]
[266.89419556 1.39525747]
[255.22257996 10.96813202]
[240.22801208 13.42975235]
[225.92121887 8.02020454]
[214.24810791 17.44030762]
[202.57498169 26.86041069]
[201.25335693 41.65192413]
[189.54934692 51.37153625]
[174.04360962 49.88499069]
[162.37048340 59.30509186]
[150.69737244 68.72519684]
[139.02424622 78.14530182]
[127.35113525 87.56539917]
[115.67801666 96.98550415]
[109.07210541 110.45257568]
[108.76810455 125.44949341]
[108.46409607 140.44641113]
[108.16009521 155.44332886]
[107.85608673 170.44024658]
[107.55208588 185.43716431]
[107.24808502 200.43408203]
[106.94407654 215.43099976]
[106.64007568 230.42791748]
[120.24207306 240.43455505]
[125.17148590 256.41189575]
[119.68178558 272.02981567]
[106.11410522 281.22283936]
[106.11410522 296.22283936]
[106.11410522 311.22283936]
[106.11410522 326.22283936]
[106.11410522 341.22283936]
[106.11410522 356.22283936]
[106.11410522 371.22283936]
[106.11410522 386.22283936]
[106.11410522 401.22283936]
[106.11410522 416.22283936]
[106.57006836 431.21591187]
[107.48158264 446.18817139]
[108.39309692 461.16046143]
[109.30461121 476.13275146]
[110.21612549 491.10501099]
[111.27931976 506.06729126]
[112.49408722 521.01800537]
[113.70885468 535.96875000]
[124.95420074 547.41088867]
[122.87679291 563.31884766]
[109.07025146 571.48944092]
[94.12577057 565.65490723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[35 121]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[43 72]
[44 71]
[46 69]
[47 68]
[49 67]
[50 66]
[52 65]
[53 64]
[54 63]
[79 120]
[80 119]
[81 118]
[82 117]
[83 116]
[84 115]
[87 112]
[88 111]
[89 110]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
