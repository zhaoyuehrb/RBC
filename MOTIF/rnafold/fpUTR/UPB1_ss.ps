%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGGGAGCGAGAGUAAGAGAUAAAGGCAAGGGCGCCUGACCGGGCCUGGGCACCUCCUCCCACUGCGGGCAAAGGGCAGGCAGUUCGUGCGCGGACACAAGCACUGGCGGACCGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[83.67987061 119.15370178]
[77.04528046 111.94677734]
[73.52769470 102.51283264]
[73.83968353 92.17649841]
[78.13993073 82.47295380]
[63.38296127 79.78374481]
[48.62599182 77.09452820]
[33.86902618 74.40531921]
[19.11205482 71.71611023]
[9.98635864 73.26437378]
[4.01186275 68.76299286]
[-10.67097187 65.69470978]
[-25.35380745 62.62642670]
[-34.51634216 63.93920898]
[-40.37295532 59.28548813]
[-54.97192383 55.84017181]
[-45.82233810 67.72651672]
[-43.08871078 82.47531891]
[-47.37071228 96.85115051]
[-57.72900391 107.70037842]
[-71.89128876 112.64301300]
[-86.75079346 110.59479523]
[-99.04778290 102.00503540]
[-106.08467865 88.75806427]
[-106.31779480 73.75988007]
[-99.69599152 60.30061722]
[-87.67189026 51.33283615]
[-72.88129425 48.82393265]
[-85.93556976 41.43571091]
[-100.99065399 45.43347931]
[-114.12429810 37.75481033]
[-117.84278107 23.37745094]
[-130.89706421 15.98923016]
[-143.95133972 8.60100937]
[-157.00561523 1.21278834]
[-166.13340759 -0.32307196]
[-170.29736328 -6.53745365]
[-183.15708923 -14.25934601]
[-199.00808716 -11.78442383]
[-210.72807312 -22.73985100]
[-209.32647705 -38.72156143]
[-195.87847900 -47.46975708]
[-180.70024109 -42.27356720]
[-175.43519592 -27.11906433]
[-162.57546997 -19.39717293]
[-149.61740112 -11.84149075]
[-136.56312561 -4.45326948]
[-123.50884247 2.93495178]
[-110.45456696 10.32317257]
[-96.21439362 6.10972118]
[-82.87025452 13.41646481]
[-78.54734802 28.38143349]
[-65.49307251 35.76965332]
[-51.52660751 41.24120712]
[-36.92763901 44.68652344]
[-22.28552628 47.94359207]
[-7.60269117 51.01187134]
[7.08014393 54.08015442]
[21.80126572 56.95913696]
[36.55823517 59.64834976]
[51.31520462 62.33756256]
[66.07217407 65.02677155]
[80.82913971 67.71598053]
[94.99648285 62.78784943]
[104.89876556 51.52087021]
[114.80104828 40.25389099]
[124.70333099 28.98691177]
[134.60560608 17.71993256]
[133.77191162 2.16542459]
[143.97474670 -9.11983204]
[158.80873108 -9.81877232]
[168.71101379 -21.08575058]
[169.11796570 -37.12364197]
[181.99705505 -46.68964767]
[197.46855164 -42.44554520]
[203.66404724 -27.64704704]
[195.83087158 -13.64629650]
[179.97798157 -11.18346882]
[170.07569885 0.08350984]
[171.28721619 14.88445091]
[161.40539551 26.45183182]
[145.87258911 27.62221527]
[135.97030640 38.88919449]
[126.06802368 50.15617371]
[116.16574097 61.42315292]
[106.26345825 72.69013214]
[116.50740051 79.15286255]
[122.58399200 88.90161896]
[123.73421478 99.70390320]
[138.02374268 104.26562500]
[152.31327820 108.82734680]
[166.60281372 113.38906860]
[177.90945435 102.99411011]
[192.90228271 99.66079712]
[207.54827881 104.28578186]
[217.90774536 115.62495422]
[221.19404602 130.62814331]
[216.52317810 145.25956726]
[205.15158081 155.58345032]
[190.13816833 158.82270813]
[175.52145386 154.10600281]
[165.23327637 142.70210266]
[162.04109192 127.67860413]
[147.75155640 123.11688232]
[133.46202087 118.55515289]
[119.17249298 113.99343109]
[117.41954803 116.12327576]
[115.43134308 118.03536224]
[121.08226013 131.93022156]
[126.73318481 145.82508850]
[141.82960510 149.41365051]
[151.90797424 161.21220398]
[153.09297180 176.68397522]
[144.92892456 189.87973022]
[130.55508423 195.72544861]
[115.49848175 191.97332764]
[105.54869843 180.06613159]
[104.53160858 164.58241272]
[112.83832550 151.47599792]
[107.18740082 137.58114624]
[101.53648376 123.68628693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[11 58]
[12 57]
[13 56]
[15 55]
[16 54]
[28 53]
[29 52]
[32 49]
[33 48]
[34 47]
[35 46]
[37 45]
[38 44]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[71 79]
[72 78]
[89 106]
[90 105]
[91 104]
[92 103]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
