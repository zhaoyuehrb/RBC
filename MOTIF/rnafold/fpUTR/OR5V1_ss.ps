%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUGCUAUUGCAGCAUAUGAUUCAUUUUUAUAAUCUGGUCUUCUCUUUGCCCAAUUCCUGAAAGGAAACCAGGCGACAUC\
) } def
/len { sequence length } bind def

/coor [
[112.80088806 149.44302368]
[111.10128021 134.53962708]
[109.40166473 119.63623047]
[95.36099243 114.35801697]
[84.26461029 124.45110321]
[73.16823578 134.54418945]
[62.07186127 144.63728333]
[50.97548294 154.73036194]
[48.78351212 170.62297058]
[34.91845703 178.69389343]
[20.01639938 172.75181580]
[15.50892735 157.35498047]
[24.85378265 144.31454468]
[40.88239670 143.63398743]
[51.97877121 133.54089355]
[63.07514954 123.44781494]
[74.17152405 113.35472870]
[85.26790619 103.26163483]
[70.63140106 106.54382324]
[55.70856857 105.02422333]
[42.03408813 98.85910797]
[31.01424980 88.68251038]
[23.78233910 75.54100037]
[21.08209038 60.78604507]
[23.19119835 45.93506241]
[29.89276123 32.51533508]
[40.49758911 21.90695953]
[53.91506958 15.20090294]
[68.76534271 13.08682346]
[83.52120209 15.78213310]
[96.66513824 23.00964546]
[106.84542084 34.02607727]
[113.01511383 47.69849396]
[114.53971100 62.62081146]
[111.26242065 77.25841522]
[103.52071381 90.10546112]
[116.60468292 82.76995087]
[129.68865967 75.43444061]
[142.77262878 68.09893036]
[155.85659790 60.76342392]
[168.94056702 53.42791367]
[175.08413696 46.32368469]
[182.66137695 46.07310486]
[196.01356506 39.23796463]
[209.36575317 32.40282440]
[215.77375793 25.53616524]
[223.35505676 25.57250023]
[236.95632935 19.24752426]
[250.55761719 12.92254734]
[264.15887451 6.59756994]
[264.31369019 -8.66476250]
[271.08294678 -22.34467506]
[283.12258911 -31.72601128]
[298.04217529 -34.94610214]
[312.87936401 -31.36559105]
[324.68826294 -21.69539642]
[331.12420654 -7.85553932]
[330.90930176 7.40606499]
[324.08621216 21.05921555]
[312.00973511 30.39306641]
[297.07757568 33.55437851]
[282.25457764 29.91546822]
[270.48385620 20.19884491]
[256.88259888 26.52382088]
[243.28131104 32.84879684]
[229.68003845 39.17377472]
[216.20089722 45.75501251]
[202.84870911 52.59015274]
[189.49652100 59.42528915]
[176.27607727 66.51188660]
[163.19210815 73.84739685]
[150.10813904 81.18290710]
[137.02416992 88.51840973]
[123.94019318 95.85391998]
[110.85622406 103.18943024]
[118.59595490 109.23085022]
[124.30506134 117.93661499]
[126.00467682 132.84001160]
[127.70429230 147.74340820]
[137.88987732 160.59588623]
[131.60134888 175.74139404]
[115.30781555 177.59954834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[43 69]
[44 68]
[45 67]
[47 66]
[48 65]
[49 64]
[50 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
