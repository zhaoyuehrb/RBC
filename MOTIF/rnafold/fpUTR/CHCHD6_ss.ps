%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCCGCGCGAGUCCUGGAAAGCGUUGUUGGCCCGGUUGCUCUGGAGCCGGGUCUCGGGUCUGGUGGCUGCCGGCCCUGCGGCAUCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[139.54013062 227.81343079]
[140.45251465 220.93113708]
[135.53213501 206.76110840]
[130.14102173 192.76339722]
[124.28517914 178.95364380]
[118.42933655 165.14389038]
[112.57350159 151.33415222]
[106.71765900 137.52439880]
[101.09485626 132.49440002]
[100.90543365 123.15400696]
[95.51432037 109.15629578]
[89.79832458 103.22425842]
[90.18553162 94.59971619]
[85.26515961 80.42967987]
[80.34477997 66.25964355]
[75.42440796 52.08960724]
[70.26794434 38.00376511]
[64.87683105 24.00605774]
[59.48571396 10.00834846]
[54.09459686 -3.98936057]
[48.70347977 -17.98707008]
[35.73734283 -22.05686760]
[27.65298271 -32.73594666]
[27.26630211 -45.92845917]
[34.49370575 -56.73705673]
[29.57333374 -70.90708923]
[21.07672501 -73.20050812]
[14.33377075 -78.70618439]
[10.47318840 -86.40174866]
[10.09972954 -94.90766144]
[13.20067692 -102.73432922]
[19.16165161 -108.54295349]
[16.17386055 -123.24237823]
[13.18607140 -137.94180298]
[10.19828129 -152.64122009]
[7.21049166 -167.34065247]
[4.22270155 -182.04008484]
[1.23491204 -196.73950195]
[-1.75287771 -211.43893433]
[-4.74066734 -226.13835144]
[-18.56730080 -233.44302368]
[-24.41585159 -247.94573975]
[-19.52481270 -262.79873657]
[-6.20358324 -270.98892212]
[9.25795841 -268.64907837]
[19.55934715 -256.88409424]
[19.83658028 -241.24896240]
[9.95875835 -229.12614441]
[12.94654751 -214.42671204]
[15.93433762 -199.72729492]
[18.92212677 -185.02786255]
[21.90991783 -170.32844543]
[24.89770699 -155.62901306]
[27.88549614 -140.92959595]
[30.87328720 -126.23016357]
[33.86107635 -111.53073883]
[49.99401855 -97.22762299]
[43.74337006 -75.82746887]
[48.66374207 -61.65742874]
[64.03736115 -55.06934738]
[70.10009003 -39.12211990]
[62.70118713 -23.37818718]
[68.09230804 -9.38047695]
[73.48342133 4.61723185]
[78.87453461 18.61494064]
[84.26565552 32.61265182]
[89.71723938 37.82772446]
[89.59444427 47.16923523]
[94.51481628 61.33927155]
[99.43519592 75.50930786]
[104.35556793 89.67934418]
[109.51203156 103.76518250]
[114.90314484 117.76289368]
[120.52741241 131.66856384]
[126.38324738 145.47831726]
[132.23908997 159.28805542]
[138.09492493 173.09780884]
[143.95075989 186.90754700]
[149.24397278 191.39981079]
[151.04124451 197.06253052]
[149.70216370 201.84072876]
[154.62254333 216.01077271]
[160.01365662 230.00846863]
[165.86950684 243.81822205]
[171.72534180 257.62796021]
[185.99897766 264.95208740]
[189.03085327 280.70605469]
[178.49516296 292.80477905]
[162.47399902 291.96713257]
[153.25741577 278.83572388]
[157.91558838 263.48382568]
[152.05975342 249.67405701]
[146.20391846 235.86431885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[10 73]
[11 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[25 59]
[26 58]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
