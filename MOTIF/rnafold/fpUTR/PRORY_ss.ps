%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGAGGACAAGGACUCAGGGGUCUGCUGGUCCAUCUCUGCACCUUGAAACAGCAGCUGGGGCACCAGAAGUAACCCUUACAGCCAACACCAUGUG\
) } def
/len { sequence length } bind def

/coor [
[81.61331940 398.18139648]
[68.08502197 391.11401367]
[58.96975708 378.87167358]
[56.07736969 363.88513184]
[59.98214340 349.12994385]
[69.90878296 337.53576660]
[83.88634491 331.40466309]
[84.36711884 316.41238403]
[71.64136505 308.67150879]
[64.45103455 295.51266479]
[64.81507111 280.42181396]
[72.73581696 267.45422363]
[86.17150879 260.14468384]
[86.65228271 245.15238953]
[83.66455841 238.23730469]
[87.39640045 229.68945312]
[88.35746002 214.72027588]
[79.70158386 199.54728699]
[89.79440308 184.25016785]
[90.27517700 169.25787354]
[90.75595093 154.26557922]
[91.23672485 139.27328491]
[91.71749878 124.28099060]
[92.19827271 109.28869629]
[92.19827271 94.28869629]
[91.71749878 79.29640198]
[83.54185486 65.75131226]
[90.86725616 52.78258514]
[90.38648224 37.79029465]
[89.90570831 22.79800034]
[89.42493439 7.80570698]
[88.94416046 -7.18658638]
[88.22315216 -22.16924858]
[87.26210022 -37.13842773]
[73.59902191 -44.01357651]
[65.26671600 -56.72063828]
[64.41918182 -71.79206848]
[71.18405151 -85.17461395]
[83.65516663 -93.31936646]
[82.69410706 -108.28855133]
[81.73305511 -123.25772858]
[80.77200317 -138.22691345]
[66.76593781 -144.39851379]
[57.24133301 -156.37934875]
[54.38688660 -171.41632080]
[58.85852051 -186.05404663]
[69.62869263 -196.92889404]
[84.22248840 -201.54187012]
[99.28636932 -198.83297729]
[111.35875702 -189.42468262]
[117.66551208 -175.47894287]
[116.75738525 -160.20040894]
[108.84305573 -147.09994507]
[95.74118805 -139.18795776]
[96.70223999 -124.21878052]
[97.66329193 -109.24960327]
[98.62434387 -94.28042603]
[112.03459167 -87.79730225]
[120.45524597 -75.38970947]
[121.54196167 -60.33362961]
[114.90300751 -46.66537857]
[102.23127747 -38.09948349]
[103.19233704 -23.13030052]
[106.83026123 -16.53404808]
[103.93645477 -7.66736031]
[104.41722870 7.32493305]
[104.89800262 22.31722641]
[105.37877655 37.30952072]
[105.85955048 52.30181122]
[114.00080109 64.77455139]
[106.70979309 78.81562805]
[107.19056702 93.80792236]
[110.23412323 98.32898712]
[110.41708374 104.24823761]
[107.19056702 109.76947021]
[106.70979309 124.76176453]
[106.22901917 139.75405884]
[105.74824524 154.74635315]
[105.26747131 169.73864746]
[104.78669739 184.73094177]
[113.08306885 194.76603699]
[112.26387024 207.35653687]
[103.32663727 215.68132019]
[102.36558533 230.65051270]
[101.64457703 245.63316345]
[101.16380310 260.62545776]
[114.10356903 268.78082275]
[121.17720795 282.22924805]
[120.57362366 297.31240845]
[112.55497742 309.98355103]
[99.35941315 316.89315796]
[98.87863922 331.88543701]
[112.43465424 338.89950562]
[121.59806061 351.10583496]
[124.54943848 366.08090210]
[120.70280457 380.85134888]
[110.82189941 392.48449707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[13 86]
[14 85]
[16 84]
[17 83]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[25 72]
[26 71]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 63]
[34 62]
[39 57]
[40 56]
[41 55]
[42 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
