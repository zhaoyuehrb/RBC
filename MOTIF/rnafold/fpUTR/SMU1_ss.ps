%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGACCCAAGCGGAAGUGACGUUAGGUGUCCGCCGGAGGUGUCGUUGGUGUGUUGCGCGACUGGCCUUGAGGGAGAGCUGGGGCCUGCUCCCGGAGAGAUACGGCU\
) } def
/len { sequence length } bind def

/coor [
[75.46577454 175.68199158]
[81.51210785 159.84286499]
[81.51210785 144.84286499]
[81.51210785 129.84286499]
[68.59438324 122.21840668]
[55.46229935 129.46742249]
[42.33021545 136.71646118]
[29.30395699 144.15396118]
[16.38622856 151.77842712]
[8.43461704 165.45622253]
[-6.45872498 165.26223755]
[-19.37645340 172.88670349]
[-32.29418182 180.51115417]
[-45.21191025 188.13560486]
[-47.60062408 203.58966064]
[-59.39815903 213.85379028]
[-75.03408813 214.08155823]
[-87.12558746 204.16543579]
[-89.96343994 188.78750610]
[-82.20768738 175.20877075]
[-67.52035522 169.84066772]
[-52.83636475 175.21788025]
[-39.91863632 167.59342957]
[-27.00090790 159.96896362]
[-14.08317947 152.34451294]
[-7.05553055 139.21205139]
[8.76177406 138.86068726]
[21.67950249 131.23623657]
[25.90406990 125.03199768]
[35.08118820 123.58437347]
[48.21327209 116.33534241]
[61.34535599 109.08631897]
[76.81996155 88.10940552]
[95.26456451 88.54463959]
[91.83649445 73.94161224]
[88.40842438 59.33858871]
[84.98035431 44.73556519]
[81.55228424 30.13253975]
[68.40171814 21.78387070]
[65.13319397 6.92549324]
[73.17341614 -5.56011534]
[69.74534607 -20.16314125]
[66.31727600 -34.76616669]
[62.88920975 -49.36919022]
[47.97700882 -52.62326813]
[35.95876312 -62.03201675]
[29.22070503 -75.72731781]
[29.10067940 -90.98996735]
[35.62251663 -104.78954315]
[47.49130630 -114.38613892]
[62.35048294 -117.87434387]
[77.24975586 -114.56156158]
[89.23085785 -105.10556030]
[95.91493225 -91.38382721]
[95.97485352 -76.12083435]
[89.39871979 -62.34704208]
[77.49223328 -52.79726028]
[80.92030334 -38.19423294]
[84.34837341 -23.59120941]
[87.77644348 -8.98818398]
[100.53262329 -1.38454473]
[104.21720123 13.37616539]
[96.15531158 26.70447159]
[99.58338165 41.30749512]
[103.01145172 55.91052246]
[106.43952179 70.51354980]
[109.86759186 85.11656952]
[120.99545288 95.17492676]
[135.86947632 97.11495972]
[150.74348450 99.05499268]
[161.42906189 87.95884705]
[176.42420959 85.31327820]
[189.94197083 91.92646027]
[196.89039612 105.07398224]
[211.76440430 107.01401520]
[220.83464050 105.00256348]
[227.03675842 109.23027039]
[241.84867859 111.59813690]
[256.66061401 113.96599579]
[271.47253418 116.33386230]
[282.36508179 105.28250885]
[297.67858887 102.77746582]
[311.52478027 109.78197479]
[318.57946777 123.60265350]
[316.12997437 138.92517090]
[305.11819458 149.85771179]
[289.77838135 152.19648743]
[276.00900269 145.04219055]
[269.10467529 131.14579773]
[254.29273987 128.77792358]
[239.48081970 126.41006470]
[224.66888428 124.04219818]
[209.82437134 121.88802338]
[194.95036316 119.94799042]
[184.86207581 130.87339783]
[170.10029602 133.79804993]
[156.28540039 127.39476776]
[148.80345154 113.92900848]
[133.92944336 111.98897552]
[119.05541992 110.04894257]
[113.41959381 114.99742126]
[123.31637573 126.26923370]
[112.04441833 136.16584778]
[102.14794159 124.89437866]
[96.51210785 129.84286499]
[96.51210785 144.84286499]
[96.51210785 159.84286499]
[102.55844879 175.68199158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 107]
[3 106]
[4 105]
[5 32]
[6 31]
[7 30]
[8 28]
[9 27]
[11 25]
[12 24]
[13 23]
[14 22]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[41 60]
[42 59]
[43 58]
[44 57]
[68 100]
[69 99]
[70 98]
[74 94]
[75 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
