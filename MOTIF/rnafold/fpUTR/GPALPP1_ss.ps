%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUUACGUCAUUUCUCGGCGCCGGGAAACCUGCCAUUCUUCGCUGCUGAUCGCGGGAUUCUUUUUGGAUAGGGUUGACGUUCGUGGAUAGACUCAUAUCUGUGACCAGUGUCCGCCACCGCGG\
) } def
/len { sequence length } bind def

/coor [
[115.61193085 217.03082275]
[112.81594849 202.29370117]
[115.37340546 187.51333618]
[122.95851898 174.57246399]
[134.60508728 165.11955261]
[148.82951355 160.35873413]
[163.81755066 160.89595032]
[151.86056519 151.83888245]
[139.90357971 142.78181458]
[127.94659424 133.72474670]
[115.98960876 124.66767883]
[104.03261566 115.61061096]
[89.07456207 114.48966217]
[75.90123749 121.66347504]
[62.72791672 128.83728027]
[49.55459213 136.01109314]
[36.38126755 143.18490601]
[23.20794487 150.35870361]
[10.03462029 157.53251648]
[1.94988656 171.80027771]
[-14.44867802 171.66198730]
[-22.29163551 157.25990295]
[-13.51082325 143.40966797]
[2.86081100 144.35919189]
[16.03413391 137.18539429]
[29.20745850 130.01158142]
[42.38078308 122.83776855]
[55.55410385 115.66395569]
[68.72743225 108.49015045]
[81.90074921 101.31633759]
[85.96335602 86.87697601]
[78.46335602 73.88659668]
[70.96335602 60.89621353]
[63.46335983 47.90583038]
[55.80200195 35.00995636]
[47.98047256 22.21059418]
[40.15894318 9.41123104]
[21.85988808 10.55782604]
[5.53983498 2.38742065]
[-4.41474724 -12.80960369]
[-5.37582588 -30.86721420]
[2.83288527 -46.88563538]
[-5.92326975 -59.06470490]
[-13.56006050 -64.27864075]
[-14.74142838 -71.65834045]
[-23.19122887 -84.05192566]
[-31.64102936 -96.44550323]
[-40.09083176 -108.83908844]
[-55.52344131 -113.22247314]
[-61.58528137 -128.07621765]
[-53.62622833 -142.00578308]
[-37.75178528 -144.32562256]
[-26.13946533 -133.25613403]
[-27.69724846 -117.28888702]
[-19.24744797 -104.89530182]
[-10.79764748 -92.50172424]
[-2.34784627 -80.10813904]
[6.25580025 -67.82086182]
[15.01195526 -55.64179230]
[26.62961960 -58.46619415]
[38.54883957 -57.15674591]
[49.33881378 -51.84671021]
[57.69614410 -43.15102386]
[62.60228729 -32.09516144]
[63.44763184 -19.99422646]
[60.10717392 -8.29654408]
[52.95830917 1.58970320]
[60.77983475 14.38906670]
[68.60136414 27.18842888]
[74.84211731 31.30042839]
[76.45374298 40.40583038]
[83.95374298 53.39621353]
[91.45374298 66.38659668]
[98.95374298 79.37697601]
[110.03507996 84.70115662]
[114.92662048 94.39807129]
[113.08968353 103.65362549]
[125.04667664 112.71069336]
[137.00366211 121.76776123]
[148.96064758 130.82482910]
[160.91763306 139.88189697]
[172.87461853 148.93894958]
[179.93563843 149.10073853]
[185.49176025 152.28482056]
[188.48745728 157.19058228]
[202.70635986 161.96788025]
[216.92527771 166.74517822]
[231.14418030 171.52247620]
[245.36309814 176.29977417]
[259.58200073 181.07707214]
[273.80090332 185.85437012]
[287.39306641 175.87567139]
[304.08935547 175.92343140]
[317.35848999 185.78237915]
[322.12664795 201.43771362]
[336.46023560 205.85903931]
[350.79382324 210.28036499]
[365.12741089 214.70169067]
[380.98629761 210.52700806]
[392.33737183 222.36276245]
[387.50366211 238.03334045]
[371.45764160 241.41819763]
[360.70608521 229.03527832]
[346.37249756 224.61395264]
[332.03890991 220.19262695]
[317.70532227 215.77130127]
[307.75881958 224.76733398]
[294.55419922 227.66990662]
[281.54461670 223.60968018]
[272.18698120 213.55274963]
[269.02362061 200.07328796]
[254.80470276 195.29598999]
[240.58580017 190.51869202]
[226.36688232 185.74139404]
[212.14797974 180.96408081]
[197.92906189 176.18678284]
[183.71015930 171.40948486]
[192.59812927 183.49269104]
[196.67665100 197.92758179]
[195.42617798 212.87536621]
[189.00601196 226.43196106]
[178.23397827 236.87051392]
[164.48222351 242.86129761]
[149.50251770 243.64118958]
[135.20300293 239.11087036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[31 74]
[32 73]
[33 72]
[34 71]
[35 69]
[36 68]
[37 67]
[42 59]
[43 58]
[45 57]
[46 56]
[47 55]
[48 54]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
