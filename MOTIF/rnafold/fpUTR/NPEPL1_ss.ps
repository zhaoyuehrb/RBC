%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGUGCCGAGGCCGGGCCGGAGCGGGGCGAAGGGGGCCGAGCGGCGGGCCGGGCCGGGCCGGGCAGGGCCGGGGCGUGGGCCGGCAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[98.17859650 144.38127136]
[95.40162659 129.64056396]
[100.66996002 115.59870148]
[94.03562927 129.05178833]
[87.40129852 142.50488281]
[85.81862640 159.38479614]
[69.16026306 162.53680420]
[61.51994324 147.40200806]
[73.94821167 135.87055969]
[80.58254242 122.41745758]
[87.21687317 108.96437073]
[74.04620361 116.14305115]
[60.56614304 109.56369781]
[58.12267303 94.76405334]
[68.77243042 84.20078278]
[83.55171967 86.76489258]
[72.94512177 76.15829468]
[62.33852005 65.55168915]
[51.73191833 54.94509125]
[36.50262451 50.65799332]
[32.97418213 36.18735504]
[22.36758041 25.58075142]
[11.76097870 14.97415066]
[-3.81494117 14.80545521]
[-14.42044830 3.89775753]
[-14.16363430 -10.95046234]
[-24.77023506 -21.55706406]
[-40.34615707 -21.72575951]
[-50.95166397 -32.63345718]
[-50.69484711 -47.48167801]
[-61.30144882 -58.08827972]
[-71.90805054 -68.69487762]
[-87.46931458 -67.15182495]
[-100.35256958 -76.01499939]
[-104.47472382 -91.09949493]
[-97.88942719 -105.28285980]
[-83.70606232 -111.86815643]
[-68.62157440 -107.74599457]
[-59.75839233 -94.86274719]
[-61.30144882 -79.30148315]
[-50.69484711 -68.69487762]
[-40.08824539 -58.08827972]
[-25.24002647 -58.34509277]
[-14.33232975 -47.73958588]
[-14.16363430 -32.16366577]
[-3.55703235 -21.55706406]
[11.29118729 -21.81387901]
[22.19888496 -11.20837116]
[22.36758041 4.36754894]
[32.97418213 14.97415066]
[43.58078384 25.58075142]
[58.05142212 29.10919571]
[62.33852005 44.33848953]
[72.94512177 54.94509125]
[83.55171967 65.55168915]
[94.15832520 76.15829468]
[121.13658142 89.38081360]
[136.10446167 90.36186218]
[151.07234192 91.34291077]
[166.04023743 92.32395935]
[181.00811768 93.30500793]
[195.28479004 86.48684692]
[207.47875977 95.03998566]
[222.44664001 96.02102661]
[237.41453552 97.00207520]
[251.69119263 90.18391418]
[263.88519287 98.73705292]
[278.85305786 99.71810150]
[287.94180298 87.25221252]
[302.33554077 81.70030212]
[317.44128418 84.83395386]
[328.43887329 95.65324402]
[331.81896973 110.70576477]
[326.50305176 125.18831635]
[314.18734741 134.47956848]
[298.80181885 135.61471558]
[285.25588989 128.23153687]
[277.87200928 114.68598175]
[262.90414429 113.70494080]
[249.69805908 120.59326935]
[236.43348694 111.96996307]
[221.46560669 110.98891449]
[206.49771118 110.00786591]
[193.29165649 116.89619446]
[180.02706909 108.27288818]
[165.05918884 107.29183960]
[150.09130859 106.31079102]
[135.12341309 105.32975006]
[120.15553284 104.34870148]
[134.95252991 106.80815887]
[146.32901001 116.58443451]
[150.98652649 130.84303284]
[147.57467651 145.44985962]
[137.08270264 156.16986084]
[122.55258942 159.89489746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[16 56]
[17 55]
[18 54]
[19 53]
[21 51]
[22 50]
[23 49]
[26 46]
[27 45]
[30 42]
[31 41]
[32 40]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[63 83]
[64 82]
[65 81]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
