%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUCAGUCCAAAAACCAGCGUGCCAAAGCGUUUCCCCAGGGCUCUGUCCGGACUCUGAAGCACUGCAUAAAGGGGUCUGUCUGAGCCCAAUUUACUUCCGGUGGGGAAGGGAAAGGGAAGACACCACCGGAAGCAAGGAAGGUGCUGUGUAAUCAUUAAGGAGCGGAGGCUUUUGGAGCUGCUAAA\
) } def
/len { sequence length } bind def

/coor [
[69.41426086 474.36593628]
[57.96946716 464.20349121]
[52.56917572 449.88232422]
[54.45433807 434.69335938]
[63.19175339 422.12689209]
[76.77362823 415.07061768]
[76.77362823 400.07061768]
[76.77362823 385.07061768]
[76.64896393 370.07113647]
[76.39964294 355.07321167]
[76.15032196 340.07528687]
[75.90100098 325.07733154]
[75.65167999 310.07940674]
[75.40235901 295.08148193]
[75.15303802 280.08355713]
[67.20526123 267.48666382]
[74.71211243 253.55978394]
[74.46279144 238.56185913]
[63.61190414 228.42312622]
[63.14540482 213.21664429]
[73.85340118 201.90397644]
[73.60408020 186.90605164]
[73.35475922 171.90812683]
[65.40698242 159.31121826]
[72.91384125 145.38433838]
[72.66451263 130.38641357]
[69.87723541 107.03845978]
[80.49515533 92.22934723]
[93.91248322 90.76919556]
[90.94029236 76.06660461]
[87.96810150 61.36402130]
[75.46656036 47.85583496]
[81.67746735 31.45129395]
[78.46131134 16.80014038]
[75.24514771 2.14898539]
[72.02899170 -12.50216866]
[68.81282806 -27.15332222]
[50.43139648 -31.64251328]
[36.50934982 -44.32157898]
[30.38535309 -62.03167725]
[33.47128296 -80.42225647]
[21.14835548 -88.97476959]
[8.82542706 -97.52728271]
[-3.49750018 -106.07979584]
[-15.82042694 -114.63230133]
[-28.14335442 -123.18481445]
[-40.79393005 -117.68489838]
[-54.40168762 -119.14734650]
[-65.41890717 -127.08319855]
[-71.02656555 -139.32989502]
[-69.85527802 -152.63966370]
[-82.03434753 -161.39581299]
[-94.21341705 -170.15197754]
[-106.39248657 -178.90812683]
[-118.57155609 -187.66427612]
[-130.75062561 -196.42044067]
[-142.92970276 -205.17658997]
[-155.10876465 -213.93273926]
[-172.12980652 -207.72994995]
[-189.32054138 -212.92651367]
[-199.86911011 -227.26663208]
[-199.71379089 -244.91093445]
[-212.17716980 -253.25744629]
[-228.70216370 -257.04699707]
[-229.63525391 -273.97525024]
[-213.62687683 -279.55810547]
[-203.83065796 -265.72082520]
[-191.36727905 -257.37429810]
[-180.70056152 -263.21496582]
[-168.49014282 -263.96322632]
[-157.05581665 -259.41531372]
[-148.59620667 -250.37950134]
[-144.76600647 -238.53323364]
[-146.35261536 -226.11181641]
[-134.17353821 -217.35566711]
[-121.99447632 -208.59950256]
[-109.81539917 -199.84335327]
[-97.63632965 -191.08718872]
[-85.45726013 -182.33103943]
[-73.27819061 -173.57489014]
[-61.09912109 -164.81872559]
[-45.69479752 -170.46672058]
[-29.79820251 -165.77963257]
[-19.72225952 -152.41258240]
[-19.59084320 -135.50775146]
[-7.26791525 -126.95523071]
[5.05501175 -118.40271759]
[17.37793922 -109.85021210]
[29.70086670 -101.29769897]
[42.02379227 -92.74518585]
[47.39463425 -97.02046204]
[53.45234299 -100.24971008]
[59.99562454 -102.32562256]
[66.80703735 -103.17919922]
[73.66022491 -102.78208923]
[80.32746124 -101.14748383]
[86.58717346 -98.32969666]
[96.41864777 -109.65851593]
[106.25012207 -120.98733521]
[116.08159637 -132.31616211]
[125.91307068 -143.64497375]
[135.74453735 -154.97380066]
[145.57601929 -166.30261230]
[155.40748596 -177.63142395]
[165.23896790 -188.96025085]
[175.07043457 -200.28906250]
[167.06811523 -213.11303711]
[163.20285034 -227.72642517]
[163.81834412 -242.82981873]
[168.85986328 -257.08023071]
[177.87911987 -269.21054077]
[190.07414246 -278.14212036]
[204.36053467 -283.08078003]
[219.46798706 -283.58734131]
[234.05311584 -279.61682129]
[246.81906128 -271.52224731]
[256.63067627 -260.02340698]
[262.61547852 -246.14271545]
[264.24136353 -231.11447144]
[261.36370850 -216.27497864]
[254.23843384 -202.94375610]
[243.49908447 -192.30618286]
[230.10061646 -185.30816650]
[215.23439026 -182.57196045]
[200.22232056 -184.34086609]
[186.39924622 -190.45759583]
[176.56777954 -179.12876892]
[166.73631287 -167.79995728]
[156.90483093 -156.47114563]
[147.07336426 -145.14231873]
[137.24188232 -133.81350708]
[127.41041565 -122.48468018]
[117.57894135 -111.15586090]
[107.74746704 -99.82704926]
[97.91599274 -88.49822998]
[105.13609314 -73.13974762]
[104.89704132 -56.08736420]
[97.17433929 -40.78890991]
[83.46398163 -30.36948204]
[86.68014526 -15.71832848]
[89.89630127 -1.06717408]
[93.11246490 13.58398056]
[96.32862091 28.23513412]
[106.35272980 35.02711105]
[109.14375305 47.22125244]
[102.67068481 58.39182663]
[105.64287567 73.09441376]
[108.61506653 87.79700470]
[118.16104889 99.36740875]
[132.03114319 105.07884979]
[145.90122986 110.79029846]
[162.07501221 108.08087158]
[172.29814148 120.90348816]
[166.05395508 136.06733704]
[149.76593018 137.97314453]
[140.18978882 124.66038513]
[126.31969452 118.94893646]
[112.44960785 113.23749542]
[106.25281525 117.46239471]
[107.37407684 132.42042542]
[93.85923767 125.91219330]
[87.66244507 130.13710022]
[87.91176605 145.13502502]
[95.87737274 158.80468750]
[88.35269165 171.65879822]
[88.60201263 186.65673828]
[88.85133362 201.65466309]
[99.92942810 212.60516357]
[99.96862793 227.81874084]
[89.46072388 238.31253052]
[89.71004486 253.31045532]
[97.67565155 266.98013306]
[90.15097046 279.83422852]
[90.40029144 294.83218384]
[90.64961243 309.83010864]
[90.89893341 324.82803345]
[91.14825439 339.82595825]
[91.39757538 354.82388306]
[91.64689636 369.82180786]
[94.92359161 378.36904907]
[91.77362823 385.07061768]
[91.77362823 400.07061768]
[91.77362823 415.07061768]
[105.35550690 422.12689209]
[114.09292603 434.69335938]
[115.97808838 449.88232422]
[110.57779694 464.20349121]
[99.13300323 474.36593628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 183]
[7 182]
[8 181]
[9 179]
[10 178]
[11 177]
[12 176]
[13 175]
[14 174]
[15 173]
[17 171]
[18 170]
[21 167]
[22 166]
[23 165]
[25 163]
[26 162]
[29 148]
[30 147]
[31 146]
[33 143]
[34 142]
[35 141]
[36 140]
[37 139]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[62 68]
[63 67]
[97 135]
[98 134]
[99 133]
[100 132]
[101 131]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
