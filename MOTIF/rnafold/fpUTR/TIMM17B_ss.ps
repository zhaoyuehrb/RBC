%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGGAGCAGAGGGCAGCACUUCCUCCAGCUCCAAAAGAGUGCACCCACCCCAACGUUACCAAUACACUCGUGCAGGCGGAAAGCUCCGACGCCGGUGUGCGUCUACGCUGGGGGCGUGGCCUGACUGCGCGGCCAGACGCCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[95.62366486 143.99253845]
[89.66522980 142.98474121]
[83.89988708 141.17379761]
[78.43536377 138.59355164]
[73.37377167 135.29220581]
[62.43924332 145.56040955]
[51.50471115 155.82861328]
[40.57018280 166.09681702]
[29.63565445 176.36502075]
[24.75935173 194.09002686]
[7.57281876 197.49595642]
[-3.14427161 207.99090576]
[-13.86136150 218.48585510]
[-24.57845116 228.98080444]
[-35.29554367 239.47575378]
[-33.91552353 255.05232239]
[-42.91312790 267.84204102]
[-58.03995514 271.80603027]
[-72.15358734 265.07257080]
[-78.58999634 250.82101440]
[-74.31010437 235.78051758]
[-61.33474731 227.05273438]
[-45.79049301 228.75866699]
[-35.07340240 218.26371765]
[-24.35631180 207.76875305]
[-13.63922119 197.27380371]
[-2.92213154 186.77885437]
[-2.46879792 174.64935303]
[6.43181467 165.81632996]
[19.36744690 165.43049622]
[30.30197716 155.16229248]
[41.23650742 144.89408875]
[52.17103577 134.62588501]
[63.10556412 124.35767365]
[56.70707703 108.95647430]
[56.46945572 92.28070831]
[62.42651749 76.70345306]
[73.73052979 64.44145203]
[88.77286530 57.23965836]
[105.41288757 56.12294388]
[109.74836731 41.76314926]
[102.53662872 27.95631981]
[107.13797760 13.45520973]
[120.34512329 6.66500330]
[124.68059540 -7.69478893]
[129.01608276 -22.05458069]
[121.31085968 -33.15015793]
[121.42279816 -46.46328354]
[129.08580017 -57.11110306]
[141.30546570 -61.31813431]
[145.94071960 -75.58398438]
[150.57597351 -89.84983063]
[155.21122742 -104.11567688]
[159.84648132 -118.38152313]
[156.75236511 -133.89723206]
[168.04391479 -143.61062622]
[172.67916870 -157.87646484]
[177.31442261 -172.14231873]
[173.04847717 -190.02403259]
[186.46833801 -201.28834534]
[190.80381775 -215.64813232]
[185.08074951 -224.99552917]
[185.47663879 -235.72805786]
[191.61579895 -244.27026367]
[201.24981689 -247.91107178]
[206.18281555 -262.07672119]
[211.11582947 -276.24237061]
[216.04882812 -290.40802002]
[220.98182678 -304.57366943]
[220.85470581 -313.77499390]
[226.16931152 -318.98245239]
[231.39788818 -333.04168701]
[231.46350098 -342.24365234]
[236.88598633 -347.33868408]
[242.40785217 -361.28530884]
[235.65812683 -372.98675537]
[236.88368225 -386.24380493]
[245.41078186 -396.21307373]
[257.93963623 -399.38281250]
[263.75238037 -413.21078491]
[269.56509399 -427.03872681]
[275.37783813 -440.86666870]
[272.78677368 -457.05981445]
[285.68380737 -467.18890381]
[300.80160522 -460.83398438]
[302.58822632 -444.53244019]
[289.20578003 -435.05392456]
[283.39306641 -421.22598267]
[277.58032227 -407.39804077]
[271.76757812 -393.57009888]
[278.78701782 -378.32009888]
[272.51144409 -362.38656616]
[256.35449219 -355.76345825]
[250.83264160 -341.81680298]
[245.45712280 -327.81311035]
[240.22853088 -313.75387573]
[235.14746094 -299.64065552]
[230.21446228 -285.47500610]
[225.28146362 -271.30935669]
[220.34846497 -257.14373779]
[215.41546631 -242.97807312]
[220.47633362 -224.35597229]
[205.16360474 -211.31265259]
[200.82812500 -196.95286560]
[206.27430725 -186.10530090]
[202.72998047 -174.07696533]
[191.58027649 -167.50706482]
[186.94502258 -153.24121094]
[182.30976868 -138.97537231]
[185.73542786 -124.48005676]
[174.11233521 -113.74626923]
[169.47708130 -99.48042297]
[164.84182739 -85.21457672]
[160.20657349 -70.94873047]
[155.57131958 -56.68288040]
[163.84220886 -42.07373047]
[158.92192078 -25.67096710]
[143.37586975 -17.71910477]
[139.04039001 -3.35931206]
[134.70491028 11.00048065]
[141.94778442 23.96491051]
[137.75555420 38.58954239]
[124.10816193 46.09862900]
[119.77268219 60.45841980]
[133.75738525 71.45294189]
[142.27644348 87.06950378]
[143.95054626 104.77964020]
[138.50863647 121.71590424]
[126.83181000 135.13615417]
[133.78125000 148.42921448]
[140.73068237 161.72225952]
[147.68013000 175.01531982]
[154.76838684 188.23487854]
[161.99468994 201.37947083]
[169.22099304 214.52407837]
[184.16389465 220.36270142]
[188.77798462 235.72792053]
[179.52374268 248.83282471]
[163.50024414 249.62448120]
[152.99932861 237.49557495]
[156.07640076 221.75038147]
[148.85009766 208.60577393]
[141.62379456 195.46118164]
[135.60548401 191.08593750]
[134.38706970 181.96476746]
[127.43763733 168.67170715]
[120.48819733 155.37864685]
[113.53874969 142.08560181]
[107.67299652 143.53872681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[40 124]
[41 123]
[44 120]
[45 119]
[46 118]
[50 115]
[51 114]
[52 113]
[53 112]
[54 111]
[56 109]
[57 108]
[58 107]
[60 104]
[61 103]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[71 96]
[72 95]
[74 94]
[75 93]
[79 90]
[80 89]
[81 88]
[82 87]
[129 148]
[130 147]
[131 146]
[132 145]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
