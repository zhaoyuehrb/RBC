%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCGUCACGUCCGGCCUGCGAGUUACCGCCCACUCGCUGCGGCGCUUCUGGCUCCAGACCGCCCUCCGGAUCGGACCCUGCGAAUGGUUUUGGCUAUAUCUUC\
) } def
/len { sequence length } bind def

/coor [
[211.45639038 283.79086304]
[226.15599060 286.77273560]
[218.14863586 274.08880615]
[210.14128113 261.40484619]
[202.13392639 248.72091675]
[193.57080078 236.40536499]
[184.46879578 224.48255920]
[175.36679077 212.55973816]
[168.69938660 209.09747314]
[166.17797852 200.14604187]
[157.43328857 187.95874023]
[148.50895691 175.90235901]
[139.40695190 163.97953796]
[130.30494690 152.05671692]
[121.20294952 140.13391113]
[112.10095215 128.21109009]
[97.80564880 130.61834717]
[83.99972534 126.19713593]
[73.76217651 115.93345642]
[69.37615967 102.11631012]
[54.61269760 99.46295929]
[39.84923935 96.80960846]
[25.08578110 94.15625000]
[10.32232189 91.50289917]
[-4.44113636 88.84954071]
[-15.54497337 99.68856812]
[-30.90401268 101.89752960]
[-44.61239243 94.62704468]
[-51.39895630 80.67275238]
[-48.65413666 65.40037537]
[-37.43337250 54.68244553]
[-22.05127335 52.64022827]
[-8.42257118 60.05899429]
[-1.78778231 74.08608246]
[12.97567654 76.73944092]
[27.73913574 79.39279175]
[42.50259399 82.04614258]
[57.26605225 84.69950104]
[72.02951050 87.35285187]
[75.83083344 81.07514954]
[81.01361084 75.87914276]
[87.28160858 72.06183624]
[94.27656555 69.84140778]
[95.16516876 54.86774826]
[96.05377960 39.89409256]
[96.94239044 24.92043877]
[88.92993164 14.67904854]
[90.07541656 2.13094234]
[99.20709991 -5.95524311]
[100.53903961 -20.89599037]
[101.87097931 -35.83673859]
[103.20291901 -50.77748489]
[95.80981445 -65.41558838]
[105.01541138 -78.98721313]
[121.34978485 -77.53103638]
[128.00952148 -62.54504776]
[118.14366913 -49.44554901]
[116.81172943 -34.50479889]
[115.47978973 -19.56405258]
[114.14785004 -4.62330437]
[122.41935730 10.77561760]
[111.91604614 25.80904770]
[111.02743530 40.78270340]
[110.13882446 55.75635910]
[109.25022125 70.73001862]
[124.99867249 82.18526459]
[130.68618774 100.81021118]
[124.02376556 119.10908508]
[133.12576294 131.03190613]
[142.22776794 142.95472717]
[151.32977295 154.87753296]
[160.43177795 166.80035400]
[168.25653076 171.82615662]
[169.62059021 179.21405029]
[178.36528015 191.40135193]
[187.28961182 203.45773315]
[196.39161682 215.38055420]
[205.49360657 227.30335999]
[210.62138367 229.42048645]
[213.98635864 232.99731445]
[215.32534790 237.06900024]
[214.81787109 240.71356201]
[222.82522583 253.39750671]
[230.83258057 266.08145142]
[238.83992004 278.76538086]
[248.29124451 290.41323853]
[259.05386353 300.86151123]
[269.81646729 311.30978394]
[280.57907104 321.75802612]
[291.34167480 332.20629883]
[307.36682129 335.68869019]
[312.10516357 351.38836670]
[300.68234253 363.15487671]
[284.84912109 358.88381958]
[280.89340210 342.96890259]
[270.13079834 332.52066040]
[259.36819458 322.07238770]
[248.60559082 311.62411499]
[237.84297180 301.17584229]
[237.73277283 316.17544556]
[229.01116943 328.37930298]
[214.85565186 333.34124756]
[200.42335510 329.25360107]
[190.97229004 317.60556030]
[189.94566345 302.64071655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 82]
[6 78]
[7 77]
[8 76]
[10 75]
[11 74]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[43 65]
[44 64]
[45 63]
[46 62]
[49 60]
[50 59]
[51 58]
[52 57]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
