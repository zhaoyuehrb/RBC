%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAGGAGGCAGGACAGCACUGCUGAGAGCUGUGCUCAGGAAGCUUCUGGAUCCUAGGCUCAUCUCCACAGAGGAGAACACACAGACAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[72.02573395 106.17592621]
[57.04272461 105.46219635]
[42.05971527 104.74846649]
[27.07670403 104.03473663]
[12.09369469 103.32101440]
[-2.88931584 102.60728455]
[-10.66118336 117.73920441]
[-24.16634750 127.99269867]
[-40.72314835 131.39099121]
[-57.06945801 127.31267548]
[-70.00539398 116.60472107]
[-77.01972198 101.40707397]
[-92.01783752 101.64506531]
[-105.69351196 109.60034180]
[-118.54193878 102.06594849]
[-133.54005432 102.30393982]
[-148.53816223 102.54192352]
[-163.53627014 102.77991486]
[-178.53439331 103.01790619]
[-192.21006775 110.97318268]
[-205.05848694 103.43878937]
[-220.05661011 103.67678070]
[-233.84120178 112.56030273]
[-248.30119324 104.82462311]
[-248.56137085 88.42754364]
[-234.35411072 80.23696899]
[-220.29460144 88.67866516]
[-205.29647827 88.44067383]
[-192.69357300 80.50241852]
[-178.77238464 88.01979065]
[-163.77426147 87.78180695]
[-148.77615356 87.54381561]
[-133.77804565 87.30582428]
[-118.77993011 87.06783295]
[-106.17701721 79.12957764]
[-92.25582886 86.64694977]
[-77.25771332 86.40896606]
[-72.69933319 74.03739929]
[-64.14347839 63.96352005]
[-52.61697769 57.43060303]
[-39.51502228 55.25490189]
[-26.43230629 57.72371674]
[-14.96891403 64.55767059]
[-6.53463316 74.94213104]
[-2.17558718 87.62427521]
[12.80742264 88.33799744]
[27.79043388 89.05172729]
[42.77344131 89.76545715]
[57.75645447 90.47918701]
[72.73946381 91.19291687]
[80.76898956 78.76630402]
[93.92773438 72.00305176]
[108.70604706 72.70703125]
[121.16231537 80.69047546]
[127.97426605 93.82407379]
[142.95727539 94.53780365]
[154.59617615 84.18532562]
[169.78091431 85.12258911]
[179.57868958 96.28229523]
[194.56169128 96.99602509]
[209.54470825 97.70975494]
[224.78417969 79.80645752]
[247.99542236 78.15603638]
[265.25320435 93.40357208]
[279.93524170 90.33147430]
[294.61727905 87.25937653]
[309.29931641 84.18727875]
[323.98135376 81.11517334]
[333.92974854 68.52911377]
[349.97262573 68.60389709]
[359.80325317 81.28215027]
[355.88043213 96.83820343]
[341.21340942 103.33879089]
[327.05346680 95.79721069]
[312.37142944 98.86930847]
[297.68939209 101.94141388]
[283.00735474 105.01351166]
[268.32531738 108.08560944]
[267.00735474 115.74321747]
[263.73550415 122.81553650]
[258.72399902 128.81181335]
[252.30825806 133.31266785]
[244.92243958 135.99940491]
[237.06997681 136.67655945]
[229.28935242 135.28607178]
[222.11715698 131.91207886]
[216.05105591 126.77590179]
[211.51528931 120.22155762]
[208.83097839 112.69276428]
[193.84797668 111.97903442]
[178.86495972 111.26530457]
[168.05075073 121.44314575]
[152.84567261 120.93276215]
[142.24354553 109.52081299]
[127.26053619 108.80708313]
[119.23101044 121.23369598]
[106.07226562 127.99694824]
[91.29395294 127.29296875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[12 37]
[13 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[21 28]
[22 27]
[55 95]
[56 94]
[59 91]
[60 90]
[61 89]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
