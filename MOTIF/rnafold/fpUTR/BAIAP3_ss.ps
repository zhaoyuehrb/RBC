%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACGGGCGAGGGGAGGAAGAAGGCGCCUCGGGCUCCGGUCUCCUGCGCUCCUGCUGGGCGCCAGCGGCUGGACCUUGGCAGCCGUCUGAGGCUUCGGGGAGCCCAAGGCCACCGGCAGCGCUUGUUAGAAUGCAGAUUCCCGGGGUUCGACUGGA\
) } def
/len { sequence length } bind def

/coor [
[-17.88543510 472.77383423]
[-32.07220459 477.64575195]
[-47.02312851 476.43334961]
[-60.23954391 469.33926392]
[-69.51267242 457.54904175]
[-73.29275513 443.03314209]
[-70.94925690 428.22073364]
[-81.18284607 439.18768311]
[-91.41642761 450.15460205]
[-101.65001678 461.12155151]
[-111.88360596 472.08847046]
[-105.25025940 485.73995972]
[-104.00023651 500.86618042]
[-108.30258942 515.42138672]
[-117.57546234 527.43713379]
[-130.56477356 535.28839111]
[-145.51382446 537.91333008]
[-160.40087891 534.95697021]
[-173.21258545 526.81915283]
[-182.21626282 514.60034180]
[-186.19424438 499.95318604]
[-184.60853577 484.85848999]
[-177.67359924 471.35769653]
[-166.32731628 461.27670288]
[-152.10418701 455.97888184]
[-136.92776489 456.18072510]
[-122.85054016 461.85488892]
[-112.61695099 450.88793945]
[-102.38336945 439.92102051]
[-92.14978027 428.95407104]
[-81.91619110 417.98715210]
[-73.17150116 405.79983521]
[-66.05973816 392.59292603]
[-58.94798279 379.38598633]
[-51.83622742 366.17907715]
[-44.72446823 352.97213745]
[-37.61270905 339.76519775]
[-30.50095177 326.55828857]
[-23.38919258 313.35134888]
[-16.27743530 300.14443970]
[-9.16567707 286.93750000]
[-17.10810661 274.33657837]
[-17.68064499 259.35232544]
[-10.62946606 246.00512695]
[2.24028301 237.92637634]
[17.52551270 237.37049866]
[24.63727188 224.16357422]
[31.74902916 210.95664978]
[38.86078644 197.74972534]
[45.97254562 184.54280090]
[45.19436646 169.66853333]
[58.54966354 161.18638611]
[65.66142273 147.97946167]
[61.14911270 133.83116150]
[68.17330933 120.33615112]
[83.04395294 115.69915009]
[90.15570831 102.49222565]
[90.90969849 94.42045593]
[97.54067993 89.09665680]
[104.91197968 76.03282166]
[112.28327942 62.96897888]
[119.65457916 49.90513992]
[127.02588654 36.84129715]
[134.39718628 23.77745819]
[128.11257935 9.71296501]
[131.27764893 -5.18118477]
[142.47361755 -15.23675156]
[157.26678467 -16.75335693]
[164.63809204 -29.81719589]
[172.00938416 -42.88103485]
[173.51554871 -51.94567490]
[179.65757751 -56.12808228]
[187.28553772 -69.04373932]
[194.91351318 -81.95938873]
[196.59846497 -90.99250031]
[202.82192993 -95.05274963]
[210.70358276 -107.81517029]
[218.58523560 -120.57759857]
[226.46688843 -133.34002686]
[234.34854126 -146.10244751]
[242.23019409 -158.86488342]
[242.81468201 -165.53694153]
[246.20098877 -170.18423462]
[250.68380737 -171.96713257]
[259.06350708 -184.40821838]
[256.24697876 -199.72830200]
[264.92242432 -212.22596741]
[279.54513550 -214.81668091]
[287.92483521 -227.25776672]
[296.30453491 -239.69885254]
[304.68423462 -252.13993835]
[313.06393433 -264.58102417]
[313.65670776 -280.96945190]
[328.27066040 -288.41021729]
[341.87219238 -279.24887085]
[340.46923828 -262.90985107]
[325.50503540 -256.20132446]
[317.12533569 -243.76022339]
[308.74563599 -231.31913757]
[300.36593628 -218.87806702]
[291.98623657 -206.43698120]
[295.08105469 -191.91259766]
[286.76007080 -179.17619324]
[271.50457764 -176.02851868]
[263.12487793 -163.58743286]
[254.99263000 -150.98321533]
[247.11097717 -138.22079468]
[239.22930908 -125.45836639]
[231.34765625 -112.69594574]
[223.46600342 -99.93351746]
[215.58435059 -87.17108917]
[207.82916260 -74.33142853]
[200.20120239 -61.41577148]
[192.57322693 -48.50011826]
[185.07322693 -35.50973511]
[177.70193481 -22.44589615]
[170.33062744 -9.38205528]
[176.68070984 4.06467438]
[173.86181641 18.84702492]
[162.74913025 29.25671959]
[147.46102905 31.14875984]
[140.08972168 44.21260071]
[132.71842957 57.27643967]
[125.34712219 70.34027863]
[117.97582245 83.40412140]
[110.60451508 96.46795654]
[103.36263275 109.60398102]
[96.25087738 122.81091309]
[100.56470490 137.77848816]
[93.16423798 151.07089233]
[78.86834717 155.09123230]
[71.75659180 168.29815674]
[72.02608490 184.11706543]
[59.17947006 191.65455627]
[52.06771469 204.86148071]
[44.95595551 218.06840515]
[37.84419632 231.27532959]
[30.73243904 244.48225403]
[38.68173218 257.54962158]
[39.02074432 272.74111938]
[31.75854683 285.97467041]
[18.93328094 293.74438477]
[4.04124880 294.04925537]
[-3.07050920 307.25619507]
[-10.18226719 320.46310425]
[-17.29402542 333.67004395]
[-24.40578270 346.87698364]
[-31.51754189 360.08389282]
[-38.62929916 373.29083252]
[-45.74105835 386.49774170]
[-52.85281372 399.70468140]
[-59.96457291 412.91159058]
[-46.67964554 405.94662476]
[-31.71761894 404.88000488]
[-17.57900429 409.88995361]
[-6.62670326 420.13919067]
[-0.69110966 433.91485596]
[-0.76420337 448.91467285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[32 152]
[33 151]
[34 150]
[35 149]
[36 148]
[37 147]
[38 146]
[39 145]
[40 144]
[41 143]
[46 138]
[47 137]
[48 136]
[49 135]
[50 134]
[52 132]
[53 131]
[56 128]
[57 127]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
[64 121]
[68 117]
[69 116]
[70 115]
[72 114]
[73 113]
[74 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[84 105]
[85 104]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
