%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACGCUUUUCAUCUGUCCCGCUGCGUGUUUUCCUCUUGAUCGGGAACUCCUGCUUCUCCUUGCCUCGAA\
) } def
/len { sequence length } bind def

/coor [
[44.15772247 143.02232361]
[37.11188889 131.84910583]
[32.27421951 119.55757904]
[17.50210381 122.16230774]
[2.72998762 124.76702881]
[-12.04212856 127.37174988]
[-26.81424522 129.97647095]
[-29.14828300 144.93745422]
[-36.21588516 158.32878113]
[-47.25041199 168.69787598]
[-61.05491638 174.91995239]
[-76.13199615 176.32009888]
[-90.84619904 172.74644470]
[-103.60143280 164.58663940]
[-113.01411438 152.72576904]
[-118.06322479 138.45042419]
[-118.20106506 123.30910492]
[-113.41269684 108.94420624]
[-104.21751404 96.91394043]
[-91.61295319 88.52324677]
[-76.96624756 84.68229675]
[-61.86618042 85.80772400]
[-47.95067978 91.77745056]
[-36.72920227 101.94391632]
[-29.41896820 115.20435333]
[-14.64685154 112.59963226]
[0.12526502 109.99491119]
[14.89738178 107.39019012]
[29.66949844 104.78546906]
[30.57718658 87.76262665]
[35.54468536 71.45542145]
[44.28149796 56.81749344]
[56.27669907 44.70485306]
[70.82881927 35.82584381]
[87.08685303 30.69970512]
[104.10003662 29.62621307]
[120.87345886 32.66814041]
[136.42620850 39.64760208]
[149.84877014 50.15644073]
[160.35620117 63.58010483]
[173.95082092 57.24082947]
[183.96699524 41.96514130]
[201.28225708 43.80690002]
[214.58741760 36.88066864]
[227.89257812 29.95443916]
[241.19773865 23.02821159]
[249.54785156 8.91411591]
[265.94094849 9.35901737]
[273.51324463 23.90523911]
[264.47497559 37.58887482]
[248.12396240 36.33337402]
[234.81880188 43.25960159]
[221.51364136 50.18583298]
[208.20848083 57.11206055]
[204.15637207 68.71742249]
[192.86334229 74.52205658]
[180.29010010 70.83544922]
[166.69548035 77.17472076]
[169.78282166 90.01811981]
[170.41990662 103.21201324]
[168.58436584 116.29312134]
[164.34063721 128.80212402]
[157.83773804 140.29981995]
[149.30401611 150.38247681]
[139.03909302 158.69607544]
[127.40339661 164.94869995]
[114.80549622 168.92080688]
[101.68774414 170.47291565]
[88.51072693 169.55053711]
[75.73712158 166.18605042]
[63.81546021 160.49760437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[40 58]
[41 57]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
