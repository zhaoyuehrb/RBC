%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGCUCGCGCAGGAGACCCCGGGUGACGGGGCCCGGCGCCGCUAACUGGAGCGAACCCCAGCGUCCGCCGAC\
) } def
/len { sequence length } bind def

/coor [
[110.32722473 210.08839417]
[106.69179535 195.53559875]
[102.88496399 192.23559570]
[101.29406738 186.40284729]
[103.40508270 179.64836121]
[100.96794128 164.84767151]
[98.53079987 150.04698181]
[96.09365845 135.24629211]
[93.65651703 120.44561005]
[84.16345215 109.18399048]
[85.15618134 96.69779205]
[73.05699921 87.83157349]
[60.95781708 78.96536255]
[48.85863495 70.09914398]
[33.15387726 68.18312073]
[27.46127701 54.41926956]
[15.36209583 45.55305481]
[4.37165117 47.87345123]
[-5.81327248 43.69277573]
[-11.75769997 34.69217300]
[-11.61034966 24.12991142]
[-22.94659233 14.30700016]
[-34.28283691 4.48408937]
[-45.61907959 -5.33882141]
[-56.95532227 -15.16173267]
[-72.99567413 -15.45604706]
[-82.65189362 -28.26764488]
[-78.51654816 -43.76856232]
[-63.76192856 -50.06782532]
[-49.70651245 -42.33317566]
[-47.13241196 -26.49797630]
[-35.79616928 -16.67506599]
[-24.45992470 -6.85215425]
[-13.12368202 2.97075701]
[-1.78743827 12.79366779]
[17.27767563 14.73764229]
[24.22831345 33.45387268]
[36.32749557 42.32008743]
[51.16683960 43.60194016]
[57.72485352 57.99996185]
[69.82403564 66.86618042]
[81.92321777 75.73239136]
[94.02239990 84.59860992]
[109.01927948 84.90458679]
[121.47003174 76.53926086]
[133.92077637 68.17392731]
[146.37153625 59.80860138]
[149.16894531 44.25385666]
[162.19337463 35.30178070]
[177.71766663 38.26348114]
[186.53153992 51.38183594]
[183.40588379 66.87395477]
[170.19506836 75.54863739]
[154.73686218 72.25935364]
[142.28611755 80.62467957]
[129.83535767 88.99001312]
[117.38460541 97.35534668]
[132.00257874 93.99160767]
[145.10252380 101.29855347]
[149.92089844 115.50359344]
[143.96998596 129.27262878]
[130.32223511 135.49668884]
[116.02400970 130.96226501]
[108.45720673 118.00846863]
[110.89434814 132.80915833]
[113.33148956 147.60984802]
[115.76863098 162.41052246]
[118.20577240 177.21121216]
[121.24458313 191.90017700]
[124.88001251 206.45297241]
[139.01638794 213.13854980]
[145.50106812 227.36819458]
[141.27217102 242.42311096]
[128.32647705 251.19482422]
[112.77653503 249.54159546]
[101.96454620 238.24403381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[5 68]
[6 67]
[7 66]
[8 65]
[9 64]
[11 43]
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
