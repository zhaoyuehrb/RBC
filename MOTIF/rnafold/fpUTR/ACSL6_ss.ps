%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCAGCGGCGGCGGCGGCGCGGCUACUGCUGGGGCUGCUGGGCUGCGGGGCUGCGGGGCUGCGGGUCGGGGAGGCCGGGCCGGGCCGGGCCGGGCCCCGCUGACCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.13839722 510.79330444]
[109.28206635 495.81777954]
[108.42572784 480.84225464]
[107.35564423 465.88046265]
[106.07202148 450.93548584]
[104.78839111 435.99050903]
[103.50476837 421.04553223]
[102.22114563 406.10055542]
[100.93751526 391.15557861]
[97.17353821 384.66409302]
[99.83686829 375.76651001]
[98.98053741 360.79095459]
[98.12420654 345.81542969]
[89.25808716 337.44961548]
[88.50543213 324.87936401]
[96.82495880 314.89578247]
[96.39661407 299.90188599]
[95.96827698 284.90802002]
[95.53993225 269.91412354]
[87.44234467 257.41299438]
[94.78241730 243.39750671]
[94.35407257 228.40362549]
[93.92573547 213.40974426]
[93.49739075 198.41586304]
[93.06905365 183.42198181]
[82.49708557 175.90539551]
[78.16416168 163.47151184]
[81.88383484 150.63693237]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[84.76270294 58.99632645]
[92.50000000 46.26905823]
[92.50000000 31.26905632]
[84.76270294 17.46888351]
[92.50000000 4.74161196]
[92.50000000 -10.25838757]
[84.76270294 -24.05855942]
[92.50000000 -36.78583145]
[92.50000000 -51.78583145]
[92.50000000 -66.78583527]
[92.50000000 -81.78583527]
[89.33306122 -90.51686859]
[92.72030640 -97.21264648]
[93.14865112 -112.20652771]
[85.80858612 -126.22201538]
[93.90616608 -138.72315979]
[94.33451080 -153.71704102]
[94.76284790 -168.71092224]
[95.19119263 -183.70480347]
[86.92862701 -197.87033081]
[95.29887390 -211.97248840]
[111.69133759 -211.50419617]
[119.24285126 -196.94718933]
[110.18507385 -183.27645874]
[109.75673676 -168.28257751]
[109.32839203 -153.28869629]
[108.90005493 -138.29481506]
[116.27075958 -125.35178375]
[108.14253235 -111.77818298]
[107.71419525 -96.78430176]
[107.50000000 -81.78583527]
[107.50000000 -66.78583527]
[107.50000000 -51.78583145]
[107.50000000 -36.78583145]
[115.23729706 -24.05855942]
[107.50000000 -10.25838757]
[107.50000000 4.74161196]
[115.23729706 17.46888351]
[107.50000000 31.26905632]
[107.50000000 46.26905823]
[115.23729706 58.99632645]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[120.07137299 154.26470947]
[120.10466766 171.35052490]
[108.06293488 182.99363708]
[108.49127197 197.98751831]
[108.91961670 212.98139954]
[109.34795380 227.97528076]
[109.77629852 242.96916199]
[117.90451813 256.54275513]
[110.53381348 269.48577881]
[110.96215820 284.47967529]
[111.39049530 299.47357178]
[111.81884003 314.46743774]
[121.85433960 329.82369995]
[113.09973907 344.95910645]
[113.95606995 359.93463135]
[114.81240845 374.91018677]
[115.88249207 389.87194824]
[117.16611481 404.81692505]
[118.44974518 419.76190186]
[119.73336792 434.70687866]
[121.01699066 449.65185547]
[122.30062103 464.59683228]
[126.20310211 473.02484131]
[123.40126801 479.98590088]
[124.25759888 494.96145630]
[125.11392975 509.93698120]
[132.05464172 525.40509033]
[119.11240387 536.35656738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 107]
[2 106]
[3 105]
[4 103]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[11 97]
[12 96]
[13 95]
[16 93]
[17 92]
[18 91]
[19 90]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[29 81]
[30 80]
[31 79]
[33 77]
[34 76]
[36 74]
[37 73]
[39 71]
[40 70]
[42 68]
[43 67]
[44 66]
[45 65]
[47 64]
[48 63]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
