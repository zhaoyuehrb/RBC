%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUGAAGAGCGACGGGCCAAUUGGAGGAGUUGUUGUUAGGCCGUCCCGGAGACCCGGUCGGGAGGGAGGAAGGUGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[81.05625916 142.41932678]
[74.88588715 128.74722290]
[78.64599609 114.22614288]
[90.67763519 105.26664734]
[76.18874359 101.38436127]
[61.69985962 97.50208282]
[44.16864777 102.74736786]
[32.12298203 90.13166809]
[17.49906349 86.79385376]
[2.32317877 91.26633453]
[-8.36328220 80.89093781]
[-22.98720169 77.55312347]
[-37.61111832 74.21530914]
[-52.23503876 70.87750244]
[-66.85895538 67.53968811]
[-81.48287964 64.20187378]
[-93.94649506 75.46076202]
[-110.49218750 77.14644623]
[-124.68645477 68.79925537]
[-131.12571716 53.82279205]
[-145.86421204 51.03411865]
[-161.15596008 56.95818710]
[-173.76084900 46.46777725]
[-170.71205139 30.35452461]
[-155.14591980 25.19436073]
[-143.07553101 36.29562378]
[-128.33703613 39.08429718]
[-119.39903259 28.98560905]
[-106.51493835 24.64680862]
[-93.07493591 27.32417488]
[-82.67280579 36.41256332]
[-78.14506531 49.57795334]
[-63.52114487 52.91576767]
[-48.89722443 56.25357819]
[-34.27330780 59.59139252]
[-19.64938736 62.92920685]
[-5.02546883 66.26702118]
[9.10441494 61.55579758]
[20.83687782 72.16993713]
[35.46079636 75.50775146]
[46.02099228 69.29907227]
[58.35252762 72.13868713]
[65.58214569 83.01319122]
[80.07102966 86.89547729]
[94.55992126 90.77776337]
[109.43159485 92.73565674]
[124.43159485 92.73565674]
[139.43159485 92.73565674]
[154.42897034 92.45516968]
[169.41848755 91.89430237]
[175.58100891 77.97364807]
[187.12940979 68.14911652]
[201.73843384 64.32855988]
[216.49690247 67.21793365]
[228.48785400 76.19158936]
[235.36503601 89.42675781]
[250.35455322 88.86589050]
[265.34405518 88.30502319]
[273.87683105 75.34465027]
[288.40975952 69.90644836]
[303.35461426 74.08152008]
[312.96478271 86.26446533]
[313.54498291 101.77069092]
[304.87210083 114.63773346]
[290.28106689 119.91796112]
[275.38238525 115.58100891]
[265.90493774 103.29453278]
[250.91542053 103.85540009]
[235.92590332 104.41626740]
[230.05702209 118.12836456]
[218.77020264 127.97301483]
[204.26890564 131.95721436]
[189.41523743 129.23905945]
[177.16493225 120.30502319]
[169.97935486 106.88381958]
[154.98983765 107.44468689]
[148.25965881 110.92678070]
[139.43159485 107.73565674]
[124.43159485 107.73565674]
[109.43159485 107.73565674]
[118.73400116 119.50277710]
[118.60842133 134.50225830]
[109.11029816 146.11196899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 45]
[5 44]
[6 43]
[8 40]
[9 39]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[20 27]
[21 26]
[46 80]
[47 79]
[48 78]
[49 76]
[50 75]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
