%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCUAAAGAAGAAAGUGCUUCAAGAAGGAAGUAGUAGUCCAAUGUGUUGGGCUCCUGUUAAAAGCUCAAGUUAUGUGAGGAUAGUGAGUUGACCAUUAGCUUGACUAAAUUCUCAGCUGUUUCAGUUCCGGGA\
) } def
/len { sequence length } bind def

/coor [
[137.66809082 108.23971558]
[132.32180786 126.86861420]
[117.68196869 141.92767334]
[111.62315369 155.64958191]
[105.56433868 169.37149048]
[99.50552368 183.09339905]
[103.93684387 198.51231384]
[94.52765656 211.50640869]
[78.49587250 212.10772705]
[68.13971710 199.85499573]
[71.40354156 184.14744568]
[85.78361511 177.03457642]
[91.84243011 163.31266785]
[97.90124512 149.59075928]
[103.96006012 135.86885071]
[98.84366608 130.38500977]
[88.61087799 119.41733551]
[83.49448395 113.93349457]
[69.38597107 119.02760315]
[55.27745819 124.12171173]
[41.16894913 129.21582031]
[27.06043816 134.30992126]
[12.95192814 139.40403748]
[6.46372747 153.81509399]
[-8.34369469 159.33920288]
[-22.68535614 152.69900513]
[-28.05260658 137.83401489]
[-21.26114845 123.56335449]
[-6.34023523 118.35356903]
[7.85782051 125.29552460]
[21.96633148 120.20141602]
[36.07484055 115.10730743]
[50.18335342 110.01319885]
[64.29186249 104.91909027]
[78.40037537 99.82498932]
[79.26469421 92.37495422]
[80.99334717 77.47489929]
[81.85766602 70.02486420]
[69.29020691 61.83591843]
[56.72274017 53.64696884]
[44.15528107 45.45801926]
[31.58781624 37.26906967]
[19.02035522 29.08012009]
[6.45289183 20.89117241]
[-9.94267464 20.54846764]
[-17.60548782 6.04973221]
[-8.65270138 -7.68997908]
[7.70582390 -6.53642893]
[14.64184093 8.32370949]
[27.20930290 16.51265907]
[39.77676773 24.70160675]
[52.34422684 32.89055634]
[64.91168976 41.07950592]
[77.47915649 49.26845551]
[90.04661560 57.45740509]
[104.92572021 59.35802841]
[119.14812469 54.59115601]
[133.37052917 49.82428360]
[147.59294128 45.05741119]
[149.91427612 36.83098602]
[155.28115845 30.30028152]
[162.73307800 26.51459503]
[170.98330688 26.04245949]
[178.64099121 28.88744736]
[184.44554138 34.50026703]
[199.04711914 31.06600952]
[213.64868164 27.63175011]
[228.25025940 24.19749260]
[231.60380554 10.56734371]
[240.47572327 -0.22423780]
[253.07962036 -6.09461927]
[266.91641235 -5.94305563]
[279.26968384 0.14336482]
[287.73904419 10.91807461]
[302.41604614 7.82199860]
[311.06076050 -5.13589191]
[325.98941040 -8.06667423]
[338.28952026 0.25458074]
[352.96652222 -2.84149575]
[367.64352417 -5.93757248]
[382.32052612 -9.03364849]
[396.99749756 -12.12972546]
[411.67449951 -15.22580147]
[426.27609253 -18.66006088]
[440.79443359 -22.43066788]
[455.31277466 -26.20127487]
[469.83114624 -29.97188187]
[484.30496216 -33.90991974]
[498.73236084 -38.01486588]
[513.15972900 -42.11981201]
[527.58709717 -46.22475433]
[542.01452637 -50.32970047]
[556.44189453 -54.43464661]
[570.86926270 -58.53958893]
[584.44909668 -68.68969727]
[597.96179199 -58.45040894]
[591.86334229 -42.63126755]
[574.97424316 -44.11220551]
[560.54681396 -40.00725937]
[546.11944580 -35.90231705]
[531.69207764 -31.79737091]
[517.26470947 -27.69242668]
[502.83731079 -23.58748245]
[488.40991211 -19.48253632]
[482.78689575 -14.58250237]
[473.60174561 -15.45353127]
[459.08340454 -11.68292427]
[444.56503296 -7.91231632]
[430.04669189 -4.14170885]
[426.86083984 -0.47443905]
[421.30404663 1.17519414]
[414.77059937 -0.54880250]
[400.09359741 2.54727411]
[385.41659546 5.64335060]
[370.73959351 8.73942661]
[356.06259155 11.83550358]
[341.38558960 14.93158054]
[333.49465942 27.51207924]
[318.65420532 30.86102104]
[305.51211548 22.49899864]
[290.83514404 25.59507370]
[286.22128296 41.03820801]
[274.39859009 52.12997437]
[258.51040649 55.79227829]
[242.84645081 50.93974304]
[231.68452454 38.79906464]
[217.08294678 42.23332214]
[202.48136902 45.66757965]
[187.87980652 49.10183716]
[173.83232117 65.52439880]
[152.35981750 59.27982330]
[138.13740540 64.04669189]
[123.91500092 68.81356812]
[109.69258881 73.58043671]
[123.32460022 78.65990448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[56 134]
[57 133]
[58 132]
[59 131]
[65 129]
[66 128]
[67 127]
[68 126]
[74 121]
[75 120]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[83 112]
[84 109]
[85 108]
[86 107]
[87 106]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
