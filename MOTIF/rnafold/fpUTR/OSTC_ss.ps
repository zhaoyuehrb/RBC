%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGGAGGGCGGGCCUGUUUCCGGGAGGCGCGUGGGGCUUGAGGCCGAGAACGGCCCUUGCUGCCACCAAC\
) } def
/len { sequence length } bind def

/coor [
[123.10435486 166.18070984]
[109.48451996 172.46560669]
[94.48451996 172.46597290]
[80.86437225 166.18171692]
[71.13021851 154.76918030]
[67.07313538 140.32826233]
[69.43964386 125.51611328]
[77.79429626 113.05819702]
[90.60140991 105.24623108]
[76.11252594 101.36394501]
[61.62363815 97.48165894]
[46.29113388 101.38356781]
[36.00009537 90.61585236]
[21.51120758 86.73356628]
[7.02232027 82.85128021]
[-7.46656704 78.96899414]
[-22.79907036 82.87090302]
[-33.09011078 72.10317993]
[-47.57899857 68.22090149]
[-64.44333649 69.96174622]
[-70.78466034 54.23838806]
[-57.43123245 43.79222488]
[-43.69671249 53.73200989]
[-29.20782471 57.61429596]
[-14.91166306 53.43470001]
[-3.58428121 64.48010254]
[10.90460587 68.36238861]
[25.39349365 72.24467468]
[39.88238144 76.12696075]
[54.17854309 71.94736481]
[65.50592804 82.99276733]
[79.99481201 86.87505341]
[94.48369598 90.75733948]
[109.48369598 90.75733948]
[123.97258759 86.87505341]
[138.37333679 82.67761993]
[152.67909241 78.16703033]
[166.98484802 73.65644836]
[178.90921021 59.81881714]
[195.83592224 63.90491104]
[209.93132019 58.77460861]
[224.02670288 53.64430618]
[238.12210083 48.51400375]
[252.21748352 43.38370132]
[266.19760132 37.94713211]
[280.05578613 32.20687866]
[293.91400146 26.46662712]
[303.46246338 13.13400078]
[319.75439453 15.00596333]
[326.03009033 30.15679932]
[315.83361816 43.00062943]
[299.65423584 40.32482147]
[285.79605103 46.06507111]
[271.93786621 51.80532455]
[266.80520630 57.45090866]
[257.34777832 57.47909164]
[243.25239563 62.60939407]
[229.15701294 67.73969269]
[215.06161499 72.86999512]
[200.96623230 78.00029755]
[195.43397522 88.97746277]
[183.47990417 93.25840759]
[171.49542236 87.96219635]
[157.18968201 92.47278595]
[142.88392639 96.98337555]
[137.27874756 102.16013336]
[127.85487366 101.36394501]
[113.36598206 105.24623108]
[126.17189026 113.05703735]
[134.52714539 125.51455688]
[136.89436340 140.32658386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 33]
[10 32]
[11 31]
[13 29]
[14 28]
[15 27]
[16 26]
[18 24]
[19 23]
[34 68]
[35 67]
[36 65]
[37 64]
[38 63]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
