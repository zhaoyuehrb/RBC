%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:47:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUUUCAUGAUAGCCUACCGUUGAAUUUACCGUUCUGAUAUUAAUGAAACAUCUCUAUAAAGGGUUGAAGUGUCUUCCCGGAUUGUCAACUUAUUUUAUUUUAUUUUCUUCAAGCAACAAUUGCUAAGGAACAGAAUUGUCAAUUUAUUAAUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[29.65797806 510.49288940]
[13.88109970 509.56246948]
[3.44566178 497.69329834]
[4.54282379 481.92715454]
[16.52165985 471.61776733]
[17.40472031 456.64379883]
[18.28778267 441.66979980]
[19.17084503 426.69583130]
[20.05390739 411.72183228]
[20.93696976 396.74786377]
[13.75542831 394.02636719]
[7.28678370 389.86566162]
[1.81606102 384.44345093]
[-2.41452527 377.99319458]
[-5.21629572 370.79400635]
[-6.46251631 363.15856934]
[-6.09412432 355.41952515]
[-4.12250996 347.91510010]
[-0.62922472 340.97418213]
[4.23738241 334.90197754]
[10.26845837 329.96661377]
[17.20360947 326.38726807]
[24.74213600 324.32440186]
[32.55607605 323.87265015]
[36.34345245 309.35867310]
[40.13082504 294.84469604]
[43.91819763 280.33068848]
[47.70557404 265.81671143]
[51.49294662 251.30271912]
[47.21987152 237.03422546]
[58.19090271 225.63479614]
[61.97827530 211.12080383]
[57.70520020 196.85231018]
[68.67623138 185.45288086]
[72.46360779 170.93888855]
[76.25097656 156.42489624]
[80.03835297 141.91091919]
[83.82572937 127.39692688]
[87.61309814 112.88294220]
[77.33099365 123.80439758]
[69.45876312 136.57264709]
[58.86246490 147.18954468]
[46.10953140 155.08654785]
[31.88289452 159.84077454]
[16.94438934 161.19764709]
[2.09398389 159.08448792]
[-11.87307930 153.61447144]
[-24.20885658 145.08050537]
[-34.25276184 133.93959045]
[-41.46694183 120.78833008]
[-45.46507263 106.33097839]
[-46.03305054 91.34173584]
[-43.14046097 76.62328339]
[-36.94220734 62.96379471]
[-27.77020454 51.09474182]
[-16.11561966 41.65172195]
[-2.60255885 35.14041138]
[12.04534721 31.90949059]
[27.04369736 32.13198090]
[41.58932114 35.79596329]
[54.90330124 42.70523453]
[66.27265930 52.48979568]
[75.08715820 64.62317657]
[82.78980255 77.49443054]
[82.20090485 62.50599670]
[81.61200714 47.51755905]
[81.02310944 32.52912521]
[80.43421173 17.54068947]
[79.84531403 2.55225396]
[79.25641632 -12.43618202]
[68.35758972 -20.40278625]
[64.11488342 -33.01334000]
[67.87023163 -45.57420731]
[78.03180695 -53.54589844]
[77.73729706 -68.54300690]
[77.44279480 -83.54011536]
[77.14828491 -98.53722382]
[68.21288300 -112.28823853]
[75.89401245 -126.77727509]
[92.29000092 -127.09925079]
[100.53404999 -112.92295074]
[92.14539337 -98.83172607]
[92.43990326 -83.83461761]
[92.73440552 -68.83750916]
[93.02891541 -53.84040070]
[105.63174438 -42.73991013]
[106.34594727 -25.62330246]
[94.24485016 -13.02507877]
[94.83374786 1.96335661]
[95.42264557 16.95179176]
[96.01154327 31.94022751]
[96.60044098 46.92866516]
[97.18933868 61.91709900]
[97.77823639 76.90553284]
[104.44726562 63.46961212]
[111.11630249 50.03369141]
[114.61006927 35.44624329]
[124.94866943 24.57825279]
[139.34362793 20.36098671]
[153.91238403 23.93191338]
[164.72549438 34.32789230]
[168.86651611 48.74496460]
[165.21853638 63.29461288]
[154.76547241 74.05255890]
[140.32492065 78.11723328]
[127.16117859 85.30861664]
[113.99744415 92.50000000]
[128.99743652 92.50000000]
[143.99743652 92.50000000]
[158.99743652 92.50000000]
[173.99743652 92.50000000]
[188.99743652 92.50000000]
[194.97937012 89.49248505]
[200.71110535 89.93074799]
[204.58345032 92.80606842]
[219.57188416 93.39496613]
[234.56031799 93.98386383]
[249.54875183 94.57276154]
[264.53720093 95.16165924]
[280.60150146 89.74182129]
[290.25656128 103.67796326]
[279.53784180 116.81361389]
[263.94830322 110.15009308]
[248.95985413 109.56119537]
[233.97142029 108.97229767]
[218.98298645 108.38339996]
[203.99455261 107.79450226]
[188.99743652 107.50000000]
[173.99743652 107.50000000]
[158.99743652 107.50000000]
[143.99743652 107.50000000]
[128.99743652 107.50000000]
[113.99744415 107.50000000]
[102.12709045 116.67031860]
[98.33971405 131.18429565]
[94.55233765 145.69828796]
[90.76496887 160.21228027]
[86.97759247 174.72625732]
[83.19021606 189.24024963]
[87.19239807 204.54689026]
[76.49226379 214.90817261]
[72.70488739 229.42216492]
[76.70706940 244.72880554]
[66.00693512 255.09010315]
[62.21955872 269.60409546]
[58.43218613 284.11807251]
[54.64480972 298.63204956]
[50.85743713 313.14605713]
[47.07006454 327.66003418]
[63.62683868 344.09445190]
[67.19940948 367.02807617]
[56.53533173 387.51022339]
[35.91095352 397.63092041]
[35.02789307 412.60491943]
[34.14482880 427.57888794]
[33.26176834 442.55288696]
[32.37870407 457.52685547]
[31.49564362 472.50085449]
[42.17971039 484.14669800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[24 149]
[25 148]
[26 147]
[27 146]
[28 145]
[29 144]
[31 142]
[32 141]
[34 139]
[35 138]
[36 137]
[37 136]
[38 135]
[39 134]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[74 85]
[75 84]
[76 83]
[77 82]
[107 133]
[108 132]
[109 131]
[110 130]
[111 129]
[112 128]
[115 127]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
