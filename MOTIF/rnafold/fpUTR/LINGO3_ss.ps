%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCGGCGGCUGCUCGUGUCGGCUCCGGGCGGCCCCCGCGCCGCAGCCCGCGCCGUGUCCGCGGCGGAGCCGCCCAGGUGCGCAGGAGGAUGGUGGCGCGGCCCUAGGCCCACGCUCCGCACC\
) } def
/len { sequence length } bind def

/coor [
[86.99654388 231.26109314]
[96.66651917 218.45988464]
[95.93621063 203.47766113]
[95.20589447 188.49545288]
[94.47557831 173.51324463]
[90.97142029 166.91744995]
[93.91440582 158.15820312]
[93.54914093 143.16265869]
[93.18387604 128.16709900]
[92.81861115 113.17154694]
[89.73567963 98.49178314]
[84.03763580 84.61618042]
[71.63806152 74.78962708]
[73.96067810 60.07722855]
[68.26264191 46.20162582]
[62.56460190 32.32601929]
[46.06628036 20.86261940]
[49.21615219 1.84636736]
[42.84930038 -11.73535633]
[36.48244858 -25.31707954]
[23.61915016 -34.52827072]
[25.22269821 -49.33630753]
[18.85584831 -62.91802979]
[12.48899746 -76.49975586]
[7.16053820 -80.69123840]
[5.13366985 -86.14043427]
[6.16088486 -90.90129852]
[0.46284655 -104.77690887]
[-11.93672752 -114.60345459]
[-9.61411285 -129.31585693]
[-15.31215096 -143.19146729]
[-21.17872238 -156.99665833]
[-27.21295547 -170.72938538]
[-33.24718857 -184.46212769]
[-39.28142166 -198.19485474]
[-45.31565475 -211.92759705]
[-51.34989166 -225.66032410]
[-57.38412476 -239.39306641]
[-63.58512497 -253.05131531]
[-69.95197296 -266.63302612]
[-76.48373413 -280.13623047]
[-83.17942047 -293.55886841]
[-89.87511444 -306.98153687]
[-96.57080841 -320.40420532]
[-103.26649475 -333.82684326]
[-118.83835602 -343.56509399]
[-117.20895386 -360.99386597]
[-124.22951508 -374.24948120]
[-131.25007629 -387.50512695]
[-144.54658508 -396.07910156]
[-143.66590881 -410.94766235]
[-150.68647766 -424.20327759]
[-164.85952759 -432.45294189]
[-164.53106689 -448.84878540]
[-150.03900146 -456.52420044]
[-136.29151917 -447.58337402]
[-137.43084717 -431.22384644]
[-130.41027832 -417.96823120]
[-117.61592102 -410.34237671]
[-117.99444580 -394.52569580]
[-110.97388458 -381.27005005]
[-103.95332336 -368.01443481]
[-92.43163300 -364.12252808]
[-86.49735260 -353.04891968]
[-89.84384155 -340.52255249]
[-83.14814758 -327.09988403]
[-76.45245361 -313.67721558]
[-69.75676727 -300.25457764]
[-63.06107330 -286.83190918]
[-57.19959259 -282.20300293]
[-56.37025070 -272.99987793]
[-50.00340271 -259.41815186]
[-44.25637436 -254.64790344]
[-43.65138626 -245.42730713]
[-37.61715317 -231.69456482]
[-31.58292007 -217.96182251]
[-25.54868698 -204.22909546]
[-19.51445389 -190.49635315]
[-13.48021984 -176.76362610]
[-7.44598627 -163.03088379]
[-1.81682456 -158.12210083]
[-1.43654776 -148.88949585]
[4.26149035 -135.01390076]
[16.25350380 -126.17981720]
[14.33844948 -110.47494507]
[20.03648758 -96.59934235]
[26.07072067 -82.86660767]
[32.43757248 -69.28488159]
[38.80442429 -55.70315933]
[51.21232224 -47.46342087]
[50.06417465 -31.68392944]
[56.43102264 -18.10220718]
[62.79787445 -4.52048302]
[72.79816437 -1.87429917]
[79.79531097 6.04191303]
[81.25359344 16.72910500]
[76.44020844 26.62798309]
[82.13824463 40.50358582]
[87.83628082 54.37918854]
[99.82829285 63.21326447]
[97.91323853 78.91814423]
[103.61128235 92.79374695]
[113.78343201 84.82189941]
[127.89879608 82.47816467]
[143.51678467 87.10581970]
[155.49998474 96.12818146]
[167.48318481 105.15054321]
[179.46636963 114.17290497]
[195.75675964 118.86969757]
[195.75314331 135.82363892]
[179.46075439 140.51348877]
[170.44401550 126.15609741]
[158.46081543 117.13373566]
[146.47763062 108.11137390]
[134.49443054 99.08901215]
[127.82436371 102.51833344]
[114.48423004 109.37696838]
[107.81416321 112.80628204]
[108.17942810 127.80183411]
[108.54469299 142.79739380]
[108.90995789 157.79293823]
[109.45778656 172.78292847]
[110.18810272 187.76513672]
[110.91841888 202.74736023]
[111.64873505 217.72956848]
[122.51790619 229.52958679]
[119.92679596 245.36201477]
[105.86307526 253.08155823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[7 121]
[8 120]
[9 119]
[10 118]
[11 102]
[12 101]
[14 99]
[15 98]
[16 97]
[18 93]
[19 92]
[20 91]
[22 89]
[23 88]
[24 87]
[27 86]
[28 85]
[30 83]
[31 82]
[32 80]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 72]
[40 71]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[47 62]
[48 61]
[49 60]
[51 58]
[52 57]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
