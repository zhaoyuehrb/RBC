%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUUCCAGUUGGAGAACGUAGUGAGUCUUUCAGUGGAGCCAGGGUCUGGUUUGUCGUGAGGAGCUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[66.80644226 168.63113403]
[52.07546997 175.93106079]
[36.03891754 173.14807129]
[25.65983391 183.97741699]
[15.28075218 194.80676270]
[17.15375519 210.33177185]
[8.56602573 223.40023804]
[-6.42757177 227.84162903]
[-20.74752045 221.55886841]
[-27.63237762 207.51847839]
[-23.83132362 192.34988403]
[-11.13910198 183.21525574]
[4.45141029 184.42767334]
[14.83049297 173.59832764]
[25.20957565 162.76899719]
[21.62204170 149.73765564]
[25.04397774 136.54896545]
[34.66773224 126.74980164]
[48.00292206 123.03153229]
[61.52027512 126.49138641]
[72.34961700 116.11230469]
[83.17895508 105.73322296]
[82.82739258 95.42627716]
[88.25898743 86.65961456]
[97.64455414 82.38553619]
[107.82335663 84.04341888]
[119.49389648 74.62011719]
[131.16442871 65.19682312]
[142.83496094 55.77352142]
[148.71127319 41.08407974]
[163.47425842 39.10844803]
[175.14480591 29.68515015]
[186.81533813 20.26185036]
[198.48587036 10.83854961]
[210.15641785 1.41524994]
[209.01383972 -15.31483269]
[217.88629150 -29.35044861]
[233.18327332 -35.37480545]
[248.92604065 -31.24184799]
[260.18612671 -41.15196991]
[271.44619751 -51.06209183]
[282.70629883 -60.97220993]
[293.96636963 -70.88233185]
[305.22647095 -80.79244995]
[316.48654175 -90.70257568]
[324.38186646 -105.70590973]
[340.98452759 -102.27246094]
[342.28131104 -85.36818695]
[326.39666748 -79.44248962]
[315.13656616 -69.53237152]
[303.87649536 -59.62224579]
[292.61639404 -49.71212769]
[281.35632324 -39.80200577]
[270.09625244 -29.89188576]
[258.83615112 -19.98176384]
[261.30563354 -6.69312525]
[256.77755737 6.15785313]
[246.35743713 15.10555649]
[232.75495911 17.67953110]
[219.57971191 13.08578587]
[207.90917969 22.50908661]
[196.23863220 31.93238640]
[184.56809998 41.35568619]
[172.89756775 50.77898788]
[167.85601807 64.79441071]
[152.25827026 67.44405365]
[140.58772278 76.86735535]
[128.91719055 86.29065704]
[117.24665833 95.71395874]
[111.74101257 113.34038544]
[93.55803680 116.56256104]
[82.72869873 126.94164276]
[71.89935303 137.32072449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[20 73]
[21 72]
[22 71]
[26 69]
[27 68]
[28 67]
[29 66]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
