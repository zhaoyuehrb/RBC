%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGAGGAAGGUAGCAUAGUGUGCAGUUCACUGGACCAAAAGCUUUGGCUGCACCUCUUCUGGAAAGCCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[175.79055786 319.85446167]
[186.23176575 308.72146606]
[180.77914429 294.74758911]
[175.32652283 280.77371216]
[169.58627319 266.91552734]
[163.56083679 253.17892456]
[157.53540039 239.44232178]
[151.50997925 225.70571899]
[145.48454285 211.96913147]
[129.66777039 206.65423584]
[122.31865692 191.30293274]
[128.32832336 175.02314758]
[121.74037170 161.54727173]
[115.15242004 148.07141113]
[108.56447601 134.59555054]
[101.97652435 121.11968231]
[86.34822083 116.23503876]
[78.85440063 101.67667389]
[83.96028900 86.11924744]
[76.82107544 72.92714691]
[69.68186188 59.73503876]
[61.21987152 47.34977722]
[51.52538300 35.90351868]
[36.70212936 30.37343788]
[34.38071442 15.66084766]
[24.68622589 4.21458673]
[14.99173832 -7.23167419]
[-0.61833870 -12.25736237]
[-3.80601931 -28.34371376]
[8.70790863 -38.94247055]
[24.05018997 -33.15053940]
[26.43799973 -16.92616272]
[36.13248825 -5.47990179]
[45.82697678 5.96635962]
[59.95681381 10.67772675]
[62.97164154 26.20903015]
[72.66613007 37.65528870]
[75.28324890 37.64867783]
[78.06623840 38.69736862]
[80.61272430 40.86761856]
[82.50457764 44.08004761]
[83.35828400 48.10852432]
[82.87397003 52.59582901]
[90.01318359 65.78793335]
[97.15239716 78.98004150]
[109.80250549 81.18887329]
[118.86003113 90.29192352]
[121.00541687 102.95294952]
[115.45239258 114.53173065]
[122.04033661 128.00759888]
[128.62828064 141.48345947]
[135.21623230 154.95932007]
[141.80418396 168.43519592]
[155.12303162 171.38310242]
[164.11125183 181.38186646]
[165.58494568 194.54811096]
[159.22114563 205.94369507]
[165.24656677 219.68029785]
[171.27200317 233.41690063]
[177.29743958 247.15348816]
[183.32286072 260.89010620]
[189.81866455 267.72808838]
[189.30038452 275.32110596]
[194.75300598 289.29495239]
[200.20562744 303.26882935]
[215.42765808 304.38803101]
[228.65234375 312.00842285]
[237.25392151 324.61697388]
[239.52452087 339.71026611]
[235.01335144 354.29147339]
[224.61607361 365.46554565]
[210.39707947 371.01379395]
[195.17958069 369.83465576]
[181.98501587 362.16226196]
[173.43315125 349.51992798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 65]
[3 64]
[4 63]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[19 45]
[20 44]
[21 43]
[22 37]
[23 36]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
