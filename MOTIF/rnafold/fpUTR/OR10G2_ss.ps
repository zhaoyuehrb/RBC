%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUCAAUCAUCCGACAAAAGCAUUCACUUACAACAUCAUUGUGCUGUGUUUCUCUUGUCAAACGUCACCAUUCAUCUUAGCAGACUACAAAAAGAC\
) } def
/len { sequence length } bind def

/coor [
[163.16494751 252.70825195]
[156.15437317 248.96731567]
[149.69947815 244.32904053]
[143.91444397 238.87471008]
[138.90171814 232.70010376]
[134.75021362 225.91374207]
[131.53366089 218.63497925]
[129.30935669 210.99194336]
[128.11711121 203.11929321]
[127.97856140 195.15574646]
[128.89675903 187.24179077]
[130.85614014 179.51705933]
[133.82270813 172.11793518]
[137.74473572 165.17515564]
[142.55357361 158.81146240]
[132.55203247 147.63250732]
[122.55049896 136.45353699]
[112.54896545 125.27456665]
[102.54743195 114.09560394]
[89.32487488 109.55076599]
[86.27360535 95.90592957]
[76.27206421 84.72696686]
[62.59592819 87.14050293]
[49.63205338 82.47270203]
[40.77467728 72.06072235]
[38.28551102 58.73021317]
[42.71694565 46.02901840]
[33.07513046 34.53835297]
[23.43331718 23.04768753]
[6.04452896 17.25471306]
[3.47851658 -0.02570364]
[-6.52301836 -11.20466995]
[-16.52455330 -22.38363647]
[-26.52608871 -33.56260300]
[-36.52762222 -44.74156952]
[-52.40167236 -47.06410599]
[-60.35834885 -60.99503708]
[-54.29397583 -75.84774017]
[-38.86061859 -80.22850037]
[-25.89743042 -70.77677155]
[-25.34865570 -54.74310684]
[-15.34712124 -43.56414032]
[-5.34558678 -32.38517380]
[4.65594864 -21.20620537]
[14.65748310 -10.02723885]
[26.82586098 -9.00106525]
[35.24673080 0.39169008]
[34.92398453 13.40587234]
[44.56579590 24.89653969]
[54.20761108 36.38720703]
[70.44987488 34.68762207]
[84.68067169 43.03034973]
[91.26151276 58.33658218]
[87.45103455 74.72543335]
[97.45256805 85.90439606]
[110.67512512 90.44923401]
[113.72639465 104.09407043]
[123.72793579 115.27303314]
[133.72946167 126.45200348]
[143.73100281 137.63096619]
[153.73254395 148.80993652]
[177.95611572 139.07972717]
[203.97845459 140.55076599]
[226.87915039 152.91011047]
[242.34288025 173.78935242]
[247.47242737 199.21836853]
[262.31973267 201.35308838]
[277.16705322 203.48780823]
[284.30401611 190.11471558]
[295.58651733 179.99140930]
[309.65209961 174.34033203]
[324.80233765 173.84387207]
[339.20773315 178.56199646]
[351.12875366 187.92495728]
[359.12588501 200.80212402]
[362.23345947 215.63851929]
[360.07620239 230.64259338]
[352.91461182 244.00250244]
[341.61349487 254.10499573]
[327.53750610 259.73016357]
[312.38638306 260.19866943]
[297.98971558 255.45402527]
[286.08596802 246.06912231]
[278.11257935 233.17723083]
[275.03234863 218.33512878]
[260.18502808 216.20040894]
[245.33770752 214.06568909]
[242.74832153 221.54640198]
[239.18945312 228.62008667]
[234.72331238 235.16171265]
[229.42817688 241.05555725]
[223.39697266 246.19725037]
[216.73565674 250.49563599]
[209.56141663 253.87440491]
[202.00051880 256.27340698]
[194.18611145 257.64974976]
[186.25593567 257.97851562]
[178.34980774 257.25335693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[21 55]
[22 54]
[27 50]
[28 49]
[29 48]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[66 87]
[67 86]
[68 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
