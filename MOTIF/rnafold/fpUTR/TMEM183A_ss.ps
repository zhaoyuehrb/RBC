%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUGUUCUCGCGAGAGUUAGCGGCCUCCGGUGUGGGAUGGCCGCGGAGCCGGGCGGAGCUGGCUUGCGGCUCCCGGGGCCGGCUCUCCGGCCGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[98.22605896 232.81690979]
[84.41556549 239.89149475]
[69.08953094 237.46409607]
[58.14112854 226.46807861]
[55.78025055 211.13165283]
[62.91469955 197.35198975]
[76.80113220 190.42764282]
[79.14764404 175.61230469]
[81.49416351 160.79698181]
[83.84068298 145.98165894]
[81.74020386 138.75306702]
[86.50063324 130.74081421]
[89.31135559 116.00650787]
[83.52375793 129.84500122]
[70.47622681 137.24513245]
[55.62895584 135.11009216]
[45.19527435 124.33334351]
[43.54151154 109.42478943]
[51.35974503 96.62341309]
[65.37816620 91.28638458]
[79.73132324 95.64790344]
[66.58672333 88.42159271]
[53.44211960 81.19528961]
[40.29751968 73.96898651]
[27.15291977 66.74268341]
[14.00831890 59.51637650]
[0.75183445 52.49742889]
[-12.61326313 45.68756866]
[-25.97836113 38.87771225]
[-40.92979431 43.99925995]
[-55.08658981 36.97354126]
[-60.04977417 21.96879959]
[-52.87477493 7.88707399]
[-37.81839752 3.08280683]
[-23.81331825 10.40628338]
[-19.16850471 25.51261520]
[-5.80340576 32.32247162]
[7.56169176 39.13232803]
[15.08557415 39.36841965]
[21.23462486 46.37177658]
[34.37922287 53.59807968]
[47.52382278 60.82438660]
[60.66842270 68.05068970]
[73.81302643 75.27699280]
[86.95762634 82.50330353]
[95.48178101 81.16975403]
[102.85325623 83.33594513]
[107.85327148 87.87224579]
[109.95598602 93.31835938]
[124.36038971 89.13349152]
[138.76480103 84.94862366]
[153.16920471 80.76375580]
[167.57360840 76.57888794]
[172.63282776 71.87773132]
[178.43750000 70.75199890]
[183.01507568 72.61419678]
[197.65382385 69.34204865]
[212.29257202 66.06990051]
[226.93132019 62.79775238]
[241.57008362 59.52560043]
[256.20883179 56.25345230]
[270.84756470 52.98130417]
[285.48632812 49.70915604]
[300.12509155 46.43700790]
[314.76382446 43.16485977]
[329.40258789 39.89271164]
[337.26135254 34.88296127]
[344.55236816 36.75534439]
[359.28665161 33.94462204]
[374.02096558 31.13390350]
[388.44659424 22.22670364]
[400.99908447 33.62279510]
[393.52325439 48.83949661]
[376.83169556 45.86821365]
[362.09738159 48.67893219]
[347.36306763 51.48965073]
[332.67474365 54.53145981]
[318.03598022 57.80361176]
[303.39721680 61.07575989]
[288.75848389 64.34790802]
[274.11972046 67.62005615]
[259.48098755 70.89220428]
[244.84222412 74.16435242]
[230.20347595 77.43650055]
[215.56472778 80.70864868]
[200.92596436 83.98079681]
[186.28721619 87.25294495]
[171.75846863 90.98329926]
[157.35406494 95.16815948]
[142.94966125 99.35302734]
[128.54525757 103.53789520]
[114.14085388 107.72276306]
[104.04566193 118.81723022]
[101.23493958 133.55154419]
[98.65600586 148.32817078]
[96.30948639 163.14350891]
[93.96297455 177.95883179]
[91.61645508 192.77415466]
[102.68349457 203.65074158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 98]
[8 97]
[9 96]
[10 95]
[12 94]
[13 93]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 38]
[28 37]
[29 36]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
