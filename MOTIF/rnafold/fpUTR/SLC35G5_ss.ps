%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCACCUCAGGAGAGUUCCAGGGAAGAACCCCACCCGCACUCCAAUGAGGUCACAAUGGCUGGAGCUCUGAGGGGCCCAGGCUCCCUGAGCCAGGAGGAGAGGAGAAAGUCCAAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[278.19851685 210.29618835]
[292.05322266 204.54750061]
[307.01470947 205.61901855]
[293.59741211 198.91261292]
[286.11907959 198.73440552]
[279.92431641 191.85688782]
[266.68414307 184.80723572]
[253.44395447 177.75758362]
[240.20376587 170.70794678]
[226.96357727 163.65829468]
[223.40237427 164.40562439]
[219.29644775 163.38809204]
[215.51606750 160.36715698]
[213.00471497 155.51905823]
[200.34808350 147.46861267]
[187.69145203 139.41816711]
[175.03482056 131.36772156]
[162.37818909 123.31728363]
[149.72155762 115.26684570]
[137.06492615 107.21640015]
[124.40828705 99.16595459]
[78.86299133 139.91522217]
[64.04167175 142.22358704]
[49.22035599 144.53193665]
[40.10149002 157.44015503]
[24.51205254 160.03724670]
[11.70097351 150.78242493]
[9.26884270 135.16639709]
[18.65859795 122.45388031]
[34.29946518 120.18698883]
[46.91199493 129.71061707]
[61.73331451 127.40226746]
[76.55463409 125.09390259]
[78.83549500 117.94914246]
[64.54596710 113.38742065]
[49.54616165 113.46464539]
[44.83754349 99.22284698]
[56.92727280 90.34374237]
[69.10768890 99.09788513]
[83.39721680 103.65960693]
[85.67807770 96.51484680]
[74.93579865 86.04568481]
[64.19351196 75.57652283]
[48.17517090 72.06301117]
[43.46733475 56.35415268]
[54.91302490 44.60986710]
[70.73789215 48.91167068]
[74.66267395 64.83423615]
[85.40496063 75.30339813]
[96.14723969 85.77256012]
[109.10531616 78.21688080]
[105.28524780 63.71146393]
[101.46517944 49.20604706]
[97.64511108 34.70063019]
[87.76436615 20.92358017]
[98.26773834 7.61510754]
[113.96373749 14.02385616]
[112.15052795 30.88056564]
[115.97059631 45.38598251]
[119.79066467 59.89139557]
[123.61073303 74.39681244]
[132.45872498 86.50932312]
[145.11535645 94.55976868]
[157.77198792 102.61020660]
[170.42863464 110.66065216]
[183.08526611 118.71109772]
[195.74189758 126.76153564]
[208.39852905 134.81198120]
[221.05516052 142.86242676]
[234.01322937 150.41810608]
[247.25341797 157.46775818]
[260.49359131 164.51741028]
[273.73379517 171.56706238]
[286.97396851 178.61671448]
[300.30380249 185.49531555]
[313.72113037 192.20172119]
[320.83053589 175.91026306]
[341.78082275 166.27412415]
[356.37979126 162.82881165]
[368.03384399 152.12863159]
[382.19802856 156.73577881]
[396.79699707 153.29046631]
[411.39593506 149.84513855]
[425.99490356 146.39982605]
[440.59387207 142.95451355]
[454.62075806 133.43176270]
[467.65438843 144.27432251]
[460.84362793 159.80010986]
[444.03918457 157.55348206]
[429.44021606 160.99879456]
[414.84127808 164.44410706]
[400.24230957 167.88941956]
[385.64334106 171.33474731]
[375.03350830 181.78848267]
[359.82510376 177.42776489]
[345.22616577 180.87309265]
[342.94528198 188.01785278]
[357.60122681 184.82356262]
[367.69558716 195.91877747]
[363.13415527 210.20838928]
[348.47827148 213.40293884]
[338.38357544 202.30738831]
[336.10269165 209.45214844]
[346.00497437 220.71913147]
[355.90725708 231.98609924]
[371.76016235 234.44892883]
[379.59332275 248.44967651]
[373.39782715 263.24816895]
[357.92633057 267.49227905]
[345.04724121 257.92626953]
[344.64028931 241.88838196]
[334.73800659 230.62141418]
[324.83572388 219.35443115]
[329.68218994 233.54991150]
[327.65136719 248.41180420]
[319.17410278 260.78662109]
[306.04919434 268.04861450]
[291.06152344 268.65692139]
[277.39126587 262.48245239]
[267.93905640 250.83535767]
[264.71044922 236.18693542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[22 33]
[23 32]
[24 31]
[41 50]
[42 49]
[43 48]
[51 61]
[52 60]
[53 59]
[54 58]
[78 96]
[79 95]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
