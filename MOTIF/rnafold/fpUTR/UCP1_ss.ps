%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAAGGGAAAGGAACUUCCUCCACCUUCGGGGCUGGAGCCCUUUUCCUCUGCAUCUCCAGUCUCUGAGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[118.74315643 134.27542114]
[109.15353394 122.74116516]
[99.56391144 111.20690918]
[89.74099731 99.87066650]
[79.68888855 88.73715210]
[69.63677979 77.60363770]
[59.35965347 66.67749023]
[48.86178970 55.96325684]
[38.36392212 45.24902344]
[27.86605835 34.53478622]
[17.36819458 23.82055092]
[6.87032938 13.10631657]
[-3.62753534 2.39208102]
[-14.12540054 -8.32215405]
[-24.62326431 -19.03638840]
[-37.67024231 -19.99995995]
[-46.20096207 -29.37838173]
[-45.94375229 -41.64889908]
[-55.99586487 -52.78240967]
[-66.04797363 -63.91592407]
[-76.10008240 -75.04943085]
[-86.59794617 -85.76367188]
[-97.52409363 -96.04079437]
[-108.45024109 -106.31792450]
[-119.37638855 -116.59504700]
[-135.16362000 -115.86105347]
[-146.78945923 -126.56691742]
[-147.35649109 -142.36103821]
[-136.52832031 -153.87303162]
[-120.72909546 -154.27305603]
[-109.33222198 -143.32376099]
[-109.09926605 -127.52119446]
[-98.17311859 -117.24406433]
[-87.24697113 -106.96694183]
[-76.32082367 -96.68981934]
[-71.33419037 -95.97180176]
[-66.84242249 -91.92508698]
[-64.96656799 -85.10154724]
[-54.91446304 -73.96803284]
[-44.86235046 -62.83452225]
[-34.81024170 -51.70100784]
[-17.93101120 -47.36776352]
[-13.90902996 -29.53425407]
[-3.41116500 -18.82001877]
[7.08669949 -8.10578346]
[17.58456421 2.60845137]
[28.08242989 13.32268620]
[38.58029556 24.03692245]
[49.07815933 34.75115585]
[59.57602310 45.46539307]
[70.07389069 56.17962646]
[77.20462799 58.82654190]
[80.77029419 67.55152893]
[90.82240295 78.68504333]
[100.87451172 89.81855011]
[108.39898682 93.34307861]
[111.09816742 101.61727905]
[120.68778992 113.15154266]
[130.27742004 124.68579865]
[150.73246765 130.36389160]
[154.42646790 150.49810791]
[165.35261536 160.77523804]
[180.70594788 164.59439087]
[184.67546082 178.95030212]
[195.60160828 189.22741699]
[211.28158569 195.67526245]
[209.42639160 212.52740479]
[192.71926880 215.40983582]
[185.32449341 200.15356445]
[174.39834595 189.87644958]
[159.82652283 186.79238892]
[155.07548523 171.70138550]
[144.14933777 161.42425537]
[134.94664001 163.19879150]
[125.87564087 160.33392334]
[119.16625977 153.39375305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 55]
[5 54]
[6 53]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 35]
[23 34]
[24 33]
[25 32]
[61 73]
[62 72]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
