%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCCACCCAGGUGAGCCUCUCACUCGCCACCUCCUCUUCCACCCCUGCCAGGCCCAGCAGCCACCACAGCGCCUGCUUCCUCGGCCCUGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[121.90485382 250.13917542]
[119.00828552 235.42150879]
[116.11171722 220.70382690]
[113.21514893 205.98616028]
[110.31858063 191.26849365]
[107.42201233 176.55081177]
[90.03826904 176.26190186]
[73.16359711 172.07580566]
[57.66033936 164.20643616]
[44.32074738 153.05595398]
[33.82651520 139.19416809]
[26.71392059 123.32946777]
[12.04508209 126.46398163]
[-2.62375665 129.59849548]
[-17.29259491 132.73300171]
[-31.96143341 135.86752319]
[-46.63027191 139.00202942]
[-53.79642868 152.90097046]
[-68.23997498 158.89413452]
[-83.14110565 154.15174866]
[-91.46396637 140.91300964]
[-89.27876282 125.42886353]
[-77.61726379 115.01043701]
[-61.98569107 114.57699585]
[-49.76478577 124.33319855]
[-35.09594727 121.19868469]
[-20.42710876 118.06417084]
[-5.75827026 114.92965698]
[8.91056824 111.79514313]
[23.57940674 108.66062927]
[23.10843849 98.32631683]
[24.02863884 88.02227783]
[26.32336044 77.93495178]
[29.95108604 68.24684143]
[34.84617996 59.13322830]
[40.92007446 50.75900269]
[48.06288147 43.27567291]
[56.14536667 36.81863785]
[65.02130127 31.50471687]
[74.53008270 27.43005562]
[84.49968719 24.66837311]
[94.74973297 23.26963997]
[105.09477234 23.25915718]
[115.34763336 24.63711929]
[125.32280731 27.37859344]
[134.83982849 31.43397713]
[143.72651672 36.72990036]
[151.82206726 43.17054749]
[158.98002625 50.63938522]
[171.36708069 42.18003082]
[176.81994629 34.60850525]
[184.29505920 33.65493393]
[196.94955444 25.60113144]
[209.60404968 17.54732895]
[222.25854492 9.49352741]
[224.83013916 4.50737095]
[228.73114014 1.44069445]
[232.94844055 0.47611648]
[236.55482483 1.34214473]
[249.93092346 -5.44606066]
[250.67945862 -20.78670311]
[259.01150513 -33.68912506]
[272.68579102 -40.68264389]
[288.02401733 -39.88603592]
[300.90026855 -31.51358223]
[307.85089111 -17.81743622]
[307.00619507 -2.48178816]
[298.59341431 10.36814785]
[284.87554932 17.27580452]
[269.54263306 16.38305473]
[256.71914673 7.93004751]
[243.34303284 14.71825314]
[230.31234741 22.14802361]
[217.65785217 30.20182610]
[205.00335693 38.25562668]
[192.34886169 46.30942917]
[179.82644653 54.56709290]
[167.43937683 63.02644730]
[174.57238770 81.18321228]
[176.90780640 100.55055237]
[174.29536438 119.88247681]
[166.90313721 137.93525696]
[155.20671082 153.54748535]
[139.95855713 165.71473694]
[122.13967896 173.65425110]
[125.03625488 188.37191772]
[127.93282318 203.08958435]
[130.82939148 217.80726624]
[133.72595215 232.52493286]
[136.62252808 247.24261475]
[150.40359497 254.63288879]
[156.16209412 269.17160034]
[151.17903137 283.99398804]
[137.80726624 292.10137939]
[122.36052704 289.66571045]
[112.13230133 277.83703613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[49 78]
[50 77]
[52 76]
[53 75]
[54 74]
[55 73]
[59 72]
[60 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
