%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGUCAUAAAUGGAGCGACGUAAUUUCGACCUGUCCUUUCCCGGGAGUUAGCGAUCCCUCAACCCCUGCACUGCGCUAGUCCUAAAGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[6.07399750 157.39356995]
[-2.74278116 169.52882385]
[-11.55955982 181.66407776]
[-20.37633896 193.79933167]
[-14.05609894 207.79754639]
[-15.59768772 223.07887268]
[-24.58642578 235.53271484]
[-38.60438538 241.80905151]
[-53.88080978 240.21957397]
[-66.30641937 231.19183350]
[-72.53878021 217.15426636]
[-70.90142059 201.88290405]
[-61.83478546 189.48565674]
[-47.77775192 183.29733276]
[-32.51159286 184.98254395]
[-23.69481468 172.84729004]
[-14.87803555 160.71203613]
[-6.06125736 148.57678223]
[-20.43267822 152.87355042]
[-35.42520905 152.40028381]
[-49.49701309 147.20562744]
[-61.20092773 137.82382202]
[-69.33332825 125.21968842]
[-73.05786133 110.68945312]
[-71.99149323 95.72740173]
[-66.24390411 81.87225342]
[-56.40616608 70.54887390]
[-43.49000168 62.92176819]
[-28.82372093 59.77531052]
[-13.91561031 61.43308640]
[-0.29882938 67.72460938]
[10.62626362 78.00286102]
[17.73612404 91.21080780]
[20.29957008 105.99014282]
[18.05297661 120.82094574]
[11.22776794 134.17749023]
[24.75763702 127.70117950]
[38.28750610 121.22486115]
[51.81737137 114.74854279]
[65.34724426 108.27223206]
[78.87711334 101.79591370]
[81.68827820 89.31905365]
[91.16459656 80.72988129]
[103.85685730 79.15470123]
[115.14528656 85.16686249]
[128.88188171 79.14142609]
[142.61848450 73.11599731]
[156.35508728 67.09056854]
[163.11892700 60.65197754]
[170.64691162 61.10136795]
[184.57521057 55.53340912]
[198.50352478 49.96545029]
[212.43183899 44.39749146]
[226.36015320 38.82953262]
[240.28846741 33.26157379]
[240.73565674 19.03103065]
[246.58946228 6.10034800]
[256.92379761 -3.56587791]
[270.13470459 -8.51313782]
[284.18920898 -8.01581001]
[296.93814087 -2.18338847]
[306.44482422 8.06137466]
[320.54962158 2.95697665]
[328.63104248 -10.90195751]
[344.52529907 -13.08188248]
[356.03967285 -1.91054618]
[354.34133911 14.04235744]
[340.73309326 22.53912735]
[325.65402222 17.06176758]
[311.54922485 22.16616440]
[310.26806641 38.00218582]
[302.22073364 51.76810074]
[288.95428467 60.71832275]
[273.06228638 63.04265976]
[257.67797852 58.23224640]
[245.85641479 47.18988419]
[231.92811584 52.75784302]
[217.99980164 58.32580185]
[204.07148743 63.89376068]
[190.14317322 69.46172333]
[176.21485901 75.02967834]
[162.38052368 80.82716370]
[148.64392090 86.85260010]
[134.90731812 92.87802887]
[121.17072296 98.90345764]
[115.60694122 114.34660339]
[100.68576813 121.18800354]
[85.35342407 115.32578278]
[71.82355499 121.80210114]
[58.29368973 128.27841187]
[44.76382065 134.75473022]
[31.23395157 141.23104858]
[17.70408249 147.70736694]
[15.00844574 152.85932922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[45 85]
[46 84]
[47 83]
[48 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
