%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGAGGCAGCGUGAAGCUGGGGCCUGCUCCCCGCAGCCUCUGGAGCGCAUCUCAGACCUUCUGAGACCUAUGUUGCUGGCCCCCCAGAACCCGCAAC\
) } def
/len { sequence length } bind def

/coor [
[113.32638550 194.81665039]
[112.37503052 179.84684753]
[111.42366791 164.87704468]
[110.47231293 149.90725708]
[106.84002686 143.31097412]
[109.73593140 134.44880676]
[109.26001740 119.45635223]
[95.61553192 113.22512817]
[83.97333527 122.68341827]
[72.33113861 132.14170837]
[60.68894577 141.59999084]
[57.61372375 157.34555054]
[43.31997681 164.63035583]
[28.77264595 157.86613464]
[25.13119698 142.24182129]
[35.18903732 129.74304199]
[51.23065567 129.95779419]
[62.87285233 120.49951172]
[74.51504517 111.04122162]
[86.15724182 101.58293152]
[93.65724182 88.59255219]
[96.02726746 73.78096771]
[98.39728546 58.96938324]
[100.76731110 44.15779877]
[103.13732910 29.34621620]
[90.41746521 14.13460922]
[95.99757385 -7.50997639]
[85.30716705 -18.03210068]
[74.61675262 -28.55422401]
[63.92633820 -39.07634735]
[53.23592758 -49.59846878]
[38.67960739 -44.86855316]
[23.59447861 -47.45650864]
[11.44699669 -56.76764679]
[5.02856207 -70.66233063]
[5.81408453 -85.94766998]
[13.62305641 -99.11119843]
[26.66103363 -107.12804413]
[41.93198395 -108.15598297]
[55.92675400 -101.95880890]
[65.42945099 -89.96058655]
[68.25642395 -74.91841888]
[63.75804901 -60.28888321]
[74.44846344 -49.76675797]
[85.13887787 -39.24463654]
[95.82928467 -28.72251320]
[106.51969910 -18.20038986]
[121.51781464 -17.96240044]
[132.53668213 -28.14004135]
[143.55555725 -38.31768036]
[153.37847900 -49.65392685]
[161.88436890 -62.00907516]
[170.39027405 -74.36421967]
[178.89616394 -86.71937561]
[187.40206909 -99.07452393]
[195.90795898 -111.42967224]
[204.41386414 -123.78482056]
[208.41537476 -140.25978088]
[225.35420227 -140.97537231]
[230.73097229 -124.89660645]
[216.76901245 -115.27892303]
[208.26310730 -102.92377472]
[199.75721741 -90.56862640]
[191.25131226 -78.21347046]
[182.74542236 -65.85832214]
[174.23951721 -53.50317764]
[165.73362732 -41.14802933]
[180.66354370 -42.59636307]
[193.17988586 -34.32950211]
[197.70814514 -20.02933311]
[192.23152161 -6.06485605]
[179.18919373 1.34443760]
[164.38993835 -1.10139859]
[154.42504883 -12.31303978]
[153.73320007 -27.29880714]
[142.71432495 -17.12116432]
[131.69544983 -6.94352388]
[135.91076660 18.11475754]
[117.94891357 31.71623802]
[115.57888794 46.52782059]
[113.20886993 61.33940506]
[110.83885193 76.15098572]
[108.46882629 90.96257019]
[115.55678558 77.74285889]
[128.94233704 70.97330475]
[143.79096985 73.09890747]
[154.73971558 83.35195160]
[157.83416748 98.02929688]
[151.95668030 111.82984161]
[139.23007202 119.76918793]
[124.25246429 118.98043060]
[124.72837830 133.97288513]
[125.44210815 148.95588684]
[126.39347076 163.92568970]
[127.34482574 178.89549255]
[128.29618835 193.86529541]
[135.33493042 209.28904724]
[122.46245575 220.32244873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[6 92]
[7 91]
[8 20]
[9 19]
[10 18]
[11 17]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[48 77]
[49 76]
[50 75]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
