%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUGCUCGGUUAGGACCUCGGAGAGCGCCAGGCGCCGCGACCAGAGGGCCCAGAGAAGCGGCCGGAGCCCGCCUACCUCGGCCCCCUCAGCUUCCCGGGCUGGCAGGCGGCUAGAGGCGUCUGAGGAAGUGUUUAAA\
) } def
/len { sequence length } bind def

/coor [
[46.16736603 449.97329712]
[40.62064743 463.91009521]
[35.07392883 477.84686279]
[29.52721024 491.78366089]
[23.98048973 505.72042847]
[18.43377113 519.65722656]
[21.33461952 535.79772949]
[8.63402176 546.17211914]
[-6.60273457 540.10797119]
[-8.70138168 523.84368896]
[4.49698925 514.11047363]
[10.04370785 500.17370605]
[15.59042645 486.23693848]
[21.13714600 472.30014038]
[26.68386459 458.36337280]
[32.23058319 444.42657471]
[19.67417526 423.93035889]
[25.90485382 400.46765137]
[47.39522171 388.67102051]
[49.72523117 373.85308838]
[52.05524445 359.03515625]
[54.38525391 344.21722412]
[56.71526337 329.39929199]
[59.04527664 314.58135986]
[57.20725250 311.48303223]
[56.82632065 307.31991577]
[58.39542007 302.80932617]
[62.05784225 298.86502075]
[65.37237549 284.23580933]
[68.68691254 269.60659790]
[72.00144958 254.97740173]
[75.31598663 240.34819031]
[78.13983917 225.61639404]
[80.46984863 210.79846191]
[74.80344391 197.02380371]
[84.59046173 184.59300232]
[86.92047119 169.77507019]
[89.25048065 154.95713806]
[91.58049774 140.13922119]
[93.74528503 125.29624939]
[95.74459076 110.43008423]
[89.96352386 109.30036926]
[84.67234039 104.93151093]
[81.62421417 97.69492340]
[82.26960754 88.86272430]
[87.32011414 80.38507080]
[85.65251160 65.47805023]
[76.42895508 52.62361145]
[82.70335388 39.11505127]
[81.03575134 24.20803642]
[79.36814117 9.30102253]
[77.70053864 -5.60599232]
[76.03292847 -20.51300812]
[66.80937958 -33.36744690]
[73.08377838 -46.87600708]
[71.41617584 -61.78302383]
[57.44336700 -68.00460052]
[48.51968384 -80.30356598]
[46.96063614 -95.31808472]
[53.08532333 -109.00546265]
[65.15747070 -117.73064423]
[63.48986435 -132.63766479]
[61.82225800 -147.54467773]
[59.98868942 -162.43218994]
[57.98938751 -177.29835510]
[47.54712296 -189.94316101]
[53.52946472 -205.21220398]
[69.78229523 -207.39799500]
[79.58609009 -194.25198364]
[72.85554504 -179.29765320]
[74.85485077 -164.43148804]
[78.89644623 -158.17106628]
[76.72927094 -149.21228027]
[78.39688110 -134.30526733]
[80.06448364 -119.39825439]
[93.76621246 -113.55631256]
[102.76399231 -101.56065369]
[104.56122589 -86.57277679]
[98.57582092 -72.60597229]
[86.32318878 -63.45062637]
[87.99079132 -48.54361343]
[97.09506989 -36.75542068]
[90.93994904 -22.18061256]
[92.60755157 -7.27359819]
[94.27515411 7.63341665]
[95.94276428 22.54043198]
[97.61036682 37.44744492]
[106.71464539 49.23563766]
[100.55952454 63.81044769]
[102.22712708 78.71746063]
[114.95964050 86.64734650]
[129.07398987 81.56941986]
[143.18832397 76.49150085]
[157.30267334 71.41357422]
[171.41702271 66.33564758]
[185.53135681 61.25772476]
[198.38842773 50.20639038]
[212.56706238 59.50168991]
[207.56007385 75.69941711]
[190.60928345 75.37207031]
[176.49493408 80.44999695]
[162.38059998 85.52791595]
[148.26625061 90.60584259]
[134.15191650 95.68376923]
[120.03756714 100.76168823]
[110.61075592 112.42938995]
[108.61145020 127.29554749]
[110.57849121 136.30038452]
[106.39842224 142.46922302]
[104.06841278 157.28715515]
[101.73840332 172.10508728]
[99.40839386 186.92301941]
[104.90814209 201.75755310]
[95.28778076 213.12846375]
[92.95776367 227.94639587]
[94.90206909 232.96540833]
[94.69201660 237.73651123]
[92.79863739 241.46368408]
[89.94519806 243.66271973]
[86.63066101 258.29193115]
[83.31612396 272.92114258]
[80.00159454 287.55035400]
[76.68705750 302.17956543]
[73.86320496 316.91137695]
[71.53319550 331.72930908]
[69.20318604 346.54724121]
[66.87317657 361.36517334]
[64.54315948 376.18307495]
[62.21315002 391.00100708]
[68.20052338 394.41812134]
[73.28172302 399.05426025]
[77.21411896 404.67883301]
[79.81196594 411.01434326]
[80.95515442 417.75000000]
[80.59474945 424.55697632]
[78.75505829 431.10446167]
[75.53211975 437.07574463]
[71.08869934 442.18359375]
[65.64608002 446.18389893]
[59.47306442 448.88757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[33 115]
[34 114]
[36 112]
[37 111]
[38 110]
[39 109]
[40 107]
[41 106]
[46 90]
[47 89]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[55 81]
[56 80]
[61 75]
[62 74]
[63 73]
[64 71]
[65 70]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
