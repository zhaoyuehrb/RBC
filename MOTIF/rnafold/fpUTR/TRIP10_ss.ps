%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCCCCGGGGAGGGCGGCGGGCGGCGGGCGGCGGGGACCGGGUGCGGUGGUGGCUGCGGCGGCGGCGGCGGGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[66.52394104 273.12307739]
[68.16640472 257.57199097]
[79.45648956 246.75218201]
[78.29409790 231.79728699]
[77.13171387 216.84240723]
[75.96932983 201.88751221]
[74.80693817 186.93261719]
[64.20592499 197.54479980]
[49.44123840 200.19129944]
[35.81427383 193.92184448]
[28.21792984 180.98757935]
[29.37974358 166.03263855]
[38.88255310 154.42674255]
[53.31428528 150.33711243]
[67.49309540 155.23216248]
[76.32855225 167.35609436]
[79.78778839 152.76042175]
[75.19416046 138.59187317]
[85.90543365 126.94802856]
[89.36467743 112.35235596]
[83.81444550 101.92836761]
[86.76022339 90.49215698]
[96.65573120 84.04673767]
[100.67832184 69.59616852]
[96.92526245 54.22655487]
[107.79225159 44.04040527]
[111.81484222 29.58984184]
[106.12336731 17.82609177]
[109.95799255 5.75673962]
[120.68818665 -0.17277566]
[125.26807404 -14.45649433]
[129.84796143 -28.74021149]
[134.42785645 -43.02392960]
[139.00775146 -57.30764771]
[128.80543518 -68.70326233]
[125.69740295 -83.57730103]
[130.42033386 -97.91467285]
[141.61073303 -107.89621735]
[156.19656372 -110.91597748]
[160.77645874 -125.19969177]
[165.35633850 -139.48341370]
[169.93623352 -153.76713562]
[165.93754578 -169.67129517]
[177.89834595 -180.89053345]
[193.51440430 -175.88343811]
[196.72123718 -159.80090332]
[184.21995544 -149.18724060]
[179.64006042 -134.90351868]
[175.06016541 -120.61980438]
[170.48028564 -106.33608246]
[180.59065247 -95.39780426]
[183.89042664 -80.77017975]
[179.39572144 -66.35962677]
[168.21803284 -56.06612015]
[153.29145813 -52.72776031]
[148.71157837 -38.44404221]
[144.13168335 -24.16032219]
[139.55178833 -9.87660408]
[134.97190857 4.40711451]
[139.69380188 21.19181824]
[126.26540375 33.61243057]
[122.24282074 48.06299210]
[126.28359985 62.39900970]
[115.12888336 73.61875916]
[111.10629272 88.06932068]
[115.78478241 104.06589508]
[103.96035004 115.81159210]
[100.50110626 130.40727234]
[104.84731293 145.61979675]
[94.38346100 156.21966553]
[90.92422485 170.81533813]
[89.76183319 185.77023315]
[90.92422485 200.72511292]
[92.08660889 215.68000793]
[93.24899292 230.63490295]
[94.41137695 245.58979797]
[107.23772430 254.53512573]
[111.26340485 269.64566040]
[104.58760834 283.78665161]
[90.36244965 290.28115845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[16 71]
[17 70]
[19 68]
[20 67]
[23 65]
[24 64]
[26 62]
[27 61]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
