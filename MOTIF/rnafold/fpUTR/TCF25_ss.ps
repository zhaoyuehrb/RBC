%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAGAGUGCGCAGGCGCGCCGACAGCCGAGUUUUCUGCGCUUCCUUCUCCCUCUCUCCAGACGUCGUGGUCGUUCGGUCCU\
) } def
/len { sequence length } bind def

/coor [
[162.55209351 145.75708008]
[161.82112122 128.51123047]
[147.59077454 123.76810455]
[133.36042786 119.02499390]
[119.13007355 114.28187561]
[107.14353943 122.77941132]
[92.45109558 122.64830780]
[80.61811066 113.93822479]
[76.12681580 99.94847107]
[61.89646530 95.20536041]
[47.66611481 90.46224213]
[33.43576431 85.71912384]
[19.20541382 80.97601318]
[4.97506428 76.23289490]
[-9.25528526 71.48978424]
[-20.67001724 78.91743469]
[-34.08009720 78.34095764]
[-44.50600052 70.20237732]
[-48.20872879 57.70933151]
[-62.24940109 52.43111801]
[-76.38744354 47.41955566]
[-90.61779022 42.67643738]
[-105.55229950 48.53647995]
[-119.37276459 40.38943863]
[-121.47731018 24.48502159]
[-110.25151062 13.02374077]
[-94.30683899 14.79770851]
[-85.87467957 28.44608879]
[-71.64432526 33.18920517]
[-64.11595917 32.29408264]
[-56.97118759 38.39044571]
[-42.93051529 43.66865921]
[-28.06099129 36.05921555]
[-11.93274021 41.55178452]
[-4.51217079 57.25942993]
[9.71817970 62.00254822]
[23.94853020 66.74565887]
[38.17887878 71.48877716]
[52.40922928 76.23189545]
[66.63957977 80.97500610]
[80.86992645 85.71812439]
[92.85646057 77.22058868]
[107.54890442 77.35169220]
[119.38188934 86.06177521]
[123.87318420 100.05152893]
[138.10353088 104.79463959]
[152.33389282 109.53775787]
[166.56423950 114.28087616]
[174.40223694 103.73403931]
[184.92950439 95.90026855]
[197.24885559 91.43411255]
[210.31417847 90.70366669]
[223.01914978 93.76027679]
[234.29103088 100.33506012]
[243.18119812 109.86254120]
[248.94493103 121.52925873]
[251.10388184 134.34324646]
[249.48568726 147.21830750]
[263.08694458 153.54327393]
[278.86282349 152.34652710]
[287.14074707 164.72897339]
[300.74203491 171.05395508]
[314.34332275 177.37893677]
[327.94458008 183.70390320]
[342.03250122 176.91682434]
[357.17431641 180.82324219]
[366.22048950 193.57865906]
[364.89971924 209.16036987]
[353.83560181 220.21115112]
[338.25231934 221.51318359]
[325.50781250 212.45166016]
[321.61959839 197.30517578]
[308.01834106 190.98020935]
[294.41705322 184.65522766]
[280.81579590 178.33024597]
[266.01275635 179.97941589]
[256.76199341 167.14454651]
[243.16070557 160.81958008]
[231.02694702 172.80627441]
[215.25056458 179.37767029]
[198.12695312 179.54986572]
[182.15794373 173.27200317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[19 32]
[20 31]
[21 29]
[22 28]
[58 78]
[59 77]
[61 75]
[62 74]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
