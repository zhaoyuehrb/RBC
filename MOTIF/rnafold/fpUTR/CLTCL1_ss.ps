%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGUCAGCCCGCGCGAGGGGUCGGCGUUCAUUCCUGCCGCUGCCGCCGCCGCCGCCGAGGUCCCGCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[111.15170288 306.79122925]
[116.53687286 292.46435547]
[127.97093201 282.28985596]
[124.28865051 267.74884033]
[120.60636902 253.20783997]
[111.09806061 248.58984375]
[105.72808838 239.22683716]
[106.57753754 228.24278259]
[113.60199738 219.46803284]
[111.13307953 204.67260742]
[108.66416168 189.87719727]
[105.88999939 175.13595581]
[102.81176758 160.45520020]
[98.22490692 154.38206482]
[99.92292786 145.10466003]
[97.45401001 130.30923462]
[94.98509216 115.51381683]
[83.97703552 103.01537323]
[89.68875885 87.37042236]
[86.61053467 72.68966675]
[83.22955322 58.07567215]
[79.54727173 43.53466797]
[74.26557159 35.72075272]
[76.02654266 28.31661415]
[72.94831085 13.63586235]
[69.87008667 -1.04489052]
[66.79185486 -15.72564316]
[63.41087341 -30.33964348]
[59.72859192 -44.88064575]
[46.59675980 -57.59533310]
[51.67768097 -74.26205444]
[47.39763641 -88.63846588]
[35.12113953 -99.51135254]
[38.66376114 -115.52328491]
[54.38115692 -120.20255280]
[66.10461426 -108.73553467]
[61.77404785 -92.91851044]
[66.05409241 -78.54209900]
[76.67035675 -72.37638092]
[80.24044800 -60.20769501]
[74.26959991 -48.56293106]
[77.95188141 -34.02192688]
[82.78578949 -28.14352798]
[81.47260284 -18.80387306]
[84.55083466 -4.12312078]
[87.62906647 10.55763149]
[90.70729828 25.23838425]
[94.08827209 39.85238266]
[97.77055359 54.39338684]
[102.60446930 60.27178574]
[101.29128265 69.61144257]
[104.36951447 84.29219055]
[113.83828735 91.37854004]
[116.02559662 103.00135040]
[109.78050995 113.04489899]
[112.24943542 127.84031677]
[114.71835327 142.63574219]
[117.49251556 157.37696838]
[120.57074738 172.05772400]
[125.52502441 180.08323669]
[123.45957947 187.40827942]
[125.92849731 202.20368958]
[128.39741516 216.99911499]
[141.98097229 231.62541199]
[135.14736938 249.52555847]
[138.82965088 264.06655884]
[142.51193237 278.60757446]
[157.41043091 282.11376953]
[168.96536255 292.15081787]
[174.52151489 306.41223145]
[172.80210876 321.62084961]
[164.20225525 334.28186035]
[150.69813538 341.48583984]
[135.39289856 341.57736206]
[121.80358124 334.53543091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[9 63]
[10 62]
[11 61]
[12 59]
[13 58]
[15 57]
[16 56]
[17 55]
[19 52]
[20 51]
[21 49]
[22 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 42]
[29 41]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
