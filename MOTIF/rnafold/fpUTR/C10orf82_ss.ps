%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCAGUGUCUACACCCGCAAAAACGCCCGCUUUGACUUAGAGCCCUCCGCAUAUCCUUCCCCUGGCUGGGGCAGCCAAGGCGCGGAGGACAGCUCCGAGGCCAGAUGUUUACUGCGCAGAUGCCCGACUUUACACCGGGGUCCGGGCUGUGCCGGGCGCUGGGGGAAGCGCCCACCUUCCAGAGAGCGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[59.75498962 321.88253784]
[49.55744553 327.50369263]
[38.21202850 330.03750610]
[26.63039780 329.29141235]
[21.00139427 343.19515991]
[23.97802734 361.36132812]
[9.74350643 371.61605835]
[4.33807135 385.60824585]
[-1.06736338 399.60043335]
[1.99663198 415.71081543]
[-10.59835720 426.21310425]
[-25.89568520 420.30346680]
[-28.15877342 404.06121826]
[-15.05954933 394.19500732]
[-9.65411472 380.20281982]
[-4.24868011 366.21063232]
[-8.85774040 355.01815796]
[-4.45912933 343.31195068]
[7.09764242 337.56616211]
[12.72664738 323.66241455]
[-0.22854950 310.61804199]
[-6.20087147 293.17678833]
[-3.94844151 274.82818604]
[6.12033558 259.26391602]
[22.01996231 249.63490295]
[40.57923889 247.91366577]
[45.30586243 233.67782593]
[50.03248596 219.44198608]
[44.64271545 210.74288940]
[44.94388580 200.29403687]
[51.07807922 191.56002808]
[61.21354294 187.56974792]
[66.39402008 173.49272156]
[71.57449341 159.41569519]
[76.75497437 145.33866882]
[81.93544769 131.26164246]
[66.65396881 99.97033691]
[84.74399567 73.48992157]
[72.86813354 64.32674408]
[60.99226761 55.16356277]
[45.33978271 52.85914230]
[39.98984528 38.95851517]
[28.11398125 29.79533386]
[16.23811722 20.63215446]
[4.36225414 11.46897602]
[-7.73046446 2.59394598]
[-20.03304863 -5.98780394]
[-32.33563232 -14.56955433]
[-44.63821793 -23.15130424]
[-56.94079971 -31.73305321]
[-69.24338531 -40.31480408]
[-81.54596710 -48.89655304]
[-90.54732513 -46.01543808]
[-99.72790527 -47.58335876]
[-107.04319000 -53.12249756]
[-110.92352295 -61.28525543]
[-110.61013794 -70.18016815]
[-122.48600006 -79.34334564]
[-134.36186218 -88.50653076]
[-146.23773193 -97.66970825]
[-158.47114563 -106.34977722]
[-171.04246521 -114.53279877]
[-183.61378479 -122.71582794]
[-196.18510437 -130.89884949]
[-212.11541748 -129.00019836]
[-223.43052673 -140.37332153]
[-221.45046997 -156.29371643]
[-207.69415283 -164.54861450]
[-192.71426392 -158.80558777]
[-188.00209045 -143.47016907]
[-175.43075562 -135.28713989]
[-162.85943604 -127.10412598]
[-150.28811646 -118.92109680]
[-150.71801758 -133.91493225]
[-139.37030029 -143.72459412]
[-124.59628296 -141.13069153]
[-117.26882935 -128.04220581]
[-122.78056335 -114.09155273]
[-137.07455444 -109.54557037]
[-125.19868469 -100.38239288]
[-113.32282257 -91.21921539]
[-101.44696045 -82.05603027]
[-80.83578491 -81.12169647]
[-72.96421814 -61.19913864]
[-60.66163254 -52.61738586]
[-48.35905075 -44.03563690]
[-36.05646515 -35.45388794]
[-23.75388145 -26.87213707]
[-11.45129871 -18.29038811]
[0.85128534 -9.70863819]
[4.37930393 -9.96998596]
[8.20882130 -8.52766705]
[11.53414822 -5.25888062]
[13.52543354 -0.40688819]
[25.40129662 8.75629139]
[37.27716064 17.91947174]
[49.15302658 27.08265114]
[63.95606613 28.73166084]
[70.15544891 43.28770065]
[82.03131104 52.45087814]
[93.90717316 61.61405945]
[87.87818146 47.87902069]
[78.19632721 36.42206955]
[73.76094055 22.09282303]
[75.27725983 7.16965961]
[82.50417328 -5.97460270]
[94.29260254 -15.24999809]
[108.76815796 -19.18171692]
[123.62918854 -17.14460754]
[136.51275635 -9.46257496]
[145.37034607 2.64291954]
[148.79359436 17.24707603]
[146.23817444 32.02780151]
[138.11042786 44.63492966]
[125.70167542 53.06431198]
[116.19867706 64.67004395]
[130.10243225 59.04103470]
[144.00617981 53.41202927]
[157.90992737 47.78302383]
[171.81367493 42.15402222]
[175.03729248 38.01694870]
[179.11964417 35.76369476]
[183.19604492 35.40520859]
[186.52355957 36.60639572]
[200.68180847 31.65221024]
[214.84005737 26.69802475]
[228.99830627 21.74383926]
[243.15655518 16.78965378]
[257.27465820 11.72215939]
[271.35168457 6.54168367]
[285.42871094 1.36120772]
[299.50573730 -3.81926799]
[313.58276367 -8.99974346]
[321.58923340 -22.90210724]
[337.47149658 -25.16781425]
[349.04602051 -14.05880833]
[347.43380737 1.90303242]
[333.87164307 10.47314930]
[318.76321411 5.07728243]
[304.68618774 10.25775814]
[290.60916138 15.43823433]
[276.53213501 20.61870956]
[262.45510864 25.79918480]
[257.25714111 31.06621933]
[248.11074829 30.94790268]
[233.95248413 35.90208817]
[219.79423523 40.85627365]
[205.63598633 45.81045914]
[191.47773743 50.76464844]
[177.44268799 56.05777359]
[163.53892517 61.68677521]
[149.63517761 67.31578064]
[135.73143005 72.94478607]
[121.82768250 78.57379150]
[132.82386780 94.12184143]
[132.94245911 114.77880096]
[145.38101196 123.16226196]
[157.81954956 131.54573059]
[170.25810242 139.92919922]
[182.69665527 148.31265259]
[195.13520813 156.69612122]
[207.57376099 165.07958984]
[223.03674316 161.81282043]
[236.23489380 170.50674438]
[239.33798218 186.00340271]
[230.50500488 199.10890198]
[214.97640991 202.04798889]
[201.96502686 193.07693481]
[199.19029236 177.51812744]
[186.75173950 169.13467407]
[174.31318665 160.75120544]
[161.87464905 152.36773682]
[149.43609619 143.98428345]
[136.99754333 135.60081482]
[124.55899048 127.21735382]
[117.42236328 129.52354431]
[128.55335999 139.57843018]
[125.41095734 154.24559021]
[111.13759613 158.85766602]
[100.00682068 148.80252075]
[103.14910126 134.13592529]
[96.01247406 136.44212341]
[90.83200073 150.51914978]
[85.65151978 164.59617615]
[80.47104645 178.67320251]
[75.29057312 192.75022888]
[79.62385559 212.42907715]
[64.26832581 224.16860962]
[59.54169846 238.40444946]
[54.81507492 252.64027405]
[64.19644165 259.76333618]
[71.19414520 269.21459961]
[75.25601959 280.23016357]
[76.06665039 291.92340088]
[73.57186127 303.35638428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[7 16]
[8 15]
[9 14]
[26 190]
[27 189]
[28 188]
[32 186]
[33 185]
[34 184]
[35 183]
[36 182]
[38 101]
[39 100]
[40 99]
[42 97]
[43 96]
[44 95]
[45 94]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[57 82]
[58 81]
[59 80]
[60 79]
[61 73]
[62 72]
[63 71]
[64 70]
[116 154]
[117 153]
[118 152]
[119 151]
[120 150]
[124 149]
[125 148]
[126 147]
[127 146]
[128 145]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
[156 175]
[157 174]
[158 173]
[159 172]
[160 171]
[161 170]
[162 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
