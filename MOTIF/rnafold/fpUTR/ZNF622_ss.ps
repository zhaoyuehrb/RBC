%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCGUGUCGAGUGGCUCUUCCUGGCUGCUGAGGCGGGUUAAGGUCUGAGGGUCUUGUGGGGCCACGGCGCUGAUCACCAGGUGUUUGGCUUGGUCGGUUCUUAUUUCUCGCCUGGCA\
) } def
/len { sequence length } bind def

/coor [
[96.22276306 190.57904053]
[95.83335876 175.58409119]
[95.44394684 160.58914185]
[94.85990906 145.60052490]
[94.08135223 130.62074280]
[93.30279541 115.64095306]
[85.35768127 102.91794586]
[72.23943329 95.64390564]
[59.12118530 88.36987305]
[46.00294113 81.09583282]
[32.88469315 73.82180023]
[26.08198166 73.54703522]
[21.23417664 70.29705811]
[19.28862381 65.81442261]
[6.56561041 57.86930084]
[-6.15740347 49.92418289]
[-18.88041687 41.97906494]
[-31.60343170 34.03394318]
[-44.32644653 26.08882523]
[-57.04946136 18.14370728]
[-69.77247620 10.19858837]
[-83.32330322 17.29240036]
[-98.50523376 16.65524483]
[-111.24515533 8.55828476]
[-118.17530823 -4.73941803]
[-117.52330780 -19.62029457]
[-130.24632263 -27.56541252]
[-142.96932983 -35.51053238]
[-155.69235229 -43.45565033]
[-164.74757385 -45.38502884]
[-168.63877869 -51.77581024]
[-181.15124512 -60.04854965]
[-196.93009949 -61.20538712]
[-203.27949524 -74.67885590]
[-215.79194641 -82.95159912]
[-228.30441284 -91.22433472]
[-240.81687927 -99.49707794]
[-255.30078125 -93.92963409]
[-270.28222656 -97.97142029]
[-280.00054932 -110.06826782]
[-280.71884155 -125.56871033]
[-272.16091919 -138.51249695]
[-257.61749268 -143.92250061]
[-242.68077087 -139.71842957]
[-233.09425354 -127.51686096]
[-232.54414368 -112.00954437]
[-220.03167725 -103.73680115]
[-207.51921082 -95.46406555]
[-195.00674438 -87.19132233]
[-180.12286377 -86.62621307]
[-172.87849426 -72.56101990]
[-160.36602783 -64.28827667]
[-147.74723816 -56.17866516]
[-135.02421570 -48.23354721]
[-122.30120087 -40.28842545]
[-109.57818604 -32.34330750]
[-96.49327087 -39.46022034]
[-81.50316620 -39.06941605]
[-68.63629150 -31.17574501]
[-61.40059280 -17.81380463]
[-61.82735443 -2.52442575]
[-49.10433960 5.42069340]
[-36.38132858 13.36581230]
[-23.65831184 21.31093025]
[-10.93529892 29.25605011]
[1.78771532 37.20116806]
[14.51072884 45.14628601]
[27.23374367 53.09140778]
[40.15872955 60.70354843]
[53.27697754 67.97758484]
[66.39522552 75.25162506]
[79.51346588 82.52565765]
[92.63171387 89.79969788]
[102.57084656 80.27550507]
[121.04640961 82.77045441]
[135.94413757 81.02190399]
[150.84187317 79.27334595]
[165.73960876 77.52478790]
[180.61340332 75.58298492]
[195.46072388 73.44825745]
[210.30804443 71.31353760]
[225.15536499 69.17881775]
[240.00268555 67.04409027]
[254.85000610 64.90937042]
[269.69732666 62.77464676]
[280.42395020 50.84489441]
[296.42977905 51.93702316]
[305.43652344 65.21324921]
[300.53497314 80.48918915]
[285.48516846 86.04644775]
[271.83206177 77.62197113]
[256.98474121 79.75669098]
[242.13740540 81.89141846]
[227.29008484 84.02613831]
[212.44276428 86.16085815]
[197.59544373 88.29558563]
[182.74812317 90.43030548]
[176.49978638 94.54634094]
[167.48817444 92.42252350]
[152.59043884 94.17108154]
[137.69270325 95.91963959]
[122.79496002 97.66819763]
[136.70726013 103.27604675]
[151.69752502 103.81632996]
[164.12007141 112.22348022]
[170.19400024 125.93871307]
[168.07064819 140.78765869]
[158.39627075 152.25093079]
[144.11535645 156.83956909]
[129.57443237 153.15696716]
[119.19915009 142.32398987]
[116.14751434 127.63513184]
[108.28257751 114.86239624]
[109.06113434 129.84217834]
[109.83969116 144.82196045]
[113.44695282 153.34881592]
[110.43888855 160.19973755]
[110.82830048 175.19468689]
[111.21771240 190.18962097]
[113.90775299 209.38372803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 115]
[5 114]
[6 113]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[26 56]
[27 55]
[28 54]
[29 53]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[37 46]
[75 102]
[76 101]
[77 100]
[78 99]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
