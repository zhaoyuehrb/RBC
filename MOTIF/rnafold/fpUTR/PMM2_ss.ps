%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCGGAAGUUCCGGGCCGAGUUCCUCGUGCCAACGUGUCUUGUAAGGUGCGGCUAGAAACUGGGGAC\
) } def
/len { sequence length } bind def

/coor [
[53.68120193 226.66305542]
[39.17865753 222.83209229]
[30.23369217 210.79101562]
[30.75316238 195.80209351]
[18.35068512 204.23884583]
[5.94820881 212.67558289]
[-6.45426798 221.11231995]
[-18.85674477 229.54905701]
[-31.25922203 237.98579407]
[-40.95476151 251.89381409]
[-57.00323486 246.42729187]
[-56.19301987 229.49272156]
[-39.69596100 225.58331299]
[-27.29348373 217.14657593]
[-14.89100742 208.70983887]
[-2.48853064 200.27310181]
[9.91394615 191.83636475]
[22.31642342 183.39962769]
[33.26910782 173.15078735]
[42.50984192 161.33515930]
[44.25572968 146.54324341]
[58.85204315 140.43928528]
[68.09277344 128.62367249]
[77.33350372 116.80804443]
[86.57424164 104.99242401]
[88.71691132 91.17575073]
[101.61013794 85.76683807]
[110.85087585 73.95121765]
[119.28761292 61.54874420]
[126.88320923 48.61402512]
[134.47880554 35.67930603]
[142.07440186 22.74458885]
[149.66999817 9.80986977]
[157.26557922 -3.12484932]
[156.84048462 -21.38334084]
[172.13616943 -29.69890022]
[179.15219116 -42.95693588]
[186.16819763 -56.21497345]
[182.84071350 -71.90915680]
[193.14710999 -84.20378113]
[209.18119812 -83.66746521]
[218.64300537 -70.71162415]
[214.27423096 -55.27487183]
[199.42623901 -49.19895935]
[192.41023254 -35.94092178]
[185.39421082 -22.68288422]
[188.65136719 -10.82550716]
[182.64866638 0.36833763]
[170.20030212 4.47074509]
[162.60470581 17.40546417]
[155.00910950 30.34018326]
[147.41351318 43.27490234]
[139.81793213 56.20962143]
[132.22233582 69.14434052]
[132.95132446 72.91126251]
[131.66957092 77.22692871]
[128.14015198 81.02841949]
[122.66649628 83.19195557]
[113.42575836 95.00757599]
[111.28308868 108.82424927]
[98.38986206 114.23316193]
[89.14912415 126.04878235]
[79.90839386 137.86439514]
[70.66766357 149.68002319]
[68.26081848 165.31707764]
[54.32546234 170.57589722]
[45.08472824 182.39152527]
[60.07715607 182.86810303]
[71.49751282 192.59307861]
[74.35675049 207.31805420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[19 67]
[20 66]
[22 64]
[23 63]
[24 62]
[25 61]
[27 59]
[28 58]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[36 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
