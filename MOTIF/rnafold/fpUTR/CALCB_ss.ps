%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGUGUGGUGUUCAUCCCGGGUCGACCGGCCGCUCGCGCUGCCCUGAAACUCUAGUCGCCAGAGAGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[142.88746643 155.66204834]
[140.34509277 133.61515808]
[127.57215881 125.75054932]
[114.79921722 117.88594055]
[102.02628326 110.02133179]
[93.79944611 108.74633026]
[88.88813782 101.54209137]
[76.46049500 93.14247131]
[64.03285217 84.74285126]
[51.60520554 76.34322357]
[39.17755890 67.94360352]
[26.74991417 59.54398346]
[14.32226944 51.14435959]
[0.47375852 59.40972137]
[-15.52921486 60.87571716]
[-30.54104805 55.30412292]
[-41.63251495 43.83515549]
[-46.66232300 28.75451660]
[-44.69039154 13.03798103]
[-57.46332932 5.17337179]
[-70.23626709 -2.69123721]
[-83.00920105 -10.55584621]
[-98.88677979 -8.25758266]
[-110.48405457 -19.34283638]
[-108.90458679 -35.30794907]
[-95.36000824 -43.90585327]
[-80.24056244 -38.54097366]
[-75.14459229 -23.32878304]
[-62.37165833 -15.46417427]
[-49.59872055 -7.59956503]
[-36.82578278 0.26504415]
[-25.38714981 -7.85694075]
[-11.66114044 -10.96077442]
[2.24523282 -8.53551388]
[14.18397617 -0.92162412]
[22.29789352 10.73637295]
[25.30946350 24.66183281]
[22.72189140 38.71671677]
[35.14953613 47.11633682]
[47.57718277 55.51596069]
[60.00482559 63.91558075]
[72.43247223 72.31520081]
[84.86011505 80.71482849]
[97.28775787 89.11444855]
[109.89089203 97.24839783]
[122.66382599 105.11300659]
[135.43676758 112.97761536]
[148.20970154 120.84222412]
[155.88891602 115.72577667]
[164.75085449 113.28096008]
[173.89811707 113.73289490]
[182.41136169 117.01447296]
[189.44181824 122.77529144]
[194.29580688 130.41896057]
[196.50321960 139.16476440]
[195.86294556 148.12741089]
[192.46101379 156.40664673]
[202.84008789 167.23597717]
[213.21917725 178.06532288]
[223.59825134 188.89466858]
[233.97734070 199.72401428]
[244.35643005 210.55334473]
[260.30078125 212.33004761]
[268.73062134 225.97987366]
[263.17926025 241.03184509]
[247.90522766 245.93937683]
[234.62548828 236.93783569]
[233.52708435 220.93243408]
[223.14799500 210.10308838]
[212.76892090 199.27374268]
[202.38983154 188.44441223]
[192.01075745 177.61506653]
[181.63166809 166.78572083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[19 31]
[20 30]
[21 29]
[22 28]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
