%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGAGCGCGGGGCGCCGGCUGCUCUGGCGGCUCCCGCGGCUCCGGCUGGCGGCUUCGGGCCCUGCACCUGUGACUCUCGGCCGCGCUCGCCCUCGGCCCGCCCGGCGCCGCAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.38784790 192.33486938]
[83.38784790 177.33486938]
[83.38784790 162.33486938]
[83.38784790 147.33486938]
[83.38784790 132.33486938]
[71.74687958 122.87506104]
[57.06404495 125.94334412]
[42.38121033 129.01162720]
[27.69837570 132.07991028]
[13.01554108 135.14819336]
[-1.62657332 138.40525818]
[-16.22553825 141.85057068]
[-30.82450485 145.29588318]
[-45.42346954 148.74121094]
[-60.02243423 152.18652344]
[-74.57583618 155.81951904]
[-89.08124542 159.63957214]
[-103.53627777 163.64608765]
[-117.93852997 167.83837891]
[-132.34077454 172.03065491]
[-146.74302673 176.22294617]
[-161.14526367 180.41522217]
[-170.09613037 193.72918701]
[-186.09722900 194.88859558]
[-196.87390137 183.00402832]
[-194.15921021 167.19232178]
[-180.03562927 159.58287048]
[-165.33755493 166.01296997]
[-150.93530273 161.82069397]
[-136.53306580 157.62840271]
[-122.13081360 153.43612671]
[-107.72856140 149.24383545]
[-102.11928558 144.29479980]
[-92.90131378 145.13417053]
[-78.39589691 141.31410217]
[-72.66104889 136.51112366]
[-63.46775055 137.58755493]
[-48.86878586 134.14224243]
[-34.26982117 130.69691467]
[-19.67085457 127.25160217]
[-5.07188940 123.80628967]
[0.78472400 119.15257263]
[9.94725990 120.46535492]
[24.63009453 117.39707184]
[39.31293106 114.32878876]
[53.99576569 111.26050568]
[68.67860413 108.19223022]
[69.27796936 93.85292816]
[75.90340424 81.65195465]
[86.84207153 73.88462830]
[99.62181091 71.80375671]
[111.56356049 75.43045807]
[120.34220123 83.63048553]
[134.23706055 77.97956848]
[148.13191223 72.32865143]
[162.02677917 66.67772675]
[175.92163086 61.02681351]
[185.79020691 48.66065598]
[200.49464417 51.03318405]
[214.38949585 45.38226700]
[228.28436279 39.73134613]
[242.17922974 34.08042908]
[256.07409668 28.42951012]
[269.96893311 22.77859116]
[268.94277954 10.88277817]
[274.08209229 -1.34911335]
[285.30847168 -10.68694305]
[300.87301636 -14.13574982]
[308.59490967 -26.99547005]
[308.33526611 -43.39256287]
[322.54278564 -51.58266449]
[336.60202026 -43.14049911]
[336.05001831 -26.75064659]
[321.45462036 -19.27357674]
[313.73272705 -6.41385794]
[317.25756836 0.20623301]
[330.19943237 -7.37716007]
[340.98883057 -17.79776764]
[354.39611816 -11.07135582]
[352.49285889 3.80740833]
[337.82369995 6.94221973]
[324.30718994 13.44641495]
[327.83203125 20.06650543]
[342.81213379 20.83868790]
[357.79226685 21.61086845]
[372.77236938 22.38304901]
[387.75247192 23.15523148]
[396.03903198 10.22353840]
[409.68859863 3.18189502]
[425.02954102 3.92446899]
[437.93518066 12.25151157]
[444.93402100 25.92308998]
[444.14334106 41.26161575]
[435.77590942 54.14110947]
[422.08245850 61.09704208]
[406.74645996 60.25831223]
[393.89328003 51.85052872]
[386.98028564 38.13534164]
[372.00018311 37.36316299]
[357.02008057 36.59098053]
[342.03994751 35.81879807]
[327.05984497 35.04661560]
[298.47460938 50.76604843]
[275.61987305 36.67345047]
[261.72500610 42.32437134]
[247.83013916 47.97528839]
[233.93528748 53.62620544]
[220.04042053 59.27712631]
[206.14556885 64.92804718]
[197.27084351 76.89000702]
[181.57255554 74.92166901]
[167.67768860 80.57259369]
[153.78283691 86.22351074]
[139.88796997 91.87442780]
[125.99311829 97.52534485]
[121.13880920 120.20629120]
[98.38784790 132.33486938]
[98.38784790 147.33486938]
[98.38784790 162.33486938]
[98.38784790 177.33486938]
[98.38784790 192.33486938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 35]
[17 34]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[53 115]
[54 114]
[55 113]
[56 112]
[57 111]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[64 104]
[68 75]
[69 74]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
