%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGCGGGGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGUAGCCGUAGAGGUGCACAGAGAACACCCCUAGCAUGAACAGUGUGAGGAUUCCACCAGCUUUUUCACC\
) } def
/len { sequence length } bind def

/coor [
[86.64287567 269.70925903]
[98.33581543 259.64553833]
[96.15180206 244.80538940]
[93.96778107 229.96524048]
[91.78376770 215.12509155]
[89.41921234 200.31263733]
[86.87446594 185.53005981]
[77.09014893 174.29991150]
[82.37409973 159.38714600]
[79.82935333 144.60458374]
[77.28461456 129.82202148]
[67.41160583 118.52938080]
[53.10128021 114.03330994]
[38.79095459 109.53723907]
[23.30613136 112.78235626]
[13.48320198 101.58596039]
[-0.82712227 97.08989716]
[-15.13744640 92.59382629]
[-30.62227058 95.83894348]
[-40.44520187 84.64254761]
[-54.75552368 80.14647675]
[-70.24034882 83.39159393]
[-80.06327820 72.19519806]
[-94.37360382 67.69912720]
[-109.85842896 70.94424438]
[-119.68135834 59.74784851]
[-133.99168396 55.25178146]
[-149.47650146 58.49689865]
[-159.29943848 47.30050278]
[-173.60975647 42.80443192]
[-189.09458923 46.04954910]
[-198.91751099 34.85315323]
[-213.22784424 30.35708427]
[-228.71266174 33.60220337]
[-238.53559875 22.40580559]
[-252.84591675 17.90973663]
[-268.72637939 22.00160408]
[-280.01553345 10.10678101]
[-275.10009766 -5.53835964]
[-259.03662109 -8.83943748]
[-248.34985352 3.59941292]
[-234.03952026 8.09548092]
[-219.57827759 4.52877522]
[-208.73176575 16.04676056]
[-194.42144775 20.54282951]
[-179.96018982 16.97612381]
[-169.11369324 28.49411011]
[-154.80337524 32.99017715]
[-140.34211731 29.42347145]
[-129.49562073 40.94145584]
[-115.18528748 45.43752670]
[-100.72403717 41.87081909]
[-89.87753296 53.38880539]
[-75.56720734 57.88487244]
[-61.10595703 54.31816864]
[-50.25945663 65.83615112]
[-35.94913101 70.33222198]
[-21.48787880 66.76551819]
[-10.64137745 78.28350067]
[3.66894603 82.77957153]
[17.97926903 87.27564240]
[32.44052505 83.70893097]
[43.28702545 95.22692108]
[57.59734726 99.72298431]
[71.90766907 104.21905518]
[71.68239594 93.88594055]
[75.20600891 83.95478821]
[82.15482330 75.76580048]
[91.73385620 70.47700500]
[102.76623535 68.90165710]
[113.83733368 71.38630676]
[123.57210541 59.97428894]
[133.30688477 48.56227112]
[143.04165649 37.15025330]
[138.48236084 22.41199112]
[142.63694763 7.55457211]
[154.17971802 -2.68105626]
[169.42739868 -5.02874184]
[183.51452637 1.26065314]
[191.94593811 14.18020535]
[192.03120422 29.60733414]
[183.74311829 42.61929703]
[169.72637939 49.06402588]
[154.45367432 46.88502884]
[144.71890259 58.29704666]
[134.98411560 69.70906067]
[125.24935150 81.12108612]
[131.11592102 94.92627716]
[146.08811951 95.83896637]
[161.06033325 96.75165558]
[175.30572510 89.86837769]
[187.53863525 98.36574554]
[202.51083374 99.27843475]
[217.48304749 100.19112396]
[232.45524597 101.10381317]
[245.37326050 91.59042358]
[260.82730103 95.89760590]
[266.96237183 110.72125244]
[259.07217407 124.68993378]
[243.20936584 127.08806610]
[231.54255676 116.07601929]
[216.57035828 115.16333008]
[201.59814453 114.25064087]
[186.62593079 113.33795166]
[173.45146179 120.28651428]
[160.14764404 111.72386169]
[145.17543030 110.81117249]
[130.20323181 109.89848328]
[120.71163940 122.60451508]
[106.71430969 128.75950623]
[92.06718445 127.27727509]
[94.61192322 142.05984497]
[97.15666962 156.84240723]
[107.12300110 169.12991333]
[101.65703583 182.98532104]
[104.20177460 197.76788330]
[108.78485107 205.79165649]
[106.62391663 212.94107056]
[108.80793762 227.78121948]
[110.99195099 242.62136841]
[113.17597198 257.46151733]
[127.27249146 263.72982788]
[135.72323608 276.63674927]
[135.83158875 292.06372070]
[127.56299591 305.08807373]
[113.55591583 311.55377197]
[98.27996826 309.39764404]
[86.60964203 299.30770874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 121]
[3 120]
[4 119]
[5 118]
[6 116]
[7 115]
[9 113]
[10 112]
[11 111]
[12 65]
[13 64]
[14 63]
[16 61]
[17 60]
[18 59]
[20 57]
[21 56]
[23 54]
[24 53]
[26 51]
[27 50]
[29 48]
[30 47]
[32 45]
[33 44]
[35 42]
[36 41]
[71 87]
[72 86]
[73 85]
[74 84]
[88 108]
[89 107]
[90 106]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
