%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGACCUUUGCUCAUGGCGGCGGCGGCGGCGGCGGCGGUGCUGGUGGUGCUCGGCGGCCGGAGCCGGAUCCUGUAGCCGGGUGUGGGCCCGUGUCUGUCCGUCCCUCCUUCGGCCCCCUCUCUUGUCUUCCGGAGUGUGGCUGGCGGAGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[67.97753906 403.16970825]
[58.65514755 415.72467041]
[43.43170547 419.29971313]
[29.49526024 412.20678711]
[23.42616844 397.79498291]
[28.09007454 382.86911011]
[41.28482437 374.47668457]
[43.08141327 359.58468628]
[44.87800217 344.69265747]
[37.64669800 334.95181274]
[39.05884171 322.49847412]
[48.89787674 314.10202026]
[50.99207687 299.24893188]
[53.08627701 284.39584351]
[55.18048096 269.54275513]
[52.98795700 262.44058228]
[57.46805573 254.41458130]
[59.85903168 239.60636902]
[54.24936295 225.80851746]
[64.08746338 213.41809082]
[66.47843933 198.60987854]
[68.86940765 183.80166626]
[71.26038361 168.99345398]
[65.65071869 155.19558716]
[75.48881531 142.80517578]
[77.87979126 127.99696350]
[68.32768250 116.43161011]
[53.33444214 115.98145294]
[38.34119797 115.53128815]
[23.34795380 115.08113098]
[9.32179546 122.40079498]
[-3.16754222 114.28502655]
[-18.16078568 113.83486176]
[-32.18694305 121.15452576]
[-44.67628098 113.03875732]
[-59.66952515 112.58859253]
[-74.66276550 112.13843536]
[-89.65601349 111.68827057]
[-105.66946411 117.25654602]
[-115.45309448 103.41035461]
[-104.85639191 90.17607117]
[-89.20584869 96.69503021]
[-74.21260834 97.14518738]
[-59.21936417 97.59535217]
[-44.22612000 98.04550934]
[-31.27237892 90.69364929]
[-17.71062469 98.84162140]
[-2.71738172 99.29177856]
[10.23635960 91.93991852]
[23.79811478 100.08788300]
[38.79135895 100.53804779]
[53.78460312 100.98820496]
[68.77784729 101.43836975]
[80.20748901 80.02226257]
[101.38246155 75.04930115]
[106.66913605 61.01181412]
[104.29212189 45.37018967]
[116.01860809 36.18656921]
[121.30528259 22.14908218]
[126.59195709 8.11159515]
[131.87863159 -5.92589188]
[137.16531372 -19.96337891]
[142.45199585 -34.00086594]
[147.73866272 -48.03835297]
[153.02534485 -62.07584000]
[145.51573181 -77.84571075]
[151.58898926 -93.86253357]
[167.04618835 -100.42492676]
[172.05093384 -114.56538391]
[177.05567932 -128.70584106]
[182.06042480 -142.84629822]
[170.82591248 -153.04734802]
[164.37026978 -166.73559570]
[163.64907837 -181.81184387]
[168.74110413 -195.97724915]
[178.84112549 -207.08375549]
[192.38700867 -213.45986938]
[207.30130005 -214.16210938]
[212.30604553 -228.30256653]
[217.16905212 -242.49238586]
[221.88986206 -256.73016357]
[226.61067200 -270.96792603]
[231.33148193 -285.20568848]
[236.05229187 -299.44345093]
[232.21095276 -315.38635254]
[244.28204346 -326.48684692]
[259.84783936 -321.32568359]
[262.89562988 -305.21224976]
[250.29006958 -294.72265625]
[245.56925964 -280.48486328]
[240.84844971 -266.24710083]
[236.12763977 -252.00935364]
[231.40682983 -237.77157593]
[232.29174805 -230.39155579]
[226.44650269 -223.29782104]
[221.44175720 -209.15736389]
[232.59370422 -199.22946167]
[239.11271667 -185.75178528]
[239.97734070 -170.76454163]
[235.02476501 -156.54978943]
[224.98023987 -145.28384399]
[211.35118103 -138.70420837]
[196.20088196 -137.84155273]
[191.19613647 -123.70109558]
[186.19139099 -109.56063843]
[181.18664551 -95.42018127]
[188.31979370 -84.65055084]
[187.92428589 -71.54389191]
[179.92036438 -60.91241074]
[167.06283569 -56.78916550]
[161.77615356 -42.75167847]
[156.48947144 -28.71418953]
[151.20280457 -14.67670250]
[145.91612244 -0.63921511]
[140.62944031 13.39827251]
[135.34277344 27.43575859]
[130.05609131 41.47324753]
[132.81124878 56.11081314]
[120.70662689 66.29849243]
[115.41994476 80.33597565]
[123.29620361 90.95922852]
[124.64790344 104.11452484]
[138.01980591 110.91101074]
[151.39170837 117.70748901]
[164.76362610 124.50397491]
[178.52059937 117.32587433]
[193.86442566 119.63812256]
[204.89509583 130.55160522]
[207.37107849 145.86987305]
[200.34030151 159.70272827]
[186.50625610 166.73115540]
[171.18841553 164.25259399]
[160.27679443 153.22009277]
[157.96713257 137.87586975]
[144.59523010 131.07939148]
[131.22332764 124.28291321]
[117.85142517 117.48642731]
[107.76622009 127.02849579]
[92.68800354 130.38793945]
[90.29702759 145.19615173]
[95.73567963 160.05319214]
[86.06860352 171.38442993]
[83.67762756 186.19264221]
[81.28665161 201.00085449]
[78.89567566 215.80906677]
[84.33432770 230.66610718]
[74.66724396 241.99734497]
[72.27626801 256.80557251]
[70.03356934 271.63696289]
[67.93936920 286.49005127]
[65.84516907 301.34313965]
[63.75096512 316.19622803]
[71.04760742 333.07482910]
[59.77002335 346.48922729]
[57.97343445 361.38125610]
[56.17684555 376.27328491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 156]
[8 155]
[9 154]
[12 152]
[13 151]
[14 150]
[15 149]
[17 148]
[18 147]
[20 145]
[21 144]
[22 143]
[23 142]
[25 140]
[26 139]
[27 53]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[35 45]
[36 44]
[37 43]
[38 42]
[55 120]
[56 119]
[58 117]
[59 116]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
[65 110]
[68 106]
[69 105]
[70 104]
[71 103]
[78 96]
[79 95]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[122 137]
[123 136]
[124 135]
[125 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
