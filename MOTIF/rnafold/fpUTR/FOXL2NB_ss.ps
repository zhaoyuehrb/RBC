%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUUGUAAACGCCCCGCACAGCCUGGACCGGCCUGCCCCCGCCCAGCGAGCCUCAGGGGCCCAGCCGACAGCCAGGCUCACGCGCCCUUGAAAUCUGCCGGUACUCGCUCUGCGGGCUGGGCUGGGAG\
) } def
/len { sequence length } bind def

/coor [
[42.07411575 292.11889648]
[47.64691162 306.04528809]
[48.75981140 321.00393677]
[45.30915833 335.60162354]
[37.61634445 348.47875977]
[26.39787292 358.43597412]
[12.69861698 364.54583740]
[-2.20548344 366.23928833]
[-16.92627525 363.35861206]
[-30.09267616 356.17211914]
[-40.47837830 345.34912109]
[-47.11607361 331.89767456]
[-49.38752365 317.07064819]
[-47.08117294 302.24902344]
[-40.41139221 288.81262207]
[-53.40177155 296.31262207]
[-57.59606552 311.31414795]
[-70.87699890 318.73516846]
[-85.15280914 314.64410400]
[-98.14318848 322.14410400]
[-108.83711243 335.29995728]
[-124.43920135 328.66586304]
[-122.38345337 311.83700562]
[-105.64318848 309.15371704]
[-92.65280914 301.65371704]
[-89.05786896 287.24496460]
[-75.99061584 279.45385742]
[-60.90177155 283.32226562]
[-47.91139221 275.82226562]
[-44.13492584 268.47106934]
[-35.59168243 264.88778687]
[-26.60251808 252.87968445]
[-17.61335373 240.87156677]
[-8.62418842 228.86344910]
[0.36497641 216.85533142]
[9.35414124 204.84719849]
[18.34330559 192.83908081]
[27.33247185 180.83096313]
[25.93187141 168.75444031]
[33.40647888 158.66117859]
[46.15750504 156.33349609]
[55.42988968 144.54270935]
[64.70227051 132.75190735]
[73.97465515 120.96111298]
[83.24703979 109.17031860]
[81.63111877 94.77118683]
[90.58795166 83.38165283]
[104.96215820 81.55729675]
[114.23454285 69.76650238]
[123.50692749 57.97570419]
[132.77931213 46.18490982]
[142.05169678 34.39411163]
[151.32408142 22.60331726]
[160.31324768 10.59519768]
[169.01409912 -1.62344122]
[176.51409912 -14.61382198]
[182.74533081 -28.25830269]
[188.97654724 -41.90278244]
[195.20777893 -55.54726028]
[201.43901062 -69.19174194]
[207.67022705 -82.83621979]
[213.90145874 -96.48070526]
[220.13267517 -110.12518311]
[212.06283569 -128.42454529]
[219.78895569 -146.54470825]
[238.01451111 -153.18457031]
[243.25646973 -167.23881531]
[248.49844360 -181.29307556]
[253.74040222 -195.34732056]
[245.05377197 -208.20507812]
[245.61740112 -223.71191406]
[255.21455383 -235.90512085]
[270.15493774 -240.09617615]
[284.69363403 -234.67350769]
[293.24026489 -221.72225952]
[292.50845337 -206.22245789]
[282.77960205 -194.13407898]
[267.79464722 -190.10534668]
[262.55267334 -176.05110168]
[257.31072998 -161.99685669]
[252.06875610 -147.94261169]
[258.78817749 -139.96290588]
[261.56076050 -129.82180786]
[259.80892944 -119.37304688]
[253.78880310 -110.55644989]
[244.55513000 -105.03771210]
[233.77716064 -103.89395905]
[227.54592896 -90.24947357]
[221.31471252 -76.60499573]
[215.08348083 -62.96051788]
[208.85226440 -49.31603622]
[202.62103271 -35.67155838]
[196.38980103 -22.02707672]
[190.15858459 -8.38259697]
[204.14356995 -13.80661869]
[218.69160461 -10.15217113]
[228.45314026 1.23695445]
[229.83876038 16.17281914]
[222.33894348 29.16330147]
[208.71145630 35.43162155]
[193.96734619 32.67283249]
[183.52819824 21.90137672]
[181.23274231 7.07741261]
[172.53189087 19.29605103]
[172.44938660 24.16020775]
[169.24397278 29.00147057]
[163.11488342 31.87570190]
[153.84249878 43.66649628]
[144.57011414 55.45729446]
[135.29772949 67.24809265]
[126.02534485 79.03888702]
[116.75296021 90.82968140]
[118.36888123 105.22881317]
[109.41204834 116.61834717]
[95.03784180 118.44270325]
[85.76545715 130.23348999]
[76.49307251 142.02429199]
[67.22068787 153.81509399]
[57.94829941 165.60588074]
[55.79807281 183.84858704]
[39.34059143 189.82012939]
[30.35142517 201.82824707]
[21.36226082 213.83636475]
[12.37309456 225.84448242]
[3.38392997 237.85261536]
[-5.60523510 249.86073303]
[-14.59440041 261.86883545]
[-23.58356476 273.87695312]
[-9.45111561 268.84963989]
[5.53949499 268.31900024]
[19.99205399 272.33441162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 29]
[16 28]
[19 25]
[20 24]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[37 122]
[38 121]
[41 119]
[42 118]
[43 117]
[44 116]
[45 115]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 104]
[55 103]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[66 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
