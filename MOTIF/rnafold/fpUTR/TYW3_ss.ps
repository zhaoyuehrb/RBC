%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCCACCGCUCGCUUCAAUAUGGCUGCCCCCAGGGAGAGACGAGGCUACCAUGAAGGAGCCGAGCGCAGACCCUGAGUCCGUCACCC\
) } def
/len { sequence length } bind def

/coor [
[172.80032349 278.57757568]
[167.18122864 264.66979980]
[161.56211853 250.76203918]
[155.94302368 236.85429382]
[138.99162292 235.17819214]
[125.07628632 225.20263672]
[117.97389221 209.52754211]
[119.66582489 192.31391907]
[129.78608704 178.17933655]
[123.21052551 164.69741821]
[116.63495636 151.21551514]
[110.05939484 137.73359680]
[103.48382568 124.25169373]
[96.90825653 110.76978302]
[90.09840393 97.40468597]
[83.05632782 84.16046906]
[76.01425171 70.91625214]
[68.97218323 57.67203903]
[54.12617493 52.95675659]
[47.17317963 39.42492294]
[51.75997162 25.30058670]
[44.71789932 12.05637264]
[37.67582703 -1.18784130]
[30.63375282 -14.43205547]
[23.59167862 -27.67626953]
[8.74567413 -32.39155197]
[1.79267919 -45.92338562]
[6.37947178 -60.04772186]
[-0.66260183 -73.29193878]
[-7.70467520 -86.53614807]
[-22.77141571 -84.70372772]
[-37.48171616 -88.44157410]
[-49.84613037 -97.24417114]
[-58.19247055 -109.92104340]
[-61.39196777 -124.75774384]
[-59.01190948 -139.74772644]
[-51.37418365 -152.86373901]
[-39.51172638 -162.33192444]
[-25.02884293 -166.87179565]
[-9.88422012 -165.86938477]
[3.87395549 -159.46025085]
[14.38500309 -148.51116943]
[20.22738838 -134.50292969]
[20.61098099 -119.33000946]
[15.48389816 -105.04444122]
[5.53953886 -93.57822418]
[12.58161163 -80.33400726]
[19.62368584 -67.08979797]
[33.89819336 -62.99419022]
[41.22852707 -49.66299057]
[36.83589172 -34.71834183]
[43.87796783 -21.47412872]
[50.92004013 -8.22991467]
[57.96211243 5.01429892]
[65.00418854 18.25851250]
[79.27869415 22.35411835]
[86.60903168 35.68531799]
[82.21639252 50.62996674]
[89.25846863 63.87417984]
[96.30054474 77.11839294]
[103.34261322 90.36260986]
[109.74333191 95.57110596]
[110.39016724 104.19421387]
[116.96573639 117.67612457]
[123.54130554 131.15803528]
[130.11686707 144.63993835]
[136.69244385 158.12185669]
[143.26800537 171.60375977]
[156.41874695 171.29679871]
[168.63661194 176.04223633]
[178.06430054 185.07977295]
[183.28363037 196.99971008]
[183.52880859 209.96267700]
[178.79856873 221.98350525]
[169.85078430 231.23518372]
[175.46987915 245.14294434]
[181.08898926 259.05068970]
[186.70808411 272.95846558]
[201.94238281 273.89581299]
[215.25712585 281.35772705]
[224.00865173 293.86267090]
[226.45935059 308.92776489]
[222.12260437 323.56182861]
[211.85951233 334.85922241]
[197.70779419 340.57690430]
[182.47729492 339.57955933]
[169.19203186 332.06524658]
[160.48982239 319.52593994]
[158.09848022 304.45132446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 61]
[16 60]
[17 59]
[18 58]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[28 48]
[29 47]
[30 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
