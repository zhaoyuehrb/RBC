%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCGGACCCCUGUUUGCUUUAGAGCCGAGCCGCGCCGAUGCCCUCACACUCUGCGCCUCCUCUCCCGGGACUUUAACACCCCGCUCUCCUCCACCGACCAGGUGACCUUUUGCUCUGAGCCAGAUCAGAGAAGAAUUCGGUGUCCGUGCGGGACG\
) } def
/len { sequence length } bind def

/coor [
[-72.32621002 130.35200500]
[-81.14305878 114.28697205]
[-96.06899261 115.77577972]
[-110.99492645 117.26458740]
[-125.92086029 118.75339508]
[-140.84678650 120.24220276]
[-155.77272034 121.73101044]
[-142.31690979 128.35983276]
[-131.87361145 139.12725830]
[-125.65902710 152.77931213]
[-124.39688873 167.72612000]
[-128.23420715 182.22698975]
[-136.72407532 194.59315491]
[-148.87777710 203.38449097]
[-163.27990723 207.57714844]
[-178.25323486 206.68287659]
[-192.05395508 200.80581665]
[-203.07487488 190.63038635]
[-210.03251648 177.34162903]
[-212.11659241 162.48710632]
[-209.08439636 147.79678345]
[-201.28906250 134.98144531]
[-189.63841248 125.53357697]
[-175.48953247 120.55348969]
[-190.13217163 117.29881287]
[-204.77482605 114.04412842]
[-218.00660706 122.26348114]
[-232.80996704 118.75418091]
[-240.56431580 106.08905029]
[-255.20695496 102.83436584]
[-269.84960938 99.57968140]
[-276.34588623 101.21868896]
[-281.84872437 99.54448700]
[-285.00421143 95.89354706]
[-299.50588989 92.05929565]
[-314.00756836 88.22504425]
[-328.50924683 84.39080048]
[-343.82873535 88.34349823]
[-354.15539551 77.60993958]
[-368.65707397 73.77568817]
[-383.19613647 70.08580017]
[-397.77117920 66.54063416]
[-411.13909912 74.97118378]
[-426.53427124 71.39849091]
[-434.82302856 57.94218063]
[-431.08776855 42.58563995]
[-417.54458618 34.43962860]
[-402.22839355 38.33703613]
[-394.22601318 51.96559525]
[-379.65097046 55.51076126]
[-372.36859131 54.02776337]
[-364.82281494 59.27401733]
[-350.32113647 63.10826874]
[-336.03890991 58.88131714]
[-324.67498779 69.88912201]
[-310.17330933 73.72337341]
[-295.67163086 77.55762482]
[-281.16995239 81.39186859]
[-266.59490967 84.93704224]
[-251.95228577 88.19171906]
[-237.30963135 91.44640350]
[-224.92024231 83.25870514]
[-210.02413940 86.35083008]
[-201.52014160 99.40148163]
[-186.87750244 102.65616608]
[-172.23484802 105.91085052]
[-157.26153564 106.80507660]
[-142.33560181 105.31626892]
[-127.40966797 103.82746124]
[-112.48373413 102.33865356]
[-97.55780029 100.84984589]
[-82.63186646 99.36103821]
[-80.06336212 87.95063019]
[-74.37404633 77.70957184]
[-66.01554108 69.47327423]
[-55.65770721 63.91710281]
[-44.13497162 61.50103760]
[-32.37908554 62.43158722]
[-21.34380722 66.64419556]
[-11.92750931 73.80758667]
[-4.90004635 83.34979248]
[-0.83982253 94.50382996]
[14.15721226 94.20559692]
[29.15424728 93.90736389]
[44.15128326 93.60913086]
[59.14831543 93.31089783]
[62.12075424 81.84391022]
[68.29006958 71.52927399]
[77.24051666 63.25121307]
[88.31409454 57.75054169]
[100.65847015 55.55905914]
[113.29243469 56.94956589]
[125.18391418 61.90614700]
[135.33424377 70.11773682]
[146.45475769 60.05126190]
[157.57528687 49.98478317]
[168.69581604 39.91830826]
[170.92584229 24.03100204]
[184.81019592 15.99331856]
[199.69796753 21.97108078]
[204.16854858 37.37865829]
[194.79248047 50.39668274]
[178.76228333 51.03883362]
[167.64175415 61.10530853]
[156.52124023 71.17178345]
[145.40071106 81.23825836]
[148.94587708 95.81330109]
[163.44755554 99.64755249]
[177.94923401 103.48180389]
[192.55879211 106.88188934]
[207.26324463 109.84480286]
[221.96771240 112.80771637]
[236.67216492 115.77062225]
[251.72877502 110.91168213]
[262.67694092 121.01052094]
[277.38140869 123.97343445]
[292.08587646 126.93634796]
[306.79034424 129.89926147]
[321.49481201 132.86216736]
[336.19924927 135.82507324]
[349.22143555 126.86973572]
[364.74649048 129.82754517]
[373.56365967 142.94367981]
[370.44186401 158.43658447]
[357.23324585 167.11457825]
[341.77420044 163.82917786]
[333.23635864 150.52954102]
[318.53189087 147.56661987]
[303.82742310 144.60371399]
[289.12295532 141.64080811]
[274.41851807 138.67788696]
[259.71405029 135.71498108]
[245.70919800 140.78585815]
[233.70925903 130.47508240]
[219.00480652 127.51217651]
[204.30033875 124.54926300]
[189.59588623 121.58635712]
[186.43815613 123.26792145]
[182.29667664 123.47103882]
[177.89051819 121.74476624]
[174.11497498 117.98347473]
[159.61329651 114.14922333]
[145.11163330 110.31497192]
[137.29025269 126.20795441]
[124.23341370 137.77691650]
[108.02107239 143.45022583]
[91.13591003 142.57423401]
[76.08353424 135.48225403]
[65.02067566 123.41488647]
[59.44654846 108.30792999]
[44.44951630 108.60616302]
[29.45248032 108.90439606]
[14.45544529 109.20262909]
[-0.54158968 109.50086212]
[-7.63184166 126.67256927]
[-21.44292641 139.02244568]
[-39.20035172 144.12841797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[24 66]
[25 65]
[26 64]
[29 61]
[30 60]
[31 59]
[34 58]
[35 57]
[36 56]
[37 55]
[39 53]
[40 52]
[41 50]
[42 49]
[82 154]
[83 153]
[84 152]
[85 151]
[86 150]
[94 106]
[95 105]
[96 104]
[97 103]
[107 143]
[108 142]
[109 141]
[110 137]
[111 136]
[112 135]
[113 134]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
