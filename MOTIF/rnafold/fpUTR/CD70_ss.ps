%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAGAGGGGCAGGCUGGUCCCCUGACAGGUUGAAGCAAGUAGACGCCCAGGAGCCCCGGGAGGGGGCUGCAGUUUCCUUCCUUCCUUCUCGGCAGCGCUCCGCGCCCCCAUCGCCCCUCCUGCGCUAGCGGAGGUGAUCGCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[173.70382690 255.19584656]
[173.33956909 248.48951721]
[165.88465881 235.47320557]
[158.42974854 222.45689392]
[152.33686829 218.18814087]
[150.95837402 209.09133911]
[143.77586365 195.92276001]
[136.59335327 182.75418091]
[129.41084290 169.58560181]
[122.22834015 156.41700745]
[115.04582977 143.24842834]
[107.86331940 130.07984924]
[84.66661072 129.90136719]
[66.29409790 112.97390747]
[53.85465622 121.35604858]
[41.41521454 129.73818970]
[28.97577667 138.12033081]
[21.85502625 152.24851990]
[6.97667217 152.94412231]
[-5.46276808 161.32626343]
[-17.90220833 169.70841980]
[-24.60780334 184.67393494]
[-40.94655228 186.08009338]
[-50.11055374 172.48034668]
[-42.67266464 157.86495972]
[-26.28435135 157.26896667]
[-13.84491158 148.88682556]
[-1.40547109 140.50468445]
[4.82552767 126.97605133]
[20.59363365 125.68089294]
[33.03307343 117.29875183]
[45.47251511 108.91661072]
[57.91195297 100.53446960]
[60.39707184 85.74176025]
[51.37954330 73.75492859]
[42.36201096 61.76809311]
[33.34448242 49.78126144]
[18.86520386 43.40465927]
[17.39701462 28.58259392]
[8.37948513 16.59576035]
[-0.63804489 4.60892820]
[-15.11732388 -1.76767313]
[-16.58551216 -16.58974075]
[-25.60304260 -28.57657433]
[-34.62057114 -40.56340790]
[-43.63810349 -52.55023956]
[-52.77983475 -64.44261932]
[-62.04478455 -76.23925781]
[-66.75474548 -61.99789810]
[-80.75040436 -56.60145950]
[-93.80206299 -63.99429703]
[-96.37002563 -78.77285004]
[-86.57730865 -90.13518524]
[-71.58219147 -89.77665710]
[-79.57210541 -102.47158813]
[-87.56202698 -115.16651917]
[-95.55194092 -127.86145020]
[-103.54185486 -140.55638123]
[-111.53177643 -153.25131226]
[-126.79337311 -158.19734192]
[-132.30676270 -173.26325989]
[-123.84255981 -186.89178467]
[-107.89376831 -188.62828064]
[-96.69493103 -177.14065552]
[-98.83684540 -161.24122620]
[-90.84692383 -148.54629517]
[-82.85700989 -135.85136414]
[-74.86709595 -123.15643311]
[-66.87718201 -110.46150208]
[-58.88726044 -97.76657867]
[-50.24814606 -85.50420380]
[-40.98319626 -73.70756531]
[-34.33531570 -70.36820984]
[-31.65126991 -61.56776810]
[-22.63373947 -49.58093643]
[-13.61620998 -37.59410477]
[-4.59868050 -25.60727119]
[9.23560524 -20.08804703]
[11.34878731 -4.40860176]
[20.36631775 7.57823086]
[29.38384819 19.56506348]
[43.21813202 25.08428574]
[45.33131409 40.76373291]
[54.34884644 52.75056458]
[63.36637497 64.73739624]
[72.38390350 76.72422791]
[79.33423615 71.25997925]
[87.25458527 67.74630737]
[95.62242126 66.32067108]
[103.90786743 66.98583984]
[111.60720062 69.61487579]
[118.27347565 73.96405792]
[123.54244232 79.69280243]
[136.92872620 72.92468262]
[141.94844055 58.17882919]
[155.62043762 51.50569153]
[169.64743042 56.38208771]
[183.03372192 49.61397171]
[196.41999817 42.84585571]
[209.80628967 36.07774353]
[221.21327209 23.53513718]
[236.42347717 31.02419662]
[233.43769836 47.71315765]
[216.57440186 49.46402740]
[203.18811035 56.23214340]
[189.80183411 63.00025558]
[176.41554260 69.76837158]
[172.02714539 83.95560455]
[158.54795837 91.01012421]
[143.69683838 86.31097412]
[130.31056213 93.07908630]
[131.06750488 101.19966125]
[129.68659973 109.23768616]
[126.26286316 116.64003754]
[121.03189850 122.89733887]
[128.21441650 136.06591797]
[135.39692688 149.23449707]
[142.57942200 162.40309143]
[149.76193237 175.57167053]
[156.94444275 188.74024963]
[164.12695312 201.90882874]
[171.44606018 215.00198364]
[178.90097046 228.01829529]
[186.35588074 241.03460693]
[194.07997131 253.89300537]
[202.06988525 266.58795166]
[210.05979919 279.28286743]
[218.04971313 291.97778320]
[225.31747437 297.61975098]
[226.07061768 305.02099609]
[233.79469299 317.87939453]
[241.51878357 330.73779297]
[249.24287415 343.59619141]
[262.98175049 351.44183350]
[262.90289307 366.33624268]
[270.62698364 379.19464111]
[283.96624756 389.65887451]
[277.60363770 405.37362671]
[260.74166870 403.60995483]
[257.76855469 386.91873169]
[250.04447937 374.06030273]
[236.85809326 367.13439941]
[236.38446045 351.32028198]
[228.66038513 338.46188354]
[220.93629456 325.60348511]
[213.21220398 312.74505615]
[205.35478210 299.96771240]
[197.36486816 287.27279663]
[189.37495422 274.57785034]
[181.38504028 261.88293457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[21 26]
[34 86]
[35 85]
[36 84]
[37 83]
[39 81]
[40 80]
[41 79]
[43 77]
[44 76]
[45 75]
[46 74]
[47 72]
[48 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[93 111]
[94 110]
[97 107]
[98 106]
[99 105]
[100 104]
[125 150]
[126 149]
[127 148]
[128 147]
[130 146]
[131 145]
[132 144]
[133 143]
[135 141]
[136 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
