%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGACCCAGGACGGGCAGCUCAGACGCCCAGCUCGGCCGCCGGGACCCAGUGCCUCUGCUGACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[28.13639259 274.64501953]
[19.35122871 278.39767456]
[9.85586739 278.89788818]
[0.81023878 276.11523438]
[-9.32361412 287.17437744]
[-8.38393307 302.95071411]
[-18.93736649 314.71508789]
[-34.72274780 315.48791504]
[-46.37489319 304.81069946]
[-46.98078918 289.01803589]
[-36.18096924 277.47943115]
[-20.38277435 277.04052734]
[-10.24892139 265.98138428]
[-13.74511719 245.32075500]
[-1.36376464 228.09176636]
[19.85083008 224.73512268]
[27.35083008 211.74473572]
[34.85083008 198.75436401]
[42.06566238 185.60345459]
[48.99188995 172.29829407]
[55.91812134 158.99313354]
[62.84434891 145.68797302]
[62.16984558 140.66566467]
[64.87490845 135.21348572]
[70.99864197 131.56431580]
[79.05813599 118.91345215]
[87.11763000 106.26258087]
[87.91930389 92.30374908]
[100.23149872 85.67792511]
[108.29099274 73.02705383]
[108.50651550 67.15976715]
[110.90502930 62.57365036]
[114.53456879 59.92578506]
[118.32084656 59.34806442]
[127.96265411 47.85739899]
[137.60447693 36.36673355]
[140.54794312 20.82174492]
[154.65599060 16.04553032]
[164.29780579 4.55486393]
[173.68664551 -7.14340305]
[182.81806946 -19.04370308]
[184.42097473 -35.36432648]
[199.46620178 -41.88913727]
[212.47651672 -31.90596962]
[210.06802368 -15.68464947]
[194.71836853 -9.91228199]
[185.58694458 1.98801816]
[183.96472168 9.44356918]
[175.78846741 14.19667816]
[166.14665222 25.68734550]
[163.89283752 40.41044235]
[149.09513855 46.00854492]
[139.45332336 57.49921417]
[129.81150818 68.98987579]
[120.94186401 81.08654785]
[112.88237000 93.73741913]
[112.08069611 107.69625092]
[99.76850128 114.32207489]
[91.70900726 126.97294617]
[83.64951324 139.62380981]
[76.14951324 152.61419678]
[69.22328186 165.91935730]
[62.29705429 179.22451782]
[55.37082291 192.52967834]
[54.10844421 201.90249634]
[47.84121323 206.25436401]
[40.34121323 219.24473572]
[32.84121323 232.23512268]
[38.26574707 240.36795044]
[40.55209732 249.82690430]
[39.45114899 259.45092773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[16 68]
[17 67]
[18 66]
[19 64]
[20 63]
[21 62]
[22 61]
[25 60]
[26 59]
[27 58]
[29 56]
[30 55]
[34 54]
[35 53]
[36 52]
[38 50]
[39 49]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
