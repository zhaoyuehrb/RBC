%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCGCAUUCCUAGCCUGGCGGCGCGCGCGGCUCCUUAAUGAGACUCGGGCCAAGGGCCGACCUCGCGAUUCCGCUCGCCCCUAUUUU\
) } def
/len { sequence length } bind def

/coor [
[65.77735138 335.05947876]
[52.85182953 342.94677734]
[38.06510544 346.20736694]
[23.02113533 344.48757935]
[9.35177517 337.97396851]
[-1.46022308 327.37304688]
[-8.24205589 313.83474731]
[-10.25808144 298.82760620]
[-7.28961468 283.97946167]
[0.34134638 270.90097046]
[11.80705166 261.01074219]
[25.86378860 255.38165283]
[40.98678589 254.62423706]
[45.12134552 240.20532227]
[49.25590897 225.78639221]
[43.40006638 217.08906555]
[43.41834259 206.38179016]
[49.55317307 197.33633423]
[59.90707397 193.19349670]
[65.03737640 179.09811401]
[70.16767883 165.00271606]
[75.29798126 150.90733337]
[80.18150330 136.72454834]
[84.81675720 122.45870972]
[89.45201111 108.19285583]
[93.08084106 93.63842010]
[95.68556213 78.86631012]
[98.29028320 64.09419250]
[100.89501190 49.32207489]
[102.46293640 34.40424728]
[102.98642731 19.41338348]
[103.50991821 4.42252111]
[104.03340912 -10.56834126]
[101.15818024 -19.47477722]
[104.84585571 -26.07063866]
[105.89220428 -41.03409958]
[106.93854523 -55.99756241]
[107.98489380 -70.96102142]
[95.03585815 -84.54977417]
[95.88832092 -102.98723602]
[109.56378174 -114.91114807]
[109.56378174 -129.91114807]
[109.56378174 -144.91114807]
[103.51744080 -160.75028992]
[117.06378174 -170.94503784]
[130.61012268 -160.75028992]
[124.56378174 -144.91114807]
[124.56378174 -129.91114807]
[124.56378174 -114.91114807]
[134.38311768 -108.61753845]
[139.91239929 -98.21081543]
[139.62622070 -86.30855560]
[133.47924805 -75.97109985]
[122.94835663 -69.91467285]
[121.90200806 -54.95121384]
[120.85565948 -39.98775101]
[119.80931091 -25.02429199]
[119.02427673 -10.04484940]
[118.50078583 4.94601345]
[117.97728729 19.93687630]
[117.45379639 34.92773819]
[119.50579071 37.13657761]
[120.70344543 40.37913132]
[120.61238861 44.29229355]
[118.95503998 48.34947205]
[115.66712189 51.92679596]
[113.06240082 66.69891357]
[110.45767975 81.47103119]
[107.85295868 96.24314880]
[109.58806610 99.04540253]
[110.24300385 102.59093475]
[109.52188873 106.44094086]
[107.31137085 110.04720306]
[103.71785736 112.82811737]
[99.08260345 127.09396362]
[94.44734955 141.35980225]
[94.75625610 150.71374512]
[89.39337158 156.03762817]
[84.26306915 170.13302612]
[79.13276672 184.22840881]
[74.00246429 198.32380676]
[78.57534027 217.80499268]
[63.67483139 229.92095947]
[59.54027176 244.33987427]
[55.40571213 258.75881958]
[67.82937622 267.41510010]
[76.76719666 279.63778687]
[81.24964905 294.10104370]
[80.79051971 309.23605347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 85]
[14 84]
[15 83]
[19 81]
[20 80]
[21 79]
[22 78]
[23 76]
[24 75]
[25 74]
[26 69]
[27 68]
[28 67]
[29 66]
[30 61]
[31 60]
[32 59]
[33 58]
[35 57]
[36 56]
[37 55]
[38 54]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
