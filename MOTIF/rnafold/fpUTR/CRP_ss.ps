%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCAAGAGAUCUAGGACUUCUAGCCCCUGAACUUUCAGCCGAAUACAUCUUUUCCAAAGGAGUGAAUUCAGGCCCUUGUAUCACUGGCAGCAGGACGUGACC\
) } def
/len { sequence length } bind def

/coor [
[68.81728363 220.96002197]
[64.54800415 206.58039856]
[67.26987457 191.83009338]
[55.54240417 201.18244934]
[43.81493378 210.53479004]
[37.84965134 225.18832397]
[23.07494164 227.07438660]
[11.34746838 236.42672729]
[-0.38000357 245.77908325]
[-12.10747623 255.13142395]
[-18.07275772 269.78494263]
[-32.84746552 271.67102051]
[-44.57493973 281.02337646]
[-53.18864059 295.62612915]
[-69.60522461 291.39147949]
[-70.08065033 274.44421387]
[-53.92728424 269.29589844]
[-42.19981384 259.94354248]
[-37.07336044 245.95895386]
[-21.45982361 243.40394592]
[-9.73235035 234.05160522]
[1.99512160 224.69926453]
[13.72259426 215.34690857]
[18.84904861 201.36231995]
[34.46258545 198.80732727]
[46.19005585 189.45497131]
[57.91753006 180.10263062]
[67.95449066 168.95545959]
[76.02974701 156.31463623]
[84.10500336 143.67382812]
[92.18026733 131.03300476]
[83.00925446 126.47492981]
[75.89514923 119.35378265]
[71.50227356 110.49246216]
[70.18968201 100.86652374]
[71.98400879 91.49716949]
[76.58807373 83.34294891]
[83.42326355 77.20167542]
[91.70008087 73.63272858]
[100.50836945 72.90705109]
[104.92970276 58.57345963]
[109.35102844 44.23986816]
[113.55744171 29.84173965]
[117.54798889 15.38229656]
[121.53854370 0.92285377]
[125.52909851 -13.53658962]
[121.74198151 -28.89785004]
[132.58638000 -39.10805893]
[136.57691956 -53.56750488]
[140.35072327 -68.08502197]
[143.90693665 -82.65737152]
[147.46313477 -97.22972870]
[151.01934814 -111.80207825]
[154.57554626 -126.37442780]
[149.45991516 -141.95526123]
[160.59562683 -153.99385071]
[176.52723694 -150.10592651]
[180.86566162 -134.29106140]
[169.14790344 -122.81822205]
[165.59169006 -108.24587250]
[162.03549194 -93.67352295]
[158.47927856 -79.10116577]
[154.92308044 -64.52881622]
[156.41950989 -57.16419601]
[151.03637695 -49.57695007]
[147.04582214 -35.11750793]
[151.11836243 -20.79048347]
[139.98854065 -9.54603672]
[135.99798584 4.91340637]
[132.00743103 19.37284851]
[128.01687622 33.83229065]
[129.29232788 41.23838425]
[123.68461609 48.66119766]
[119.26329041 62.99478912]
[114.84196472 77.32837677]
[126.13038635 88.05100250]
[130.09826660 104.03819275]
[124.56704712 120.50991058]
[138.53015137 125.99002075]
[152.49325562 131.47013855]
[166.45635986 136.95025635]
[180.10217285 129.31312561]
[195.45478821 132.28486633]
[205.26516724 144.46232605]
[204.90115356 160.09567261]
[194.53462219 171.80331421]
[179.06033325 174.05726624]
[165.78475952 165.79328918]
[160.97624207 150.91336060]
[147.01313782 145.43324280]
[133.05003357 139.95312500]
[119.08692932 134.47302246]
[104.82108307 139.10827637]
[96.74581909 151.74908447]
[88.67056274 164.38989258]
[80.59530640 177.03071594]
[94.98097229 172.78189087]
[109.72801208 175.52502441]
[121.62367249 184.66249084]
[128.07638550 198.20362854]
[127.68036652 213.19841003]
[120.52190399 226.38008118]
[108.16053009 234.87692261]
[93.28925323 236.83782959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[7 23]
[8 22]
[9 21]
[10 20]
[12 18]
[13 17]
[28 96]
[29 95]
[30 94]
[31 93]
[40 75]
[41 74]
[42 73]
[43 71]
[44 70]
[45 69]
[46 68]
[48 66]
[49 65]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
