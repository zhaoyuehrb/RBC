%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAUUCCCUGAUUCUCCAGAGAGAUUACACACUUCGUUUGUGGCUAAGGUGACCCAAUGAAAGAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[74.34915924 138.99734497]
[65.81438446 131.78210449]
[59.23937225 122.74488831]
[55.00105286 112.40377045]
[40.08778381 114.01448822]
[25.17451477 115.62520599]
[10.26124573 117.23593140]
[-4.61391401 119.16715240]
[-19.44407845 121.41798401]
[-31.92697525 131.13847351]
[-45.67116928 125.39856720]
[-60.50133133 127.64939880]
[-75.33149719 129.90022278]
[-84.50037384 142.77296448]
[-100.09977722 145.30953979]
[-112.87484741 136.00508118]
[-115.24636841 120.37973022]
[-105.80735016 107.70375061]
[-90.15780640 105.49755859]
[-77.58232880 115.07006836]
[-62.75216293 112.81923676]
[-47.92199707 110.56840515]
[-36.49985504 101.00891113]
[-21.69490814 106.58781433]
[-6.86474466 104.33699036]
[-0.53249526 100.08931732]
[8.65052605 102.32266235]
[23.56379509 100.71193695]
[38.47706223 99.10121918]
[53.39033127 97.49050140]
[58.45594788 78.71971893]
[70.72922516 63.64094543]
[88.08082581 54.87027359]
[107.50034332 53.92936325]
[125.61858368 60.98145294]
[139.29214478 74.80304718]
[153.05589294 68.83990479]
[166.81965637 62.87676620]
[180.58340454 56.91362381]
[194.34716797 50.95048141]
[208.11091614 44.98733902]
[218.54730225 29.99179840]
[235.80725098 32.31656265]
[249.30172729 25.76679230]
[258.33828735 12.78021622]
[273.16662598 14.18355179]
[286.66110229 7.63378334]
[295.40435791 -6.24019670]
[311.77850342 -5.33500576]
[318.93920898 9.41817379]
[309.52017212 22.84253502]
[293.21084595 21.12824631]
[279.71640015 27.67801476]
[271.64505005 40.19610977]
[255.85148621 39.26125717]
[242.35702515 45.81102371]
[237.98306274 57.29461288]
[226.53689575 62.78153229]
[214.07405090 58.75109482]
[200.31030273 64.71423340]
[186.54655457 70.67737579]
[172.78279114 76.64051819]
[159.01904297 82.60366058]
[145.25527954 88.56680298]
[146.67587280 99.65211487]
[145.42068481 110.75736237]
[141.56163025 121.24592590]
[135.31997681 130.51651001]
[127.05352783 138.03768921]
[117.23617554 143.37825012]
[106.43072510 146.23207092]
[95.25661469 146.43553162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[8 25]
[9 24]
[11 22]
[12 21]
[13 20]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[43 56]
[44 55]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
