%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGCAAAGAGUAGUCAGUCCCUUCUUGGCUCUGCUGACACUCGAGCCCACAUUCCAUCACCUGCUCCCAAUC\
) } def
/len { sequence length } bind def

/coor [
[94.11238098 218.92802429]
[104.01613617 206.61172485]
[102.16075134 191.72691345]
[92.90859985 180.05442810]
[98.87950134 165.40318298]
[97.02410889 150.51837158]
[95.16872406 135.63357544]
[93.31333160 120.74875641]
[85.39760590 112.37521362]
[83.69552612 102.41449738]
[87.31649780 94.50258636]
[76.28063965 84.34336853]
[65.24478149 74.18414307]
[54.20892334 64.02491760]
[45.51345825 60.37218475]
[42.93800354 53.21052933]
[32.33140182 42.60392761]
[21.72480011 31.99732590]
[11.11819839 21.39072418]
[0.51159632 10.78412342]
[-10.09500504 0.17752162]
[-30.98164177 -3.59125781]
[-36.52684784 -23.29208565]
[-48.36395645 -32.50527573]
[-64.39759064 -31.95568275]
[-74.71416473 -44.24177170]
[-71.39967346 -59.93870544]
[-56.99672318 -67.00514221]
[-42.55401611 -60.02031326]
[-39.15076828 -44.34238434]
[-27.31365967 -35.12919235]
[-18.30654907 -37.75652695]
[-8.99871540 -35.74382401]
[-1.66860020 -29.44688225]
[1.82464635 -20.28641891]
[0.51159632 -10.42908001]
[11.11819839 0.17752162]
[21.72480011 10.78412342]
[32.33140182 21.39072418]
[42.93800354 31.99732590]
[53.54460526 42.60392761]
[64.36814880 52.98905945]
[75.40400696 63.14828110]
[86.43986511 73.30750275]
[97.47572327 83.46672821]
[112.31900787 85.62934875]
[125.79486847 79.04139709]
[139.27073669 72.45344543]
[144.16468811 57.42597961]
[158.28894043 50.33506393]
[173.26382446 55.38761520]
[180.20501709 69.58604431]
[174.99441528 84.50667572]
[160.72338867 91.29736328]
[145.85868835 85.92931366]
[132.38282776 92.51726532]
[118.90695953 99.10520935]
[133.48124695 95.55694580]
[147.17797852 101.67247009]
[154.26528931 114.89253235]
[151.77725220 129.68475342]
[140.75508118 139.85882568]
[125.81137085 141.15705872]
[113.19981384 133.03617859]
[108.19814301 118.89337158]
[110.05352783 133.77818298]
[111.90892029 148.66299438]
[113.76430511 163.54779053]
[123.14916992 176.28494263]
[117.04555511 189.87152100]
[118.90094757 204.75633240]
[131.52513123 214.26452637]
[133.64570618 229.92590332]
[124.00457001 242.44885254]
[108.32164764 244.40371704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[5 68]
[6 67]
[7 66]
[8 65]
[11 45]
[12 44]
[13 43]
[14 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[23 31]
[24 30]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
