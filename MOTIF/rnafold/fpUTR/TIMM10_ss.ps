%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCACGUGCUUCCGCUGGAGCCUCUCGGGAGGCGGGUAACGUUAUAGUAUUUGUCAGAAGUUGGGGUCUCCGUGGGCAUUGUGAUCCGUCCCAGGCAGUGGAUUAGGAGGCCAGAAGGAGAUCCCUUCCACGGUGCUAGGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[74.05085754 318.34347534]
[59.13562012 319.93582153]
[46.58752441 311.71722412]
[42.08721924 297.40640259]
[34.77179337 310.50161743]
[27.45637131 323.59683228]
[25.98464394 332.68380737]
[19.84415245 336.88998413]
[12.25242519 349.82696533]
[4.66069841 362.76394653]
[5.08579922 379.15759277]
[-9.03837109 387.49063110]
[-23.18207741 379.19079590]
[-22.79548645 362.79620361]
[-8.27629089 355.17221069]
[-0.68456346 342.23522949]
[6.90716362 329.29824829]
[14.36115932 316.28140259]
[21.67658234 303.18618774]
[28.99200630 290.09100342]
[35.31524658 276.48889160]
[40.61140823 262.45498657]
[45.90757370 248.42108154]
[51.20373917 234.38717651]
[56.49990463 220.35327148]
[51.28760910 200.42214966]
[67.86429596 186.91365051]
[72.25663757 172.57115173]
[76.64897919 158.22865295]
[80.88885498 143.84034729]
[84.97577667 129.40785217]
[89.06270599 114.97534180]
[82.16787720 101.65388489]
[68.02471161 96.65678406]
[53.88155365 91.65969086]
[39.73839188 86.66259003]
[25.59523010 81.66549683]
[11.45206833 76.66839600]
[-2.69109321 71.67130280]
[-11.89606857 71.75644684]
[-17.07949066 66.41513062]
[-31.11340141 61.11896515]
[-45.40967178 67.85633850]
[-60.25424194 62.43283844]
[-66.84008789 48.06613541]
[-61.25994492 33.27973557]
[-46.82441330 26.84615135]
[-32.09783936 32.58231354]
[-25.81723595 47.08505630]
[-11.78332615 52.38122177]
[2.30600357 57.52814102]
[16.44916534 62.52523804]
[30.59232712 67.52233124]
[44.73548889 72.51943207]
[58.87865067 77.51652527]
[73.02181244 82.51362610]
[87.16497040 87.51071930]
[75.57104492 77.99333191]
[72.22891235 63.37039566]
[78.53722382 49.76138306]
[91.85603333 42.86143875]
[106.61164856 45.55807877]
[116.62907410 56.72280502]
[117.71618652 71.68335724]
[109.41704559 84.17976379]
[121.47700500 75.26026154]
[133.53695679 66.34076691]
[145.59692383 57.42126846]
[157.65687561 48.50177002]
[169.71682739 39.58227539]
[181.77679443 30.66277695]
[193.83674622 21.74327850]
[205.89669800 12.82378101]
[205.50955200 -4.05305767]
[215.14143372 -17.71452332]
[230.85284424 -22.91513443]
[246.41854858 -17.80195045]
[258.28646851 -26.97541618]
[270.15438843 -36.14888000]
[276.34115601 -50.71028519]
[291.14276123 -52.37211990]
[303.01068115 -61.54558563]
[309.19744873 -76.10699463]
[323.99905396 -77.76882935]
[335.86697388 -86.94229126]
[347.73489380 -96.11575317]
[359.60281372 -105.28922272]
[371.47073364 -114.46268463]
[383.33865356 -123.63615417]
[394.90850830 -133.18278503]
[406.16860962 -143.09291077]
[417.42868042 -153.00302124]
[425.32403564 -168.00636292]
[441.92666626 -164.57292175]
[443.22348022 -147.66864014]
[427.33880615 -141.74293518]
[416.07873535 -131.83282471]
[404.81863403 -121.92269897]
[404.24960327 -118.37654877]
[401.89212036 -114.94235229]
[397.82406616 -112.47739410]
[392.51211548 -111.76823425]
[380.64419556 -102.59476471]
[368.77627563 -93.42130280]
[356.90835571 -84.24783325]
[345.04043579 -75.07437134]
[333.17251587 -65.90090942]
[327.83462524 -51.99564743]
[312.18414307 -49.67766571]
[300.31622314 -40.50419998]
[294.97833252 -26.59894371]
[279.32785034 -24.28096199]
[267.45993042 -15.10749531]
[255.59201050 -5.93403053]
[257.22207642 7.35532093]
[252.01477051 19.80780792]
[241.23791504 28.11321068]
[227.65483093 30.00629425]
[214.81619263 24.88373756]
[202.75624084 33.80323410]
[190.69628906 42.72273254]
[178.63632202 51.64223099]
[166.57637024 60.56172943]
[154.51641846 69.48122406]
[142.45645142 78.40072632]
[130.39649963 87.32022095]
[118.33654022 96.23972321]
[115.79048157 110.65499115]
[103.49520111 119.06227112]
[99.40827942 133.49476624]
[95.32135010 147.92727661]
[95.99211121 157.10816956]
[90.99147797 162.62100220]
[86.59913635 176.96350098]
[82.20679474 191.30599976]
[87.76873016 199.07205200]
[89.07220459 208.39540100]
[85.94648743 217.12864685]
[79.22632599 223.32002258]
[70.53381348 225.64942932]
[65.23764801 239.68333435]
[59.94148636 253.71725464]
[54.64532089 267.75115967]
[49.34915543 281.78506470]
[63.18916702 276.00112915]
[77.56126404 280.29562378]
[85.95914459 292.72445679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[8 17]
[9 16]
[10 15]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[27 135]
[28 134]
[29 133]
[30 131]
[31 130]
[32 129]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[41 50]
[42 49]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[71 121]
[72 120]
[73 119]
[77 114]
[78 113]
[79 112]
[81 110]
[82 109]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
