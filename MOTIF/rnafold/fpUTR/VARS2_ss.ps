%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCCUCCUGGUGAGCGCGCGCCGGGGCGGCCUCCGGGAAGUGGGAGACGCUGCGGGUCCUGGGCCCAGGCCUUGGG\
) } def
/len { sequence length } bind def

/coor [
[80.80879974 253.90307617]
[77.44992065 238.21557617]
[87.73168945 225.90036011]
[87.73168945 210.90036011]
[87.73168945 195.90036011]
[87.73168945 180.90036011]
[87.73168945 165.90036011]
[87.73168945 150.90036011]
[87.73168945 135.90036011]
[87.73168945 120.90035248]
[77.12508392 110.29375458]
[62.12508392 110.29375458]
[47.12508392 110.29375458]
[32.12508392 110.29375458]
[17.12508583 110.29375458]
[2.12508512 110.29375458]
[-12.87491512 110.29375458]
[-23.87160492 121.64488983]
[-39.67501068 121.81198120]
[-50.90925217 110.69589996]
[-50.90925217 94.89160919]
[-39.67501068 83.77552032]
[-23.87160492 83.94261169]
[-12.87491512 95.29375458]
[2.12508512 95.29375458]
[17.12508583 95.29375458]
[32.12508392 95.29375458]
[47.12508392 95.29375458]
[62.12508392 95.29375458]
[77.12508392 95.29375458]
[96.75510406 80.33044434]
[100.72982025 65.86663818]
[104.70454407 51.40283585]
[108.67926788 36.93903351]
[112.65399170 22.47523308]
[116.07179260 7.86980104]
[118.92765808 -6.85582399]
[121.78352356 -21.58144951]
[124.63939667 -36.30707169]
[113.95389557 -47.55872726]
[111.95607758 -62.94665527]
[119.41415405 -76.55388641]
[133.46032715 -83.14816284]
[148.69357300 -80.19385529]
[159.25639343 -68.82694244]
[161.08715820 -53.41824722]
[153.48190308 -39.89271927]
[139.36502075 -33.45120621]
[136.50915527 -18.72558212]
[133.65328979 -3.99995732]
[130.79742432 10.72566795]
[132.83561707 15.30496311]
[131.82905579 21.23045349]
[127.11779022 26.44995499]
[123.14307404 40.91375732]
[119.16835022 55.37755966]
[115.19362640 69.84136200]
[111.21890259 84.30516815]
[118.63580322 97.34317017]
[133.09960938 101.31789398]
[147.56340027 105.29261780]
[162.02720642 109.26734161]
[176.49101257 113.24205780]
[193.36611938 111.60893250]
[199.60691833 127.37245941]
[186.18705750 137.73313904]
[172.51629639 127.70586395]
[158.05249023 123.73114014]
[143.58868408 119.75641632]
[129.12487793 115.78169250]
[114.66107941 111.80697632]
[102.73168945 120.90035248]
[102.73168945 135.90036011]
[102.73168945 150.90036011]
[102.73168945 165.90036011]
[102.73168945 180.90036011]
[102.73168945 195.90036011]
[102.73168945 210.90036011]
[102.73168945 225.90036011]
[113.01345825 238.21557617]
[109.65457153 253.90307617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 51]
[37 50]
[38 49]
[39 48]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
