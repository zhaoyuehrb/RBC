%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAGCAGCGGCGGCGGCGGCUGUGGGUAAAGGCGCGGCGCGCGGCCCCCGAGCGCGCCAACCUUGCCCUAGCCGGAGCCCGCUGCGGCCCAGCGCACGGCCCUCACCCCGCAUCGCGACCCCGCGCCCCGCCGGCCGAGC\
) } def
/len { sequence length } bind def

/coor [
[183.36276245 173.72825623]
[183.46798706 165.21257019]
[171.18069458 156.60891724]
[158.89341736 148.00527954]
[146.60614014 139.40162659]
[127.31518555 139.21104431]
[118.91345215 120.94186401]
[106.26258087 112.88237000]
[92.30374908 112.08069611]
[85.67792511 99.76850128]
[73.02705383 91.70900726]
[60.37618256 83.64951324]
[47.72531128 75.59001923]
[35.07444000 67.53052521]
[22.42356682 59.47103119]
[9.68553448 51.55001068]
[-3.13814330 43.76841354]
[-18.30778694 47.30672836]
[-31.20196724 39.23240280]
[-34.48172379 24.74866104]
[-47.30540466 16.96706200]
[-60.12908173 9.18546295]
[-72.95275879 1.40386403]
[-85.77643585 -6.37773514]
[-98.60011292 -14.15933418]
[-107.63462067 -15.95883465]
[-111.61604309 -22.25315857]
[-124.26691437 -30.31265259]
[-136.91778564 -38.37214661]
[-149.56866455 -46.43164062]
[-162.21952820 -54.49113464]
[-174.87040710 -62.55062866]
[-183.86351013 -64.54679108]
[-187.70666504 -70.92646790]
[-200.17871094 -79.26001740]
[-213.04440308 -75.12361145]
[-225.75070190 -79.11759949]
[-233.69966125 -89.56068420]
[-234.15168762 -102.48190308]
[-246.43898010 -111.08554840]
[-258.72625732 -119.68919373]
[-271.01354980 -128.29284668]
[-283.30081177 -136.89648438]
[-295.58810425 -145.50013733]
[-307.87536621 -154.10379028]
[-322.11242676 -148.16154480]
[-337.29797363 -150.88223267]
[-348.58642578 -161.39768982]
[-352.37561035 -176.35247803]
[-347.45645142 -190.97456360]
[-335.39865112 -200.59809875]
[-320.04977417 -202.15226746]
[-306.30758667 -195.14109802]
[-298.55722046 -181.80186462]
[-299.27172852 -166.39106750]
[-286.98443604 -157.78741455]
[-274.69717407 -149.18377686]
[-262.40988159 -140.58012390]
[-250.12260437 -131.97647095]
[-237.83532715 -123.37283325]
[-225.54804993 -114.76918793]
[-209.16390991 -118.40921021]
[-194.91589355 -108.91701508]
[-191.84515381 -91.73206329]
[-179.37310791 -83.39851379]
[-166.81091309 -75.20149994]
[-154.16003418 -67.14200592]
[-141.50917053 -59.08251190]
[-128.85829163 -51.02301788]
[-116.20742035 -42.96352386]
[-103.55654907 -34.90402985]
[-90.81851959 -26.98301125]
[-77.99484253 -19.20141220]
[-65.17115784 -11.41981411]
[-52.34748077 -3.63821530]
[-39.52380371 4.14338350]
[-26.70012665 11.92498207]
[-12.33846664 8.14631557]
[0.77741790 15.85528469]
[4.64345551 30.94473457]
[17.46713448 38.72633362]
[24.87327766 39.51325226]
[30.48306084 46.82015991]
[43.13393402 54.87965393]
[55.78480530 62.93914795]
[68.43567657 70.99864197]
[81.08654785 79.05813599]
[93.73741913 87.11763000]
[107.69625092 87.91930389]
[114.32207489 100.23149872]
[126.97294617 108.29099274]
[137.53207397 105.30854797]
[147.76644897 108.60356903]
[154.32705688 116.84154510]
[155.20979309 127.11434937]
[167.49707031 135.71798706]
[179.78434753 144.32164001]
[192.07162476 152.92527771]
[214.44100952 153.05834961]
[223.18809509 172.82597351]
[236.17846680 180.32597351]
[249.16885376 187.82597351]
[262.15924072 195.32597351]
[275.14962769 202.82597351]
[282.74191284 197.76649475]
[291.53466797 195.50076294]
[300.53948975 196.25373840]
[308.75396729 199.91270447]
[315.27319336 206.04304504]
[319.38937378 213.93974304]
[320.66879272 222.70829773]
[318.99710083 231.36605835]
[331.09375000 240.23570251]
[345.80471802 235.66471863]
[360.21795654 240.57508850]
[368.87368774 252.88534546]
[368.62390137 267.75396729]
[380.72058105 276.62359619]
[392.81723022 285.49325562]
[404.91390991 294.36288452]
[421.26562500 295.60937500]
[428.11709595 310.50866699]
[418.42010498 323.73367310]
[402.15011597 321.67962646]
[396.04428101 306.45956421]
[383.94760132 297.58990479]
[371.85092163 288.72027588]
[359.75427246 279.85061646]
[345.64892578 284.55993652]
[331.30560303 280.00656128]
[322.28836060 267.73699951]
[322.22412109 252.33238220]
[310.12744141 243.46273804]
[289.61807251 248.77339172]
[271.53424072 237.21015930]
[267.64962769 215.81636047]
[254.65922546 208.31636047]
[241.66885376 200.81636047]
[228.67846680 193.31636047]
[215.68809509 185.81636047]
[208.53894043 189.50286865]
[200.41752625 190.02523804]
[192.67724609 187.22062683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[7 91]
[8 90]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[16 81]
[17 80]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[34 65]
[35 64]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[100 140]
[101 139]
[102 138]
[103 137]
[104 136]
[112 133]
[113 132]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
