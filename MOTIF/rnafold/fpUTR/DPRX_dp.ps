%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:21 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DPRX)
} def

/sequence { (\
UGCUAGUUCUUAUCCCUGGACCUGAACCCAGGCGCACAUCUGGAUUAGAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 34 0.003853519 ubox
1 36 0.010937809 ubox
1 47 0.010871473 ubox
2 33 0.005684669 ubox
2 35 0.012838862 ubox
2 46 0.010363566 ubox
3 19 0.023747664 ubox
3 32 0.005611141 ubox
3 34 0.012818709 ubox
3 43 0.135698812 ubox
3 48 0.755933418 ubox
3 51 0.051142620 ubox
4 18 0.023850206 ubox
4 24 0.017731713 ubox
4 31 0.005346858 ubox
4 42 0.136246308 ubox
4 47 0.759102147 ubox
4 50 0.045410136 ubox
5 11 0.003193200 ubox
5 17 0.023855281 ubox
5 23 0.018920091 ubox
5 41 0.136302956 ubox
5 46 0.758774334 ubox
6 13 0.003428931 ubox
6 16 0.023730937 ubox
6 21 0.079235905 ubox
6 22 0.016531079 ubox
6 27 0.020824663 ubox
6 40 0.136170227 ubox
6 45 0.758426182 ubox
7 12 0.004116180 ubox
7 20 0.079984770 ubox
7 26 0.020887527 ubox
7 38 0.009535375 ubox
7 44 0.755796050 ubox
7 49 0.012982877 ubox
7 50 0.538322687 ubox
7 51 0.017139057 ubox
8 19 0.079937005 ubox
8 20 0.016008765 ubox
8 25 0.020956867 ubox
8 43 0.752104311 ubox
8 44 0.073117770 ubox
8 48 0.004339643 ubox
8 49 0.620141697 ubox
8 50 0.018789281 ubox
9 18 0.080009483 ubox
9 19 0.016999423 ubox
9 24 0.020957397 ubox
9 42 0.750683592 ubox
9 43 0.099979047 ubox
9 48 0.628334567 ubox
9 51 0.008633566 ubox
10 18 0.016776097 ubox
10 42 0.098000040 ubox
10 43 0.007954220 ubox
10 47 0.605408499 ubox
10 48 0.011810338 ubox
10 49 0.004542930 ubox
10 50 0.008782591 ubox
11 18 0.003808546 ubox
11 42 0.020798099 ubox
11 47 0.027386151 ubox
11 48 0.004556356 ubox
11 49 0.008484721 ubox
12 17 0.004084144 ubox
12 39 0.571524756 ubox
12 41 0.037246660 ubox
12 45 0.583861526 ubox
12 46 0.030008772 ubox
13 20 0.018193232 ubox
13 38 0.561792512 ubox
13 43 0.005120796 ubox
13 44 0.627710544 ubox
14 18 0.003355610 ubox
14 19 0.018679592 ubox
14 32 0.039299513 ubox
14 42 0.007903469 ubox
14 43 0.626899360 ubox
15 31 0.028011019 ubox
15 32 0.509019884 ubox
15 42 0.619220211 ubox
15 43 0.051025749 ubox
16 31 0.516592909 ubox
16 32 0.005323283 ubox
16 42 0.065521585 ubox
16 43 0.015311066 ubox
17 30 0.517256669 ubox
17 34 0.041993230 ubox
17 36 0.736606171 ubox
17 38 0.313431817 ubox
17 42 0.018711280 ubox
18 28 0.012138210 ubox
18 29 0.517271275 ubox
18 33 0.045151798 ubox
18 35 0.755310372 ubox
18 37 0.315405818 ubox
18 40 0.038824291 ubox
18 41 0.195967967 ubox
19 27 0.016646303 ubox
19 28 0.516910309 ubox
19 39 0.035431255 ubox
19 40 0.211441172 ubox
20 39 0.210460070 ubox
21 32 0.850721451 ubox
22 31 0.851099991 ubox
22 32 0.003405418 ubox
22 48 0.078825141 ubox
22 51 0.003769992 ubox
23 30 0.850665644 ubox
23 36 0.008980802 ubox
23 47 0.078917888 ubox
23 50 0.003781634 ubox
24 29 0.848105281 ubox
24 35 0.009038697 ubox
24 46 0.077343134 ubox
25 45 0.073570637 ubox
25 46 0.018269335 ubox
26 45 0.022810294 ubox
27 43 0.020138001 ubox
28 42 0.014334291 ubox
28 43 0.085415005 ubox
29 42 0.086720183 ubox
30 41 0.087872244 ubox
31 40 0.087892048 ubox
32 39 0.067001251 ubox
32 40 0.003824443 ubox
33 42 0.018086632 ubox
34 41 0.015747268 ubox
35 42 0.024283930 ubox
36 41 0.021861615 ubox
39 49 0.018924262 ubox
40 48 0.020240238 ubox
40 51 0.003930416 ubox
41 47 0.020048318 ubox
41 50 0.004048223 ubox
42 46 0.016691216 ubox
3 48 0.9500000 lbox
4 47 0.9500000 lbox
5 46 0.9500000 lbox
6 45 0.9500000 lbox
7 44 0.9500000 lbox
8 43 0.9500000 lbox
9 42 0.9500000 lbox
12 39 0.9500000 lbox
13 38 0.9500000 lbox
17 36 0.9500000 lbox
18 35 0.9500000 lbox
21 32 0.9500000 lbox
22 31 0.9500000 lbox
23 30 0.9500000 lbox
24 29 0.9500000 lbox
showpage
end
%%EOF
