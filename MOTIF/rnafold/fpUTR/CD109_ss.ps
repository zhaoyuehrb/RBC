%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCCCAUUUCAGAUUACUAAACUCGAAUUAAGAGGGAAAAAAAAUCAGGGAGGAGGUGGCAAGCCACACCCCACGGUGCCCGCGAACUUCCCCGGCAGCGGACUGUAGCCCAGGCAGACGCCGUCGAG\
) } def
/len { sequence length } bind def

/coor [
[202.50567627 163.39924622]
[189.34048462 156.21051025]
[176.17529297 149.02177429]
[161.29675293 149.71311951]
[152.89271545 136.30853271]
[139.72753906 129.11979675]
[126.47773743 122.08823395]
[113.14521027 115.21483612]
[90.13761902 121.42115784]
[72.94227600 99.87288666]
[57.95926666 100.58661652]
[42.97625351 101.30034637]
[27.99324608 102.01407623]
[14.57685947 110.39924622]
[1.49584758 103.27629852]
[-13.48716259 103.99002838]
[-28.47017288 104.70375824]
[-43.45318222 105.41748810]
[-48.86633682 121.30693817]
[-59.91184235 133.89859009]
[-74.89530945 141.30314636]
[-91.53433990 142.42375183]
[-107.30616760 137.11843872]
[-119.83018494 126.21739960]
[-127.22724152 111.39321899]
[-142.15931702 112.81906128]
[-157.09140015 114.24489594]
[-165.80921936 127.22694397]
[-180.84643555 131.51837158]
[-195.10292053 125.09290314]
[-201.84719849 110.98444366]
[-197.89483643 95.85457611]
[-185.11201477 86.84716797]
[-169.53439331 88.21523285]
[-158.51724243 99.31282043]
[-143.58515930 97.88697815]
[-128.65309143 96.46113586]
[-125.55064392 83.46652222]
[-118.55997467 72.05477142]
[-108.35803986 63.35814667]
[-95.94121552 58.24466324]
[-82.52799988 57.23148346]
[-69.43945312 60.43263245]
[-57.96907425 67.54637146]
[-49.25496292 77.88357544]
[-44.16691208 90.43447876]
[-29.18390083 89.72074890]
[-14.20089149 89.00701904]
[0.78211886 88.29328918]
[13.12681961 79.95916748]
[27.27951622 87.03106689]
[42.26252747 86.31733704]
[57.24553680 85.60360718]
[72.22854614 84.88987732]
[82.31845093 73.79060364]
[81.60472107 58.80759811]
[78.04145050 50.28857040]
[81.05659485 43.46039200]
[80.69963074 28.46463966]
[80.34266663 13.46888733]
[79.98570251 -1.52686501]
[67.14257050 -10.23511219]
[61.90251160 -24.84063911]
[66.28044128 -39.72732544]
[78.59294891 -49.17093277]
[94.10562897 -49.54020309]
[106.85353851 -40.69314194]
[111.93484497 -26.03163147]
[107.39568329 -11.19331455]
[94.98145294 -1.88383043]
[95.33841705 13.11192131]
[95.69538116 28.10767365]
[96.05234528 43.10342407]
[96.58773041 58.09386826]
[97.30146027 73.07688141]
[111.60555267 78.14988708]
[119.73879242 89.35982513]
[120.01860809 101.88230133]
[133.35113525 108.75569916]
[142.51046753 109.92932129]
[146.91627502 115.95461273]
[160.08145142 123.14334106]
[175.90167236 122.96619415]
[183.36402893 135.85659790]
[196.52922058 143.04533386]
[209.69441223 150.23406982]
[217.04681396 144.06108093]
[225.81056213 140.20013428]
[235.28096008 138.94723511]
[244.70048523 140.38926697]
[253.31944275 144.39808655]
[260.45559692 150.64178467]
[265.54812622 158.61213684]
[268.20181274 167.66596985]
[268.21752930 177.07704163]
[265.60726929 186.09428406]
[277.61538696 195.08345032]
[289.62350464 204.07261658]
[301.63162231 213.06178284]
[317.31604004 215.13789368]
[322.86795044 228.95909119]
[334.87606812 237.94825745]
[346.88418579 246.93742371]
[359.80319214 245.88557434]
[369.63543701 253.70033264]
[371.40817261 265.72787476]
[383.19897461 275.00027466]
[394.98977661 284.27264404]
[406.78057861 293.54504395]
[422.04858398 290.16546631]
[435.89297485 297.43646240]
[441.77679443 311.92489624]
[436.92190552 326.78976440]
[423.62063599 335.01232910]
[408.15344238 332.71014404]
[397.82345581 320.97024536]
[397.50817871 305.33581543]
[385.71737671 296.06344604]
[373.92660522 286.79104614]
[362.13580322 277.51867676]
[344.69354248 276.01013184]
[337.89501953 258.94552612]
[325.88690186 249.95637512]
[313.87878418 240.96720886]
[299.05328369 239.53405762]
[292.64245605 225.06990051]
[280.63433838 216.08073425]
[268.62622070 207.09156799]
[256.61810303 198.10240173]
[237.33630371 206.05548096]
[216.97955322 200.94406128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[5 82]
[6 81]
[7 79]
[8 78]
[10 54]
[11 53]
[12 52]
[13 51]
[15 49]
[16 48]
[17 47]
[18 46]
[25 37]
[26 36]
[27 35]
[55 75]
[56 74]
[58 73]
[59 72]
[60 71]
[61 70]
[96 129]
[97 128]
[98 127]
[99 126]
[101 124]
[102 123]
[103 122]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
