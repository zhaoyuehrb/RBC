%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGGUCGCCGCUGGCUGGCAGUCGCCACCCGGUCCCAGAGUAAAUAAGGGAGAGACACUCCCGAGCGCCGUAAAUAGAGUCCAAGUGGGCGGAGAGCCGUCCCGCGCCGCCCGCUC\
) } def
/len { sequence length } bind def

/coor [
[205.58419800 197.89015198]
[195.16519165 179.33055115]
[195.22091675 157.97793579]
[181.68214417 151.52027893]
[174.19824219 151.48017883]
[167.87686157 144.71226501]
[154.51176453 137.90240479]
[147.03147888 137.66642761]
[140.88941956 130.73535156]
[127.70716858 123.57796478]
[114.52490997 116.42058563]
[91.35601044 124.61190796]
[70.19290161 105.14949799]
[55.81060791 109.40972900]
[41.42831039 113.66996002]
[27.04601479 117.93018341]
[12.66371918 122.19041443]
[1.62935388 133.52854919]
[-12.77131748 129.72462463]
[-27.15361404 133.98484802]
[-41.53590775 138.24507141]
[-55.91820526 142.50531006]
[-66.80799866 154.76681519]
[-82.81503296 151.20213318]
[-87.47264099 135.47830200]
[-75.98947906 123.77066040]
[-60.17843628 128.12301636]
[-45.79613876 123.86278534]
[-31.41384315 119.60255432]
[-17.03154755 115.34232330]
[-7.02590036 104.30890656]
[8.40348911 107.80812073]
[22.78578568 103.54788971]
[37.16808319 99.28765869]
[51.55037689 95.02742767]
[65.93267059 90.76719666]
[51.26855850 87.61066437]
[36.60444260 84.45412445]
[21.62376022 85.21514130]
[7.75788307 79.49347687]
[-2.32675242 68.38941956]
[-6.69084930 54.03829956]
[-4.49518347 39.19986725]
[3.83801389 26.72758675]
[16.70625305 19.01989937]
[31.63494301 17.55901146]
[45.75326920 22.62585449]
[56.34624481 33.24606323]
[61.37705612 47.37929153]
[69.90502930 59.71921158]
[78.43300629 72.05913544]
[76.86507416 57.14130402]
[75.29714966 42.22347641]
[73.72922516 27.30564880]
[72.16129303 12.38782024]
[60.64855957 1.21479619]
[62.34925079 -14.73785877]
[75.95874786 -23.23263359]
[91.03700256 -17.75306320]
[96.01728058 -2.50260568]
[87.07912445 10.81989288]
[88.64704895 25.73772240]
[90.21498108 40.65554810]
[91.78290558 55.57337952]
[93.35083008 70.49120331]
[111.33451080 74.97373199]
[121.69072723 88.18869019]
[121.68229675 103.23832703]
[134.86454773 110.39570618]
[148.04681396 117.55309296]
[161.32162476 124.53730774]
[174.68672180 131.34716797]
[188.13981628 137.98149109]
[201.67858887 144.43916321]
[208.21520996 137.34701538]
[216.18655396 131.93826294]
[225.16983032 128.49322510]
[234.69012451 127.18822479]
[244.24539185 128.08659363]
[253.33303833 131.13563538]
[261.47628784 136.16967773]
[268.24923706 142.91902161]
[273.29907227 151.02445984]
[276.36453247 160.05635071]
[277.28930664 169.53736877]
[276.03015137 178.96780396]
[272.65869141 187.85182190]
[284.55899048 196.98324585]
[296.45928955 206.11465454]
[308.35958862 215.24607849]
[320.25988770 224.37750244]
[332.16018677 233.50892639]
[344.06048584 242.64035034]
[355.96078491 251.77177429]
[367.86108398 260.90319824]
[378.69982910 258.84613037]
[388.65032959 263.07302856]
[394.45233154 271.93212891]
[394.35400391 282.30044556]
[405.76010132 292.04217529]
[421.49401855 290.55249023]
[433.61953735 300.68890381]
[434.94281006 316.43771362]
[424.67874146 328.45538330]
[408.91683960 329.61206055]
[397.00833130 319.22152710]
[396.01837158 303.44827271]
[384.61227417 293.70654297]
[365.45150757 291.72119141]
[358.72967529 272.80349731]
[346.82937622 263.67205811]
[334.92907715 254.54064941]
[323.02877808 245.40922546]
[311.12847900 236.27780151]
[299.22817993 227.14637756]
[287.32788086 218.01495361]
[275.42758179 208.88354492]
[263.52728271 199.75212097]
[244.86190796 209.54528809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[6 72]
[7 71]
[9 70]
[10 69]
[11 68]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 30]
[20 29]
[21 28]
[22 27]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
