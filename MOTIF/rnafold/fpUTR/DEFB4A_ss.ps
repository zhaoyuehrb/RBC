%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUGAAUUCUAACCUCUGUAAUGAGCAUUGCACCCAAUACCAGUUCUGAACUCUACCUGGUGACCAGGGACCAGGACCUUUAUAAGGUGGAAGGCUUGAUGUCCUCCCCAGACUCAGCUCCUGGUGAAGCUCCCAGCCAUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[103.98008728 208.88790894]
[102.40167999 193.97117615]
[100.82326508 179.05445862]
[99.24485779 164.13774109]
[97.66644287 149.22100830]
[96.08803558 134.30429077]
[94.50962067 119.38756561]
[88.02764893 115.61476898]
[82.26137543 129.46215820]
[76.49510193 143.30953979]
[77.97188568 158.23666382]
[69.09167480 170.32557678]
[54.40598297 173.38015747]
[41.44190216 165.83479309]
[36.84412003 151.55682373]
[42.96921158 137.86436462]
[56.67853546 131.77540588]
[65.87111664 119.92227936]
[75.06370544 108.06916046]
[68.58173370 104.29636383]
[54.83179092 110.29129028]
[41.08185196 116.28622437]
[27.33191490 122.28115082]
[13.58197498 128.27607727]
[-0.16796374 134.27101135]
[-9.46884060 147.77751160]
[-25.79255676 146.20642090]
[-32.34667206 131.17393494]
[-22.38887405 118.14419556]
[-6.16289282 120.52107239]
[7.58704615 114.52613831]
[21.33698463 108.53121185]
[35.08692551 102.53628540]
[48.83686447 96.54135132]
[62.58680344 90.54642487]
[64.79264832 75.70950317]
[53.38142395 65.97379303]
[41.97020340 56.23808670]
[23.21308517 58.49169540]
[8.96303749 46.57753372]
[7.89564466 28.35182762]
[-3.91585755 19.10583305]
[-15.72735977 9.85983753]
[-27.53886223 0.61384308]
[-39.35036469 -8.63215160]
[-51.16186523 -17.87814713]
[-64.59506989 -10.70395565]
[-79.78537750 -9.62025642]
[-94.10098267 -14.81480694]
[-105.06161499 -25.38761902]
[-110.76828766 -39.50688934]
[-110.23227692 -54.72637177]
[-103.54644775 -68.40919495]
[-91.86917114 -78.18472290]
[-77.22359467 -82.35929871]
[-62.14716339 -80.20964813]
[-49.25194931 -72.10820007]
[-40.77213669 -59.45859146]
[-38.17689514 -44.45243835]
[-41.91587067 -29.68964767]
[-30.10437012 -20.44365311]
[-18.29286766 -11.19765949]
[-6.48136520 -1.95166445]
[5.33013725 7.29433012]
[17.14163971 16.54032516]
[27.97661400 12.72255421]
[39.42204666 14.65972137]
[48.58520889 21.98054886]
[53.09299088 32.93839264]
[51.70590973 44.82686615]
[63.11713028 54.56257248]
[74.52835083 64.29827881]
[113.27208710 84.67156219]
[126.61557770 77.81947327]
[139.95907593 70.96737671]
[153.30256653 64.11528778]
[166.64605713 57.26319504]
[179.98956299 50.41110229]
[193.33305359 43.55900955]
[202.07476807 30.37216377]
[216.93096924 31.44110680]
[230.27445984 24.58901405]
[229.10185242 9.45955086]
[233.79837036 -4.92744684]
[243.61874390 -16.38929176]
[257.04284668 -23.19964027]
[272.01098633 -24.34847260]
[286.23986816 -19.69177437]
[297.57089233 -9.96875000]
[310.91436768 -16.82084274]
[317.17114258 -23.57083321]
[324.61221313 -23.67338371]
[338.09719849 -30.24263382]
[351.58218384 -36.81188202]
[360.59997559 -49.81149673]
[375.43032837 -48.42957687]
[388.91534424 -54.99882507]
[402.40032959 -61.56807709]
[408.96881104 -76.20483398]
[424.54287720 -80.05553436]
[437.17544556 -70.16625977]
[437.17587280 -54.12320328]
[424.54385376 -44.23323441]
[408.96957397 -48.08308411]
[395.48458862 -41.51383591]
[381.99960327 -34.94458771]
[373.94631958 -22.41485023]
[358.15142822 -23.32689285]
[344.66644287 -16.75764275]
[331.18145752 -10.18839359]
[317.76647949 -3.47734952]
[304.42297363 3.37474346]
[305.72296143 18.24885750]
[301.21701050 32.52617645]
[291.56207275 44.02168655]
[278.20553589 50.96361923]
[263.16836548 52.26650620]
[248.73931885 47.70078659]
[237.12655640 37.93251038]
[223.78306580 44.78460312]
[215.99575806 57.48133850]
[200.18513489 56.90250397]
[186.84164429 63.75459671]
[173.49815369 70.60668945]
[160.15466309 77.45877838]
[146.81117249 84.31087494]
[133.46766663 91.16296387]
[120.12418365 98.01506042]
[134.36088562 93.29105377]
[148.79203796 97.38271332]
[158.43064880 108.87607574]
[159.94584656 123.79935455]
[152.81405640 136.99546814]
[139.49980164 143.90420532]
[124.60413361 142.13810730]
[113.27458191 132.30747986]
[109.42634583 117.80915833]
[111.00475311 132.72587585]
[112.58316803 147.64260864]
[114.16157532 162.55932617]
[115.73999023 177.47604370]
[117.31839752 192.39277649]
[118.89681244 207.30949402]
[131.34208679 217.05067444]
[133.17120361 232.74876404]
[123.29898071 245.09034729]
[107.58242798 246.75340271]
[95.34590912 236.75125122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[5 139]
[6 138]
[7 137]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[36 72]
[37 71]
[38 70]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[73 128]
[74 127]
[75 126]
[76 125]
[77 124]
[78 123]
[79 122]
[81 120]
[82 119]
[89 112]
[90 111]
[92 110]
[93 109]
[94 108]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
