%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCUUCCGCAAUCGGAGCCCUCACAGAGGCCAAACUGAUAUAAAUCUGCUUAGGAGGCCUGAUUCACAGACGCUACAGG\
) } def
/len { sequence length } bind def

/coor [
[176.83143616 195.96275330]
[166.95014954 184.67735291]
[157.06884766 173.39196777]
[147.18756104 162.10656738]
[137.30627441 150.82118225]
[127.21318054 139.72479248]
[116.91191101 128.82141113]
[106.61064148 117.91802216]
[92.13031769 117.40184784]
[82.17961884 106.86952972]
[82.48596954 92.38324738]
[72.18470001 81.47985840]
[61.88343048 70.57646942]
[50.23219681 61.12931442]
[37.43518448 53.30393982]
[24.63817215 45.47856903]
[11.84115791 37.65319443]
[-0.95585489 29.82782173]
[-17.24375153 37.29766464]
[-34.64405823 33.71592331]
[-46.45104599 20.64889145]
[-48.22475052 3.28206706]
[-61.57693863 -3.55307198]
[-74.92912292 -10.38821125]
[-88.28131104 -17.22335052]
[-105.13562012 -19.05873871]
[-108.03769684 -35.76245880]
[-92.79013824 -43.17517090]
[-81.44616699 -30.57553673]
[-68.09398651 -23.74039650]
[-54.74179840 -16.90525818]
[-41.38961029 -10.07011890]
[-31.24615669 -17.23685265]
[-18.92881012 -19.32415199]
[-6.84990740 -15.85906792]
[2.59711504 -7.46240473]
[7.51195860 4.26144791]
[6.86951780 17.03080940]
[19.66653061 24.85618210]
[32.46354294 32.68155289]
[45.26055527 40.50692749]
[58.05757141 48.33229828]
[56.29661942 33.43602371]
[64.25695801 20.72252846]
[78.42655945 15.80090141]
[92.55391693 20.84252167]
[100.40615082 33.62306976]
[98.51892853 48.50387573]
[87.72487640 58.91965485]
[72.78681946 60.27519989]
[83.08808899 71.17858887]
[93.38935852 82.08197784]
[107.86968231 82.59815216]
[117.82038116 93.13047028]
[117.51403046 107.61675262]
[127.81529999 118.52014160]
[138.11657715 129.42352295]
[146.50315857 133.65184021]
[148.59165955 140.93988037]
[158.47296143 152.22528076]
[168.35424805 163.51066589]
[178.23553467 174.79606628]
[188.11682129 186.08145142]
[201.81892395 179.72303772]
[216.75755310 177.48388672]
[231.72172546 179.54548645]
[245.49835205 185.74073792]
[256.97064209 195.56741333]
[265.20855713 208.22889709]
[269.54431152 222.69879150]
[269.62640381 237.80409241]
[265.44821167 252.32026672]
[257.34841919 265.07055664]
[245.98364258 275.02136230]
[232.27517700 281.36599731]
[217.33428955 283.59014893]
[202.37219238 281.51351929]
[188.60179138 275.30444336]
[177.13938904 265.46624756]
[168.91419983 252.79647827]
[164.59298706 238.32223511]
[164.52604675 223.21685791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 57]
[7 56]
[8 55]
[11 52]
[12 51]
[13 50]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[22 32]
[23 31]
[24 30]
[25 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
