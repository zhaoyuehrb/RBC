%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGGCCGCGGCGCGGGCGCUGCCAUGUUGGCGGAAGCGGACCCCCCUGUGCCGUGGAAACUGGCGGUGGCCGCGGCCGCCGAGUCGGUCUGCGCAGCCUCCUGCGUUUUCUCGCUUGGAUCUUGGCACUGAGAGGCGGUGGCCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[-15.72683811 171.19346619]
[-24.06625366 176.67189026]
[-33.64706802 179.35061646]
[-43.55922699 178.99392700]
[-52.86685944 175.65351868]
[-60.69666290 169.66197205]
[-66.31980896 161.59970093]
[-80.93380737 164.98068237]
[-95.54781342 168.36166382]
[-110.16181183 171.74263000]
[-124.77581024 175.12361145]
[-139.38981628 178.50459290]
[-154.00381470 181.88557434]
[-168.61781311 185.26655579]
[-183.23181152 188.64752197]
[-197.84580994 192.02850342]
[-212.45980835 195.40948486]
[-227.07380676 198.79046631]
[-241.45022583 203.07051086]
[-255.53378296 208.23316956]
[-269.61737061 213.39582825]
[-283.70092773 218.55848694]
[-297.61770630 224.15521240]
[-311.35430908 230.18064880]
[-325.09091187 236.20608521]
[-338.82751465 242.23150635]
[-350.90377808 254.13108826]
[-365.68136597 245.82090759]
[-361.78677368 229.32034302]
[-344.85293579 228.49490356]
[-331.11633301 222.46948242]
[-317.37973022 216.44404602]
[-303.64312744 210.41860962]
[-302.02493286 207.21881104]
[-298.74304199 204.66644287]
[-294.12969971 203.55015564]
[-288.86358643 204.47491455]
[-274.78002930 199.31225586]
[-260.69644165 194.14959717]
[-246.61288452 188.98693848]
[-259.52261353 181.34893799]
[-263.43518066 166.86820984]
[-256.12878418 153.76797485]
[-241.75248718 149.48750305]
[-228.47024536 156.45759583]
[-223.82469177 170.72009277]
[-230.45478821 184.17646790]
[-215.84078979 180.79548645]
[-201.22679138 177.41450500]
[-186.61279297 174.03352356]
[-171.99879456 170.65255737]
[-157.38478088 167.27157593]
[-142.77078247 163.89059448]
[-128.15678406 160.50961304]
[-113.54278564 157.12863159]
[-98.92878723 153.74766541]
[-84.31478882 150.36668396]
[-69.70079041 146.98570251]
[-63.31793213 127.78022003]
[-46.58509445 116.15369415]
[-26.08519554 116.88041687]
[-10.00393295 129.83474731]
[4.18332529 124.96425629]
[18.37058449 120.09376526]
[27.89595985 108.64315033]
[43.46069717 111.48031616]
[57.64795685 106.60982513]
[71.83521271 101.73933411]
[86.02247620 96.86884308]
[95.34902191 86.45216370]
[109.10703278 88.94390106]
[123.29429626 84.07341003]
[137.48155212 79.20291901]
[151.66880798 74.33242798]
[165.85606384 69.46192932]
[179.71928406 49.33570099]
[203.05979919 53.70550537]
[216.39663696 46.84045792]
[229.73347473 39.97541428]
[243.07031250 33.11036682]
[256.11206055 25.70004082]
[268.83642578 17.75709534]
[281.56079102 9.81414986]
[294.28515625 1.87120461]
[307.00952148 -6.07174110]
[319.73391724 -14.01468658]
[327.34335327 -27.88577271]
[342.23690796 -28.06175613]
[354.96127319 -36.00470352]
[356.17401123 -51.36163712]
[366.08105469 -62.92467499]
[380.72396851 -66.39582825]
[394.43887329 -60.64784241]
[407.16326904 -68.59078979]
[419.88763428 -76.53373718]
[432.61199951 -84.47667694]
[445.33636475 -92.41962433]
[458.06072998 -100.36257172]
[465.28448486 -115.08498383]
[481.66235352 -115.92012024]
[490.34619141 -102.00886536]
[482.40280151 -87.66191864]
[466.00369263 -87.63819885]
[453.27932739 -79.69525146]
[440.55493164 -71.75231171]
[427.83056641 -63.80936432]
[415.10620117 -55.86641693]
[402.38183594 -47.92347336]
[401.52221680 -33.07762909]
[391.97265625 -21.44708061]
[377.23339844 -17.62512779]
[362.90423584 -23.28033066]
[350.17984009 -15.33738518]
[343.48056030 -2.03443146]
[327.67684937 -1.29031551]
[314.95248413 6.65262985]
[302.22811890 14.59557533]
[289.50375366 22.53852081]
[276.77935791 30.48146629]
[264.05499268 38.42441177]
[263.31155396 41.18962860]
[261.39303589 43.81656647]
[258.35031128 45.84287262]
[254.40527344 46.83477402]
[249.93534851 46.44720078]
[236.59852600 53.31224823]
[223.26168823 60.17729187]
[209.92485046 67.04234314]
[209.90698242 73.23081207]
[208.11862183 79.19764709]
[204.68528748 84.44367218]
[199.87109375 88.52320862]
[194.05854797 91.08190918]
[187.71812439 91.88746643]
[181.37030029 90.85048676]
[175.54275513 88.03382111]
[170.72656250 83.64919281]
[156.53930664 88.51968384]
[142.35205078 93.39017487]
[128.16477966 98.26066589]
[113.97752380 103.13115692]
[104.65097809 113.54783630]
[90.89296722 111.05609894]
[76.70570374 115.92658997]
[62.51844788 120.79708099]
[48.33118820 125.66757202]
[37.79104614 137.46655273]
[23.24107552 134.28102112]
[9.05381680 139.15151978]
[-5.13344145 144.02200317]
[-5.77490234 154.06849670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 40]
[20 39]
[21 38]
[22 37]
[23 33]
[24 32]
[25 31]
[26 30]
[62 150]
[63 149]
[64 148]
[66 146]
[67 145]
[68 144]
[69 143]
[71 141]
[72 140]
[73 139]
[74 138]
[75 137]
[77 128]
[78 127]
[79 126]
[80 125]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[88 113]
[89 112]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
