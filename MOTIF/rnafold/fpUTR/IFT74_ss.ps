%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCACUCAGGAUGAGGAGCCUCCGCUAUCCCGCCCCCGUUGCCGGGAUACGCCGCGGCGCACGGCAGUUAGUGGGUAGGCCUGAGAGCCGAGGAAAACUGAGCGUGGGCCUCAGAAAGAAGUUAAGGCACCCGCGAGCCGGGCAACUGCCCUCCUUCCGCGCCGGCGGAGCGAUUAAAGUGAAGAAACA\
) } def
/len { sequence length } bind def

/coor [
[73.56249237 240.16401672]
[66.45496368 240.06752014]
[60.71471024 253.92572021]
[54.97445679 267.78390503]
[60.77925110 282.23873901]
[54.76040268 296.21115112]
[40.94415665 301.65603638]
[35.20390701 315.51425171]
[29.46365547 329.37243652]
[23.72340393 343.23062134]
[23.24811935 360.17791748]
[6.83157015 364.41268921]
[-1.78225195 349.80999756]
[9.86521053 337.49038696]
[15.60546207 323.63217163]
[21.34571457 309.77398682]
[27.08596611 295.91580200]
[21.16653252 282.29611206]
[26.79054832 268.16015625]
[41.11626434 262.04367065]
[46.85651779 248.18547058]
[52.59676743 234.32727051]
[41.33675385 214.19627380]
[48.65338516 192.04666138]
[70.16448975 182.36987305]
[74.04677582 167.88098145]
[77.92906189 153.39208984]
[81.81134796 138.90321350]
[68.53950500 129.23223877]
[59.86777878 115.28697205]
[57.06413651 99.10646057]
[42.35235596 96.18010712]
[27.64057732 93.25374603]
[12.92879868 90.32739258]
[-1.78298056 87.40103912]
[-18.44466400 100.20401001]
[-38.85402679 96.63227081]
[-49.86153030 79.42536926]
[-64.73320007 77.46747589]
[-79.60487366 75.50958252]
[-94.47654724 73.55168915]
[-109.36373901 71.71553040]
[-124.26545715 70.00122070]
[-139.16717529 68.28691864]
[-154.06889343 66.57261658]
[-168.97061157 64.85830688]
[-183.88584900 63.26597595]
[-198.81361389 61.79571915]
[-212.07733154 70.82087708]
[-227.36006165 65.94052124]
[-232.93820190 50.89845276]
[-224.53268433 37.23365021]
[-208.59149170 35.42858505]
[-197.34336853 46.86794662]
[-182.41558838 48.33820343]
[-175.43955994 45.86105728]
[-167.25630188 49.95659256]
[-152.35458374 51.67089844]
[-137.45286560 53.38520050]
[-122.55115509 55.09950638]
[-107.64943695 56.81381226]
[-100.63380432 54.45113373]
[-92.51865387 58.68001556]
[-77.64698029 60.63790894]
[-62.77531052 62.59580231]
[-47.90363693 64.55369568]
[-42.57336807 56.82266998]
[-34.74037933 51.53903198]
[-25.46247292 49.46735764]
[-16.01139069 50.93497086]
[-7.69848251 55.78107071]
[-1.69277585 63.37314606]
[1.14337432 72.68926239]
[15.85515308 75.61561584]
[30.56693268 78.54196930]
[45.27871323 81.46832275]
[59.99048996 84.39468384]
[80.29772186 50.87925339]
[126.56548309 42.98046494]
[126.56548309 27.98046494]
[126.56548309 12.98046398]
[126.56548309 -2.01953602]
[126.56548309 -17.01953506]
[126.56548309 -32.01953506]
[116.66867065 -38.64119339]
[111.25923920 -49.11441803]
[111.58139038 -60.77772522]
[117.43902588 -70.72957611]
[127.27339935 -76.55023956]
[127.76418304 -91.54221344]
[117.23973083 -103.02583313]
[117.95101929 -118.22283173]
[128.96376038 -128.18551636]
[129.45454407 -143.17749023]
[119.58123016 -155.82252502]
[123.45159149 -171.39172363]
[138.09663391 -177.94172668]
[152.28192139 -170.44792175]
[155.12571716 -154.65892029]
[144.44651794 -142.68670654]
[143.95573425 -127.69473267]
[154.29330444 -117.03310394]
[154.00914001 -101.82212830]
[142.75614929 -91.05142212]
[142.26536560 -76.05945587]
[155.55992126 -63.49183655]
[155.46098328 -44.87857437]
[141.56547546 -32.01953506]
[141.56547546 -17.01953506]
[141.56547546 -2.01953602]
[141.56547546 12.98046398]
[141.56547546 27.98046494]
[141.56547546 42.98046494]
[147.62588501 47.39877701]
[154.81727600 34.23503876]
[162.00865173 21.07129860]
[169.20004272 7.90756035]
[170.35334778 -7.04803610]
[180.95474243 -17.65984535]
[195.90919495 -18.82784271]
[208.02961731 -9.99069118]
[211.49095154 4.60448503]
[204.62968445 17.94326210]
[190.74520874 23.61497498]
[180.41236877 34.48844910]
[170.07954407 45.36192322]
[159.74670410 56.23539734]
[165.80709839 60.65370941]
[180.08804321 56.06516647]
[194.36898804 51.47661972]
[199.08416748 36.69329834]
[211.60816956 27.53200722]
[227.12522888 27.51545334]
[239.66874695 36.65000153]
[244.41546631 51.42322922]
[239.54017639 66.15453339]
[226.91754150 75.17942047]
[211.40121460 75.02764130]
[198.95753479 65.75756073]
[184.67658997 70.34610748]
[170.39564514 74.93465424]
[171.86590576 89.86241913]
[186.76762390 91.57672882]
[201.66934204 93.29103088]
[216.57106018 95.00533295]
[231.39378357 87.98970795]
[244.72508240 97.54000854]
[242.85087585 113.83170319]
[227.69917297 120.10529327]
[214.85675049 109.90705109]
[199.95503235 108.19274902]
[185.05331421 106.47843933]
[170.15159607 104.76413727]
[164.41134644 118.62232971]
[176.16065979 127.94724274]
[191.78012085 130.46574402]
[196.93925476 144.43830872]
[208.68855286 153.76321411]
[220.43785095 163.08811951]
[232.18714905 172.41302490]
[243.93644714 181.73794556]
[255.68576050 191.06285095]
[271.97796631 192.93257141]
[278.25573730 208.08253479]
[268.06103516 220.92776489]
[251.88128662 218.25419617]
[246.36083984 202.81214905]
[234.61154175 193.48724365]
[222.86224365 184.16233826]
[211.11294556 174.83741760]
[199.36364746 165.51251221]
[187.61433411 156.18760681]
[172.83526611 154.33609009]
[166.83573914 139.69654846]
[155.08644104 130.37162781]
[143.72239685 139.48457336]
[131.26611328 145.15205383]
[118.65447998 147.38940430]
[106.75314331 146.44863892]
[96.30023193 142.78549194]
[92.41794586 157.27438354]
[88.53565979 171.76327515]
[84.65337372 186.25215149]
[90.45957184 190.72319031]
[94.96614838 196.47392273]
[97.90171051 203.14039612]
[99.09384155 210.30404663]
[98.47922516 217.51808167]
[96.10686493 224.33528137]
[92.13443756 230.33567810]
[86.81777954 235.15251160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[7 17]
[8 16]
[9 15]
[10 14]
[25 183]
[26 182]
[27 181]
[28 180]
[31 77]
[32 76]
[33 75]
[34 74]
[35 73]
[38 66]
[39 65]
[40 64]
[41 63]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 55]
[48 54]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[89 105]
[90 104]
[93 101]
[94 100]
[128 141]
[129 140]
[130 139]
[142 153]
[143 152]
[144 151]
[145 150]
[154 175]
[155 174]
[157 172]
[158 171]
[159 170]
[160 169]
[161 168]
[162 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
