%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGGCGCCGCGGCGGGGAGAAGACGCAGAGCGCUGCUGGGCUGCCGGGUCUCCCGCUUCCCCCUCCUGCUCCAAGGGCCUCCUGCAUGAGGGCGCGGUAGAGACCCGGACCCGCGCCGUGCUCCUGCCGUUUCGCUGCGCUCCGCCCGGGCCCGGCUCAGCCAGGCCCCGCGGUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[59.43655014 112.05612946]
[60.35733414 97.08441925]
[72.03199005 87.66622162]
[86.85930634 89.93305969]
[79.66024017 76.77352142]
[72.46118164 63.61397934]
[65.26211548 50.45444107]
[58.06305313 37.29489899]
[43.16202927 32.75648499]
[36.04861832 19.30828476]
[40.46713638 5.13040447]
[33.26807404 -8.02913570]
[26.06901169 -21.18867683]
[19.18678284 -27.23501587]
[18.86149216 -34.63807297]
[11.89064503 -47.91991425]
[4.91979742 -61.20175552]
[-8.34450150 -69.82550049]
[-7.40812063 -84.69064331]
[-14.37896824 -97.97248077]
[-21.34981537 -111.25431824]
[-28.32066345 -124.53616333]
[-40.17260361 -125.80247498]
[-49.83579636 -132.57356262]
[-54.96661758 -143.06553650]
[-54.38956070 -154.61042786]
[-48.36447525 -164.33436584]
[-54.87273026 -177.84889221]
[-61.38098526 -191.36343384]
[-67.88924408 -204.87796021]
[-74.51389313 -218.33583069]
[-81.25444794 -231.73600769]
[-87.99500275 -245.13618469]
[-94.73556519 -258.53637695]
[-101.47612000 -271.93655396]
[-114.58959198 -280.78796387]
[-113.39676666 -295.63473511]
[-120.13732147 -309.03491211]
[-126.99327850 -322.37643433]
[-133.96412659 -335.65826416]
[-140.93498230 -348.94009399]
[-147.90582275 -362.22195435]
[-158.49099731 -364.86276245]
[-165.71592712 -372.74124146]
[-167.36299133 -383.08068848]
[-163.12515259 -392.41351318]
[-169.63342285 -405.92803955]
[-176.14167786 -419.44256592]
[-182.64993286 -432.95709229]
[-189.15818787 -446.47164917]
[-195.66644287 -459.98617554]
[-202.17469788 -473.50070190]
[-208.68295288 -487.01522827]
[-215.19120789 -500.52975464]
[-221.93176270 -513.92993164]
[-228.90261841 -527.21179199]
[-235.87345886 -540.49365234]
[-242.84429932 -553.77545166]
[-252.18502808 -555.36596680]
[-259.62704468 -561.00531006]
[-263.56652832 -569.31860352]
[-263.22866821 -578.37402344]
[-258.81680298 -586.13098145]
[-265.09082031 -599.75579834]
[-271.36483765 -613.38067627]
[-277.63885498 -627.00555420]
[-283.91287231 -640.63037109]
[-296.71301270 -649.92913818]
[-295.00845337 -664.72589111]
[-301.28247070 -678.35076904]
[-307.55648804 -691.97564697]
[-311.24026489 -694.38366699]
[-313.70336914 -697.52923584]
[-314.86383057 -700.93273926]
[-314.80578613 -704.13769531]
[-313.75686646 -706.76385498]
[-319.07595825 -720.78912354]
[-324.39501953 -734.81433105]
[-337.43316650 -744.76110840]
[-335.07000732 -760.98913574]
[-319.73654175 -766.80432129]
[-307.20651245 -756.22460938]
[-310.36978149 -740.13342285]
[-305.05072021 -726.10815430]
[-299.73162842 -712.08294678]
[-293.93164062 -698.24963379]
[-287.65762329 -684.62475586]
[-281.38360596 -670.99993896]
[-269.03222656 -662.67572021]
[-270.28802490 -646.90441895]
[-264.01400757 -633.27954102]
[-257.73999023 -619.65472412]
[-251.46597290 -606.02984619]
[-245.19195557 -592.40496826]
[-227.35751343 -582.04498291]
[-229.56246948 -560.74633789]
[-222.59161377 -547.46447754]
[-215.62077332 -534.18261719]
[-208.64991760 -520.90081787]
[-204.41386414 -518.64459229]
[-201.56332397 -513.69042969]
[-201.67668152 -507.03802490]
[-195.16842651 -493.52349854]
[-188.66015625 -480.00894165]
[-182.15190125 -466.49441528]
[-175.64364624 -452.97988892]
[-169.13539124 -439.46536255]
[-162.62713623 -425.95083618]
[-156.11888123 -412.43627930]
[-149.61062622 -398.92175293]
[-132.87953186 -389.25857544]
[-134.62397766 -369.19277954]
[-127.65313721 -355.91094971]
[-120.68228912 -342.62911987]
[-113.71144104 -329.34725952]
[-107.80362701 -324.87414551]
[-106.73713684 -315.77548218]
[-99.99658203 -302.37527466]
[-87.36524200 -294.48236084]
[-88.07593536 -278.67712402]
[-81.33538055 -265.27691650]
[-74.59482574 -251.87673950]
[-67.85427094 -238.47656250]
[-61.11371231 -225.07638550]
[-55.28398895 -220.50195312]
[-54.37471008 -211.38621521]
[-47.86645126 -197.87168884]
[-41.35819626 -184.35716248]
[-34.84994125 -170.84262085]
[-17.25169945 -165.86952209]
[-8.70735550 -149.34129333]
[-15.03882313 -131.50700378]
[-8.06797504 -118.22516632]
[-1.09712768 -104.94332886]
[5.87371969 -91.66148376]
[18.63941765 -83.98774719]
[18.20163727 -68.17259979]
[25.17248535 -54.89076233]
[32.14333344 -41.60892105]
[39.22854996 -28.38773918]
[46.42761230 -15.22819805]
[53.62667465 -2.06865764]
[67.94887543 1.85692132]
[75.43721008 15.10001278]
[71.22259521 30.09583855]
[78.42165375 43.25537872]
[85.62071991 56.41491699]
[92.81977844 69.57446289]
[100.01884460 82.73400116]
[146.77671814 83.68395996]
[157.10517883 94.56160736]
[167.43362427 105.43925476]
[177.76206970 116.31689453]
[188.09051514 127.19454193]
[203.20372009 131.87448120]
[206.35633850 146.43161011]
[216.68478394 157.30926514]
[227.01324463 168.18690491]
[242.30413818 175.50978088]
[239.50039673 192.23028564]
[222.65718079 194.16481018]
[216.13558960 178.51535034]
[205.80714417 167.63771057]
[195.47869873 156.76005554]
[181.10426331 152.85816956]
[177.21287537 137.52299500]
[166.88442993 126.64534760]
[156.55596924 115.76770020]
[146.22752380 104.89005280]
[135.89907837 94.01241302]
[129.25816345 97.49783325]
[109.33539581 107.95410919]
[112.42029572 122.63346100]
[125.01502991 132.57087708]
[124.95423126 148.61381531]
[112.28455353 158.45550537]
[96.72508240 154.54623413]
[90.21170807 139.88487244]
[97.74094391 125.71836090]
[94.65604401 111.03900146]
[84.86286163 122.40093994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[11 142]
[12 141]
[13 140]
[15 139]
[16 138]
[17 137]
[19 135]
[20 134]
[21 133]
[22 132]
[27 129]
[28 128]
[29 127]
[30 126]
[31 124]
[32 123]
[33 122]
[34 121]
[35 120]
[37 118]
[38 117]
[39 115]
[40 114]
[41 113]
[42 112]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[51 105]
[52 104]
[53 103]
[54 102]
[55 99]
[56 98]
[57 97]
[58 96]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[69 88]
[70 87]
[71 86]
[76 85]
[77 84]
[78 83]
[150 170]
[151 169]
[152 168]
[153 167]
[154 166]
[156 164]
[157 163]
[158 162]
[172 180]
[173 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
