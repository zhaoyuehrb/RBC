%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACGGGGCGGUGACUCCAGAGCUGGGAGCCUGGCAGCGUCCUCACCCCAGGAAGGCAUGCGCCCCUCUGCGGGCGGCCCCAGCCCUGGGCCCCCUGCCCCCGGAAUUGCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[171.81317139 480.18783569]
[170.43156433 474.14700317]
[170.70858765 467.92355347]
[172.64166260 461.96697998]
[176.10801697 456.71212769]
[180.87229919 452.54742432]
[177.28256226 437.98330688]
[173.69282532 423.41915894]
[170.10310364 408.85504150]
[166.51336670 394.29092407]
[162.92362976 379.72680664]
[159.33389282 365.16265869]
[144.98944092 361.14993286]
[134.50978088 350.42459106]
[130.78100586 335.79711914]
[134.90158081 321.17120361]
[145.86123657 310.50192261]
[142.27149963 295.93780518]
[138.68176270 281.37368774]
[135.09202576 266.80953979]
[131.50228882 252.24542236]
[120.94398499 241.73963928]
[125.15386200 226.48881531]
[121.56412506 211.92469788]
[117.97438812 197.36056519]
[114.38465118 182.79643250]
[110.79492188 168.23231506]
[107.20518494 153.66818237]
[102.48772430 147.85101318]
[103.72016907 138.66487122]
[100.52275085 124.00961304]
[97.32532501 109.35435486]
[88.49542999 110.52685547]
[78.92676544 104.04842377]
[74.44223022 90.33764648]
[66.76850891 77.44912720]
[59.09478760 64.56060791]
[51.24872208 51.77626801]
[43.23173523 39.09841537]
[26.76235199 30.99860382]
[26.59253883 13.50642300]
[18.23806572 1.04838169]
[9.88359356 -11.40965939]
[1.52912116 -23.86770058]
[-14.02317905 -26.67866325]
[-22.96389580 -39.71089935]
[-19.98866272 -55.23260880]
[-6.86262941 -64.03504181]
[8.62675858 -60.89587021]
[17.28992271 -47.67750549]
[13.98716259 -32.22217178]
[22.34163475 -19.76413155]
[30.69610786 -7.30609083]
[39.05057907 5.15195036]
[50.92868423 7.83925343]
[57.97311401 18.26299286]
[55.90958786 31.08142853]
[63.92657471 43.75927734]
[70.24337006 47.78320694]
[71.98330688 56.88688278]
[79.65702820 69.77540588]
[87.33074951 82.66392517]
[102.32534790 83.06664276]
[110.67981720 70.60860443]
[119.03428650 58.15056229]
[127.38876343 45.69252014]
[124.08599854 30.23718834]
[132.74916077 17.01882553]
[148.23855591 13.87965202]
[161.36459351 22.68208504]
[164.33982849 38.20379639]
[155.39910889 51.23603058]
[139.84680176 54.04699326]
[131.49232483 66.50503540]
[123.13785553 78.96307373]
[114.78338623 91.42111969]
[111.98058319 106.15693665]
[115.17800140 120.81218719]
[118.37542725 135.46743774]
[121.76931000 150.07844543]
[125.35904694 164.64257812]
[128.94877625 179.20671082]
[132.53851318 193.77082825]
[136.12825012 208.33496094]
[139.71798706 222.89907837]
[150.53305054 234.44659424]
[146.06642151 248.65568542]
[149.65615845 263.21981812]
[153.24589539 277.78393555]
[156.83561707 292.34808350]
[160.42535400 306.91220093]
[175.08790588 311.26614380]
[185.53349304 322.30184937]
[189.02955627 336.98666382]
[184.73458862 351.35360718]
[173.89802551 361.57293701]
[177.48774719 376.13705444]
[181.07748413 390.70117188]
[184.66722107 405.26531982]
[188.25695801 419.82943726]
[191.84669495 434.39355469]
[195.43643188 448.95770264]
[215.07801819 464.44070435]
[209.55848694 488.16271973]
[216.17022705 501.62695312]
[231.20631409 506.49432373]
[238.32217407 520.60601807]
[233.29608154 535.58984375]
[219.10993958 542.55609131]
[204.18011475 537.37182617]
[197.36424255 523.11285400]
[202.70602417 508.23867798]
[196.09426880 494.77447510]
[190.06138611 494.77859497]
[184.21327209 493.16860962]
[178.97621155 490.04379272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 102]
[7 101]
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[30 79]
[31 78]
[32 77]
[35 62]
[36 61]
[37 60]
[38 58]
[39 57]
[41 54]
[42 53]
[43 52]
[44 51]
[63 76]
[64 75]
[65 74]
[66 73]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
