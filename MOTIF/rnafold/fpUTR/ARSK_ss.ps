%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGUUGUAGUUCUGCGGGUGAAGCUCGGCGUUACUAUCAAGCAACCAAACUGCAAGCUUUGGGAGUUGUUCGCUGUCCCUGCCCUGCUCUGCUAGGGAGAGAACGCCAGAGGGAGGCGGCUGGCCCGGCGGCAGGCUCUCAGAACCGCUACCGGCG\
) } def
/len { sequence length } bind def

/coor [
[-14.10580254 201.13563538]
[-26.14178848 195.29078674]
[-38.66505051 203.54716492]
[-41.72370529 222.20150757]
[-57.15119934 232.56553650]
[-74.95745087 228.48622131]
[-87.14475250 237.23091125]
[-99.33205414 245.97561646]
[-111.43237305 254.84027100]
[-123.44452667 263.82403564]
[-135.45668030 272.80783081]
[-147.46884155 281.79159546]
[-149.85940552 297.18389893]
[-162.16941833 306.12359619]
[-176.82888794 303.74969482]
[-188.84104919 312.73345947]
[-200.85321045 321.71722412]
[-212.77601624 330.81924438]
[-224.60833740 340.03857422]
[-236.44065857 349.25793457]
[-248.27296448 358.47726440]
[-257.05099487 372.98184204]
[-273.41870117 368.56213379]
[-273.70275879 351.61056519]
[-257.49230957 346.64495850]
[-245.65998840 337.42559814]
[-233.82768250 328.20626831]
[-221.99536133 318.98690796]
[-218.63404846 312.35980225]
[-209.83697510 309.70507812]
[-197.82481384 300.72131348]
[-185.81266785 291.73754883]
[-183.94712830 277.00473022]
[-171.89308167 267.72280884]
[-156.45260620 269.77944946]
[-144.44046021 260.79565430]
[-132.42829895 251.81188965]
[-120.41614532 242.82812500]
[-116.92456055 236.26870728]
[-108.07674408 233.78829956]
[-95.88944244 225.04360962]
[-83.70214081 216.29891968]
[-84.32965088 204.84504700]
[-79.27607727 194.41343689]
[-69.70244598 187.66778564]
[-57.93965912 186.39289856]
[-46.92143631 191.02391052]
[-34.39817429 182.76751709]
[-34.18983078 166.37745667]
[-24.16819191 153.19758606]
[-8.11167622 148.52313232]
[7.72950268 154.37924194]
[20.08719826 145.87704468]
[32.44489288 137.37484741]
[34.89101410 122.72724915]
[47.30235672 113.92877197]
[62.64952087 116.59381104]
[75.00721741 108.09160614]
[87.36490631 99.58940887]
[99.46522522 90.72474670]
[111.29754639 81.50540161]
[123.12985992 72.28605652]
[134.96217346 63.06671143]
[146.79449463 53.84737015]
[158.62680054 44.62802505]
[170.45912170 35.40867996]
[182.29144287 26.18933678]
[194.12374878 16.96999168]
[205.95606995 7.75064754]
[208.04206848 -7.68587923]
[220.17304993 -16.86705017]
[234.87657166 -14.78323650]
[246.70887756 -24.00258064]
[258.54119873 -33.22192383]
[270.37350464 -42.44126892]
[282.20584106 -51.66061401]
[294.03814697 -60.87995911]
[296.12414551 -76.31648254]
[308.25512695 -85.49765778]
[322.95864868 -83.41384125]
[334.79095459 -92.63318634]
[340.92129517 -107.21843719]
[355.71636963 -108.93756104]
[367.54867554 -118.15690613]
[379.38098145 -127.37625122]
[391.12164307 -136.71203613]
[402.76950073 -146.16336060]
[408.61050415 -160.86686707]
[423.36871338 -162.87797546]
[435.01657104 -172.32929993]
[446.66442871 -181.78060913]
[458.31228638 -191.23193359]
[463.03713989 -199.11303711]
[470.28491211 -200.75216675]
[482.11721802 -209.97151184]
[486.99688721 -217.75773621]
[494.27560425 -219.25335693]
[506.28778076 -228.23712158]
[505.09155273 -243.61804199]
[512.42089844 -257.19317627]
[525.93707275 -264.63073730]
[541.32702637 -263.55746460]
[553.67999268 -254.31578064]
[559.05407715 -239.85470581]
[555.73449707 -224.78872681]
[544.78051758 -213.92530823]
[529.68750000 -210.73095703]
[515.27154541 -216.22497559]
[503.25939941 -207.24119568]
[491.33657837 -198.13920593]
[479.50424194 -188.91986084]
[467.76361084 -179.58407593]
[456.11575317 -170.13275146]
[444.46789551 -160.68142700]
[432.82003784 -151.23011780]
[427.81216431 -137.20262146]
[412.22082520 -134.51550293]
[400.57296753 -125.06417847]
[397.34326172 -118.37195587]
[388.60034180 -115.54393768]
[376.76803589 -106.32459259]
[364.93569946 -97.10524750]
[359.65170288 -83.17942810]
[344.01031494 -80.80087280]
[332.17797852 -71.58152771]
[330.60388184 -56.81474686]
[318.73556519 -47.29646301]
[303.25747681 -49.04764175]
[291.42517090 -39.82829666]
[279.59286499 -30.60895348]
[267.76052856 -21.38961029]
[255.92822266 -12.17026520]
[244.09591675 -2.95092082]
[242.52182007 11.81585979]
[230.65350342 21.33414268]
[215.17541504 19.58296394]
[203.34309387 28.80230713]
[191.51078796 38.02165222]
[179.67846680 47.24099731]
[167.84614563 56.46033859]
[156.01383972 65.67968750]
[144.18151855 74.89902496]
[132.34919739 84.11837006]
[120.51688385 93.33771515]
[108.68457031 102.55706024]
[107.66959381 106.33927917]
[104.96774292 109.64309692]
[100.83700562 111.71475983]
[95.86710358 111.94710541]
[83.50941467 120.44930267]
[71.15171814 128.95150757]
[68.15491486 144.23733521]
[55.50133514 152.68374634]
[40.94709015 149.73254395]
[28.58939552 158.23474121]
[16.23170090 166.73693848]
[16.90006256 180.53454590]
[10.70026779 192.75746155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[6 42]
[7 41]
[8 40]
[9 38]
[10 37]
[11 36]
[12 35]
[15 32]
[16 31]
[17 30]
[18 28]
[19 27]
[20 26]
[21 25]
[52 156]
[53 155]
[54 154]
[57 151]
[58 150]
[59 149]
[60 145]
[61 144]
[62 143]
[63 142]
[64 141]
[65 140]
[66 139]
[67 138]
[68 137]
[69 136]
[72 133]
[73 132]
[74 131]
[75 130]
[76 129]
[77 128]
[80 125]
[81 124]
[83 122]
[84 121]
[85 120]
[86 118]
[87 117]
[89 115]
[90 114]
[91 113]
[92 112]
[94 111]
[95 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
