%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUGUUCAGAGGAGCUCAGCUCUGGGGGAGAGCUCAAAGCCGACACCUAUUGAGUUGCAGUUAAAAUGAGGGCGAAAAAGGCUUUUGUUUCAGUUCUGCAGAUGGUCUGGGAGUUUGUGUUUCUUAGCAAGAAUUUUCUAGACGUUUUGGCUUGAACCAUCUGAAAAACUGCCUCAAGCUUUUGC\
) } def
/len { sequence length } bind def

/coor [
[124.88792419 290.12164307]
[123.63608551 275.17395020]
[122.38424683 260.22628784]
[121.13240814 245.27862549]
[119.88057709 230.33094788]
[118.62873840 215.38327026]
[116.25746918 200.57189941]
[112.78016663 185.98051453]
[109.30286407 171.38912964]
[105.82556152 156.79776001]
[102.34825897 142.20637512]
[98.87095642 127.61499023]
[91.59124756 126.32784271]
[84.91314697 123.15705872]
[73.62178802 133.03153992]
[62.33043289 142.90600586]
[51.03907394 152.78048706]
[39.74771500 162.65495300]
[28.45635605 172.52943420]
[27.24768066 188.05929565]
[15.65597057 197.91256714]
[0.85806215 196.66458130]
[-10.43329620 206.53904724]
[-15.21124077 222.22673035]
[-31.24511528 225.66865540]
[-42.04064560 213.32408142]
[-36.49231339 197.89204407]
[-20.30776978 195.24769592]
[-9.01641083 185.37321472]
[-8.28090000 170.54100037]
[3.02947760 160.36602783]
[18.58188248 161.23806763]
[29.87324142 151.36360168]
[41.16460037 141.48912048]
[52.45595932 131.61465454]
[63.74731827 121.74017334]
[75.03867340 111.86570740]
[75.43751526 87.32928467]
[95.20030975 72.78189087]
[96.70174408 57.85721970]
[98.20317841 42.93255234]
[99.70462036 28.00788689]
[101.20605469 13.08321953]
[102.70748901 -1.84144747]
[104.20892334 -16.76611519]
[97.89181519 -31.27145004]
[106.86420441 -43.16033173]
[108.36563873 -58.08499908]
[105.31154633 -43.39920807]
[95.15332794 -32.36242294]
[80.77067566 -28.10338974]
[66.24083710 -31.82947159]
[55.68276596 -42.48438644]
[52.08951187 -57.04764557]
[56.47969818 -71.39080811]
[67.60877991 -81.44782257]
[82.32210541 -84.36767578]
[75.55695343 -97.75546265]
[68.79180145 -111.14324188]
[62.02664566 -124.53102875]
[55.26149368 -137.91880798]
[48.49634171 -151.30659485]
[30.53416634 -153.65637207]
[17.68003845 -166.19706726]
[14.93608856 -183.78553772]
[23.21219254 -199.36836243]
[16.00346565 -212.52261353]
[8.79473972 -225.67686462]
[1.58601391 -238.83111572]
[-5.62271261 -251.98536682]
[-12.83143902 -265.13961792]
[-20.04016495 -278.29385376]
[-27.24889183 -291.44812012]
[-34.45761871 -304.60235596]
[-41.66634369 -317.75662231]
[-57.03639221 -320.63684082]
[-66.91915131 -332.75561523]
[-66.64829254 -348.39083862]
[-56.35170364 -360.16006470]
[-40.89111328 -362.50616455]
[-27.56654930 -354.32144165]
[-22.66945648 -339.47042847]
[-28.51209450 -324.96533203]
[-21.30336952 -311.81109619]
[-14.09464264 -298.65682983]
[-6.88591623 -285.50259399]
[0.32281014 -272.34832764]
[7.53153658 -259.19409180]
[14.74026299 -246.03984070]
[21.94898987 -232.88558960]
[29.15771484 -219.73133850]
[36.36644363 -206.57710266]
[48.52577972 -206.83934021]
[59.70570374 -201.87040710]
[67.75345612 -192.55978394]
[71.09085083 -180.63922119]
[69.02347565 -168.36087036]
[61.88412476 -158.07174683]
[68.64927673 -144.68395996]
[75.41442871 -131.29617310]
[82.17958069 -117.90839386]
[88.94473267 -104.52061462]
[95.70988464 -91.13282776]
[102.87315369 -88.91076660]
[113.88494110 -99.09606934]
[117.19969177 -84.46662903]
[124.36296082 -82.24456024]
[137.51721191 -89.45329285]
[150.67146301 -96.66201782]
[163.82569885 -103.87074280]
[176.97994995 -111.07946777]
[190.13420105 -118.28819275]
[203.28845215 -125.49692535]
[216.44270325 -132.70564270]
[229.59695435 -139.91436768]
[242.69050598 -147.23275757]
[255.72247314 -154.66027832]
[268.75442505 -162.08779907]
[276.91271973 -175.64335632]
[291.80139160 -175.22335815]
[304.83334351 -182.65087891]
[317.86529541 -190.07839966]
[330.89724731 -197.50593567]
[338.70422363 -211.92755127]
[355.10238647 -212.10679626]
[363.22271729 -197.85926819]
[354.71173096 -183.84159851]
[338.32476807 -184.47396851]
[325.29281616 -177.04644775]
[312.26086426 -169.61892700]
[299.22891235 -162.19140625]
[292.00274658 -149.16711426]
[276.18194580 -149.05584717]
[263.14999390 -141.62832642]
[250.11804199 -134.20080566]
[245.85510254 -128.14512634]
[236.80567932 -126.76012421]
[223.65142822 -119.55139923]
[210.49717712 -112.34267426]
[197.34292603 -105.13394928]
[184.18867493 -97.92521667]
[171.03443909 -90.71649170]
[157.88018799 -83.50776672]
[144.72593689 -76.29904175]
[131.57168579 -69.09031677]
[123.29030609 -56.58356476]
[121.78887177 -41.65889740]
[128.21336365 -28.22107506]
[119.13359070 -15.26467896]
[117.63215637 -0.34001207]
[116.13072205 14.58465481]
[114.62928772 29.50932312]
[113.12784576 44.43399048]
[111.62641144 59.35865784]
[110.12497711 74.28332520]
[117.75438690 78.81877136]
[123.55276489 85.53867340]
[126.92211151 93.74999237]
[127.51493835 102.60588074]
[125.27011871 111.19301605]
[120.41915894 118.62580872]
[113.46233368 124.13768768]
[116.93963623 138.72906494]
[120.41693878 153.32044983]
[123.89424133 167.91183472]
[127.37154388 182.50320435]
[130.84884644 197.09458923]
[137.34973145 183.57650757]
[150.06413269 175.61761475]
[165.06401062 175.67675781]
[177.71525574 183.73565674]
[184.10932922 197.30458069]
[182.27084351 212.19148254]
[172.76776123 223.79714966]
[158.53601074 228.53608704]
[143.97241211 224.94421387]
[133.57641602 214.13143921]
[134.82824707 229.07911682]
[136.08007812 244.02677917]
[137.33192444 258.97445679]
[138.58375549 273.92211914]
[139.83560181 288.86981201]
[152.06488037 298.88079834]
[153.55026245 314.61514282]
[143.41052246 326.73788452]
[127.66136932 328.05685425]
[115.64649963 317.78948975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 182]
[2 181]
[3 180]
[4 179]
[5 178]
[6 177]
[7 167]
[8 166]
[9 165]
[10 164]
[11 163]
[12 162]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[22 29]
[23 28]
[39 155]
[40 154]
[41 153]
[42 152]
[43 151]
[44 150]
[45 149]
[47 147]
[48 146]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[107 145]
[108 144]
[109 143]
[110 142]
[111 141]
[112 140]
[113 139]
[114 138]
[115 137]
[116 135]
[117 134]
[118 133]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
