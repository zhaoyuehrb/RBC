%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAGGGCGGAAGCAGAGGCGUUGGCGGCGUGAGGCUCAGGACUGUACAUCAGAGGAAGCCAAAAGCCAGCUGGAAUACUUCCUGAAUACAGUUUUAAUCUUGUUUGCAAUUAUUUCGAAGGGGAGAAAUCAUCUGGAUCAGAAUUAAG\
) } def
/len { sequence length } bind def

/coor [
[70.32380676 127.17671204]
[62.64553070 140.06253052]
[54.96725464 152.94833374]
[47.28897858 165.83413696]
[39.61070251 178.71995544]
[46.48725891 194.14036560]
[42.87634659 210.46417236]
[30.38759232 221.32788086]
[14.05155373 222.61692810]
[6.64122725 235.65867615]
[7.29521847 252.04476929]
[-6.71120644 260.57424927]
[-20.96943855 252.47271729]
[-20.81183052 236.07432556]
[-6.40051603 228.24833679]
[1.00981021 215.20660400]
[-5.61975431 203.57806396]
[-5.62169600 190.08403015]
[1.11187255 178.26510620]
[12.90747261 171.27555847]
[26.72489357 171.04167175]
[34.40317154 158.15586853]
[42.08144379 145.27005005]
[49.75971985 132.38424683]
[57.43799591 119.49843597]
[53.45598221 105.03664398]
[40.26387787 97.89743042]
[27.07177162 90.75821686]
[13.80659294 83.75571442]
[0.46975848 76.89067078]
[-12.86707592 70.02562714]
[-25.78442383 78.21643066]
[-40.96700668 78.83776093]
[-54.33325577 71.82279205]
[-62.34002304 59.14416504]
[-62.92164230 44.26037216]
[-76.25847626 37.39532471]
[-89.59531403 30.53027916]
[-102.93214417 23.66523361]
[-114.31723022 31.85077667]
[-128.05531311 34.30708313]
[-141.44363403 30.60905647]
[-151.87329102 21.53668594]
[-157.33758545 8.91136932]
[-156.81802368 -4.76955462]
[-170.01013184 -11.90876579]
[-183.20223999 -19.04797554]
[-198.92674255 -15.86682987]
[-211.12481689 -26.28730011]
[-210.43917847 -42.31569672]
[-197.39575195 -51.65640259]
[-182.00036621 -47.14402771]
[-176.06301880 -32.24008179]
[-162.87092590 -25.10087204]
[-149.67881775 -17.96166039]
[-136.15377808 -26.75069427]
[-119.94951630 -27.54242134]
[-105.46578979 -20.02747536]
[-96.68268585 -6.16472578]
[-96.06710052 10.32839966]
[-82.73026276 17.19344521]
[-69.39343262 24.05849075]
[-56.05659485 30.92353821]
[-43.60547256 22.74826241]
[-28.63444138 21.89730263]
[-15.15850163 28.69917297]
[-6.84192181 41.41653442]
[-6.00202942 56.68879318]
[7.33480453 63.55383682]
[20.67163849 70.41888428]
[28.10519218 70.68549347]
[34.21098328 77.56611633]
[47.40308762 84.70532227]
[60.59519577 91.84453583]
[64.19416046 82.53405762]
[69.92800140 74.48567200]
[77.39955139 68.17176056]
[86.11178589 63.94770813]
[95.50071716 62.03209686]
[104.97186279 62.49583054]
[113.93785095 65.26071930]
[121.85486603 70.10740662]
[128.25561523 76.69192505]
[132.77679443 84.56975555]
[135.17962646 93.22560883]
[150.17642212 93.53561401]
[165.17321777 93.84561157]
[180.17001343 94.15561676]
[188.78048706 83.74921417]
[201.63026428 80.27252197]
[213.94694519 84.78372192]
[221.28964233 95.41664886]
[236.27682495 96.03652191]
[251.26400757 96.65640259]
[258.08697510 81.28635406]
[270.24487305 69.72145081]
[285.86834717 63.70125580]
[302.56979370 64.11573792]
[317.80847168 70.87384033]
[329.27682495 82.92156982]
[335.24996948 98.40628815]
[350.24996948 98.40628815]
[365.24996948 98.40628815]
[380.24996948 98.40628815]
[394.05014038 90.66898346]
[406.77740479 98.40628815]
[421.77740479 98.40628815]
[436.77740479 98.40628815]
[451.77740479 98.40628815]
[460.42208862 95.26099396]
[467.08660889 98.56449890]
[482.08340454 98.87450409]
[496.18328857 90.50041199]
[510.35104370 98.75910950]
[510.01214600 115.15475464]
[495.51516724 122.82091522]
[481.77340698 113.87129974]
[466.77661133 113.56129456]
[451.77740479 113.40628815]
[436.77740479 113.40628815]
[421.77740479 113.40628815]
[406.77740479 113.40628815]
[394.05014038 121.14358521]
[380.24996948 113.40628815]
[365.24996948 113.40628815]
[350.24996948 113.40628815]
[335.24996948 113.40628815]
[330.94158936 126.01490021]
[322.92993164 136.69020081]
[311.98986816 144.37617493]
[299.18676758 148.30703735]
[285.77282715 148.08352661]
[273.06454468 143.71345520]
[262.31356812 135.61227417]
[254.58340454 124.56362152]
[250.64413452 111.64358521]
[235.65695190 111.02371216]
[220.66976929 110.40383911]
[208.82794189 122.30560303]
[191.70472717 121.98460388]
[179.86000061 109.15241241]
[164.86320496 108.84240723]
[149.86640930 108.53240967]
[134.86961365 108.22240448]
[132.33691406 116.52888489]
[127.82934570 124.08879089]
[121.56069946 130.43389893]
[113.85535431 135.15592957]
[105.13172150 137.93260193]
[95.87964630 138.54901123]
[86.63289642 136.91329956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[9 16]
[10 15]
[26 74]
[27 73]
[28 72]
[29 70]
[30 69]
[31 68]
[36 63]
[37 62]
[38 61]
[39 60]
[45 55]
[46 54]
[47 53]
[85 144]
[86 143]
[87 142]
[88 141]
[92 138]
[93 137]
[94 136]
[101 127]
[102 126]
[103 125]
[104 124]
[106 122]
[107 121]
[108 120]
[109 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
