%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGCAAUUAAGGCGCCCAUUUCAGAAGAGUUACAGCCGUGAAAAUUACUCAGCAGUGCAGUUGGCUGAGAAGAGGAAAAAAGGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[69.39892578 134.56436157]
[57.76325226 144.03068542]
[46.12758255 153.49700928]
[34.49191284 162.96333313]
[23.18621826 172.82138062]
[12.22367954 183.05967712]
[1.26113975 193.29797363]
[4.12498426 208.45719910]
[-1.68266594 222.74966431]
[-14.30860996 231.61471558]
[-29.72395515 232.22354126]
[-43.00972366 224.38185120]
[-49.92646790 210.59191895]
[-48.26708984 195.25405884]
[-38.56108093 183.26252747]
[-23.90560150 178.44377136]
[-8.97715759 182.33543396]
[1.98538208 172.09713745]
[12.94792175 161.85884094]
[13.99202633 157.00004578]
[18.23295975 152.82476807]
[25.02559471 151.32765198]
[36.66126251 141.86134338]
[48.29693222 132.39501953]
[59.93260193 122.92870331]
[55.69584274 112.97162628]
[53.89334869 102.30183411]
[54.62416840 91.50556183]
[57.84814072 81.17601776]
[63.38812637 71.88075256]
[70.93973541 64.13047791]
[80.08804321 58.35104370]
[90.33040619 54.85998917]
[101.10406494 53.84913254]
[111.81705475 55.37401199]
[121.88076782 59.35084915]
[130.74224854 65.56113434]
[137.91461182 73.66364288]
[151.46073914 67.22138977]
[165.00685120 60.77914047]
[161.95561218 45.08510971]
[162.99897766 29.14189148]
[168.06285095 13.99942303]
[176.80853271 0.65353268]
[188.65538025 -10.01954651]
[202.81938171 -17.32070351]
[218.36495972 -20.77374649]
[234.26689148 -20.15645218]
[249.47779846 -15.51486492]
[262.99719238 -7.15990114]
[273.93734741 4.35346270]
[287.01223755 -2.99819040]
[300.08715820 -10.34984398]
[313.16204834 -17.70149612]
[326.23696899 -25.05315018]
[339.31185913 -32.40480423]
[339.40646362 -47.76340485]
[347.18151855 -61.00893402]
[360.54559326 -68.57840729]
[375.90380859 -68.43568420]
[389.12490845 -60.61914825]
[396.65246582 -47.23140717]
[396.46160889 -31.87370110]
[388.60366821 -18.67717361]
[375.19238281 -11.19162464]
[359.83535767 -11.43062973]
[346.66351318 -19.32989693]
[333.58862305 -11.97824287]
[320.51370239 -4.62658978]
[307.43881226 2.72506332]
[294.36389160 10.07671642]
[281.28900146 17.42836952]
[285.17044067 30.97812462]
[285.88516235 45.06266785]
[283.39251709 58.95136261]
[277.81826782 71.92291260]
[269.44839478 83.30283356]
[258.71426392 92.49851227]
[246.17054749 99.03006744]
[232.46643066 102.55540466]
[218.31210327 102.88811493]
[204.44194031 100.00735474]
[191.57635498 94.05908203]
[180.38442993 85.34867096]
[171.44911194 74.32526398]
[157.90298462 80.76750946]
[144.35685730 87.20976257]
[145.65510559 106.83615875]
[138.66517639 125.22152710]
[124.65603638 139.02821350]
[106.17086792 145.74977112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 19]
[6 18]
[7 17]
[38 87]
[39 86]
[40 85]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
