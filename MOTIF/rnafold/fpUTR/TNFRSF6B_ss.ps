%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGACUUGGGCGGCCCCUCCGCAGGCGGACCGGGGGCAAAGGAGGUGGCAUGUCGGUCAGGCACAGCAGGGUCCUGUGUCCGCGCUGAGCCGCGCUCUCCCUGCUCCAGCAAGGACC\
) } def
/len { sequence length } bind def

/coor [
[145.42292786 234.24081421]
[141.86302185 219.66937256]
[138.30313110 205.09791565]
[134.74322510 190.52647400]
[120.91284943 185.06216431]
[112.85676575 172.35139465]
[113.84150696 157.15653992]
[123.69856262 145.31826782]
[120.13866425 130.74682617]
[116.57876587 116.17537689]
[104.82806396 121.21265411]
[93.02024078 119.11331940]
[84.88442993 111.41341400]
[70.31298065 114.97331238]
[55.74153137 118.53321075]
[41.17008591 122.09310913]
[26.59863663 125.65301514]
[12.18093491 129.79183960]
[-2.06002951 134.50299072]
[-16.30099297 139.21414185]
[-30.54195786 143.92529297]
[-41.04011536 156.52372742]
[-57.15148926 153.46502686]
[-62.30208206 137.89572144]
[-51.19340134 125.83216858]
[-35.25310898 129.68432617]
[-21.01214409 124.97317505]
[-6.77118015 120.26202393]
[7.46978378 115.55087280]
[9.38894558 112.44856262]
[12.97087193 110.17478943]
[17.78317833 109.53088379]
[23.03873634 111.08156586]
[37.61018372 107.52166748]
[52.18163300 103.96176147]
[66.75308228 100.40186310]
[81.32453156 96.84196472]
[86.03472900 85.68868256]
[96.99901581 79.16348267]
[110.34706879 80.46396637]
[120.82015228 89.85013580]
[128.77645874 77.13412476]
[136.73277283 64.41810608]
[144.68908691 51.70209122]
[152.47543335 38.88129044]
[160.09042358 25.95797920]
[167.70539856 13.03466702]
[175.32038879 0.11135596]
[182.93537903 -12.81195545]
[182.96795654 -18.29141045]
[184.97372437 -22.71292877]
[188.18475342 -25.48592377]
[191.70903015 -26.42775917]
[200.33084106 -38.70230103]
[208.95265198 -50.97684097]
[217.57446289 -63.25138474]
[226.19627380 -75.52592468]
[223.68040466 -90.89824677]
[232.59899902 -103.22355652]
[247.26966858 -105.52731323]
[255.89147949 -117.80184937]
[264.34912109 -130.19007874]
[272.64114380 -142.68978882]
[280.93313599 -155.18949890]
[289.22512817 -167.68920898]
[297.51715088 -180.18890381]
[292.91812134 -195.13491821]
[299.04974365 -209.52021790]
[313.01687622 -216.55252075]
[328.22463989 -212.91139221]
[337.49240112 -200.31605530]
[336.44421387 -184.71363831]
[325.57498169 -173.47114563]
[310.01684570 -171.89691162]
[301.72485352 -159.39720154]
[293.43283081 -146.89749146]
[285.14083862 -134.39778137]
[276.84884644 -121.89807129]
[275.75949097 -114.49005127]
[268.16601562 -109.18003845]
[259.54421997 -96.90550232]
[262.35391235 -82.32328033]
[253.78503418 -69.75232697]
[238.47080994 -66.90411377]
[229.84899902 -54.62957382]
[221.22718811 -42.35503006]
[212.60537720 -30.08049011]
[203.98356628 -17.80594826]
[195.85868835 -5.19696808]
[188.24369812 7.72634315]
[180.62870789 20.64965439]
[173.01373291 33.57296371]
[165.39874268 46.49627686]
[164.70520020 53.95178223]
[157.40510559 59.65840149]
[149.44879150 72.37442017]
[141.49247742 85.09043884]
[133.53616333 97.80644989]
[131.15020752 112.61547852]
[134.71011353 127.18692780]
[138.27001953 141.75837708]
[152.47523499 147.71807861]
[160.35527039 160.74720764]
[159.06753540 175.74072266]
[149.31466675 186.96656799]
[152.87457275 201.53802490]
[156.43447876 216.10946655]
[159.99436951 230.68092346]
[174.76036072 234.90715027]
[185.42343140 245.96131897]
[189.11524963 260.86990356]
[184.84275818 275.62258911]
[173.75521851 286.25094604]
[158.83512878 289.89602661]
[144.09593201 285.57730103]
[133.50236511 274.45651245]
[129.90408325 259.52505493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[8 101]
[9 100]
[10 99]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 29]
[19 28]
[20 27]
[21 26]
[41 98]
[42 97]
[43 96]
[44 95]
[45 93]
[46 92]
[47 91]
[48 90]
[49 89]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[60 81]
[61 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
