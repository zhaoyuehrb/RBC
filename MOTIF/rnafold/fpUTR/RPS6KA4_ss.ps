%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGCCCGCCCCGGCCGGAGCCGCCAUGUAACCGGCGCCGCCCGGAGCCCGAGCCGCGCGGGCCCCAGCGACCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[148.52229309 161.79077148]
[145.88520813 159.28445435]
[143.98144531 155.75350952]
[143.17367554 151.43826294]
[132.56707764 140.83166504]
[121.76399994 130.42524719]
[110.76822662 120.22264862]
[92.99700165 121.81440735]
[79.47298431 110.17604828]
[78.39830017 92.36608124]
[66.67082977 83.01373291]
[51.05728912 80.45873260]
[45.93083572 66.47414398]
[34.20336151 57.12179184]
[22.47589111 47.76944733]
[10.74841881 38.41709900]
[-4.86511803 35.86209869]
[-9.99157238 21.87750816]
[-21.71904373 12.52516079]
[-33.44651794 3.17281413]
[-49.06005478 0.61781251]
[-54.18650818 -13.36677647]
[-65.91397858 -22.71912384]
[-77.64144897 -32.07147217]
[-89.36892700 -41.42381668]
[-103.94847107 -36.37998581]
[-118.93506622 -40.04134369]
[-129.54653931 -51.23957062]
[-132.39680481 -66.40134430]
[-126.57635498 -80.68861389]
[-113.94247437 -89.54234314]
[-98.52658844 -90.13735962]
[-85.24784851 -82.28377533]
[-78.34346008 -68.48765564]
[-80.01657867 -53.15129089]
[-68.28910828 -43.79894257]
[-56.56163406 -34.44659424]
[-44.83415985 -25.09424973]
[-30.05945015 -23.20818901]
[-24.09416962 -8.55465794]
[-12.36669731 0.79768902]
[-0.63922513 10.15003586]
[14.13548470 12.03609562]
[20.10076523 26.68962669]
[31.82823753 36.04197311]
[43.55570984 45.39432144]
[55.28318405 54.74666977]
[70.05789185 56.63272858]
[76.02317047 71.28626251]
[87.75064850 80.63860321]
[98.75843048 77.12274933]
[110.08206177 79.42665863]
[118.84089661 86.96424866]
[122.80677795 97.81802368]
[120.97081757 109.22687531]
[131.96659851 119.42946625]
[140.60853577 123.09481812]
[143.17367554 130.22505188]
[153.78028870 140.83166504]
[165.33082581 150.40165710]
[177.72441101 158.85145569]
[190.11799622 167.30125427]
[202.51156616 175.75106812]
[214.90515137 184.20086670]
[227.29873657 192.65066528]
[240.77986145 185.40373230]
[256.08471680 185.26348877]
[269.69638062 192.26214600]
[278.48699951 204.79147339]
[280.43652344 219.97230530]
[275.09695435 234.31622314]
[263.69534302 244.52708435]
[248.85165405 248.25851440]
[233.97688293 244.65304565]
[222.48910522 234.53919983]
[217.02816772 220.24107361]
[218.84893799 205.04425049]
[206.45535278 196.59445190]
[194.06176758 188.14463806]
[181.66818237 179.69483948]
[169.27461243 171.24504089]
[156.88102722 162.79524231]
[154.39222717 163.45048523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 56]
[7 55]
[10 50]
[11 49]
[13 47]
[14 46]
[15 45]
[16 44]
[18 42]
[19 41]
[20 40]
[22 38]
[23 37]
[24 36]
[25 35]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
