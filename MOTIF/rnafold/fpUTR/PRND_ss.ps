%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGCCACCUCCCCCGGCAGCUCCUAUAUAGCUGGGCGGACCUGGCUGCCAAGAGGGUGUGCUGGGGGACUGUGCAGCUCGAGGCUCCAGAGGCACACUCCAGAGAGAGCCAAGGUUCUGACGCG\
) } def
/len { sequence length } bind def

/coor [
[168.15740967 208.26292419]
[159.82385254 195.79087830]
[151.49031067 183.31883240]
[133.58483887 176.18540955]
[132.29737854 156.13821411]
[123.36188507 144.09010315]
[114.42639160 132.04197693]
[105.49090576 119.99387360]
[91.51720428 120.35243225]
[79.64250946 111.46675110]
[75.59681702 96.31311035]
[82.13030243 81.12046051]
[68.73193359 74.37628937]
[55.33357239 67.63211823]
[41.93520737 60.88794708]
[28.53684235 54.14377594]
[15.13847733 47.39960861]
[1.74011254 40.65543747]
[-11.65825176 33.91126633]
[-25.05661583 27.16709709]
[-38.45498276 20.42292786]
[-53.29767227 25.14862823]
[-66.78944397 18.11821556]
[-71.20320892 3.93885422]
[-84.60157776 -2.80531573]
[-97.99993896 -9.54948521]
[-111.39830017 -16.29365540]
[-127.15702820 -7.50524712]
[-144.89256287 -9.83407784]
[-157.62434387 -22.17597389]
[-160.45324707 -39.52285385]
[-174.16639709 -45.60147095]
[-187.87954712 -51.68009186]
[-201.59268188 -57.75871277]
[-215.30583191 -63.83732986]
[-229.01898193 -69.91595459]
[-242.73213196 -75.99456787]
[-256.44528198 -82.07318878]
[-272.68542480 -79.79524994]
[-282.56362915 -92.88544464]
[-275.91802979 -107.87770844]
[-259.58505249 -109.34928131]
[-250.36665344 -95.78633881]
[-236.65350342 -89.70771790]
[-222.94035339 -83.62909698]
[-209.22721863 -77.55047607]
[-195.51406860 -71.47185516]
[-181.80091858 -65.39324188]
[-168.08776855 -59.31461716]
[-154.37463379 -53.23600006]
[-144.78762817 -60.87458801]
[-132.78234863 -63.68821335]
[-120.65777588 -61.07423019]
[-110.76313019 -53.47554016]
[-105.04274750 -42.30693817]
[-104.65413666 -29.69202042]
[-91.25576782 -22.94784927]
[-77.85740662 -16.20368004]
[-64.45903778 -9.45950985]
[-50.44079590 -14.36097813]
[-36.75687408 -7.71229601]
[-31.71081161 7.02456284]
[-18.31244659 13.76873302]
[-4.91408205 20.51290321]
[8.48428249 27.25707245]
[21.88264656 34.00124359]
[35.28100967 40.74541092]
[48.67937469 47.48958206]
[62.07773972 54.23375320]
[75.47610474 60.97792053]
[88.87446594 67.72209167]
[103.78307343 66.06875610]
[115.37822723 56.55286026]
[126.97338867 47.03696060]
[127.42846680 36.03664398]
[133.78167725 27.31683159]
[143.69873047 23.66541862]
[153.75993347 26.08050156]
[165.80804443 17.14501190]
[177.85615540 8.20952129]
[189.90426636 -0.72596794]
[199.02458191 -15.01779366]
[215.28263855 -10.21027946]
[215.16366577 6.74325037]
[198.83976746 11.32214546]
[186.79165649 20.25763512]
[174.74353027 29.19312477]
[162.69541931 38.12861252]
[156.44917297 56.36253357]
[136.48928833 58.63211823]
[124.89412689 68.14801788]
[113.29897308 77.66391754]
[122.71928406 94.54583740]
[117.53901672 111.05838013]
[126.47450256 123.10649109]
[135.40998840 135.15460205]
[144.34548950 147.20271301]
[155.31022644 148.19700623]
[163.70779419 154.97042847]
[166.86819458 165.05470276]
[163.96234131 174.98529053]
[172.29589844 187.45733643]
[180.62945557 199.92936707]
[198.87228394 198.04452515]
[215.51170349 205.55522156]
[226.06791687 220.34669495]
[227.74563599 238.35675049]
[220.17372131 254.69113159]
[229.40220642 266.51632690]
[238.63067627 278.34152222]
[247.85914612 290.16671753]
[257.08761597 301.99191284]
[272.48397827 307.63851929]
[275.02511597 323.83959961]
[262.09689331 333.92886353]
[246.99879456 327.52734375]
[245.26242065 311.22039795]
[236.03395081 299.39520264]
[226.80548096 287.57000732]
[217.57701111 275.74481201]
[208.34852600 263.91961670]
[196.85781860 267.19750977]
[184.90307617 266.36090088]
[173.91719055 261.48617554]
[165.22500610 253.13528442]
[159.88360596 242.29078674]
[158.55377197 230.24052429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[5 97]
[6 96]
[7 95]
[8 94]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[24 59]
[25 58]
[26 57]
[27 56]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[72 92]
[73 91]
[74 90]
[78 88]
[79 87]
[80 86]
[81 85]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
