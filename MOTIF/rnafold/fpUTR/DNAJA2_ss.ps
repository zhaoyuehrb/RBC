%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUGGGUCAAAGUUCAGCCCCGCCCCCGCUUCCCCCUCGCUGUCUCCCUCGGCCUGUGCCGCCGCCGACGCCGCUUGUGGGCCCGACUCCGCUCUGUCUGCUUCGCCACCUUCUCCCCGAGCACUGCCCGGCCGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[75.45881653 130.88713074]
[65.76101685 142.33059692]
[56.06321716 153.77404785]
[56.33554840 166.71987915]
[47.95809555 176.06018066]
[35.85954285 177.12106323]
[25.91270256 188.34872437]
[15.96586323 199.57638550]
[6.01902342 210.80404663]
[12.70494652 224.45567322]
[13.65269375 239.62702942]
[8.71774101 254.00460815]
[-1.34736717 265.39590454]
[-15.00777531 272.06387329]
[-30.18037033 272.99166870]
[-44.55144119 268.03781128]
[-55.92950439 257.95773315]
[-62.57949066 244.28855896]
[-63.48731995 229.11474609]
[-58.51455688 214.75021362]
[-48.41951370 203.38540649]
[-34.74161148 196.75341797]
[-19.56662560 195.86555481]
[-5.20863771 200.85720825]
[4.73820210 189.62954712]
[14.68504238 178.40188599]
[24.63188171 167.17422485]
[27.16965294 149.84306335]
[44.61976242 144.07624817]
[54.31755829 132.63279724]
[64.01535797 121.18933868]
[62.78517151 113.79091644]
[48.78826904 119.18412781]
[37.33672333 128.87237549]
[22.48581505 126.76274109]
[14.18535614 114.26864624]
[17.99648857 99.76087952]
[31.36582756 92.95935822]
[45.33577728 98.42053986]
[60.32480621 98.99407196]
[59.09462357 91.59564972]
[46.21548080 83.90620422]
[33.33633423 76.21675873]
[20.45718765 68.52730560]
[5.74628639 73.83045959]
[-8.91380596 68.38842773]
[-16.60104179 54.77077484]
[-13.68574429 39.40734100]
[-1.54442608 29.55227089]
[14.09015179 29.85882568]
[25.83582115 40.18225861]
[28.14663506 55.64816284]
[41.02577972 63.33760834]
[53.90492630 71.02705383]
[66.78407288 78.71650696]
[78.94421387 69.07228088]
[93.16148376 65.28730774]
[106.90876770 67.37862396]
[117.98565674 74.37126923]
[124.87063599 84.55720520]
[139.21574402 80.17337799]
[150.15214539 68.74072266]
[164.58500671 72.42060089]
[178.93011475 68.03678131]
[193.27522278 63.65295410]
[207.62033081 59.26913071]
[221.91641235 54.72799683]
[236.16175842 50.03010559]
[250.40710449 45.33221436]
[256.93295288 34.14820099]
[268.95422363 30.55489731]
[279.82720947 35.96585083]
[294.17230225 31.58202553]
[307.15060425 16.22391701]
[325.79037476 21.19358826]
[339.92907715 16.18389702]
[354.06777954 11.17420578]
[368.20648193 6.16451406]
[382.34518433 1.15482283]
[389.45526123 -4.70513248]
[396.84988403 -3.80589986]
[411.09521484 -8.50379181]
[425.34054565 -13.20168304]
[429.74221802 -35.12218094]
[445.84832764 -50.46339798]
[467.72973633 -53.75989532]
[487.43515015 -43.94717026]
[499.77990723 -52.46813965]
[512.12469482 -60.98911285]
[512.36499023 -76.50432587]
[521.70593262 -88.89491272]
[536.55566406 -93.39643097]
[551.20428467 -88.27796173]
[560.01898193 -75.50765991]
[559.61035156 -59.99596405]
[550.13555908 -47.70744324]
[535.23785400 -43.36727905]
[520.64562988 -48.64435577]
[508.30087280 -40.12338257]
[495.95611572 -31.60241127]
[496.56289673 -30.05760574]
[497.09872437 -28.48679161]
[512.02551270 -29.96729660]
[527.19049072 -37.54744339]
[538.67248535 -25.07347298]
[529.86456299 -10.58705044]
[513.50598145 -15.04053974]
[498.57925415 -13.56003380]
[496.16909790 -3.69228959]
[491.12182617 5.15000343]
[483.81683350 12.27595806]
[474.81051636 17.12468147]
[464.79382324 19.30940819]
[454.53933716 18.64833260]
[444.84164429 15.17964935]
[436.45578003 9.15961838]
[430.03845215 1.04366028]
[415.79309082 5.74155188]
[401.54776001 10.43944359]
[387.35488892 15.29352856]
[373.21618652 20.30321884]
[359.07748413 25.31291199]
[344.93875122 30.32260323]
[330.80004883 35.33229446]
[327.20495605 44.99804688]
[318.68020630 51.18494797]
[307.93539429 51.62499619]
[298.55615234 45.92713165]
[284.21102905 50.31095505]
[272.99911499 63.76836777]
[255.10499573 59.57755661]
[240.85964966 64.27545166]
[226.61431885 68.97334290]
[221.20529175 74.09501648]
[212.00415039 73.61423492]
[197.65905762 77.99806213]
[183.31394958 82.38188171]
[168.96884155 86.76570892]
[159.05850220 97.88481140]
[143.59956360 94.51848602]
[129.25447083 98.90231323]
[124.50724030 121.59869385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[6 27]
[7 26]
[8 25]
[9 24]
[41 55]
[42 54]
[43 53]
[44 52]
[60 141]
[61 140]
[63 138]
[64 137]
[65 136]
[66 135]
[67 133]
[68 132]
[69 131]
[72 129]
[73 128]
[75 124]
[76 123]
[77 122]
[78 121]
[79 120]
[81 119]
[82 118]
[83 117]
[87 100]
[88 99]
[89 98]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
