%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUGCCGGAGCGGCUGACAGAGCGGCUGACGGAGCCGGGCUCACCAGGUCGCUGCCGCGAGGGAGUUGCUGUGCUGGGGCCUGGGUGGCGGCUGGAGGCCUGAGUUGGGCUCGCGGCGGGGGUCGGCAGGGGGCCGGGUGGCGGA\
) } def
/len { sequence length } bind def

/coor [
[46.32360458 301.76055908]
[31.68634415 305.03936768]
[16.94132805 302.28536987]
[4.47438526 293.94418335]
[-3.69725776 281.36547852]
[-6.25138140 266.58453369]
[-2.77361679 251.99064636]
[-14.24151039 261.65951538]
[-25.70940399 271.32843018]
[-31.52471733 288.76638794]
[-48.86696243 291.25183105]
[-60.12704468 301.16195679]
[-71.38713074 311.07208252]
[-76.63469696 325.99768066]
[-91.30054474 328.59808350]
[-102.56063080 338.50820923]
[-113.82071686 348.41833496]
[-116.27251434 364.27291870]
[-130.26780701 372.11584473]
[-145.07061768 365.93063354]
[-149.32548523 350.46209717]
[-139.76844788 337.57635498]
[-123.73083496 337.15823364]
[-112.47075653 327.24810791]
[-101.21067047 317.33801270]
[-96.76849365 303.12124634]
[-81.29724884 299.81198120]
[-70.03717041 289.90185547]
[-58.77708054 279.99172974]
[-57.67857742 267.90164185]
[-48.31808090 259.55456543]
[-35.37829208 259.86053467]
[-23.91039848 250.19163513]
[-12.44250584 240.52275085]
[-9.48212719 231.44731140]
[0.20015521 226.75833130]
[8.86166668 214.51176453]
[17.52317810 202.26521301]
[18.55531693 187.40640259]
[32.84102631 180.60720825]
[41.50253677 168.36065674]
[50.16405106 156.11408997]
[58.82556152 143.86753845]
[67.48706818 131.62097168]
[68.79058075 124.29305267]
[76.46467590 119.20904541]
[85.38417053 107.14908600]
[84.36296082 95.50389862]
[91.41350555 86.17958069]
[102.89635468 83.98928833]
[112.06982422 72.12136078]
[121.24328613 60.25344467]
[130.41674805 48.38552475]
[139.46374512 36.42090988]
[148.38323975 24.36095428]
[150.36851501 8.66479969]
[164.15734863 3.03296542]
[173.07684326 -9.02699184]
[181.99633789 -21.08694839]
[190.91583252 -33.14690399]
[185.79327393 -45.98553848]
[187.68635559 -59.56862259]
[195.99176025 -70.34548187]
[208.44424438 -75.55278015]
[221.73359680 -73.92271423]
[230.90707397 -85.79063416]
[240.08053589 -97.65855408]
[249.25399780 -109.52647400]
[258.42745972 -121.39440155]
[254.43688965 -131.41882324]
[255.00099182 -142.11233521]
[259.94857788 -151.51763916]
[268.31231689 -157.94165039]
[278.51718140 -160.26019287]
[288.67684937 -158.11428833]
[298.58697510 -169.37437439]
[308.49707031 -180.63446045]
[311.80633545 -196.10569763]
[326.02310181 -200.54788208]
[335.93322754 -211.80796814]
[345.84332275 -223.06803894]
[355.75344849 -234.32812500]
[365.66357422 -245.58821106]
[375.57369995 -256.84829712]
[378.74337769 -274.95504761]
[395.52658081 -279.98046875]
[405.19546509 -291.44836426]
[414.86434937 -302.91625977]
[417.21588135 -319.14593506]
[432.54519653 -324.97213745]
[445.08276367 -314.40136719]
[441.93106079 -298.30792236]
[426.33224487 -293.24737549]
[416.66336060 -281.77947998]
[406.99444580 -270.31158447]
[407.69790649 -258.19207764]
[399.67626953 -248.55122375]
[386.83377075 -246.93817139]
[376.92367554 -235.67810059]
[367.01354980 -224.41801453]
[357.10342407 -213.15792847]
[347.19329834 -201.89784241]
[337.28317261 -190.63775635]
[334.68276978 -175.97190857]
[319.75717163 -170.72433472]
[309.84704590 -159.46424866]
[299.93692017 -148.20416260]
[302.66833496 -128.97515869]
[290.27230835 -113.63273621]
[270.29537964 -112.22093201]
[261.12191772 -100.35301208]
[251.94845581 -88.48509216]
[242.77499390 -76.61717224]
[233.60151672 -64.74925232]
[238.71470642 -49.18354416]
[233.51409912 -33.47213364]
[219.85263062 -23.84025574]
[202.97578430 -24.22740746]
[194.05628967 -12.16745090]
[185.13679504 -0.10749400]
[176.21730042 11.95246315]
[174.87001038 26.78600883]
[160.44320679 33.28045273]
[151.52369690 45.34040833]
[150.06494141 52.63901138]
[142.28466797 57.55899048]
[133.11120605 69.42691040]
[123.93774414 81.29483032]
[114.76427460 93.16275024]
[112.97808075 109.81332397]
[97.44412994 116.06858826]
[88.52462769 128.12854004]
[79.73363495 140.28248596]
[71.07212067 152.52903748]
[62.41061020 164.77560425]
[53.74909973 177.02217102]
[45.08758545 189.26872253]
[43.43591690 205.00347900]
[29.76973724 210.92671204]
[21.10822678 223.17327881]
[12.44671535 235.41984558]
[26.69051170 230.71725464]
[41.63490677 232.00762939]
[54.86180878 239.08216858]
[64.23102570 250.79615784]
[68.22657013 265.25421143]
[66.20193481 280.11694336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[8 33]
[9 32]
[11 29]
[12 28]
[13 27]
[15 25]
[16 24]
[17 23]
[36 141]
[37 140]
[38 139]
[40 137]
[41 136]
[42 135]
[43 134]
[44 133]
[46 132]
[47 131]
[50 129]
[51 128]
[52 127]
[53 126]
[54 124]
[55 123]
[57 121]
[58 120]
[59 119]
[60 118]
[65 114]
[66 113]
[67 112]
[68 111]
[69 110]
[75 107]
[76 106]
[77 105]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
