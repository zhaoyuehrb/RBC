%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGAGAGGAGACUUCCGGCCACUGCGUUGUAGUCGGCCCGGCUGCAAAGCGUUUUUCUGCAGGCUGUUUUCCCAGGUUCCCUCGGCCUGUACCUCGCGCACUCCUCUUGCUCCAGGUCCUUCAGUCUCCGCUCGUCUCACCGUAGGCUGUGACGAC\
) } def
/len { sequence length } bind def

/coor [
[212.23690796 234.46209717]
[210.81018066 220.41653442]
[214.86671448 206.84873962]
[203.40786743 197.16914368]
[191.94900513 187.48953247]
[180.49015808 177.80993652]
[169.03131104 168.13034058]
[157.57244873 158.45072937]
[146.11360168 148.77113342]
[134.65473938 139.09153748]
[123.19589233 129.41192627]
[111.73703766 119.73233032]
[103.81007385 124.22129059]
[94.19306946 125.42437744]
[84.27719879 122.73129272]
[75.65806580 116.12620544]
[69.88211823 106.24739075]
[55.98176956 111.88480377]
[42.08142471 117.52222443]
[28.18108177 123.15963745]
[14.33710861 128.93409729]
[0.55085713 134.84504700]
[-13.17632675 140.89189148]
[-26.84310341 147.07406616]
[-40.50988007 153.25622559]
[-54.17665863 159.43840027]
[-67.84343719 165.62055969]
[-79.78279877 177.65750122]
[-94.65447235 169.51690674]
[-90.94889832 152.97286987]
[-74.02560425 151.95378113]
[-60.35882568 145.77162170]
[-46.69205093 139.58944702]
[-33.02527237 133.40728760]
[-19.35849571 127.22511292]
[-14.53460979 121.57293701]
[-5.36008739 121.05879211]
[8.42616367 115.14784241]
[13.36077881 109.59207916]
[22.54366875 109.25929260]
[36.44401169 103.62187958]
[50.34435654 97.98446655]
[64.24469757 92.34704590]
[49.57817841 95.49237823]
[36.05515671 89.00177765]
[29.33480644 75.59144592]
[32.22948074 60.87340164]
[43.52780914 51.00690079]
[58.50162125 50.12091827]
[70.88462067 58.58621979]
[75.49469757 72.86148071]
[73.42667389 58.00471878]
[71.35864258 43.14796066]
[69.29061890 28.29120445]
[56.04701233 23.70001602]
[46.12907028 13.88915348]
[41.43917847 0.82091630]
[42.84209824 -12.92571545]
[50.00613785 -24.66400719]
[61.47925949 -32.12458420]
[59.70516205 -47.01930237]
[57.93106461 -61.91401672]
[56.15696716 -76.80873108]
[54.38286972 -91.70345306]
[52.60877228 -106.59816742]
[50.83467484 -121.49288177]
[49.06057358 -136.38760376]
[47.28647614 -151.28231812]
[37.76676559 -139.69029236]
[23.05453873 -136.76618958]
[9.82556057 -143.83683777]
[4.08256197 -157.69389343]
[8.43146420 -172.04962158]
[20.89892578 -180.39002991]
[35.82775879 -178.93060303]
[46.44348145 -168.33447266]
[46.73983765 -183.33154297]
[47.03619766 -198.32861328]
[41.30397415 -214.28411865]
[55.04908752 -224.20924377]
[68.39136505 -213.74884033]
[62.03326797 -198.03225708]
[61.73691177 -183.03518677]
[61.44055557 -168.03811646]
[62.18119431 -153.05641174]
[63.95529175 -138.16169739]
[65.72939301 -123.26698303]
[67.50348663 -108.37226868]
[69.27758789 -93.47754669]
[71.05168152 -78.58283234]
[72.82578278 -63.68811417]
[74.59987640 -48.79339981]
[76.37397766 -33.89868164]
[91.35721588 -27.91333389]
[101.34709930 -15.12439919]
[103.55221558 1.04787076]
[97.27934265 16.21770287]
[84.14736938 26.22317505]
[86.21540070 41.07993317]
[88.28343201 55.93669128]
[90.35145569 70.79344940]
[119.45719147 81.48438263]
[121.41664124 108.27347565]
[132.87548828 117.95307922]
[144.33435059 127.63267517]
[155.79319763 137.31228638]
[167.25205994 146.99188232]
[178.71090698 156.67147827]
[190.16975403 166.35108948]
[201.62861633 176.03068542]
[213.08746338 185.71028137]
[224.54632568 195.38989258]
[239.31951904 188.63179016]
[255.50332642 188.97856140]
[269.87002563 196.31047058]
[279.57635498 209.11968994]
[282.72610474 224.82014465]
[278.74047852 240.26951599]
[290.38833618 249.72084045]
[302.03619385 259.17214966]
[312.83853149 257.41714478]
[322.61035156 261.83404541]
[328.19558716 270.72946167]
[327.93881226 281.00946045]
[339.20416260 290.91357422]
[350.46954346 300.81768799]
[361.73492432 310.72177124]
[373.00030518 320.62588501]
[384.26568604 330.52999878]
[399.73867798 333.83099365]
[404.18844604 348.04537964]
[415.45382690 357.94946289]
[429.97781372 352.95452881]
[445.05035400 355.90655518]
[456.61697388 366.01141357]
[461.56637573 380.55099487]
[458.56713867 395.61419678]
[448.42605591 407.14910889]
[433.87103271 412.05288696]
[418.81732178 409.00643921]
[407.31423950 398.82928467]
[402.45611572 384.25897217]
[405.54971313 369.21484375]
[394.28433228 359.31072998]
[379.61709595 356.71817017]
[374.36157227 341.79537964]
[363.09619141 331.89126587]
[351.83081055 321.98715210]
[340.56542969 312.08303833]
[329.30007935 302.17895508]
[318.03469849 292.27484131]
[298.87167358 289.93624878]
[292.58489990 270.82000732]
[280.93704224 261.36868286]
[269.28918457 251.91737366]
[257.01876831 258.44982910]
[243.14060974 259.80661011]
[229.75431824 255.74917603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[17 43]
[18 42]
[19 41]
[20 40]
[21 38]
[22 37]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[51 101]
[52 100]
[53 99]
[54 98]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[76 84]
[77 83]
[78 82]
[118 155]
[119 154]
[120 153]
[124 151]
[125 150]
[126 149]
[127 148]
[128 147]
[129 146]
[131 144]
[132 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
