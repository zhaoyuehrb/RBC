%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACAUUCUCUCUGAGCUGGCACUCAAGCACCGUGGGACCUUGGCUGGCUUCUGGGGAGCAAGAGAUCCAUUUAUGAAUACUUGAUUUCUGACUGCUGGGAAGCACGGCUGAUGCUCCGAAGGAGGGAAGACUGACCCGGUUUCUGGACUUCACCCAGCUG\
) } def
/len { sequence length } bind def

/coor [
[28.93279648 473.65380859]
[27.77361107 488.76779175]
[21.51222610 502.57250977]
[10.90472984 513.40106201]
[-2.76796722 519.94573975]
[-17.85482216 521.41632080]
[-32.53402328 517.63519287]
[-45.03298569 509.05899048]
[-53.84239960 496.72326660]
[-57.89848328 482.11764526]
[-56.71144867 467.00582886]
[-50.42463303 453.21264648]
[-39.79719925 442.40371704]
[-26.11246490 435.88421631]
[-11.02292633 434.44143677]
[-7.28130913 419.91558838]
[-3.53969193 405.38973999]
[0.20192517 390.86389160]
[3.94354224 376.33804321]
[7.68515968 361.81219482]
[-1.38426626 353.65963745]
[-6.13706827 342.35034180]
[-5.60794497 330.02194214]
[0.16365169 319.03335571]
[10.12927437 311.51345825]
[22.42143059 308.94879150]
[26.72347832 294.57894897]
[31.02552795 280.20910645]
[25.55624008 269.38507080]
[29.05978203 257.35604858]
[40.17557907 250.75059509]
[44.75547028 236.46687317]
[49.33536148 222.18315125]
[48.37835693 214.81727600]
[54.14502716 207.66839600]
[59.00103760 193.47616577]
[63.85704422 179.28395081]
[68.71305084 165.09172058]
[73.56906128 150.89950562]
[78.42507172 136.70727539]
[81.11346436 80.34839630]
[78.50874329 65.57627869]
[75.90402222 50.80416107]
[73.29929352 36.03204346]
[70.69457245 21.25992775]
[68.08985138 6.48781204]
[65.48513031 -8.28430367]
[62.73729706 -23.03046989]
[59.84661102 -37.74929810]
[56.95592880 -52.46812820]
[54.06524277 -67.18695831]
[51.17456055 -81.90579224]
[48.28387451 -96.62461853]
[38.03214645 -108.67504120]
[43.17171097 -122.65481567]
[40.28102875 -137.37364197]
[30.02929878 -149.42405701]
[35.16886520 -163.40383911]
[32.27817917 -178.12266541]
[19.44235229 -186.94758606]
[16.72046280 -201.91575623]
[25.21278191 -214.09837341]
[22.32209778 -228.81719971]
[19.43141556 -243.53602600]
[16.54073143 -258.25485229]
[13.65004730 -272.97369385]
[10.75936317 -287.69253540]
[7.86867905 -302.41134644]
[-7.08058071 -305.03509521]
[-20.07051849 -312.88531494]
[-29.34435463 -324.90032959]
[-33.64787674 -339.45520020]
[-32.39906693 -354.58148193]
[-25.76682091 -368.23352051]
[-14.64809322 -378.56494141]
[-0.54659981 -384.17852783]
[14.63054752 -384.31509399]
[28.83076286 -378.95614624]
[40.13358688 -368.82644653]
[47.01040268 -355.29595947]
[48.53117752 -340.19458008]
[44.49024200 -325.56463623]
[35.43409348 -313.38470459]
[22.58750916 -305.30203247]
[25.47819328 -290.58319092]
[28.36887741 -275.86437988]
[31.25955963 -261.14553833]
[34.15024567 -246.42671204]
[37.04092789 -231.70788574]
[39.93161392 -216.98905945]
[52.40061951 -208.92311096]
[55.54185867 -194.03730774]
[46.99700928 -181.01335144]
[49.88769531 -166.29452515]
[59.93266296 -155.29689026]
[54.99985886 -140.26432800]
[57.89054108 -125.54550171]
[67.93550873 -114.54786682]
[63.00270462 -99.51530457]
[65.89338684 -84.79647064]
[68.78407288 -70.07764435]
[71.67475891 -55.35881424]
[74.56543732 -40.63998413]
[77.45612335 -25.92115402]
[81.85258484 -19.93423653]
[80.25724030 -10.88902664]
[82.86196899 3.88308954]
[85.46669006 18.65520668]
[88.07141113 33.42732239]
[90.67613220 48.19944000]
[93.28086090 62.97155380]
[95.88558197 77.74366760]
[103.97798157 65.11382294]
[118.88341522 66.79548645]
[123.95835114 80.91091156]
[113.53493500 91.69896698]
[128.50955200 90.82679749]
[143.48417664 89.95462799]
[158.94494629 82.99755096]
[169.91011047 95.92819977]
[160.52024841 110.04439545]
[144.35635376 104.92924500]
[129.38172913 105.80142212]
[114.40710449 106.67359161]
[111.94573975 121.47026825]
[125.83159637 127.14326477]
[139.71745300 132.81626892]
[152.83706665 124.53039551]
[168.31913757 125.57209015]
[180.21049500 135.54080200]
[183.93867493 150.60334778]
[178.07012939 164.96786499]
[164.86140442 173.11093140]
[149.39155579 171.90133667]
[137.60902405 161.80422974]
[134.04446411 146.70211792]
[120.15859985 141.02912903]
[106.27273560 135.35612488]
[92.61729431 141.56329346]
[87.76128387 155.75550842]
[82.90527344 169.94773865]
[78.04927063 184.13995361]
[73.19326019 198.33218384]
[68.33724976 212.52439880]
[63.61907959 226.76304626]
[59.03918839 241.04675293]
[54.45929718 255.33047485]
[58.78937912 273.20486450]
[45.39537048 284.51113892]
[41.09332275 298.88098145]
[36.79127121 313.25082397]
[48.20459366 327.28704834]
[48.93940735 345.20623779]
[38.89066315 359.87139893]
[22.21100807 365.55380249]
[18.46939087 380.07965088]
[14.72777462 394.60549927]
[10.98615742 409.13134766]
[7.24454021 423.65719604]
[3.50292301 438.18304443]
[16.01766968 446.73623657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 160]
[16 159]
[17 158]
[18 157]
[19 156]
[20 155]
[26 151]
[27 150]
[28 149]
[31 147]
[32 146]
[33 145]
[35 144]
[36 143]
[37 142]
[38 141]
[39 140]
[40 139]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[55 97]
[56 96]
[58 94]
[59 93]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[116 124]
[117 123]
[118 122]
[125 138]
[126 137]
[127 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
