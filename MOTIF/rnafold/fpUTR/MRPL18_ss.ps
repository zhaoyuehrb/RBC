%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCGGUGGCGUCUGGCGUGGAGAGUUUGGGGAUCUACAGCAGCCAAAGGCUUGUCCCUGACUUUAUAUGGCUGCUCCUGGCGAGCGACUGAGUCGUCCGUGAGGAAAAAGAGGCGAGGCUUUUCCGAGAUCGUCUCAGCG\
) } def
/len { sequence length } bind def

/coor [
[94.11168671 168.05209351]
[93.53211975 153.06329346]
[86.13369751 154.29347229]
[79.45629883 167.72523499]
[72.77890778 181.15701294]
[66.10150909 194.58877563]
[59.42410660 208.02053833]
[64.69321442 222.92060852]
[57.80779648 237.14616394]
[42.85284805 242.25744629]
[28.70088196 235.22201538]
[23.74800110 220.21386719]
[30.93266678 206.13706970]
[45.99234009 201.34313965]
[52.66973877 187.91137695]
[59.34713745 174.47961426]
[66.02453613 161.04783630]
[72.70193481 147.61607361]
[63.00413513 136.17262268]
[48.65903091 140.55644226]
[34.31392288 144.94026184]
[19.96881676 149.32409668]
[5.62370968 153.70791626]
[2.84486890 168.75904846]
[-6.61940002 180.78761292]
[-20.59427643 187.02951050]
[-35.86843872 186.05043030]
[-48.93199158 178.07533264]
[-56.78302765 164.93684387]
[-57.61743927 149.65409851]
[-51.24348450 135.73895264]
[-39.12584686 126.38900757]
[-24.04907417 123.75281525]
[-9.47769928 128.43614197]
[1.23988509 139.36280823]
[15.58499146 134.97898865]
[29.93009758 130.59515381]
[44.27520370 126.21133423]
[58.62031174 121.82751465]
[61.05002594 85.51452637]
[86.75128174 66.17304230]
[78.64167023 53.55423737]
[70.53205872 40.93543243]
[62.42244720 28.31663132]
[54.31283569 15.69782829]
[46.20322037 3.07902527]
[38.09360886 -9.53977776]
[24.11712074 -6.59947300]
[10.00786018 -8.61495399]
[-2.53360677 -15.32260513]
[-12.00276375 -25.89451981]
[-17.27162552 -39.04064560]
[-17.72307587 -53.16617584]
[-13.32308865 -66.56502533]
[-4.62235355 -77.62590027]
[-12.45280647 -90.41980743]
[-20.28325844 -103.21371460]
[-33.70885086 -113.56696320]
[-27.47678185 -129.33393860]
[-10.60077286 -127.71015930]
[-7.48935413 -111.04416656]
[0.34109890 -98.25025940]
[8.17155170 -85.45635223]
[23.74835014 -88.16977692]
[39.21478271 -84.70486450]
[52.20795441 -75.56082153]
[60.73128510 -62.10676575]
[63.46130753 -46.37681198]
[59.95308304 -30.76254082]
[50.71241379 -17.64938927]
[58.82202530 -5.03058720]
[66.93164062 7.58821583]
[75.04125214 20.20701981]
[83.15086365 32.82582092]
[91.26047516 45.44462585]
[99.37008667 58.06342697]
[114.16693115 60.52379227]
[125.92369843 51.20829773]
[137.68046570 41.89280319]
[149.43722534 32.57730865]
[155.44847107 17.94256973]
[170.22903442 16.10289001]
[181.98579407 6.78739500]
[193.74255371 -2.52810001]
[199.75379944 -17.16283798]
[214.53436279 -19.00251770]
[226.29112244 -28.31801224]
[238.04789734 -37.63350677]
[249.80465698 -46.94900131]
[261.56143188 -56.26449585]
[270.22091675 -70.84014893]
[286.62411499 -66.55401611]
[287.04635620 -49.60532761]
[270.87692261 -44.50773239]
[259.12014771 -35.19223785]
[247.36338806 -25.87674141]
[235.60661316 -16.56124687]
[223.84985352 -7.24575186]
[218.67953491 6.72267962]
[203.05805969 9.22866631]
[191.30128479 18.54416084]
[179.54452515 27.85965538]
[174.37420654 41.82808685]
[158.75273132 44.33407593]
[146.99595642 53.64957047]
[135.23919678 62.96506500]
[123.48242188 72.28055573]
[133.72615051 81.59796143]
[140.16372681 94.70806885]
[141.40621948 110.02201080]
[136.73568726 125.45455933]
[126.27557373 138.70805359]
[136.94027710 149.25624084]
[147.60496521 159.80442810]
[158.26966858 170.35261536]
[168.93435669 180.90080261]
[179.59906006 191.44898987]
[190.26374817 201.99717712]
[203.19224548 202.72009277]
[211.86141968 211.79028320]
[211.98980713 223.93458557]
[222.42021179 234.71450806]
[232.85061646 245.49441528]
[248.75894165 249.47651672]
[253.00372314 265.31677246]
[241.21829224 276.72009277]
[225.52648926 271.95571899]
[222.07069397 255.92481995]
[211.64028931 245.14491272]
[201.20988464 234.36499023]
[184.12489319 230.50340271]
[179.71556091 212.66186523]
[169.05087280 202.11367798]
[158.38616943 191.56549072]
[147.72148132 181.01730347]
[137.05677795 170.46911621]
[126.39208221 159.92092896]
[115.72738647 149.37274170]
[108.32896423 150.60292053]
[112.63105011 164.97276306]
[118.05806732 178.95658875]
[107.15286255 189.25593567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[55 63]
[56 62]
[57 61]
[77 107]
[78 106]
[79 105]
[80 104]
[82 102]
[83 101]
[84 100]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[112 138]
[113 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
