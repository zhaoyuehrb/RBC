%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUGCCUAGCAACCGGUGGUGCCAAACACUGGAGCUCAGAGCGGGGGGCGCGGAGAGCGAAGCGGGAAAGGAGGUGGUGUCUGUGAACAGGCCUAGGGGUUUCUGACCCUUCUGGUUUCUGUGCC\
) } def
/len { sequence length } bind def

/coor [
[-43.20440674 184.09320068]
[-54.23475647 188.20826721]
[-65.75482178 186.45707703]
[-74.87341309 179.39767456]
[-88.99657440 184.45101929]
[-103.11973572 189.50436401]
[-117.24288940 194.55772400]
[-131.30297852 199.78399658]
[-145.29786682 205.18241882]
[-159.22546387 210.75218201]
[-173.08364868 216.49243164]
[-186.94184875 222.23268127]
[-192.63273621 233.88420105]
[-204.37709045 238.35009766]
[-215.62733459 233.72843933]
[-229.62222290 239.12687683]
[-243.61711121 244.52529907]
[-257.61199951 249.92372131]
[-271.60690308 255.32214355]
[-285.60177612 260.72058105]
[-289.46310425 275.74954224]
[-301.44219971 285.61264038]
[-316.93286133 286.51733398]
[-329.97863770 278.11572266]
[-335.56317139 263.63839722]
[-331.53906250 248.65220642]
[-319.45367432 238.91961670]
[-303.95410156 238.18304443]
[-291.00021362 246.72567749]
[-277.00531006 241.32725525]
[-263.01043701 235.92883301]
[-249.01553345 230.53039551]
[-235.02064514 225.13197327]
[-221.02575684 219.73355103]
[-210.82267761 205.51094055]
[-192.68209839 208.37449646]
[-178.82389832 202.63424683]
[-164.96571350 196.89398193]
[-159.93705750 191.36950684]
[-150.69628906 191.18753052]
[-136.70140076 185.78910828]
[-131.53869629 180.38969421]
[-122.29624176 180.43455505]
[-108.17308044 175.38121033]
[-94.04991913 170.32786560]
[-79.92675781 165.27452087]
[-73.20502472 148.33000183]
[-55.97770691 141.46293640]
[-38.86842728 149.40324402]
[-25.01023293 143.66299438]
[-11.15203953 137.92274475]
[2.70615315 132.18249512]
[16.56434631 126.44223785]
[30.42253876 120.70198822]
[44.28073120 114.96173859]
[58.13892365 109.22148132]
[71.99711609 103.48123169]
[85.85530853 97.74098206]
[94.51846313 86.76640320]
[108.40443420 88.40082550]
[122.26263428 82.66057587]
[132.05139160 70.23114777]
[146.77079773 72.50896454]
[160.62898254 66.76870728]
[167.44706726 60.52861786]
[174.89840698 61.06225204]
[188.89329529 55.66382599]
[202.88818359 50.26540375]
[209.35441589 36.09410477]
[223.62413025 30.81869698]
[237.09445190 37.07059097]
[251.08934021 31.67216682]
[265.08422852 26.27374077]
[279.07913208 20.87531471]
[286.09298706 2.15421820]
[304.27062988 -5.41611385]
[321.95098877 2.54535675]
[335.51083374 -3.86796975]
[349.07067871 -10.28129578]
[355.57434082 -16.84841919]
[363.04290771 -16.68104553]
[376.75604248 -22.75966644]
[390.46917725 -28.83828545]
[404.18234253 -34.91690445]
[417.89547729 -40.99552536]
[427.11386108 -54.55846786]
[443.44686890 -53.08689117]
[450.09246826 -38.09463120]
[440.21426392 -25.00443840]
[423.97409058 -27.28237915]
[410.26095581 -21.20376015]
[396.54782104 -15.12513924]
[382.83465576 -9.04652023]
[369.12152100 -2.96790004]
[355.48400879 3.27854323]
[341.92416382 9.69186974]
[328.36431885 16.10519600]
[327.61026001 26.52385902]
[322.51110840 35.73371887]
[313.94995117 41.99863434]
[303.46957397 44.10501099]
[292.99447632 41.59638596]
[284.47753906 34.87020874]
[270.48266602 40.26863480]
[256.48776245 45.66705704]
[242.49287415 51.06548309]
[236.71054077 64.74394226]
[222.59463501 70.41807556]
[208.28660583 64.26029205]
[194.29171753 69.65872192]
[180.29682922 75.05714417]
[166.36923218 80.62689972]
[152.51104736 86.36715698]
[143.71351624 98.38600159]
[128.00288391 96.51876831]
[114.14469147 102.25901794]
[105.48153687 113.23359680]
[91.59556580 111.59917450]
[77.73736572 117.33942413]
[63.87917709 123.07967377]
[50.02098465 128.81993103]
[36.16279221 134.56018066]
[22.30459785 140.30043030]
[8.44640446 146.04067993]
[-5.41178846 151.78092957]
[-19.26998138 157.52117920]
[-33.12817383 163.26144409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[7 43]
[8 41]
[9 40]
[10 38]
[11 37]
[12 36]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[49 127]
[50 126]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
[60 116]
[61 115]
[63 113]
[64 112]
[66 111]
[67 110]
[68 109]
[71 106]
[72 105]
[73 104]
[74 103]
[77 97]
[78 96]
[79 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
