%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUCCUCUUCGCCCGGGUGGCGUUGGGCCCGCGCGGGCGCUCGGGUGACUGCAGCUGCUCAGCUCCCCUCCCCCGCCCCGCGCCGCGCGGCCGCCCGUCGCUUCGCACAGGGCUGGAUGGUUGUAUUGGGCAGGGUGGCUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[123.27839661 244.85333252]
[122.33023071 229.88333130]
[121.22429657 214.92414856]
[119.96072388 199.97746277]
[118.69715118 185.03077698]
[109.91522980 173.00051880]
[116.46253204 158.59762573]
[115.19895935 143.65093994]
[113.93538666 128.70425415]
[107.49354553 124.86333466]
[99.81148529 137.74688721]
[86.92806244 130.06460571]
[94.60987091 117.18148041]
[88.16802979 113.34055328]
[74.41809082 119.33548737]
[60.66815186 125.33041382]
[46.91821289 131.32534790]
[33.16827393 137.32026672]
[23.61047554 149.92817688]
[8.85155773 147.92228699]
[-4.89838171 153.91720581]
[-18.64832115 159.91213989]
[-32.33429718 166.05169678]
[-45.95478821 172.33517456]
[-52.83039474 186.83020020]
[-68.48218536 190.35169983]
[-80.90345001 180.19828796]
[-80.56565094 164.15878296]
[-67.72792816 154.53733826]
[-52.23827362 158.71469116]
[-38.61778259 152.43119812]
[-33.82919693 146.73475647]
[-24.64324951 146.16220093]
[-10.89331055 140.16726685]
[2.85662818 134.17234802]
[11.43093777 121.99324036]
[27.17334366 123.57033539]
[40.92328262 117.57540131]
[54.67322159 111.58047485]
[68.42316437 105.58554840]
[82.17310333 99.59061432]
[83.12126923 84.62061310]
[70.23759460 76.93876648]
[57.35391235 69.25691223]
[44.38996887 61.71131134]
[31.34719658 54.30279541]
[18.30442619 46.89427567]
[1.91841519 47.55054092]
[-6.61301184 33.54529953]
[1.48654532 19.28594398]
[17.88495636 19.44127846]
[25.71294212 33.85150528]
[38.75571442 41.26002121]
[51.79848480 48.66854095]
[59.21818924 49.24124527]
[65.03576660 56.37323380]
[77.91944122 64.05508423]
[90.80312347 71.73693848]
[105.78978729 71.10458374]
[117.98056793 62.36474609]
[130.17134094 53.62490082]
[142.36213684 44.88505936]
[154.55291748 36.14521408]
[166.74369812 27.40537262]
[178.74749756 18.41045380]
[190.55900574 9.16445923]
[192.61019897 -6.27673101]
[204.72045898 -15.48522472]
[219.42863464 -13.43456364]
[231.24012756 -22.68055916]
[237.33758545 -37.27959061]
[252.12872314 -39.03206635]
[263.94024658 -48.27806091]
[275.75173950 -57.52405548]
[276.45333862 -68.46376801]
[282.95736694 -77.01260376]
[292.89712524 -80.46220398]
[302.87176514 -77.89024353]
[315.06256104 -86.63008118]
[327.25332642 -95.36992645]
[339.44412231 -104.10977173]
[346.84271240 -122.81343842]
[366.10031128 -124.04019928]
[377.91183472 -133.28619385]
[389.72332764 -142.53219604]
[391.77453613 -157.97337341]
[403.88476562 -167.18186951]
[418.59295654 -165.13121033]
[430.40444946 -174.37721252]
[442.21594238 -183.62319946]
[453.92932129 -192.99319458]
[465.54327393 -202.48616028]
[477.15722656 -211.97912598]
[482.45495605 -227.49897766]
[498.59457397 -230.40502930]
[508.97299194 -217.70777893]
[502.91381836 -202.46907043]
[486.65017700 -200.36517334]
[475.03622437 -190.87222290]
[463.42230225 -181.37925720]
[460.21212769 -174.66548157]
[451.46194458 -171.81170654]
[439.65045166 -162.56570435]
[427.83895874 -153.31971741]
[426.29815674 -138.54942322]
[414.45132446 -129.00440979]
[398.96932983 -130.72068787]
[387.15780640 -121.47469330]
[375.34631348 -112.22869873]
[375.01376343 -101.93316650]
[368.91177368 -93.36206055]
[358.88049316 -89.52034760]
[348.18395996 -91.91899109]
[335.99316406 -83.17914581]
[323.80239868 -74.43930054]
[311.61160278 -65.69946289]
[305.02642822 -47.56122971]
[284.99774170 -45.71255112]
[273.18621826 -36.46655655]
[261.37472534 -27.22056389]
[256.12210083 -13.28286839]
[240.48612976 -10.86905575]
[228.67462158 -1.62306154]
[227.13381958 13.14723015]
[215.28698730 22.69224358]
[199.80499268 20.97596169]
[187.99349976 30.22195625]
[186.53448486 34.83431625]
[182.12297058 38.55108643]
[175.48353577 39.59615326]
[163.29275513 48.33599472]
[151.10197449 57.07584000]
[138.91119385 65.81568146]
[126.72041321 74.55552673]
[114.52963257 83.29537201]
[128.88206482 127.44068146]
[130.14564514 142.38737488]
[131.40921021 157.33406067]
[140.28150940 170.43339539]
[133.64382935 183.76721191]
[134.90740967 198.71389771]
[136.17097473 213.66058350]
[140.03483582 222.01402283]
[137.30023193 228.93515015]
[138.24839783 243.90515137]
[147.77491760 257.25347900]
[140.73287964 272.06365967]
[124.36653137 273.10028076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 142]
[4 141]
[5 140]
[7 138]
[8 137]
[9 136]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[42 58]
[43 57]
[44 56]
[45 54]
[46 53]
[47 52]
[59 135]
[60 134]
[61 133]
[62 132]
[63 131]
[64 130]
[65 127]
[66 126]
[69 123]
[70 122]
[72 120]
[73 119]
[74 118]
[78 116]
[79 115]
[80 114]
[81 113]
[83 109]
[84 108]
[85 107]
[88 104]
[89 103]
[90 102]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
