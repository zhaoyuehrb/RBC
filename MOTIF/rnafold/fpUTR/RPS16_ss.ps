%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCGUCGCGACGCAGUGCUCAAGGCGCCUGCGCAGACCCUGAAAAGCGGCCAGGGUGGCCCCUAGCUUUCCUUUUCCGGUUGCGGCGCCGCGCGGUGAGGUUGUCUAGUCCACGCUCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[207.42495728 266.20739746]
[198.97515869 253.81379700]
[190.52534485 241.42022705]
[181.92170715 229.13293457]
[173.16554260 216.95387268]
[164.40939331 204.77479553]
[157.87879944 201.14067078]
[155.59123230 192.18116760]
[147.14143372 179.78758240]
[138.69163513 167.39399719]
[130.24183655 155.00042725]
[116.67945099 148.84323120]
[115.29839325 133.08241272]
[106.84859467 120.68883514]
[98.39878845 108.29525757]
[93.62676239 116.09188843]
[86.02226257 122.12165833]
[72.34967041 128.29096985]
[58.67708588 134.46026611]
[45.00449753 140.62957764]
[31.33190918 146.79888916]
[19.38122940 158.82458496]
[4.51721573 150.66999817]
[8.23835945 134.12945557]
[25.16260338 133.12629700]
[38.83518982 126.95698547]
[52.50777817 120.78768158]
[66.18036652 114.61837769]
[79.85295105 108.44906616]
[65.96221924 102.78800964]
[64.90564728 87.82527161]
[77.86300659 80.26836395]
[90.36650085 88.55647278]
[87.76177216 73.78435516]
[85.15705109 59.01224136]
[82.55233002 44.24012375]
[79.94760895 29.46800804]
[75.32933807 21.45693398]
[77.46689606 14.29547977]
[75.23126221 -0.53698295]
[65.29045105 -8.86743259]
[63.78486633 -21.34442520]
[70.98348999 -31.15117264]
[69.11833191 -46.03475952]
[67.25317383 -60.91834641]
[65.38802338 -75.80193329]
[63.52286530 -90.68552399]
[61.65771103 -105.56911469]
[48.73540115 -120.94592285]
[56.73985291 -138.47651672]
[54.13513184 -153.24864197]
[51.53040695 -168.02075195]
[41.51427841 -180.26770020]
[46.92396545 -194.14518738]
[44.31924438 -208.91729736]
[41.71451950 -223.68942261]
[39.10979843 -238.46153259]
[28.15987206 -250.66937256]
[33.51368713 -266.16998291]
[49.66369247 -269.01763916]
[59.99615097 -256.28295898]
[53.88191223 -241.06625366]
[56.48663712 -226.29414368]
[59.09135818 -211.52201843]
[61.69608307 -196.74990845]
[71.52590179 -185.55955505]
[66.30252075 -170.62547302]
[68.90724945 -155.85336304]
[71.51197052 -141.08123779]
[80.48231506 -135.91395569]
[85.17230225 -126.43790436]
[83.78391266 -115.73345947]
[76.54129791 -107.43426514]
[78.40645599 -92.55068207]
[80.27160645 -77.66709137]
[82.13676453 -62.78350449]
[84.00192261 -47.89991379]
[85.86707306 -33.01632690]
[97.21063232 -19.68796921]
[90.06372070 -2.77261686]
[92.29935455 12.05984592]
[94.71972656 26.86328506]
[97.32444763 41.63540268]
[99.92916870 56.40751648]
[102.53388977 71.17963409]
[105.13861084 85.95175171]
[110.79237366 99.84545135]
[119.24217224 112.23903656]
[127.69197083 124.63261414]
[141.85874939 131.67628479]
[142.63542175 146.55061340]
[151.08522034 158.94419861]
[159.53501892 171.33778381]
[167.98481750 183.73136902]
[176.58847046 196.01864624]
[185.34461975 208.19772339]
[194.10076904 220.37678528]
[201.73756409 225.59072876]
[202.91893005 232.97042847]
[211.36872864 245.36399841]
[219.81852722 257.75759888]
[230.38743591 255.05023193]
[241.26930237 255.44177246]
[251.57601929 258.88827515]
[260.46975708 265.09686279]
[267.23117065 273.55078125]
[271.31753540 283.55215454]
[272.40628052 294.27978516]
[270.42044067 304.85650635]
[265.53402710 314.42083740]
[258.15667725 322.19723511]
[264.99984741 335.54531860]
[271.84298706 348.89340210]
[286.96084595 353.50051880]
[294.31924438 367.48730469]
[289.55252075 382.55563354]
[275.48873901 389.76571655]
[260.47164917 384.83993530]
[253.41065979 370.70071411]
[258.49490356 355.73657227]
[251.65176392 342.38848877]
[244.80859375 329.04040527]
[225.37490845 329.38699341]
[208.30433655 319.93283081]
[198.20843506 303.14398193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 97]
[5 96]
[6 95]
[8 94]
[9 93]
[10 92]
[11 91]
[13 89]
[14 88]
[15 87]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[39 81]
[40 80]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[50 69]
[51 68]
[52 67]
[54 65]
[55 64]
[56 63]
[57 62]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
