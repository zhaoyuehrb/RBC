%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCCCGGCCCGCCCUGCGCCGGCGGCGGCGGCCCCAGUCUCCGCGCUGCUGAGGCGCGCCCGGCCGCUCCCACGGCCUCCCCUCCGCCCUGCGGUCCCGCCGCCUCCGGGGCCUCCUGGGACCCUGGCCCUCGCCGGGCAGGACGCCGCCAGCGCUGAAGGCGCAGCCCGGAGGCCGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[108.93786621 535.41986084]
[116.35912323 522.03393555]
[129.15744019 513.63977051]
[127.63991547 498.71673584]
[126.12239075 483.79370117]
[124.60486603 468.87066650]
[123.08734131 453.94763184]
[114.10214233 442.06842041]
[120.40361023 427.55627441]
[118.88608551 412.63323975]
[117.36856079 397.71020508]
[106.34737396 384.06564331]
[114.00417328 367.32995605]
[112.23481750 352.43469238]
[110.46546936 337.53939819]
[108.69612122 322.64413452]
[93.66398621 312.22430420]
[90.95344543 293.81359863]
[102.74164581 279.00454712]
[100.47023010 264.17752075]
[98.19881439 249.35050964]
[95.92739868 234.52348328]
[86.35205841 223.11460876]
[91.91040802 208.30194092]
[89.63899231 193.47491455]
[87.36757660 178.64788818]
[85.09616089 163.82086182]
[82.82473755 148.99383545]
[80.55332184 134.16680908]
[69.17195129 124.39622498]
[54.17195129 124.39622498]
[39.17195129 124.39622498]
[24.17195129 124.39622498]
[9.17248726 124.52290344]
[-5.82537317 124.77624512]
[-20.82323456 125.02958679]
[-34.49075699 132.99885559]
[-47.34689331 125.47762299]
[-62.34475327 125.73096466]
[-77.34261322 125.98430634]
[-92.34047699 126.23764801]
[-100.37313843 139.40882874]
[-114.26148224 146.12577820]
[-129.57379150 144.24513245]
[-141.42396545 134.36703491]
[-146.03063965 119.64350891]
[-141.92385864 104.77280426]
[-130.41407776 94.50009918]
[-115.17402649 92.10337830]
[-101.06674194 98.34742737]
[-92.59381866 111.23979187]
[-77.59595490 110.98645020]
[-62.59809875 110.73310089]
[-47.60023499 110.47975922]
[-35.00545883 102.52861023]
[-21.07657623 110.03173065]
[-6.07871532 109.77838898]
[8.91914463 109.52503967]
[15.56849194 106.26131439]
[24.17195129 109.39622498]
[39.17195129 109.39622498]
[54.17195129 109.39622498]
[69.17195129 109.39622498]
[67.61976624 92.74580383]
[74.71318817 77.06644440]
[65.13622284 65.52167511]
[55.55925369 53.97690201]
[45.98228455 42.43213654]
[36.40531921 30.88736725]
[20.64790344 29.67104912]
[10.42938614 17.61462212]
[11.81223106 1.87094736]
[23.97602272 -8.21953106]
[39.70419693 -6.67031050]
[49.66550827 5.59948254]
[47.95008469 21.31039810]
[57.52705383 32.85516739]
[67.10401917 44.39993668]
[76.68099213 55.94470596]
[86.25795746 67.48947144]
[100.99980927 64.71858215]
[105.73133850 50.48437500]
[110.46286774 36.25016785]
[115.19439697 22.01596451]
[104.09140778 9.77778149]
[100.68838501 -6.29633045]
[105.82028198 -21.80590820]
[117.99868011 -32.55362701]
[133.84185791 -35.68115234]
[138.33230591 -49.99324036]
[142.82275391 -64.30532837]
[147.31320190 -78.61741638]
[151.80364990 -92.92950439]
[155.80815125 -107.38509369]
[159.32215881 -121.96768188]
[162.83615112 -136.55026245]
[166.35014343 -151.13285828]
[169.86415100 -165.71543884]
[167.69664001 -182.53025818]
[183.25430298 -189.26786804]
[194.03540039 -176.18334961]
[184.44673157 -162.20144653]
[180.93273926 -147.61885071]
[177.41873169 -133.03627014]
[173.90473938 -118.45368195]
[170.39074707 -103.87109375]
[171.75752258 -101.39987946]
[172.21678162 -98.23262024]
[171.49630737 -94.71627808]
[169.45585632 -91.29058838]
[166.11573792 -88.43906403]
[161.62528992 -74.12696838]
[157.13484192 -59.81488419]
[152.64439392 -45.50279617]
[148.15394592 -31.19070625]
[158.04449463 -21.75604057]
[162.92419434 -8.91708374]
[161.78594971 4.83710766]
[154.79533386 16.81361008]
[143.26934814 24.64287949]
[129.42860413 26.74749374]
[124.69707489 40.98170090]
[119.96554565 55.21590424]
[115.23401642 69.45011139]
[122.20603943 78.83938599]
[124.90721130 89.04485321]
[139.77049255 87.02418518]
[154.63375854 85.00350952]
[169.49702454 82.98284149]
[177.59976196 78.71751404]
[184.62815857 81.05575562]
[199.52343750 79.28639984]
[214.41871643 77.51705170]
[225.43516541 65.85440063]
[241.40934753 67.33938599]
[250.08723450 80.83285522]
[244.81190491 95.98377991]
[229.63012695 101.16965485]
[216.18807983 92.41233063]
[201.29278564 94.18168640]
[186.39750671 95.95103455]
[171.51770020 97.84611511]
[156.65443420 99.86678314]
[141.79115295 101.88745880]
[126.92788696 103.90812683]
[122.68138123 117.88204956]
[111.32414246 128.37959290]
[95.38034821 131.89540100]
[97.65176392 146.72242737]
[99.92317963 161.54945374]
[102.19459534 176.37648010]
[104.46601868 191.20349121]
[106.73743439 206.03051758]
[116.47523499 218.49990845]
[110.75442505 232.25205994]
[113.02584076 247.07908630]
[115.29725647 261.90609741]
[117.56867218 276.73312378]
[128.36000061 281.78332520]
[135.29426575 291.32415771]
[136.73683167 302.90924072]
[132.44322205 313.63641357]
[123.59140015 320.87478638]
[125.36074829 335.77005005]
[127.13010406 350.66534424]
[128.89945984 365.56060791]
[138.53923035 374.15170288]
[139.69566345 386.60946655]
[132.29159546 396.19268799]
[133.80912781 411.11572266]
[135.32664490 426.03875732]
[144.42039490 438.98535156]
[138.01039124 452.43011475]
[139.52790833 467.35314941]
[141.04544067 482.27618408]
[142.56295776 497.19921875]
[144.08049011 512.12225342]
[158.30654907 517.76831055]
[168.27046204 529.38635254]
[171.68260193 544.30664062]
[167.75886536 559.10064697]
[157.40090942 570.36883545]
[142.98890686 575.52178955]
[127.83464050 573.37542725]
[115.42044830 564.42297363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 177]
[4 176]
[5 175]
[6 174]
[7 173]
[9 171]
[10 170]
[11 169]
[13 166]
[14 165]
[15 164]
[16 163]
[19 158]
[20 157]
[21 156]
[22 155]
[24 153]
[25 152]
[26 151]
[27 150]
[28 149]
[29 148]
[30 63]
[31 62]
[32 61]
[33 60]
[34 58]
[35 57]
[36 56]
[38 54]
[39 53]
[40 52]
[41 51]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
[81 124]
[82 123]
[83 122]
[84 121]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
[126 145]
[127 144]
[128 143]
[129 142]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
