%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCUAAAAUCUCCUAGAACCGAUCCCGCGGCCCCGCCCCUCCCGCGGCCCCGCCCCUCCCGCGGCCCGUCAGCCUCUGCCGCGGAGCUGCGUCCGCCACUC\
) } def
/len { sequence length } bind def

/coor [
[132.17565918 190.04924011]
[123.41837311 192.71308899]
[114.44651031 194.52743530]
[105.34228516 195.47563171]
[96.18910217 195.54901123]
[87.07083893 194.74690247]
[78.07104492 193.07662964]
[69.27217865 190.55351257]
[60.75487137 187.20066833]
[52.59715652 183.04882812]
[44.87378693 178.13601685]
[37.65552902 172.50727844]
[31.00852203 166.21414185]
[24.99367142 159.31431580]
[19.66609001 151.87100220]
[15.07459450 143.95239258]
[11.26125526 135.63105774]
[8.26101398 126.98325348]
[6.10135984 118.08819580]
[4.80208254 109.02740479]
[4.37508678 99.88389587]
[4.82428503 90.74144745]
[6.14556122 81.68383789]
[8.32680893 72.79405212]
[11.34804249 64.15354919]
[15.18157768 55.84150314]
[19.79228783 47.93407440]
[25.13792801 40.50371552]
[31.16951561 33.61851120]
[37.83178711 27.34154701]
[45.06369019 21.73034096]
[37.43572617 8.81468678]
[29.80775833 -4.10096741]
[22.17979050 -17.01662254]
[7.13756561 -21.06250763]
[-0.41428909 -34.26948166]
[3.53554559 -48.58501053]
[-4.09242105 -61.50066757]
[-11.72038746 -74.41632080]
[-19.34835434 -87.33197784]
[-34.80306625 -89.71648407]
[-45.07039261 -101.51123047]
[-45.30241394 -117.14709473]
[-35.38957977 -129.24130249]
[-20.01242447 -132.08332825]
[-6.43157291 -124.33126068]
[-1.05948651 -109.64539337]
[-6.43270063 -94.95993805]
[1.19526637 -82.04428864]
[8.82323265 -69.12863159]
[16.45120049 -56.21297836]
[30.89475822 -52.76055908]
[38.81459045 -39.77091217]
[35.09544373 -24.64458847]
[42.72341156 -11.72893429]
[50.35137939 1.18671989]
[57.97934723 14.10237408]
[83.18263245 5.86544895]
[109.67893219 4.86611652]
[135.43106079 11.18121052]
[158.45906067 24.32519150]
[176.99238586 43.28747559]
[189.60610962 66.61013794]
[195.33041382 92.50000000]
[210.33041382 92.50000000]
[225.33041382 92.50000000]
[240.33041382 92.50000000]
[255.33041382 92.50000000]
[270.33041382 92.50000000]
[285.32876587 92.27772522]
[300.32217407 91.83322906]
[315.31558228 91.38872528]
[330.30899048 90.94422913]
[339.79846191 82.05402374]
[352.39871216 82.08076477]
[361.26382446 90.45835876]
[376.26382446 90.45835876]
[390.18762207 81.79465485]
[404.52304077 89.75878906]
[404.52304077 106.15793610]
[390.18762207 114.12206268]
[376.26382446 105.45835876]
[361.26382446 105.45835876]
[346.66018677 115.06455231]
[330.75350952 105.93763733]
[315.76010132 106.38214111]
[300.76669312 106.82663727]
[285.77325439 107.27114105]
[279.07327271 110.66989136]
[270.33041382 107.50000000]
[255.33041382 107.50000000]
[240.33041382 107.50000000]
[225.33041382 107.50000000]
[210.33041382 107.50000000]
[195.33041382 107.50000000]
[194.17657471 116.58045959]
[192.15980530 125.50899506]
[189.29858398 134.20379639]
[185.61915588 142.58518982]
[181.15519714 150.57638550]
[175.94763184 158.10417175]
[170.04417419 165.09954834]
[163.49891663 171.49842834]
[156.37182617 177.24217224]
[148.72821045 182.27818298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 57]
[32 56]
[33 55]
[34 54]
[37 51]
[38 50]
[39 49]
[40 48]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 88]
[71 87]
[72 86]
[73 85]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
