%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACCUGCGAGCUGGGGCGCGGCCUCGGGGAGGGGCGGGCGGGACAGACCCAGCCGCCCCGGCUCCCCCGCCGUCCGCGUCUGCGCCGGCCCCGGGGCCUGGUCGGCGGCGGCGGGGCCGGUCGAUGGCCCGGGCGGCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[278.93115234 176.85153198]
[265.77774048 184.06176758]
[250.87846375 185.79714966]
[236.42001343 181.80296326]
[224.52439880 172.66545105]
[216.93745422 159.72566223]
[214.77268982 144.88269043]
[218.34780884 130.31495667]
[227.13812256 118.16051483]
[239.85250854 110.20357513]
[224.86001587 109.72924805]
[209.86752319 109.25492859]
[194.87501526 108.78060913]
[179.88252258 108.30628204]
[164.89001465 107.83196259]
[149.89752197 107.35763550]
[134.90502930 106.88331604]
[119.91252136 106.40899658]
[104.92002869 105.93466949]
[107.64244843 115.81974030]
[105.66078949 126.83870697]
[98.72164154 137.26742554]
[87.13092804 145.35926819]
[72.82649231 149.87403870]
[58.52206039 154.38880920]
[44.21762848 158.90359497]
[29.91319656 163.41836548]
[21.26370049 176.93005371]
[5.29268122 178.44863892]
[-5.74826431 166.80917358]
[-3.38946605 150.94047546]
[10.55960751 143.01564026]
[25.39842033 149.11393738]
[39.70285416 144.59915161]
[54.00728607 140.08438110]
[68.31172180 135.56961060]
[82.61614990 131.05482483]
[83.09024048 123.56983185]
[84.51248932 101.11482239]
[70.89199829 94.83133698]
[57.27150726 88.54785156]
[43.58553314 82.40830231]
[29.83559418 76.41337585]
[16.08565521 70.41844177]
[0.68751609 74.92143250]
[-12.35020542 65.57277679]
[-13.02608585 49.54396439]
[-0.82164735 39.13093185]
[14.90090942 42.32166672]
[22.08058357 56.66850662]
[35.83052444 62.66343689]
[49.58046341 68.65836334]
[57.01923752 68.44713593]
[63.55499649 74.92736053]
[77.17548370 81.21084595]
[90.79598236 87.49433136]
[105.39434814 90.94216919]
[120.38684845 91.41649628]
[135.37934875 91.89081573]
[150.37184143 92.36514282]
[165.36434937 92.83946228]
[180.35684204 93.31378174]
[195.34933472 93.78810883]
[210.34184265 94.26242828]
[225.33433533 94.73675537]
[240.32684326 95.21107483]
[255.22608948 93.47549438]
[269.70812988 89.56776428]
[284.14819336 85.50756836]
[298.54461670 81.29537964]
[312.94104004 77.08318329]
[327.33749390 72.87099457]
[341.73391724 68.65879822]
[356.13037109 64.44660187]
[370.52679443 60.23441315]
[384.92324829 56.02222061]
[399.31967163 51.81002808]
[413.71612549 47.59783554]
[424.78826904 36.29659653]
[439.17617798 40.14858627]
[453.57260132 35.93639374]
[467.96905518 31.72420120]
[475.59487915 18.14169121]
[490.25491333 14.07501221]
[503.15676880 21.42877579]
[517.55322266 17.21658325]
[531.90441895 12.85285568]
[546.20886230 8.33807945]
[560.51330566 3.82330322]
[574.81774902 -0.69147283]
[589.12219238 -5.20624876]
[603.42657471 -9.72102547]
[617.73101807 -14.23580074]
[632.03546143 -18.75057793]
[646.33990479 -23.26535416]
[653.67767334 -37.00561905]
[668.24871826 -41.38047028]
[681.30273438 -34.30035019]
[695.60717773 -38.81512833]
[709.91162109 -43.32990265]
[714.70300293 -58.08869171]
[727.27410889 -67.18521881]
[742.79107666 -67.12168884]
[755.28729248 -57.92251968]
[759.95770264 -43.12498856]
[755.00640869 -28.41904640]
[742.33740234 -19.45942688]
[726.82202148 -19.69128609]
[714.42639160 -29.02547073]
[700.12194824 -24.51069450]
[685.81750488 -19.99591827]
[679.19305420 -6.70486212]
[664.75061035 -1.92246485]
[650.85467529 -8.96092033]
[636.55023193 -4.44614458]
[622.24578857 0.06863160]
[607.94134521 4.58340788]
[593.63696289 9.09818363]
[579.33251953 13.61295986]
[565.02807617 18.12773514]
[550.72363281 22.64251137]
[536.41918945 27.15728760]
[530.95019531 32.20403290]
[521.76538086 31.61301994]
[507.36895752 35.82521439]
[500.46575928 48.97365189]
[485.92572021 53.45049667]
[472.18124390 46.12063980]
[457.78479004 50.33283234]
[443.38836670 54.54502487]
[433.34594727 65.54497528]
[417.92831421 61.99427032]
[403.53189087 66.20646667]
[389.13543701 70.41865540]
[374.73901367 74.63085175]
[360.34255981 78.84304047]
[345.94613647 83.05523682]
[331.54968262 87.26743317]
[317.15325928 91.47962189]
[302.75680542 95.69181824]
[288.36038208 99.90400696]
[282.78616333 104.83432770]
[273.61587524 104.04980469]
[259.13381958 107.95754242]
[273.33767700 112.77947998]
[284.68612671 122.58828735]
[291.51361084 135.94438171]
[292.81817627 150.88754272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[39 56]
[40 55]
[41 54]
[42 52]
[43 51]
[44 50]
[67 144]
[68 143]
[69 141]
[70 140]
[71 139]
[72 138]
[73 137]
[74 136]
[75 135]
[76 134]
[77 133]
[78 132]
[80 130]
[81 129]
[82 128]
[85 125]
[86 124]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
