%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGACAGUCUUCUCAUGCUGCCUCUGCCACCUUCUCUGCCAGAAGAUACCAUUUCAACUUUAACACAGC\
) } def
/len { sequence length } bind def

/coor [
[139.42932129 313.94415283]
[130.30429077 301.98385620]
[123.53253174 288.55041504]
[119.34469604 274.10128784]
[117.88342285 259.12869263]
[119.19847870 244.14250183]
[123.24507141 229.65321350]
[129.88537598 216.15428162]
[138.89323425 204.10549927]
[149.96183777 193.91723633]
[142.00088501 181.20413208]
[134.03993225 168.49101257]
[126.07898712 155.77789307]
[118.11803436 143.06478882]
[110.15708160 130.35166931]
[102.19613647 117.63855743]
[92.02542114 115.88545990]
[84.54326630 108.77674103]
[82.27219391 98.70902252]
[85.97787476 89.07654572]
[79.13927460 75.72613525]
[64.25484467 78.36147308]
[49.25510788 76.49082184]
[35.47383881 70.28050995]
[24.13645172 60.28275299]
[16.25106621 47.38654709]
[12.51884270 32.73861694]
[13.27164650 17.64144135]
[18.44254112 3.43745375]
[27.57173157 -8.61033726]
[39.84745789 -17.43065071]
[54.17817307 -22.23918915]
[69.28959656 -22.60838318]
[83.83802795 -18.50540161]
[96.52983856 -10.29508018]
[106.23648071 1.29252553]
[112.09483337 15.22705269]
[113.58399200 30.26945305]
[110.57153320 45.08216858]
[103.32532501 58.34805679]
[92.48969269 68.88753510]
[99.32829285 82.23794556]
[115.45673370 91.22325897]
[114.90924835 109.67760468]
[122.87020111 122.39072418]
[130.83114624 135.10383606]
[138.79209900 147.81695557]
[146.75305176 160.53005981]
[154.71400452 173.24317932]
[162.67495728 185.95629883]
[176.67375183 180.44735718]
[191.44650269 177.60472107]
[206.49003601 177.52522278]
[221.29200745 180.21154785]
[235.34825134 185.57220459]
[248.18002319 193.42463684]
[259.35025024 203.50135803]
[268.47851562 215.45918274]
[275.25390625 228.89080811]
[279.44561768 243.33879089]
[280.91094971 258.31100464]
[279.59991455 273.29754639]
[275.55722046 287.78793335]
[268.92056274 301.28863525]
[259.91595459 313.33984375]
[248.85009766 323.53109741]
[236.09989929 331.51525879]
[222.09962463 337.02044678]
[207.32611084 339.85906982]
[192.28253174 339.93453979]
[177.48129272 337.24423218]
[163.42649841 331.87976074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 50]
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[20 42]
[21 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
