%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:34 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ADCK5)
} def

/sequence { (\
UACGCGCCCUCCCGCAGGGCCUGCUGGGCUGCGAGACGCUAAGCGGCGCCGGGCGGGAGAAGAGCGGAGCAGUGGUCGGAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 74 0.290335225 ubox
2 73 0.317525556 ubox
2 76 0.028784553 ubox
3 66 0.873683313 ubox
3 72 0.319748289 ubox
3 74 0.116626418 ubox
3 75 0.029453291 ubox
3 78 0.106779615 ubox
4 65 0.881545584 ubox
4 70 0.361605213 ubox
4 73 0.116744133 ubox
4 76 0.005398013 ubox
4 77 0.106520491 ubox
5 64 0.881381572 ubox
5 66 0.142652838 ubox
5 69 0.361365878 ubox
5 72 0.116518487 ubox
5 74 0.027405286 ubox
5 75 0.011450806 ubox
5 78 0.055590828 ubox
6 65 0.151518721 ubox
6 70 0.117031797 ubox
6 73 0.027925806 ubox
6 76 0.106962130 ubox
6 77 0.054336010 ubox
7 64 0.151291022 ubox
7 67 0.359494231 ubox
7 69 0.116998007 ubox
7 72 0.027893352 ubox
7 75 0.120721904 ubox
7 79 0.084501975 ubox
8 66 0.360046940 ubox
8 67 0.110809889 ubox
8 74 0.120360941 ubox
8 75 0.007353249 ubox
8 78 0.084601904 ubox
8 79 0.012631213 ubox
9 59 0.989803785 ubox
9 62 0.031950727 ubox
9 64 0.055518883 ubox
9 66 0.096536844 ubox
9 67 0.009055743 ubox
9 69 0.010980891 ubox
9 72 0.016034339 ubox
9 74 0.006065135 ubox
9 78 0.010934142 ubox
10 58 0.998494804 ubox
10 61 0.019715063 ubox
10 63 0.038626528 ubox
10 66 0.005574968 ubox
10 68 0.011095348 ubox
10 71 0.014339621 ubox
11 57 0.999573319 ubox
11 62 0.022732568 ubox
11 67 0.009118107 ubox
12 56 0.999833898 ubox
12 66 0.006530669 ubox
12 67 0.015134863 ubox
13 55 0.999819024 ubox
13 66 0.016420027 ubox
14 54 0.999818338 ubox
14 65 0.017605498 ubox
15 53 0.999429301 ubox
15 64 0.017581320 ubox
17 50 0.128770150 ubox
18 49 0.127383420 ubox
18 50 0.991139256 ubox
19 47 0.114382936 ubox
19 49 0.991639294 ubox
20 46 0.112965147 ubox
20 48 0.991692066 ubox
20 57 0.017739912 ubox
21 45 0.111387396 ubox
21 46 0.992507132 ubox
21 56 0.017760201 ubox
22 45 0.992214593 ubox
22 48 0.004533104 ubox
22 55 0.017746739 ubox
23 44 0.999218039 ubox
23 47 0.033292281 ubox
23 54 0.017747527 ubox
24 43 0.999189108 ubox
24 46 0.033437411 ubox
24 52 0.008205103 ubox
24 53 0.016124259 ubox
25 41 0.042047560 ubox
25 42 0.989414395 ubox
25 45 0.033242406 ubox
25 51 0.011055309 ubox
25 52 0.014212757 ubox
26 40 0.052449124 ubox
26 44 0.032181539 ubox
26 50 0.013403641 ubox
27 39 0.044423372 ubox
27 40 0.910212830 ubox
27 49 0.013414176 ubox
27 50 0.012089432 ubox
28 39 0.982702378 ubox
28 44 0.008984953 ubox
28 47 0.014737623 ubox
28 49 0.011964344 ubox
29 35 0.012180526 ubox
29 38 0.981880782 ubox
29 43 0.009329326 ubox
29 46 0.014834993 ubox
29 48 0.011648480 ubox
30 34 0.015621459 ubox
30 38 0.045450070 ubox
30 41 0.012331046 ubox
30 42 0.008578624 ubox
30 45 0.015134228 ubox
31 37 0.210511059 ubox
31 39 0.177189673 ubox
31 44 0.015301251 ubox
31 47 0.010292109 ubox
32 38 0.177755292 ubox
32 43 0.015297812 ubox
32 45 0.004343897 ubox
32 46 0.010272270 ubox
33 37 0.168153013 ubox
33 44 0.004336073 ubox
34 40 0.006407223 ubox
35 39 0.006462419 ubox
37 45 0.009681607 ubox
38 44 0.009718514 ubox
39 43 0.009649307 ubox
59 77 0.003736988 ubox
60 76 0.004162454 ubox
62 77 0.191875234 ubox
63 76 0.191619871 ubox
64 70 0.087273364 ubox
64 73 0.075644120 ubox
64 76 0.010597003 ubox
65 69 0.086729526 ubox
65 72 0.079350618 ubox
65 74 0.191147844 ubox
65 75 0.012602058 ubox
65 78 0.030970644 ubox
66 73 0.177174273 ubox
66 77 0.036386817 ubox
67 76 0.034935795 ubox
67 77 0.420161689 ubox
68 76 0.403046356 ubox
69 76 0.248155668 ubox
70 75 0.309774939 ubox
3 66 0.9500000 lbox
4 65 0.9500000 lbox
5 64 0.9500000 lbox
9 59 0.9500000 lbox
10 58 0.9500000 lbox
11 57 0.9500000 lbox
12 56 0.9500000 lbox
13 55 0.9500000 lbox
14 54 0.9500000 lbox
15 53 0.9500000 lbox
18 50 0.9500000 lbox
19 49 0.9500000 lbox
20 48 0.9500000 lbox
21 46 0.9500000 lbox
22 45 0.9500000 lbox
23 44 0.9500000 lbox
24 43 0.9500000 lbox
25 42 0.9500000 lbox
27 40 0.9500000 lbox
28 39 0.9500000 lbox
29 38 0.9500000 lbox
showpage
end
%%EOF
