%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUACUUUUUUCUCCAAUCUGUUUGCAAGUGAGCAGUUGGCAAUGCAUGGACAGACUUUGAGUUUAUGCGAUUCUUUCUUUAGGUACAGGAAAAAUAAGA\
) } def
/len { sequence length } bind def

/coor [
[86.30484009 286.00317383]
[74.86004639 275.84072876]
[69.45975494 261.51959229]
[71.34491730 246.33061218]
[80.08232880 233.76414490]
[93.66420746 226.70785522]
[93.66420746 211.70785522]
[93.66420746 196.70785522]
[93.66420746 181.70785522]
[93.66420746 166.70785522]
[93.66420746 151.70785522]
[93.66420746 136.70785522]
[93.66420746 121.70786285]
[83.65038300 110.53990173]
[68.73918915 108.91011810]
[53.82799149 107.28033447]
[38.91679382 105.65055084]
[29.86486053 107.85399628]
[23.56979752 103.73117065]
[8.71649837 101.63844299]
[-6.13679981 99.54571533]
[-20.99009895 97.45298004]
[-35.84339905 95.36025238]
[-50.69669724 93.26752472]
[-63.16949463 102.97344208]
[-78.84165192 100.93408203]
[-88.41516113 88.35935974]
[-86.21022034 72.70964050]
[-73.53498077 63.26961899]
[-57.90945053 65.63989258]
[-48.60396576 78.41422272]
[-33.75066757 80.50695801]
[-18.89736938 82.59968567]
[-4.04406977 84.69241333]
[10.80922890 86.78514862]
[25.66252708 88.87787628]
[40.54657364 90.73935699]
[55.45777130 92.36914062]
[70.36897278 93.99892426]
[85.28016663 95.62870026]
[84.67788696 90.80852509]
[85.68457031 85.49442291]
[88.48371124 80.21527100]
[93.08976746 75.55310822]
[99.33522797 72.09076691]
[105.23673248 58.30046844]
[111.13823700 44.51017380]
[117.03974152 30.71987724]
[122.94124603 16.92958260]
[128.84274292 3.13928652]
[134.74424744 -10.65100861]
[140.64575195 -24.44130516]
[131.91064453 -37.15748596]
[131.45991516 -52.57826614]
[139.43742371 -65.78292847]
[153.29754639 -72.55790710]
[168.61758423 -70.74134064]
[180.50897217 -60.91288376]
[185.17720032 -46.20876312]
[181.13265991 -31.32100677]
[169.66595459 -21.00024796]
[154.43605042 -18.53980064]
[148.53454590 -4.74950504]
[142.63304138 9.04079056]
[136.73153687 22.83108521]
[130.83003235 36.62137985]
[124.92853546 50.41167831]
[119.02703094 64.20197296]
[113.12552643 77.99227142]
[122.05516052 90.04472351]
[136.96635437 88.41493988]
[148.09153748 76.85596466]
[164.05110168 78.49048615]
[172.60224915 92.06462860]
[167.18525696 107.16548157]
[151.95559692 112.20896149]
[138.59614563 103.32614136]
[123.68494415 104.95591736]
[137.55210876 110.67446136]
[152.33276367 113.23026276]
[162.99697876 123.77894592]
[165.71362305 138.53088379]
[159.50674438 152.18646240]
[146.60617065 159.83990479]
[131.64642334 158.74171448]
[120.00179291 149.28642273]
[115.85559082 134.87159729]
[108.66420746 121.70786285]
[108.66420746 136.70785522]
[108.66420746 151.70785522]
[108.66420746 166.70785522]
[108.66420746 181.70785522]
[108.66420746 196.70785522]
[108.66420746 211.70785522]
[108.66420746 226.70785522]
[122.24608612 233.76414490]
[130.98350525 246.33061218]
[132.86866760 261.51959229]
[127.46836853 275.84072876]
[116.02357483 286.00317383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 40]
[15 39]
[16 38]
[17 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
