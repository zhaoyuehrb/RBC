%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAUGACGUAAAAAGGCCGCGCUGUACUGCGGCUUGUGCCGCUUCCGCAAGAAGGUUUCCUGGCCUGUUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[69.45525360 122.82688141]
[76.12707520 109.39234161]
[89.73621368 103.08335876]
[76.45436859 96.11251068]
[63.17253113 89.14166260]
[50.19047928 97.22953033]
[35.00343704 97.73014832]
[21.69337654 90.60914612]
[13.78764725 77.86727142]
[13.32435989 62.97932816]
[0.04251981 56.00848007]
[-13.23932076 49.03763199]
[-23.75629044 52.96275330]
[-34.44322586 50.34664917]
[-41.65906906 42.33869934]
[-43.09111404 31.87994194]
[-55.76896667 23.86295509]
[-68.44681549 15.84596825]
[-81.12466431 7.82898045]
[-93.80252075 -0.18800685]
[-106.48036957 -8.20499420]
[-119.15821838 -16.22198105]
[-131.83607483 -24.23896980]
[-147.19715881 -20.52245522]
[-160.64335632 -28.82761002]
[-164.19725037 -44.22713470]
[-155.75039673 -57.58476257]
[-140.31416321 -60.97565079]
[-127.04658508 -52.38804626]
[-123.81908417 -36.91682053]
[-111.14123535 -28.89983368]
[-98.46338654 -20.88284492]
[-85.78553009 -12.86585808]
[-73.10768127 -4.84887075]
[-60.42982864 3.16811657]
[-47.75197601 11.18510437]
[-35.07412720 19.20209122]
[-15.92876244 18.27865410]
[-6.26847315 35.75579071]
[7.01336718 42.72663879]
[20.29520798 49.69748688]
[32.81092453 41.62144470]
[47.78824997 40.88952255]
[61.20969391 47.79830170]
[69.42491913 60.58137512]
[70.14337921 75.85982513]
[83.42521667 82.83067322]
[96.70706177 89.80152130]
[110.83657074 94.83708954]
[125.53343201 97.83747101]
[140.23028564 100.83786011]
[154.92715454 103.83824158]
[166.27357483 97.33335114]
[178.58984375 100.32427979]
[185.24906921 110.62957764]
[199.81320190 114.21931458]
[214.37733459 117.80905151]
[228.94145203 121.39878845]
[243.50558472 124.98851776]
[259.09814453 119.90875244]
[271.11108398 131.07215881]
[267.18649292 146.99476624]
[251.36169434 151.29678345]
[239.91584778 139.55264282]
[225.35171509 135.96290588]
[210.78759766 132.37318420]
[196.22346497 128.78344727]
[181.65933228 125.19371033]
[165.24719238 131.06011963]
[151.92675781 118.53510284]
[137.22990417 115.53472137]
[122.53304291 112.53433228]
[107.83618164 109.53394318]
[114.38775635 123.02753448]
[111.05944061 137.65362549]
[99.31414795 146.98356628]
[84.31430054 146.91659546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[5 46]
[10 41]
[11 40]
[12 39]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[49 73]
[50 72]
[51 71]
[52 70]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
