%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUACUAGUCAAGCCGCGGAGUGGGCGGGGCCCCCUGCCCAGACUUGAAGCCACACAGGCAGGUCGGGCAGGCGGGUCGCAGGUUGUAAAUCC\
) } def
/len { sequence length } bind def

/coor [
[100.00531006 215.68153381]
[99.65524292 199.88113403]
[110.64049530 188.51892090]
[110.14971161 173.52696228]
[109.65892792 158.53498840]
[109.16813660 143.54301453]
[108.67735291 128.55105591]
[103.12022400 123.51435852]
[96.36339569 136.90634155]
[90.34882355 150.64770508]
[75.68136597 153.78866577]
[64.56700897 143.71537781]
[66.25492096 128.81065369]
[79.34073639 121.47791290]
[92.00595093 113.44097900]
[86.44882202 108.40428162]
[71.48093414 109.38533020]
[56.51305389 110.36637878]
[41.54516983 111.34742737]
[32.44504547 124.06441498]
[17.28683853 127.90665436]
[3.22779250 121.05995941]
[-3.09384251 106.75712585]
[1.30681622 91.75151825]
[14.35191250 83.12832642]
[29.88195038 84.95915222]
[40.56412125 96.37953949]
[55.53200531 95.39849091]
[70.49989319 94.41744995]
[85.46777344 93.43640137]
[98.07450104 85.30802917]
[105.14544678 72.07920837]
[112.21640015 58.85038757]
[119.28735352 45.62157059]
[126.35830688 32.39274979]
[133.21186829 19.05000877]
[139.84619141 5.59691811]
[146.48052979 -7.85617304]
[153.11485291 -21.30926323]
[159.74917603 -34.76235580]
[166.38351440 -48.21544647]
[173.01783752 -61.66853714]
[174.04911804 -70.94587708]
[180.09567261 -75.44789886]
[187.16662598 -88.67671967]
[194.23757935 -101.90554047]
[201.30853271 -115.13435364]
[208.37947083 -128.36317444]
[208.17135620 -133.97727966]
[210.06880188 -138.56909180]
[213.27578735 -141.48008728]
[216.84779358 -142.49169922]
[225.18135071 -154.96374512]
[233.51490784 -167.43579102]
[231.80789185 -183.38777161]
[243.31620789 -194.56535339]
[259.21163940 -192.39405823]
[267.30059814 -178.53950500]
[261.37789917 -163.62973022]
[245.98693848 -159.10224915]
[237.65339661 -146.63020325]
[229.31983948 -134.15815735]
[221.60829163 -121.29222107]
[214.53735352 -108.06340790]
[207.46640015 -94.83458710]
[200.39544678 -81.60576630]
[193.32449341 -68.37694550]
[186.47093201 -55.03420639]
[179.83660889 -41.58111572]
[173.20227051 -28.12802505]
[166.56794739 -14.67493343]
[159.93360901 -1.22184265]
[153.29928589 12.23124886]
[146.66494751 25.68433952]
[146.52748108 33.22159576]
[139.58712769 39.46370316]
[132.51617432 52.69252014]
[125.44522095 65.92134094]
[118.37426758 79.15016174]
[111.30332184 92.37897491]
[121.71361542 81.57963562]
[136.35006714 78.29722595]
[150.37518311 83.61662292]
[159.15353394 95.77970886]
[159.78376770 110.76646423]
[152.05760193 123.62361908]
[138.52861023 130.10174561]
[123.66931915 128.06027222]
[124.16011047 143.05223083]
[124.65089417 158.04420471]
[125.14167786 173.03617859]
[125.63246918 188.02813721]
[137.33732605 198.64755249]
[138.02140808 214.43702698]
[127.27884674 226.02896118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[16 30]
[17 29]
[18 28]
[19 27]
[31 80]
[32 79]
[33 78]
[34 77]
[35 76]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
