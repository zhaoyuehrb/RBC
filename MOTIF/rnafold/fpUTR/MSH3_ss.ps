%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCAGACGCCUGGGAACUGCGGCCGCGGGCUCGCGCUCCUCGCCAGGCCCUGCCGCCGGGCUGCCAUCCUUGCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[148.09631348 159.94726562]
[143.35279846 151.42393494]
[143.22523499 141.53018188]
[131.19338989 132.57279968]
[119.16154480 123.61542511]
[107.12969208 114.65804291]
[95.35988617 115.62562561]
[86.02573395 108.39111328]
[84.02685547 96.75199890]
[72.35138702 87.33481598]
[60.67591095 77.91763306]
[49.00043869 68.50045013]
[37.32496262 59.08326721]
[25.64949036 49.66608810]
[13.79359913 40.47707748]
[1.76175153 31.51969910]
[-16.62739944 35.10609436]
[-31.70150566 24.51392555]
[-34.46422195 6.61462879]
[-47.15401840 -1.38343799]
[-59.84381485 -9.38150406]
[-72.53360748 -17.37957001]
[-85.37611389 -25.13006210]
[-98.36649323 -32.63006210]
[-111.35688019 -40.13006210]
[-128.09713745 -42.81334305]
[-130.15287781 -59.64219666]
[-114.55079651 -66.27629089]
[-103.85688019 -53.12044144]
[-90.86649323 -45.62044144]
[-77.87611389 -38.12044144]
[-70.31332397 -37.48750687]
[-64.53554535 -30.06936646]
[-51.84574890 -22.07130051]
[-39.15595245 -14.07323456]
[-26.46615601 -6.07516766]
[-15.85879517 -11.04085827]
[-4.05951691 -10.13911438]
[5.87204695 -3.48391461]
[11.30175304 7.30343962]
[10.71913052 19.48785210]
[22.75097847 28.44523048]
[30.18915558 29.95187378]
[35.06666946 37.99061203]
[46.74214554 47.40779495]
[58.41761780 56.82497787]
[70.09309387 66.24215698]
[81.76856232 75.65933990]
[93.44403839 85.07652283]
[109.98540497 87.11657715]
[116.08707428 102.62619781]
[128.11892700 111.58357239]
[140.15077209 120.54095459]
[152.18261719 129.49833679]
[173.41497803 130.24661255]
[181.66465759 148.99687195]
[194.65502930 156.49687195]
[210.47499084 156.69625854]
[217.62847900 169.76060486]
[230.61885071 177.26060486]
[243.60923767 184.76060486]
[256.59960938 192.26060486]
[269.86050415 184.51176453]
[285.21926880 184.44758606]
[298.54446411 192.08529663]
[306.25167847 205.37040710]
[306.26773071 220.72929382]
[298.58828735 234.03048706]
[285.27908325 241.69602966]
[269.92022705 241.66394043]
[256.64315796 233.94282532]
[249.01937866 220.60966492]
[249.09962463 205.25097656]
[236.10923767 197.75097656]
[223.11885071 190.25097656]
[210.12847900 182.75097656]
[195.23768616 183.08804321]
[187.15502930 169.48725891]
[174.16465759 161.98725891]
[165.64965820 165.81010437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 42]
[16 41]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[56 79]
[57 78]
[59 76]
[60 75]
[61 74]
[62 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
