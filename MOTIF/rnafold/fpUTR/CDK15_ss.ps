%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGGCAAAAAGGGAGAGAACAAGGAUAGGAGAGGCAGUGGGGGAAAGGUUCAAGUGCGGGUUUUCUCCUUGAACCUACAAGAUU\
) } def
/len { sequence length } bind def

/coor [
[100.86062622 401.70324707]
[98.15064240 386.74581909]
[101.37577820 371.89096069]
[110.04423523 359.40393066]
[122.83412933 351.18887329]
[120.14055634 336.43270874]
[108.30213928 332.74755859]
[99.16310883 324.26089478]
[94.55927277 312.59133911]
[95.45252228 300.00509644]
[101.73056030 288.97567749]
[112.21663666 281.69808960]
[110.59484863 266.78604126]
[108.97306061 251.87396240]
[107.35128021 236.96188354]
[105.72949219 222.04981995]
[104.10770416 207.13775635]
[102.48592377 192.22567749]
[100.86413574 177.31361389]
[99.24235535 162.40153503]
[97.62056732 147.48947144]
[95.99877930 132.57740784]
[88.99089050 130.92080688]
[82.51291656 127.77587128]
[76.87667084 123.29396057]
[72.35344696 117.69081116]
[69.16096497 111.23613739]
[67.45289612 104.24061584]
[67.31145477 97.04097748]
[68.74344635 89.98376465]
[71.67995453 83.40868378]
[75.97961426 77.63220978]
[81.43548584 72.93238831]
[87.78494263 69.53543854]
[94.72235870 67.60488892]
[101.91381073 67.23364258]
[106.18701935 52.85519791]
[110.46023560 38.47675323]
[101.19816589 26.16739655]
[100.96295166 10.94248104]
[109.63524628 -1.35610723]
[123.71795654 -6.13264704]
[127.99116516 -20.51109123]
[132.26437378 -34.88953400]
[124.51634216 -48.66427612]
[128.85826111 -63.86043549]
[142.71415710 -71.46240234]
[157.86355591 -66.96006775]
[165.31860352 -53.02457809]
[160.65635681 -37.92362213]
[146.64282227 -30.61632347]
[142.36961365 -16.23787880]
[138.09640503 -1.85943472]
[147.28456116 9.83310986]
[147.83232117 24.87185860]
[139.32015991 37.49709320]
[124.83867645 42.74996567]
[120.56546783 57.12841034]
[116.29225159 71.50685120]
[131.44909668 90.60579681]
[129.25096130 114.88887787]
[110.91085052 130.95561218]
[112.53263855 145.86769104]
[114.15441895 160.77975464]
[115.77620697 175.69183350]
[117.39799500 190.60389709]
[119.01977539 205.51596069]
[120.64156342 220.42803955]
[122.26335144 235.34010315]
[123.88513184 250.25216675]
[125.50691986 265.16424561]
[127.12870026 280.07632446]
[143.00314331 288.42425537]
[150.78288269 304.41339111]
[147.61000061 321.75265503]
[134.89672852 333.73913574]
[137.59030151 348.49530029]
[152.45777893 351.66180420]
[164.97894287 360.28091431]
[173.24438477 373.03826904]
[175.99371338 387.98852539]
[172.80767822 402.85180664]
[164.17210388 415.36163330]
[151.40385437 423.61029053]
[136.45001221 426.33993530]
[121.59092712 423.13433838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[36 59]
[37 58]
[38 57]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
