%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGGAGGAGUUUUGGCCUCCACACGGCUCCGUCGGGCGCCGCGCUCUUCCGGCAGCGGUAGCUUUGGAGACGCCGGGAACCCGCGUUGGCGUGGUUGACUAGUGCCUCGCAGCCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[-9.54365444 335.11279297]
[-17.99373817 340.25717163]
[-27.42758942 343.18811035]
[-37.27682114 343.73626709]
[-46.94977188 341.87557983]
[-55.86705017 337.72457886]
[-65.98912811 348.79452515]
[-76.11120605 359.86447144]
[-86.23328400 370.93438721]
[-96.35536194 382.00433350]
[-93.11375427 397.17904663]
[-99.44146729 411.34729004]
[-112.90535736 419.06112671]
[-128.32829285 417.35443115]
[-139.77983093 406.88342285]
[-142.85661316 391.67443848]
[-136.37557983 377.57565308]
[-122.82880402 370.00833130]
[-107.42530060 371.88226318]
[-97.30322266 360.81231689]
[-87.18114471 349.74237061]
[-77.05906677 338.67245483]
[-66.93698883 327.60250854]
[-74.75463867 308.56066895]
[-72.10902405 288.07546997]
[-59.62437820 271.53088379]
[-40.52017975 263.31042480]
[-19.78118515 265.63574219]
[-11.78912163 252.94216919]
[-3.79705787 240.24859619]
[4.19500589 227.55500793]
[4.42854834 212.66224670]
[18.32893944 205.10647583]
[26.32100296 192.41288757]
[26.12118340 187.53459167]
[29.06483841 182.50173950]
[35.05927277 179.28984070]
[43.68905258 167.02090454]
[52.31883621 154.75196838]
[60.94861603 142.48301697]
[69.57839203 130.21408081]
[78.20817566 117.94513702]
[72.77948761 92.51966858]
[90.43871307 73.43887329]
[89.29047394 58.48288727]
[88.14223480 43.52689743]
[84.32701111 35.09623718]
[87.16063690 28.17513847]
[86.39472961 13.19470406]
[85.62881470 -1.78572905]
[82.03015137 -10.31107616]
[85.03960419 -17.15755081]
[84.65652466 -32.15266037]
[84.27344513 -47.14776611]
[83.89036560 -62.14287567]
[80.51059723 -70.75734711]
[83.69391632 -77.52472687]
[83.69391632 -92.52472687]
[83.69391632 -107.52472687]
[75.03021240 -121.44853210]
[82.99433899 -135.78396606]
[99.39348602 -135.78396606]
[107.35762024 -121.44853210]
[98.69391632 -107.52472687]
[98.69391632 -92.52472687]
[98.69391632 -77.52472687]
[98.88546753 -62.52595520]
[99.26854706 -47.53084564]
[99.65162659 -32.53573990]
[100.03470612 -17.54063034]
[100.60925293 -2.55163813]
[101.37516022 12.42879581]
[102.14106750 27.40922928]
[103.09822083 42.37865829]
[104.24645996 57.33464813]
[105.39469910 72.29063416]
[110.76435089 73.90324402]
[115.70940399 76.54522705]
[120.03481293 80.11236572]
[123.56996155 84.46395874]
[126.17541504 89.42835999]
[141.07644653 87.70811462]
[155.97747803 85.98786163]
[170.87850952 84.26760864]
[185.75634766 82.35720825]
[200.60859680 80.25696564]
[215.46083069 78.15672302]
[228.03442383 67.62880707]
[243.34373474 73.50729370]
[245.63989258 89.74489594]
[232.56077576 99.63776398]
[217.56108093 93.00895691]
[202.70883179 95.10919952]
[187.85659790 97.20944214]
[181.60159302 101.30895233]
[172.59875488 99.16864014]
[157.69772339 100.88889313]
[142.79669189 102.60914612]
[127.89566803 104.32939148]
[125.45043182 112.21421814]
[120.82875824 119.05451965]
[114.42586517 124.26532745]
[106.78931427 127.40103912]
[98.57216644 128.19349670]
[90.47711182 126.57492065]
[81.84733582 138.84385681]
[73.21755219 151.11280823]
[64.58777618 163.38174438]
[55.95799637 175.65068054]
[47.32821655 187.91961670]
[39.01457977 200.40495300]
[31.02251816 213.09852600]
[30.21732903 228.89923096]
[16.88858414 235.54707336]
[8.89652061 248.24066162]
[0.90445673 260.93423462]
[-7.08760691 273.62780762]
[-0.68493390 281.29916382]
[3.65393662 290.28442383]
[5.67474461 300.04113770]
[5.26293421 309.98223877]
[2.45012212 319.51119995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[28 117]
[29 116]
[30 115]
[31 114]
[33 112]
[34 111]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[42 105]
[44 76]
[45 75]
[46 74]
[48 73]
[49 72]
[50 71]
[52 70]
[53 69]
[54 68]
[55 67]
[57 66]
[58 65]
[59 64]
[81 99]
[82 98]
[83 97]
[84 96]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
