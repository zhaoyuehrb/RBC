%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUGGGGCUCAGCUAAGUGACCACACAGGAGAGCAGUGAGGCCAUUUGAGGCCUGAGCCUGGUCCUCAGGACUCGACUCUCUCUCCCUGCCAUCAAGCAGCCUGCCCCAGCCCUGCCAGCCAUCUCCACACUCCUGACAGA\
) } def
/len { sequence length } bind def

/coor [
[154.59503174 248.31613159]
[148.82386780 240.52731323]
[146.31178284 231.10424805]
[147.45335388 221.36050415]
[152.13067627 212.67073059]
[143.84786987 200.16493225]
[135.56504822 187.65914917]
[127.28222656 175.15335083]
[118.99941254 162.64755249]
[110.71659088 150.14175415]
[102.43376923 137.63595581]
[110.62330627 150.20304871]
[110.33651733 165.20030212]
[101.67251587 177.44509888]
[87.62533569 182.70596313]
[73.04929352 179.16490173]
[62.98147964 168.04557800]
[60.90104294 153.19056702]
[67.52693176 139.73330688]
[80.56975555 132.32420349]
[67.47240448 139.63580322]
[54.37504959 146.94738770]
[46.44041443 161.29916382]
[30.04130173 161.33288574]
[22.04771233 147.01385498]
[30.68276596 133.07226562]
[47.06345749 133.85003662]
[60.16081238 126.53844452]
[73.25816345 119.22685242]
[69.40767670 91.01679993]
[88.67227936 71.32463837]
[80.93897247 58.47178268]
[73.20566559 45.61892319]
[65.47235870 32.76606369]
[57.73904800 19.91320801]
[50.00574112 7.06035042]
[33.70810318 -1.43706262]
[33.99150085 -18.95215225]
[25.98155975 -31.63445663]
[17.97161674 -44.31676102]
[-1.42358518 -46.14566040]
[-13.11483669 -66.13352966]
[-25.70962524 -74.28038788]
[-38.30441284 -82.42724609]
[-50.89920044 -90.57410431]
[-63.49399185 -98.72096252]
[-78.89246368 -95.16251373]
[-92.25258636 -103.60542297]
[-95.64803314 -119.04065704]
[-87.06434631 -132.31077576]
[-71.59407043 -135.54283142]
[-58.41545486 -126.81932831]
[-55.34712982 -111.31575012]
[-42.75234222 -103.16889191]
[-30.15755463 -95.02203369]
[-17.56276703 -86.87517548]
[-4.96797848 -78.72831726]
[7.35543919 -87.28012085]
[4.13088274 -101.92942810]
[0.90632594 -116.57874298]
[-2.47673535 -131.19226074]
[-6.01790476 -145.76826477]
[-9.55907345 -160.34428406]
[-13.10024261 -174.92028809]
[-25.99874115 -184.46011353]
[-26.43827248 -200.49714661]
[-14.08166504 -210.72914124]
[1.59214973 -207.30700684]
[8.55956173 -192.85588074]
[1.47576892 -178.46145630]
[5.01693821 -163.88545227]
[8.55810738 -149.30943298]
[12.09927654 -134.73342896]
[16.76937103 -128.93325806]
[15.55563450 -119.80329895]
[18.78019142 -105.15399170]
[22.00474739 -90.50467682]
[37.00812531 -71.59969330]
[30.65391922 -52.32670212]
[38.66386414 -39.64439774]
[46.67380524 -26.96209526]
[58.44198227 -23.96874428]
[65.20732117 -13.40466022]
[62.85860062 -0.67295760]
[70.59190369 12.17990017]
[78.32521820 25.03275681]
[86.05852509 37.88561630]
[93.79183197 50.73847198]
[101.52513885 63.59133148]
[116.06193542 67.29019165]
[128.99781799 59.69657135]
[141.93368530 52.10295105]
[154.86956787 44.50933075]
[158.60659790 29.15322113]
[172.15074158 21.00878334]
[187.46649170 24.90796852]
[195.46726990 38.53745651]
[191.40637207 53.81111908]
[177.69305420 61.66735458]
[162.46318054 57.44520569]
[149.52731323 65.03882599]
[136.59143066 72.63244629]
[123.65555573 80.22606659]
[130.40466309 92.32730865]
[131.23649597 106.39293671]
[125.78271484 119.63842773]
[114.93956757 129.35313416]
[123.22238922 141.85893250]
[131.50520325 154.36473083]
[139.78802490 166.87052917]
[148.07084656 179.37632751]
[156.35365295 191.88212585]
[164.63647461 204.38790894]
[185.41558838 207.10289001]
[197.39993286 223.93919373]
[193.27882385 243.89448547]
[202.61300659 255.63641357]
[211.94718933 267.37835693]
[226.59147644 273.36630249]
[228.45466614 288.14389038]
[237.78886414 299.88583374]
[247.12304688 311.62777710]
[261.72671509 307.40859985]
[276.83279419 309.10412598]
[290.13772583 316.45581055]
[299.61257935 328.34259033]
[303.81253052 342.95178223]
[302.09713745 358.05563354]
[294.72793579 371.35086060]
[282.82873535 380.81008911]
[268.21401978 384.99084473]
[253.11244202 383.25555420]
[239.82690430 375.86889648]
[230.38334656 363.95724487]
[226.22183228 349.33703613]
[227.97697449 334.23776245]
[235.38111877 320.96194458]
[226.04692078 309.22003174]
[216.71273804 297.47808838]
[202.73609924 292.32998657]
[200.20526123 276.71252441]
[190.87107849 264.97061157]
[181.53689575 253.22866821]
[172.20434570 255.10462952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[11 107]
[20 29]
[21 28]
[22 27]
[31 89]
[32 88]
[33 87]
[34 86]
[35 85]
[36 84]
[38 81]
[39 80]
[40 79]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[58 77]
[59 76]
[60 75]
[61 73]
[62 72]
[63 71]
[64 70]
[90 103]
[91 102]
[92 101]
[93 100]
[116 143]
[117 142]
[118 141]
[120 139]
[121 138]
[122 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
