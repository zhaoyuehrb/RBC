%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAAAAGAGGCGGGGCGCGCGCGUCGCCGCCACUACCCGCUGCGGAGUGAACGGUGUGGAGCGGAGGCCGCGGAGGCUCCUCGGUCCUUCAGCACCCCUCGGCCCGACGCACCCACGCCCCUCACCCCCCGAGAGCCGAAA\
) } def
/len { sequence length } bind def

/coor [
[24.80643272 242.89498901]
[16.60487938 247.42665100]
[7.60484695 249.99162292]
[-1.72979987 250.46324158]
[-10.91919899 248.82260132]
[-19.49215698 245.15925598]
[-27.01030922 239.66632080]
[-38.96887589 248.72129822]
[-45.30015182 263.22045898]
[-60.11755753 264.73501587]
[-72.07612610 273.78997803]
[-84.03469086 282.84497070]
[-95.99325562 291.89993286]
[-107.95182037 300.95492554]
[-119.81020355 310.14071655]
[-131.56697083 319.45620728]
[-143.32373047 328.77169800]
[-155.08050537 338.08718872]
[-160.61331177 353.52481079]
[-176.79519653 356.18542480]
[-186.97961426 343.33203125]
[-180.68969727 328.18710327]
[-164.39599609 326.33044434]
[-152.63923645 317.01495361]
[-140.88246155 307.69943237]
[-129.12570190 298.38394165]
[-125.81087494 291.71304321]
[-117.00680542 288.99636841]
[-105.04824066 279.94137573]
[-93.08966827 270.88638306]
[-81.13110352 261.83142090]
[-69.17253876 252.77642822]
[-63.69661713 238.92495728]
[-48.02385712 236.76274109]
[-36.06528854 227.70774841]
[-40.48403168 207.02023315]
[-34.01205444 186.80699158]
[-18.29605484 172.43893433]
[2.55142474 167.77003479]
[23.02802277 174.10382080]
[33.21910477 163.09738159]
[43.41018677 152.09092712]
[46.32806778 134.81971741]
[63.90064240 129.43762207]
[73.84748077 118.20996094]
[83.79432678 106.98229980]
[86.53801727 88.59159851]
[104.22961426 82.86853790]
[113.67368317 71.21480560]
[123.11775970 59.56107712]
[132.56182861 47.90734482]
[131.10714722 32.39858246]
[140.85079956 20.71457672]
[155.64500427 19.42333984]
[165.08906555 7.76960754]
[174.53314209 -3.88412476]
[183.97721863 -15.53785706]
[193.42129517 -27.19158936]
[202.86537170 -38.84532166]
[212.30943298 -50.49905396]
[214.73631287 -68.71643066]
[231.29499817 -74.42768860]
[240.48078918 -86.28607178]
[249.66659546 -98.14445496]
[247.12911987 -115.41539001]
[257.63034058 -128.93594360]
[274.32220459 -130.68119812]
[283.24526978 -142.73851013]
[292.16836548 -154.79582214]
[301.09143066 -166.85311890]
[310.01449585 -178.91043091]
[311.63885498 -197.21682739]
[327.93069458 -203.64990234]
[336.58676147 -215.90031433]
[334.11383057 -231.27960205]
[343.06683350 -243.57995605]
[357.74386597 -245.84272766]
[366.39990234 -258.09313965]
[375.05596924 -270.34356689]
[367.60171509 -283.66259766]
[366.67315674 -298.89746094]
[372.45465088 -313.02322388]
[383.79830933 -323.23519897]
[398.45178223 -327.50582886]
[413.50564575 -324.98715210]
[425.97094727 -316.17926025]
[433.37268066 -302.83096313]
[434.24124146 -287.59255981]
[428.40417480 -273.48968506]
[417.02041626 -263.32244873]
[402.35021973 -259.10955811]
[387.30639648 -261.68750000]
[378.65032959 -249.43708801]
[369.99426270 -237.18667603]
[372.76324463 -222.59666443]
[364.15930176 -210.04969788]
[348.83718872 -207.24426270]
[340.18112183 -194.99385071]
[341.91448975 -182.97320557]
[334.73699951 -172.68212891]
[322.07180786 -169.98735046]
[313.14874268 -157.93005371]
[304.22564697 -145.87274170]
[295.30258179 -133.81542969]
[286.37951660 -121.75812531]
[290.05010986 -109.35997772]
[285.82376099 -96.93389130]
[275.03933716 -89.11566925]
[261.52496338 -88.95865631]
[252.33917236 -77.10028076]
[243.15338135 -65.24189758]
[244.35710144 -53.15671921]
[236.73449707 -43.19083786]
[223.96316528 -41.05498123]
[214.51910400 -29.40124702]
[205.07502747 -17.74751663]
[195.63095093 -6.09378338]
[186.18687439 5.55994892]
[176.74279785 17.21368027]
[167.29873657 28.86741257]
[169.10079956 43.60810852]
[159.68917847 55.56118393]
[144.21556091 57.35141754]
[134.77148438 69.00514984]
[125.32741547 80.65888214]
[115.88334656 92.31261444]
[117.50569153 102.21974182]
[113.46198273 111.40840149]
[105.06103516 116.90451050]
[95.02198792 116.92913818]
[85.07514191 128.15679932]
[75.12830353 139.38446045]
[75.11618042 152.33316040]
[66.53556824 161.48716736]
[54.41663361 162.28201294]
[44.22554779 173.28845215]
[34.03446579 184.29490662]
[38.76496506 192.47933960]
[41.52729416 201.50752258]
[42.18463135 210.91406250]
[40.70852280 220.21530151]
[37.18008804 228.93418884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 35]
[8 34]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 26]
[16 25]
[17 24]
[18 23]
[40 137]
[41 136]
[42 135]
[44 132]
[45 131]
[46 130]
[48 126]
[49 125]
[50 124]
[51 123]
[54 120]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 114]
[62 111]
[63 110]
[64 109]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[73 98]
[74 97]
[77 94]
[78 93]
[79 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
