%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCCGCCCCUGAGCCGGCCGCCCAGCCCCCAGUGGGGUUCCCGGCGCGGGGAAUGUCCCGGGUGGAGCUGGCUGAGUCGCGCGCUCUGCUCCACCCGACGGGGCUGUGUGUGCUGGGCCUGGCUCGCGGCGAACCGAG\
) } def
/len { sequence length } bind def

/coor [
[52.15546417 495.62557983]
[60.50902176 481.51351929]
[60.17719269 466.51721191]
[47.85170364 458.19732666]
[42.72811890 444.04766846]
[46.96838379 429.42324829]
[59.14767838 419.99081421]
[58.81584549 404.99447632]
[58.48401642 389.99813843]
[58.15218353 375.00183105]
[49.60624695 366.37088013]
[49.25283813 353.82794189]
[57.83089066 344.12670898]
[57.83089066 329.12670898]
[57.83089066 314.12670898]
[57.83089066 299.12670898]
[57.83089066 284.12670898]
[57.83089066 269.12670898]
[57.83089066 254.12670898]
[57.83089066 239.12670898]
[55.09001160 235.12783813]
[54.88648605 229.34846497]
[58.17740631 223.46687317]
[58.84090424 208.48155212]
[59.50440598 193.49624634]
[60.16790390 178.51092529]
[60.83140564 163.52560425]
[61.49490738 148.54028320]
[62.15840530 133.55496216]
[51.66978073 122.83168793]
[36.67345047 123.16352081]
[21.67712212 123.49534607]
[6.68079281 123.82717896]
[-9.02070522 130.22242737]
[-19.51263809 116.90493774]
[-9.62005234 103.13638306]
[6.34896183 108.83084869]
[21.34529114 108.49901581]
[36.34162140 108.16719055]
[51.33794785 107.83535767]
[55.43350601 93.40530396]
[42.84742355 85.24499512]
[30.26134491 77.08469391]
[17.67526627 68.92438507]
[5.08918571 60.76408005]
[-10.31307983 64.30607605]
[-23.66417694 55.84890747]
[-27.04313469 40.41005325]
[-18.44528008 27.14911652]
[-2.97156525 23.93357658]
[10.19772816 32.67115402]
[13.24949169 48.17800140]
[25.83557129 56.33830643]
[38.42164993 64.49861145]
[51.00773239 72.65892029]
[63.59381104 80.81922150]
[85.62508392 67.14717865]
[107.88806915 70.46491241]
[115.19565582 57.36532974]
[122.50325012 44.26574707]
[129.81083679 31.16616249]
[137.11843872 18.06657791]
[143.98736572 4.73174381]
[150.41006470 -8.82365799]
[156.83276367 -22.37906075]
[163.25546265 -35.93446350]
[169.67816162 -49.48986435]
[176.10086060 -63.04526520]
[182.52355957 -76.60066986]
[188.94625854 -90.15607452]
[195.36895752 -103.71147156]
[193.42150879 -121.98552704]
[208.15995789 -131.44923401]
[214.28120422 -145.14340210]
[220.40246582 -158.83757019]
[226.37185669 -172.59861755]
[232.18867493 -186.42485046]
[227.48715210 -201.76353455]
[236.66661072 -214.92092896]
[252.68534851 -215.80380249]
[263.25515747 -203.73489380]
[260.26779175 -187.97244263]
[246.01490784 -180.60803223]
[240.19808960 -166.78179932]
[240.50601196 -159.33779907]
[234.09663391 -152.71632385]
[227.97537231 -139.02215576]
[221.85412598 -125.32798004]
[225.88143921 -113.86906433]
[220.83018494 -102.38278198]
[208.92436218 -97.28877258]
[202.50166321 -83.73336792]
[196.07896423 -70.17797089]
[189.65626526 -56.62256622]
[183.23356628 -43.06716537]
[176.81086731 -29.51176262]
[170.38816833 -15.95636082]
[163.96546936 -2.40095854]
[157.54277039 11.15444374]
[158.42910767 14.64450645]
[157.61857605 18.74340630]
[154.84144592 22.62514114]
[150.21801758 25.37417221]
[142.91043091 38.47375488]
[135.60282898 51.57333755]
[128.29524231 64.67292023]
[120.98764801 77.77250671]
[128.82287598 86.34757996]
[133.13235474 97.65568542]
[132.98399353 110.24228668]
[128.04536438 122.34733582]
[118.67726898 132.15121460]
[105.92729950 138.04603577]
[91.41847992 138.89192200]
[77.14372253 134.21846008]
[76.48022461 149.20378113]
[75.81672668 164.18910217]
[75.15322113 179.17442322]
[74.48972321 194.15974426]
[73.82622528 209.14506531]
[73.16271973 224.13037109]
[72.83089447 239.12670898]
[72.83089447 254.12670898]
[72.83089447 269.12670898]
[72.83089447 284.12670898]
[72.83089447 299.12670898]
[72.83089447 314.12670898]
[72.83089447 329.12670898]
[72.83089447 344.12670898]
[82.41537476 359.80697632]
[73.14851379 374.66998291]
[73.48034668 389.66632080]
[73.81217957 404.66265869]
[74.14400482 419.65896606]
[86.72860718 428.54345703]
[91.61161041 442.96600342]
[87.11892700 457.32843018]
[75.17352295 466.18536377]
[75.50534821 481.18170166]
[84.47496033 494.91043091]
[76.82991028 509.41854858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[7 134]
[8 133]
[9 132]
[10 131]
[13 129]
[14 128]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 40]
[31 39]
[32 38]
[33 37]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[58 107]
[59 106]
[60 105]
[61 104]
[62 103]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[73 88]
[74 87]
[75 86]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
