%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGGCGCCCGCCCCCGCGCGCCCGGCGCCUCCCUCACGCCCGCCCUCCUUGCCGCCCAGCCGGUCCAGGCCUCUGGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[109.57431793 146.44869995]
[95.90238190 147.24784851]
[82.57215118 144.10691833]
[70.69525909 137.28782654]
[61.26214600 127.35924530]
[55.05944443 115.14913177]
[40.26642990 117.63243866]
[25.47342110 120.11574554]
[10.68040943 122.59905243]
[-4.11260223 125.08235931]
[-18.90561295 127.56567383]
[-33.53829193 130.86486816]
[-47.96567917 134.96981812]
[-62.39306259 139.07475281]
[-69.86357117 153.00195312]
[-85.01796722 157.48748779]
[-98.86540985 149.87013245]
[-103.19046021 134.66917419]
[-95.42713928 120.90303802]
[-80.18128967 116.73894501]
[-66.49800873 124.64736938]
[-52.07062149 120.54242706]
[-37.64323807 116.43748474]
[-35.57799530 113.29808807]
[-31.76747131 111.11146545]
[-26.73269463 110.74536896]
[-21.38892174 112.77265930]
[-6.59591007 110.28935242]
[8.19710064 107.80604553]
[22.99011230 105.32273865]
[37.78312302 102.83942413]
[52.57613373 100.35611725]
[55.23063278 84.35220337]
[63.12356949 70.17922211]
[75.33139801 59.49555588]
[90.42568207 53.55129242]
[106.64025879 53.04196930]
[122.07785797 58.02717590]
[134.93214417 67.92359924]
[143.69903564 81.57326508]
[158.26824951 78.00423431]
[172.83746338 74.43521118]
[187.40667725 70.86618042]
[189.84323120 56.81610107]
[197.46636963 44.81664276]
[209.07815552 36.69093323]
[222.87776184 33.65826416]
[236.74067688 36.15121078]
[248.54580688 43.75429153]
[256.50003052 55.27276993]
[271.19116211 52.24453354]
[285.88232422 49.21629715]
[299.20205688 36.66542053]
[315.62649536 42.54457855]
[330.19570923 38.97555161]
[344.76495361 35.40652466]
[359.33416748 31.83749580]
[367.31420898 18.19585037]
[382.62399292 14.27337074]
[396.18051147 22.39719391]
[399.94088745 37.74760056]
[391.67419434 51.21746445]
[376.28488159 54.81535721]
[362.90316772 46.40671158]
[348.33395386 49.97573853]
[333.76473999 53.54476547]
[319.19552612 57.11379623]
[312.53933716 67.39422607]
[300.24636841 70.38352203]
[288.91055298 63.90744400]
[274.21939087 66.93568420]
[259.52825928 69.96392059]
[255.99864197 85.43428040]
[246.08465576 97.89772034]
[231.70089722 104.86711121]
[215.66004944 104.92411804]
[201.12294006 98.00759125]
[190.97570801 85.43539429]
[176.40649414 89.00442505]
[161.83728027 92.57345581]
[147.26805115 96.14247894]
[146.39945984 109.81018066]
[141.66154480 122.65979004]
[133.44938660 133.61976624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 23]
[13 22]
[14 21]
[40 81]
[41 80]
[42 79]
[43 78]
[50 72]
[51 71]
[52 70]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
