%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:37 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MUC1)
} def

/sequence { (\
CGCUCCACCUCUCAAGCAGCCAGCGCCUGCCUGAAUCUGUUCUGCCCCCUCCCCACCCAUUUCACCACCACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 25 0.014619993 ubox
1 39 0.004742329 ubox
1 44 0.036352991 ubox
2 17 0.016612510 ubox
2 20 0.007354885 ubox
2 24 0.015535107 ubox
2 38 0.004381066 ubox
2 40 0.032698704 ubox
2 43 0.034265290 ubox
2 45 0.878024732 ubox
3 16 0.016864422 ubox
3 19 0.007368334 ubox
3 23 0.015534711 ubox
3 39 0.033951257 ubox
3 44 0.879326038 ubox
4 15 0.016205250 ubox
4 18 0.006975927 ubox
4 22 0.014870884 ubox
6 39 0.275312318 ubox
6 44 0.020503560 ubox
7 38 0.267919531 ubox
7 40 0.696150564 ubox
7 43 0.018493769 ubox
8 39 0.713425611 ubox
9 16 0.012021060 ubox
9 19 0.005703877 ubox
10 15 0.011383817 ubox
10 18 0.005520632 ubox
10 34 0.037092123 ubox
11 33 0.037876567 ubox
12 34 0.956030248 ubox
13 29 0.004178977 ubox
13 33 0.981010561 ubox
13 39 0.009899911 ubox
13 44 0.069944099 ubox
14 28 0.004169928 ubox
14 32 0.970524086 ubox
14 38 0.009493031 ubox
14 41 0.006311848 ubox
14 43 0.069772251 ubox
15 32 0.066515391 ubox
15 38 0.008352689 ubox
15 40 0.005071550 ubox
15 41 0.122378707 ubox
15 43 0.008496295 ubox
16 24 0.005735743 ubox
16 26 0.005234526 ubox
16 30 0.984455499 ubox
16 31 0.056108543 ubox
16 37 0.008790593 ubox
16 40 0.139241760 ubox
16 42 0.007766191 ubox
16 45 0.060187024 ubox
17 23 0.005740996 ubox
17 25 0.005334046 ubox
17 29 0.986902987 ubox
17 33 0.041777414 ubox
17 39 0.140659686 ubox
17 44 0.060330720 ubox
18 28 0.984169015 ubox
18 32 0.042267464 ubox
18 38 0.140666088 ubox
18 41 0.003528413 ubox
18 43 0.060233872 ubox
19 26 0.623755002 ubox
19 27 0.762886443 ubox
19 30 0.008363052 ubox
19 31 0.042113998 ubox
19 37 0.140520706 ubox
19 40 0.005766407 ubox
19 42 0.059784514 ubox
19 45 0.005685890 ubox
20 25 0.877134818 ubox
20 29 0.007867030 ubox
20 39 0.008738806 ubox
20 44 0.004712683 ubox
21 29 0.042313786 ubox
21 33 0.141443276 ubox
21 39 0.047523971 ubox
21 44 0.005114510 ubox
22 28 0.042661670 ubox
22 32 0.141209032 ubox
22 38 0.047619525 ubox
22 41 0.022620113 ubox
22 43 0.006054136 ubox
23 27 0.041822665 ubox
23 30 0.096485902 ubox
23 31 0.105555763 ubox
23 37 0.046126837 ubox
23 40 0.028601861 ubox
23 42 0.006039040 ubox
23 45 0.004172895 ubox
24 29 0.134416182 ubox
24 33 0.029215184 ubox
24 39 0.028672699 ubox
24 44 0.004180347 ubox
25 32 0.022391692 ubox
25 38 0.022557249 ubox
25 40 0.005984203 ubox
25 43 0.003483243 ubox
26 39 0.006048204 ubox
29 40 0.004746931 ubox
29 45 0.014921313 ubox
29 66 0.003342159 ubox
30 39 0.004839599 ubox
30 44 0.014973230 ubox
32 64 0.031163934 ubox
33 42 0.030962103 ubox
33 51 0.004769550 ubox
33 62 0.004020870 ubox
33 63 0.035564632 ubox
34 40 0.003342811 ubox
34 41 0.030945831 ubox
34 50 0.004807223 ubox
34 61 0.007174007 ubox
34 62 0.035437446 ubox
35 40 0.025121284 ubox
35 60 0.010646560 ubox
35 61 0.034431320 ubox
36 59 0.010908845 ubox
38 44 0.006685350 ubox
38 55 0.022646279 ubox
38 59 0.028842093 ubox
38 64 0.030510199 ubox
38 67 0.015139647 ubox
38 70 0.015060892 ubox
39 43 0.005681668 ubox
39 45 0.052337900 ubox
39 54 0.025263653 ubox
39 56 0.024639817 ubox
39 58 0.030914729 ubox
39 60 0.005729011 ubox
39 63 0.034366582 ubox
39 65 0.014076777 ubox
39 66 0.016839814 ubox
39 68 0.019512929 ubox
39 69 0.016593453 ubox
39 71 0.018723127 ubox
40 44 0.049113458 ubox
40 55 0.023274723 ubox
40 59 0.005825237 ubox
40 64 0.013573450 ubox
40 67 0.019294138 ubox
40 70 0.018298799 ubox
43 55 0.033059042 ubox
43 59 0.031316848 ubox
43 64 0.022358356 ubox
43 67 0.021420381 ubox
43 70 0.012854431 ubox
44 54 0.036517722 ubox
44 58 0.033369053 ubox
44 63 0.023507816 ubox
44 66 0.022645990 ubox
44 69 0.014426978 ubox
2 45 0.9500000 lbox
3 44 0.9500000 lbox
7 40 0.9500000 lbox
8 39 0.9500000 lbox
12 34 0.9500000 lbox
13 33 0.9500000 lbox
14 32 0.9500000 lbox
16 30 0.9500000 lbox
17 29 0.9500000 lbox
18 28 0.9500000 lbox
19 26 0.9500000 lbox
20 25 0.9500000 lbox
showpage
end
%%EOF
