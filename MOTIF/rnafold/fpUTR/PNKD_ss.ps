%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAGUUCUCCUGGGUCCGCUCUGCGGGCUUCUGGGAGAUGUAGUUUCUGGUCUGUAGGCAGGACGGAAGGAGCGGGGGAGGCCCCUUACGCAAACUACAAUUCCCGGCGGGGAGCGCGGUGAAGCGGGGGUGGGAUCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[120.81003571 729.85491943]
[108.54447937 739.82141113]
[92.83283234 738.11267090]
[82.99654388 725.74243164]
[84.87130737 710.04974365]
[97.34485626 700.34478760]
[98.96663666 685.43267822]
[100.58842468 670.52062988]
[102.21021271 655.60858154]
[103.34659576 640.65167236]
[103.99637604 625.66577148]
[104.64615631 610.67980957]
[105.29593658 595.69390869]
[93.54104614 586.58563232]
[89.35395813 572.13116455]
[94.54171753 557.81542969]
[107.31189728 549.19982910]
[107.96167755 534.21386719]
[108.61145782 519.22796631]
[109.26123810 504.24206543]
[109.91102600 489.25613403]
[110.56080627 474.27020264]
[110.72329712 459.27108765]
[110.39833069 444.27462769]
[110.07336426 429.27813721]
[109.74839783 414.28164673]
[109.42343140 399.28518677]
[95.47225189 387.51614380]
[94.46164703 368.97402954]
[107.48870850 355.29873657]
[106.51441193 340.33041382]
[97.96678162 328.13256836]
[104.79138947 313.85897827]
[103.81709290 298.89065552]
[102.84280396 283.92233276]
[101.86851501 268.95401001]
[100.89422607 253.98567200]
[99.91992950 239.01734924]
[98.94564056 224.04902649]
[90.39801025 211.85119629]
[97.22261047 197.57760620]
[96.24832153 182.60926819]
[95.27403259 167.64094543]
[94.29974365 152.67262268]
[93.32544708 137.70429993]
[92.35115814 122.73597717]
[91.37686920 107.76764679]
[86.43363953 93.60556793]
[77.88183594 81.28215027]
[69.33002472 68.95873260]
[60.77822113 56.63531876]
[45.48046112 53.69998169]
[36.98326492 41.08045959]
[39.87593460 26.51447105]
[31.32412720 14.19105244]
[22.77232170 1.86763537]
[7.71631670 -4.63226700]
[6.08641243 -20.95021629]
[19.55931473 -30.29970360]
[34.27525711 -23.06278038]
[35.09574127 -6.68417025]
[43.64754486 5.63924742]
[52.19935226 17.96266556]
[66.85665894 20.34988785]
[75.70496368 32.72576141]
[73.10163879 48.08351135]
[81.65344238 60.40692902]
[90.20525360 72.73034668]
[98.75705719 85.05376434]
[106.24121857 84.56661987]
[105.26715851 69.59828186]
[120.23551941 68.62445068]
[121.20954132 83.59233093]
[128.69371033 83.10518646]
[135.57585144 69.77716827]
[142.45800781 56.44915009]
[149.04980469 42.97516632]
[155.34812927 29.36153412]
[161.64646912 15.74790192]
[167.94480896 2.13427114]
[165.92829895 -14.14042473]
[179.17564392 -23.80686188]
[194.05909729 -16.92103958]
[195.26785278 -0.56649953]
[181.55844116 8.43260765]
[175.26010132 22.04623795]
[168.96176147 35.65987015]
[162.66342163 49.27350235]
[163.46986389 54.04933548]
[161.23216248 59.37490463]
[155.78602600 63.33130264]
[148.90386963 76.65931702]
[142.02172852 89.98733521]
[125.12992859 107.57556152]
[106.34519196 106.79335785]
[107.31948090 121.76168060]
[108.29377747 136.73001099]
[109.26806641 151.69833374]
[110.24235535 166.66665649]
[111.21664429 181.63497925]
[112.19094086 196.60331726]
[120.80825806 209.87178040]
[113.91397095 223.07473755]
[114.88825989 238.04306030]
[115.86254883 253.01138306]
[116.83683777 267.97970581]
[117.81112671 282.94802856]
[118.78542328 297.91635132]
[119.75971222 312.88467407]
[128.37702942 326.15316772]
[121.48274231 339.35610962]
[122.45703125 354.32443237]
[132.81924438 360.32986450]
[138.90354919 370.50601196]
[139.28129578 382.23593140]
[133.97427368 392.56832886]
[124.41990662 398.96020508]
[124.74487305 413.95669556]
[125.06983948 428.95315552]
[125.39480591 443.94964600]
[125.71977234 458.94613647]
[128.51261902 463.53134155]
[129.15100098 468.25292969]
[127.95526123 472.24963379]
[125.54672241 474.91998291]
[124.89694214 489.90591431]
[124.24716187 504.89184570]
[123.59738159 519.87774658]
[122.94760132 534.86364746]
[122.29781342 549.84960938]
[134.27433777 559.53820801]
[138.20350647 574.24926758]
[132.78100586 588.28704834]
[120.28186035 596.34368896]
[119.63208008 611.32958984]
[118.98229218 626.31555176]
[118.33251190 641.30145264]
[120.82163239 646.05841064]
[121.15199280 650.81146240]
[119.69918060 654.72210693]
[117.12228394 657.23034668]
[115.50049591 672.14239502]
[113.87870789 687.05450439]
[112.25692749 701.96655273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 144]
[7 143]
[8 142]
[9 141]
[10 137]
[11 136]
[12 135]
[13 134]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[22 125]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[30 112]
[31 111]
[33 109]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[41 101]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 69]
[49 68]
[50 67]
[51 66]
[54 63]
[55 62]
[56 61]
[74 93]
[75 92]
[76 91]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
