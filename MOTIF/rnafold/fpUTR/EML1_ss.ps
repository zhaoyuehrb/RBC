%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAGUGUGUGGUGAGCGGCGGCGGCGCGGCCGGGCCGGGGAGCGGGCGCGGCCCGGCGGCCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[38.65769958 182.58624268]
[29.12519646 176.97288513]
[16.98994255 185.78967285]
[4.85468721 194.60644531]
[-7.28056765 203.42321777]
[-19.41582298 212.24000549]
[-19.28115654 227.75650024]
[-28.31996155 240.36917114]
[-43.05662918 245.22821045]
[-57.82461548 240.46519470]
[-66.94532013 227.91162109]
[-66.91165924 212.39457703]
[-57.73656082 199.88069153]
[-42.94804764 195.18180847]
[-28.23260117 200.10475159]
[-16.09734535 191.28796387]
[-3.96209145 182.47119141]
[8.17316341 173.65441895]
[20.30841827 164.83763123]
[18.65569496 145.75276184]
[28.48625565 129.15342712]
[46.26433182 121.31960297]
[65.41378021 125.32150269]
[75.77971649 114.47957611]
[86.14565277 103.63765717]
[89.64672852 90.10125732]
[103.01242065 85.99640656]
[113.37836456 75.15447998]
[113.19751740 59.57869720]
[123.86450195 48.73110962]
[138.71475220 48.65469742]
[149.08068848 37.81277466]
[159.44662476 26.97084999]
[169.81256104 16.12892723]
[180.17851257 5.28700447]
[184.12281799 -10.03464890]
[198.51063538 -13.88689613]
[208.87657166 -24.72881889]
[219.24250793 -35.57074356]
[216.33943176 -50.81383133]
[222.98089600 -64.83776093]
[236.61312866 -72.25003815]
[251.99426270 -70.20050049]
[263.20993042 -59.47722626]
[265.94747925 -44.20354080]
[259.15426636 -30.25248718]
[245.44242859 -22.98852730]
[230.08444214 -25.20480156]
[219.71849060 -14.36287975]
[209.35255432 -3.52095628]
[206.14968872 11.02520943]
[191.02043152 15.65294361]
[180.65449524 26.49486732]
[170.28855896 37.33678818]
[159.92260742 48.17871475]
[149.55667114 59.02063751]
[150.14659119 73.85935211]
[139.78849792 85.00227356]
[124.22028351 85.52042389]
[113.85434723 96.36234283]
[110.35327148 109.89874268]
[96.98757935 114.00359344]
[86.62163544 124.84552002]
[76.25569916 135.68743896]
[80.51210785 146.19515991]
[80.84494781 157.48809814]
[77.23991394 168.15393066]
[70.17346191 176.86827087]
[60.55003738 182.55909729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[23 64]
[24 63]
[25 62]
[27 60]
[28 59]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
