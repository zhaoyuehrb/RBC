%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCGGCCGGGCGGGGCGAGCGGAGGCGAGUGGAGGACGCGUAGACGCGCCGCGGUCCCCGCCUGCCGCUGCUCCGCCGCAGUCGCCGCUCCAGUCUAUCCGGCACUAGGAACAGCCCCGAGCGGCGAGACGGUCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[69.84397125 284.12756348]
[62.19227982 269.62295532]
[71.15560150 255.89012146]
[71.48056793 240.89364624]
[71.80553436 225.89715576]
[72.13050079 210.90068054]
[64.67074585 198.00877380]
[72.70520782 184.37947083]
[73.03017426 169.38298035]
[73.35514069 154.38650513]
[73.68010712 139.39002991]
[74.00507355 124.39354706]
[66.27176666 111.54068756]
[52.86997604 104.80332184]
[39.46818924 98.06595612]
[26.06640244 91.32859039]
[12.66461372 84.59122467]
[-0.73717344 77.85385895]
[-14.13896084 71.11649323]
[-27.54074860 64.37913513]
[-36.68807602 63.30401993]
[-41.15752411 57.34787369]
[-54.41020584 50.32174683]
[-67.66288757 43.29561996]
[-80.91556549 36.26949310]
[-94.16825104 29.24336815]
[-107.49626160 22.36121750]
[-120.89804840 15.62385273]
[-134.29983521 8.88648796]
[-147.70162964 2.14912224]
[-161.10340881 -4.58824301]
[-171.30438232 -0.55275899]
[-181.81796265 -2.79326820]
[-189.17884827 -10.32191753]
[-191.09942627 -20.45008469]
[-204.19677734 -27.76167488]
[-217.29412842 -35.07326508]
[-230.69590759 -41.81063080]
[-244.37696838 -47.96112442]
[-253.56228638 -48.63897324]
[-258.28555298 -54.39591599]
[-271.83016968 -60.84135818]
[-285.37475586 -67.28680420]
[-298.91937256 -73.73223877]
[-315.21493530 -71.89215088]
[-324.73730469 -85.24343109]
[-317.69067383 -100.05142975]
[-301.32400513 -101.08294678]
[-292.47393799 -87.27684784]
[-278.92932129 -80.83140564]
[-265.38470459 -74.38596344]
[-251.84011841 -67.94052124]
[-238.22648621 -61.64218521]
[-224.54542542 -55.49169159]
[-221.82650757 -56.42261887]
[-218.56222534 -56.29160309]
[-215.17076111 -54.88037872]
[-212.14299011 -52.13177109]
[-209.98252869 -48.17061996]
[-196.88517761 -40.85902786]
[-183.78782654 -33.54743958]
[-164.57609558 -35.31489944]
[-154.36604309 -17.99003029]
[-140.96426392 -11.25266552]
[-127.56247711 -4.51529980]
[-114.16069031 2.22206545]
[-100.75889587 8.95943069]
[-93.31488037 9.15500832]
[-87.14212036 15.99068737]
[-73.88944244 23.01681328]
[-60.63676071 30.04294014]
[-47.38407898 37.06906891]
[-34.13139725 44.09519577]
[-20.80338287 50.97734451]
[-7.40159559 57.71471024]
[6.00019217 64.45207214]
[19.40197945 71.18943787]
[32.80376816 77.92680359]
[46.20555496 84.66416931]
[59.60734177 91.40153503]
[73.00913239 98.13890076]
[78.65850830 85.01406097]
[89.87432861 77.03293610]
[103.08198547 76.07501221]
[114.39949799 81.87937164]
[120.77807617 92.27445984]
[135.77719116 92.11196899]
[150.77632141 91.94947815]
[165.77543640 91.78697968]
[180.77455139 91.62448883]
[195.77368164 91.46199799]
[210.77279663 91.29949951]
[225.77191162 91.13700867]
[240.77104187 90.97451782]
[252.73556519 78.26116180]
[269.85595703 78.10025024]
[281.58636475 90.10493469]
[296.57843018 89.61753082]
[305.33187866 76.94143677]
[319.70297241 71.90905762]
[334.11126709 76.25248718]
[343.09164429 88.10535431]
[358.08374023 87.61795807]
[373.07580566 87.13055420]
[382.58996582 74.72026825]
[397.86651611 71.37949371]
[411.69238281 78.68564606]
[417.53936768 93.18897247]
[412.64675903 108.04145813]
[399.32464600 116.23020172]
[383.86334229 113.88874054]
[373.56323242 102.12263489]
[358.57113647 102.61003113]
[343.57907104 103.09743500]
[335.38751221 115.50858307]
[321.29177856 120.77869415]
[306.62414551 116.69038391]
[297.06585693 104.60961151]
[282.07376099 105.09701538]
[274.63253784 115.66893768]
[262.26879883 120.06855774]
[249.44631958 116.46848297]
[240.93353271 105.97363281]
[225.93440247 106.13613129]
[210.93528748 106.29862213]
[195.93617249 106.46111298]
[180.93704224 106.62361145]
[165.93792725 106.78610229]
[150.93881226 106.94859314]
[135.93969727 107.11108398]
[120.94056702 107.27358246]
[115.05155182 118.43209076]
[103.37336731 125.20114136]
[89.00154877 124.71851349]
[88.67658234 139.71499634]
[88.35161591 154.71147156]
[88.02664948 169.70794678]
[87.70168304 184.70443726]
[95.13819122 198.66899109]
[87.12698364 211.22564697]
[86.80201721 226.22212219]
[86.47705078 241.21861267]
[86.15207672 256.21508789]
[94.51210022 270.32330322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 140]
[8 138]
[9 137]
[10 136]
[11 135]
[12 134]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[35 61]
[36 60]
[37 59]
[38 54]
[39 53]
[41 52]
[42 51]
[43 50]
[44 49]
[86 131]
[87 130]
[88 129]
[89 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[97 119]
[98 118]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
