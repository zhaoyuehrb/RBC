%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGGCUGAGUCGGAGACUUCCUUUCCUGAUUGGCCGUGUUGUACGGCGGCUUCUCGCGCAGCUGAUGACCUGGAAGUGAUGCCUAAAGCUGUGGACCGCGUGGGCUCGCCUCCCUGGGACUAGGUUUCAGCGGCCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[-68.56224060 261.92568970]
[-82.67150116 269.01467896]
[-98.32707977 270.85415649]
[-113.64314270 267.24087524]
[-126.78105927 258.62744141]
[-138.68135071 267.75888062]
[-150.58164978 276.89028931]
[-162.48196411 286.02172852]
[-167.43354797 293.78973389]
[-174.74293518 295.21914673]
[-186.83959961 304.08880615]
[-198.93626404 312.95843506]
[-211.03294373 321.82809448]
[-223.03213501 330.82916260]
[-234.93243408 339.96057129]
[-246.83273315 349.09201050]
[-258.73303223 358.22341919]
[-270.63333130 367.35482788]
[-274.14453125 383.00894165]
[-288.63500977 389.89410400]
[-302.98892212 382.72860718]
[-306.19519043 367.00921631]
[-295.79421997 354.79449463]
[-279.76477051 355.45452881]
[-267.86447144 346.32312012]
[-255.96415710 337.19171143]
[-244.06385803 328.06027222]
[-232.16355896 318.92886353]
[-228.74588013 312.31149292]
[-219.90258789 309.73141479]
[-207.80590820 300.86178589]
[-195.70924377 291.99212646]
[-183.61257935 283.12249756]
[-171.61337280 274.12142944]
[-159.71307373 264.98999023]
[-147.81277466 255.85856628]
[-135.91247559 246.72715759]
[-140.58450317 233.32341003]
[-140.87799072 219.11030579]
[-136.75080872 205.48397827]
[-128.59568787 193.78709412]
[-117.20298004 185.17646790]
[-103.68397522 180.50872803]
[-89.36258698 180.25506592]
[-75.64564514 184.45372009]
[-63.88475037 192.70486450]
[-51.78808212 183.83522034]
[-39.69141388 174.96557617]
[-27.59474373 166.09593201]
[-15.49807453 157.22628784]
[-3.40140557 148.35664368]
[8.69526386 139.48699951]
[20.79193306 130.61735535]
[5.84393549 129.36940002]
[-6.15035248 120.36179352]
[-11.51605797 106.35432434]
[-8.60920620 91.63867950]
[1.67958426 80.72351074]
[16.19798088 76.95307922]
[30.49775696 81.48257446]
[40.19767380 92.92424011]
[42.32581711 107.77250671]
[36.23010254 121.47814941]
[49.82471848 115.13887787]
[63.41933441 108.79960632]
[77.01395416 102.46033478]
[90.60856628 96.12105560]
[96.05139160 90.08644867]
[104.56959534 89.79539490]
[118.29927063 83.75419617]
[132.02894592 77.71299744]
[145.75862122 71.67179871]
[159.48828125 65.63059235]
[172.63919067 58.41576385]
[185.11123657 50.08221054]
[197.58328247 41.74865723]
[204.75909424 27.64836121]
[219.64004517 27.01079750]
[232.11209106 18.67724419]
[244.58413696 10.34369087]
[257.05618286 2.01013756]
[262.50521851 -5.41740513]
[269.89242554 -6.36570168]
[282.54330444 -14.42519569]
[295.19418335 -22.48468971]
[307.84506226 -30.54418373]
[320.49591064 -38.60367966]
[324.06784058 -51.04883194]
[334.83355713 -57.49055862]
[346.70315552 -54.92390060]
[359.52682495 -62.70550156]
[360.67752075 -78.17984772]
[370.72970581 -90.00072479]
[385.81814575 -93.62274933]
[400.14099121 -87.65319061]
[408.19082642 -74.38745880]
[406.87234497 -58.92649841]
[396.69250488 -47.21537018]
[381.56567383 -43.75723648]
[367.30841064 -49.88182068]
[354.48474121 -42.10022354]
[346.93130493 -26.29580498]
[328.55541992 -25.95280647]
[315.90454102 -17.89331245]
[303.25366211 -9.83381844]
[290.60281372 -1.77432394]
[277.95193481 6.28517008]
[265.38973999 14.48218155]
[252.91767883 22.81573486]
[240.44563293 31.14928818]
[227.97360229 39.48284149]
[221.68986511 52.98706436]
[205.91682434 54.22069931]
[193.44479370 62.55425262]
[180.97274780 70.88780975]
[195.75294495 73.44625092]
[206.32664490 84.08565521]
[208.79347229 98.88142395]
[202.24348450 112.37578583]
[189.09280396 119.59101105]
[174.19236755 117.86560822]
[163.03855896 107.83602142]
[159.74572754 93.20190430]
[165.52949524 79.36026764]
[151.79981995 85.40146637]
[138.07014465 91.44266510]
[124.34046936 97.48387146]
[110.61080170 103.52507019]
[96.94784546 109.71567535]
[83.35322571 116.05494690]
[69.75860596 122.39421844]
[56.16399002 128.73348999]
[42.56937408 135.07276917]
[29.66157722 142.71401978]
[17.56490898 151.58366394]
[5.46823931 160.45330811]
[-6.62842989 169.32295227]
[-18.72509956 178.19259644]
[-30.82176781 187.06224060]
[-42.91843796 195.93188477]
[-55.01510620 204.80154419]
[-50.47934341 220.03782654]
[-51.41982269 235.88026428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[46 141]
[47 140]
[48 139]
[49 138]
[50 137]
[51 136]
[52 135]
[53 134]
[63 133]
[64 132]
[65 131]
[66 130]
[67 129]
[69 128]
[70 127]
[71 126]
[72 125]
[73 124]
[74 115]
[75 114]
[76 113]
[78 111]
[79 110]
[80 109]
[81 108]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[90 101]
[91 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
