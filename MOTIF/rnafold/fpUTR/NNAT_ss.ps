%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGGCGGGCGGGUACUUAAGGCGCGGCCACCGCGGCUGCGGCAGUGCGCCCAACAGCGGACUCCGAGACCAGCGGAUCUCGGCAAACCCUCUUUCUCGACCACCCACCUACCAUUCUUGGAACC\
) } def
/len { sequence length } bind def

/coor [
[186.43846130 396.42868042]
[180.99949646 382.44949341]
[175.56051636 368.47030640]
[170.12155151 354.49111938]
[164.68257141 340.51193237]
[159.24360657 326.53274536]
[145.54843140 320.79010010]
[139.83340454 306.69070435]
[145.94969177 292.36489868]
[140.51071167 278.38571167]
[134.89926147 264.47485352]
[129.11619568 250.63449097]
[123.33311462 236.79411316]
[117.55004120 222.95373535]
[104.80200195 222.68431091]
[93.07461548 217.56045532]
[84.15048218 208.32194519]
[79.40092468 196.33689880]
[79.57537079 183.39924622]
[84.68329620 171.46022034]
[93.98743439 162.33407593]
[88.89588928 148.22463989]
[83.80435181 134.11520386]
[71.80128479 125.11928558]
[56.82995987 124.19223785]
[41.85863495 123.26519775]
[26.88731003 122.33815002]
[11.91598415 121.41110992]
[-3.05534148 120.48406219]
[-18.02666664 119.55701447]
[-30.95379448 129.05801392]
[-46.40370941 124.73602295]
[-52.52456284 109.90649414]
[-44.62095642 95.94538879]
[-28.75586128 93.56246185]
[-17.09962273 104.58569336]
[-2.12829709 105.51273346]
[12.84302902 106.43978119]
[27.81435394 107.36682892]
[42.78567886 108.29386902]
[57.75700378 109.22091675]
[72.72833252 110.14795685]
[69.98619080 97.93814850]
[72.63544464 85.28401184]
[80.53437042 74.53017426]
[74.07391357 60.99272537]
[67.61345673 47.45528030]
[54.68687439 38.33310318]
[56.18815994 23.51435280]
[49.72770309 9.97690487]
[43.26724625 -3.56054258]
[28.28664017 -8.59611416]
[21.32935715 -22.78666687]
[26.52303314 -37.71319580]
[40.78634644 -44.52005768]
[55.65713120 -39.16886139]
[62.31281281 -24.83437729]
[56.80469513 -10.02099991]
[63.26515198 3.51644802]
[69.72560883 17.05389595]
[82.19009399 25.20778084]
[81.15090179 40.99482346]
[87.61135864 54.53226852]
[94.07181549 68.06971741]
[109.05346680 68.81152344]
[116.81963348 55.97849655]
[124.58580780 43.14546967]
[132.35198975 30.31244469]
[140.11814880 17.47941971]
[147.88432312 4.64639282]
[155.49118042 -8.28170490]
[162.93756104 -21.30289650]
[165.55180359 -38.05407715]
[182.37203979 -40.17918777]
[189.07040405 -24.60458755]
[175.95875549 -13.85651779]
[168.51237488 -0.83532560]
[167.91659546 6.61291361]
[160.71736145 12.41256618]
[152.95118713 25.24559212]
[145.18501282 38.07861710]
[137.41883850 50.91164398]
[129.65266418 63.74467087]
[121.88648987 76.57769775]
[128.96046448 87.44812012]
[131.07052612 100.04131317]
[128.02333069 112.23434448]
[120.48157501 122.03598785]
[109.82791901 127.91184998]
[97.91378784 129.02365112]
[103.00532532 143.13310242]
[108.09687042 157.24253845]
[125.37771606 159.88275146]
[138.91387939 170.80482483]
[145.08370972 186.97235107]
[142.29402161 203.96131897]
[131.39041138 217.17065430]
[137.17349243 231.01103210]
[142.95655823 244.85140991]
[148.73963928 258.69180298]
[155.00209045 265.49227905]
[154.48989868 272.94674683]
[159.92887878 286.92593384]
[174.11885071 293.35104370]
[179.43560791 307.60540771]
[173.22277832 321.09378052]
[178.66175842 335.07296753]
[184.10072327 349.05215454]
[189.53970337 363.03134155]
[194.97866821 377.01052856]
[200.41764832 390.98971558]
[218.97309875 403.45202637]
[215.44148254 424.76504517]
[222.23480225 438.13858032]
[229.02812195 451.51208496]
[243.05831909 460.00241089]
[242.45011902 476.39025879]
[227.82916260 483.81723022]
[214.23626709 474.64309692]
[215.65461731 458.30538940]
[208.86129761 444.93188477]
[202.06796265 431.55838013]
[193.99581909 430.73785400]
[186.85401917 426.69131470]
[181.88792419 420.03674316]
[179.99847412 411.85397339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[9 103]
[10 102]
[11 100]
[12 99]
[13 98]
[14 97]
[21 92]
[22 91]
[23 90]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[45 64]
[46 63]
[47 62]
[49 60]
[50 59]
[51 58]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 77]
[72 76]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
