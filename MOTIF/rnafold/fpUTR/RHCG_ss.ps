%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAAAGCCCCGCCGGCCUCCGAGCGUCCGAACCGCCCGCUGCCAGCCCGGCCAGGCACCCCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[100.38265228 324.12637329]
[90.61314392 312.59173584]
[84.67909241 298.68927002]
[83.10815430 283.65521240]
[86.04000854 268.82632446]
[93.21396637 255.52122498]
[103.99212646 244.92297363]
[117.41609192 237.97396851]
[114.73773193 223.21502686]
[112.05937958 208.45608521]
[99.70786285 200.21136475]
[96.78138733 185.28184509]
[105.51296234 172.38233948]
[102.83460999 157.62339783]
[100.15625763 142.86444092]
[97.47789764 128.10549927]
[94.79954529 113.34655762]
[85.90625000 102.55764008]
[90.44150543 89.33179474]
[87.76315308 74.57284546]
[73.94150543 67.77078247]
[66.85817719 54.29191589]
[69.04405975 39.40279388]
[79.45351410 28.78294182]
[76.77516174 14.02399826]
[74.09680939 -0.73494524]
[71.41844940 -15.49388885]
[58.71108246 -24.50280190]
[56.20509720 -39.50862503]
[64.87203217 -51.56763840]
[62.19367981 -66.32658386]
[53.41632080 -80.83155823]
[64.92462158 -93.28127289]
[80.07360840 -85.66914368]
[76.95262146 -69.00493622]
[79.63097382 -54.24599457]
[91.98249817 -46.00126648]
[94.90897369 -31.07175064]
[86.17739868 -18.17224312]
[88.85575104 -3.41329861]
[91.53410339 11.34564495]
[94.21245575 26.10458946]
[107.68969727 32.38964462]
[114.96786499 45.56129456]
[113.07233429 60.66958237]
[102.52210236 71.89449310]
[105.20045471 86.65344238]
[114.09375000 97.44235992]
[109.55849457 110.66820526]
[112.23684692 125.42715454]
[114.91519928 140.18609619]
[117.59355164 154.94503784]
[120.27190399 169.70397949]
[132.97927856 178.71289062]
[135.48526001 193.71871948]
[126.81832886 205.77774048]
[129.49667358 220.53668213]
[132.17503357 235.29562378]
[147.18472290 237.08467102]
[160.99955750 243.21995544]
[172.39114380 253.15589905]
[180.34654236 266.00903320]
[184.15838623 280.63644409]
[183.48768616 295.73748779]
[178.39411926 309.96939087]
[169.33058167 322.06665039]
[157.10299683 330.95358276]
[142.79864502 335.83999634]
[127.68946075 336.29138184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[19 47]
[20 46]
[24 42]
[25 41]
[26 40]
[27 39]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
