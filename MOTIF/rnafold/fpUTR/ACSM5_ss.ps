%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUGGGGCUGAAGUUCCCUGUGGGAGGCUGUUUUCUGAGGGAGCUGAGUGUUUACAGCCACUCAGCCCUGCUCUGCUCAGCUGAAGCAGAAAACAGAGACCUUUUGCAUUACUUUGGUUCAAGAGCAAGGAGGCGACUGC\
) } def
/len { sequence length } bind def

/coor [
[248.79598999 638.25244141]
[244.28540039 623.94665527]
[233.07904053 614.13507080]
[236.30844116 598.64697266]
[231.79785156 584.34124756]
[227.28727722 570.03546143]
[222.77668762 555.72973633]
[218.26609802 541.42395020]
[213.75550842 527.11822510]
[208.70613098 521.64337158]
[209.30624390 512.45092773]
[205.10881042 498.05020142]
[200.91137695 483.64947510]
[196.71394348 469.24871826]
[192.51651001 454.84796143]
[188.31907654 440.44720459]
[184.12164307 426.04647827]
[173.08612061 422.82104492]
[164.91831970 414.55938721]
[161.75425720 403.25595093]
[164.50164795 391.72033691]
[172.58355713 382.87893677]
[169.01828003 368.30880737]
[165.45298767 353.73867798]
[161.88769531 339.16854858]
[158.32240295 324.59841919]
[154.75712585 310.02828979]
[151.19183350 295.45816040]
[147.62654114 280.88803101]
[144.06124878 266.31787109]
[140.02114868 251.87220764]
[135.51057434 237.56645203]
[130.99998474 223.26069641]
[126.48939514 208.95494080]
[121.97880554 194.64918518]
[117.46822357 180.34344482]
[112.95763397 166.03768921]
[108.44704437 151.73193359]
[103.93646240 137.42617798]
[99.42587280 123.12042236]
[75.52958679 111.74494171]
[75.21379852 81.11882019]
[66.08238220 69.21852112]
[56.95095825 57.31821823]
[49.18293381 52.36661911]
[47.75352097 45.05724335]
[38.88387680 32.96057510]
[30.01423073 20.86390495]
[21.14458656 8.76723671]
[12.27494240 -3.32943273]
[3.40529728 -15.42610168]
[-5.46434736 -27.52276993]
[-14.33399200 -39.61943817]
[-29.84974861 -39.41707230]
[-42.50174332 -48.40075684]
[-47.42502975 -63.11608505]
[-42.72650528 -77.90470886]
[-30.21284294 -87.08010864]
[-14.69580460 -87.11415100]
[-2.14200854 -77.99374390]
[2.62135577 -63.22587204]
[-2.23732328 -48.48908615]
[6.63232136 -36.39241409]
[15.50196648 -24.29574585]
[24.37161064 -12.19907761]
[33.24125671 -0.10240832]
[42.11090088 11.99426079]
[50.98054504 24.09092903]
[59.85018921 36.18759918]
[68.85125732 48.18679810]
[77.98268127 60.08709717]
[87.11409760 71.98739624]
[101.85692596 69.22169495]
[106.05435944 54.82094574]
[110.25179291 40.42020035]
[102.43132782 26.68644905]
[106.69316864 11.46763515]
[120.50882721 3.79280782]
[135.68173218 8.21530628]
[143.21006775 22.11134148]
[138.62739563 37.23664093]
[124.65254211 44.61763382]
[120.45510864 59.01838303]
[116.25767517 73.41912842]
[122.88989258 80.88749695]
[126.55880737 89.71273041]
[127.11750793 98.82283783]
[124.77967834 107.20014191]
[120.06836700 113.99457550]
[113.73162842 118.60983276]
[118.24221039 132.91558838]
[122.75279999 147.22134399]
[127.26338959 161.52709961]
[131.77397156 175.83285522]
[136.28456116 190.13861084]
[140.79515076 204.44436646]
[145.30574036 218.75010681]
[149.81632996 233.05586243]
[154.32690430 247.36161804]
[158.29437256 250.98365784]
[160.22946167 255.34054565]
[160.19877625 259.51434326]
[158.63139343 262.75259399]
[162.19667053 277.32272339]
[165.76196289 291.89285278]
[169.32725525 306.46298218]
[172.89254761 321.03311157]
[176.45782471 335.60324097]
[180.02311707 350.17337036]
[183.58840942 364.74349976]
[187.15368652 379.31365967]
[203.68533325 388.44461060]
[208.29144287 406.43258667]
[198.52238464 421.84902954]
[202.71981812 436.24978638]
[206.91725159 450.65054321]
[211.11468506 465.05126953]
[215.31211853 479.45202637]
[219.50956726 493.85278320]
[223.70700073 508.25350952]
[228.06126404 522.60760498]
[232.57185364 536.91339111]
[237.08244324 551.21911621]
[241.59303284 565.52490234]
[246.10360718 579.83062744]
[250.61419678 594.13641357]
[262.14318848 604.97119141]
[258.59115601 619.43609619]
[263.10174561 633.74182129]
[278.25012207 634.68579102]
[292.03292847 641.04180908]
[302.58615112 651.95019531]
[308.48254395 665.93579102]
[308.92471313 681.10711670]
[303.85278320 695.41235352]
[293.95275879 706.91687012]
[280.56350708 714.06475830]
[265.49581909 715.88934326]
[250.78746033 712.14379883]
[238.42764282 703.33477783]
[230.08790588 690.65356445]
[226.89614868 675.81518555]
[229.28402710 660.82641602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[9 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[22 111]
[23 110]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[29 104]
[30 103]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[42 72]
[43 71]
[44 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
