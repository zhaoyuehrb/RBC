%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUGUCUCUCGCUGCAGCCGGAGGUCAAGGUCUCGUCCUUACUGCUGUGUGUCCUCUGCUCCUAGAGUCCCAGCCUCUGUGGCCCUAUGACCUGCAGGUAUUGGGAGAUCCACAACUAAGUCGCCAGGACCCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[242.79586792 325.29183960]
[233.98703003 315.16897583]
[228.73410034 302.79605103]
[227.56578064 289.38217163]
[230.61083984 276.24288940]
[237.58415222 264.67123413]
[228.02279663 253.11354065]
[218.46144104 241.55584717]
[208.90007019 229.99813843]
[199.33871460 218.44044495]
[189.77735901 206.88275146]
[180.21598816 195.32504272]
[170.65463257 183.76734924]
[160.61767578 172.62017822]
[150.12272644 161.90309143]
[139.62777710 151.18598938]
[129.13282776 140.46890259]
[118.63787842 129.75181580]
[108.14292908 119.03472137]
[90.79457092 118.54421997]
[79.91506958 105.02229309]
[65.03334808 103.14229584]
[50.15162659 101.26229858]
[35.26990509 99.38229370]
[20.38818550 97.50229645]
[5.50646496 95.62229919]
[-9.15462971 101.56896973]
[-20.81180191 92.29753113]
[-35.69352341 90.41753387]
[-50.69023132 90.10339355]
[-65.63762665 91.35856628]
[-80.58502197 92.61373138]
[-90.59329987 104.84523773]
[-106.32730103 106.33413696]
[-118.45231628 96.19709778]
[-119.77478027 80.44823456]
[-109.51010895 68.43107605]
[-93.74814606 67.27518463]
[-81.84018707 77.66633606]
[-66.89279175 76.41117096]
[-51.94540024 75.15600586]
[-64.40348816 66.80159760]
[-71.13938904 53.39907455]
[-70.40993500 38.41682053]
[-62.40390778 25.73204613]
[-49.19315720 18.62739944]
[-34.19644547 18.94146538]
[-21.29472160 26.59297180]
[-13.82677937 39.60181046]
[-13.72522163 54.60146713]
[-21.01633072 67.71022797]
[-33.81352615 75.53581238]
[-18.93180466 77.41580963]
[-5.33514929 71.33467102]
[7.38646364 80.74057770]
[22.26818466 82.62057495]
[37.14990616 84.50057983]
[52.03162384 86.38057709]
[66.91334534 88.26057434]
[81.79506683 90.14057159]
[86.97097015 83.91049194]
[94.14104462 80.14299774]
[95.39620972 65.19560242]
[88.84081268 50.79639053]
[97.61596680 38.76119614]
[98.87113953 23.81380272]
[100.12630463 8.86641026]
[93.57090759 -5.53280401]
[102.34606171 -17.56799889]
[103.60123444 -32.51539230]
[104.85639954 -47.46278381]
[98.30100250 -61.86199951]
[107.07615662 -73.89719391]
[108.33132935 -88.84458923]
[109.58649445 -103.79197693]
[104.88674164 -120.08150482]
[119.23864746 -129.10697937]
[131.88439941 -117.81444550]
[124.53388977 -102.53681183]
[123.27871704 -87.58941650]
[122.02355194 -72.64202881]
[128.66873169 -59.31195068]
[119.80379486 -46.20761871]
[118.54862213 -31.26022339]
[117.29345703 -16.31283188]
[123.93862915 -2.98275495]
[115.07369995 10.12157726]
[113.81852722 25.06896973]
[112.56336212 40.01636505]
[119.20853424 53.34643936]
[110.34360504 66.45077515]
[109.08843231 81.39816284]
[119.47937012 92.98699951]
[118.86001587 108.53977203]
[129.35496521 119.25686646]
[139.84991455 129.97395325]
[150.34486389 140.69104004]
[160.83981323 151.40812683]
[171.33476257 162.12522888]
[175.70610046 163.16664124]
[179.14208984 165.35508728]
[181.39236450 168.24232483]
[182.38301086 171.34477234]
[182.21234131 174.20599365]
[191.77369690 185.76368713]
[201.33505249 197.32138062]
[210.89640808 208.87908936]
[220.45777893 220.43678284]
[230.01913452 231.99447632]
[239.58049011 243.55218506]
[249.14184570 255.10987854]
[265.12960815 249.90469360]
[281.85604858 251.20834351]
[296.77902222 258.79461670]
[307.64123535 271.48455811]
[312.81167603 287.32971191]
[311.53045654 303.91110229]
[304.02038574 318.70864868]
[314.05734253 329.85580444]
[324.09429932 341.00299072]
[339.07833862 346.08123779]
[341.84463501 360.71670532]
[351.88159180 371.86389160]
[367.42733765 372.84753418]
[377.44744873 384.29531860]
[376.41387939 399.10977173]
[386.45083618 410.25692749]
[396.48779297 421.40411377]
[406.52474976 432.55126953]
[416.56170654 443.69845581]
[432.31695557 448.24871826]
[435.99072266 464.23104858]
[423.80377197 475.20422363]
[408.29299927 469.87997437]
[405.41455078 453.73541260]
[395.37759399 442.58822632]
[385.34063721 431.44107056]
[375.30364990 420.29388428]
[365.26669312 409.14672852]
[350.42538452 408.62609863]
[340.08770752 397.46426392]
[340.73440552 381.90084839]
[330.69744873 370.75366211]
[316.43130493 366.47274780]
[312.94711304 351.03994751]
[302.91015625 339.89276123]
[292.87319946 328.74560547]
[280.61730957 333.98156738]
[267.31994629 335.17001343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[14 99]
[15 98]
[16 97]
[17 96]
[18 95]
[19 94]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[28 53]
[29 52]
[30 41]
[31 40]
[32 39]
[62 92]
[63 91]
[65 89]
[66 88]
[67 87]
[69 85]
[70 84]
[71 83]
[73 81]
[74 80]
[75 79]
[118 147]
[119 146]
[120 145]
[122 143]
[123 142]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
