%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAAGCUUGAAGUGCAGUUUGCUGCUGAGUACAGAAGACCUUUGCAAACAGAGAGGGGAGAUUUUCUCUGUAAGGUUGCAAACAAGGUCCUGGAAGAUAAGAUUCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[72.39376068 210.37681580]
[60.44347000 201.31091309]
[53.89368820 187.81645203]
[54.16433334 172.81889343]
[61.19673920 159.56954956]
[73.46874237 150.93977356]
[81.62318420 138.34989929]
[68.43107605 145.48910522]
[55.23897171 152.62832642]
[42.04686356 159.76753235]
[28.85475922 166.90673828]
[26.57949638 170.97793579]
[23.40156555 173.75119019]
[19.87161446 175.10049438]
[16.52129364 175.10316467]
[13.79483128 174.01368713]
[-0.10257959 179.65834045]
[-13.99999046 185.30297852]
[-27.89740181 190.94761658]
[-37.53749084 204.21414185]
[-53.81616211 202.22998047]
[-59.98731613 187.03627014]
[-49.70259476 174.26298523]
[-33.54204178 177.05020142]
[-19.64463043 171.40556335]
[-5.74722004 165.76092529]
[8.15019131 160.11628723]
[21.71554756 153.71463013]
[34.90765381 146.57542419]
[48.09976196 139.43621826]
[61.29186630 132.29699707]
[74.48397064 125.15779114]
[68.08710480 114.12634277]
[66.08497620 101.87149811]
[68.50568390 90.03376770]
[74.80059814 80.11444092]
[83.94577789 73.28528595]
[94.60150909 70.25138855]
[105.30590820 71.18296051]
[111.70755005 57.61760330]
[118.10919952 44.05224609]
[124.51084900 30.48688698]
[130.91249084 16.92152977]
[137.31413269 3.35617256]
[143.14973450 -10.46214485]
[148.40928650 -24.50981331]
[153.66885376 -38.55748367]
[158.92842102 -52.60515213]
[164.18798828 -66.65281677]
[168.66571045 -80.96889496]
[172.34799194 -95.50989532]
[176.03027344 -110.05090332]
[179.71255493 -124.59190369]
[183.39483643 -139.13290405]
[187.07711792 -153.67391968]
[190.75939941 -168.21492004]
[194.44168091 -182.75592041]
[198.12396240 -197.29692078]
[201.80624390 -211.83793640]
[196.82574463 -227.46247864]
[208.06530762 -239.40417480]
[223.96264648 -235.37841797]
[228.16394043 -219.52656555]
[216.34724426 -208.15565491]
[212.66496277 -193.61463928]
[208.98268127 -179.07363892]
[205.30039978 -164.53263855]
[201.61811829 -149.99163818]
[197.93583679 -135.45062256]
[194.25355530 -120.90962219]
[190.57127380 -106.36862183]
[186.88899231 -91.82761383]
[183.20671082 -77.28661346]
[184.66033936 -74.73563385]
[185.11787415 -71.41670227]
[184.26620483 -67.73487091]
[181.95574951 -64.20614624]
[178.23565674 -61.39325714]
[172.97608948 -47.34558868]
[167.71652222 -33.29792023]
[162.45695496 -19.25024986]
[157.19740295 -5.20258141]
[158.41841125 -1.75461507]
[157.94122314 2.47467804]
[155.40957642 6.63774776]
[150.87950134 9.75781918]
[144.47784424 23.32317734]
[138.07620239 36.88853455]
[131.67456055 50.45389175]
[125.27291107 64.01924896]
[118.87126160 77.58460236]
[130.83956909 93.68984222]
[130.04615784 115.16340637]
[115.07477570 132.50743103]
[124.92605591 143.81903076]
[134.77734375 155.13063049]
[144.62861633 166.44223022]
[160.25920105 165.97407532]
[172.50173950 175.70310974]
[175.57569885 191.03558350]
[168.02964783 204.73196411]
[153.42658997 210.32525635]
[138.66165161 205.17446899]
[130.70639038 191.71163940]
[133.31701660 176.29350281]
[123.46574402 164.98191833]
[113.61446381 153.67031860]
[103.76318359 142.35871887]
[106.98542023 157.00852966]
[115.45145416 169.39103699]
[117.39284515 184.26486206]
[112.38873291 198.40554810]
[101.52394867 208.74752808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[16 27]
[17 26]
[18 25]
[19 24]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
