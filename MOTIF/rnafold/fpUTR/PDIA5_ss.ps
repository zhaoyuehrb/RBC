%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCAUGCUUUGGCAGACGUGGCACCGGGAACUCGGAGGCGGGGAGCGGCUGGGAAGUGGCCGUGGUGGUUGGCCGCGGUGGAGCUAGCAGGCGGGCGGGCGGGAGCGGGCGCCGGAGUGGAGAAAGGAGCCAGCGGUGGGCAGCGCUGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[312.04916382 380.14392090]
[308.70687866 356.96441650]
[317.15145874 335.05471802]
[306.59805298 324.39517212]
[296.04464722 313.73565674]
[285.49124146 303.07611084]
[271.03842163 299.47534180]
[266.82757568 284.22479248]
[256.27416992 273.56524658]
[245.72074890 262.90573120]
[235.16734314 252.24620056]
[224.61393738 241.58666992]
[214.06053162 230.92713928]
[199.60771179 227.32635498]
[195.39686584 212.07580566]
[184.84344482 201.41627502]
[174.59326172 202.28076172]
[165.38092041 197.22836304]
[160.39505005 187.73034668]
[161.51327515 176.84019470]
[151.39480591 165.76696777]
[141.27633667 154.69372559]
[124.30213165 150.33404541]
[120.42799377 132.35852051]
[110.08998108 121.48996735]
[94.52357483 125.49250793]
[78.43121338 118.48695374]
[69.31106567 101.78300476]
[54.31181335 101.93307495]
[47.15861511 113.75235748]
[35.18718719 120.42800903]
[21.58928108 120.30310822]
[9.92994308 113.51773834]
[3.21285868 101.94412231]
[-11.78639030 101.79404449]
[-26.78564072 101.64397430]
[-41.78488922 101.49390411]
[-55.79467392 110.01786041]
[-70.04971313 101.91070557]
[-69.88564301 85.51238251]
[-55.47124100 77.69207764]
[-41.63481522 86.49465179]
[-26.63556671 86.64472198]
[-11.63631725 86.79479980]
[3.36293221 86.94487000]
[12.69248009 73.46912384]
[28.36632156 68.13708496]
[44.29397964 73.22908783]
[54.16174316 86.93383026]
[69.16098785 86.78375244]
[78.00203705 74.66616821]
[73.56705475 60.33679199]
[69.13206482 46.00741959]
[64.69708252 31.67804718]
[60.26210022 17.34867477]
[47.39356995 15.68194962]
[36.16173935 9.27809906]
[28.23053169 -0.87324423]
[24.75930786 -13.23040485]
[26.23350716 -25.93374825]
[32.39708710 -37.08552551]
[42.29615402 -45.03339005]
[38.43803406 -59.52873230]
[34.57991409 -74.02407074]
[30.72179413 -88.51941681]
[26.86367416 -103.01475525]
[23.00555420 -117.51009369]
[19.14743423 -132.00543213]
[15.28931522 -146.50077820]
[2.18589044 -155.75712585]
[1.39681804 -171.78076172]
[13.52740669 -182.27972412]
[29.27210617 -179.20011902]
[36.55293274 -164.90434265]
[29.78465652 -150.35890198]
[33.64277649 -135.86355591]
[37.50089645 -121.36821747]
[41.35901642 -106.87287903]
[45.21713638 -92.37753296]
[49.07525635 -77.88219452]
[52.93337631 -63.38685226]
[56.79149628 -48.89151001]
[73.52635193 -45.04490280]
[86.09555054 -33.21613312]
[91.00003052 -16.57524490]
[86.81253052 0.35172310]
[74.59147644 12.91369057]
[79.02645874 27.24306297]
[83.46144104 41.57243729]
[87.89642334 55.90180969]
[92.33140564 70.23117828]
[114.07843018 75.32657623]
[125.04678345 92.75308228]
[120.95854187 111.15195465]
[131.29655457 122.02050781]
[144.18331909 123.13333893]
[152.57138062 132.44569397]
[152.34956360 144.57525635]
[162.46803284 155.64848328]
[172.58651733 166.72172546]
[192.03762817 171.87289429]
[195.50297546 190.86286926]
[206.05638123 201.52238464]
[221.26403809 205.88562012]
[224.72004700 220.37373352]
[235.27346802 231.03326416]
[245.82687378 241.69277954]
[256.38027954 252.35231018]
[266.93368530 263.01184082]
[277.48709106 273.67138672]
[292.69476318 278.03460693]
[296.15075684 292.52270508]
[306.70416260 303.18225098]
[317.25756836 313.84176636]
[327.81100464 324.50128174]
[334.66177368 320.49884033]
[342.08798218 317.72158813]
[349.87261963 316.24859619]
[357.78857422 316.12088013]
[365.60525513 317.34014893]
[373.09533691 319.86898804]
[380.04122925 323.63186646]
[386.24163818 328.51745605]
[391.51708984 334.38189697]
[395.71548462 341.05313110]
[398.71615601 348.33575439]
[400.43350220 356.01693726]
[400.81945801 363.87249756]
[399.86474609 371.67358398]
[397.59906006 379.19317627]
[394.09036255 386.21282959]
[389.44250488 392.52902222]
[383.79254150 397.95889282]
[391.24917603 410.97421265]
[398.70581055 423.98953247]
[406.16244507 437.00485229]
[413.61907959 450.02017212]
[421.07571411 463.03549194]
[428.53234863 476.05081177]
[435.98898315 489.06613159]
[443.44561768 502.08145142]
[458.48898315 507.65606689]
[463.37292480 522.93762207]
[454.35086060 536.20349121]
[438.34378052 537.27716064]
[427.63092041 525.33502197]
[430.43029785 509.53808594]
[422.97366333 496.52276611]
[415.51702881 483.50744629]
[408.06039429 470.49212646]
[400.60375977 457.47680664]
[393.14712524 444.46148682]
[385.69049072 431.44616699]
[378.23385620 418.43084717]
[370.77719116 405.41552734]
[347.67218018 407.86596680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 112]
[8 110]
[9 109]
[10 108]
[11 107]
[12 106]
[13 105]
[15 103]
[16 102]
[20 100]
[21 99]
[22 98]
[24 95]
[25 94]
[28 50]
[29 49]
[34 45]
[35 44]
[36 43]
[37 42]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[133 155]
[134 154]
[135 153]
[136 152]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
