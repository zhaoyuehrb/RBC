%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUGGCUGAGGGGAGCGAGCGGCGCUUUGGGGGAGGGGUCGCGUAGGCGCCUCACCUGACCCUGCGGCCGUGCGGUUGCUGCUCCGGGGCAGGUCUCCUUCCAGGCCAGGGGCCCGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[50.38623810 126.80334473]
[50.89739990 111.81205750]
[60.18051147 100.02970123]
[74.63601685 96.02492523]
[88.65699768 101.34915924]
[75.36853027 94.39095306]
[59.55380630 94.84377289]
[51.86792755 82.08538818]
[38.57946396 75.12717438]
[25.29099655 68.16896820]
[12.00252914 61.21076202]
[-1.28593719 54.25255585]
[-14.57440376 47.29434586]
[-27.94791412 40.50102615]
[-41.40442276 33.87363052]
[-54.86093140 27.24623299]
[-68.31743622 20.61883545]
[-83.28876495 19.69179153]
[-97.46009827 24.60843468]
[-111.63142395 29.52507973]
[-125.80275726 34.44172287]
[-139.97409058 39.35836792]
[-148.23884583 53.10876083]
[-164.16064453 55.07742691]
[-175.52566528 43.75417328]
[-173.61561584 27.82522774]
[-159.89572144 19.50991821]
[-144.89073181 25.18703651]
[-130.71940613 20.27039146]
[-116.54807281 15.35374832]
[-102.37673950 10.43710423]
[-88.20540619 5.52046061]
[-86.36900330 -1.75123823]
[-82.69618225 -16.29463577]
[-80.85977936 -23.56633568]
[-90.99742889 -34.62201309]
[-101.13507843 -45.67769241]
[-111.40869904 -56.60713959]
[-121.81670380 -67.40868378]
[-132.22471619 -78.21022797]
[-142.63272095 -89.01177979]
[-157.77986145 -93.58066559]
[-161.03923035 -108.11427307]
[-171.44723511 -118.91581726]
[-181.85525513 -129.71736145]
[-197.80430603 -131.45141602]
[-206.27059937 -145.07864380]
[-200.75952148 -160.14541626]
[-185.49867249 -165.09378052]
[-172.19490051 -156.12777710]
[-171.05369568 -140.12536621]
[-160.64569092 -129.32382202]
[-150.23768616 -118.52227783]
[-135.83500671 -114.72599030]
[-131.83117676 -99.41978455]
[-121.42316437 -88.61824036]
[-111.01515961 -77.81668854]
[-100.60714722 -67.01514435]
[-93.62547302 -64.35292816]
[-90.07940674 -55.81534195]
[-79.94174957 -44.75966644]
[-69.80410004 -33.70398712]
[-58.34802246 -19.33598709]
[-56.29630280 -4.11888885]
[-61.69004440 7.16232777]
[-48.23353577 13.78972435]
[-34.77702713 20.41711998]
[-21.32051849 27.04451752]
[-13.84969521 27.17884064]
[-7.61619616 34.00587845]
[5.67227077 40.96408844]
[18.96073723 47.92229462]
[32.24920273 54.88050461]
[45.53767014 61.83871078]
[58.82613754 68.79692078]
[73.69038391 67.84639740]
[82.32674408 81.10248566]
[95.61520386 88.06069183]
[110.47659302 90.09519958]
[125.14623260 86.96442413]
[131.76176453 71.45343018]
[146.15599060 62.99129105]
[162.59725952 64.71949005]
[174.67309570 75.76627350]
[189.26081848 72.27361298]
[203.84852600 68.78095245]
[218.43623352 65.28829193]
[233.02394104 61.79563141]
[244.54774475 50.12798309]
[260.34356689 54.53529358]
[264.16201782 70.48369598]
[252.07499695 81.56684113]
[236.51660156 76.38334656]
[221.92889404 79.87599945]
[207.34118652 83.36865997]
[192.75347900 86.86132050]
[178.16575623 90.35398102]
[174.18598938 103.15988922]
[164.30035400 112.38099670]
[151.03750610 115.51137543]
[137.86372375 111.62226868]
[128.27700806 101.63406372]
[113.60736847 104.76483917]
[108.34170532 118.81021881]
[117.33762360 130.81327820]
[126.33353424 142.81634521]
[135.32945251 154.81941223]
[149.79721069 161.22209167]
[151.23869324 176.04678345]
[160.23460388 188.04985046]
[169.23051453 200.05290222]
[178.22644043 212.05596924]
[192.56390381 221.10435486]
[187.83815002 237.38635254]
[170.88423157 237.35258484]
[166.22337341 221.05187988]
[157.22746277 209.04882812]
[148.23153687 197.04576111]
[139.23562622 185.04269409]
[125.41130829 179.49855042]
[123.32638550 163.81532288]
[114.33047485 151.81225586]
[105.33455658 139.80920410]
[96.33864594 127.80613708]
[87.34731293 139.81263733]
[72.99438477 144.17076111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 78]
[6 77]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 68]
[15 67]
[16 66]
[17 65]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[35 62]
[36 61]
[37 60]
[38 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
[79 103]
[80 102]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[104 124]
[105 123]
[106 122]
[107 121]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
