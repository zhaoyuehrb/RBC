%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCUCCAGCCGAGCGGACAGGCGUGGCGGCCGGAGCCCCAGCAUCCCUGCUUGAGGUCCAGGAGCGGAGCCCGCGGCCACCGCCGCCUGAUCAGCGCGACCCCGGCCCGCGCCCGCCCCGCCCGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[79.60076904 490.77044678]
[67.23532104 499.61151123]
[52.42668533 503.04263306]
[37.43307114 500.54064941]
[24.54089546 492.48706055]
[15.71612358 480.10998535]
[12.30446720 465.29684448]
[14.82618046 450.30654907]
[22.89672089 437.42498779]
[35.28538513 428.61648560]
[50.10300064 425.22433472]
[52.57191849 410.42889404]
[55.04083633 395.63348389]
[57.50975418 380.83807373]
[51.97282410 367.01086426]
[61.87602997 354.67242432]
[64.34494781 339.87701416]
[66.81386566 325.08157349]
[69.28278351 310.28616333]
[67.46120453 307.16195679]
[67.11921692 302.97628784]
[68.74948883 298.46145630]
[72.48621368 294.54611206]
[75.99650574 279.96264648]
[79.50679779 265.37915039]
[83.01708984 250.79568481]
[81.50953674 243.48675537]
[86.78634644 235.91120911]
[90.64010620 221.41470337]
[94.49386597 206.91821289]
[97.83168030 192.29429626]
[100.64936066 177.56130981]
[103.46704102 162.82833862]
[106.28472137 148.09535217]
[109.10240173 133.36238098]
[111.92008209 118.62939453]
[87.99880981 115.74895477]
[83.30031586 94.82089996]
[72.26445770 84.66167450]
[61.22859955 74.50245667]
[45.83515167 70.84836578]
[41.71172333 56.53590393]
[30.67586708 46.37668228]
[19.52079391 36.34850311]
[8.24806595 26.45276642]
[-3.02466273 16.55702972]
[-19.20419312 13.88218307]
[-24.72343063 -1.56029284]
[-13.90465546 -13.88450241]
[2.12270355 -10.41235542]
[6.87107325 5.28430128]
[18.14380264 15.18003750]
[29.41653061 25.07577324]
[36.58697510 27.14404297]
[40.83509064 35.34082031]
[51.87094879 45.50004578]
[66.47503662 48.42747498]
[71.38782501 63.46659470]
[82.42368317 73.62581635]
[93.45954132 83.78504181]
[108.35147095 82.04697418]
[121.01751709 93.11474609]
[128.15672302 79.92263794]
[135.29592896 66.73052979]
[142.43515015 53.53842545]
[141.46226501 35.19430161]
[156.67095947 26.52059746]
[163.49659729 13.16355133]
[170.32223511 -0.19349480]
[177.14787292 -13.55054092]
[175.74198914 -31.86656761]
[190.74157715 -40.89706421]
[197.24983215 -54.41159821]
[203.75808716 -67.92613220]
[205.18286133 -84.82010651]
[221.81103516 -88.12772369]
[229.59252930 -73.06503296]
[217.27261353 -61.41787338]
[210.76435852 -47.90333939]
[204.25610352 -34.38880539]
[207.95625305 -22.80936241]
[202.56700134 -11.46615982]
[190.50491333 -6.72490311]
[183.67927551 6.63214302]
[176.85363770 19.98918915]
[170.02799988 33.34623337]
[173.45361328 45.00984192]
[167.79797363 56.22259140]
[155.62725830 60.67763519]
[148.48803711 73.86974335]
[141.34883118 87.06184387]
[134.20962524 100.25395203]
[145.83650208 90.77684021]
[160.36642456 87.05107117]
[175.11906433 89.76395416]
[187.37298584 98.41503143]
[194.86773682 111.40843964]
[196.22073364 126.34729767]
[191.18241882 140.47583008]
[180.68217468 151.18772888]
[166.65701294 156.50700378]
[151.69412231 155.45239258]
[138.55374146 148.21842957]
[129.65985107 136.13957214]
[126.65306091 121.44707489]
[123.83538055 136.18005371]
[121.01770020 150.91304016]
[118.20001984 165.64601135]
[115.38233948 180.37899780]
[112.56465912 195.11196899]
[114.35367584 200.22003174]
[113.97650909 205.00534058]
[111.93844604 208.67727661]
[108.99036407 210.77197266]
[105.13661194 225.26846313]
[101.28285217 239.76496887]
[97.60057068 254.30596924]
[94.09027863 268.88946533]
[90.57997894 283.47293091]
[87.06968689 298.05639648]
[84.07820892 312.75509644]
[81.60928345 327.55050659]
[79.14036560 342.34591675]
[76.67144775 357.14135742]
[82.03179169 372.02682495]
[72.30517578 383.30697632]
[69.83625793 398.10241699]
[67.36734009 412.89782715]
[64.89842224 427.69323730]
[77.81173706 435.71289062]
[86.66904449 448.06668091]
[90.11965942 462.87081909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 129]
[12 128]
[13 127]
[14 126]
[16 124]
[17 123]
[18 122]
[19 121]
[23 120]
[24 119]
[25 118]
[26 117]
[28 116]
[29 115]
[30 114]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[38 60]
[39 59]
[40 58]
[42 56]
[43 55]
[44 53]
[45 52]
[46 51]
[62 92]
[63 91]
[64 90]
[65 89]
[67 86]
[68 85]
[69 84]
[70 83]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
