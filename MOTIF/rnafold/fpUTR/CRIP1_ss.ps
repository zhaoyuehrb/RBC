%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCUGGGCUAGGGGCGCGGCUUGAACUCGCCUAAAGAGCUGCGCCCUCUCAUCUCGCGCCUGCAGCCCGUGCCGCCCCAGCCGCUGCCGCCUGCACCGGACCCGGAGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[213.95176697 180.65463257]
[213.54324341 172.79678345]
[200.41842651 165.53459167]
[187.29362488 158.27239990]
[174.16880798 151.01022339]
[166.69148254 150.51864624]
[160.78862000 143.36618042]
[147.86708069 135.74819946]
[134.94552612 128.13021851]
[122.02397919 120.51223755]
[109.10243225 112.89426422]
[94.42752838 120.36172485]
[75.88002777 110.82450104]
[60.99322510 108.98516846]
[46.10642242 107.14582825]
[31.21962357 105.30648804]
[16.33282280 103.46715546]
[1.44602180 101.62781525]
[-13.44077873 99.78847504]
[-28.32757950 97.94914246]
[-43.21438217 96.10980225]
[-58.10118103 94.27046967]
[-72.98798370 92.43112946]
[-87.87478638 90.59178925]
[-95.69197083 103.66127777]
[-108.15290070 112.41599274]
[-123.09864044 115.33914185]
[-137.93974304 111.92426300]
[-150.10491943 102.76300812]
[-157.48645020 89.44261932]
[-158.80545044 74.27092743]
[-153.83341980 59.87652969]
[-143.43174744 48.75334167]
[-129.40263367 42.82851791]
[-114.17666626 43.12857056]
[-100.39186096 49.60151672]
[-90.43651581 61.12588120]
[-86.03544617 75.70499420]
[-71.14864349 77.54432678]
[-56.26184464 79.38366699]
[-41.37504196 81.22299957]
[-26.48824310 83.06233978]
[-11.60144138 84.90167999]
[3.28535914 86.74101257]
[18.17215919 88.58035278]
[33.05895996 90.41969299]
[47.94576263 92.25902557]
[62.83256149 94.09836578]
[77.71936035 95.93769836]
[62.86667633 93.84063721]
[51.75864410 83.76037598]
[48.23389816 69.18038177]
[53.51049423 55.13910294]
[65.76498413 46.48881149]
[80.76255035 46.21881485]
[93.32045746 54.42241287]
[99.09902954 68.26467133]
[96.10118866 82.96239471]
[99.35333252 68.31918335]
[93.91452789 52.84820175]
[104.79728699 40.58045578]
[120.80636597 44.13595200]
[125.47299194 59.85710526]
[113.99654388 71.57133484]
[110.74439240 86.21454620]
[116.72040558 99.97271729]
[129.64195251 107.59069061]
[142.56350708 115.20867157]
[155.48504639 122.82665253]
[168.40660095 130.44462585]
[181.43099976 137.88540649]
[194.55580139 145.14759827]
[207.68061829 152.40977478]
[220.80541992 159.67196655]
[243.79408264 156.89324951]
[255.54304504 176.00975037]
[269.53448486 181.41712952]
[283.59848022 186.63290405]
[297.73239136 191.65609741]
[311.48226929 181.91755676]
[328.16311646 182.23976135]
[341.26437378 192.30070496]
[345.78909302 208.01557922]
[360.05496216 212.65083313]
[374.32080078 217.28610229]
[389.83648682 214.19197083]
[399.54989624 225.48352051]
[413.81573486 230.11877441]
[428.08160400 234.75404358]
[442.97131348 228.78111267]
[456.85305786 236.82330322]
[459.07794189 252.71131897]
[447.93920898 264.25726318]
[431.98156738 262.60403442]
[423.44631958 249.01988220]
[409.18048096 244.38462830]
[394.91464233 239.74937439]
[380.41934204 243.17503357]
[369.68554688 231.55194092]
[355.41967773 226.91668701]
[341.15383911 222.28143311]
[331.06112671 231.13485718]
[317.79852295 233.83296204]
[304.84249878 229.55838013]
[295.64398193 219.33609009]
[292.70919800 205.79000854]
[278.57525635 200.76681519]
[271.11795044 201.50195312]
[264.12710571 195.40855408]
[250.13566589 190.00117493]
[244.29034424 194.62817383]
[237.11331177 196.88633728]
[229.53411865 196.43170166]
[222.55290222 193.27502441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[58 65]
[59 64]
[76 110]
[77 109]
[78 107]
[79 106]
[83 101]
[84 100]
[85 99]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
