%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCACUUGGAGGAAAGAGAGAAGGAAGGAAGCUGAGGACUUAGCAGGGUAUCACUGGACAGGCC\
) } def
/len { sequence length } bind def

/coor [
[84.18658447 135.43955994]
[67.81912231 121.68911743]
[53.99480820 127.51049042]
[40.17049789 133.33187866]
[26.34618759 139.15324402]
[16.63044548 151.63984680]
[1.89794540 149.44833374]
[-11.92636490 155.26971436]
[-25.75067520 161.09109497]
[-31.48016930 175.82026672]
[-45.98006821 182.10742188]
[-60.64783859 176.22253418]
[-66.78135681 161.65696716]
[-60.74170685 147.05223083]
[-46.11211395 141.07305908]
[-31.57205391 147.26678467]
[-17.74774361 141.44540405]
[-3.92343235 135.62402344]
[4.80350161 123.55381775]
[20.52480888 125.32894135]
[34.34912109 119.50756073]
[48.17343140 113.68618011]
[61.99774170 107.86480713]
[61.19446945 99.60297394]
[62.16661072 91.35931396]
[64.86968994 83.51097107]
[69.18003082 76.41703033]
[74.90043640 70.40204620]
[81.76918793 65.74121857]
[89.47202301 62.64777756]
[97.65653229 61.26325989]
[105.94825745 61.65100861]
[113.96784210 63.79328537]
[121.96958160 51.10580444]
[129.97131348 38.41832352]
[137.97305298 25.73084068]
[145.97479248 13.04335976]
[146.07440186 -3.35548496]
[160.45794678 -11.23239613]
[174.32887268 -2.48428297]
[173.41795349 13.88954639]
[158.66227722 21.04509926]
[150.66053772 33.73257828]
[142.65879822 46.42005920]
[134.65705872 59.10754013]
[126.65531921 71.79502106]
[136.03025818 85.58309174]
[138.75430298 102.03240204]
[134.32461548 118.10655212]
[145.98918152 127.53723907]
[157.65374756 136.96794128]
[177.48338318 138.83331299]
[184.37368774 156.66954041]
[196.87008667 164.96650696]
[213.26210022 165.45051575]
[220.79965210 180.01475525]
[211.72877502 193.67678833]
[195.38079834 192.38229370]
[188.57312012 177.46292114]
[176.07670593 169.16595459]
[165.85749817 172.14338684]
[155.53288269 168.74958801]
[148.80116272 159.93379211]
[148.22305298 148.63249207]
[136.55848694 139.20179749]
[124.89392853 129.77111816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[7 18]
[8 17]
[9 16]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[49 66]
[50 65]
[51 64]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
