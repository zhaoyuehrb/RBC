%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUCCGUGCCUCCUCUGGGGCCAGGCAGGAGAGCCAGGUUUAUAGCAGCAGCCACUGCUGGGUACUCUGGAGCCAGAGAGUCCCUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[-35.37341309 207.22763062]
[-44.58652115 199.38258362]
[-57.89486313 206.30270386]
[-71.20320892 213.22282410]
[-79.87750244 226.45411682]
[-94.73896027 225.46102905]
[-108.04730225 232.38113403]
[-112.89875793 247.18321228]
[-126.49388885 254.01161194]
[-140.57550049 249.29525757]
[-153.88383484 256.21539307]
[-167.19218445 263.13549805]
[-180.50051880 270.05560303]
[-193.80886841 276.97573853]
[-202.16546631 291.08599854]
[-218.55836487 290.63357544]
[-226.12396240 276.08386230]
[-217.07942200 262.40438843]
[-200.72898865 263.66738892]
[-187.42063904 256.74728394]
[-174.11230469 249.82716370]
[-160.80395508 242.90704346]
[-147.49562073 235.98692322]
[-143.26905823 221.75064087]
[-129.87109375 214.54307556]
[-114.96742249 219.07279968]
[-101.65908051 212.15267944]
[-93.93668365 199.41635132]
[-78.12332153 199.91447449]
[-64.81497955 192.99436951]
[-51.50663757 186.07424927]
[-51.66058731 168.17785645]
[-42.82823563 152.51675415]
[-27.29095459 143.30458069]
[-9.14656639 143.06718445]
[6.77131462 151.95054626]
[19.32881165 143.74632263]
[31.88630867 135.54209900]
[44.44380569 127.33788300]
[57.00130463 119.13365936]
[53.32133102 106.00722504]
[53.55787277 92.37676239]
[57.69108200 79.38591766]
[65.37416840 68.12467194]
[75.96248627 59.53788757]
[88.56764221 54.34601974]
[102.13201141 52.98469162]
[115.51750183 55.56811905]
[122.65671539 42.37601471]
[129.79592896 29.18390846]
[136.93513489 15.99180222]
[144.07434082 2.79969573]
[151.21356201 -10.39241028]
[153.43455505 -27.20025063]
[170.20037842 -29.71892548]
[177.26185608 -14.30556107]
[164.40567017 -3.25319982]
[157.26644897 9.93890667]
[150.12724304 23.13101196]
[142.98803711 36.32312012]
[135.84881592 49.51522446]
[128.70960999 62.70733261]
[134.94424438 68.47406769]
[140.04100037 75.26736450]
[143.83390808 82.86603546]
[146.19947815 91.02262115]
[147.06065369 99.47154236]
[161.89488220 101.69549561]
[176.72909546 103.91945648]
[191.56330872 106.14340973]
[206.39753723 108.36736298]
[221.45196533 101.86380768]
[234.44816589 111.86534119]
[232.01676941 128.08323669]
[216.65898132 133.83392334]
[204.17356873 123.20158386]
[189.33935547 120.97762299]
[174.50514221 118.75366974]
[159.67092896 116.52971649]
[144.83670044 114.30576324]
[135.14425659 131.30281067]
[119.37741089 142.88940430]
[100.26132965 147.06289673]
[81.10007477 143.10194397]
[65.20552826 131.69116211]
[52.64802933 139.89538574]
[40.09053040 148.09959412]
[27.53303337 156.30381775]
[14.97553730 164.50804138]
[17.20589447 176.65121460]
[15.12950230 188.78605652]
[9.02351665 199.43594360]
[-0.34606531 207.31336975]
[-11.82042408 211.47558594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[6 27]
[7 26]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
