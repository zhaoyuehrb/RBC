%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAAAGCUGGGAGGUUCUGCCACCAAGCACGGCCUUCCCACUGGGAACACAAACUUGCUGGCGGGAAGAGCCCGGAAAGAAACCUGUGGAUCUCCCUUCGAGAUCAUCCAAAGAGAAGAAAGGUGACCUCACAUUCGUGCCCCUUAGCAGCACUCUGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[96.16036224 484.91830444]
[82.19239044 491.30511475]
[66.90389252 489.83627319]
[54.40740585 480.90692139]
[48.06441879 466.91900635]
[49.58116150 451.63519287]
[58.54964447 439.16674805]
[72.55738068 432.86764526]
[73.99188995 417.93640137]
[75.42639923 403.00512695]
[76.71783447 388.06082153]
[77.86607361 373.10485840]
[79.01431274 358.14886475]
[80.16255188 343.19287109]
[70.47332764 334.65789795]
[67.43791199 321.90704346]
[72.38704681 309.55996704]
[83.71614075 302.22387695]
[85.15065002 287.29260254]
[86.58515930 272.36135864]
[88.01966095 257.43011475]
[74.79687500 250.49563599]
[65.21043396 238.99581909]
[60.74508286 224.66314697]
[62.11100388 209.67242432]
[69.13106537 196.31082153]
[80.76308441 186.62892151]
[95.25444794 182.12603760]
[96.68895721 167.19477844]
[98.12346649 152.26353455]
[99.55796814 137.33229065]
[43.22311783 93.20370483]
[29.65561104 86.80661774]
[16.08810425 80.40953064]
[2.45994711 74.14268494]
[-11.22760677 68.00666046]
[-24.91516113 61.87062836]
[-38.60271454 55.73459625]
[-52.29027176 49.59856796]
[-65.97782135 43.46253967]
[-81.73561859 44.87763596]
[-90.18421173 32.61099243]
[-103.87176514 26.47496414]
[-117.55931854 20.33893394]
[-131.24687195 14.20290470]
[-147.00466919 15.61800098]
[-155.45326233 3.35135913]
[-169.14082336 -2.78467059]
[-183.13340759 4.19683981]
[-198.32785034 0.50047350]
[-207.54977417 -12.12845802]
[-206.44490051 -27.72695923]
[-195.53489685 -38.92989731]
[-179.97113037 -40.44758224]
[-167.10235596 -31.56341553]
[-163.00479126 -16.47222519]
[-149.31723022 -10.33619499]
[-134.53846741 -12.19018173]
[-125.11084747 0.51535028]
[-111.42329407 6.65138006]
[-97.73574066 12.78740978]
[-84.04817963 18.92343903]
[-69.26941681 17.06945229]
[-59.84179306 29.77498436]
[-46.15423965 35.91101456]
[-32.46668625 42.04704285]
[-18.77913094 48.18307495]
[-5.09157753 54.31910324]
[8.59597683 60.45513153]
[16.02060509 60.32117844]
[22.48519135 66.84202576]
[36.05270004 73.23911285]
[49.62020493 79.63619995]
[62.05220032 71.24301147]
[61.19065094 56.26777649]
[60.32910156 41.29253769]
[47.20011139 33.02154922]
[41.47137833 18.60068893]
[45.34571075 3.57507205]
[57.33335495 -6.27764559]
[72.82481384 -7.16889238]
[85.86330414 1.24403369]
[91.43526459 15.72619152]
[87.39816284 30.70889473]
[75.30433655 40.43098831]
[76.16588593 55.40622711]
[77.02743530 70.38146210]
[84.23996735 72.43800354]
[98.66503906 76.55107117]
[105.87757874 78.60761261]
[114.50735474 66.33866882]
[123.13713837 54.06972885]
[131.76692200 41.80078888]
[140.39669800 29.53184891]
[149.02647400 17.26290703]
[147.70188904 1.27462971]
[159.47453308 -9.62420464]
[175.31343079 -7.07294178]
[183.06832886 6.97130728]
[176.79035950 21.73499680]
[161.29541016 25.89268684]
[152.66563416 38.16162872]
[144.03585815 50.43056870]
[135.40608215 62.69950867]
[126.77629852 74.96845245]
[118.14651489 87.23738861]
[120.95014191 94.19365692]
[134.40553284 87.56398773]
[147.86091614 80.93431854]
[161.31629944 74.30464172]
[172.41448975 64.21353912]
[187.03677368 67.55853271]
[192.64385986 81.47113037]
[184.42744446 94.02064514]
[169.43377686 94.44544983]
[155.14164734 98.99903107]
[140.84953308 103.55261230]
[126.55739594 108.10619354]
[129.36102295 115.06246185]
[144.08665466 117.91832733]
[158.81227112 120.77419281]
[169.94880676 114.20704651]
[182.17864990 116.92019653]
[189.03819275 126.91921997]
[203.70640564 130.05662537]
[218.37463379 133.19404602]
[233.80256653 127.63427734]
[246.15513611 138.42065430]
[242.72508240 154.45707703]
[227.04093933 159.24664307]
[215.23721313 147.86225891]
[200.56900024 144.72485352]
[185.90078735 141.58743286]
[169.54554749 147.89430237]
[155.95640564 135.49981689]
[141.23078918 132.64395142]
[126.50515747 129.78808594]
[114.48921967 138.76679993]
[113.05471039 153.69804382]
[111.62020111 168.62928772]
[110.18569183 183.56054688]
[123.55467987 190.74009705]
[133.13058472 202.45953369]
[137.47830200 216.91328430]
[135.96513367 231.88986206]
[128.85264587 245.11019897]
[117.25209808 254.57447815]
[102.95091248 258.86462402]
[101.51640320 273.79586792]
[100.08189392 288.72711182]
[98.64738464 303.65835571]
[110.01813507 316.92282104]
[108.33407593 333.97378540]
[95.11853790 344.34112549]
[93.97029877 359.29708862]
[92.82205963 374.25308228]
[91.67382050 389.20907593]
[94.14526367 398.05239868]
[90.35765076 404.43963623]
[88.92314148 419.37091064]
[87.48863220 434.30215454]
[100.04085541 443.15298462]
[106.47140503 457.10086060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 161]
[9 160]
[10 159]
[11 157]
[12 156]
[13 155]
[14 154]
[18 151]
[19 150]
[20 149]
[21 148]
[28 141]
[29 140]
[30 139]
[31 138]
[32 73]
[33 72]
[34 71]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[42 62]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[74 87]
[75 86]
[76 85]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[119 137]
[120 136]
[121 135]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
