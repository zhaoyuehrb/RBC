%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCCCCCGGCCACGGCGCACCGCCUCCCCGCCCCCGCCCGCCCUCCCCCACCGCGCGCGCUCCGCCCGCCCCGGAGCCUCGCCCUCCGCCACGAUGAGCAA\
) } def
/len { sequence length } bind def

/coor [
[117.11189270 134.08300781]
[110.96287537 143.23342896]
[103.72099304 156.36946106]
[96.47911072 169.50547791]
[89.23722839 182.64151001]
[93.86869812 197.75193787]
[86.38526917 211.67219543]
[71.22671509 216.14366150]
[57.38634872 208.51347351]
[53.07540894 193.30848694]
[60.85149765 179.54957581]
[76.10120392 175.39962769]
[83.34308624 162.26359558]
[90.58496857 149.12757874]
[97.82685089 135.99154663]
[93.36468506 129.96336365]
[84.44036102 117.90697479]
[79.97819519 111.87878418]
[65.29985046 114.96846771]
[50.62150192 118.05814362]
[35.94315720 121.14782715]
[21.68908691 130.32702637]
[8.92268658 119.17107391]
[16.10857391 103.81531525]
[32.85347748 106.46947479]
[47.53182220 103.37979889]
[62.21017075 100.29011536]
[76.88851929 97.20043945]
[62.52578735 92.87471008]
[47.62582016 94.60416412]
[33.79533386 88.79747009]
[24.59566879 76.94985199]
[22.39572716 62.11205292]
[27.76199341 48.10479736]
[39.31265640 38.53493881]
[54.07343292 35.86671066]
[68.24343872 40.78717804]
[78.17390442 52.02932358]
[81.30773163 66.69868469]
[90.00555420 78.91948700]
[88.23146057 64.02476501]
[78.91627502 51.23657227]
[85.09397125 37.68351746]
[83.31987762 22.78880119]
[81.54577637 7.89408398]
[67.22466278 2.49369621]
[57.06229782 -8.95116806]
[53.39392090 -23.81056213]
[57.06249619 -38.66990662]
[67.22502136 -50.11463165]
[81.54621124 -55.51482773]
[96.73516083 -53.62956238]
[109.30157471 -44.89205933]
[116.35776520 -31.31013489]
[116.28228760 -16.00481224]
[109.09247589 -2.49314499]
[96.44049835 6.11998653]
[98.21459198 21.01470184]
[99.98869324 35.90942001]
[109.17697906 47.63224411]
[103.12617493 62.25067139]
[104.90027618 77.14538574]
[115.02501678 88.21288300]
[129.70336914 91.30256653]
[144.38171387 94.39224243]
[159.06005859 97.48192596]
[167.71397400 89.05350494]
[179.26483154 85.95518494]
[190.74070740 88.86194611]
[199.24824524 96.91915131]
[202.70214844 107.98931885]
[217.17169189 111.94313049]
[229.27294922 102.41078186]
[244.48892212 101.83853149]
[256.97650146 110.23639679]
[262.06369019 124.20989227]
[276.53323364 128.16369629]
[291.00274658 132.11750793]
[305.47229004 136.07131958]
[319.94183350 140.02511597]
[332.69161987 130.97102356]
[348.27413940 132.28213501]
[359.33181763 143.33935547]
[360.64349365 158.92182922]
[351.58990479 171.67198181]
[336.44583130 175.56958008]
[322.36187744 168.77429199]
[315.98800659 154.49465942]
[301.51849365 150.54084778]
[287.04895020 146.58703613]
[272.57940674 142.63322449]
[258.10989380 138.67942810]
[246.62364197 148.12422180]
[231.60070801 149.00482178]
[218.79010010 140.77429199]
[213.21788025 126.41265869]
[198.74833679 122.45885468]
[183.58374023 132.49971008]
[165.55133057 128.35589600]
[155.97038269 112.16027069]
[141.29203796 109.07059479]
[126.61368561 105.98091125]
[111.93534088 102.89123535]
[116.84081268 108.23125458]
[119.73460388 115.68565369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[18 28]
[19 27]
[20 26]
[21 25]
[40 62]
[41 61]
[43 59]
[44 58]
[45 57]
[63 103]
[64 102]
[65 101]
[66 100]
[71 97]
[72 96]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
