%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGCGUGCCUGAACGCCUUGGGCCGUCGGCGAGGGGGAGGGGAAGCCGUGGGCGGAAGCGGAAGUGACGACUGAAGCGGGGCGGAGACGCAAG\
) } def
/len { sequence length } bind def

/coor [
[81.37361908 139.47605896]
[75.18724823 135.91139221]
[64.66687012 146.60353088]
[54.14649582 157.29565430]
[50.25836563 165.77764893]
[43.10808563 168.15675354]
[32.24699783 178.50260925]
[21.38590813 188.84846497]
[10.52481842 199.19432068]
[10.39156723 214.99804688]
[-0.93599814 226.01901245]
[-16.73743248 225.71868896]
[-27.63802719 214.27523804]
[-27.17065048 198.47785950]
[-15.61258984 187.69885254]
[0.17896199 188.33323669]
[11.04005051 177.98736572]
[21.90114021 167.64151001]
[32.76222992 157.29565430]
[43.45436096 146.77528381]
[53.97473526 136.08314514]
[64.49510956 125.39101410]
[57.41514206 109.58283234]
[57.04093933 92.26565552]
[63.43143082 76.16639709]
[75.58031464 63.82017136]
[69.44969177 50.13019562]
[63.31907272 36.44021606]
[57.18844986 22.75024033]
[51.05782700 9.06026459]
[38.35601807 -0.37237370]
[40.21584320 -15.15040874]
[34.08522034 -28.84038544]
[27.95459557 -42.53036118]
[12.79844666 -41.72068405]
[-1.62551451 -46.44442749]
[-13.36656570 -56.06275177]
[-20.83682632 -69.27485657]
[-23.02600479 -84.29390717]
[-19.63803291 -99.08870697]
[-11.13110638 -111.65837860]
[1.34428406 -120.30297089]
[16.10094261 -123.85338593]
[31.14315414 -121.82945251]
[44.43658447 -114.50489044]
[54.18339920 -102.87028503]
[59.06542969 -88.49913025]
[58.42241669 -73.33499146]
[52.34132767 -59.42871094]
[41.64457321 -48.66098404]
[47.77519608 -34.97100830]
[53.90581894 -21.28103256]
[66.16912079 -12.82759285]
[64.74780273 2.92964125]
[70.87842560 16.61961746]
[77.00904846 30.30959511]
[83.13967133 43.99957275]
[89.27029419 57.68954849]
[110.87882233 57.72764587]
[129.82128906 68.12538147]
[141.45549011 86.33460236]
[156.29646301 84.15617371]
[163.56140137 70.57209778]
[177.27177429 63.94798279]
[192.07858276 66.63541412]
[202.34086609 77.39755249]
[217.18183899 75.21912384]
[232.02281189 73.04069519]
[244.54077148 62.44671249]
[259.88085938 68.24449158]
[262.26248169 84.46977997]
[249.23564148 94.43138885]
[234.20123291 87.88166809]
[219.36026001 90.06009674]
[204.51928711 92.23852539]
[197.78269958 105.49584198]
[184.37278748 112.32505798]
[169.33712769 109.92041779]
[158.47489929 98.99714661]
[143.63392639 101.17556763]
[142.47947693 110.03969574]
[139.54350281 118.48276520]
[134.94912720 126.15069580]
[128.88905334 132.72190857]
[136.73687744 145.50515747]
[144.58471680 158.28842163]
[159.25285339 165.62176514]
[159.96582031 182.00540161]
[145.99018860 190.58525085]
[131.70288086 182.53509521]
[131.80146790 166.13624573]
[123.95362854 153.35299683]
[116.10579681 140.56974792]
[109.27648163 142.65263367]
[102.19896698 143.59432983]
[95.06260681 143.36961365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[6 19]
[7 18]
[8 17]
[9 16]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[32 52]
[33 51]
[34 50]
[61 80]
[62 79]
[66 75]
[67 74]
[68 73]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
