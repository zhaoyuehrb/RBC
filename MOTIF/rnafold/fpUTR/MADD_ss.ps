%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCGGCCGCGCGCCCCCCUCUGCCCCCGCUGCCCAGGAUUGGUAGGCUCCACCGCUCGGCAGCCGGCUUCCCUGCUCGGACGCCGAGCACCGCCAAAGCGCACUUCGAUUUUCAGAAUUCCUCCUGGGAAUGCUGACUCCUUGCUUGGUGCCCUGAUGCUUCUCUGAGAUAAACUGAUGAAUUGGAACC\
) } def
/len { sequence length } bind def

/coor [
[55.49421692 197.27648926]
[48.33729935 203.95391846]
[39.17889404 208.57115173]
[35.06006622 222.99458313]
[30.94123650 237.41799927]
[26.82240677 251.84143066]
[31.32977486 267.60897827]
[19.73542595 279.20654297]
[3.96663141 274.70352173]
[0.24497658 258.73223877]
[12.39898014 247.72261047]
[16.51780891 233.29917908]
[20.63663864 218.87574768]
[24.75546837 204.45231628]
[19.03651428 199.60015869]
[9.33217144 211.03805542]
[-0.37236065 222.47579956]
[-11.80994701 212.77108765]
[-2.10573673 201.33370972]
[7.59860563 189.89581299]
[1.87965167 185.04364014]
[-11.68018818 191.45697021]
[-25.24002647 197.87028503]
[-38.79986572 204.28361511]
[-52.35970688 210.69694519]
[-65.91954803 217.11027527]
[-76.61260223 234.18649292]
[-95.79299164 231.81163025]
[-109.13573456 238.66519165]
[-111.37980652 254.01913452]
[-122.24418640 265.09817505]
[-137.55130005 267.64215088]
[-151.41525269 260.67291260]
[-158.50506592 246.87020874]
[-156.09455872 231.54151917]
[-145.11062622 220.58099365]
[-129.77682495 218.20320129]
[-115.98929596 225.32244873]
[-102.64655304 218.46888733]
[-100.40151215 208.48014832]
[-92.86486816 201.23016357]
[-82.36442566 199.29389954]
[-72.33287048 203.55043030]
[-58.77303314 197.13710022]
[-45.21319199 190.72377014]
[-31.65335274 184.31045532]
[-18.09351349 177.89712524]
[-4.53367472 171.48379517]
[16.36156273 144.60075378]
[44.35688782 148.43809509]
[54.61077118 137.49012756]
[64.86465454 126.54217529]
[75.11853790 115.59421539]
[71.14546204 105.44812775]
[71.14546204 94.55187225]
[75.11853790 84.40578461]
[64.86465454 73.45782471]
[54.61077118 62.50986481]
[44.35688782 51.56190491]
[34.10300064 40.61394119]
[23.84911728 29.66598129]
[13.59523296 18.71802139]
[-1.96682858 18.03978539]
[-12.20976830 6.79092550]
[-11.46727085 -8.04094124]
[-21.72115517 -18.98890305]
[-31.97504044 -29.93686295]
[-42.31814957 -40.80057144]
[-52.74978638 -51.57929611]
[-68.55407715 -51.58724976]
[-79.66450500 -62.82707977]
[-79.48946381 -78.63040161]
[-68.13278961 -89.62137604]
[-52.33220291 -89.27925873]
[-41.46191025 -77.80702209]
[-41.97106171 -62.01093292]
[-31.53942299 -51.23220825]
[-24.61740303 -48.60791397]
[-21.02707863 -40.19075012]
[-10.77319431 -29.24278641]
[-0.51930940 -18.29482651]
[14.32936382 -18.06568336]
[24.88421822 -7.10896444]
[24.54319382 8.46413612]
[34.79707718 19.41209793]
[45.05096436 30.36005783]
[55.30484772 41.30801773]
[65.55873108 52.25598145]
[75.81261444 63.20394135]
[86.06649780 74.15190125]
[97.84379578 69.36069489]
[111.11219025 69.92121124]
[123.45417786 76.19741821]
[132.43161011 87.47210693]
[145.29754639 79.76056671]
[146.78778076 64.42807007]
[156.90231323 53.04608154]
[171.60562134 49.84029770]
[185.21432495 55.83536148]
[198.08026123 48.12382126]
[205.93930054 34.39260864]
[220.83360291 34.48598862]
[233.69953918 26.77444649]
[246.56546021 19.06290627]
[259.43139648 11.35136414]
[272.29733276 3.63982320]
[281.26513672 -14.40226936]
[300.58593750 -13.91885853]
[313.19265747 -22.04723167]
[325.79937744 -30.17560577]
[326.50640869 -47.06751251]
[337.03335571 -60.08410263]
[353.08212280 -64.22548676]
[368.28521729 -58.05288315]
[380.75726318 -66.38643646]
[393.22930908 -74.71998596]
[405.70135498 -83.05354309]
[412.87716675 -97.15383911]
[427.75811768 -97.79139709]
[440.23016357 -106.12495422]
[452.70220947 -114.45850372]
[465.17425537 -122.79206085]
[477.64630127 -131.12561035]
[490.11834717 -139.45916748]
[499.92892456 -153.28627014]
[515.93151855 -147.68679810]
[514.98083496 -130.75952148]
[498.45190430 -126.98712158]
[485.97985840 -118.65357208]
[473.50781250 -110.32001495]
[461.03576660 -101.98646545]
[448.56372070 -93.65290833]
[436.09167480 -85.31935883]
[429.80795288 -71.81513214]
[414.03491211 -70.58149719]
[401.56286621 -62.24794388]
[389.09082031 -53.91439056]
[376.61877441 -45.58083725]
[377.33340454 -32.24033737]
[371.31091309 -20.19397926]
[360.03045654 -12.63981915]
[346.38235474 -11.64223957]
[333.92776489 -17.56888008]
[321.32104492 -9.44050598]
[308.71432495 -1.31213260]
[307.45913696 8.84856129]
[300.66943359 16.80236626]
[290.40933228 19.75851440]
[280.00888062 16.50575256]
[267.14294434 24.21729279]
[254.27700806 31.92883492]
[241.41107178 39.64037704]
[228.54515076 47.35191727]
[221.60636902 60.53154755]
[205.79180908 60.98974991]
[192.92587280 68.70128632]
[191.79794312 83.52915955]
[182.03961182 94.98511505]
[167.23362732 98.53990173]
[153.00907898 92.62649536]
[140.14315796 100.33803558]
[137.21679688 115.04981232]
[146.15228271 127.09793091]
[155.08776855 139.14604187]
[164.12153625 151.12065125]
[173.25296021 163.02095032]
[188.32377625 160.35095215]
[202.90562439 165.00160217]
[213.64767456 175.90420532]
[218.08149719 190.55343628]
[215.18823242 205.58299255]
[205.63273621 217.53919983]
[191.61077881 223.67460632]
[176.34451294 222.57934570]
[163.34201050 214.50511169]
[155.59114075 201.30726624]
[154.87301636 186.01861572]
[161.35266113 172.15237427]
[152.22123718 160.25207520]
[145.64448547 156.85386658]
[143.03965759 148.08152771]
[134.10417175 136.03341675]
[125.16868591 123.98530579]
[105.03059387 131.66871643]
[86.06649780 125.84809875]
[75.81261444 136.79605103]
[65.55873108 147.74401855]
[55.30484772 158.69198608]
[59.60376358 164.78913879]
[62.13135147 172.29878235]
[62.43947601 180.68135071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[28 39]
[29 38]
[50 188]
[51 187]
[52 186]
[53 185]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[65 81]
[66 80]
[67 79]
[68 77]
[69 76]
[94 161]
[95 160]
[99 156]
[100 155]
[102 153]
[103 152]
[104 151]
[105 150]
[106 149]
[108 145]
[109 144]
[110 143]
[114 138]
[115 137]
[116 136]
[117 135]
[119 133]
[120 132]
[121 131]
[122 130]
[123 129]
[124 128]
[162 183]
[163 182]
[164 181]
[165 179]
[166 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
