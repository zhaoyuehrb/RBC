%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAGCUCCACCCUCUAACCCCCACUCCAGCUGCAGACGCCACGGAGUUUGUGCAGGGGCGCAGCGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[128.04045105 157.88911438]
[119.60352325 161.26269531]
[110.77541351 163.41377258]
[101.73227692 164.29940796]
[92.65457153 163.90196228]
[83.72344208 162.22932434]
[75.11711884 159.31491089]
[67.00733185 155.21684265]
[59.55592346 150.01692200]
[52.91157913 143.81890869]
[47.20689392 136.74647522]
[42.55569839 128.94076538]
[39.05081558 120.55753326]
[36.76218033 111.76408386]
[35.73546219 102.73587036]
[35.99115753 93.65306854]
[37.52415466 84.69691467]
[40.30386734 76.04614258]
[44.27482224 67.87336731]
[49.35778427 60.34169006]
[55.45131683 53.60139465]
[62.43382645 47.78699112]
[70.16596985 43.01450729]
[78.49346161 39.37917328]
[87.25011444 36.95354080]
[86.01142883 22.00477219]
[84.77273560 7.05600548]
[83.53404999 -7.89276171]
[82.29535675 -22.84152985]
[69.88209534 -29.19841766]
[62.35421753 -40.80858612]
[61.62743378 -54.51721954]
[67.78674316 -66.66347504]
[79.09276581 -74.05807495]
[78.47288513 -89.04525757]
[69.24118805 -102.59914398]
[76.60610199 -117.25144958]
[92.99124146 -117.92913818]
[101.54097748 -103.93507385]
[93.46007538 -89.66513824]
[94.07994843 -74.67794800]
[107.95080566 -66.15141296]
[114.16471100 -50.92417526]
[110.14009857 -34.80845261]
[97.24412537 -24.08021927]
[98.48281097 -9.13145161]
[99.72150421 5.81731558]
[100.96019745 20.76608276]
[102.19888306 35.71485138]
[127.04107666 41.63737488]
[147.62059021 56.76002502]
[160.69331360 78.69889832]
[164.19853210 103.99562073]
[157.58364868 128.66249084]
[170.14115906 136.86671448]
[185.92610168 137.93728638]
[192.34904480 151.37585449]
[204.90653992 159.58006287]
[217.46403503 167.78428650]
[230.02153015 175.98851013]
[242.57902527 184.19273376]
[255.13652039 192.39695740]
[271.70355225 195.99835205]
[272.82910156 212.91490173]
[256.88525391 218.67942810]
[246.93229675 204.95445251]
[234.37480164 196.75022888]
[221.81730652 188.54600525]
[209.25981140 180.34178162]
[196.70231628 172.13757324]
[184.14482117 163.93334961]
[169.25807190 163.44960022]
[161.93693542 149.42420959]
[149.37944031 141.21998596]
[143.07844543 147.76675415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[34 41]
[35 40]
[54 74]
[55 73]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
