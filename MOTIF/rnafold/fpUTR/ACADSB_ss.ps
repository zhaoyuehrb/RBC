%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAUUAAGGGGGGGUGUGUGCGGGGCGGGUACUGAGUGGGCGGGGCCUUGCUCGGGUAACUCCCAGGGGCUGGCUAGAGACCCAGAGGCGCAGAGCGGAGAGGCCUGCGGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[80.96762085 148.62680054]
[74.28788757 145.44979858]
[68.12405396 141.36085510]
[62.59980011 136.44203186]
[57.82596970 130.79200745]
[53.89834595 124.52415466]
[50.89573669 117.76422882]
[48.87838745 110.64787292]
[47.88677216 103.31787109]
[47.94079590 95.92129517]
[49.03936768 88.60655975]
[51.16044617 81.52042389]
[38.03900146 74.25216675]
[24.91755295 66.98390198]
[11.79610729 59.71563721]
[-1.32533884 52.44737625]
[-14.44678497 45.17911148]
[-26.10846329 53.02881622]
[-39.95264816 55.05072403]
[-53.24539566 50.90362930]
[-63.38672638 41.45887375]
[-68.41918182 28.61800194]
[-67.40546417 14.93011475]
[-80.32877350 7.31512737]
[-93.25208282 -0.29985964]
[-106.17539978 -7.91484642]
[-121.29798126 -4.18050671]
[-134.29557800 -12.08728409]
[-137.76249695 -26.52736664]
[-150.68582153 -34.14235306]
[-163.60913086 -41.75733948]
[-176.53244019 -49.37232971]
[-192.34999084 -49.71210098]
[-199.38726807 -62.83940506]
[-212.31057739 -70.45439148]
[-225.23388672 -78.06938171]
[-240.47071838 -73.87239838]
[-254.17103577 -81.75128937]
[-258.20666504 -97.03163910]
[-250.18338013 -110.64788818]
[-234.86122131 -114.52175903]
[-221.33055115 -106.35494995]
[-217.61889648 -90.99269104]
[-204.69558716 -83.37770081]
[-191.77227783 -75.76271820]
[-176.87907410 -75.96762085]
[-168.91744995 -62.29563904]
[-155.99414062 -54.68065262]
[-143.07083130 -47.06566620]
[-130.14752197 -39.45067978]
[-115.83596039 -43.41489410]
[-102.62140656 -35.87631226]
[-98.56040955 -20.83815765]
[-85.63710022 -13.22317123]
[-72.71379089 -5.60818386]
[-59.79047775 2.00680327]
[-45.98567581 -6.27757454]
[-29.79406929 -6.50790262]
[-15.59627914 1.47201335]
[-7.28065252 15.58439541]
[-7.17852211 32.05766678]
[5.94292402 39.32592773]
[19.06437111 46.59419250]
[32.18581772 53.86245346]
[45.30726242 61.13071823]
[58.42871094 68.39897919]
[82.46572113 50.81315613]
[112.20670319 49.22803116]
[137.97679138 64.15924835]
[150.25134277 55.53743744]
[162.52587891 46.91562653]
[174.68457031 38.13118744]
[186.72523499 29.18567848]
[188.78295898 13.51591969]
[201.36889648 3.95715714]
[217.01602173 6.18043470]
[226.44117737 18.86672211]
[224.05259705 34.48946762]
[211.26736450 43.77997589]
[195.67074585 41.22635269]
[183.63008118 50.17186356]
[180.09223938 56.77104568]
[171.14768982 59.19017029]
[158.87315369 67.81198120]
[146.59860229 76.43379211]
[149.83570862 84.40518188]
[151.71997070 92.79991150]
[152.20022583 101.39009094]
[151.26345825 109.94253540]
[148.93508911 118.22508240]
[145.27832031 126.01288605]
[157.07659912 135.27575684]
[168.87486267 144.53862000]
[180.67314148 153.80149841]
[192.47142029 163.06436157]
[201.27452087 165.95610046]
[204.45613098 172.73422241]
[216.00364685 182.30789185]
[231.71406555 180.58796692]
[243.98670959 190.54577637]
[245.54043579 206.27349854]
[235.45344543 218.44018555]
[219.71015930 219.82752991]
[207.65080261 209.61247253]
[206.42997742 193.85540771]
[194.88247681 184.28173828]
[183.20854187 174.86264038]
[171.41027832 165.59976196]
[159.61199951 156.33689880]
[147.81372070 147.07403564]
[136.01545715 137.81115723]
[130.31164551 142.52059937]
[123.99963379 146.37687683]
[117.20609283 149.30261230]
[110.06730652 151.23910522]
[102.72653198 152.14750671]
[95.33103943 152.00959778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[23 56]
[24 55]
[25 54]
[26 53]
[29 50]
[30 49]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[69 85]
[70 84]
[71 83]
[72 81]
[73 80]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
