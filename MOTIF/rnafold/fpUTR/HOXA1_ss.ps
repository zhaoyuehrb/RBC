%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUAUCAUUUUUCUUCUCCGGCCCCAUGGAGGAAGUGAGAAAGUUGGCACAGUCACGCCGGGCUUCGCAGGACCAGGUCACUCAGUGACAG\
) } def
/len { sequence length } bind def

/coor [
[78.39173126 169.16961670]
[63.57465363 166.83421326]
[51.98247147 157.31468201]
[46.81007385 143.23469543]
[49.48300171 128.47476196]
[59.26458359 117.10283661]
[73.46001434 112.25302124]
[86.96413422 105.72319031]
[71.98258209 104.97943878]
[57.00103378 104.23567963]
[42.01948547 103.49192047]
[27.03793526 102.74816895]
[22.85994530 105.13044739]
[18.57846260 105.84658051]
[14.77250576 105.09185791]
[11.88424778 103.24207306]
[10.16884422 100.78692627]
[-4.58373165 98.07371521]
[-19.33630753 95.36050415]
[-34.08888245 92.64730072]
[-48.84146118 89.93408966]
[-63.59403610 87.22088623]
[-78.34661102 84.50767517]
[-91.21511078 93.68248749]
[-106.78806305 90.98829651]
[-115.82631683 78.02351379]
[-112.96762848 62.47991562]
[-99.90801239 53.57924652]
[-84.39550781 56.60210800]
[-75.63340759 69.75509644]
[-60.88082886 72.46830750]
[-46.12825012 75.18151855]
[-31.37567520 77.89472198]
[-16.62310028 80.60793304]
[-1.87052345 83.32113647]
[12.88205242 86.03434753]
[27.78169250 87.76661682]
[42.76324081 88.51037598]
[57.74478912 89.25412750]
[72.72634125 89.99788666]
[87.70789337 90.74164581]
[100.89999390 83.60243225]
[108.47148132 70.65358734]
[116.04296112 57.70473862]
[112.25778961 42.59479904]
[120.12081146 29.57068634]
[134.54914856 26.05521774]
[142.12063599 13.10636997]
[149.69212341 0.15752263]
[157.26359558 -12.79132462]
[164.83508301 -25.74017143]
[158.47885132 -39.89566422]
[161.68989563 -55.07686615]
[173.23348999 -65.44628906]
[188.67089844 -67.01668549]
[202.06611633 -59.18420029]
[208.26840210 -44.96058655]
[204.89286804 -29.81511307]
[193.23745728 -19.57152367]
[177.78393555 -18.16868782]
[170.21244812 -5.21984148]
[162.64096069 7.72900581]
[155.06947327 20.67785263]
[147.49800110 33.62670135]
[151.51031494 47.92484283]
[144.01622009 61.16467285]
[128.99180603 65.27622223]
[121.42032623 78.22506714]
[113.84884644 91.17391205]
[122.31179810 78.78931427]
[135.68858337 72.00244904]
[150.68077087 72.48682404]
[163.59156799 80.12300110]
[171.23745728 93.02806091]
[171.73309326 108.01986694]
[164.95629883 121.40175629]
[152.57806396 129.87402344]
[137.65060425 131.34757996]
[123.85475922 125.45907593]
[114.59276581 113.66161346]
[123.00349426 126.08174896]
[131.41421509 138.50187683]
[139.82495117 150.92201233]
[148.23567200 163.34214783]
[162.12333679 173.06681824]
[156.62319946 189.10379028]
[139.69035339 188.25808716]
[135.81553650 171.75286865]
[127.40481567 159.33273315]
[118.99408722 146.91259766]
[110.58335876 134.49247742]
[102.17263794 122.07234192]
[103.59921265 137.00434875]
[101.60253906 151.87086487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[42 69]
[43 68]
[44 67]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[80 92]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
