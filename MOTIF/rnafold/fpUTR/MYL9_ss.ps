%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCGCCUGGAGUCCAGACCCGACGGCCGGCCCAGUUCCACGCACCCAGCGAGCCCAAGCGCCUUCUCCGCACCAGGGAAGCCCCACCCACCAGAAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[-2.13504410 205.84732056]
[-13.86251640 215.19967651]
[-25.58998871 224.55201721]
[-27.50157356 240.01110840]
[-39.52812576 249.32865906]
[-54.25423050 247.41098022]
[-65.98170471 256.76333618]
[-72.30115509 275.78979492]
[-91.38425446 278.22994995]
[-102.53143311 288.26693726]
[-113.67860413 298.30389404]
[-124.82577515 308.34085083]
[-132.55075073 323.43258667]
[-149.19120789 320.18731689]
[-150.67929077 303.29879761]
[-134.86273193 297.19366455]
[-123.71556091 287.15670776]
[-112.56838989 277.11975098]
[-101.42121887 267.08279419]
[-101.78559113 256.67056274]
[-96.16558838 247.63560486]
[-86.26070404 243.17756653]
[-75.33404541 245.03585815]
[-63.60657501 235.68351746]
[-62.19930267 220.89990234]
[-50.43920517 211.24822998]
[-34.94233704 212.82453918]
[-23.21486282 203.47219849]
[-11.48739147 194.11985779]
[-5.94802713 174.33464050]
[15.07750130 170.81784058]
[25.91942406 160.45188904]
[36.76134872 150.08595276]
[28.52131271 137.39688110]
[22.79555321 123.39237976]
[19.78547478 108.56503296]
[19.59695625 93.43641663]
[22.23663139 78.53867340]
[27.61164665 64.39583588]
[35.53293610 51.50538254]
[45.72186661 40.32073593]
[57.82004166 31.23532104]
[71.40190125 24.56871414]
[67.41135406 10.10927105]
[63.42079926 -4.35017204]
[50.23325348 -13.48626232]
[49.29763794 -29.50201035]
[61.33168030 -40.11150360]
[77.10388947 -37.17604828]
[84.51518250 -22.94747353]
[77.88024139 -8.34072495]
[81.87079620 6.11871815]
[85.86135101 20.57816124]
[103.61927032 19.41072655]
[121.20104980 22.16526985]
[126.47167206 8.12174606]
[123.25289154 -7.95841122]
[135.74629211 -18.58135033]
[151.09974670 -12.81910324]
[153.51893616 3.40062547]
[140.51519775 13.39236832]
[135.24458313 27.43589211]
[151.92288208 38.26067352]
[165.44689941 52.83609390]
[174.99504089 70.27669525]
[189.39315796 66.07028961]
[203.79129028 61.86387634]
[218.18942261 57.65746689]
[225.69529724 52.16142273]
[233.08146667 53.54751968]
[247.59899902 49.77371979]
[255.38618469 36.02106857]
[270.63922119 31.88342476]
[284.30877686 39.81557465]
[288.28491211 55.11151505]
[280.20867920 68.69643402]
[264.87158203 72.51064301]
[251.37280273 64.29123688]
[236.85527039 68.06504059]
[222.39582825 72.05559540]
[207.99769592 76.26200104]
[193.59957886 80.46841431]
[179.20144653 84.67482758]
[180.61723328 97.06886292]
[180.10525513 109.53299713]
[177.67774963 121.76917267]
[173.39277649 133.48478699]
[167.35278320 144.39968872]
[159.70220947 154.25288391]
[150.62400818 162.80876160]
[140.33525085 169.86270142]
[129.08197021 175.24604797]
[117.13327026 178.83007812]
[104.77487183 180.52906799]
[92.30229187 180.30239868]
[80.01377869 178.15548706]
[68.20319366 174.13967896]
[57.15294647 168.35101318]
[47.12728882 160.92787170]
[36.28536606 171.29382324]
[25.44344139 181.65975952]
[26.51561356 191.32208252]
[22.97720718 200.22724915]
[15.77812099 206.33842468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[6 24]
[7 23]
[9 19]
[10 18]
[11 17]
[12 16]
[31 101]
[32 100]
[33 99]
[43 53]
[44 52]
[45 51]
[55 62]
[56 61]
[65 83]
[66 82]
[67 81]
[68 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
