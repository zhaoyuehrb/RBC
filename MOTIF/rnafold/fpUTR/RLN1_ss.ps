%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGAGCCGGGUAGGGAAAGCAGCCUAAAGCCCGGGACAGGCACACAGGCCCAGGUGUGUAGGCCACAGCAGCCGCAGUCCUGAAAGGCUGCAACACCCAGACCUCCAGGAGAGACCAGGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[235.39378357 591.20349121]
[232.10726929 576.56793213]
[228.82075500 561.93243408]
[225.53424072 547.29687500]
[211.80856323 541.57464600]
[203.99182129 528.71533203]
[205.26081848 513.54156494]
[215.33775330 501.88986206]
[212.05122375 487.25433350]
[208.22824097 472.74969482]
[203.87397766 458.39559937]
[199.51969910 444.04147339]
[195.16543579 429.68737793]
[181.73193359 418.46566772]
[185.92224121 400.58489990]
[181.21701050 386.34197998]
[176.51179504 372.09906006]
[160.76316833 367.64144897]
[150.64329529 354.56771851]
[150.26785278 337.87356567]
[159.98039246 324.08743286]
[154.92704773 309.96429443]
[149.87368774 295.84112549]
[144.82034302 281.71795654]
[139.76699829 267.59478760]
[134.71365356 253.47163391]
[129.66030884 239.34848022]
[120.15204620 238.10559082]
[111.72747040 233.40438843]
[105.60340118 225.87443542]
[102.68256378 216.55725098]
[103.42074585 206.76237488]
[107.75624084 197.88328552]
[115.11249542 191.19918823]
[111.46779633 176.64871216]
[107.82308960 162.09825134]
[104.17839050 147.54777527]
[100.53368378 132.99731445]
[96.88898468 118.44683838]
[76.01460266 110.75455475]
[71.32057953 81.99106598]
[63.92710876 68.93976593]
[56.53363800 55.88845825]
[41.56692886 51.57157898]
[34.25481796 38.23037720]
[38.46253967 23.98851395]
[31.06906700 10.93720818]
[23.67559433 -2.11409664]
[10.14138985 -10.30774593]
[10.60026455 -25.19528008]
[3.20679164 -38.24658585]
[-11.19440079 -46.09118271]
[-11.33082581 -62.48976135]
[2.93785930 -70.57287598]
[16.93325424 -62.02530289]
[16.25809669 -45.64005661]
[23.65156937 -32.58875275]
[36.65694427 -25.32862091]
[36.72689819 -9.50756931]
[44.12037277 3.54373550]
[51.51384354 16.59503937]
[65.89270020 20.30773735]
[73.57665253 33.43829346]
[69.58493805 48.49498749]
[76.97841644 61.54629135]
[84.37188721 74.59759521]
[91.86962891 74.41353607]
[99.04854584 61.24299622]
[106.86511230 74.04541779]
[114.36285400 73.86135864]
[121.10702515 60.46299362]
[119.62869263 44.13061905]
[133.18782043 34.90662003]
[147.83593750 42.27986526]
[148.50431824 58.66538620]
[134.50538635 67.20716858]
[127.76121521 80.60552979]
[125.98492432 103.96777344]
[111.43945312 114.80213928]
[115.08415222 129.35260010]
[118.72885895 143.90307617]
[122.37355804 158.45355225]
[126.01826477 173.00401306]
[129.66296387 187.55448914]
[148.34516907 196.97668457]
[154.14262390 216.78144836]
[143.78346252 234.29513550]
[148.83680725 248.41828918]
[153.89015198 262.54144287]
[158.94351196 276.66461182]
[163.99685669 290.78778076]
[169.05020142 304.91094971]
[174.10354614 319.03408813]
[187.63981628 321.93341064]
[197.87634277 331.09063721]
[202.19093323 344.01559448]
[199.55018616 357.27264404]
[190.75471497 367.39382935]
[195.45993042 381.63674927]
[200.16516113 395.87966919]
[211.36645508 402.41229248]
[214.95629883 414.45333862]
[209.51953125 425.33309937]
[213.87380981 439.68722534]
[218.22807312 454.04132080]
[222.58235168 468.39541626]
[226.55674744 472.09954834]
[228.44897461 476.52935791]
[228.34053040 480.74075317]
[226.68676758 483.96780396]
[229.97328186 498.60336304]
[244.06445312 504.82791138]
[251.69923401 518.00225830]
[250.13105774 532.96905518]
[240.16976929 544.01037598]
[243.45628357 558.64587402]
[246.74279785 573.28143311]
[250.02932739 587.91699219]
[264.71362305 592.41888428]
[275.16790771 603.67071533]
[278.58001709 618.64575195]
[274.03210449 633.31585693]
[262.74755859 643.73486328]
[247.76185608 647.09997559]
[233.10606384 642.50610352]
[222.72253418 631.18896484]
[219.40437317 616.19281006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[8 111]
[9 110]
[10 106]
[11 105]
[12 104]
[13 103]
[15 100]
[16 99]
[17 98]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[34 84]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[41 66]
[42 65]
[43 64]
[46 61]
[47 60]
[48 59]
[50 57]
[51 56]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
