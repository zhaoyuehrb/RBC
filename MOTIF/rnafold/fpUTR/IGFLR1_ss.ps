%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACUUCAGCUGAGGAACUUGGCACGGCCAGCUUGGGACCCAGGACCCUAACGCAGAGGCGCUGUGUUUGGAAGUCCCGCUAUCACGGCCCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[110.01610565 253.32870483]
[99.86456299 264.37164307]
[86.73950195 271.63336182]
[71.99072266 274.36712646]
[57.13498688 272.29174805]
[43.70007706 265.62066650]
[33.06764221 255.03997803]
[26.33113098 241.63775635]
[24.18333054 226.79231262]
[26.84512138 212.03038025]
[34.04236603 198.87057495]
[20.39788437 205.10180664]
[6.75340509 211.33302307]
[-6.89107513 217.56425476]
[-20.53555489 223.79547119]
[-34.18003464 230.02670288]
[-46.07607651 242.10646057]
[-60.97690582 234.01933289]
[-57.33078384 217.46209717]
[-40.41125870 216.38221741]
[-26.76678085 210.15100098]
[-13.12230015 203.91976929]
[0.52217966 197.68855286]
[14.16665936 191.45732117]
[27.81114006 185.22608948]
[29.97674179 180.73181152]
[34.19107056 177.24459839]
[39.93776321 175.68960571]
[49.21014786 163.89881897]
[58.48253250 152.10801697]
[67.75492096 140.31723022]
[76.06372070 127.82867432]
[83.35666656 114.72093201]
[90.64962006 101.61319733]
[90.36299133 96.17458344]
[93.24461365 91.00594330]
[98.84371948 87.92678070]
[106.95333099 75.30797577]
[115.06294250 62.68917465]
[123.17255402 50.07037354]
[131.28216553 37.45156860]
[138.98733521 24.58181953]
[146.28027344 11.47407818]
[153.57322693 -1.63366246]
[138.84858704 1.22729445]
[125.60310364 -5.81237936]
[119.73603058 -19.61735916]
[123.86044312 -34.03918839]
[136.13941956 -42.65468597]
[151.10415649 -41.62668228]
[162.08966064 -31.41303253]
[164.20286560 -16.56088638]
[174.20439148 -27.73985291]
[184.20593262 -38.91881943]
[194.20745850 -50.09778595]
[204.20899963 -61.27675247]
[214.21054077 -72.45571899]
[224.21206665 -83.63468933]
[224.76084900 -99.66835022]
[237.72402954 -109.12008667]
[253.15739441 -104.73932648]
[259.22177124 -89.88661957]
[251.26507568 -75.95568848]
[235.39103699 -73.63314819]
[225.38949585 -62.45418549]
[215.38796997 -51.27521896]
[205.38642883 -40.09625244]
[195.38488770 -28.91728401]
[185.38336182 -17.73831749]
[175.38182068 -6.55935049]
[166.68096924 5.65928841]
[159.38801575 18.76702881]
[152.09506226 31.87476921]
[152.58248901 36.79578018]
[149.85205078 42.04544449]
[143.90097046 45.56118393]
[135.79135132 58.17998505]
[127.68174744 70.79878998]
[119.57213593 83.41759491]
[111.46252441 96.03639221]
[103.75736237 108.90614319]
[96.46440887 122.01388550]
[89.17145538 135.12162781]
[89.54267120 139.32328796]
[88.73162842 143.09968567]
[86.99308777 146.15126038]
[84.64901733 148.28282166]
[82.05171204 149.41598511]
[79.54571533 149.58961487]
[70.27333069 161.38040161]
[61.00094604 173.17120361]
[51.72855759 184.96199036]
[66.21486664 181.07011414]
[81.18822479 181.96382141]
[95.10874939 187.55120850]
[106.54485321 197.25767517]
[114.32043457 210.08500671]
[117.63584900 224.71401978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[28 92]
[29 91]
[30 90]
[31 89]
[32 83]
[33 82]
[34 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 73]
[43 72]
[44 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
