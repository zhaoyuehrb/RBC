%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGCCUCCCCUGCCUAUCAGCUGAUGAUGGCCGCAGGAAGGUGGGCCUGGAAGAUAACAGCUAGCAGGCUAAGGUCAGACACUGACACUUGCAGUUGUCUUUGGUAGUUUUUUUGCACUAACUUCAGGAACCAGCUCAUGAUCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[49.02784348 388.33743286]
[34.53042603 392.18774414]
[19.53423309 392.52566528]
[4.87808847 389.33233643]
[-8.61820412 382.78634644]
[-20.19971848 373.25384521]
[-29.21863365 361.26803589]
[-35.17047119 347.49938965]
[-37.72230530 332.71804810]
[-36.73140335 317.75082397]
[-32.25318527 303.43490601]
[-24.53889275 290.57202148]
[-37.73099899 297.71124268]
[-50.92310715 304.85046387]
[-64.11521149 311.98965454]
[-77.30731964 319.12887573]
[-90.34906006 326.53918457]
[-103.23487091 334.21746826]
[-116.12068176 341.89575195]
[-129.00648499 349.57403564]
[-141.89230347 357.25228882]
[-154.77810669 364.93057251]
[-160.09446716 380.06713867]
[-175.29023743 385.21188354]
[-188.70851135 376.41818237]
[-190.05595398 360.43179321]
[-178.29890442 349.51614380]
[-162.45639038 352.04476929]
[-149.57057190 344.36648560]
[-136.68476868 336.68820190]
[-123.79895782 329.00994873]
[-110.91314697 321.33166504]
[-98.02733612 313.65338135]
[-95.99752808 309.26681519]
[-91.15724945 306.13931274]
[-84.44652557 305.93676758]
[-71.25442505 298.79754639]
[-58.06231689 291.65835571]
[-44.87020874 284.51913452]
[-31.67810440 277.37991333]
[-28.03080177 270.59805298]
[-20.21376991 267.04309082]
[-11.75177574 254.65782166]
[-10.96046638 239.78425598]
[3.21323061 232.75453186]
[11.67522526 220.36927795]
[20.13722038 207.98402405]
[20.49073029 190.46553040]
[37.09460068 182.57142639]
[45.29882431 170.01393127]
[53.50304794 157.45643616]
[61.70727158 144.89894104]
[69.91149139 132.34144592]
[78.11571503 119.78394318]
[72.41661072 110.46341705]
[70.50015259 99.70798492]
[72.62915039 88.99260712]
[78.51163483 79.78672028]
[87.34092712 73.35278320]
[97.90621948 70.57309723]
[100.68038940 55.83186722]
[103.45455933 41.09063339]
[106.22872162 26.34939766]
[109.00289154 11.60816288]
[111.77705383 -3.13307190]
[110.28481293 -12.21034241]
[114.76389313 -18.14891434]
[117.84212494 -32.82966614]
[120.92035675 -47.51041794]
[123.99858093 -62.19117355]
[127.07681274 -76.87192535]
[121.19509125 -82.99214935]
[118.28051758 -90.86379242]
[118.74763489 -99.15010071]
[122.44341278 -106.47565460]
[128.68516541 -111.65467834]
[136.38543701 -113.88282776]
[140.66548157 -128.25923157]
[144.94552612 -142.63565063]
[149.22555542 -157.01206970]
[153.50559998 -171.38847351]
[152.23010254 -188.29437256]
[168.12222290 -194.20004272]
[178.19647217 -180.56385803]
[167.88201904 -167.10842896]
[163.60197449 -152.73202515]
[159.32192993 -138.35560608]
[155.04188538 -123.97919464]
[150.76184082 -109.60278320]
[157.96865845 -89.21798706]
[141.75756836 -73.79369354]
[138.67933655 -59.11294174]
[135.60110474 -44.43218994]
[132.52287292 -29.75143623]
[129.44464111 -15.07068443]
[126.51829529 -0.35890496]
[123.74412537 14.38232994]
[120.96995544 29.12356377]
[118.19579315 43.86479950]
[115.42162323 58.60603333]
[112.64745331 73.34726715]
[119.74576569 78.08126831]
[125.19248199 84.64861298]
[128.53202820 92.50000000]
[143.53202820 92.50000000]
[158.53202820 92.50000000]
[173.53202820 92.50000000]
[188.53202820 92.50000000]
[197.17671204 89.35470581]
[203.84123230 92.65821075]
[218.83802795 92.96821594]
[230.06695557 81.84677124]
[245.87043762 82.00632477]
[256.87255859 93.35221100]
[256.54592896 109.15312195]
[245.08435059 120.03466034]
[229.28776550 119.54099274]
[218.52801514 107.96501160]
[203.53121948 107.65500641]
[188.53202820 107.50000000]
[173.53202820 107.50000000]
[158.53202820 107.50000000]
[143.53202820 107.50000000]
[128.53202820 107.50000000]
[114.04106140 125.94561005]
[90.67321014 127.98816681]
[82.46898651 140.54565430]
[74.26477051 153.10316467]
[66.06054688 165.66065979]
[57.85632324 178.21815491]
[49.65209961 190.77565002]
[51.52790451 203.57838440]
[44.38467026 213.88223267]
[32.52248001 216.44601440]
[24.06048393 228.83126831]
[15.59848976 241.21652222]
[14.20192242 256.97598267]
[0.63348389 263.11981201]
[-7.82851076 275.50506592]
[5.76268387 269.15847778]
[20.46424866 266.18121338]
[35.45384216 266.73989868]
[49.89300919 270.80319214]
[62.97407913 278.14389038]
[73.96535492 288.35131836]
[82.25202942 300.85455322]
[87.37059021 314.95422363]
[89.03470612 329.86163330]
[87.15131378 344.74291992]
[81.82575226 358.76568604]
[73.35591125 371.14559937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[42 139]
[43 138]
[45 136]
[46 135]
[47 134]
[49 131]
[50 130]
[51 129]
[52 128]
[53 127]
[54 126]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
