%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGGGCCACAGCAGCUCAGCCGCCGGUGCCCCCUCGGAAACCAUGACCCCCGGCGCGGGCCCAUGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[121.05344391 109.78804779]
[106.14017487 108.17732239]
[98.15850830 110.56336975]
[90.62490845 106.16299438]
[75.79473877 103.91216278]
[60.96457672 101.66133118]
[46.13441467 99.41050720]
[29.33056068 106.58093262]
[15.93586826 95.45022583]
[1.02259982 93.83950043]
[-13.89066887 92.22878265]
[-30.37047768 100.11550903]
[-44.23163605 89.57138062]
[-59.20039368 88.60375214]
[-73.47093964 95.43470764]
[-85.67258453 86.89250946]
[-100.64134216 85.92488098]
[-116.83752441 90.93686676]
[-126.13719177 76.76110077]
[-115.08981323 63.90061951]
[-99.67371368 70.95612335]
[-84.70495605 71.92375183]
[-71.50507355 65.02358246]
[-58.23276520 73.63499451]
[-43.26400757 74.60262299]
[-33.79014206 66.77636719]
[-21.12736320 67.65684509]
[-12.27994823 77.31551361]
[2.63332009 78.92623901]
[17.54658890 80.53695679]
[27.34838486 73.12553406]
[39.96155930 74.54998016]
[48.38524628 84.58033752]
[63.21540833 86.83116913]
[78.04557037 89.08200073]
[92.87574005 91.33283234]
[107.75090027 93.26405334]
[122.66416931 94.87477875]
[132.15786743 81.51765442]
[146.97019958 74.72760773]
[163.10147095 76.23610687]
[176.24655151 85.54743958]
[182.94384766 100.09592438]
[197.91261292 101.06355286]
[212.88136292 102.03118134]
[227.85012817 102.99880981]
[242.81887817 103.96643066]
[254.63160706 93.81275177]
[269.79827881 95.00730133]
[279.40545654 106.33150482]
[294.37420654 107.29913330]
[309.34298706 108.26675415]
[321.04901123 97.64864349]
[336.83026123 98.50135040]
[347.32403564 110.31898499]
[346.30453491 126.09035492]
[334.37658691 136.45858765]
[318.61688232 135.27238464]
[308.37533569 123.23551178]
[293.40658569 122.26788330]
[278.43783569 121.30026245]
[267.45263672 131.29330444]
[252.25840759 130.52523804]
[241.85125732 118.93518829]
[226.88249207 117.96756744]
[211.91374207 116.99993896]
[196.94497681 116.03231049]
[181.97622681 115.06468201]
[175.05662537 127.02780914]
[163.56529236 134.82502747]
[149.75988770 136.85418701]
[136.38348389 132.65339661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[4 36]
[5 35]
[6 34]
[7 33]
[9 30]
[10 29]
[11 28]
[13 25]
[14 24]
[16 22]
[17 21]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
