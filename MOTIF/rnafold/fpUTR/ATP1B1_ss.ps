%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGGCGCGUCCUGCCUGCAGAGAGCCAGGCCGGAGAAGCCGAGCGGCGCAGAGGACGCCAGGGCGCGCGCCGCAGCCACCCACCCUCCGGACCGCGGCAGCUGCUGACCCGCCAUCGCC\
) } def
/len { sequence length } bind def

/coor [
[254.19740295 216.27014160]
[249.26927185 202.10279846]
[244.34112549 187.93545532]
[239.41299438 173.76811218]
[234.48486328 159.60078430]
[229.55673218 145.43344116]
[224.62858582 131.26609802]
[214.29859924 120.38992310]
[200.40374756 114.73900604]
[186.50888062 109.08808136]
[172.61402893 103.43716431]
[158.71916199 97.78624725]
[144.82431030 92.13533020]
[130.92944336 86.48441315]
[90.03811646 131.00624084]
[76.00236511 136.29753113]
[61.96661377 141.58880615]
[47.93086243 146.88008118]
[33.96440125 152.35163879]
[20.06954002 158.00256348]
[12.53508091 172.16629028]
[-3.26200533 174.96479797]
[-15.20354557 164.25129700]
[-14.12901306 148.24426270]
[-0.86269587 139.22294617]
[14.41862202 144.10769653]
[28.31348228 138.45678711]
[33.38416672 132.95721436]
[42.63958359 132.84432983]
[56.67533493 127.55305481]
[70.71109009 122.26177216]
[84.74684143 116.97048950]
[84.93996429 101.97173309]
[71.04510498 96.32081604]
[57.15024567 90.66989899]
[41.86892700 95.55465698]
[28.60260963 86.53332520]
[27.52807808 70.52629852]
[39.46961975 59.81279755]
[55.26670456 62.61130142]
[62.80116272 76.77503967]
[76.69602203 82.42595673]
[90.59088135 88.07687378]
[95.96202087 82.84229279]
[92.26630402 68.30469513]
[106.70430756 72.37313080]
[112.07544708 67.13854980]
[106.78416443 53.10279846]
[101.49288940 39.06704712]
[96.20160675 25.03129387]
[81.38789368 20.02251053]
[73.30371857 6.63669014]
[75.76618958 -8.80579185]
[87.61259460 -19.01346970]
[103.24942780 -19.16658783]
[115.29345703 -9.19284916]
[118.05785370 6.19845057]
[110.23735809 19.74001122]
[115.52864075 33.77576447]
[120.81991577 47.81151581]
[126.11119843 61.84726715]
[136.58036804 72.58955383]
[150.47521973 78.24047089]
[164.37008667 83.89138794]
[178.26493835 89.54230499]
[192.15980530 95.19322205]
[206.05465698 100.84414673]
[219.94952393 106.49506378]
[226.68701172 89.93395233]
[242.37004089 84.38615417]
[255.83828735 91.83777618]
[270.12780762 87.27605438]
[284.41735840 82.71433258]
[298.70687866 78.15261078]
[312.99639893 73.59088898]
[320.67742920 57.93740845]
[336.96478271 52.72768021]
[351.71279907 60.69828415]
[365.88012695 55.77014923]
[368.08248901 40.62392044]
[377.08078003 28.24290848]
[390.80725098 21.47217369]
[406.10763550 21.86758423]
[419.46606445 29.33827591]
[427.81283569 42.16754150]
[429.22991943 57.40730667]
[423.39169312 71.55558777]
[411.63973999 81.36120605]
[396.67459106 84.57091522]
[381.93508911 80.44713593]
[370.80825806 69.93748474]
[356.64093018 74.86562347]
[352.67025757 87.19606018]
[342.14358521 95.07599640]
[328.80346680 95.42182159]
[317.55813599 87.88041687]
[303.26861572 92.44213867]
[288.97906494 97.00386047]
[274.68954468 101.56558228]
[260.40002441 106.12730408]
[254.69807434 120.25561523]
[238.79592896 126.33796692]
[243.72406006 140.50531006]
[248.65220642 154.67265320]
[253.58033752 168.83998108]
[258.50848389 183.00732422]
[263.43661499 197.17466736]
[268.36474609 211.34199524]
[283.54214478 212.18730164]
[297.23861694 218.78089905]
[307.36547852 230.11734009]
[312.37850952 244.46788025]
[311.51324463 259.64416504]
[304.90164185 273.33193970]
[293.55191040 283.44387817]
[279.19476318 288.43804932]
[264.01962280 287.55282593]
[250.34057617 280.92318726]
[240.24356079 269.56015015]
[235.26829529 255.19648743]
[236.17349243 240.02252197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[5 104]
[6 103]
[7 102]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 32]
[16 31]
[17 30]
[18 29]
[19 27]
[20 26]
[33 43]
[34 42]
[35 41]
[47 61]
[48 60]
[49 59]
[50 58]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[78 92]
[79 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
