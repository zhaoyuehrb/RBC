%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCUCCUUGGCCCCUCAGCCUGCGCCUGAGAGGUAAGAGAGGGCGGGGGGAAGGAAGAGGAGGCGGGAUCCGGGCGCUGCGUUGGCUGCGGCCUGGCACCAAAGGGGCGGCCCCGGCGGAGAGCGGACCCAGUGGCCUCGGCGAUU\
) } def
/len { sequence length } bind def

/coor [
[-7.01697683 182.45082092]
[-15.24936676 176.57356262]
[-21.66829300 168.77832031]
[-35.65873337 174.18827820]
[-49.64917374 179.59822083]
[-63.63961411 185.00817871]
[-77.63005829 190.41812134]
[-91.62049866 195.82807922]
[-105.61093903 201.23802185]
[-119.60137939 206.64797974]
[-133.59182739 212.05792236]
[-140.52412415 218.11206055]
[-147.93467712 217.43103027]
[-162.03607178 222.54483032]
[-176.13745117 227.65861511]
[-190.18415833 232.92077637]
[-204.17459106 238.33071899]
[-218.16503906 243.74067688]
[-229.34025574 258.33663940]
[-246.54751587 255.04045105]
[-260.42077637 260.74417114]
[-274.29406738 266.44787598]
[-288.16732788 272.15158081]
[-290.84530640 287.34472656]
[-301.32897949 298.66268921]
[-316.27304077 302.49392700]
[-330.90890503 297.61590576]
[-340.56631470 285.58520508]
[-342.16363525 270.24075317]
[-335.19116211 256.47891235]
[-321.87377930 248.69105530]
[-306.46099854 249.36224365]
[-293.87103271 258.27828979]
[-279.99777222 252.57460022]
[-266.12448120 246.87088013]
[-252.25122070 241.16717529]
[-247.27659607 230.09437561]
[-235.70960999 225.24952698]
[-223.57498169 229.75022888]
[-209.58454895 224.34028625]
[-195.59410095 218.93032837]
[-190.45501709 213.54797363]
[-181.25125122 213.55722046]
[-167.14985657 208.44343567]
[-153.04846191 203.32965088]
[-139.00177002 198.06748962]
[-125.01132965 192.65753174]
[-111.02088928 187.24758911]
[-97.03044891 181.83763123]
[-83.04000854 176.42768860]
[-69.04956818 171.01773071]
[-55.05912399 165.60778809]
[-41.06868362 160.19783020]
[-27.07824326 154.78788757]
[-25.42571640 134.74603271]
[-13.89752007 118.17715454]
[4.45580721 109.59732819]
[24.71126175 111.39096832]
[41.39384079 123.14877319]
[54.58990479 116.01687622]
[67.78597260 108.88498688]
[80.98204041 101.75309753]
[85.22459412 87.89860535]
[97.97157288 81.00942993]
[111.88607025 85.05083466]
[125.08213806 77.91894531]
[138.20228577 70.64833832]
[151.24505615 63.23981857]
[164.28782654 55.83130264]
[170.25447083 48.82355118]
[177.68460083 48.40740204]
[190.88066101 41.27551270]
[204.07673645 34.14361954]
[217.27279663 27.01173210]
[217.80535889 11.72567177]
[225.86448669 -1.15638292]
[239.20089722 -8.22790718]
[254.18601990 -7.67821980]
[266.79904175 0.24498352]
[279.99511719 -6.88690662]
[293.19116211 -14.01879692]
[306.38723755 -21.15068626]
[308.55770874 -36.40176010]
[319.16827393 -47.32279968]
[333.99957275 -49.87170029]
[347.32827759 -43.27751160]
[360.52435303 -50.40940094]
[373.72042847 -57.54129410]
[386.91647339 -64.67317963]
[400.11254883 -71.80507660]
[413.30862427 -78.93696594]
[417.76065063 -91.08952332]
[428.95388794 -96.74456024]
[440.60626221 -93.34221649]
[453.94976807 -100.19431305]
[467.29324341 -107.04640198]
[469.53900146 -122.40010834]
[480.40460205 -133.47793579]
[495.71200562 -136.02024841]
[509.57519531 -129.04946899]
[516.66345215 -115.24600220]
[514.25128174 -99.91756439]
[503.26617432 -88.95825958]
[487.93209839 -86.58215332]
[474.14535522 -93.70291138]
[460.80184937 -86.85081482]
[447.45834351 -79.99872589]
[438.79760742 -64.76896667]
[420.44049072 -65.74089813]
[407.24444580 -58.60900879]
[394.04837036 -51.47711563]
[380.85229492 -44.34522629]
[367.65625000 -37.21333694]
[354.46017456 -30.08144760]
[352.67410278 -15.31838703]
[342.41607666 -4.30762291]
[327.46670532 -1.41463304]
[313.51913452 -7.95462132]
[300.32305908 -0.82273120]
[287.12701416 6.30915880]
[273.93093872 13.44104862]
[273.64877319 28.33352852]
[265.89862061 41.17062759]
[252.67616272 48.45299911]
[237.48416138 48.13715363]
[224.40469360 40.20779800]
[211.20861816 47.33968735]
[198.01255798 54.47157669]
[184.81649780 61.60346603]
[171.69635010 68.87407684]
[158.65357971 76.28259277]
[145.61080933 83.69110870]
[141.31909180 89.77068329]
[132.21403503 91.11501312]
[119.01795959 98.24690247]
[114.77540588 112.10139465]
[102.02842712 118.99057007]
[88.11392975 114.94916534]
[74.91786194 122.08105469]
[61.72179794 129.21295166]
[48.52573013 136.34483337]
[50.22714996 146.47207642]
[49.24990463 156.67744446]
[45.66947556 166.26568604]
[39.73838806 174.58589172]
[31.86842155 181.07568359]
[22.60201645 185.29925537]
[12.57490921 186.97657776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[13 45]
[14 44]
[15 43]
[16 41]
[17 40]
[18 39]
[20 36]
[21 35]
[22 34]
[23 33]
[59 141]
[60 140]
[61 139]
[62 138]
[65 135]
[66 134]
[67 132]
[68 131]
[69 130]
[71 129]
[72 128]
[73 127]
[74 126]
[79 121]
[80 120]
[81 119]
[82 118]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
