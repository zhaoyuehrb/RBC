%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGCGGGGGCGCAGUCGCCGGGCCGCGGGCGGCGGGACGGACGAGGCCGGGGCCCCGGGUGGCACCCGGCAGGCGGGCAGGCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[87.42063904 128.57113647]
[76.07095337 122.86074066]
[67.00740814 134.81282043]
[57.94386292 146.76489258]
[48.88031769 158.71696472]
[39.81677246 170.66905212]
[30.75322723 182.62112427]
[29.24324036 198.95060730]
[14.23539066 205.56092834]
[1.16846657 195.65197754]
[3.48459911 179.41720581]
[18.80114937 173.55757141]
[27.86469650 161.60549927]
[36.92824173 149.65342712]
[45.99178696 137.70133972]
[55.05533218 125.74926758]
[64.11888123 113.79719543]
[61.57022476 99.01529694]
[49.02749252 90.78852081]
[36.34613037 82.77708435]
[23.52984047 74.98332977]
[10.71354961 67.18956757]
[-4.45944309 70.71349335]
[-17.34595871 62.62693787]
[-20.61197662 48.14009094]
[-33.42826843 40.34633255]
[-46.24456024 32.55257416]
[-59.06085205 24.75881386]
[-74.92546082 27.14496422]
[-86.58393860 16.12409973]
[-85.09289551 0.15048550]
[-71.59613800 -8.52228928]
[-56.44721603 -3.24121308]
[-51.26708984 11.94252300]
[-38.45080185 19.73628235]
[-25.63450813 27.53004265]
[-12.81821823 35.32380295]
[1.54701948 31.55875778]
[14.65558624 39.28016663]
[18.50730896 54.37327576]
[31.32360077 62.16703415]
[44.13989258 69.96079254]
[51.64758301 70.76268768]
[57.25426865 78.24578857]
[69.79700470 86.47256470]
[83.95111084 73.22344971]
[102.04640198 70.72986603]
[117.26049042 78.63594818]
[129.51504517 69.98574829]
[141.76959229 61.33554077]
[154.02413940 52.68533707]
[166.27868652 44.03512955]
[178.53323364 35.38492584]
[190.63830566 26.52676010]
[202.59039307 17.46321487]
[214.54246521 8.39966774]
[216.44590759 -7.28957748]
[228.93717957 -16.97171021]
[244.60542297 -14.90249252]
[254.15495300 -2.30955458]
[251.92019653 13.33593750]
[239.22700500 22.75178909]
[223.60600281 20.35174561]
[211.65393066 29.41529083]
[199.70185852 38.47883606]
[196.20164490 45.16889954]
[187.18344116 47.63947296]
[174.92889404 56.28968048]
[162.67434692 64.93988800]
[150.41979980 73.59008789]
[138.16523743 82.24029541]
[125.91069794 90.89049530]
[127.14174652 104.20387268]
[121.94088745 116.52103424]
[131.00444031 128.47311401]
[140.06797791 140.42518616]
[149.13153076 152.37725830]
[164.35995483 150.37963867]
[178.54081726 156.27868652]
[187.85952759 168.48757935]
[189.80941772 183.72219849]
[183.86595154 197.88449097]
[171.62791443 207.16490173]
[156.38725281 209.06701660]
[142.24365234 203.07919312]
[133.00166321 190.81211853]
[131.14732361 175.56558228]
[137.17944336 161.44081116]
[128.11590576 149.48873901]
[119.05235291 137.53665161]
[109.98880768 125.58457947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[18 45]
[19 44]
[20 42]
[21 41]
[22 40]
[25 37]
[26 36]
[27 35]
[28 34]
[48 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 65]
[55 64]
[56 63]
[74 91]
[75 90]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
