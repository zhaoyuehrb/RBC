%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGCAGAGAAACAGGUGAGGAGAAGCAGCGAGAGAGAAGGGGCCAGGUAUAAAAAGGGCCCACAAGAGACCAGCUCAAGGAUCCCAAGGCCCAACUCCCCGAACCACUCAGGGUCCUGUGGACAGCUCACCUAGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[82.03617096 457.06216431]
[67.96255493 462.50238037]
[52.96035385 464.11370850]
[38.05244446 461.78631592]
[24.25527763 455.67889404]
[12.50956154 446.20785522]
[3.61614013 434.01895142]
[-1.81861770 419.94323730]
[-3.42416167 404.94042969]
[-1.09102273 390.03341675]
[5.02172136 376.23858643]
[14.49729443 364.49655151]
[26.68963432 355.60781860]
[40.76744843 350.17849731]
[55.77088928 348.57876587]
[58.08462524 333.75827026]
[60.39835739 318.93780518]
[62.71209335 304.11730957]
[65.02582550 289.29684448]
[67.33956146 274.47634888]
[69.65328979 259.65588379]
[56.35097885 250.86744690]
[48.16695786 237.11741638]
[46.77462387 221.11856079]
[52.50157928 206.05300903]
[64.25437164 194.93931580]
[79.72688293 190.02764893]
[81.71218872 175.15960693]
[83.69750214 160.29158020]
[85.68280792 145.42353821]
[83.43253326 138.32112122]
[87.88002014 130.24993896]
[90.19374847 115.42945862]
[83.13748932 105.72279358]
[83.72014618 94.05223083]
[91.28882599 85.56771851]
[88.97509003 70.74723816]
[86.66135406 55.92676163]
[74.90381622 49.25963593]
[69.23878479 37.20301056]
[71.54301453 24.28070068]
[80.74848175 15.19930172]
[78.76317596 0.33126336]
[76.77787018 -14.53677464]
[74.79256439 -29.40481186]
[72.80725098 -44.27285004]
[61.23174286 -58.54663849]
[68.44990540 -74.50538635]
[66.13616943 -89.32586670]
[56.36280823 -101.76741028]
[62.04434204 -115.53583527]
[59.73060608 -130.35630798]
[46.40019989 -134.73413086]
[36.31656265 -144.39480591]
[31.41863441 -157.40136719]
[32.61386108 -171.18151855]
[39.61063766 -183.03631592]
[50.98673248 -190.66873169]
[49.00142288 -205.53677368]
[47.01611710 -220.40481567]
[45.03080750 -235.27285767]
[30.40921783 -239.53067017]
[18.78773689 -249.37246704]
[12.17985439 -263.09310913]
[11.73042774 -278.31539917]
[17.51732254 -292.40197754]
[28.53792381 -302.91226196]
[42.88284683 -308.02529907]
[58.06674194 -306.85519409]
[71.45891571 -299.60470581]
[80.73908997 -287.52999878]
[84.29941559 -272.72311401]
[81.52304840 -257.74942017]
[72.89100647 -245.20320129]
[59.89884567 -237.25816345]
[61.88415146 -222.39012146]
[63.86946106 -207.52207947]
[65.85476685 -192.65403748]
[80.91184235 -186.89024353]
[91.08390808 -174.26115417]
[93.53572845 -158.13670349]
[87.50849915 -142.88072205]
[74.55108643 -132.67004395]
[76.86482239 -117.84957123]
[86.47268677 -106.46808624]
[80.95664978 -91.63960266]
[83.27038574 -76.81912231]
[92.88347626 -69.39520264]
[94.89388275 -57.00939941]
[87.67529297 -46.25815964]
[89.66059875 -31.39011955]
[91.64590454 -16.52208328]
[93.63121796 -1.65404451]
[95.61652374 13.21399307]
[109.38623047 22.80742264]
[112.04724884 39.71814728]
[101.48183441 53.61302567]
[103.79557037 68.43350983]
[106.10930634 83.25399017]
[117.28603363 93.25801849]
[132.27134705 93.92152405]
[147.25666809 94.58502197]
[155.44920349 81.59355927]
[169.04733276 74.45309448]
[184.39324951 75.08436584]
[197.35896301 83.31758118]
[204.45677185 96.93802643]
[203.77740479 112.28189087]
[195.50358582 125.22173309]
[181.86096191 132.27680969]
[166.51930237 131.54934692]
[153.60545349 123.23501587]
[146.59317017 109.57033539]
[131.60784912 108.90683746]
[116.62253571 108.24333954]
[105.01422882 117.74319458]
[102.70050049 132.56367493]
[100.55084229 147.40884399]
[98.56553650 162.27688599]
[96.58023071 177.14491272]
[94.59492493 192.01295471]
[106.72510529 199.34675598]
[115.10651398 210.72430420]
[118.49372864 224.39904785]
[116.40483093 238.28741455]
[109.18968964 250.28634644]
[97.97187042 258.59173584]
[84.47377014 261.96960449]
[82.16004181 276.79010010]
[79.84630585 291.61056519]
[77.53256989 306.43106079]
[75.21884155 321.25152588]
[72.90510559 336.07202148]
[70.59136963 350.89248657]
[84.39324951 356.98925781]
[96.14627838 366.45120239]
[105.04911041 378.63323975]
[110.49473572 392.70477295]
[112.11186218 407.70632935]
[109.79023743 422.61514282]
[103.68814850 436.41467285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[27 121]
[28 120]
[29 119]
[30 118]
[32 117]
[33 116]
[36 99]
[37 98]
[38 97]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[48 87]
[49 86]
[51 84]
[52 83]
[58 78]
[59 77]
[60 76]
[61 75]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
