%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGGUGGUGCUAGACGUUUCGGGCAGAGCUCGGCCGCUGCGGAGGACAAGGAACUCUCCCUCUCCCACUAGUCUGACUUCUUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[88.07024384 457.68182373]
[86.51948547 442.76220703]
[84.96871948 427.84255981]
[83.41796112 412.92294312]
[81.86720276 398.00332642]
[80.31644440 383.08370972]
[77.06824493 379.31735229]
[76.29817963 373.41070557]
[79.21013641 367.08642578]
[78.69239807 352.09536743]
[78.17465210 337.10430908]
[75.19403839 333.12283325]
[74.83331299 327.17712402]
[78.17465210 321.06881714]
[78.69239807 306.07775879]
[79.21013641 291.08670044]
[79.72788239 276.09564209]
[80.24562073 261.10458374]
[68.11894226 254.57872009]
[59.98532104 243.38380432]
[57.50234985 229.70301819]
[61.21862030 216.23547363]
[70.45384216 205.66375732]
[83.42251587 200.11956787]
[84.45738220 185.15530396]
[85.49224854 170.19105530]
[82.75427246 163.15121460]
[86.82988739 154.73098755]
[88.38064575 139.81137085]
[89.93140411 124.89174652]
[91.48216248 109.97212219]
[59.91336441 86.93650818]
[53.87545776 73.20539093]
[47.83754730 59.47426987]
[35.19981384 49.95595551]
[37.15952682 35.19083405]
[31.12162018 21.45971298]
[17.58608627 12.20112896]
[19.10611153 -4.12742138]
[34.11802292 -10.72852516]
[47.17885208 -0.81153220]
[44.85274124 15.42180538]
[50.89064789 29.15292549]
[63.09650803 37.68909836]
[61.56866837 53.43635941]
[67.60657501 67.16748047]
[73.64448547 80.89859772]
[80.98416138 82.44104767]
[79.38192749 67.52686310]
[93.07105255 61.39434052]
[103.13358307 72.51843262]
[95.66351318 85.52594757]
[103.00318909 87.06839752]
[114.05748749 76.92924500]
[125.11179352 66.79008484]
[129.51681519 50.99363708]
[145.46466064 47.17288208]
[156.54956055 59.25828934]
[151.36831665 74.81742859]
[135.25094604 77.84439087]
[124.19664764 87.98354340]
[113.14234161 98.12269592]
[106.40178680 111.52288055]
[104.85102844 126.44250488]
[103.30027008 141.36212158]
[101.74951172 156.28175354]
[100.45650482 171.22592163]
[99.42163849 186.19017029]
[98.38677216 201.15443420]
[112.12932587 210.16328430]
[119.46788025 224.76158142]
[118.51114655 240.97927856]
[109.60971832 254.45802307]
[95.23668671 261.62231445]
[94.71894073 276.61337280]
[94.20120239 291.60443115]
[93.68345642 306.59548950]
[93.16571808 321.58654785]
[93.16571808 336.58654785]
[93.68345642 351.57763672]
[94.20120239 366.56869507]
[95.23606873 381.53292847]
[96.78682709 396.45257568]
[98.33758545 411.37219238]
[99.88834381 426.29180908]
[101.43910217 441.21142578]
[102.98986053 456.13107300]
[113.04663849 469.08456421]
[106.60723877 484.16653442]
[90.29596710 485.86193848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[9 81]
[10 80]
[11 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[24 69]
[25 68]
[26 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 47]
[33 46]
[34 45]
[36 43]
[37 42]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
