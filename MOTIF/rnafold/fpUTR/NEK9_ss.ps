%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAACUGUUUCCGGGUCGGGGGGCAGGAGCCACCAUCGAGCUUCGCGGGGUUGCUGGGCUGACGGAUCCGCGGGCCGGCAUCUGAAGCGAGCGGGACGCAGCGCGGCCAGGGCCUCCGGGCAUACGCAGGCUGGUCCCCAAGGCCCGCGGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[167.51679993 220.85462952]
[158.95408630 208.53878784]
[157.37121582 193.62252808]
[163.15849304 179.78392029]
[174.88890076 170.43524170]
[189.66874695 167.88162231]
[176.87913513 160.04414368]
[164.08953857 152.20666504]
[151.29992676 144.36918640]
[136.40542603 144.31634521]
[128.68156433 130.50863647]
[115.89196777 122.67116547]
[103.10236359 114.83368683]
[88.12042999 114.09767151]
[74.62420654 120.64380646]
[65.58415222 133.62796021]
[50.75618362 132.22062683]
[37.25996017 138.76676941]
[23.76373672 145.31291199]
[10.26751232 151.85903931]
[-3.16379595 158.53736877]
[-16.52889442 165.34722900]
[-29.82649231 172.28796387]
[-43.05531311 179.35891724]
[-56.28413010 186.42987061]
[-64.47978973 200.63420105]
[-80.87677765 200.36814880]
[-88.60728455 185.90538025]
[-79.71881866 172.12397766]
[-63.35508347 173.20104980]
[-50.12626266 166.13009644]
[-36.89744568 159.05914307]
[-32.45782089 153.10166931]
[-23.33875084 151.98213196]
[-9.97365379 145.17227173]
[-5.41791868 139.30310059]
[3.72137380 138.36282349]
[17.21759796 131.81668091]
[30.71382141 125.27054596]
[44.21004486 118.72440338]
[52.28475952 106.20848083]
[68.07807159 107.14758301]
[81.57429504 100.60144806]
[86.20954895 86.33559418]
[79.13859558 73.10678101]
[72.06764984 59.87796021]
[64.99669647 46.64913940]
[48.18627930 41.89922714]
[40.14730835 26.77099991]
[45.40715790 10.82150841]
[38.07783890 -2.26593161]
[24.58401871 -10.52591705]
[25.11596680 -25.41102028]
[17.78664780 -38.49846268]
[10.45732975 -51.58589935]
[3.12801075 -64.67333984]
[-4.20130777 -77.76078033]
[-11.53062630 -90.84822083]
[-25.02444839 -99.10820770]
[-24.49249840 -113.99330902]
[-31.82181740 -127.08074951]
[-39.15113831 -140.16819763]
[-46.11138153 -146.16532898]
[-46.49299622 -153.58532715]
[-53.56394958 -166.81414795]
[-67.76828766 -175.00979614]
[-67.50222778 -191.40678406]
[-53.03947449 -199.13729858]
[-39.25806046 -190.24882507]
[-40.33512878 -173.88508606]
[-33.26417923 -160.65628052]
[-26.06369591 -147.49751282]
[-18.73437691 -134.41006470]
[-11.40505886 -121.32263184]
[1.56451988 -113.99874115]
[1.55681360 -98.17754364]
[8.88613224 -85.09010315]
[16.21545029 -72.00266266]
[23.54476929 -58.91521835]
[30.87408829 -45.82777786]
[38.20340729 -32.74034119]
[51.17298508 -25.41645432]
[51.16527939 -9.59525013]
[58.49459839 3.49218988]
[71.29228210 5.23136759]
[80.88364410 14.16913795]
[83.59993744 27.19405174]
[78.22551727 39.57818985]
[85.29646301 52.80700684]
[92.36741638 66.03582764]
[99.43836975 79.26464844]
[107.45415497 83.24371338]
[112.12076569 89.65373993]
[113.07453918 96.50885773]
[110.93984222 102.04408264]
[123.72944641 109.88156128]
[136.51904297 117.71903992]
[152.32835388 118.33247375]
[159.13740540 131.57958984]
[171.92701721 139.41706848]
[184.71661377 147.25454712]
[197.50622559 155.09202576]
[209.04876709 155.76777649]
[215.28276062 163.93087769]
[229.25099182 169.39793396]
[243.21920776 174.86500549]
[257.18743896 180.33206177]
[271.15567017 185.79911804]
[285.12387085 191.26617432]
[303.23333740 188.06520081]
[313.67871094 202.13949585]
[327.75155640 207.33125305]
[341.82443237 212.52301025]
[355.89730835 217.71476746]
[369.97018433 222.90652466]
[384.04306030 228.09828186]
[398.25885010 221.73046875]
[412.45678711 227.19612122]
[418.43991089 240.78794861]
[432.51275635 245.97970581]
[446.58563232 251.17146301]
[451.83135986 250.26268005]
[456.42562866 251.37823486]
[459.69793701 253.91912842]
[461.31900024 257.10543823]
[475.06182861 263.11666870]
[488.38034058 255.15446472]
[503.83224487 256.57485962]
[515.47601318 266.83166504]
[518.83435059 281.98098755]
[512.61590576 296.19754028]
[499.21179199 304.01480103]
[483.77618408 302.42684937]
[472.24438477 292.04431152]
[469.05056763 276.85949707]
[455.30776978 270.84826660]
[441.39389038 265.24432373]
[427.32101440 260.05258179]
[413.24813843 254.86080933]
[399.87133789 261.31039429]
[385.52551270 256.24569702]
[378.85128784 242.17114258]
[364.77841187 236.97938538]
[350.70556641 231.78764343]
[336.63269043 226.59588623]
[322.55981445 221.40412903]
[308.48693848 216.21237183]
[297.34051514 220.99467468]
[285.55294800 216.74411011]
[279.65682983 205.23439026]
[265.68859863 199.76733398]
[251.72036743 194.30027771]
[237.75215149 188.83322144]
[223.78392029 183.36616516]
[209.81570435 177.89910889]
[216.70037842 191.22581482]
[216.32585144 206.22114563]
[208.78445435 219.18753052]
[195.93576050 226.92774963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 102]
[7 101]
[8 100]
[9 99]
[11 97]
[12 96]
[13 95]
[14 43]
[15 42]
[17 40]
[18 39]
[19 38]
[20 37]
[21 35]
[22 34]
[23 32]
[24 31]
[25 30]
[44 91]
[45 90]
[46 89]
[47 88]
[50 84]
[51 83]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[60 74]
[61 73]
[62 72]
[64 71]
[65 70]
[104 155]
[105 154]
[106 153]
[107 152]
[108 151]
[109 150]
[111 147]
[112 146]
[113 145]
[114 144]
[115 143]
[116 142]
[119 139]
[120 138]
[121 137]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
