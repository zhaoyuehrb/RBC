%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCGCGGGGCGGGGCACGGCGCAGGGGUGGGGCCGCGGCGCGCAUGCGUCCUAGCAGCGGGACCCGCGGCUCGGGAUGGAGGCUGGACACCUGUUCUGCUGUUGUGUCCUGCCAUUCUCCUGAAGAACAGAGGCACACUGUAAAACCCAACACUUCCCCUUGCAUUCUAUAAGAUUACAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[472.28408813 337.98196411]
[459.29370117 330.48196411]
[446.30331421 322.98196411]
[433.31292725 315.48196411]
[420.32257080 307.98196411]
[407.33218384 300.48196411]
[398.46984863 305.72583008]
[388.14892578 306.81646729]
[378.23294067 303.48937988]
[370.54049683 296.28381348]
[366.51174927 286.45660400]
[366.93905640 275.76327515]
[354.33868408 267.62509155]
[341.73828125 259.48690796]
[329.13790894 251.34870911]
[316.53750610 243.21051025]
[303.93713379 235.07231140]
[291.33673096 226.93412781]
[278.73635864 218.79592896]
[266.13595581 210.65773010]
[253.53556824 202.51954651]
[240.93518066 194.38134766]
[228.33479309 186.24314880]
[215.73440552 178.10494995]
[203.06681824 170.07176208]
[190.33290100 162.14413452]
[177.59898376 154.21650696]
[164.86506653 146.28886414]
[151.93745422 138.68116760]
[138.82421875 131.39811707]
[125.71096802 124.11507416]
[112.59771729 116.83202362]
[99.48447418 109.54898071]
[85.56739807 103.95301056]
[71.06250000 100.13096619]
[56.55760574 96.30892181]
[42.05270767 92.48687744]
[27.54781342 88.66483307]
[13.04291821 84.84278870]
[-1.46197712 81.02075195]
[-15.96687222 77.19870758]
[-30.47176743 73.37666321]
[-46.44411469 83.53737640]
[-64.46733856 78.89549255]
[-73.23831940 62.84291840]
[-87.86223602 59.50510406]
[-102.48615265 56.16729355]
[-111.56847382 57.30908585]
[-117.32443237 52.65055466]
[-131.89085388 49.07012939]
[-146.45727539 45.48970795]
[-159.84556580 53.88788223]
[-175.23204041 50.27795410]
[-183.48820496 36.80162811]
[-179.71580505 21.45416641]
[-166.15293884 13.34095097]
[-150.84622192 17.27540588]
[-142.87684631 30.92328835]
[-128.31042480 34.50371170]
[-113.74401093 38.08413315]
[-99.14833832 41.54337311]
[-84.52442169 44.88118744]
[-69.90050507 48.21900177]
[-61.76763916 40.18612671]
[-50.64966965 37.05260849]
[-39.28531647 39.71080780]
[-30.53250504 47.61131668]
[-26.64972496 58.87176895]
[-12.14482975 62.69380951]
[2.36006594 66.51585388]
[16.86496162 70.33789825]
[31.36985588 74.15994263]
[45.87475204 77.98197937]
[60.37964630 81.80402374]
[74.88454437 85.62606812]
[89.38943481 89.44811249]
[99.22090912 78.11929321]
[93.39438629 64.29714966]
[78.25371552 60.90015030]
[68.02664948 49.23023987]
[66.64571381 33.77473450]
[74.64190674 20.47659302]
[88.94052124 14.44922161]
[104.04345703 18.01026726]
[114.14331818 29.79043579]
[115.35650635 45.26001358]
[107.21652985 58.47062683]
[113.04305267 72.29277039]
[114.07883453 79.48660278]
[113.22498322 86.16905212]
[110.69166565 91.93482971]
[106.76751709 96.43572998]
[119.88076782 103.71878052]
[132.99401855 111.00182343]
[146.10725403 118.28486633]
[159.22050476 125.56791687]
[164.47740173 125.47678375]
[168.80346680 127.24517822]
[171.64387512 130.20251465]
[172.79269409 133.55494690]
[185.52661133 141.48258972]
[198.26052856 149.41021729]
[210.99444580 157.33784485]
[219.95211792 159.22262573]
[223.87258911 165.50456238]
[236.47297668 173.64276123]
[249.07337952 181.78096008]
[261.67376709 189.91914368]
[274.27413940 198.05734253]
[286.87454224 206.19554138]
[299.47491455 214.33372498]
[312.07531738 222.47192383]
[324.67572021 230.61012268]
[337.27609253 238.74832153]
[349.87649536 246.88650513]
[362.47686768 255.02470398]
[375.07727051 263.16290283]
[394.44549561 257.88598633]
[411.20840454 268.36669922]
[414.83218384 287.49157715]
[427.82257080 294.99157715]
[440.81292725 302.49157715]
[453.80331421 309.99157715]
[466.79370117 317.49157715]
[479.78408813 324.99157715]
[487.39639282 324.26199341]
[493.64044189 327.18728638]
[497.07989502 332.28237915]
[511.51925659 336.34500122]
[525.95861816 340.40759277]
[540.39801025 344.47021484]
[555.48583984 335.63507080]
[571.97351074 340.34362793]
[579.80529785 355.21691895]
[594.31024170 359.03894043]
[608.81512451 362.86099243]
[623.32000732 366.68304443]
[633.26409912 355.15585327]
[647.17028809 349.11392212]
[662.25903320 349.70648193]
[675.53955078 356.76248169]
[684.40301514 368.83514404]
[687.13452148 383.49816895]
[701.63940430 387.32022095]
[716.14428711 391.14227295]
[728.07702637 381.22308350]
[743.56329346 380.24578857]
[756.64831543 388.58612061]
[762.30065918 403.03710938]
[758.34686279 418.04202271]
[746.30725098 427.83114624]
[730.81127930 428.64041138]
[717.81750488 420.15859985]
[712.32226562 405.64715576]
[697.81732178 401.82510376]
[683.31243896 398.00308228]
[673.70996094 409.41607666]
[660.04815674 415.55334473]
[645.01495361 415.14868164]
[631.59350586 408.22879028]
[622.47039795 396.11865234]
[619.49798584 381.18792725]
[604.99304199 377.36590576]
[590.48815918 373.54385376]
[575.98327637 369.72180176]
[565.85833740 377.70919800]
[552.78625488 378.41119385]
[541.53424072 371.34710693]
[536.33538818 358.90957642]
[521.89605713 354.84695435]
[507.45666504 350.78436279]
[493.01730347 346.72174072]
[503.43698120 357.51202393]
[509.90536499 371.04568481]
[511.75720215 385.93093872]
[508.80206299 400.63696289]
[501.34384155 413.65139771]
[490.14959717 423.63580322]
[476.37048340 429.56338501]
[461.42358398 430.82455444]
[446.84606934 427.28964233]
[434.13708496 419.32211304]
[424.60360718 407.74139404]
[419.22607422 393.73846436]
[418.55755615 378.75335693]
[422.66674805 364.32717896]
[431.13107300 351.94354248]
[443.08007812 342.87594604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[12 117]
[13 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 105]
[25 103]
[26 102]
[27 101]
[28 100]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[45 63]
[46 62]
[47 61]
[49 60]
[50 59]
[51 58]
[77 88]
[78 87]
[128 172]
[129 171]
[130 170]
[131 169]
[134 165]
[135 164]
[136 163]
[137 162]
[143 156]
[144 155]
[145 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
