%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAACCGUUGGGUGGGGCCAGGAGAGCGUUGGGUGGGGCCAGGAAACCGUCUGGUGGGAUCUCCGCAGCUGCUUUUCACCUGCUGUUCCUCCUGCGCUUCCUAAGAGGAAGAAUCA\
) } def
/len { sequence length } bind def

/coor [
[107.15200043 632.14819336]
[97.38636780 620.52935791]
[92.48108673 606.16613770]
[93.09954834 591.00097656]
[99.15812683 577.08489990]
[109.83744049 566.29986572]
[123.69319916 560.10449219]
[122.90156555 545.12542725]
[112.54235840 531.02697754]
[120.86411285 514.66601562]
[119.67736053 499.71301270]
[118.49060059 484.76004028]
[117.30384827 469.80706787]
[116.11708832 454.85409546]
[107.39710236 442.77886963]
[114.01831818 428.40979004]
[112.83156586 413.45681763]
[104.11157227 401.38159180]
[110.73278809 387.01251221]
[109.54603577 372.05953979]
[105.83355713 365.55914307]
[108.53063965 356.69708252]
[107.73900604 341.71798706]
[106.94738007 326.73889160]
[106.15574646 311.75979614]
[105.36412048 296.78070068]
[104.37483978 281.81335449]
[103.18807983 266.86038208]
[102.00132751 251.90739441]
[100.81457520 236.95440674]
[92.09458160 224.87918091]
[98.71579742 210.51011658]
[97.52904510 195.55714417]
[96.34228516 180.60415649]
[95.15553284 165.65118408]
[93.96877289 150.69819641]
[92.78202057 135.74522400]
[91.59526825 120.79223633]
[90.40850830 105.83925629]
[85.54787445 91.64862061]
[77.31749725 79.10824585]
[69.08712006 66.56787872]
[60.85674286 54.02750778]
[52.62636566 41.48713684]
[44.39598846 28.94676590]
[28.87236404 25.98153877]
[20.06147194 12.86118317]
[23.19065857 -2.63022518]
[36.40343475 -11.30190849]
[51.86089325 -8.00911140]
[60.39239883 5.29460812]
[56.93635941 20.71638870]
[65.16674042 33.25675964]
[73.39711761 45.79713058]
[81.62749481 58.33750153]
[89.85787201 70.87786865]
[98.08824158 83.41824341]
[112.75559998 80.27360535]
[127.42165375 77.12925720]
[129.78771973 62.31703949]
[123.42879486 47.20095444]
[133.55445862 34.30123138]
[149.74830627 36.88800049]
[155.35148621 52.30021667]
[144.59992981 64.68311310]
[142.23387146 79.49532318]
[156.22094727 84.91394806]
[164.45132446 72.37358093]
[164.84812927 55.97923660]
[179.37207031 48.36431122]
[193.08216858 57.36238861]
[191.87464905 73.71701813]
[176.99169922 80.60395813]
[168.76132202 93.14432526]
[147.71980286 108.28919983]
[125.08202362 111.91103363]
[105.36148834 104.65250397]
[106.54824829 119.60548401]
[107.73500061 134.55845642]
[108.92175293 149.51144409]
[110.10851288 164.46441650]
[111.29526520 179.41740417]
[112.48202515 194.37037659]
[113.66877747 209.32336426]
[122.47365570 222.46812439]
[115.76755524 235.76765442]
[116.95430756 250.72062683]
[118.14105988 265.67361450]
[119.32781982 280.62658691]
[123.16783142 289.05657959]
[120.34321594 295.98907471]
[121.13484192 310.96817017]
[121.92647552 325.94726562]
[122.71810150 340.92636108]
[123.50973511 355.90545654]
[124.49901581 370.87277222]
[125.68576813 385.82577515]
[134.49064636 398.97052002]
[127.78454590 412.27005005]
[128.97129822 427.22302246]
[137.77616882 440.36779785]
[131.07006836 453.66732788]
[132.25682068 468.62030029]
[133.44358826 483.57327271]
[134.63034058 498.52627563]
[135.81709290 513.47924805]
[145.15328979 522.49713135]
[145.76919556 535.05975342]
[137.88066101 544.33380127]
[138.67230225 559.31286621]
[153.10388184 564.01324463]
[164.86048889 573.61254883]
[172.35212708 586.81256104]
[174.56561279 601.82806396]
[171.20158386 616.62829590]
[162.71501160 629.21173096]
[150.25363159 637.87652588]
[135.50273132 641.45080566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 110]
[8 109]
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[16 100]
[17 99]
[19 97]
[20 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 89]
[28 88]
[29 87]
[30 86]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[59 66]
[60 65]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
