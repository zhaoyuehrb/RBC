%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCGGAGGCAGGGUCAAAUAGGGAGAAAUGGCGACGGAGCCUGGCUGUGGGCCCAUCUUUGGAAAAAAGAUCUGGGAAUGAUUGUCUAGCCUCCAGCCUCAACUUACUUG\
) } def
/len { sequence length } bind def

/coor [
[133.62449646 277.97143555]
[145.36259460 268.21542358]
[141.68031311 253.67440796]
[137.99803162 239.13340759]
[123.23171234 231.21577454]
[118.60515594 214.76290894]
[127.42034149 199.72994995]
[123.33878326 185.29592896]
[119.25723267 170.86192322]
[115.17568207 156.42790222]
[111.09413147 141.99388123]
[107.01258087 127.55985260]
[77.59738159 116.74447632]
[76.36041260 85.95014954]
[62.46300507 80.30551147]
[48.56559372 74.66087341]
[34.66818237 69.01622772]
[20.77077103 63.37158966]
[8.51543331 67.67364502]
[-2.99402642 62.58104324]
[-7.73797512 51.35948563]
[-21.47457504 45.33405304]
[-35.21117401 39.30862045]
[-48.94777298 33.28319168]
[-56.37432480 40.38033295]
[-65.59755707 44.83482361]
[-75.71439362 46.23091888]
[-85.74053192 44.45134354]
[-94.70619965 39.68688965]
[-101.74992371 32.41616058]
[-106.20133972 23.35753632]
[-107.64495850 13.39823055]
[-105.95886993 3.50738931]
[-118.73766327 -4.34770441]
[-131.51644897 -12.20279789]
[-146.82902527 -8.29121208]
[-160.37976074 -16.42467690]
[-164.12922668 -31.77775574]
[-155.85295105 -45.24173737]
[-140.46109009 -48.82867813]
[-127.08536530 -40.41051483]
[-123.66135406 -24.98158836]
[-110.88256836 -17.12649536]
[-98.10377502 -9.27140141]
[-80.20821381 -18.52062225]
[-60.18127441 -15.33245659]
[-45.85335159 -0.79172802]
[-42.92234421 19.54659081]
[-29.18574333 25.57202148]
[-15.44914341 31.59745407]
[-1.71254361 37.62288666]
[15.53130436 34.70085907]
[26.41541290 49.47417831]
[40.31282425 55.11882019]
[54.21023560 60.76345825]
[68.10764313 66.40809631]
[82.00505829 72.05274200]
[96.12386322 66.98722839]
[103.26306915 53.79512405]
[110.40228271 40.60301971]
[117.54149628 27.41091347]
[124.68070221 14.21880722]
[131.81991577 1.02670062]
[128.63876343 -14.69779778]
[139.05923462 -26.89588547]
[155.08763123 -26.21023369]
[164.42834473 -13.16681480]
[159.91596985 2.22857523]
[145.01202393 8.16591167]
[137.87280273 21.35801697]
[130.73359680 34.55012512]
[123.59439087 47.74222946]
[116.45517731 60.93433762]
[109.31596375 74.12644196]
[121.73162079 82.39342499]
[128.17294312 96.12608337]
[143.08190918 94.47595978]
[157.99085999 92.82583618]
[172.89982605 91.17571259]
[180.46688843 77.62879181]
[194.56556702 71.14749146]
[209.77459717 74.22399902]
[220.24581909 85.67533875]
[221.95281982 101.09823608]
[214.23922729 114.56227112]
[200.07109070 120.89025116]
[184.89631653 117.64893341]
[174.54994202 106.08467102]
[159.64099121 107.73479462]
[144.73202515 109.38491821]
[129.82305908 111.03504181]
[121.44660187 123.47830200]
[125.52815247 137.91232300]
[129.60969543 152.34634399]
[133.69125366 166.78036499]
[137.77281189 181.21438599]
[141.85435486 195.64840698]
[154.35919189 200.87123108]
[161.43148804 212.20140076]
[160.65391541 225.33923340]
[152.53903198 235.45112610]
[156.22131348 249.99212646]
[159.90359497 264.53314209]
[174.87028503 267.52658081]
[187.05082703 276.72424316]
[194.02676392 290.29992676]
[194.41300964 305.55816650]
[188.13288879 319.46942139]
[176.43330383 329.27157593]
[161.63723755 333.01846313]
[146.68244934 329.96609497]
[134.53822327 320.72052002]
[127.61579895 307.11746216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[21 51]
[22 50]
[23 49]
[24 48]
[33 44]
[34 43]
[35 42]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
