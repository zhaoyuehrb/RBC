%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGUGCGCGUGCGCGGGGCGGGCGGGUGCGCGCGCACUUCCUCCUCGCCCCCACCCAGACCCAGAAGGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[124.29466248 399.86297607]
[108.60560608 397.95797729]
[98.92470551 385.46575928]
[100.99546814 369.79772949]
[113.58934784 360.24942017]
[115.39739990 345.35879517]
[117.20545197 330.46817017]
[114.81910706 323.25067139]
[119.39786530 315.01882935]
[121.80403900 300.21310425]
[124.21020508 285.40734863]
[126.61637115 270.60159302]
[107.43197632 258.91763306]
[95.58272552 239.77139282]
[93.67521667 217.28192139]
[102.17104340 196.31350708]
[119.27629089 181.42366028]
[114.52627563 167.19561768]
[109.77625275 152.96757507]
[105.02623749 138.73951721]
[100.27621460 124.51147461]
[95.52619171 110.28343201]
[90.49063110 96.15391541]
[85.17155457 82.12867737]
[73.04344177 71.96897125]
[75.76479340 57.32508469]
[70.44571686 43.29983902]
[64.56622314 29.50014877]
[58.13582993 15.94839287]
[51.70544434 2.39663601]
[45.27505493 -11.15512085]
[31.47879791 -20.02052116]
[32.52849960 -36.38603973]
[47.34431839 -43.41623306]
[60.68500519 -33.87903976]
[58.82681274 -17.58550835]
[65.25720215 -4.03375244]
[71.68759155 9.51800442]
[78.11797333 23.06976128]
[82.49471283 25.55406761]
[85.20193481 30.95153618]
[84.47096252 37.98076630]
[89.79003906 52.00601196]
[101.53768921 61.16253281]
[99.19680023 76.80960083]
[104.51586914 90.83484650]
[110.24204254 96.84873962]
[109.75424194 105.53340912]
[114.50426483 119.76145935]
[119.25428009 133.98950195]
[124.00430298 148.21754456]
[128.75431824 162.44560242]
[133.50434875 176.67364502]
[142.97929382 176.03921509]
[152.39106750 177.25161743]
[161.38333130 180.26235962]
[169.61616516 184.95489502]
[176.77886963 191.14918518]
[182.60173035 198.60856628]
[186.86610413 207.04878235]
[189.41271973 216.14888000]
[190.14753723 225.56330872]
[189.04527283 234.93513489]
[186.15026855 243.90953064]
[181.57467651 252.14723206]
[175.49411011 259.33731079]
[168.14094543 265.20898438]
[159.79542542 269.54177856]
[150.77497864 272.17379761]
[141.42213440 273.00775146]
[139.01596069 287.81350708]
[136.60978699 302.61926270]
[134.20361328 317.42501831]
[132.09608459 332.27621460]
[130.28804016 347.16683960]
[128.47998047 362.05749512]
[138.42285156 374.34222412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[9 73]
[10 72]
[11 71]
[12 70]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 46]
[24 45]
[26 43]
[27 42]
[28 39]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
