%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGCGUGCCCGUGCGCUGGUGAGGUGGCGUCCGUUCUACCCGGUCGCUCCCGUUCCGCGCCAUGCAGAGCCCAGUCUCUGGCACCUGGCUGCUCUGAUCUGGUCUCAGCGCGGAGGGAGCAGAGGGAGUCC\
) } def
/len { sequence length } bind def

/coor [
[98.41483307 117.32432556]
[92.76930237 115.00976562]
[88.50336456 111.01898956]
[86.04927826 106.00554657]
[85.56484985 100.70533752]
[70.66779327 98.95101166]
[55.77073288 97.19667816]
[40.87367630 95.44235229]
[25.97661781 93.68801880]
[32.59994507 107.14653015]
[26.42525101 120.81668854]
[11.94864941 124.74453735]
[-0.28869611 116.07001495]
[-1.37614024 101.10948181]
[9.47765636 90.75664520]
[-5.11198711 87.27206421]
[-19.70163155 83.78748322]
[-34.29127502 80.30290222]
[-43.46142960 81.35430908]
[-49.18013000 76.56184387]
[-63.68407822 72.73620605]
[-75.70053101 82.37523651]
[-90.91085052 83.08208466]
[-103.47224426 74.79502106]
[-108.68284607 60.86707687]
[-123.18679810 57.04143524]
[-138.50393677 61.00322723]
[-148.83697510 50.27580261]
[-163.34091187 46.45016098]
[-177.84486389 42.62451935]
[-192.34881592 38.79887772]
[-207.66595459 42.76066971]
[-217.99899292 32.03324509]
[-232.50292969 28.20760536]
[-247.00688171 24.38196373]
[-259.67608643 33.54849625]
[-275.26959229 32.37530518]
[-286.42465210 21.41633606]
[-287.87414551 5.84607792]
[-278.93368530 -6.98366928]
[-263.82470703 -11.01509094]
[-249.68116760 -4.34467316]
[-243.18124390 9.87801743]
[-228.67729187 13.70365906]
[-214.17333984 17.52930069]
[-199.89363098 13.29387283]
[-188.52316284 24.29493332]
[-174.01922607 28.12057495]
[-159.51527405 31.94621658]
[-145.01133728 35.77185822]
[-130.73161316 31.53643036]
[-119.36115265 42.53749084]
[-104.85720825 46.36313248]
[-93.45497131 36.81708145]
[-78.44042206 35.80360794]
[-65.55749512 43.92048264]
[-59.85843658 58.23225784]
[-45.35448837 62.05789948]
[-30.80669403 65.71326447]
[-16.21705055 69.19784546]
[-1.62740684 72.68241882]
[12.96223640 76.16699982]
[27.73094749 78.79096222]
[42.62800598 80.54529572]
[57.52506256 82.29962158]
[72.42211914 84.05395508]
[87.31917572 85.80828094]
[100.09958649 77.95581818]
[105.26658630 63.87384033]
[110.43359375 49.79186249]
[115.60059357 35.70988464]
[108.73215485 21.47611809]
[114.01904297 6.58234787]
[128.32463074 -0.13521691]
[143.16166687 5.30883694]
[149.72761536 19.68464851]
[144.12699890 34.46330261]
[129.68257141 40.87688828]
[124.51556396 54.95886612]
[119.34856415 69.04084015]
[114.18156433 83.12281799]
[120.80274963 96.58238220]
[135.11143494 101.08365631]
[149.42012024 105.58492279]
[164.90612793 102.34543610]
[174.72499084 113.54540253]
[189.03367615 118.04666901]
[203.34236145 122.54794312]
[215.18003845 117.27438354]
[227.04496765 121.38594818]
[232.70588684 132.14230347]
[246.90512085 136.97776794]
[261.10433960 141.81323242]
[275.30358887 146.64869690]
[289.50280762 151.48416138]
[303.70205688 156.31962585]
[317.90130615 161.15509033]
[329.85934448 156.16049194]
[341.62463379 160.54907227]
[347.03182983 171.43518066]
[361.11380005 176.60218811]
[375.19577026 181.76919556]
[389.27774048 186.93618774]
[403.41934204 191.93777466]
[417.61856079 196.77323914]
[433.59191895 193.06057739]
[444.59472656 205.22077942]
[439.30822754 220.74446106]
[423.17071533 223.66220093]
[412.78311157 210.97247314]
[398.58386230 206.13700867]
[391.16879272 206.96638489]
[384.11074829 201.01817322]
[370.02877808 195.85116577]
[355.94680786 190.68415833]
[341.86480713 185.51716614]
[324.81030273 189.48068237]
[313.06582642 175.35433960]
[298.86660767 170.51887512]
[284.66735840 165.68339539]
[270.46810913 160.84793091]
[256.26889038 156.01246643]
[242.06965637 151.17700195]
[227.87042236 146.34153748]
[210.91349792 150.70378113]
[198.84109497 136.85662842]
[184.53240967 132.35536194]
[170.22372437 127.85409546]
[155.76116943 131.41554260]
[144.91885376 119.89361572]
[130.61016846 115.39234161]
[116.30147552 110.89107513]
[111.02661896 115.31168365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[15 62]
[16 61]
[17 60]
[18 59]
[20 58]
[21 57]
[25 53]
[26 52]
[28 50]
[29 49]
[30 48]
[31 47]
[33 45]
[34 44]
[35 43]
[68 81]
[69 80]
[70 79]
[71 78]
[82 132]
[83 131]
[84 130]
[86 128]
[87 127]
[88 126]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[100 116]
[101 115]
[102 114]
[103 113]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
