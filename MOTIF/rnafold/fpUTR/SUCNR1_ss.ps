%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGAAGCUAUAUCCAGCUGCUGGCAGAGUUCCUGUCAAGGGAUCAAGUCUUCCAACAGAAUGGUUAUGGUUUAACUCAGCAGAAUUUGUUGAACAACUACGAC\
) } def
/len { sequence length } bind def

/coor [
[210.85931396 267.49850464]
[209.49873352 260.08712769]
[209.47018433 252.54537964]
[210.77687073 245.11097717]
[213.37989807 238.01866150]
[217.19938660 231.49275208]
[206.75112915 220.73014832]
[196.30285645 209.96754456]
[185.85459900 199.20492554]
[175.40632629 188.44232178]
[164.95806885 177.67970276]
[154.50979614 166.91709900]
[144.06153870 156.15449524]
[129.64477539 152.41200256]
[125.58381653 137.12086487]
[115.13555145 126.35825348]
[104.68728638 115.59564209]
[88.48490906 111.51509094]
[84.40435791 95.31271362]
[73.64174652 84.86444855]
[62.87914276 74.41618347]
[47.58799362 70.35523224]
[43.84550858 55.93846893]
[33.08289719 45.49020004]
[22.32028961 35.04193497]
[7.02914143 30.98098183]
[3.28665590 16.56421852]
[-7.47595310 6.11595201]
[-18.23856163 -4.33231306]
[-29.60123062 -14.12464523]
[-41.52404785 -23.22664642]
[-53.44686508 -32.32864761]
[-65.36968231 -41.43065262]
[-77.29249573 -50.53265381]
[-89.21531677 -59.63465500]
[-105.53984833 -61.19723892]
[-112.10179901 -76.22630310]
[-102.15078735 -89.26123810]
[-85.92356873 -86.89282227]
[-80.11331177 -71.55747223]
[-68.19049835 -62.45547104]
[-56.26767731 -53.35346985]
[-44.34486008 -44.25146484]
[-32.42204666 -35.14946365]
[-20.49922752 -26.04746246]
[-17.56185341 -26.39818382]
[-14.30059433 -25.50957870]
[-11.22526169 -23.24879074]
[-8.88471699 -19.68462753]
[-7.79029655 -15.09492207]
[2.97231245 -4.64665651]
[13.73492146 5.80160856]
[28.25625610 9.11523438]
[32.76855469 24.27932739]
[43.53116226 34.72759247]
[54.29377365 45.17585754]
[68.81510925 48.48948288]
[73.32740784 63.65357590]
[84.09001160 74.10184479]
[94.85262299 84.55010986]
[106.58670807 85.10671234]
[114.89328766 93.41329193]
[115.44989014 105.14737701]
[125.89815521 115.90998840]
[136.34642029 126.67259216]
[151.51051331 131.18489075]
[154.82414246 145.70622253]
[165.27239990 156.46884155]
[175.72067261 167.23144531]
[186.16894531 177.99404907]
[196.61720276 188.75666809]
[207.06547546 199.51927185]
[217.51373291 210.28187561]
[227.96200562 221.04449463]
[251.74832153 213.92065430]
[275.36557007 221.26573181]
[290.79437256 240.47209167]
[292.85922241 264.92395020]
[306.75958252 270.56134033]
[320.65991211 276.19876099]
[334.56027222 281.83618164]
[348.46060181 287.47360229]
[362.36096191 293.11099243]
[377.63751221 288.21139526]
[390.91259766 297.21984863]
[392.00268555 313.22579956]
[380.07156372 323.95089722]
[364.27175903 321.16775513]
[356.72354126 307.01135254]
[342.82318115 301.37393188]
[328.92285156 295.73651123]
[315.02249146 290.09912109]
[301.12216187 284.46170044]
[287.22180176 278.82427979]
[282.71911621 284.75952148]
[277.23297119 289.80944824]
[270.93475342 293.81314087]
[264.02169800 296.64248657]
[256.71087646 298.20611572]
[249.23219299 298.45251465]
[241.82130432 297.37155151]
[234.71214294 294.99505615]
[228.12951660 291.39569092]
[222.28201294 286.68487549]
[217.35540771 281.00930786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[15 65]
[16 64]
[17 63]
[19 60]
[20 59]
[21 58]
[23 56]
[24 55]
[25 54]
[27 52]
[28 51]
[29 50]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
