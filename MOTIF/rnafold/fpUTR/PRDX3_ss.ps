%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGCCCGCUCACCACCCCGUAGGCCCCGCCCCUGCGUCUCUGCCCGCCCCGUGGCGCCCGAGUGCACUGAAG\
) } def
/len { sequence length } bind def

/coor [
[-9.42115974 179.05258179]
[-20.32685280 172.69145203]
[-29.11786842 163.65023804]
[-35.15637207 152.59631348]
[-49.83712387 155.67454529]
[-64.51787567 158.75276184]
[-79.19863129 161.83099365]
[-93.87938690 164.90922546]
[-105.79803467 175.31385803]
[-119.84223938 170.35307312]
[-134.52299500 173.43128967]
[-139.23307800 188.05014038]
[-150.63232422 198.34349060]
[-165.65437317 201.54246521]
[-180.25837708 196.78657532]
[-190.51594543 185.35513306]
[-193.66783142 170.32312012]
[-188.86618042 155.73410034]
[-177.40263367 145.51242065]
[-162.36082458 142.40766907]
[-147.78692627 147.25502014]
[-137.60122681 158.75054932]
[-122.92047119 155.67231750]
[-112.05188751 145.48785400]
[-96.95761108 150.22846985]
[-82.27686310 147.15023804]
[-67.59610748 144.07202148]
[-52.91535568 140.99378967]
[-38.23460388 137.91555786]
[-35.78447342 120.53224182]
[-27.05702400 105.26296234]
[-13.27162170 94.28933716]
[3.62777042 89.18941498]
[21.24670410 90.71081543]
[37.07950592 98.66121674]
[48.86562729 111.93226624]
[62.83949280 106.47964478]
[76.81336212 101.02703094]
[90.78722382 95.57440948]
[96.75431824 89.78474426]
[105.45292664 90.19835663]
[119.64018250 85.32786560]
[133.82743835 80.45737457]
[145.41427612 66.32042694]
[162.44366455 70.00765991]
[176.41752625 64.55504608]
[190.27571106 58.81479263]
[204.01231384 52.78936005]
[217.74891663 46.76392746]
[231.48551941 40.73849869]
[243.56178284 28.83891487]
[258.33938599 37.14910507]
[254.44479370 53.64966583]
[237.51095581 54.47509766]
[223.77435303 60.50053024]
[210.03775024 66.52596283]
[196.30114746 72.55139160]
[191.29856873 78.28692627]
[181.87014771 78.52890778]
[167.89628601 83.98152924]
[162.62829590 95.07069397]
[150.79598999 99.63347626]
[138.69793701 94.64463043]
[124.51067352 99.51512909]
[110.32341766 104.38562012]
[96.23984528 109.54827881]
[82.26597595 115.00089264]
[68.29211426 120.45351410]
[54.31824493 125.90613556]
[55.23848343 138.61633301]
[52.72074127 151.09355164]
[46.95708847 162.42599487]
[38.37648392 171.78770447]
[27.61287498 178.49876404]
[15.45835876 182.07463074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[10 23]
[11 22]
[36 69]
[37 68]
[38 67]
[39 66]
[41 65]
[42 64]
[43 63]
[45 60]
[46 59]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
