%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCGCAGCAGGCCCCGCCCACCCAGGCGGUAGGAACCCACUCCGGCCCGCUAGACCUGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[79.46916199 284.12283325]
[64.03211212 286.61914062]
[50.62862015 278.56430054]
[45.58740997 263.76156616]
[51.28878403 249.20037842]
[65.04073334 241.75605774]
[67.87950134 227.02713013]
[70.71826935 212.29820251]
[73.55703735 197.56927490]
[76.39580536 182.84033203]
[79.23457336 168.11140442]
[82.07334137 153.38247681]
[84.91210938 138.65354919]
[66.65730286 124.69829559]
[58.62733078 103.16909790]
[63.28464508 80.66806793]
[51.49384689 71.39568329]
[39.70305252 62.12329483]
[27.91225624 52.85091019]
[16.12145805 43.57852554]
[0.46066818 45.70342255]
[-12.06493759 36.06574631]
[-14.02413845 20.38336563]
[-4.25457478 7.96035624]
[11.44764328 6.16706848]
[23.76667023 16.06742859]
[25.39384460 31.78772926]
[37.18463898 41.06011581]
[48.97543716 50.33250046]
[60.76623154 59.60488510]
[72.55702972 68.87726593]
[86.31566620 60.82756042]
[102.09387207 58.55899811]
[117.56304932 62.40637970]
[126.26390076 50.18774033]
[134.96475220 37.96910095]
[132.09710693 22.42715645]
[141.12786865 9.45715809]
[156.69926453 6.75397921]
[169.57305908 15.92136574]
[172.11145020 31.52047157]
[162.80847168 44.29662323]
[147.18339539 46.66995621]
[138.48254395 58.88859558]
[129.78169250 71.10723114]
[134.83393860 77.45365143]
[138.55488586 84.66175842]
[140.80232239 92.45606995]
[141.49037170 100.53869629]
[140.59271240 108.60073853]
[138.14366150 116.33406830]
[134.23683167 123.44313812]
[129.02151489 129.65625000]
[122.69703674 134.73594666]
[115.50511169 138.48808289]
[107.72061157 140.76927185]
[99.64104462 141.49230957]
[96.80226898 156.22125244]
[93.96350098 170.95018005]
[91.12473297 185.67910767]
[88.28596497 200.40803528]
[85.44719696 215.13696289]
[82.60842896 229.86589050]
[79.76966095 244.59483337]
[89.76975250 256.61697388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[34 45]
[35 44]
[36 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
