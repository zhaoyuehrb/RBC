%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACGAAGCGGGCCCGCCAGCGAGUCGCAGUCCCAGGAGCCGAGCUCCAGCACUAGAGCCAGCUGCGAGCGGAGGGCACCAACUCCGCAGAACUGGCUUUUCA\
) } def
/len { sequence length } bind def

/coor [
[71.56929016 123.81617737]
[58.36035919 130.92420959]
[45.15142822 138.03224182]
[31.94249344 145.14027405]
[18.73356056 152.24830627]
[16.14786720 163.02601624]
[8.15570641 170.38171387]
[-2.36098957 171.99850464]
[-11.79211521 167.57118225]
[-25.40249634 173.87654114]
[-39.01287460 180.18190002]
[-45.61576843 186.73524475]
[-53.12604141 186.46548462]
[-66.91896057 192.36085510]
[-76.56764984 204.89933777]
[-91.31167603 202.78680420]
[-105.10459900 208.68217468]
[-114.50286865 222.12109375]
[-130.81480408 220.43205261]
[-137.26007080 205.35256958]
[-127.20834351 192.39515686]
[-110.99996948 194.88926697]
[-97.20705414 188.99389648]
[-88.54492950 176.87709045]
[-72.81433105 178.56794739]
[-59.02141571 172.67256165]
[-45.31823349 166.57151794]
[-31.70785522 160.26615906]
[-18.09747314 153.96080017]
[-8.35354233 137.37240601]
[11.62553120 139.03936768]
[24.83446312 131.93133545]
[38.04339600 124.82330322]
[51.25233078 117.71527863]
[64.46126556 110.60724640]
[64.10500336 90.66916656]
[74.12578583 73.42857361]
[66.05052948 60.78776169]
[57.97526932 48.14694595]
[49.90000916 35.50613403]
[41.82474899 22.86531830]
[28.20236588 12.77240086]
[34.12979889 -3.11161304]
[51.03393555 -1.81296003]
[54.46556473 14.79005909]
[62.54082108 27.43087387]
[70.61608124 40.07168961]
[78.69133759 52.71250153]
[86.76660156 65.35331726]
[95.57640839 63.17681122]
[104.65104675 63.20484543]
[113.44723511 65.43575287]
[121.43836212 69.73595428]
[128.14601135 75.84802246]
[133.16859436 83.40602875]
[136.20542908 91.95748901]
[151.20375061 91.73310089]
[166.20207214 91.50870514]
[181.20039368 91.28431702]
[196.19871521 91.05992126]
[211.19703674 90.83553314]
[226.19535828 90.61114502]
[241.19367981 90.38674927]
[246.47319031 78.40336609]
[255.89924622 69.38158417]
[268.01458740 64.66629791]
[280.96514893 64.94042969]
[292.78378296 70.12630463]
[301.68905640 79.40289307]
[306.35379028 91.33562469]
[321.33868408 92.00859833]
[336.32357788 92.68157196]
[351.30847168 93.35453796]
[366.29336548 94.02751160]
[381.27825928 94.70048523]
[390.84735107 82.48524475]
[405.77804565 78.25985718]
[420.32919312 83.64907837]
[428.90557861 96.58063507]
[428.20941162 112.08208466]
[418.50839233 124.19280243]
[403.53271484 128.25596619]
[389.04089355 122.70921326]
[380.60528564 109.68537903]
[365.62039185 109.01241302]
[350.63549805 108.33943939]
[335.65060425 107.66646576]
[320.66571045 106.99349213]
[305.68081665 106.32051849]
[297.06686401 121.06985474]
[282.14132690 129.55401611]
[264.88568115 129.40841675]
[249.95408630 120.58417511]
[241.41807556 105.38507080]
[226.41975403 105.60946655]
[211.42143250 105.83385468]
[196.42311096 106.05824280]
[181.42478943 106.28263855]
[166.42646790 106.50702667]
[151.42814636 106.73142242]
[136.42982483 106.95581055]
[129.75271606 122.14251709]
[117.12254333 132.89884949]
[101.06639862 137.07260132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[9 29]
[10 28]
[11 27]
[13 26]
[14 25]
[16 23]
[17 22]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
