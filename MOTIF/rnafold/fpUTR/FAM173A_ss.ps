%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACUUCCGGUGUCGCGCGGCGGCUCCCGGCAGGAGGCAGAGGGCACACCGCCAGCCCCAGGCCAGGCUGCGAGGGCCGCGGACCCGAGCCGGGAAGGACCUUGGGCGGACGAGCCGCGCGUCCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[169.94335938 107.50000000]
[154.94335938 107.50000000]
[139.94335938 107.50000000]
[124.94335175 107.50000000]
[120.22592163 116.41136169]
[112.47748566 122.86335754]
[102.85920715 125.88910675]
[92.81244659 125.03517151]
[83.84280396 120.42953491]
[71.54432678 129.01716614]
[59.24584961 137.60479736]
[46.94737244 146.19244385]
[39.58668137 163.02415466]
[22.10221481 163.95146179]
[10.00843334 172.82505798]
[-2.08534646 181.69863892]
[-14.17912674 190.57221985]
[-26.27290726 199.44580078]
[-35.46639252 213.69065857]
[-51.69957352 208.79983521]
[-51.49366760 191.84713745]
[-35.14649200 187.35202026]
[-23.05270958 178.47843933]
[-10.95893002 169.60485840]
[1.13485062 160.73127747]
[13.22863102 151.85768127]
[15.40083122 139.89830017]
[25.48511124 132.41575623]
[38.35973740 133.89396667]
[50.65821457 125.30632782]
[62.95669174 116.71868896]
[75.25516510 108.13105774]
[74.04182434 102.14334869]
[74.25662994 96.03771210]
[75.88776398 90.15007782]
[64.22320557 80.71938324]
[55.49488831 77.71709442]
[52.39913177 70.92831421]
[40.95885468 61.22676849]
[29.51857758 51.52521896]
[20.14456177 53.57485199]
[11.02745724 51.06240463]
[4.22884274 44.68964386]
[1.22352803 36.01560211]
[2.58069396 27.07664108]
[-8.14951038 16.59509850]
[-18.87971497 6.11355782]
[-34.87395859 4.86308718]
[-43.74887848 -8.50162029]
[-38.69638824 -23.72830391]
[-23.59233284 -29.13635635]
[-10.02324677 -20.57718277]
[-8.39817333 -4.61664677]
[2.33203101 5.86489487]
[13.06223583 16.34643555]
[33.40312958 19.52466583]
[39.22012711 40.08494186]
[50.66040421 49.78649139]
[62.10068130 59.48804092]
[73.65389252 69.05481720]
[85.31845856 78.48551178]
[108.68491364 75.44407654]
[124.94335175 92.50000000]
[139.94335938 92.50000000]
[154.94335938 92.50000000]
[169.94335938 92.50000000]
[183.74353027 84.76270294]
[196.47079468 92.50000000]
[211.47079468 92.50000000]
[226.47079468 92.50000000]
[241.47079468 92.50000000]
[256.47079468 92.50000000]
[271.47079468 92.50000000]
[286.47079468 92.50000000]
[295.14584351 89.34708405]
[301.82141113 92.67995453]
[316.81729126 93.03159332]
[331.81317139 93.38323212]
[346.80905151 93.73487091]
[361.80801392 93.91069794]
[376.80801392 93.91069794]
[391.80801392 93.91069794]
[406.80801392 93.91069794]
[421.80801392 93.91069794]
[435.10699463 78.96829224]
[454.80307007 78.47911835]
[468.40481567 92.31329346]
[483.36773682 91.25915527]
[498.33065796 90.20500946]
[507.41305542 80.96105194]
[519.95935059 80.43965149]
[529.16754150 88.37403107]
[544.15106201 87.67094421]
[559.13458252 86.96785736]
[574.11810303 86.26477814]
[589.10162354 85.56169128]
[599.55413818 73.70758820]
[615.33239746 72.79994202]
[627.07531738 83.37723541]
[627.81610107 99.16415405]
[617.11523438 110.79459381]
[601.32135010 111.36843109]
[589.80468750 100.54520416]
[574.82116699 101.24829102]
[559.83764648 101.95137024]
[544.85418701 102.65445709]
[529.87066650 103.35754395]
[515.69104004 113.62913513]
[499.38479614 105.16792297]
[484.42187500 106.22206879]
[469.45895386 107.27620697]
[464.98501587 116.69276428]
[456.91171265 123.41667175]
[446.68423462 126.15564728]
[436.17089844 124.33876038]
[427.32202148 118.23390198]
[421.80801392 108.91069794]
[406.80801392 108.91069794]
[391.80801392 108.91069794]
[376.80801392 108.91069794]
[361.80801392 108.91069794]
[355.05615234 112.08615875]
[346.45739746 108.73074341]
[331.46151733 108.37911224]
[316.46563721 108.02747345]
[301.46975708 107.67583466]
[286.47079468 107.50000000]
[271.47079468 107.50000000]
[256.47079468 107.50000000]
[241.47079468 107.50000000]
[226.47079468 107.50000000]
[211.47079468 107.50000000]
[196.47079468 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[9 32]
[10 31]
[11 30]
[12 29]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[35 61]
[36 60]
[38 59]
[39 58]
[40 57]
[45 55]
[46 54]
[47 53]
[68 133]
[69 132]
[70 131]
[71 130]
[72 129]
[73 128]
[74 127]
[76 126]
[77 125]
[78 124]
[79 123]
[80 121]
[81 120]
[82 119]
[83 118]
[84 117]
[87 111]
[88 110]
[89 109]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
