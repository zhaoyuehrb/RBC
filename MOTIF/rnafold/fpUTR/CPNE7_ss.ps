%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCGGCAGGCGUUCAGGGAAGCGCGGCCACGCCUGGGCCGGCCACCAUUUCCCGGGCGCCGCGGCGGCGCCGACUCGCGGGCAGCGGCCCCUCAGUGCGCCCAGCCGGGCCCCCGAACGCCGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[195.65156555 375.26333618]
[197.86413574 367.88449097]
[202.58723450 361.71212769]
[197.30699158 347.67221069]
[192.02674866 333.63229370]
[186.74650574 319.59240723]
[181.46626282 305.55249023]
[176.18601990 291.51257324]
[170.90577698 277.47265625]
[156.76925659 267.14614868]
[159.79371643 249.02879333]
[154.17832947 235.11955261]
[148.56294250 221.21029663]
[142.94754028 207.30104065]
[137.33215332 193.39178467]
[120.12889862 187.34922791]
[112.58455658 170.40240479]
[119.85044098 152.99070740]
[113.57463074 139.36666870]
[107.29882050 125.74264526]
[101.02300262 112.11861420]
[94.87981415 113.01270294]
[88.29423523 110.62079620]
[83.04763794 104.83354950]
[80.86882019 96.49240112]
[68.58727264 87.88056946]
[56.30572510 79.26873779]
[44.02417755 70.65690613]
[31.74263191 62.04507828]
[19.46108437 53.43324661]
[14.06059170 52.96983337]
[9.84611988 50.65834808]
[7.33322859 47.28707123]
[6.63665104 43.73447418]
[-4.99408150 34.26208878]
[-16.62481308 24.78970528]
[-28.25554657 15.31732178]
[-39.88628006 5.84493828]
[-51.51701355 -3.62744594]
[-63.14774323 -13.09982967]
[-81.82067871 -10.40128708]
[-96.35335541 -21.93008423]
[-97.91908264 -40.09633636]
[-109.99059296 -49.00019455]
[-126.32645416 -53.53625488]
[-126.48988342 -70.48941803]
[-110.24449921 -75.33955383]
[-101.08673859 -61.07170486]
[-89.01522827 -52.16784668]
[-78.25787354 -56.30289459]
[-66.72774506 -54.66965103]
[-57.34988022 -47.56414795]
[-52.56064987 -36.68545532]
[-53.67536163 -24.73056221]
[-42.04462814 -15.25817871]
[-30.41389465 -5.78579473]
[-18.78316307 3.68658948]
[-7.15243006 13.15897369]
[4.47830248 22.63135719]
[16.10903549 32.10374069]
[28.07291412 41.15170288]
[40.35446167 49.76353073]
[52.63600922 58.37536240]
[64.91755676 66.98719025]
[77.19910431 75.59902191]
[89.48064423 84.21085358]
[104.29877472 81.88210297]
[113.34673309 69.91822052]
[115.49975586 54.24419403]
[129.34802246 48.76014328]
[138.39598083 36.79626465]
[147.29983521 24.72475624]
[156.05830383 12.54735279]
[164.81678772 0.36994967]
[159.82333374 -14.32171535]
[164.45121765 -29.13259506]
[176.92095947 -38.36760712]
[192.43765259 -38.47569656]
[205.03483582 -29.41530418]
[209.86862183 -14.67033577]
[205.08032227 0.08946995]
[192.51113892 9.18866444]
[176.99418640 9.12842274]
[168.23571777 21.30582619]
[159.47723389 33.48323059]
[158.11207581 40.82312012]
[150.35986328 45.84422684]
[141.31190491 57.80810547]
[139.80604553 72.62639618]
[125.31061554 78.96617889]
[116.26265717 90.93006134]
[114.64703369 105.84279633]
[120.92285156 119.46682739]
[127.19866180 133.09086609]
[133.47447205 146.71488953]
[145.33009338 148.61395264]
[154.67245483 155.96261597]
[159.21733093 166.81510925]
[157.92628479 178.38854980]
[151.24140930 187.77638245]
[156.85679626 201.68563843]
[162.47218323 215.59489441]
[168.08758545 229.50415039]
[173.70297241 243.41340637]
[185.29963684 249.20631409]
[189.66154480 260.98550415]
[184.94567871 272.19241333]
[190.22592163 286.23233032]
[195.50616455 300.27224731]
[200.78642273 314.31216431]
[206.06666565 328.35205078]
[211.34690857 342.39196777]
[216.62715149 356.43188477]
[235.87467957 369.32852173]
[232.16395569 391.46368408]
[239.08573914 404.77114868]
[246.00753784 418.07861328]
[252.92933655 431.38607788]
[267.73385620 437.56716919]
[271.99301147 453.03451538]
[262.43957520 465.92291260]
[246.40206909 466.34548950]
[236.18315125 453.97805786]
[239.62187195 438.30789185]
[232.70007324 425.00042725]
[225.77827454 411.69293213]
[218.85647583 398.38546753]
[211.50679016 397.99658203]
[204.70787048 395.00332642]
[199.35987854 389.74887085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[11 104]
[12 103]
[13 102]
[14 101]
[15 100]
[18 95]
[19 94]
[20 93]
[21 92]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[43 49]
[44 48]
[67 91]
[68 90]
[70 88]
[71 87]
[72 85]
[73 84]
[74 83]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
