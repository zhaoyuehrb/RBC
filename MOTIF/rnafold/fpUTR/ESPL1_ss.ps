%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUACAUUUUGGAUCCUCGCGGAGUACUGGUCAGGCGGUUAAGUCCUGUACCUAGGAAAGAGGGCGAGCUCUGGGGCGCUCUCCGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[97.50069427 117.48535156]
[89.27391815 130.02807617]
[81.04714203 142.57081604]
[72.82036591 155.11354065]
[78.44090271 169.57691956]
[74.45410919 184.57308960]
[62.39299393 194.33572388]
[46.89529419 195.11088562]
[33.92019272 186.60052490]
[28.45688248 172.07702637]
[32.60611725 157.12498474]
[44.77243423 147.49375916]
[60.27762985 146.88676453]
[68.50440979 134.34403992]
[76.73118591 121.80130005]
[84.95796204 109.25856781]
[87.75862122 94.52234650]
[84.70677948 79.83608246]
[81.65493774 65.14982605]
[78.60310364 50.46356201]
[75.55126190 35.77730179]
[59.10486984 32.96407318]
[44.98347855 24.14488029]
[35.28094864 10.65973854]
[31.42363358 -5.46193361]
[33.96077347 -21.80670929]
[42.48644257 -35.93844604]
[55.70422363 -45.76138306]
[51.65727234 -60.20514297]
[47.36431122 -74.57770538]
[42.82659531 -88.87487030]
[38.28887558 -103.17204285]
[33.50772476 -117.38965607]
[28.48452950 -131.52357483]
[23.46133423 -145.65748596]
[18.43814087 -159.79139709]
[3.39297462 -163.20410156]
[-7.40246773 -174.22508240]
[-10.50339985 -189.33758545]
[-4.92032576 -203.71926880]
[7.56521606 -212.78099060]
[22.96913528 -213.63117981]
[36.37609482 -205.99856567]
[43.50798798 -192.31866455]
[42.08904648 -176.95669556]
[32.57205582 -164.81459045]
[37.59524918 -150.68067932]
[42.61844254 -136.54676819]
[47.64163589 -122.41285706]
[52.95936966 -117.05280304]
[52.58604813 -107.70976257]
[57.12376785 -93.41259003]
[61.66148376 -79.11541748]
[66.79312134 -73.57693481]
[66.10103607 -64.25209045]
[70.14798737 -49.80833435]
[83.60213470 -49.03558350]
[96.16346741 -44.09133530]
[106.57018280 -35.45679092]
[113.77209473 -23.98459816]
[117.03659821 -10.81469250]
[116.02317047 2.73898005]
[110.81883240 15.31955051]
[101.93090057 25.66306114]
[90.23752594 32.72546005]
[93.28936005 47.41172028]
[96.34120178 62.09798431]
[99.39304352 76.78424072]
[102.44488525 91.47050476]
[112.17994690 86.34904480]
[125.60440826 89.38748169]
[137.07933044 102.09465027]
[148.38502502 111.95270538]
[159.69071960 121.81076050]
[170.99641418 131.66882324]
[182.30210876 141.52687073]
[193.60780334 151.38493347]
[209.79617310 154.00575256]
[215.36692810 169.42973328]
[204.58934021 181.78997803]
[188.55049133 178.37133789]
[183.74975586 162.69062805]
[172.44406128 152.83256531]
[161.13836670 142.97451782]
[149.83267212 133.11645508]
[138.52697754 123.25840759]
[127.22127533 113.40035248]
[119.79113007 114.42160034]
[126.32557678 127.92348480]
[115.50363922 138.31028748]
[102.28112793 131.22755432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[28 56]
[29 55]
[30 53]
[31 52]
[32 51]
[33 49]
[34 48]
[35 47]
[36 46]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
