%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACAAGCGGGCAUUGGCCACAGCAGCGCGAGGCGGGCACGGGGUAUUGUCCGGCUCCGGCGGCGGCGGUCGGUGCUGCGAGAGCGGCGGCGGCGGCGCGGGUCGGCAGCGGGAGGGCGCGCGGCCGAGCGGAGGCGGAGUCGGCGCCGAGAAC\
) } def
/len { sequence length } bind def

/coor [
[94.38637543 146.23236084]
[84.74880981 144.00392151]
[75.79927826 139.79031372]
[67.94152832 133.78161621]
[61.53004837 126.24893188]
[56.85407639 117.53205109]
[54.12456894 108.02424622]
[53.46466446 98.15444183]
[38.76780319 95.15405273]
[24.07094383 92.15367126]
[9.37408543 89.15328217]
[0.28091565 90.50558472]
[-5.58716202 85.94166565]
[-20.22062302 82.64594269]
[-34.85408401 79.35021210]
[-49.48754501 76.05448151]
[-64.12100220 72.75875092]
[-78.75446320 69.46302795]
[-93.38792419 66.16729736]
[-108.02138519 62.87156677]
[-119.67941284 72.94116211]
[-134.85397339 74.20060730]
[-147.70838928 66.37577820]
[-153.42198181 52.64650726]
[-168.05543518 49.35078049]
[-183.21839905 53.86690521]
[-193.93466187 43.52229691]
[-208.56811523 40.22656631]
[-221.82289124 48.40878296]
[-236.61636353 44.85798645]
[-244.33517456 32.17116165]
[-258.96862793 28.87543297]
[-273.60208130 25.57970428]
[-288.76504517 30.09582901]
[-299.48132324 19.75122070]
[-314.11477661 16.45549202]
[-328.74822998 13.15976334]
[-343.38168335 9.86403561]
[-358.01516724 6.56830692]
[-372.64862061 3.27257848]
[-384.21533203 13.61621094]
[-399.65618896 15.15214252]
[-413.03390503 7.28977680]
[-419.20443726 -6.94764614]
[-415.79510498 -22.08554649]
[-404.11685181 -32.30309296]
[-388.66021729 -33.67143250]
[-375.36859131 -25.66440582]
[-369.35287476 -11.36088276]
[-354.71942139 -8.06515408]
[-340.08596802 -4.76942539]
[-325.45251465 -1.47369695]
[-310.81903076 1.82203150]
[-296.18557739 5.11775970]
[-282.06930542 0.36590338]
[-270.30636597 10.94624329]
[-255.67289734 14.24197197]
[-241.03944397 17.53770065]
[-228.62713623 9.38477707]
[-213.73977661 12.51865482]
[-205.27239990 25.59310722]
[-190.63893127 28.88883591]
[-176.52265930 24.13697815]
[-164.75970459 34.71731949]
[-150.12625122 38.01304626]
[-139.07865906 28.05870819]
[-124.11089325 26.49995613]
[-110.94134521 34.14302444]
[-104.72566223 48.23810959]
[-90.09220123 51.53383636]
[-75.45874023 54.82956314]
[-60.82527542 58.12529373]
[-46.19181442 61.42102051]
[-31.55835533 64.71675110]
[-16.92489433 68.01248169]
[-2.29143333 71.30820465]
[12.37447071 74.45642090]
[27.07133102 77.45681000]
[41.76818848 80.45719147]
[56.46504974 83.45758057]
[67.75279236 66.39849091]
[85.26156616 55.82170105]
[105.61362457 53.76764297]
[124.88272095 60.63257980]
[139.35153198 75.09215546]
[146.22875977 94.35686493]
[161.21659851 94.96085358]
[176.20443726 95.56484985]
[191.19227600 96.16883850]
[206.18009949 96.77282715]
[220.28063965 89.59747314]
[232.68603516 97.84098053]
[247.67387390 98.44496918]
[262.66171265 99.04895782]
[277.64953613 99.65294647]
[289.21231079 89.21551514]
[304.40350342 90.04154968]
[314.28274536 101.12921143]
[329.27056885 101.73320007]
[344.25842285 102.33718872]
[355.40164185 86.85101318]
[373.46435547 81.18814850]
[391.17327881 87.44154358]
[401.50946045 102.94310760]
[416.50640869 102.64105225]
[431.50335693 102.33899689]
[446.50033569 102.03694153]
[461.49728394 101.73488617]
[475.13885498 93.72126007]
[488.01934814 101.20070648]
[503.01629639 100.89864349]
[518.01324463 100.59658813]
[526.76849365 87.78543091]
[541.39306641 82.59888458]
[556.26367188 87.03129578]
[565.66210938 99.37829590]
[565.97460938 114.89222717]
[557.08093262 127.60765839]
[542.40087891 132.63525391]
[527.57928467 128.04177856]
[518.31530762 115.59355164]
[503.31835938 115.89560699]
[488.32141113 116.19766235]
[475.75253296 124.18968201]
[461.79934692 116.73184204]
[446.80236816 117.03390503]
[431.80541992 117.33596039]
[416.80847168 117.63801575]
[401.81149292 117.94007111]
[397.23504639 128.21926880]
[389.09732056 136.06433105]
[378.56188965 140.29985046]
[367.15545654 140.27037048]
[356.54666138 135.94151306]
[348.30197144 127.91072083]
[343.65441895 117.32502747]
[328.66659546 116.72103882]
[313.67874146 116.11705017]
[302.93936157 126.37380981]
[287.73095703 125.97478485]
[277.04556274 114.64077759]
[262.05770874 114.03678894]
[247.06988525 113.43280029]
[232.08204651 112.82881165]
[219.05354309 120.04736328]
[205.57611084 111.76065826]
[190.58828735 111.15666962]
[175.60044861 110.55268097]
[160.61260986 109.94869232]
[145.62477112 109.34470367]
[142.62203979 118.76978302]
[137.69648743 127.34809875]
[131.07031250 134.69264221]
[123.04244232 140.47207642]
[113.97504425 144.42568970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 80]
[9 79]
[10 78]
[11 77]
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[24 65]
[25 64]
[27 62]
[28 61]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[86 150]
[87 149]
[88 148]
[89 147]
[90 146]
[92 144]
[93 143]
[94 142]
[95 141]
[98 138]
[99 137]
[100 136]
[104 129]
[105 128]
[106 127]
[107 126]
[108 125]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
