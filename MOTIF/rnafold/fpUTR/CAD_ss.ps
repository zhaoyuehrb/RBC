%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCCCGAGGCUCCUACGCUGCCGCGCCCGGCUUCUCUCCAGCGCCCCGCGCCGUUAGCCACGUGGACCGACUCCGGCGCGCCGUCCUCACGUGGUUCCAGUGGAGUUUGCAGUCCUUCCCGCUUCUCCGUACUCGCCCCCGCCUCUGAGCUCCCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[201.46549988 114.37210846]
[186.49961853 113.36101532]
[171.53373718 112.34991455]
[156.56785583 111.33882141]
[141.60195923 110.32772827]
[126.63607788 109.31662750]
[111.67019653 108.30553436]
[99.03447723 114.29136658]
[87.31871033 106.66034698]
[72.35282135 105.64925385]
[57.38694000 104.63816071]
[43.65291977 117.63331604]
[25.09605026 116.53217316]
[13.40255356 102.49269104]
[-1.59117842 102.05909729]
[-16.58490944 101.62550354]
[-25.30157661 104.51620483]
[-31.86265182 101.03630066]
[-46.84524155 100.31381989]
[-61.84245682 100.02473450]
[-76.84175873 100.16928101]
[-91.84106445 100.31383514]
[-106.83827972 100.60292053]
[-121.83200836 101.03651428]
[-135.40275574 109.16949463]
[-148.34837341 101.80332184]
[-163.34210205 102.23692322]
[-178.33583069 102.67051697]
[-193.32955933 103.10411072]
[-204.14311218 114.31592560]
[-219.35507202 114.54206085]
[-229.97718811 104.16390228]
[-244.97091675 104.59749603]
[-259.96466064 105.03108978]
[-266.62539673 118.81126404]
[-278.93402100 127.90827942]
[-294.06216431 130.23170471]
[-308.53344727 125.24765015]
[-319.02246094 114.10139465]
[-323.11892700 99.35427856]
[-319.88153076 84.39507294]
[-310.05413818 72.66130066]
[-295.89508057 66.84929657]
[-280.65795898 68.29461670]
[-267.84417725 76.66513062]
[-260.39825439 90.03736115]
[-245.40451050 89.60376740]
[-230.41078186 89.17016602]
[-220.40615845 78.19551086]
[-205.20655823 77.54219818]
[-193.76315308 88.11037445]
[-178.76942444 87.67678070]
[-163.77569580 87.24318695]
[-148.78196716 86.80959320]
[-136.28366089 78.70762634]
[-122.26560211 86.04278564]
[-107.27187347 85.60918427]
[-100.64495087 82.25637054]
[-91.98561096 85.31452942]
[-76.98631287 85.16998291]
[-61.98700714 85.02542877]
[-59.24864960 82.73303223]
[-55.24739075 81.67872620]
[-50.58939362 82.44886017]
[-46.12276459 85.33123016]
[-31.14017296 86.05371094]
[-16.15131569 86.63177490]
[-1.15758348 87.06536865]
[13.83614826 87.49896240]
[20.27651405 78.01396942]
[30.61244774 72.78120422]
[42.30966568 73.21412659]
[52.43635941 79.32069397]
[58.39803696 89.67227173]
[73.36392212 90.68337250]
[88.32980347 91.69446564]
[100.96552277 85.70863342]
[112.68128967 93.33965302]
[127.64717865 94.35074615]
[142.61305237 95.36183929]
[157.57894897 96.37294006]
[172.54483032 97.38403320]
[187.51071167 98.39512634]
[202.47659302 99.40622711]
[212.96804810 81.23162079]
[231.10359192 70.81861115]
[251.94277954 70.91938019]
[269.85089111 81.43338776]
[280.02258301 99.45437622]
[294.98846436 98.44328308]
[309.95434570 97.43218994]
[324.92025757 96.42109680]
[341.08090210 84.42407227]
[358.08578491 93.56977844]
[373.00158691 91.98268127]
[387.91738892 90.39559174]
[402.83319092 88.80849457]
[409.36682129 73.64429474]
[422.57223511 63.88870621]
[438.80053711 62.12006378]
[453.62619019 68.72573090]
[463.05389404 81.82225800]
[477.93634033 79.94799805]
[492.81875610 78.07373810]
[507.66232300 75.91300201]
[522.46148682 73.46659851]
[537.26062012 71.02019501]
[552.05981445 68.57379150]
[558.60913086 56.77151489]
[570.59204102 50.99449158]
[583.52038574 53.15699005]
[592.69396973 62.24494934]
[607.53753662 60.08421707]
[613.14624023 45.78603745]
[625.16265869 36.22035599]
[640.35430908 33.96029282]
[654.63488770 39.61379623]
[664.16284180 51.66009903]
[666.37524414 66.85881042]
[660.67700195 81.12154388]
[648.60089111 90.61170197]
[633.39532471 92.77648926]
[619.15057373 87.03356934]
[609.69830322 74.92777252]
[594.85473633 77.08850861]
[585.40899658 90.97698975]
[568.51239014 93.81542206]
[554.50622559 83.37294769]
[539.70703125 85.81935120]
[524.90789795 88.26575470]
[510.10873413 90.71215820]
[506.62551880 94.04306793]
[500.99783325 95.19051361]
[494.69302368 92.95617676]
[479.81057739 94.83044434]
[464.92813110 96.70470428]
[460.45950317 109.63709259]
[450.80111694 119.42223358]
[437.80343628 124.10404968]
[423.99194336 122.71205139]
[412.07666016 115.46189880]
[404.42028809 103.72429657]
[389.50448608 105.31139374]
[374.58868408 106.89848328]
[359.67288208 108.48558044]
[353.95428467 117.02428436]
[344.26693726 121.06665039]
[333.74273682 119.04246521]
[325.93133545 111.38697815]
[310.96545410 112.39807129]
[295.99957275 113.40917206]
[281.03369141 114.42026520]
[278.78109741 123.73584747]
[274.35800171 132.25411987]
[268.01550293 139.47686768]
[260.11715698 144.97984314]
[251.11814880 148.43765259]
[241.53913879 149.64303589]
[231.93601990 148.51922607]
[222.86772156 145.12483215]
[214.86369324 139.65084839]
[208.39295959 132.40985107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[9 76]
[10 75]
[11 74]
[14 69]
[15 68]
[16 67]
[18 66]
[19 65]
[20 61]
[21 60]
[22 59]
[23 57]
[24 56]
[26 54]
[27 53]
[28 52]
[29 51]
[32 48]
[33 47]
[34 46]
[89 152]
[90 151]
[91 150]
[92 149]
[94 145]
[95 144]
[96 143]
[97 142]
[102 136]
[103 135]
[104 134]
[105 131]
[106 130]
[107 129]
[108 128]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
