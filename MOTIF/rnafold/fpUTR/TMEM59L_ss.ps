%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCCCCGGUCCCCGCCGCAGCCGCUGCAUCCUCCGUGCCCGGCCUGAGCUGGAGUCCCCCGCGCCCCCCGCGUUCCGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[102.98922729 134.43972778]
[90.58748627 133.26312256]
[79.40806580 127.76693726]
[68.07181549 137.58984375]
[56.73557663 147.41276550]
[56.55959320 158.57421875]
[50.28823090 167.53871155]
[40.27882767 171.37097168]
[30.05751991 168.98759460]
[18.04940033 177.97676086]
[6.04128218 186.96592712]
[-3.01516032 201.29830933]
[-19.29450035 196.56338501]
[-19.25119781 179.60949707]
[-2.94788289 174.95779419]
[9.06023598 165.96864319]
[21.06835365 156.97947693]
[27.08721924 138.74801636]
[46.91266632 136.07652283]
[58.24890900 126.25360107]
[69.58515167 116.43069458]
[65.56837463 96.91880035]
[72.98573303 78.43011475]
[63.57369232 66.75049591]
[54.16165924 55.07086945]
[44.74962234 43.39124680]
[31.89140320 41.18365860]
[24.30453491 31.07075119]
[25.69148064 18.91103172]
[16.70231628 6.90291262]
[7.71315098 -5.10520601]
[-1.27601385 -17.11332512]
[-16.88723373 -20.81053543]
[-23.59947395 -35.38192368]
[-16.26367950 -49.64957047]
[-0.50724316 -52.66855240]
[11.58284569 -42.12297058]
[10.73210526 -26.10248947]
[19.72126961 -14.09437084]
[28.71043396 -2.08625245]
[37.69960022 9.92186642]
[54.12475204 15.81694603]
[56.42924881 33.97921371]
[65.84128571 45.65883636]
[75.25331879 57.33845901]
[84.66535187 69.01808167]
[97.87317657 65.49626923]
[111.41354370 67.36931610]
[123.16934204 74.34434509]
[131.30247498 85.33078766]
[134.54129028 98.61084747]
[149.30296326 101.27413940]
[164.06463623 103.93743896]
[178.82629395 106.60073853]
[193.58796692 109.26403809]
[202.82315063 107.69232178]
[208.82492065 112.29485321]
[223.48213196 115.48333740]
[233.84643555 104.23485565]
[248.35371399 99.71424103]
[263.07803345 103.03996277]
[274.08706665 113.22117615]
[278.49218750 127.45004272]
[293.14938354 130.63851929]
[307.80657959 133.82699585]
[322.46380615 137.01547241]
[336.68313599 129.58647156]
[351.29812622 136.20320129]
[355.09741211 151.78990173]
[345.16650391 164.38977051]
[329.12353516 164.33726501]
[319.27529907 151.67268372]
[304.61810303 148.48420715]
[289.96090698 145.29573059]
[275.30371094 142.10723877]
[265.38580322 153.22033691]
[251.14219666 157.90815735]
[236.36691284 154.81663513]
[225.04856873 144.67800903]
[220.29365540 130.14053345]
[205.63644409 126.95205688]
[190.92466736 124.02570343]
[176.16299438 121.36240387]
[161.40133667 118.69911194]
[146.63966370 116.03581238]
[131.87799072 113.37251282]
[125.06806946 123.80383301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[9 17]
[10 16]
[11 15]
[23 46]
[24 45]
[25 44]
[26 43]
[29 41]
[30 40]
[31 39]
[32 38]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[57 81]
[58 80]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
