%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGUGAGGGCCUGCGCUGGAGCCGGCUUGACAGGGUCUGAGGGGGAGUGGAGAACUGGGCGAGGAGGUUCCCGUGGGUGAGCGCGUACGGGAUGGCUGGCUCGCAGGACGGCCGAAGGUGGUGGUUGGUGGGAGCAGCCAGCGACGAGCCCGUAGACACUCGUACGCGUGCGGGCUGACGUGCGCGCUAC\
) } def
/len { sequence length } bind def

/coor [
[100.29839325 373.20382690]
[111.09921265 361.66616821]
[110.36700439 346.68405151]
[109.63480377 331.70190430]
[108.90259552 316.71978760]
[108.17039490 301.73767090]
[107.43818665 286.75555420]
[93.16384125 275.31188965]
[91.74761963 256.75161743]
[104.55173492 242.80451965]
[103.33226013 227.85417175]
[102.11277771 212.90382385]
[100.89330292 197.95347595]
[99.67382050 183.00312805]
[98.45434570 168.05278015]
[97.23486328 153.10243225]
[96.01538849 138.15208435]
[94.79590607 123.20174408]
[90.07136536 121.64841461]
[85.76592255 119.14297485]
[82.06930542 115.79198456]
[79.14522552 111.73933411]
[77.12409973 107.16007996]
[62.14843750 108.01419830]
[47.17277527 108.86831665]
[36.67806244 120.37911987]
[21.47844124 121.03198242]
[10.56932068 110.95594025]
[-4.40634298 111.81005859]
[-19.38200569 112.66416931]
[-34.35766983 113.51828766]
[-49.50667191 123.97444916]
[-64.86225891 115.49232483]
[-79.82203674 116.59008789]
[-94.78181458 117.68785095]
[-105.96077728 131.13391113]
[-123.06833649 132.31913757]
[-135.49537659 120.99758911]
[-150.43530273 122.33870697]
[-165.37522888 123.67981720]
[-180.31515503 125.02093506]
[-188.16107178 138.40829468]
[-202.39088440 144.59632874]
[-217.53297424 141.20561218]
[-227.76487732 129.53994751]
[-229.15222168 114.08500671]
[-221.16154480 100.78355408]
[-206.86543274 94.75025177]
[-191.76103210 98.30503082]
[-181.65628052 110.08100891]
[-166.71635437 108.73989105]
[-151.77642822 107.39877319]
[-136.83650208 106.05766296]
[-130.03483582 95.10348511]
[-117.98416901 89.99502563]
[-105.00157166 92.80594635]
[-95.87957764 102.72807312]
[-80.91979980 101.63031006]
[-65.96002197 100.53255463]
[-57.81232071 91.57868958]
[-45.34764099 90.54992676]
[-35.21178436 98.54262543]
[-20.23612213 97.68850708]
[-5.26045895 96.83439636]
[9.71520424 95.98027802]
[19.40796471 84.72923279]
[34.58325195 83.64970398]
[46.31866074 93.89264679]
[61.29432297 93.03853607]
[76.26998901 92.18441772]
[83.84036255 79.23492432]
[77.23798370 65.76612091]
[70.63560486 52.29731750]
[64.03323364 38.82851410]
[57.43085480 25.35971451]
[50.82847595 11.89091206]
[44.22610092 -1.57789004]
[31.20436096 -10.56370449]
[32.54982376 -25.39741707]
[25.94744682 -38.86621857]
[12.03945446 -47.55527878]
[12.88074398 -63.93283463]
[27.60586929 -71.15105438]
[41.06688309 -61.78445816]
[39.41624832 -45.46859360]
[46.01862335 -31.99979210]
[58.56811905 -23.97735596]
[57.69490433 -8.18026638]
[64.29727936 5.28853559]
[70.89965820 18.75733757]
[77.50202942 32.22613907]
[84.10440826 45.69494247]
[90.70678711 59.16374207]
[97.30915833 72.63254547]
[112.18215942 74.58035278]
[122.03020477 63.26593781]
[131.87826538 51.95152664]
[141.72630310 40.63711548]
[151.57435608 29.32270432]
[161.42240906 18.00829124]
[164.70314026 9.46671200]
[171.52401733 6.59154558]
[181.55491638 -4.56107092]
[191.58583069 -15.71368790]
[195.06164551 -31.14836693]
[209.32545471 -35.43704987]
[219.35636902 -46.58966446]
[222.74835205 -64.68159485]
[239.62379456 -69.47323608]
[249.47184753 -80.78765106]
[259.31991577 -92.10206604]
[262.54400635 -107.59127045]
[276.73614502 -112.11155701]
[286.58419800 -123.42597198]
[296.43225098 -134.74038696]
[306.28030396 -146.05479431]
[308.88681030 -162.24546814]
[324.30581665 -167.82986450]
[336.67559814 -157.06323242]
[333.27117920 -141.02134705]
[317.59469604 -136.20674133]
[307.74664307 -124.89233398]
[297.89859009 -113.57791901]
[288.05056763 -102.26351166]
[285.53082275 -87.58358002]
[270.63430786 -82.25401306]
[260.78625488 -70.93959808]
[250.93821716 -59.62519073]
[251.45904541 -47.53034210]
[243.33386230 -38.02202225]
[230.50898743 -36.55875778]
[220.47807312 -25.40613937]
[217.71974182 -10.76916981]
[202.73844910 -5.68277836]
[192.70753479 5.46983814]
[182.67662048 16.62245560]
[172.73681641 27.85634041]
[162.88876343 39.17075348]
[153.04072571 50.48516464]
[143.19267273 61.79957581]
[133.34461975 73.11399078]
[123.49657440 84.42839813]
[127.12276459 98.98348999]
[141.12792969 104.35520935]
[155.13310242 109.72693634]
[169.18151855 114.98448944]
[183.27226257 120.12754059]
[197.36300659 125.27058411]
[211.45375061 130.41363525]
[225.54449463 135.55667114]
[237.26733398 125.63343811]
[252.38406372 122.91687012]
[266.82839966 128.13772583]
[276.71484375 139.89160156]
[279.38400269 155.01678467]
[274.11788940 169.44467163]
[262.33309937 179.29421997]
[247.19961548 181.91596985]
[232.78831482 176.60467529]
[222.97573853 164.78903198]
[220.40144348 149.64741516]
[206.31069946 144.50437927]
[192.21995544 139.36132812]
[178.12921143 134.21827698]
[164.03846741 129.07524109]
[156.66593933 129.73616028]
[149.76136780 123.73209381]
[135.75621033 118.36037445]
[121.75104523 112.98865509]
[109.74625397 121.98226166]
[110.96573639 136.93261719]
[112.18521118 151.88296509]
[113.40469360 166.83329773]
[114.62416840 181.78364563]
[115.84365082 196.73399353]
[117.06312561 211.68434143]
[118.28260803 226.63468933]
[119.50208282 241.58503723]
[129.90356445 247.37954712]
[136.14642334 257.37710571]
[136.77445984 269.02685547]
[131.74699402 279.42160034]
[122.42030334 286.02334595]
[123.15251160 301.00546265]
[123.88471222 315.98760986]
[124.61692047 330.96972656]
[125.34912109 345.95184326]
[126.08132935 360.93395996]
[137.95571899 371.36343384]
[138.89404297 387.13986206]
[128.33958435 398.90332031]
[112.55413818 399.67477417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 188]
[3 187]
[4 186]
[5 185]
[6 184]
[7 183]
[10 178]
[11 177]
[12 176]
[13 175]
[14 174]
[15 173]
[16 172]
[17 171]
[18 170]
[23 70]
[24 69]
[25 68]
[28 65]
[29 64]
[30 63]
[31 62]
[33 59]
[34 58]
[35 57]
[38 53]
[39 52]
[40 51]
[41 50]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[79 86]
[80 85]
[95 142]
[96 141]
[97 140]
[98 139]
[99 138]
[100 137]
[102 136]
[103 135]
[104 134]
[106 132]
[107 131]
[109 128]
[110 127]
[111 126]
[113 124]
[114 123]
[115 122]
[116 121]
[143 169]
[144 168]
[145 167]
[146 165]
[147 164]
[148 163]
[149 162]
[150 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
