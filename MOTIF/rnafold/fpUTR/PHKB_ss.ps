%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCUGACAGGCGGCCCCGGGGGCGGUGGCCAAGGCGGCGACCGGAGCGCGAUGGCGGGGGCGGCGGGACUCACGGCAGAAGUGAGCUGGAAGGUCUUGGAGCGAAGAGCUCGGACCAAGCGCUCAGUUUUAAAAUUGCUAUAGCUUAGCCUGCGACGCUUAUGAUUAGAGCCAACAAUUUGAA\
) } def
/len { sequence length } bind def

/coor [
[82.67717743 307.58740234]
[86.31539917 292.92657471]
[93.93786621 279.88531494]
[104.92666626 269.52081299]
[118.39099121 262.67327881]
[115.62009430 247.93142700]
[112.84920502 233.18957520]
[110.07831573 218.44772339]
[107.18302917 203.72979736]
[104.16355133 189.03684998]
[100.89634705 174.39698792]
[97.38234711 159.81440735]
[93.86835480 145.23181152]
[90.35435486 130.64923096]
[77.49250031 122.93090057]
[62.97134399 126.69068909]
[48.45018387 130.45046997]
[33.92902756 134.21026611]
[19.40787125 137.97004700]
[22.75070000 143.67256165]
[24.25947762 150.89747620]
[23.45463562 159.07368469]
[20.02686882 167.50041199]
[13.86898232 175.39601135]
[5.09429836 181.95385742]
[-8.78800964 187.63552856]
[-22.67031670 193.31721497]
[-36.55262375 198.99890137]
[-46.39378357 211.38688660]
[-61.10343552 209.04693604]
[-74.98574066 214.72862244]
[-88.86804962 220.41030884]
[-96.37111664 234.59069824]
[-112.16196442 237.42417908]
[-124.12721252 226.73715210]
[-123.08813477 210.72778320]
[-109.84183502 201.67709351]
[-94.54973602 206.52799988]
[-80.66742706 200.84631348]
[-66.78511810 195.16462708]
[-57.93691635 183.18302917]
[-42.23431015 185.11659241]
[-28.35200119 179.43490601]
[-14.46969318 173.75321960]
[-0.58738476 168.07154846]
[-1.15688312 160.59320068]
[-14.67939281 154.10153198]
[-2.29587984 145.63650513]
[-2.86537814 138.15815735]
[-17.44796371 134.64416504]
[-32.03055191 131.13015747]
[-47.59650421 136.29089355]
[-59.66728973 125.19007874]
[-55.82551956 109.24727631]
[-40.02327728 104.86308289]
[-28.51655388 116.54757690]
[-13.93396759 120.06156921]
[0.64861876 123.57556915]
[15.64808369 123.44889069]
[30.16924095 119.68910217]
[44.69039917 115.92931366]
[59.21155548 112.16953278]
[73.73271179 108.40974426]
[82.04125977 83.84787750]
[104.19945526 79.70291138]
[112.34778595 67.10906982]
[120.49610901 54.51523209]
[128.64443970 41.92139435]
[136.79275513 29.32755470]
[138.83430481 20.40122986]
[145.18656921 16.59143639]
[153.54643250 4.13701534]
[150.82894897 -6.42346096]
[154.31224060 -16.52438354]
[162.61293030 -22.89703941]
[172.83227539 -23.62126350]
[181.60800171 -35.78623199]
[190.38374329 -47.95120239]
[197.88374329 -60.94158554]
[204.03103638 -74.62407684]
[210.17834473 -88.30657196]
[216.32565308 -101.98906708]
[214.92353821 -117.74802399]
[227.19714355 -126.18650818]
[233.34443665 -139.86900330]
[239.49174500 -153.55149841]
[245.63905334 -167.23399353]
[251.78636169 -180.91648865]
[243.01910400 -191.83117676]
[239.82972717 -205.39488220]
[242.78598022 -218.94352722]
[251.25431824 -229.84126282]
[263.53454590 -235.99317932]
[277.20095825 -236.24794006]
[283.57849121 -249.82466125]
[289.95599365 -263.40136719]
[296.33352661 -276.97808838]
[302.71102905 -290.55480957]
[302.53369141 -297.19924927]
[305.33145142 -302.17752075]
[309.54010010 -304.47677612]
[316.37252808 -317.83035278]
[323.20492554 -331.18392944]
[330.03735352 -344.53750610]
[326.49365234 -360.18429565]
[336.62942505 -372.61996460]
[352.66940308 -372.30493164]
[362.30905151 -359.48086548]
[358.15368652 -343.98529053]
[343.39093018 -337.70510864]
[336.55850220 -324.35153198]
[329.72610474 -310.99795532]
[322.89367676 -297.64437866]
[316.28775024 -284.17730713]
[309.91024780 -270.60058594]
[303.53271484 -257.02386475]
[297.15521240 -243.44714355]
[290.77767944 -229.87042236]
[300.32727051 -216.84762573]
[302.02233887 -200.69355774]
[295.30688477 -185.80108643]
[281.92495728 -176.26788330]
[265.46884155 -174.76918030]
[259.32153320 -161.08668518]
[253.17424011 -147.40419006]
[247.02693176 -133.72169495]
[240.87963867 -120.03919983]
[242.72143555 -105.25891113]
[230.00814819 -95.84175873]
[223.86083984 -82.15926361]
[217.71353149 -68.47677612]
[211.56623840 -54.79427719]
[224.28147888 -62.75182724]
[239.17904663 -64.50176239]
[253.39219666 -59.70734406]
[264.18588257 -49.29116821]
[269.48303223 -35.25762939]
[268.26431274 -20.30722046]
[260.76428223 -7.31686211]
[248.42614746 1.21369433]
[233.62414551 3.64290476]
[219.20666504 -0.49668655]
[207.94807434 -10.40849304]
[202.01484680 -24.18517494]
[202.54870605 -39.17546844]
[193.77297974 -27.01049805]
[184.99723816 -14.84552956]
[184.47708130 4.47097158]
[166.00085449 12.49688244]
[157.64099121 24.95130348]
[149.38659668 37.47587967]
[141.23826599 50.06972122]
[133.08995056 62.66355896]
[124.94161987 75.25740051]
[116.79329681 87.85123444]
[122.98710632 101.06023407]
[119.04345703 116.65052795]
[104.93694305 127.13523102]
[108.45094299 141.71781921]
[111.96493530 156.30039978]
[115.47893524 170.88299561]
[119.77259064 175.95689392]
[120.70271301 181.59121704]
[118.85649872 186.01736450]
[121.87597656 200.71031189]
[126.67858124 208.50660706]
[124.82016754 215.67683411]
[127.59105682 230.41867065]
[130.36195374 245.16052246]
[133.13284302 259.90237427]
[148.16455078 261.39376831]
[162.16668701 267.06097412]
[174.00415039 276.44451904]
[182.71731567 288.78378296]
[187.59988403 303.07843018]
[188.25601196 318.16970825]
[184.63252258 332.83416748]
[177.02316284 345.88308716]
[166.04476929 356.25863647]
[152.58734131 363.11968994]
[137.74177551 365.91006470]
[122.71157837 364.40359497]
[108.71514130 358.72232056]
[96.88711548 349.32687378]
[88.18634033 336.97888184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 170]
[6 169]
[7 168]
[8 167]
[9 165]
[10 164]
[11 161]
[12 160]
[13 159]
[14 158]
[15 63]
[16 62]
[17 61]
[18 60]
[19 59]
[25 45]
[26 44]
[27 43]
[28 42]
[30 40]
[31 39]
[32 38]
[49 58]
[50 57]
[51 56]
[65 155]
[66 154]
[67 153]
[68 152]
[69 151]
[71 150]
[72 149]
[76 147]
[77 146]
[78 145]
[79 132]
[80 131]
[81 130]
[82 129]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[94 118]
[95 117]
[96 116]
[97 115]
[98 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
