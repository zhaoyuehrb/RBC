%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUAACAAUACUCCUAAACAACUGCUAGGACCACGGAACUCAGAAACACAGCAAGCGAUCAUAUUGGAAAU\
) } def
/len { sequence length } bind def

/coor [
[39.01088333 221.64459229]
[25.99925232 214.19706726]
[13.88587666 205.36335754]
[2.81779099 195.25071716]
[-7.07065630 183.98187256]
[-15.65943432 171.69361877]
[-22.84428787 158.53512573]
[-28.53800774 144.66609192]
[-32.67147446 130.25489807]
[-35.19452286 115.47645569]
[-36.07651901 100.51014709]
[-35.30676270 85.53765106]
[-32.89459610 70.74070740]
[-28.86929512 56.29891968]
[-42.78763199 50.70607376]
[-56.70596695 45.11322784]
[-70.62429810 39.52037811]
[-84.54264069 33.92753220]
[-97.06108093 42.94374466]
[-112.46799469 43.73786545]
[-125.84708405 36.05649185]
[-132.92913818 22.35072327]
[-131.45428467 6.99401951]
[-121.89315796 -5.11335135]
[-107.29667664 -10.10797024]
[-92.32251740 -6.39607239]
[-81.74888611 4.83788872]
[-78.94979095 20.00919724]
[-65.03145599 25.60204506]
[-51.11311722 31.19489098]
[-37.19478226 36.78773880]
[-23.27644730 42.38058472]
[-16.18970490 29.16898918]
[-7.69260168 16.81717110]
[2.11172009 5.47506046]
[13.10425186 -4.71966600]
[25.15155983 -13.64326096]
[38.10741043 -21.18740463]
[51.81454086 -27.26052475]
[66.10656738 -31.78890228]
[80.81000519 -34.71757126]
[95.74638367 -36.01097870]
[110.73439026 -35.65342712]
[125.59209442 -33.64925766]
[140.13916016 -30.02279663]
[154.19898987 -24.81806374]
[167.60093689 -18.09823418]
[180.18231201 -9.94488049]
[191.79040527 -0.45696741]
[202.28430176 10.25033474]
[211.53662109 22.04705620]
[219.43507385 34.79000473]
[225.88375854 48.32449722]
[230.80442810 62.48625183]
[234.13732910 77.10336304]
[235.84202576 91.99840546]
[235.89779663 106.99057007]
[234.30398560 121.89788818]
[231.07994080 136.53939819]
[226.26480103 150.73736572]
[219.91699219 164.31947327]
[212.11358643 177.12083435]
[202.94929504 188.98608398]
[192.53535461 199.77117920]
[180.99818420 209.34519958]
[168.47782898 217.59194946]
[155.12626648 224.41131592]
[141.10554504 229.72052002]
[126.58587646 233.45512390]
[111.74349213 235.56979370]
[96.75856018 236.03886414]
[81.81297302 234.85662842]
[67.08815002 232.03746033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
