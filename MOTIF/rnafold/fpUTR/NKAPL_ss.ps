%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCCUGCGUGGCCGCGAAUCACCAGCCAGCCUCUGGGUCUGUAGCAACCGCCCAGCGUUGAGGCGCGGCUC\
) } def
/len { sequence length } bind def

/coor [
[18.46340370 176.64236450]
[-0.35289100 170.05908203]
[-11.79915237 179.75357056]
[-23.24541283 189.44805908]
[-27.94565964 197.62493896]
[-35.37088394 199.29476929]
[-47.20798874 208.50796509]
[-59.04509735 217.72116089]
[-62.44834900 233.39907837]
[-76.89105225 240.38391113]
[-91.29400635 233.31747437]
[-94.60848999 217.62054443]
[-84.29192352 205.33445740]
[-68.25828552 205.88404846]
[-56.42118073 196.67085266]
[-44.58407211 187.45767212]
[-32.93990326 178.00180054]
[-21.49364090 168.30731201]
[-10.04737949 158.61282349]
[-13.32218361 148.69818115]
[-13.29986382 138.22645569]
[-9.96360970 128.26849365]
[-3.63645673 119.84857178]
[5.04988861 113.83913422]
[15.21808624 110.87035370]
[25.83376122 111.26413727]
[35.81072235 114.99929047]
[44.12210464 121.71177673]
[57.31421280 114.57256317]
[70.50631714 107.43335724]
[83.69842529 100.29414368]
[91.94535828 85.82429504]
[108.59722137 86.14663696]
[121.48302460 78.46836090]
[134.36883545 70.79008484]
[147.25463867 63.11180878]
[160.14045715 55.43353271]
[172.16543579 46.46694565]
[183.20129395 36.30772400]
[194.23716736 26.14849854]
[205.27302551 15.98927593]
[216.30888367 5.83005190]
[217.67936707 -7.18430233]
[227.32376099 -15.41886044]
[239.58367920 -14.77404976]
[251.02993774 -24.46853828]
[256.05563354 -40.07861710]
[272.14196777 -43.26629639]
[282.74072266 -30.75236893]
[276.94879150 -15.41008759]
[260.72442627 -13.02227783]
[249.27816772 -3.32778907]
[244.41590881 13.40403366]
[226.46809387 16.86591148]
[215.43223572 27.02513504]
[204.39637756 37.18435669]
[193.36051941 47.34358215]
[182.32466125 57.50280380]
[182.43942261 60.11741257]
[181.50663757 62.94136047]
[179.44346619 65.57535553]
[176.31196594 67.59835052]
[172.32221985 68.61780548]
[167.81872559 68.31934357]
[154.93292236 75.99761963]
[142.04711914 83.67589569]
[129.16130066 91.35417175]
[116.27549744 99.03244781]
[112.64761353 110.28910828]
[102.36477661 116.13182068]
[90.83763885 113.48625183]
[77.64553070 120.62545776]
[64.45342255 127.76467133]
[51.26131821 134.90388489]
[50.25354004 155.20266724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[6 16]
[7 15]
[8 14]
[28 74]
[29 73]
[30 72]
[31 71]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
