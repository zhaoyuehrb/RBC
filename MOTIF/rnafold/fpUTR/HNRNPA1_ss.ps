%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGUAAAAAAGAGAGGGCGAAGGUAGGCUGGCAGAUACGUUCGUCAGCUUGCUCCUUUCUGCCCGUGGACGCCGCCGAAGAAGCAUCGUUAAAGUCUCUCUUCACCCUGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[106.13975525 355.22903442]
[104.95299530 340.27603149]
[103.76624298 325.32305908]
[102.57948303 310.37008667]
[101.39273071 295.41711426]
[100.20597076 280.46411133]
[99.01921844 265.51113892]
[97.83246613 250.55816650]
[90.04914856 245.84782410]
[85.29805756 237.92697144]
[84.79190063 228.56530762]
[88.77748871 219.92616272]
[96.44863129 214.06658936]
[96.44863129 199.06658936]
[96.44863129 184.06658936]
[96.44863129 169.06658936]
[96.44863129 154.06658936]
[96.44863129 139.06658936]
[80.57605743 95.24272156]
[69.35849762 85.28448486]
[58.14094543 75.32625580]
[46.92338943 65.36801910]
[35.57536697 55.55871964]
[24.09885406 45.90006256]
[12.62234116 36.24140549]
[0.77244329 27.04467010]
[-11.43225861 18.32427788]
[-23.63696098 9.60388565]
[-35.84166336 0.88349307]
[-48.04636765 -7.83689928]
[-60.25106812 -16.55729103]
[-72.45577240 -25.27768326]
[-84.66047668 -33.99807739]
[-96.86517334 -42.71846771]
[-109.06987762 -51.43886185]
[-121.27458191 -60.15925217]
[-130.19699097 -62.64941406]
[-133.68223572 -69.27442932]
[-145.65249634 -78.31394958]
[-161.67640686 -77.53049469]
[-172.17112732 -89.66477203]
[-169.08598328 -105.40838623]
[-154.78765869 -112.68419647]
[-140.24459839 -105.91081238]
[-136.61297607 -90.28420258]
[-124.64272308 -81.24468231]
[-112.55418396 -72.36395264]
[-100.34948730 -63.64356232]
[-88.14478302 -54.92317200]
[-75.94007874 -46.20277786]
[-63.73537827 -37.48238754]
[-51.53067780 -28.76199341]
[-39.32597351 -20.04160118]
[-27.12127113 -11.32120895]
[-14.91656876 -2.60081697]
[-2.71186686 6.11957550]
[9.49283600 14.83996773]
[13.12773991 14.56096458]
[17.07379341 16.11067772]
[20.43096733 19.61244011]
[22.28099823 24.76489067]
[33.75751114 34.42354965]
[45.23402405 44.08220291]
[52.46847153 46.00586319]
[56.88162613 54.15046310]
[68.09918213 64.10869598]
[79.31673431 74.06693268]
[90.53429413 84.02516937]
[105.52252960 83.43132782]
[115.91706085 72.61680603]
[126.31158447 61.80228806]
[136.70611572 50.98776627]
[143.32290649 35.37833786]
[160.15403748 37.41543198]
[162.85586548 54.15270996]
[147.52062988 61.38229370]
[137.12609863 72.19681549]
[126.73157501 83.01132965]
[116.33705139 93.82585144]
[123.37523651 107.07212830]
[138.15493774 104.51074982]
[152.93463135 101.94937134]
[160.63615417 88.33979797]
[175.30195618 82.91316223]
[190.00727844 88.23175812]
[197.80873108 101.78430176]
[195.02268982 117.17169952]
[182.96464539 127.12849426]
[167.32804871 126.95338440]
[155.49600220 116.72906494]
[140.71630859 119.29044342]
[125.93662262 121.85182190]
[140.83534241 120.11163330]
[154.13754272 127.04352570]
[161.24638367 140.25202942]
[159.70521545 155.17263794]
[150.04664612 166.64921570]
[135.60838318 170.71577454]
[121.37992096 165.96701050]
[112.27820587 154.04397583]
[111.44863129 139.06658936]
[111.44863129 154.06658936]
[111.44863129 169.06658936]
[111.44863129 184.06658936]
[111.44863129 199.06658936]
[111.44863129 214.06658936]
[123.39930725 231.75241089]
[112.78544617 249.37139893]
[113.97219849 264.32437134]
[115.15895081 279.27737427]
[116.34571075 294.23034668]
[117.53246307 309.18331909]
[118.71922302 324.13629150]
[119.90597534 339.08929443]
[121.09273529 354.04226685]
[130.83088684 367.23696899]
[124.02590179 382.15756226]
[107.67816162 383.45501709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[13 106]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[19 68]
[20 67]
[21 66]
[22 65]
[23 63]
[24 62]
[25 61]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[38 46]
[39 45]
[69 79]
[70 78]
[71 77]
[72 76]
[80 92]
[81 91]
[82 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
