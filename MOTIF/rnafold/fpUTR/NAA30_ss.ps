%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUUUACCCGGCCUAACAGCUGAGGCGCUUUACGGCGACGGCGGCUGAGUGAGAACCUUGGCGGCUGUGGAGGCUGCCGCGGCUGCGAAGGAGGCGGCGGCGGUGGCGGAGGAAGAGGAGUGGCGGCAGCGGCGGCGGGGACCCGUGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[84.34004974 263.25466919]
[70.49453735 257.48388672]
[61.13188934 245.76463318]
[58.56074142 230.98663330]
[63.41508484 216.79385376]
[74.49794006 206.68591309]
[89.07649994 203.15524292]
[103.55598450 207.07243347]
[114.36541748 217.47055054]
[113.15065002 202.51982117]
[111.93588257 187.56909180]
[103.19328308 175.51022339]
[109.78756714 161.12878418]
[108.57279968 146.17805481]
[107.35802460 131.22732544]
[93.17729950 131.79113770]
[79.95025635 126.14474487]
[70.29663849 115.22952271]
[66.20362854 101.04673767]
[51.48083878 103.91716003]
[36.75804520 106.78758240]
[22.03524971 109.65801239]
[7.31245565 112.52843475]
[-7.41033840 115.39885712]
[-14.31827068 130.80754089]
[-28.89398384 139.00039673]
[-45.31906891 136.93327332]
[-57.17039490 125.61338806]
[-71.83199310 128.78161621]
[-86.49358368 131.94982910]
[-101.15518188 135.11805725]
[-112.93495941 146.52720642]
[-128.62911987 141.77061462]
[-132.09286499 125.74143219]
[-119.76297760 114.92912292]
[-104.32340240 120.45645905]
[-89.66180420 117.28823853]
[-75.00021362 114.12001038]
[-60.33861542 110.95178986]
[-56.08961868 98.26103210]
[-46.03413010 89.26598358]
[-32.73817444 86.40609741]
[-19.66672134 90.53646851]
[-10.28076267 100.67606354]
[4.44203138 97.80564117]
[19.16482544 94.93521881]
[33.88761902 92.06478882]
[48.61041260 89.19436646]
[63.33320618 86.32394409]
[48.54260254 88.82154846]
[34.90423965 82.57694244]
[27.13116074 69.74810028]
[27.90952682 54.76830673]
[36.97035599 42.81417084]
[51.18247604 38.01671219]
[65.63456726 42.03379822]
[75.33238983 53.47723389]
[76.92457581 68.39282990]
[75.70980835 53.44210052]
[74.49504089 38.49137115]
[73.28027344 23.54064178]
[64.45078278 10.41239929]
[71.13195801 -2.89966989]
[69.91719055 -17.85040092]
[68.70241547 -32.80113220]
[67.48764801 -47.75186157]
[66.27288055 -62.70259094]
[65.05811310 -77.65332031]
[63.84334564 -92.60404968]
[62.62857437 -107.55477905]
[61.41380692 -122.50551605]
[60.19903946 -137.45623779]
[47.99462128 -147.49754333]
[46.54824829 -163.23550415]
[56.71802139 -175.33308411]
[72.47039795 -176.61299133]
[84.45977020 -166.31587219]
[85.57305908 -150.55084229]
[75.14977264 -138.67100525]
[76.36454010 -123.72028351]
[77.57930756 -108.76955414]
[78.79407501 -93.81881714]
[80.00884247 -78.86808777]
[81.22360992 -63.91735840]
[82.43837738 -48.96662903]
[83.65315247 -34.01589966]
[84.86791992 -19.06516838]
[86.08268738 -4.11443853]
[94.82528687 7.94442701]
[88.23100281 22.32587242]
[89.44577026 37.27660370]
[90.66053772 52.22733307]
[91.87530518 67.17806244]
[112.99780273 69.41110229]
[128.26843262 83.64402771]
[131.85203552 103.83847046]
[146.84510803 103.38249969]
[160.40370178 95.22927856]
[173.36029053 102.57612610]
[188.35336304 102.12015533]
[201.91195679 93.96694183]
[214.86854553 101.31378174]
[229.86161804 100.85781097]
[243.42021179 92.70459747]
[256.37680054 100.05143738]
[271.36987305 99.59546661]
[284.92846680 91.44225311]
[297.88504028 98.78909302]
[312.87811279 98.33312225]
[319.03234863 84.36573029]
[330.64291382 74.45829010]
[345.40454102 70.57793427]
[360.38629150 73.49510956]
[372.61352539 82.63061523]
[379.65853882 96.17058563]
[380.12249756 111.42665100]
[373.91329956 125.36970520]
[362.26382446 135.23135376]
[347.48703003 139.05354309]
[332.51687622 136.07739258]
[320.32571411 126.89380646]
[313.33407593 113.32619476]
[298.34103394 113.78215790]
[285.85482788 121.90277100]
[271.82583618 114.58853912]
[256.83276367 115.04450226]
[244.34657288 123.16511536]
[230.31758118 115.85088348]
[215.32450867 116.30684662]
[202.83831787 124.42745209]
[188.80932617 117.11322784]
[173.81625366 117.56919098]
[161.33006287 125.68979645]
[147.30107117 118.37557220]
[132.30799866 118.83153534]
[122.30876160 130.01255798]
[123.52352905 144.96328735]
[124.73829651 159.91401672]
[133.56777954 173.04225159]
[126.88661194 186.35432434]
[128.10137939 201.30505371]
[129.31614685 216.25578308]
[135.55540466 225.91970825]
[132.70489502 235.73071289]
[136.61164856 250.21302795]
[140.51840210 264.69534302]
[152.50955200 275.88214111]
[148.55395508 291.79705811]
[132.72079468 296.06823730]
[121.29785919 284.30181885]
[126.03609467 268.60208130]
[122.12934113 254.11978149]
[118.22258759 239.63746643]
[111.56002045 253.07659912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 142]
[10 141]
[11 140]
[13 138]
[14 137]
[15 136]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[28 39]
[29 38]
[30 37]
[31 36]
[58 93]
[59 92]
[60 91]
[61 90]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[96 135]
[97 134]
[99 132]
[100 131]
[102 129]
[103 128]
[105 126]
[106 125]
[108 123]
[109 122]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
