%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGACGCUCUUGUCUAGCCGAGCCGGGCAGCGCUGUCGUCCACGGUGCGCACUGGGCGGGCAGCGCUCCCUCUGCCCACCUCCCGCCCCGUC\
) } def
/len { sequence length } bind def

/coor [
[88.91175079 203.76634216]
[98.37480164 190.81141663]
[97.40384674 175.84286499]
[96.43289948 160.87432861]
[95.46195221 145.90577698]
[94.49100494 130.93724060]
[93.52005768 115.96869659]
[87.19281006 111.94179535]
[74.53831482 103.88799286]
[68.21106720 99.86109161]
[54.23952866 105.31967163]
[40.26798630 110.77824402]
[26.29644585 116.23681641]
[24.06325531 131.43249512]
[14.51884270 143.46575928]
[0.23060566 149.09976196]
[-14.95799160 146.81893921]
[-26.96129227 137.23686218]
[-32.55046844 122.93103790]
[-30.22206116 107.74966431]
[-20.60239983 95.77645111]
[-6.27912331 90.23214722]
[8.89487648 92.60813141]
[20.83787155 102.26527405]
[34.80941391 96.80670166]
[48.78095627 91.34812927]
[62.75249481 85.88954926]
[81.26593018 82.53143311]
[95.22734833 89.64836884]
[98.12392426 74.93069458]
[101.02049255 60.21302414]
[99.59698486 50.99156570]
[104.25651550 45.06911850]
[107.62815094 30.45296097]
[110.99978638 15.83680248]
[114.37142944 1.22064483]
[117.74306488 -13.39551258]
[121.11470032 -28.01167107]
[124.48633575 -42.62783051]
[127.85797119 -57.24398804]
[131.22959900 -71.86014557]
[123.11629486 -85.15721130]
[126.74382782 -99.93204498]
[139.47055054 -107.58489990]
[142.84217834 -122.20105743]
[141.71803284 -131.46377563]
[146.56689453 -137.23223877]
[150.41006470 -151.73153687]
[154.25323486 -166.23085022]
[158.09640503 -180.73016357]
[153.28932190 -196.40895081]
[164.66050720 -208.22537231]
[180.51226807 -204.02372742]
[184.53765869 -188.12629700]
[172.59571838 -176.88700867]
[168.75254822 -162.38769531]
[164.90937805 -147.88838196]
[161.06620789 -133.38906860]
[157.45834351 -118.82942200]
[154.08670044 -104.21326447]
[162.17509460 -91.75880432]
[158.96398926 -76.88790894]
[145.84576416 -68.48851013]
[142.47412109 -53.87234879]
[139.10249329 -39.25619125]
[135.73085022 -24.64003563]
[132.35922241 -10.02387714]
[128.98757935 4.59228086]
[125.61595154 19.20843887]
[122.24430847 33.82459641]
[118.87267303 48.44075394]
[115.73815918 63.10959244]
[112.84159088 77.82726288]
[109.94502258 92.54493713]
[118.08673859 79.94682312]
[130.53381348 71.57602692]
[145.27224731 68.78698730]
[159.91726685 72.03099060]
[172.09921265 80.78313446]
[179.84698486 93.62727356]
[181.90695190 108.48515320]
[177.94580078 122.95267487]
[168.60444641 134.68891907]
[155.39440918 141.79487610]
[140.45312500 143.12077332]
[126.19818115 138.45205688]
[114.93612671 128.54417419]
[108.48860168 114.99774933]
[109.45954895 129.96629333]
[110.43049622 144.93482971]
[111.40144348 159.90338135]
[112.37239075 174.87191772]
[113.34333801 189.84046936]
[124.40071106 201.46432495]
[122.06431580 217.33633423]
[108.12644958 225.28085327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[10 27]
[11 26]
[12 25]
[13 24]
[29 74]
[30 73]
[31 72]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[44 60]
[45 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
