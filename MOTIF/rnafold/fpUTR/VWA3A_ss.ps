%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGUUGCUUGGAGGAGCUUGGAGAAACCAGAAGUGAGAUCCAGGAGAAGUAAGGCCCUGGAGUGCCAGGAGCCCUUCUCCCAAAGAUGGAGAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[69.66584015 139.81375122]
[59.63069153 129.59078979]
[46.34052277 136.54574585]
[33.05035400 143.50070190]
[26.76146317 150.37400818]
[19.23694038 150.45799255]
[5.73690081 156.99626160]
[-7.76313925 163.53451538]
[-16.81076241 176.51339722]
[-31.63790894 175.09742737]
[-45.13795090 181.63568115]
[-58.63798904 188.17395020]
[-67.68561554 201.15283203]
[-82.51275635 199.73684692]
[-96.01280212 206.27511597]
[-109.51284027 212.81338501]
[-121.13259125 225.15913391]
[-136.21253967 217.41113281]
[-132.94186401 200.77565002]
[-116.05110168 199.31335449]
[-102.55106354 192.77508545]
[-89.05102539 186.23681641]
[-80.96901703 173.72560120]
[-65.17625427 174.67391968]
[-51.67621613 168.13565063]
[-38.17617416 161.59738159]
[-30.09416580 149.08616638]
[-14.30140495 150.03448486]
[-0.80136555 143.49621582]
[12.69867420 136.95794678]
[26.09539986 130.21052551]
[39.38557053 123.25556946]
[52.67573929 116.30062103]
[49.95661926 100.97756958]
[52.07524109 85.56002045]
[58.82679367 71.53839874]
[69.55860901 60.26818466]
[83.23321533 52.83888626]
[98.52868652 49.96870041]
[113.96639252 51.93508911]
[128.05395508 58.54796219]
[139.42950439 69.16804504]
[152.49694824 61.80313492]
[165.56439209 54.43822098]
[178.63183594 47.07331085]
[190.95617676 38.52282715]
[202.43016052 28.86117172]
[213.90414429 19.19951439]
[225.37814331 9.53785896]
[236.85212708 -0.12379768]
[248.32611084 -9.78545380]
[259.80010986 -19.44710922]
[261.67907715 -24.70227623]
[265.11636353 -28.24777985]
[269.14547729 -29.77118492]
[272.82339478 -29.41344643]
[285.14773560 -37.96393204]
[297.47207642 -46.51441574]
[309.66192627 -55.25553131]
[321.71438599 -64.18516541]
[333.76684570 -73.11479950]
[345.81930542 -82.04442596]
[357.87176514 -90.97406006]
[363.90191650 -106.22428131]
[380.16149902 -108.35914612]
[389.92407227 -95.18247986]
[383.14669800 -80.24931335]
[366.80139160 -78.92160797]
[354.74893188 -69.99197388]
[342.69647217 -61.06234360]
[330.64401245 -52.13270950]
[318.59158325 -43.20307541]
[315.02832031 -36.57519913]
[306.02255249 -34.19007874]
[293.69821167 -25.63959694]
[281.37387085 -17.08911324]
[269.46176147 -7.97312212]
[257.98776245 1.68853414]
[246.51377869 11.35019016]
[235.03979492 21.01184654]
[223.56581116 30.67350197]
[212.09181213 40.33515930]
[200.61782837 49.99681473]
[215.20161438 53.50582504]
[223.27552795 66.14750671]
[220.32591248 80.85463715]
[208.00172424 89.40534210]
[193.19270325 87.01942444]
[184.17767334 75.03071594]
[185.99674988 60.14075470]
[172.92930603 67.50566864]
[159.86186218 74.87057495]
[146.79441833 82.23548889]
[149.90983582 96.21788025]
[148.93704224 110.51007843]
[143.95573425 123.94136810]
[135.37393188 135.41159058]
[123.89459229 143.98118591]
[110.45800781 148.94819641]
[96.16478729 149.90577698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[6 30]
[7 29]
[8 28]
[10 26]
[11 25]
[12 24]
[14 22]
[15 21]
[16 20]
[42 93]
[43 92]
[44 91]
[45 90]
[46 83]
[47 82]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[56 76]
[57 75]
[58 74]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
