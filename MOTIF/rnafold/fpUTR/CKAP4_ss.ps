%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAGCCCCUGCAAGUUUCCCGGGCCGCGCGCCGCGCUCGCUCGCCUCCCAGCCCGCGGCCCGAGCCGCCGCCGCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[28.24276352 188.29153442]
[25.72903442 187.76254272]
[13.75877571 196.80206299]
[1.78851748 205.84158325]
[-10.18174076 214.88110352]
[-22.15199852 223.92062378]
[-34.12225723 232.96014404]
[-46.09251785 241.99966431]
[-45.67114639 257.51101685]
[-54.47533798 270.28857422]
[-69.11970520 275.41909790]
[-83.97318268 270.92977905]
[-93.32431030 258.54690552]
[-93.57738495 243.03189087]
[-84.63510132 230.35060120]
[-69.93593597 225.37924194]
[-55.13203430 230.02940369]
[-43.16177750 220.98988342]
[-31.19151878 211.95036316]
[-19.22126007 202.91084290]
[-7.25100183 193.87133789]
[4.71925640 184.83181763]
[16.68951416 175.79229736]
[27.77464867 165.68685913]
[37.88008499 154.60173035]
[47.98551941 143.51658630]
[58.09095383 132.43145752]
[60.32307053 125.19390869]
[68.78048706 121.13224030]
[79.28862762 110.42808533]
[89.79677582 99.72393799]
[92.84470367 92.03401184]
[100.89653015 88.82743073]
[111.79302979 78.51888275]
[116.50058746 63.41426468]
[131.06346130 60.28824997]
[141.95996094 49.97969818]
[152.85646057 39.67115021]
[163.56062317 29.16300392]
[174.06877136 18.45885086]
[184.57690430 7.75469875]
[195.08505249 -2.94945359]
[194.36180115 -14.10614872]
[199.90739441 -23.55670357]
[209.59811401 -28.17487144]
[219.99118042 -26.59631157]
[231.26115417 -36.49517822]
[242.53112793 -46.39404678]
[238.86973572 -61.25516129]
[242.54528809 -76.11278534]
[252.71318054 -87.55273438]
[267.03689575 -92.94620514]
[282.22497559 -91.05381012]
[294.78726196 -82.31040955]
[301.83709717 -68.72517395]
[301.75442505 -53.41989136]
[294.55825806 -39.91160202]
[281.90225220 -31.30440903]
[266.69464111 -29.57618713]
[252.42999268 -35.12406921]
[241.16001892 -25.22520065]
[229.89004517 -15.32633305]
[225.32847595 3.31427884]
[205.78921509 7.55869198]
[195.28106689 18.26284409]
[184.77291870 28.96699715]
[174.26477051 39.67115021]
[171.76673889 46.82126999]
[163.16502380 50.56765366]
[152.26850891 60.87620163]
[141.37200928 71.18475342]
[137.44384766 85.55203247]
[122.10158539 89.41538239]
[111.20507812 99.72393799]
[100.50093079 110.23207855]
[89.99278259 120.93623352]
[79.48463440 131.64038086]
[69.17608643 142.53689575]
[59.07065201 153.62202454]
[48.96521759 164.70715332]
[38.85978317 175.79229736]
[38.25251770 180.12657166]
[36.52042770 183.73179626]
[34.01192093 186.35307312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[24 81]
[25 80]
[26 79]
[27 78]
[29 77]
[30 76]
[31 75]
[33 74]
[34 73]
[36 71]
[37 70]
[38 69]
[39 67]
[40 66]
[41 65]
[42 64]
[46 62]
[47 61]
[48 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
