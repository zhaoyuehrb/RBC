%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGCGCGCGCCUGCGUAGUGUGUCACGGGGCGGGACAACCGCGGCGCGGCUCGGCGCUCCCGGCCUGGCGUUGUGGCGCCGCAGCCCUUGCCACCUUCCCUGCACCUGCCCUGCCCGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[68.44174194 299.70913696]
[62.31810379 313.40222168]
[56.19446564 327.09533691]
[50.07082748 340.78842163]
[43.94718552 354.48153687]
[37.82354736 368.17462158]
[40.04811859 384.42221069]
[26.92554283 394.25732422]
[11.95519638 387.56250000]
[10.53729057 371.22476196]
[24.13044548 362.05099487]
[30.25408363 348.35787964]
[36.37772369 334.66479492]
[42.50136185 320.97167969]
[48.62500381 307.27859497]
[54.74864197 293.58547974]
[53.12402344 287.92245483]
[54.66338730 281.52447510]
[59.60345459 276.18643188]
[61.45399857 261.30102539]
[63.30454254 246.41560364]
[65.15509033 231.53019714]
[62.83323288 224.42805481]
[67.23992157 216.30119324]
[69.45808411 201.46611023]
[71.67624664 186.63101196]
[69.53076935 179.47363281]
[74.13712311 171.45823669]
[76.72154236 156.68255615]
[74.75375366 149.47430420]
[79.55695343 141.57530212]
[82.50605011 126.86805725]
[85.45514679 112.16082001]
[78.49694061 98.87235260]
[64.72914886 92.91854095]
[50.96135330 86.96472931]
[37.19356155 81.01091766]
[21.80894852 85.55989838]
[8.74334908 76.25024414]
[8.01957226 60.22352600]
[20.19283867 49.77406693]
[35.92485809 52.91780090]
[43.14737701 67.24312592]
[56.91516876 73.19693756]
[70.68296051 79.15074921]
[84.45075226 85.10456085]
[98.36159515 79.49311066]
[104.14467621 65.65273285]
[109.92774963 51.81235504]
[115.71082306 37.97197723]
[112.90263367 19.82374382]
[127.15460205 9.66327095]
[132.59358215 -4.31591272]
[138.03254700 -18.29509735]
[143.47151184 -32.27428055]
[148.73718262 -46.31966400]
[153.82872009 -60.42910385]
[158.92025757 -74.53853607]
[164.01179504 -88.64797974]
[169.10334778 -102.75741577]
[174.19488525 -116.86685181]
[179.28642273 -130.97628784]
[174.50735474 -143.03199768]
[179.11856079 -154.72149658]
[190.11434937 -159.92271423]
[195.55331421 -173.90190125]
[200.99229431 -187.88108826]
[206.43125916 -201.86027527]
[201.31469727 -217.06553650]
[210.13323975 -230.46749878]
[226.12208557 -231.78532410]
[237.01593018 -220.00808716]
[234.45797729 -204.17027283]
[220.41044617 -196.42129517]
[214.97148132 -182.44210815]
[209.53250122 -168.46293640]
[204.09353638 -154.48374939]
[207.73098755 -137.36291504]
[193.39585876 -125.88474274]
[188.30432129 -111.77530670]
[183.21278381 -97.66587067]
[178.12123108 -83.55643463]
[173.02969360 -69.44699860]
[167.93815613 -55.33756256]
[162.84661865 -41.22812271]
[163.54302979 -33.78862000]
[157.45069885 -26.83530807]
[152.01173401 -12.85612488]
[146.57275391 1.12305939]
[141.13378906 15.10224342]
[145.72296143 26.36720276]
[141.22137451 38.09935379]
[129.55119324 43.75505066]
[123.76812744 57.59542847]
[117.98504639 71.43580627]
[112.20197296 85.27618408]
[116.43370056 91.60437775]
[117.74688721 98.82985687]
[116.13329315 105.71842194]
[112.06729889 111.17678070]
[106.39414215 114.42588043]
[100.16238403 115.10991669]
[97.21328735 129.81715393]
[94.26419067 144.52439880]
[91.49722290 159.26698303]
[88.91280365 174.04266357]
[86.51132965 188.84918213]
[84.29316711 203.68426514]
[82.07501221 218.51934814]
[80.04049683 233.38073730]
[78.18995667 248.26614380]
[76.33940887 263.15155029]
[74.48886871 278.03695679]
[84.71338654 267.06158447]
[98.28290558 260.66876221]
[113.25613403 259.77304077]
[127.49099731 264.50259399]
[138.95103455 274.18078613]
[145.99676514 287.42306519]
[147.62020874 302.33496094]
[143.58911133 316.78314209]
[134.48017883 328.70065308]
[121.59654236 336.38256836]
[106.78134155 338.72988892]
[92.15406799 335.40682983]
[79.80731201 326.88876343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[19 113]
[20 112]
[21 111]
[22 110]
[24 109]
[25 108]
[26 107]
[28 106]
[29 105]
[31 104]
[32 103]
[33 102]
[34 46]
[35 45]
[36 44]
[37 43]
[47 96]
[48 95]
[49 94]
[50 93]
[52 90]
[53 89]
[54 88]
[55 87]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
