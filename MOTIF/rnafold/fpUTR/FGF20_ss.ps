%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGACCUCAGAGGAGUAACCGGGCCUUAACUUUUUGCGCUCGUUUUGCUAUAAUUUUUCUCUAUCCACCUCCAUCCCACCCCCACAACACUCUUUACUGGGGGGGUCUUUUGUGUUCCGGAUCUCCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[81.89369965 205.73826599]
[75.47946167 219.58818054]
[63.68572617 229.27687073]
[48.85414886 232.88061523]
[33.92954636 229.68389893]
[21.87520790 220.32144165]
[15.08453465 206.65214539]
[14.90581894 191.39007568]
[21.37454414 177.56552124]
[33.20634079 167.92335510]
[48.05199814 164.37803650]
[51.19359970 149.71072388]
[54.33520508 135.04339600]
[57.47680664 120.37607574]
[47.77526093 108.93579865]
[32.79174423 109.63888550]
[17.80823326 110.34196472]
[2.82471943 111.04505157]
[-12.15879440 111.74813843]
[-27.36356735 122.05838013]
[-42.64716721 113.51566315]
[-57.61008072 114.56980133]
[-72.57299805 115.62394714]
[-87.53591156 116.67808533]
[-102.49882507 117.73223114]
[-107.66027832 132.05979919]
[-118.20773315 143.04483032]
[-132.31378174 148.78411865]
[-147.53445435 148.28327942]
[-161.23269653 141.62908936]
[-171.03518677 129.97442627]
[-175.24359131 115.33853912]
[-173.12878418 100.25717926]
[-165.05715942 87.34327698]
[-152.42716980 78.83425903]
[-137.42704773 76.20435333]
[-122.65566254 79.90920258]
[-110.67223358 89.30693054]
[-103.55296326 102.76931763]
[-88.59004974 101.71517181]
[-73.62713623 100.66103363]
[-58.66422272 99.60688782]
[-43.70130920 98.55274963]
[-35.48426819 89.59587860]
[-22.96310043 88.64634705]
[-12.86187840 96.76462555]
[2.12163544 96.06153870]
[17.10514832 95.35845184]
[32.08866119 94.65537262]
[47.07217407 93.95228577]
[34.54864120 85.69631195]
[24.78739548 74.30693054]
[18.54540634 60.66736984]
[16.30673218 45.83536530]
[18.24497986 30.96111870]
[24.20984268 17.19811058]
[33.73875046 5.61364126]
[46.09275055 -2.89392567]
[60.31380463 -7.66484022]
[75.29908752 -8.32912350]
[89.88651276 -4.83526230]
[102.94483948 2.54580021]
[113.46141052 13.24167156]
[120.62068939 26.42289925]
[123.86746979 41.06729889]
[122.94997406 56.03921127]
[117.94066620 70.17507172]
[131.47692871 63.71211243]
[145.01318359 57.24915695]
[143.84945679 43.00590897]
[147.62443542 29.25386238]
[155.86209106 17.64968491]
[167.55007935 9.58400345]
[181.26412964 6.01477242]
[195.34158325 7.35352898]
[208.08293152 13.41805363]
[217.95706177 23.45686150]
[231.64111328 17.31300545]
[238.26367188 10.88348579]
[245.71870422 11.18971157]
[259.54302979 5.36833382]
[273.36734009 -0.45304409]
[287.19165039 -6.27442169]
[301.01596069 -12.09579945]
[314.84027100 -17.91717720]
[315.10748291 -33.14374924]
[321.55068970 -46.94248199]
[333.05355835 -56.92266083]
[347.62313843 -61.35515976]
[362.73516846 -59.47201920]
[375.77142334 -51.59951019]
[384.47323608 -39.10158920]
[387.33300781 -24.14359665]
[383.85525513 -9.31709385]
[374.64254761 2.80913544]
[361.29098511 10.13414955]
[346.11383057 11.38884640]
[331.74063110 6.35584164]
[320.66162109 -4.09286690]
[306.83731079 1.72851086]
[293.01300049 7.54988861]
[279.18869019 13.37126637]
[265.36437988 19.19264412]
[251.54008484 25.01402283]
[237.78495789 30.99704933]
[224.10092163 37.14090347]
[224.81750488 52.92857361]
[219.42556763 67.82510376]
[208.71812439 79.55323029]
[194.30316162 86.30809784]
[178.36215210 87.03500366]
[163.32000732 81.59394836]
[151.47613525 70.78541565]
[137.93988037 77.24836731]
[124.40362549 83.71132660]
[122.06928253 90.83879852]
[136.32415771 95.50770569]
[131.65501404 109.76249695]
[117.40059662 105.09373474]
[115.06624603 112.22120667]
[122.15657806 125.43965149]
[136.37290955 133.61448669]
[136.13087463 150.01184082]
[121.67946625 157.76353455]
[107.88504028 148.89527893]
[108.93813324 132.52998352]
[101.84780884 119.31153870]
[94.42188263 120.36307526]
[72.14412689 123.51768494]
[69.00252533 138.18499756]
[65.86092377 152.85232544]
[62.71931839 167.51965332]
[74.81043243 176.83456421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 132]
[12 131]
[13 130]
[14 129]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[67 115]
[68 114]
[69 113]
[77 106]
[78 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
