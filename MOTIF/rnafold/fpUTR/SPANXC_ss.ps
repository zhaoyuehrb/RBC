%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAUACAUAGGGAGGGCAAGAGCUCCGGGCCACUGAGAAGAUUCAAAACCUACAAAAGCCUGCCGCUGACAUUGAAGAACCAAUAUAUACA\
) } def
/len { sequence length } bind def

/coor [
[82.29517365 384.16500854]
[74.81450653 369.57144165]
[83.93863678 355.94491577]
[84.43986511 340.95327759]
[84.94108582 325.96166992]
[85.44231415 310.97003174]
[85.94353485 295.97842407]
[78.63584137 282.99972534]
[86.82994843 269.46578979]
[87.33117676 254.47416687]
[80.02347565 241.49546814]
[88.21759033 227.96153259]
[88.71881104 212.96990967]
[75.45638275 206.14544678]
[66.43508911 194.19029236]
[63.48702240 179.44342041]
[67.24942780 164.81932068]
[77.02793121 153.23191833]
[90.92395782 147.01405334]
[91.42518616 132.02243042]
[91.92640686 117.03080750]
[81.15504456 100.31494141]
[91.36183167 83.24848175]
[90.35993958 68.28197479]
[89.35805511 53.31547165]
[77.74421692 42.93488693]
[76.94136047 27.74245071]
[86.90924072 16.73440552]
[85.90734863 1.76790249]
[84.90545654 -13.19860077]
[83.90357208 -28.16510391]
[82.90167999 -43.13160706]
[69.93249512 -51.44462967]
[64.40962982 -65.63446808]
[68.25576782 -80.18338776]
[79.79329681 -89.56546783]
[78.79141235 -104.53197479]
[77.53957367 -119.47964478]
[76.03813934 -134.40431213]
[61.67521667 -139.56854248]
[50.98147583 -150.45921326]
[46.08016205 -164.91397095]
[47.94443512 -180.06280518]
[56.20414352 -192.89790344]
[69.21931458 -200.87086487]
[84.40577698 -202.39863586]
[98.74825287 -197.17788696]
[109.39902496 -186.24519348]
[114.24337769 -171.77125549]
[112.31945801 -156.62986755]
[104.00926971 -143.82739258]
[90.96280670 -135.90574646]
[92.46424103 -120.98107910]
[96.34432983 -114.51101685]
[93.75791168 -105.53385925]
[94.75980377 -90.56735992]
[107.44489288 -82.80679321]
[113.19589996 -68.90032196]
[109.61363220 -54.10097122]
[97.86818695 -44.13349533]
[98.87007141 -29.16699409]
[99.87196350 -14.20049000]
[100.87385559 0.76601303]
[101.87574005 15.73251629]
[113.22190857 25.31375313]
[114.45117188 40.47764206]
[104.32455444 52.31358337]
[105.32644653 67.28008270]
[106.32833862 82.24658966]
[113.87107086 87.23971558]
[118.21873474 95.17205811]
[118.36988831 104.21646881]
[114.28971100 112.28965759]
[106.91802979 117.53203583]
[106.41680908 132.52366638]
[105.91558075 147.51528931]
[119.36527252 154.64741516]
[128.34797668 166.86206055]
[131.12519836 181.70481873]
[127.19873810 196.22183228]
[117.39907837 207.54774475]
[103.71043396 213.47114563]
[103.20921326 228.46276855]
[110.48105621 242.51376343]
[102.32279968 254.97538757]
[101.82157135 269.96701050]
[109.09342194 284.01803589]
[100.93515778 296.47964478]
[100.43393707 311.47128296]
[99.93270874 326.46289062]
[99.43148804 341.45452881]
[98.93025970 356.44613647]
[107.12386322 370.65167236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[9 86]
[10 85]
[12 83]
[13 82]
[19 76]
[20 75]
[21 74]
[23 69]
[24 68]
[25 67]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[36 56]
[37 55]
[38 53]
[39 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
