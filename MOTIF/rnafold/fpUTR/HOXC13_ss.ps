%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGUGGAGAGAAAAGAGGGGAGGGAUGGGGGGAGGGGAAACAGGAGCGAGGUGUCUCCCUAGCUCGCUGCCUCUGGCAAGUGGAGUUUUUAAAAAGCUCCAGCAGAUCAUGUC\
) } def
/len { sequence length } bind def

/coor [
[198.33488464 164.21183777]
[185.27732849 156.82942200]
[172.21977234 149.44699097]
[159.16221619 142.06457520]
[146.10466003 134.68214417]
[133.04708862 127.29972076]
[119.98954010 119.91729736]
[106.93198395 112.53487396]
[92.95030212 112.46904755]
[85.68559265 100.52268219]
[72.62803650 93.14025879]
[59.57048035 85.75783539]
[51.11768723 91.10462189]
[41.34100342 92.91774750]
[31.64782524 90.98040771]
[23.41716194 85.61254120]
[17.80345535 77.61892700]
[15.57472229 68.16880798]
[17.00770187 58.62490463]
[4.82486820 49.87398911]
[-7.35796499 41.12306976]
[-19.54079819 32.37215042]
[-31.72363091 23.62123108]
[-43.90646362 14.87031269]
[-56.08929825 6.11939430]
[-71.81154633 4.35259771]
[-77.63459015 -9.35657310]
[-89.81742859 -18.10749054]
[-101.28137970 -8.31764317]
[-114.75539398 -1.55640280]
[-129.45610046 1.78313982]
[-144.52883911 1.50682831]
[-159.09727478 -2.36927319]
[-172.31442261 -9.61981297]
[-183.41186523 -19.82325363]
[-191.74440002 -32.38638306]
[-196.82760620 -46.57879257]
[-198.36592102 -61.57535934]
[-196.26994324 -76.50420380]
[-190.66149902 -90.49737549]
[-181.86666870 -102.74133301]
[-170.39678955 -112.52422333]
[-156.91867065 -119.27729797]
[-142.21594238 -122.60792542]
[-127.14338684 -122.32247925]
[-112.57730103 -118.43754578]
[-99.36454773 -111.17899323]
[-88.27329254 -100.96882629]
[-79.94837189 -88.40065002]
[-74.87377930 -74.20515442]
[-73.34455109 -59.20766068]
[-75.44958496 -44.28009415]
[-81.06650543 -30.29032516]
[-68.88367462 -21.53940582]
[-54.03282547 -20.39853287]
[-47.33837891 -6.06343889]
[-35.15554428 2.68747997]
[-22.97271156 11.43839836]
[-10.78987885 20.18931770]
[1.39295375 28.94023514]
[13.57578659 37.69115448]
[25.75861931 46.44207382]
[45.41343307 41.27651596]
[62.88564301 52.20512009]
[66.95290375 72.70027924]
[80.01045990 80.08270264]
[93.06801605 87.46512604]
[107.04969788 87.53095245]
[114.31440735 99.47731781]
[127.37196350 106.85974121]
[140.42951965 114.24216461]
[153.48707581 121.62458801]
[166.54463196 129.00701904]
[179.60218811 136.38943481]
[192.65974426 143.77186584]
[205.71730042 151.15428162]
[216.31092834 151.23474121]
[222.85693359 157.98333740]
[237.41354370 161.60340881]
[242.68522644 160.07101440]
[247.50282288 160.73869324]
[251.07798767 163.03533936]
[252.98059082 166.15348816]
[267.19537354 170.94300842]
[281.41018677 175.73254395]
[295.62496948 180.52206421]
[309.83978271 185.31158447]
[324.05456543 190.10110474]
[338.26937866 194.89062500]
[352.48416138 199.68014526]
[366.69897461 204.46968079]
[383.63958740 203.79730225]
[388.97531128 219.88973999]
[374.98883057 229.47177124]
[361.90945435 218.68447876]
[347.69464111 213.89494324]
[333.47985840 209.10542297]
[319.26504517 204.31590271]
[305.05026245 199.52638245]
[290.83544922 194.73686218]
[276.62066650 189.94734192]
[262.40585327 185.15780640]
[248.19107056 180.36828613]
[233.79347229 176.16001892]
[219.23686218 172.53994751]
[227.78663635 184.86477661]
[229.90473938 199.71447754]
[225.14170837 213.93817139]
[214.50822449 224.51782227]
[200.26052856 229.20857239]
[185.42176819 227.01510620]
[173.14050293 218.40287781]
[166.02264404 205.19923401]
[165.57849121 190.20581055]
[171.90226746 176.60398865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[10 67]
[11 66]
[12 65]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[27 54]
[28 53]
[78 105]
[79 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
