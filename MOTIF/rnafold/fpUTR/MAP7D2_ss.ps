%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCACGUGCACGCCCUGCGCGCGUGCUGCGUGAGGACGCGUGCGCAUGCGGACGCGCGCGGGUUCGGUGCGGCGCGGCGGGCUUGGCAGUGCGCCUGUGCGGCCGGCGCAUCCCG\
) } def
/len { sequence length } bind def

/coor [
[168.08508301 327.73602295]
[173.18859863 315.79940796]
[168.47744751 301.55844116]
[163.76629639 287.31747437]
[159.05514526 273.07650757]
[154.34399414 258.83557129]
[149.63284302 244.59458923]
[144.54425049 230.48408508]
[139.08184814 216.51405334]
[133.61944580 202.54400635]
[128.15702820 188.57395935]
[122.69462585 174.60391235]
[117.23221588 160.63388062]
[111.58432770 146.73777771]
[105.75196838 132.91810608]
[99.91960144 119.09842682]
[86.53629303 113.54565430]
[80.90241241 100.19628906]
[86.26071930 86.73394012]
[80.42835236 72.91426086]
[67.93404388 63.20844269]
[70.11384583 48.47420502]
[64.28147888 34.65452576]
[58.44911957 20.83484840]
[52.43331146 7.09402943]
[46.23513031 -6.56549215]
[40.03694534 -20.22501373]
[33.83876419 -33.88453674]
[27.64058113 -47.54405594]
[21.44239807 -61.20357895]
[15.24421597 -74.86309814]
[9.04603291 -88.52262115]
[-4.09458685 -91.81020355]
[-12.78415012 -101.94532013]
[-13.99088573 -115.04473114]
[-7.49492359 -126.25860596]
[-13.32728577 -140.07829285]
[-19.15964890 -153.89796448]
[-24.99201202 -167.71765137]
[-37.48632050 -177.42346191]
[-35.30652237 -192.15769958]
[-41.13888550 -205.97738647]
[-46.97124863 -219.79705811]
[-52.80361176 -233.61674500]
[-58.63597488 -247.43641663]
[-64.46833801 -261.25610352]
[-70.30069733 -275.07577515]
[-85.44281006 -278.46636963]
[-95.67479706 -290.13195801]
[-97.06226349 -305.58688354]
[-89.07170105 -318.88839722]
[-74.77562714 -324.92181396]
[-59.67119598 -321.36715698]
[-49.56635284 -309.59124756]
[-48.34662628 -294.12219238]
[-56.48101807 -280.90814209]
[-50.64865494 -267.08847046]
[-44.81629562 -253.26878357]
[-38.98393250 -239.44909668]
[-33.15156937 -225.62942505]
[-27.31920624 -211.80973816]
[-21.48684311 -197.99006653]
[-9.40970516 -189.27272034]
[-11.17233181 -173.55001831]
[-5.33996916 -159.73033142]
[0.49239364 -145.91064453]
[6.32475615 -132.09097290]
[22.11931801 -126.48555756]
[29.16795921 -110.91049957]
[22.70555496 -94.72080231]
[28.90373802 -81.06127930]
[35.10192108 -67.40176392]
[41.30010223 -53.74224091]
[47.49828720 -40.08271790]
[53.69646835 -26.42319679]
[59.89464951 -12.76367474]
[66.09283447 0.89584666]
[71.79505920 5.74870014]
[72.26879883 15.00248528]
[78.10115814 28.82216454]
[83.93352509 42.64184570]
[96.01065826 51.35918427]
[94.24803162 67.08189392]
[100.08039856 80.90157318]
[113.46370697 86.45434570]
[119.09758759 99.80371094]
[113.73928070 113.26605988]
[119.57164764 127.08573914]
[125.40400696 140.90542603]
[131.70344543 147.70056152]
[131.20225525 155.17146301]
[136.66467285 169.14151001]
[142.12707520 183.11155701]
[147.58947754 197.08158875]
[153.05189514 211.05163574]
[158.51429749 225.02168274]
[163.58673096 229.58062744]
[165.24487305 235.18614197]
[163.87380981 239.88343811]
[168.58496094 254.12440491]
[173.29611206 268.36535645]
[178.00726318 282.60632324]
[182.71841431 296.84729004]
[187.42955017 311.08825684]
[201.44987488 322.93399048]
[197.37915039 339.94784546]
[202.46772766 354.05834961]
[207.55630493 368.16885376]
[221.96482849 374.66268921]
[227.48313904 389.47229004]
[220.83732605 403.81134033]
[205.97023010 409.17279053]
[191.70223999 402.37573242]
[186.49829102 387.45278931]
[193.44580078 373.25744629]
[188.35722351 359.14694214]
[183.26864624 345.03643799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[14 89]
[15 88]
[16 87]
[19 84]
[20 83]
[22 81]
[23 80]
[24 79]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[36 67]
[37 66]
[38 65]
[39 64]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
