%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGUUGUGCGCUGUCCCAGGUUGGAAACCAGUGCCCCAGGCGGCGAGGAGAGCGGUGCCUUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[115.93444824 131.40960693]
[129.03585815 124.10726166]
[115.82691956 116.99922943]
[102.61798859 109.89120483]
[94.30772400 109.09240723]
[88.98641205 102.15637970]
[76.10968018 94.46289062]
[63.23294830 86.76940155]
[44.97510910 87.05886078]
[36.77038574 71.70689392]
[23.56145096 64.59886169]
[10.35251808 57.49083328]
[-2.85641479 50.38280487]
[-16.06534767 43.27477264]
[-29.27428055 36.16674423]
[-42.93144226 29.96336555]
[-56.97496796 24.69274330]
[-71.01849365 19.42212105]
[-85.30248260 26.18549347]
[-100.15689087 20.78901100]
[-106.76886749 6.43431425]
[-101.21563721 -8.36221218]
[-86.79183197 -14.82205105]
[-72.05484772 -9.11269379]
[-65.74787140 5.37859774]
[-51.70434570 10.64922047]
[-37.66082001 15.91984272]
[-34.06893539 14.55139160]
[-29.58821678 15.07753944]
[-25.23181915 17.91596985]
[-22.16625023 22.95780945]
[-8.95731831 30.06583977]
[4.25161505 37.17387009]
[17.46054840 44.28189850]
[30.66948128 51.38993073]
[43.87841415 58.49795914]
[55.76261139 55.32342148]
[66.91629028 61.40958023]
[70.92643738 73.89266968]
[83.80316925 81.58615875]
[96.67990112 89.27964783]
[109.72602081 96.68226624]
[122.93495178 103.79029846]
[136.14389038 110.89833069]
[150.18740845 116.16895294]
[164.81132507 119.50676727]
[179.43524170 122.84458160]
[194.05915833 126.18239594]
[208.68309021 129.52020264]
[223.30700684 132.85801697]
[234.25428772 121.98785400]
[249.34535217 118.78418732]
[263.76467896 124.26929474]
[272.91113281 136.69290161]
[273.86608887 152.09068298]
[266.32485962 165.54925537]
[252.69378662 172.77404785]
[237.32250977 171.45964050]
[225.11596680 162.02546692]
[219.96919250 147.48193359]
[205.34527588 144.14411926]
[190.72134399 140.80630493]
[176.09742737 137.46849060]
[161.47351074 134.13067627]
[146.84959412 130.79287720]
[151.91136169 144.91300964]
[145.87977600 158.64691162]
[132.05778503 164.47380066]
[118.01439667 159.20281982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[6 41]
[7 40]
[8 39]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 27]
[17 26]
[18 25]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
