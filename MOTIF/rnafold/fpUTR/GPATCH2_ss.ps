%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAUCCGGUUUCCGCCGCCUGUCGGCUUCCGGAAGCUCAUCUCAAAAUGCUGAACUGCUCUUUGGAAGUCGCCGGUGCUGUUGUAGUUGGAGUCUGUUCACGGGCCUGAGCUUCGAGGCCAGGCUCCCGGGUGUCGUUA\
) } def
/len { sequence length } bind def

/coor [
[104.73438263 277.64941406]
[115.33119202 265.92407227]
[114.33634949 250.95710754]
[113.34150696 235.99014282]
[112.34666443 221.02316284]
[111.35181427 206.05618286]
[110.35697174 191.08921814]
[109.36212921 176.12223816]
[108.36728668 161.15527344]
[107.37243652 146.18829346]
[90.71309662 145.04920959]
[75.79283905 138.19505310]
[64.46720123 126.69542694]
[58.06681442 112.18265533]
[57.24269867 96.62192535]
[61.90489197 82.04573059]
[49.69208908 73.33668518]
[33.96387100 71.62387848]
[28.09379196 57.93477631]
[15.88098812 49.22573471]
[3.57259536 40.65231705]
[-8.82988167 32.21557999]
[-21.23235893 23.77884102]
[-36.99461746 22.41438866]
[-43.16609192 8.85849762]
[-55.56856918 0.42175871]
[-67.97104645 -8.01498032]
[-80.37351990 -16.45171928]
[-92.77600098 -24.88846016]
[-105.17847443 -33.32519913]
[-117.58095551 -41.76193619]
[-129.98342896 -50.19867706]
[-142.38591003 -58.63541794]
[-154.78837585 -67.07215881]
[-167.19085693 -75.50889587]
[-179.68589783 -83.80792236]
[-192.27198792 -91.96823120]
[-204.85806274 -100.12854004]
[-215.91535950 -94.10646820]
[-228.41339111 -93.39321899]
[-239.94964600 -98.06383514]
[-248.33302307 -107.16437531]
[-251.99992371 -118.90602875]
[-250.30561829 -131.01652527]
[-262.51843262 -139.72557068]
[-274.73123169 -148.43461609]
[-290.27508545 -145.57737732]
[-303.23904419 -154.61683655]
[-305.93176270 -170.19003296]
[-296.75576782 -183.05767822]
[-281.15493774 -185.58561707]
[-268.38504028 -176.27407837]
[-266.02218628 -160.64741516]
[-253.80937195 -151.93836975]
[-241.59657288 -143.22932434]
[-225.20103455 -149.62065125]
[-208.08476257 -144.90696716]
[-197.08090210 -130.77645874]
[-196.69775391 -112.71461487]
[-184.11167908 -104.55431366]
[-171.52558899 -96.39400482]
[-164.14366150 -95.38645172]
[-158.75411987 -87.91136932]
[-146.35163879 -79.47463226]
[-133.94917297 -71.03789520]
[-121.54669189 -62.60115433]
[-109.14421082 -54.16441345]
[-96.74173737 -45.72767639]
[-84.33925629 -37.29093552]
[-71.93678284 -28.85419655]
[-59.53430557 -20.41745758]
[-47.13182831 -11.98071766]
[-34.72935104 -3.54397869]
[-19.85420036 -2.78297949]
[-12.79561901 11.37636375]
[-0.39314210 19.81310272]
[12.00933456 28.24984169]
[19.36717224 29.42045212]
[24.59003258 37.01293182]
[36.80283356 45.72197342]
[51.65751266 46.81185532]
[58.40113068 61.12388611]
[70.61393738 69.83293152]
[78.72782898 63.65322876]
[88.08937073 59.60532379]
[98.14949036 57.92662811]
[108.31813812 58.71560287]
[117.99891663 61.92596817]
[126.62403870 67.36943817]
[133.68760681 74.72673798]
[147.09761047 68.00573730]
[160.50761414 61.28473282]
[173.91761780 54.56373215]
[180.32051086 39.85378647]
[195.85012817 35.82758331]
[208.59349060 45.57368088]
[208.77496338 61.61570740]
[196.25535583 71.64759064]
[180.63861084 67.97373199]
[167.22862244 74.69473267]
[153.81861877 81.41573334]
[140.40861511 88.13674164]
[144.15829468 105.02700806]
[140.76905823 122.92586517]
[154.46322632 129.04711914]
[168.15739441 135.16838074]
[181.85156250 141.28962708]
[195.54573059 147.41088867]
[209.23989868 153.53213501]
[222.93406677 159.65339661]
[232.12588501 160.31251526]
[236.86112976 166.06451416]
[250.41653442 172.48721313]
[263.97192383 178.90992737]
[280.26440430 177.04248047]
[289.80917358 190.37776184]
[282.78738403 205.19755554]
[266.42245483 206.25654602]
[257.54922485 192.46531677]
[243.99383545 186.04261780]
[230.43843079 179.61991882]
[216.81282043 173.34756470]
[203.11865234 167.22630310]
[189.42448425 161.10505676]
[175.73031616 154.98379517]
[162.03614807 148.86254883]
[148.34197998 142.74128723]
[134.64781189 136.62004089]
[122.33940887 145.19345093]
[123.33425903 160.16043091]
[124.32910156 175.12739563]
[125.32394409 190.09437561]
[126.31878662 205.06134033]
[127.31363678 220.02832031]
[128.30847168 234.99528503]
[129.30332947 249.96226501]
[130.29817200 264.92922974]
[142.35365295 275.14886475]
[143.56849670 290.90640259]
[133.22196960 302.85314941]
[117.45248413 303.90133667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[16 83]
[17 82]
[19 80]
[20 79]
[21 77]
[22 76]
[23 75]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 61]
[37 60]
[38 59]
[44 55]
[45 54]
[46 53]
[90 102]
[91 101]
[92 100]
[93 99]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
