%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAGAAAGAGAGCGAUAGAGUGCGAGAGCGAGUGCCCGGAGCAUCCUGGCCCUGAGACAGCUGGGCCAGCCCCGCAGGGCUCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[-4.23630285 302.54476929]
[-8.44254112 317.01556396]
[-15.87312222 330.12597656]
[-26.12732506 341.16900635]
[-38.65215302 349.54907227]
[-52.77215958 354.81423950]
[-67.72586823 356.68060303]
[-82.70684814 355.04748535]
[-96.90718842 350.00299072]
[-109.56108093 341.81912231]
[-119.98612976 330.93725586]
[-127.62010956 317.94421387]
[-132.05134583 303.54071045]
[-133.04084778 288.50350952]
[-130.53526306 273.64352417]
[-124.66973114 259.76217651]
[-115.76054382 247.60803223]
[-104.28817749 237.83656311]
[-90.87132263 230.97474670]
[-76.23352814 227.39260864]
[-61.16419220 227.28332520]
[-46.47599411 230.65281677]
[-32.96104050 237.31936646]
[-23.40766144 225.75506592]
[-13.85428429 214.19076538]
[-11.98191929 206.87297058]
[-3.76608634 202.39962769]
[6.18075323 191.17196655]
[16.12759399 179.94430542]
[26.07443237 168.71664429]
[36.02127457 157.48898315]
[33.45599365 144.73512268]
[38.84647751 132.68026733]
[50.39999008 125.89015198]
[63.94482422 127.08009338]
[74.27326965 116.20245361]
[84.60172272 105.32480621]
[85.03711700 93.55231476]
[93.29500580 85.15063477]
[105.05822754 84.51210785]
[115.75598145 73.99744415]
[119.79806519 65.56107330]
[127.00913239 63.31244278]
[138.06343079 53.17328644]
[139.30992126 48.48781586]
[141.83291626 44.91492844]
[145.07501221 42.73455048]
[148.44613647 41.99613190]
[151.40908813 42.53047943]
[163.75384521 34.00951004]
[176.09860229 25.48853874]
[188.44335938 16.96756744]
[200.78811646 8.44659615]
[213.13287354 -0.07437472]
[211.81704712 -15.37679768]
[218.34323120 -29.28019142]
[230.95594788 -38.04461670]
[246.26242065 -39.31248093]
[260.14529419 -32.74274063]
[268.87011719 -20.10261917]
[270.09002686 -4.79224825]
[263.47677612 9.06996059]
[250.80938721 17.75514221]
[235.49525452 18.92702675]
[221.65385437 12.27038288]
[209.30909729 20.79135513]
[196.96434021 29.31232643]
[184.61958313 37.83329773]
[172.27481079 46.35426712]
[159.93005371 54.87524033]
[148.20259094 64.22758484]
[137.14828491 74.36673737]
[126.27064514 84.69519043]
[115.57289886 95.20985413]
[111.61986542 111.42099762]
[95.47936249 115.65325928]
[85.15091705 126.53089905]
[74.82247162 137.40853882]
[75.65064240 154.77879333]
[63.96755219 167.20384216]
[47.24893570 167.43582153]
[37.30209351 178.66348267]
[27.35525513 189.89114380]
[17.40841484 201.11880493]
[7.46157455 212.34646606]
[-2.28998661 223.74414062]
[-11.84336376 235.30844116]
[-21.39674187 246.87274170]
[-12.29923630 258.88656616]
[-6.21808815 272.67483521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 88]
[24 87]
[25 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[35 78]
[36 77]
[37 76]
[40 74]
[41 73]
[43 72]
[44 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
