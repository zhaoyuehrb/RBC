%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACGUCCCUGCGCGUCGUCCUCCUCGCCCUCCAGGCCGCCCGCGCCGCGCCGGAGUCCGCUGUCCGCCAGCUACCCGCUUCCUGCCGCCCGCCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[81.69394684 121.43831635]
[75.69034576 110.71960449]
[75.06819153 99.16640472]
[60.92087173 94.18108368]
[46.77355576 89.19576263]
[37.46109772 89.27850342]
[32.27138519 83.83293915]
[18.28430176 78.41431427]
[4.29721832 72.99568939]
[-7.91008234 77.49927521]
[-19.51374054 72.56711578]
[-24.41743660 61.39030838]
[-38.23101807 55.54352188]
[-52.04460144 49.69673157]
[-65.85818481 43.84994507]
[-79.67176819 38.00315857]
[-95.39631653 39.74936676]
[-104.10103607 27.66313362]
[-117.91461945 21.81634521]
[-131.72821045 15.96955776]
[-141.14207458 25.50510979]
[-153.23052979 31.21071434]
[-166.51144409 32.41131973]
[-179.36485291 28.98271751]
[-190.23060608 21.36401367]
[-197.79766846 10.50149822]
[-201.16235352 -2.26882434]
[-199.93618774 -15.38555145]
[-213.36364746 -22.07162666]
[-226.79109192 -28.75770187]
[-242.39820862 -25.04320908]
[-254.94389343 -35.04247284]
[-254.80416870 -51.08491898]
[-242.08622742 -60.86415100]
[-226.54617310 -56.87838364]
[-220.10501099 -42.18515015]
[-206.67756653 -35.49907684]
[-193.25012207 -28.81300163]
[-180.35609436 -39.49991226]
[-164.05541992 -43.57247925]
[-147.54322815 -40.18375015]
[-134.07722473 -29.95406151]
[-126.33493805 -14.85814095]
[-125.88141632 2.15597510]
[-112.06783295 8.00276375]
[-98.25424957 13.84955120]
[-83.51774597 11.68513966]
[-73.82498169 24.18957520]
[-60.01139832 30.03636169]
[-46.19781494 35.88315201]
[-32.38423157 41.72993851]
[-18.57064819 47.57672501]
[-1.38423121 44.41775894]
[9.71584320 59.00860596]
[23.70292664 64.42723083]
[37.69001007 69.84585571]
[51.75887680 75.04844666]
[65.90619659 80.03376770]
[80.05351257 85.01908875]
[102.08677673 71.07328796]
[129.00885010 84.14691925]
[141.51287842 75.86144257]
[154.01692200 67.57596588]
[166.52095032 59.29049301]
[171.10766602 43.91708755]
[186.04013062 38.05183792]
[199.86343384 46.19406128]
[201.97352600 62.09774399]
[190.75172424 73.56293488]
[174.80642700 71.79452515]
[162.30238342 80.08000183]
[149.79835510 88.36547852]
[137.29432678 96.65095520]
[152.23991394 95.37451935]
[167.18550110 94.09808350]
[181.42970276 89.39672852]
[196.10792542 92.48699951]
[207.24740601 102.53248596]
[211.83319092 116.81431580]
[208.62406921 131.46702576]
[198.48864746 142.52473450]
[184.17012024 146.99462891]
[169.54389954 143.66687012]
[158.56892395 133.44256592]
[145.52487183 126.03630066]
[132.48081970 118.63004303]
[140.37730408 131.38330078]
[154.22055054 139.04327393]
[154.34220886 153.93737793]
[162.23869324 166.69064331]
[177.46356201 171.74859619]
[182.86618042 186.85459900]
[174.30212402 200.42060852]
[158.34100342 202.03994751]
[147.22682190 190.47039795]
[149.48542786 174.58712769]
[141.58894348 161.83386230]
[128.31051636 155.08609009]
[127.62405396 139.27978516]
[119.72756958 126.52651978]
[105.95904541 130.86560059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 59]
[4 58]
[5 57]
[7 56]
[8 55]
[9 54]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[18 46]
[19 45]
[20 44]
[28 38]
[29 37]
[30 36]
[61 73]
[62 72]
[63 71]
[64 70]
[86 100]
[87 99]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
