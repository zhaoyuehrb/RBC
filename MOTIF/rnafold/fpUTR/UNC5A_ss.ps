%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGCUGCGCUCCCGUGCCCAAGGGAGCCACGCGCCGCGUGCGCCCGGCAGCCGGCCGCCCGGAGGCAGCGCAGUCCGCUGGCAUGGGCCCCGGGGGCGCCCCGAGCUGGGGCUCCGGGCUGAGGCGCUAAAGCCGCCCUCCCGCCCGCGGGGCCCCGCGCCCGGCCCGCCCGCCUGCCCGCCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[19.99268532 306.92852783]
[16.05104637 321.40139771]
[3.80743742 330.06707764]
[-11.15255547 328.97225952]
[-22.00411797 318.61642456]
[-23.79644775 303.72271729]
[-33.08045959 315.50436401]
[-42.26827621 327.36117554]
[-51.35929108 339.29238892]
[-54.07730865 348.02932739]
[-60.69666290 351.34219360]
[-69.98067474 363.12384033]
[-79.26468658 374.90548706]
[-88.54869843 386.68713379]
[-97.83271027 398.46878052]
[-107.11672211 410.25039673]
[-102.77227783 425.14691162]
[-108.04516602 439.74060059]
[-120.90784454 448.41995239]
[-136.41435242 447.84756470]
[-148.60212708 438.24349976]
[-152.78472900 423.30075073]
[-147.35383606 408.76510620]
[-134.39775085 400.22579956]
[-118.89836884 400.96640015]
[-109.61434937 389.18475342]
[-100.33033752 377.40310669]
[-91.04632568 365.62145996]
[-81.76231384 353.83981323]
[-72.47830200 342.05816650]
[-63.29048920 330.20135498]
[-54.19947433 318.27017212]
[-52.64391327 311.03338623]
[-44.86210251 306.22036743]
[-35.57809067 294.43872070]
[-26.98000145 282.14755249]
[-19.09573364 269.38671875]
[-11.21146584 256.62591553]
[-3.32719851 243.86511230]
[4.55706882 231.10429382]
[12.44133663 218.34349060]
[12.54873466 203.44926453]
[26.38463402 195.77603149]
[34.26890182 183.01522827]
[42.15316772 170.25440979]
[41.69452667 166.74398804]
[42.92295456 162.83692932]
[46.00624084 159.33297729]
[50.74670029 157.07638550]
[59.24447250 144.71565247]
[67.74224091 132.35490417]
[76.24001312 119.99416351]
[84.73778534 107.63342285]
[84.00557709 92.65130615]
[74.34299469 81.17810059]
[64.68041992 69.70488739]
[55.01783752 58.23167801]
[42.24737930 56.35174179]
[34.43599701 46.58399200]
[35.35023117 34.51250458]
[25.87568092 22.88353729]
[16.40112877 11.25457001]
[6.92657757 -0.37439650]
[-2.54797411 -12.00336361]
[-16.22441101 -10.21939182]
[-28.89442253 -15.38879395]
[-37.28545380 -26.06073952]
[-39.28752518 -39.37850571]
[-34.48298645 -51.84375381]
[-43.76699829 -63.62539673]
[-53.05101013 -75.40704346]
[-62.33502197 -87.18868256]
[-71.61903381 -98.97032928]
[-87.31709290 -102.27949524]
[-94.38840485 -116.68005371]
[-87.40847015 -131.12512207]
[-71.73169708 -134.53369141]
[-59.38396072 -124.29098511]
[-59.83739090 -108.25434113]
[-50.55337906 -96.47269440]
[-41.26936722 -84.69105530]
[-31.98535538 -72.90940857]
[-22.70134163 -61.12776566]
[-6.33420610 -62.29674149]
[7.64758587 -53.39517593]
[13.63308239 -37.76072311]
[9.08099270 -21.47791481]
[18.55554390 -9.84894848]
[28.03009605 1.78001869]
[37.50464630 13.40898609]
[46.97919846 25.03795242]
[63.68973923 30.37634659]
[66.49104309 48.56909943]
[76.15362549 60.04230881]
[85.81620789 71.51551819]
[95.47879028 82.98872375]
[109.87430573 87.20406342]
[124.19930267 82.75496674]
[138.52430725 78.30587006]
[152.84930420 73.85678101]
[167.17430115 69.40768433]
[174.57502747 55.70123291]
[189.16600037 51.39328003]
[202.18739319 58.53322220]
[216.51239014 54.08412933]
[230.83738708 49.63503265]
[241.72161865 38.15269470]
[256.17108154 41.76682281]
[270.49609375 37.31772995]
[284.78439331 32.75219345]
[299.03509521 28.07052040]
[313.28576660 23.38884735]
[327.53643799 18.70717430]
[341.78713989 14.02550030]
[356.03781128 9.34382725]
[370.28848267 4.66215372]
[384.53918457 -0.01951951]
[398.78985596 -4.70119286]
[412.96246338 -9.61420345]
[427.05319214 -14.75725079]
[441.14395142 -19.90029716]
[455.23468018 -25.04334450]
[466.71807861 -39.42927933]
[483.86907959 -35.74371338]
[497.87423706 -41.11543274]
[511.87942505 -46.48715210]
[525.88458252 -51.85887146]
[532.78912354 -57.86293030]
[540.16168213 -57.20201111]
[554.25244141 -62.34505844]
[559.41705322 -77.10515594]
[572.88732910 -85.04778290]
[588.30303955 -82.42268372]
[598.38525391 -70.46934509]
[598.37353516 -54.83176804]
[588.27343750 -42.89353561]
[572.85382080 -40.29151917]
[559.39544678 -48.25431442]
[545.30474854 -43.11126709]
[531.25628662 -37.85371017]
[517.25115967 -32.48198700]
[503.24597168 -27.11026955]
[489.24081421 -21.73854828]
[484.02642822 -10.81303024]
[472.39010620 -6.22801495]
[460.37774658 -10.95259953]
[446.28698730 -5.80955315]
[432.19622803 -0.66650623]
[418.10549927 4.47654057]
[415.30960083 8.36548424]
[410.03454590 10.53074646]
[403.47152710 9.54948902]
[389.22085571 14.23116207]
[374.97018433 18.91283607]
[360.71948242 23.59450912]
[346.46881104 28.27618217]
[332.21813965 32.95785522]
[317.96743774 37.63953018]
[303.71676636 42.32120132]
[289.46606445 47.00287628]
[284.08444214 52.08509827]
[274.94519043 51.64272690]
[260.62017822 56.09181976]
[250.76057434 67.25592804]
[235.28648376 63.96002960]
[220.96148682 68.40912628]
[206.63648987 72.85822296]
[199.95112610 86.11874390]
[185.48692322 90.83482361]
[171.62339783 83.73268127]
[157.29838562 88.18177795]
[142.97338867 92.63087463]
[128.64839172 97.07996368]
[114.32340240 101.52906036]
[111.95931244 109.16381836]
[105.68035126 114.66673279]
[97.09852600 116.13119507]
[88.60075378 128.49192810]
[80.10298157 140.85267639]
[71.60520935 153.21340942]
[63.10744095 165.57415771]
[54.91398239 178.13867188]
[47.02971268 190.89949036]
[39.14544678 203.66030884]
[38.47411346 219.46725464]
[25.20214844 226.22775269]
[17.31788063 238.98855591]
[9.43361378 251.74937439]
[1.54934621 264.51019287]
[-6.33492136 277.27099609]
[-14.21918869 290.03179932]
[0.38501403 286.60876465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 32]
[9 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[36 191]
[37 190]
[38 189]
[39 188]
[40 187]
[41 186]
[43 184]
[44 183]
[45 182]
[49 181]
[50 180]
[51 179]
[52 178]
[53 177]
[54 96]
[55 95]
[56 94]
[57 93]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[97 174]
[98 173]
[99 172]
[100 171]
[101 170]
[104 167]
[105 166]
[106 165]
[108 163]
[109 162]
[110 160]
[111 159]
[112 158]
[113 157]
[114 156]
[115 155]
[116 154]
[117 153]
[118 152]
[119 149]
[120 148]
[121 147]
[122 146]
[124 143]
[125 142]
[126 141]
[127 140]
[129 139]
[130 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
