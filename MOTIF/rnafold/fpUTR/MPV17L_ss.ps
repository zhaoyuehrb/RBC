%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGCUCCGGAGCUUCUGGAGGGGGCAGAUGCAGGUGCCGGCUGCUGCAGUGCAGUAGCUGCUGGAGGCUGGGGAGGCCCGGACCCGGUGCAGGAAGACGCCGACCACGCGGGCUCCUGAUCGCGGGCGCCCACAGCGCGGAC\
) } def
/len { sequence length } bind def

/coor [
[104.14070892 131.07408142]
[105.73746490 116.15930939]
[98.25330353 115.67216492]
[89.70149994 127.99558258]
[88.19039917 143.74446106]
[74.57765961 149.78950500]
[66.02585602 162.11291504]
[57.47404861 174.43632507]
[48.92224121 186.75975037]
[40.37043762 199.08316040]
[31.81863213 211.40658569]
[23.26682663 223.72999573]
[19.20405197 240.18995667]
[2.26266742 240.84252930]
[-3.05424166 224.74386597]
[10.94340801 215.17819214]
[19.49521446 202.85478210]
[28.04701996 190.53135681]
[36.59882355 178.20794678]
[45.15063095 165.88452148]
[53.70243835 153.56111145]
[62.25424194 141.23768616]
[63.15365601 126.37026978]
[77.37808228 119.44377136]
[85.92988586 107.12035370]
[91.33068085 93.12638092]
[93.27514648 78.25294495]
[91.27571106 69.26229858]
[95.42623901 63.07967758]
[97.69247437 48.25186157]
[99.95870972 33.42404175]
[98.15451813 24.39218903]
[102.43801117 18.30093956]
[105.02495575 3.52569890]
[107.61189270 -11.24954224]
[110.19883728 -26.02478218]
[104.95748138 -40.95256805]
[114.77382660 -52.15473938]
[117.36077118 -66.92998505]
[119.94770813 -81.70522308]
[114.39563751 -95.63987732]
[102.35660553 -104.58759308]
[90.31757355 -113.53531647]
[78.27854156 -122.48303986]
[66.23950958 -131.43075562]
[54.20047760 -140.37847900]
[42.16144562 -149.32620239]
[30.12241173 -158.27392578]
[18.08337975 -167.22164917]
[1.76412821 -171.81710815]
[1.66238773 -188.77075195]
[17.92531013 -193.56175232]
[27.03110123 -179.26068115]
[39.07013321 -170.31295776]
[51.10916519 -161.36523438]
[63.14819717 -152.41751099]
[75.18722534 -143.46978760]
[87.22625732 -134.52206421]
[99.26528931 -125.57434845]
[111.30432129 -116.62662506]
[123.34335327 -107.67890930]
[138.14575195 -110.10563660]
[146.69755554 -122.42905426]
[155.11537170 -134.84439087]
[163.39817810 -147.35018921]
[171.68099976 -159.85597229]
[165.62614441 -179.00393677]
[180.41784668 -197.70204163]
[183.32427979 -212.41777039]
[186.07112122 -227.16412354]
[188.65806580 -241.93936157]
[191.24501038 -256.71459961]
[193.83193970 -271.48983765]
[196.41888428 -286.26507568]
[190.28633118 -301.47442627]
[200.60345459 -314.22152710]
[216.75688171 -311.39331055]
[222.12934875 -295.89913940]
[211.19412231 -283.67813110]
[208.60719299 -268.90289307]
[206.02024841 -254.12767029]
[203.43330383 -239.35241699]
[200.84637451 -224.57717896]
[202.80551147 -217.39292908]
[198.04000854 -209.51133728]
[195.13357544 -194.79560852]
[207.54891968 -186.37780762]
[220.14370728 -194.52465820]
[232.73849487 -202.67152405]
[245.33328247 -210.81838989]
[257.92807007 -218.96524048]
[258.63363647 -234.46626282]
[268.34204102 -246.57109070]
[283.32015991 -250.62516785]
[297.80862427 -245.06962585]
[306.23629761 -232.04067993]
[305.36260986 -216.54821777]
[295.52349854 -204.54942322]
[280.50225830 -200.65806580]
[266.07492065 -206.37045288]
[253.48013306 -198.22358704]
[240.88534546 -190.07673645]
[228.29055786 -181.92987061]
[215.69577026 -173.78302002]
[203.99104309 -153.29411316]
[184.18679810 -151.57316589]
[175.90397644 -139.06736755]
[167.62115479 -126.56156921]
[166.54200745 -119.19358826]
[159.02098083 -113.87725067]
[150.46917725 -101.55383301]
[146.89950562 -86.63748169]
[134.72294617 -79.11828613]
[132.13600159 -64.34304047]
[129.54907227 -49.56780243]
[134.97544861 -35.69683838]
[124.97407532 -23.43784332]
[122.38713837 -8.66260242]
[119.80019379 6.11263895]
[117.21325684 20.88788033]
[114.78652191 35.69027710]
[112.52028656 50.51809692]
[110.25405121 65.34591675]
[108.14858246 80.19741058]
[106.20411682 95.07084656]
[118.30007172 93.04450226]
[131.18347168 98.28138733]
[141.51797485 110.73859406]
[148.40011597 124.06661224]
[155.28227234 137.39462280]
[162.16441345 150.72264099]
[176.95046997 156.94776917]
[181.16357422 172.42773438]
[171.57177734 185.28764343]
[155.53311157 185.66246033]
[145.35104370 173.26467896]
[148.83639526 157.60479736]
[141.95425415 144.27677917]
[135.07209778 130.94876099]
[128.18995667 117.62074280]
[120.70578766 117.13359833]
[120.35565186 132.12951660]
[123.52639008 146.79055786]
[110.74863434 154.64733887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[26 125]
[27 124]
[29 123]
[30 122]
[31 121]
[33 120]
[34 119]
[35 118]
[36 117]
[38 115]
[39 114]
[40 113]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[62 111]
[63 110]
[64 108]
[65 107]
[66 106]
[68 86]
[69 85]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
