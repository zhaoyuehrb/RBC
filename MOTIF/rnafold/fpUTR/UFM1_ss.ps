%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGUUGGAUAGCAACAACUUCGGAGGUCCCCAGAUUGCAGAGGGAGACGUGGACGUGAGUGGAGCGGGGCGGUCCCCAGCACACUAGAGGAAGUCGUGCUACCCCCGCGGAGUUGUCGUGUGUUCUGGAUUCAUUCCGGCACCACC\
) } def
/len { sequence length } bind def

/coor [
[157.51251221 277.10140991]
[155.63281250 262.22009277]
[148.19194031 263.16009521]
[142.37921143 276.98806763]
[136.56648254 290.81600952]
[144.71961975 304.01849365]
[143.52186584 319.48925781]
[133.43374634 331.27951050]
[118.33438110 334.85562134]
[104.02976227 328.84249878]
[96.02030945 315.55233765]
[97.38583374 300.09545898]
[107.60124969 288.41537476]
[122.73853302 285.00326538]
[128.55126953 271.17532349]
[134.36399841 257.34738159]
[135.14903259 242.36793518]
[130.81355286 228.00813293]
[126.47808075 213.64834595]
[122.14260864 199.28855896]
[117.80712891 184.92875671]
[113.47164917 170.56896973]
[109.13617706 156.20916748]
[104.80069733 141.84938049]
[100.46521759 127.48958588]
[87.53713226 129.17013550]
[73.60717773 124.40709686]
[61.93548203 112.85264587]
[55.79719925 95.78536224]
[40.87936783 94.21743011]
[25.96154022 92.64950562]
[11.02811146 91.23788452]
[-3.91928172 89.98271179]
[-18.86667442 88.72754669]
[-27.56619644 101.38510895]
[-41.43588638 107.98262787]
[-56.74486542 106.74541473]
[-69.37509918 98.00625610]
[-75.92911530 84.11595917]
[-74.64391327 68.81092834]
[-65.86521149 56.20815277]
[-51.95443726 49.69771194]
[-36.65351105 51.03087616]
[-24.07831573 59.84903717]
[-17.61150742 73.78015137]
[-2.66411424 75.03532410]
[12.28327847 76.29048920]
[19.25798607 73.69892883]
[27.52946663 77.73167419]
[42.44729614 79.29960632]
[57.36512375 80.86753082]
[61.51556015 74.62062073]
[47.06817245 70.58664703]
[46.44041061 55.59978485]
[60.49983597 50.37173080]
[69.81643677 62.12680435]
[73.96687317 55.87989426]
[66.74056244 42.73529434]
[59.51425934 29.59069443]
[44.14037704 26.73102760]
[34.24142075 14.62546158]
[34.49137878 -1.01012361]
[44.77222824 -12.79308414]
[60.22966766 -15.15986633]
[73.56516266 -6.99294710]
[78.48210144 7.85150290]
[72.65885925 22.36438942]
[79.88516235 35.50898743]
[87.11147308 48.65359116]
[102.09091187 49.43862915]
[110.65161896 37.12139130]
[119.21231842 24.80415154]
[121.56430817 15.90760231]
[128.08352661 12.32116032]
[136.90029907 0.18590532]
[145.71708679 -11.94934940]
[146.01490784 -16.43313980]
[147.59970093 -20.18597603]
[150.07121277 -22.88624001]
[152.96501160 -24.38040543]
[155.81462097 -24.68928146]
[165.61593628 -36.04420853]
[175.41723633 -47.39913177]
[185.21855164 -58.75405884]
[195.01986694 -70.10898590]
[204.70172119 -81.56592560]
[214.26309204 -93.12362671]
[223.82444763 -104.68132019]
[222.08779907 -120.38990784]
[232.03251648 -132.67314148]
[247.75859070 -134.24362183]
[259.93600464 -124.16958618]
[261.34011841 -108.42779541]
[251.13790894 -96.35756683]
[235.38214111 -95.11996460]
[225.82078552 -83.56226349]
[216.25942993 -72.00456238]
[214.40692139 -64.79825592]
[206.37478638 -60.30767441]
[196.57347107 -48.95275116]
[186.77217102 -37.59782410]
[176.97085571 -26.24289894]
[167.16955566 -14.88797283]
[157.85234070 -3.13257074]
[149.03555298 9.00268364]
[140.21878052 21.13793945]
[131.52955627 33.36485672]
[122.96885681 45.68209457]
[114.40814972 57.99933243]
[135.69194031 95.71362305]
[114.82501221 123.15411377]
[119.16049194 137.51390076]
[123.49596405 151.87370300]
[127.83144379 166.23348999]
[132.16691589 180.59327698]
[136.50239563 194.95307922]
[140.83787537 209.31286621]
[145.17335510 223.67265320]
[149.50883484 238.03245544]
[168.72938538 234.11677551]
[189.90333557 250.33111572]
[198.97232056 262.27908325]
[208.04130554 274.22702026]
[215.77561951 279.21307373]
[217.17198181 286.52148438]
[225.98876953 298.65673828]
[240.35990906 305.27343750]
[241.58120728 320.11788940]
[250.39797974 332.25314331]
[259.21475220 344.38839722]
[268.03155518 356.52365112]
[276.84832764 368.65890503]
[292.40515137 372.57867432]
[298.90863037 387.24441528]
[291.36987305 401.40585327]
[275.57192993 404.19955444]
[263.63363647 393.48239136]
[264.71307373 377.47570801]
[255.89628601 365.34045410]
[247.07951355 353.20520020]
[238.26272583 341.06994629]
[229.44595337 328.93466187]
[215.70544434 323.18597412]
[213.85351562 307.47351074]
[205.03672791 295.33825684]
[196.09335327 283.29602051]
[187.02436829 271.34805298]
[177.95538330 259.40011597]
[170.51452637 260.34011841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[17 119]
[18 118]
[19 117]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[29 51]
[30 50]
[31 49]
[32 47]
[33 46]
[34 45]
[57 69]
[58 68]
[59 67]
[70 109]
[71 108]
[72 107]
[74 106]
[75 105]
[76 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 97]
[87 96]
[88 95]
[121 148]
[122 147]
[123 146]
[125 145]
[126 144]
[128 142]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
