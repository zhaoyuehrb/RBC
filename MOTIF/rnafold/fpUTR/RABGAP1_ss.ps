%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGACAGGGCGGUUUGGGAGGCCCAGGCGGCGGAGCCUCCGGGACGGCGAGCGGCGGGCGGCGGAGGAGGAGACGGCAGGUCGGGCAUUAAAAAAUAUUUAAUCAUUCAUGUGUUGAGACUCAUUCUUGAGUU\
) } def
/len { sequence length } bind def

/coor [
[141.10861206 121.40367889]
[146.55917358 135.37835693]
[145.63688660 150.34997559]
[138.51231384 163.54998779]
[126.50292969 172.53746033]
[111.82950592 175.65043640]
[97.20544434 172.31326294]
[85.33501434 163.14305115]
[78.41329956 149.83552551]
[77.72017670 134.85202026]
[63.01266861 137.79977417]
[51.00209808 148.09815979]
[37.00249481 143.01286316]
[22.29498672 145.96060181]
[7.58748007 148.90835571]
[-7.12002754 151.85610962]
[-19.13059616 162.15449524]
[-33.13019943 157.06918335]
[-47.83770752 160.01693726]
[-62.54521561 162.96469116]
[-77.25272369 165.91242981]
[-91.96022797 168.86018372]
[-106.66773987 171.80793762]
[-121.33995056 174.92660522]
[-135.97488403 178.21578979]
[-142.99392700 192.18959045]
[-157.37339783 198.33488464]
[-172.32376099 193.75004578]
[-180.78591919 180.59991455]
[-178.76426697 165.09355164]
[-167.21340942 154.55261230]
[-151.58728027 153.95419312]
[-139.26406860 163.58085632]
[-124.62912750 160.29167175]
[-118.73901367 155.71386719]
[-109.61548615 157.10041809]
[-94.90798187 154.15267944]
[-80.20046997 151.20492554]
[-65.49296570 148.25717163]
[-50.78545761 145.30943298]
[-36.07794952 142.36167908]
[-25.11935997 132.27413940]
[-10.06777668 137.14859009]
[4.63973093 134.20085144]
[19.34723854 131.25309753]
[34.05474472 128.30534363]
[45.01333237 118.21780396]
[60.06491852 123.09226227]
[74.77242279 120.14451599]
[77.82295227 113.29292297]
[83.92400360 99.58974457]
[86.97452545 92.73815155]
[79.32388306 79.83591461]
[64.19873810 74.48712158]
[59.08658981 59.28036880]
[67.90904236 45.88096619]
[83.89826202 44.56779480]
[94.78868866 56.34820557]
[92.22612000 72.18527985]
[99.87676239 85.08751678]
[113.50802612 91.34758759]
[128.28015137 88.74286652]
[143.05226135 86.13814545]
[152.12443542 73.47586060]
[167.14256287 71.04473114]
[179.15820312 79.77169037]
[193.93032837 77.16696930]
[208.70243835 74.56224823]
[223.47456360 71.95752716]
[238.24667358 69.35279846]
[252.98748779 66.57637787]
[267.69497681 63.62862778]
[282.40249634 60.68088150]
[296.81536865 46.67397690]
[314.87857056 53.42181778]
[329.43298340 49.79299164]
[343.98742676 46.16416168]
[358.54187012 42.53533173]
[373.09631348 38.90650558]
[384.61471558 28.06047249]
[398.83575439 32.48893356]
[413.39019775 28.86010742]
[421.04306030 23.70308685]
[428.32553101 25.32036972]
[442.96044922 22.03119087]
[457.59539795 18.74201202]
[470.78445435 5.95266485]
[487.31735229 11.71967506]
[501.87179565 8.09084606]
[516.42620850 4.46201801]
[530.98065186 0.83318949]
[545.53509521 -2.79563904]
[560.08953857 -6.42446756]
[569.55157471 -19.38014603]
[585.58563232 -19.91618538]
[595.89184570 -7.62138128]
[592.56408691 8.07274532]
[578.15515137 15.12700272]
[563.71838379 8.12996864]
[549.16394043 11.75879669]
[534.60949707 15.38762569]
[520.05505371 19.01645470]
[505.50061035 22.64528275]
[490.94619751 26.27411079]
[484.40490723 36.51755524]
[472.23867798 39.62140274]
[460.88458252 33.37694550]
[446.24963379 36.66612625]
[431.61471558 39.95530319]
[417.01904297 43.41454315]
[402.46459961 47.04337311]
[391.98721313 57.62984467]
[376.72512817 53.46094131]
[362.17068481 57.08976746]
[347.61627197 60.71859741]
[333.06182861 64.34742737]
[318.50738525 67.97625732]
[313.99093628 77.26664734]
[304.89111328 82.60631561]
[294.13708496 81.99301147]
[285.35025024 75.38838959]
[270.64273071 78.33613586]
[255.93522644 81.28388214]
[249.94018555 85.72338867]
[240.85139465 84.12491608]
[226.07928467 86.72963715]
[211.30715942 89.33436584]
[196.53504944 91.93908691]
[181.76292419 94.54380798]
[173.45671082 106.85406494]
[158.51278687 109.70605469]
[145.65698242 100.91026306]
[130.88487244 103.51498413]
[116.11275482 106.11970520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 49]
[11 48]
[13 46]
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 34]
[25 33]
[52 60]
[53 59]
[61 134]
[62 133]
[63 132]
[66 129]
[67 128]
[68 127]
[69 126]
[70 125]
[71 123]
[72 122]
[73 121]
[75 117]
[76 116]
[77 115]
[78 114]
[79 113]
[81 111]
[82 110]
[84 109]
[85 108]
[86 107]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
