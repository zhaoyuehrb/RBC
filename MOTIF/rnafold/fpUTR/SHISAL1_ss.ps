%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUUGGUGGCAACCAGGAGCCGGGGAAGAGGCCAGCAGCUGCAGGGAGACCGCAGCCAGCGGAGGGGGCUUCUGAUCCCUCAGUCACAGGGCUCGGCAGGCAGCUCUGGACGGAUCAAUGCAAGCCAGACG\
) } def
/len { sequence length } bind def

/coor [
[87.63837433 135.41197205]
[86.82052612 120.43428802]
[79.61538696 122.51658630]
[73.15242767 136.05284119]
[66.68947601 149.58909607]
[60.22651672 163.12535095]
[53.76356125 176.66160583]
[55.58257294 192.95956421]
[42.21898651 202.46464539]
[27.42011833 195.39884949]
[26.40977287 179.03085327]
[40.22730637 170.19865417]
[46.69026184 156.66239929]
[53.15321732 143.12614441]
[59.61617661 129.58988953]
[66.07913208 116.05363464]
[72.70402527 104.15628815]
[82.47940063 97.53417969]
[92.93435669 96.75315857]
[86.47139740 83.21690369]
[80.00843811 69.68064880]
[73.54548645 56.14439392]
[67.08252716 42.60813904]
[59.23006439 29.82773209]
[50.07540894 17.94529533]
[40.92075729 6.06285810]
[31.76610184 -5.81957912]
[22.61144829 -17.70201683]
[13.18075466 -29.36657906]
[3.47920632 -40.80685806]
[-6.22234249 -52.24713516]
[-15.92389107 -63.68741226]
[-25.62544060 -75.12769318]
[-35.32698822 -86.56797028]
[-45.02853775 -98.00824738]
[-67.49304962 -103.68491364]
[-71.41575623 -125.78427124]
[-82.38872528 -136.01138306]
[-100.38876343 -139.68359375]
[-104.95746613 -156.58605957]
[-116.16716766 -166.55313110]
[-127.37687683 -176.52020264]
[-138.58657837 -186.48727417]
[-149.79627991 -196.45434570]
[-158.37428284 -199.86245728]
[-161.14842224 -206.78887939]
[-172.12139893 -217.01599121]
[-188.21408081 -220.17158508]
[-193.27088928 -235.77160645]
[-182.08982849 -247.76809692]
[-166.17300415 -243.82008362]
[-161.89428711 -227.98896790]
[-150.92131042 -217.76184082]
[-139.82920837 -207.66406250]
[-128.61950684 -197.69699097]
[-117.40979767 -187.72990417]
[-106.20009613 -177.76283264]
[-94.99039459 -167.79576111]
[-82.84130096 -168.17651367]
[-73.41265106 -159.88304138]
[-72.16161346 -146.98435974]
[-61.18864059 -136.75724792]
[-54.14653778 -138.84381104]
[-46.75308990 -138.30062866]
[-39.96699524 -135.14947510]
[-34.68535614 -129.75344849]
[-31.62514687 -122.77565765]
[-31.22611237 -115.09802246]
[-33.58826065 -107.70979309]
[-23.88671112 -96.26951599]
[-14.18516159 -84.82923889]
[-4.48361349 -73.38896179]
[5.21793509 -61.94868469]
[14.91948414 -50.50840378]
[24.62103271 -39.06812668]
[29.31157684 -37.79105759]
[33.21288681 -33.49747467]
[34.49388504 -26.85667038]
[43.64854050 -14.97423267]
[52.80319214 -3.09179592]
[61.95784760 8.79064083]
[71.11250305 20.67307854]
[72.16576385 5.71010256]
[81.00723267 -6.40717363]
[94.93518829 -11.97602272]
[109.69360352 -9.29474926]
[120.77268219 0.81732029]
[124.78695679 15.27019691]
[120.50975037 29.64745522]
[109.24808502 39.55577469]
[94.44322205 41.96743011]
[80.61878204 36.14518356]
[87.08174133 49.68143845]
[93.54469299 63.21769333]
[100.00765228 76.75394440]
[106.47061157 90.29019928]
[116.43768311 101.49990845]
[129.12516785 109.50164795]
[141.81263733 117.50338745]
[157.04109192 114.22737885]
[169.79400635 122.52301788]
[172.82333374 137.06120300]
[185.51081848 145.06294250]
[198.19828796 153.06468201]
[216.41543579 148.13801575]
[232.23023987 157.84219360]
[235.95935059 175.69482422]
[249.00794983 183.09307861]
[262.05654907 190.49133301]
[278.44204712 189.82217407]
[286.98446655 203.82069397]
[278.89614868 218.08642578]
[262.49761963 217.94398499]
[254.65829468 203.53993225]
[241.60969543 196.14167786]
[228.56111145 188.74342346]
[218.38113403 194.13140869]
[206.74525452 193.89085388]
[196.58851624 187.96539307]
[190.52973938 177.74731445]
[190.19654846 165.75216675]
[177.50907898 157.75042725]
[164.82159424 149.74868774]
[150.39686584 153.27894592]
[137.41596985 145.34478760]
[133.81089783 130.19087219]
[121.12342072 122.18912506]
[108.43594360 114.18738556]
[101.23080444 116.26968384]
[108.52887726 129.37457275]
[117.43130493 141.44714355]
[112.61310577 155.65223694]
[98.20301819 159.81748962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[37 62]
[38 61]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[46 53]
[47 52]
[97 128]
[98 127]
[99 126]
[102 123]
[103 122]
[104 121]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
