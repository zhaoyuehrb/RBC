%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACGUGACCUGGCCGUCGCUUGGCAACAGGACGCCGCCGAGUCCCGCUUCUCCUCCAGGCACA\
) } def
/len { sequence length } bind def

/coor [
[79.70711517 263.77694702]
[64.06867218 261.49340820]
[54.69245911 248.77088928]
[57.14121628 233.15747070]
[69.96214294 223.91629028]
[72.12947845 209.07368469]
[74.29681396 194.23109436]
[72.06402588 186.89363098]
[76.94421387 178.73063660]
[79.82611847 164.01008606]
[82.70801544 149.28953552]
[85.58992004 134.56898499]
[88.47181702 119.84842682]
[77.05329132 99.44535828]
[89.44422150 79.61778259]
[87.27688599 64.77518463]
[74.88804626 55.33303070]
[72.90149689 40.24965286]
[81.97949219 28.49697304]
[79.81215668 13.65437698]
[77.64482117 -1.18821871]
[75.47748566 -16.03081512]
[73.31015015 -30.87341118]
[71.14281464 -45.71600723]
[68.97547913 -60.55860138]
[54.51657104 -65.57841492]
[44.05512238 -76.75054932]
[39.99510574 -91.50774384]
[43.26947784 -106.45890045]
[53.12581253 -118.16835022]
[67.29920197 -123.94535065]
[82.53269196 -122.46238708]
[95.32575226 -114.06023407]
[102.73862457 -100.66963959]
[103.06788635 -85.36767578]
[96.23787689 -71.67060852]
[83.81807709 -62.72593689]
[85.98541260 -47.88334274]
[88.15274811 -33.04074478]
[90.32008362 -18.19815063]
[92.48741913 -3.35555434]
[94.65475464 11.48704147]
[96.82209015 26.32963753]
[108.88167572 34.99578094]
[111.29109955 50.01741028]
[102.11948395 62.60784912]
[104.28681946 77.45044708]
[111.01559448 79.86257935]
[116.67607880 84.22763062]
[120.71931458 90.12229156]
[122.75319672 96.97489166]
[122.58047485 104.12086487]
[120.21789551 110.86719513]
[115.89458466 116.55963135]
[110.02982330 120.64611053]
[103.19236755 122.73033142]
[100.31047058 137.45088196]
[97.42856598 152.17143250]
[94.54666901 166.89198303]
[91.66476440 181.61253357]
[89.13941193 196.39843750]
[86.97207642 211.24102783]
[84.80474091 226.08361816]
[94.44786072 238.60502625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[15 47]
[16 46]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
