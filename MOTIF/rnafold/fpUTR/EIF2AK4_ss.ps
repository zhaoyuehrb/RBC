%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCCCGCAGGCUGCCGGGGGCCCACCGCCGCCCAGGCAAGGCCGCCCUGCCUUGGGCGCAGCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[79.38702393 265.99707031]
[69.46992493 277.65512085]
[55.26668167 283.35830688]
[40.04110336 281.79614258]
[27.29191780 273.32754517]
[19.94879150 259.89859009]
[19.69912148 244.59512329]
[26.60028076 230.93376160]
[39.06643295 222.05381775]
[54.23294830 219.99580383]
[59.29579163 205.87603760]
[64.35863495 191.75628662]
[69.42147827 177.63652039]
[74.17934418 163.41110229]
[78.63004303 149.08659363]
[83.08073425 134.76210022]
[87.53142548 120.43759155]
[91.98211670 106.11309052]
[86.02988434 103.47418213]
[81.54202271 96.94686890]
[70.16743469 87.16838074]
[54.65874481 84.03930664]
[50.05151749 69.87516785]
[38.67693329 60.09668350]
[22.47057152 57.58950424]
[16.79173660 42.20500565]
[27.48232460 29.76943588]
[43.54477692 33.07544708]
[48.45541763 48.72209549]
[59.83000565 58.50057983]
[74.52510834 60.93023682]
[79.94592285 75.79379272]
[91.32050323 85.57228088]
[106.30661774 86.21761322]
[118.47970581 77.45314026]
[130.65278625 68.68866730]
[142.82588196 59.92419434]
[154.99896240 51.15972137]
[166.98065186 42.13536072]
[178.76539612 32.85528946]
[190.55014038 23.57522011]
[202.33489990 14.29514885]
[207.33563232 6.27590036]
[214.83218384 4.88244963]
[227.00526428 -3.88202310]
[233.24279785 -19.04860878]
[249.52998352 -20.96157646]
[259.11196899 -7.65302706]
[252.13163757 7.18634319]
[235.76974487 8.29106236]
[223.59666443 17.05553436]
[211.61495972 26.07989693]
[199.83021545 35.35996628]
[188.04547119 44.64003754]
[176.26072693 53.92010880]
[172.85165405 60.74054337]
[163.76342773 63.33280945]
[151.59034729 72.09728241]
[139.41726685 80.86175537]
[127.24417877 89.62622833]
[115.07109070 98.39070129]
[106.30661774 110.56378174]
[101.85592651 124.88828278]
[97.40523529 139.21278381]
[92.95454407 153.53729248]
[88.50384521 167.86178589]
[88.92815399 177.30296326]
[83.54123688 182.69937134]
[78.47839355 196.81912231]
[73.41555023 210.93888855]
[68.35270691 225.05863953]
[78.75590515 236.28504944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 71]
[11 70]
[12 69]
[13 68]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[20 33]
[21 32]
[23 30]
[24 29]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 55]
[40 54]
[41 53]
[42 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
