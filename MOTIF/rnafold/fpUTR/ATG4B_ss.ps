%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGGCACACCUAUUGGCCCCCGCGGCGUCCCGUCGCCGCGUCGCGUUGCUGGCCCGUCGGAGCGACGCCGCUCGGGUCAGUCGGCGGCCGGACUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[112.23799896 399.65087891]
[114.28512573 384.56018066]
[122.29872894 371.61019897]
[134.89041138 363.04458618]
[132.18658447 348.29028320]
[129.48275757 333.53598022]
[126.77893066 318.78167725]
[124.07511139 304.02740479]
[112.47475433 298.19927979]
[106.30349731 286.55590820]
[108.04325104 273.29623413]
[117.27537537 263.35214233]
[115.01840973 248.52291870]
[105.45419312 237.10473633]
[111.02696991 222.29748535]
[108.76999664 207.46826172]
[106.51303101 192.63902283]
[104.25606537 177.80979919]
[101.99909973 162.98056030]
[99.74212646 148.15133667]
[97.48516083 133.32209778]
[95.22819519 118.49286652]
[83.62010193 109.82116699]
[81.43994141 95.49659729]
[89.94257355 83.76409912]
[87.68560791 68.93486786]
[85.42864227 54.10563660]
[83.17166901 39.27640533]
[80.91470337 24.44717598]
[78.65773773 9.61794472]
[76.40077209 -5.21128702]
[74.14379883 -20.04051781]
[71.21744537 -34.75229645]
[67.62770844 -49.31642532]
[64.03797913 -63.88055038]
[47.52672958 -72.89620209]
[42.75999451 -90.76901245]
[52.25993347 -106.27271271]
[47.79738998 -120.59352112]
[43.33484268 -134.91433716]
[38.65651703 -149.16612244]
[33.76347351 -163.34561157]
[28.87043190 -177.52511597]
[14.55305195 -184.21751404]
[9.23998451 -199.10195923]
[16.08337784 -213.34777832]
[31.02317047 -218.50318909]
[45.19584656 -211.50955200]
[50.19300842 -196.51609802]
[43.04993057 -182.41815186]
[47.94297028 -168.23866272]
[52.83601379 -154.05915833]
[58.08062744 -148.67333984]
[57.65565491 -139.37687683]
[62.11820221 -125.05606842]
[66.58074951 -110.73526001]
[77.77272797 -107.67173004]
[86.12789917 -99.44627380]
[89.43370819 -88.07133484]
[86.73410797 -76.41329193]
[78.60210419 -67.47028351]
[82.19184113 -52.90615845]
[85.78157043 -38.34203339]
[88.76654053 -36.17989731]
[90.77598572 -32.38455963]
[91.01647949 -27.46897125]
[88.97303009 -22.29748535]
[91.23000336 -7.46825457]
[93.48696899 7.36097670]
[95.74393463 22.19020844]
[98.00090027 37.01943970]
[100.25787354 51.84867096]
[102.51483917 66.67790222]
[104.77180481 81.50713348]
[116.37989807 90.17883301]
[118.56005859 104.50340271]
[110.05742645 116.23590088]
[112.31439209 131.06512451]
[114.57135773 145.89436340]
[116.82833099 160.72358704]
[119.08529663 175.55282593]
[121.34226227 190.38204956]
[123.59922791 205.21128845]
[125.85620117 220.04051208]
[135.58184814 232.51939392]
[129.84764099 246.26596069]
[132.10459900 261.09518433]
[146.34339905 271.11843872]
[148.95947266 287.99423218]
[138.82940674 301.32357788]
[141.53323364 316.07785034]
[144.23706055 330.83215332]
[146.94088745 345.58645630]
[149.64471436 360.34075928]
[164.45553589 363.88467407]
[176.54051208 373.15145874]
[183.80584717 386.53558350]
[184.99276733 401.71817017]
[179.89564514 416.06875610]
[169.39758301 427.10098267]
[155.31742859 432.90350342]
[140.09465027 432.47094727]
[126.36670685 425.87829590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[12 87]
[13 86]
[15 84]
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[33 63]
[34 62]
[35 61]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
