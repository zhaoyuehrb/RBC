%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCACAGGUUUCCGCUUGCCUCUGGCCGGGGGUCGGCAACUGCAGGCGUCAGUUUCCCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[88.86442566 107.76318359]
[73.86854553 108.11482239]
[58.87266922 108.46645355]
[43.87678909 108.81809235]
[28.88091087 109.16973114]
[13.88503361 109.52136993]
[-1.11084378 109.87300873]
[-14.72584152 117.93169403]
[-27.63099861 110.49488068]
[-42.62687683 110.84651947]
[-57.62275314 111.19815826]
[-72.61862946 111.54979706]
[-81.33144379 124.38983917]
[-95.93882751 129.62471008]
[-110.82395935 125.24149323]
[-120.26319122 112.92562866]
[-120.62695312 97.41281128]
[-111.77536011 84.66805267]
[-97.11204529 79.59194946]
[-82.27534485 84.13638306]
[-72.97026825 96.55392456]
[-57.97439194 96.20228577]
[-42.97851562 95.85064697]
[-27.98263741 95.49900818]
[-15.44024467 87.46546936]
[-1.46248233 94.87713623]
[13.53339577 94.52549744]
[28.52927399 94.17385864]
[43.52515030 93.82221985]
[58.52103043 93.47058105]
[73.51690674 93.11894226]
[88.51278687 92.76730347]
[103.40984344 91.01296997]
[118.07716370 87.87136841]
[132.74449158 84.72976685]
[138.34657288 80.22531128]
[144.44894409 79.61184692]
[148.93022156 82.04936981]
[163.82727051 80.29503632]
[176.62782288 70.99683380]
[190.17266846 77.19251251]
[205.06971741 75.43817902]
[219.96678162 73.68385315]
[234.86383057 71.92951965]
[249.76089478 70.17519379]
[258.19070435 57.00431061]
[273.12976074 52.38277054]
[287.52429199 58.49272537]
[294.57763672 72.44924164]
[290.95944214 87.66247559]
[278.37808228 96.94921112]
[262.77407837 95.92452240]
[251.51522827 85.07225037]
[236.61816406 86.82658386]
[221.72111511 88.58090973]
[206.82405090 90.33524323]
[191.92698669 92.08956909]
[180.19198608 101.26229095]
[165.58160400 95.19209290]
[150.68453979 96.94642639]
[135.88609314 99.39708710]
[121.21876526 102.53868866]
[106.55144501 105.68029785]
[104.56620789 108.50329590]
[101.36889648 110.54396057]
[97.30057526 111.29505157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[9 24]
[10 23]
[11 22]
[12 21]
[33 63]
[34 62]
[35 61]
[38 60]
[39 59]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
