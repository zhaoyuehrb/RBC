%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGAGGAAGAGUGGUAGGGGGAGGGAGAGAGAGAGGAAGAGUUUCCAAACUUGUCUCCAGUGACAGGAGACAUUUACGUUCCACAAGAUAAAACUGCCACUUAGAGCCCAGGGAAGCUAAACCUUCCUGGCUUGGCCUAGGAGCUCGAGCGGAGUC\
) } def
/len { sequence length } bind def

/coor [
[222.24020386 350.92938232]
[211.54240417 340.41479492]
[203.86088562 327.53091431]
[199.69789124 313.12017822]
[199.32562256 298.12478638]
[202.76841736 283.52523804]
[209.80116272 270.27606201]
[219.96405029 259.24356079]
[232.59257507 251.14910889]
[246.86103821 246.52191162]
[261.83651733 245.66452026]
[276.53634644 248.63183594]
[265.32373047 238.66804504]
[254.11109924 228.70425415]
[242.89846802 218.74047852]
[231.68585205 208.77668762]
[220.47322083 198.81289673]
[209.26058960 188.84910583]
[198.04797363 178.88533020]
[186.83534241 168.92153931]
[163.69285583 173.35275269]
[144.45346069 159.32106018]
[141.54078674 135.43557739]
[128.75117493 127.59809875]
[115.96157837 119.76062012]
[103.17197418 111.92314148]
[88.58642578 108.42145538]
[73.63266754 109.59834290]
[58.67890930 110.77523041]
[43.72514725 111.95211792]
[28.77138901 113.12900543]
[23.72767067 127.49844360]
[13.27070618 138.56965637]
[-0.78777158 144.42449951]
[-16.01204681 144.04856873]
[-29.76442337 137.50700378]
[-39.66221619 125.93316650]
[-43.99057388 111.33230591]
[-41.99958420 96.23410034]
[-34.03419495 83.25440216]
[-21.47446060 74.64202881]
[-6.49642897 71.88912964]
[8.30486393 75.47264862]
[20.36500549 84.77172852]
[27.59450150 98.17524719]
[42.54826355 96.99835968]
[57.50202179 95.82147217]
[72.45578003 94.64458466]
[87.40953827 93.46769714]
[90.68260956 86.71958923]
[75.82409668 84.66421509]
[73.18752289 69.89775085]
[86.41660309 62.82729721]
[97.22875214 73.22336578]
[100.50181580 66.47525024]
[92.16826630 54.00320816]
[83.83470917 41.53116226]
[75.50115967 29.05911827]
[67.16760254 16.58707428]
[58.83405304 4.11502981]
[50.50049973 -8.35701466]
[34.93720245 -9.87945938]
[24.03062248 -21.08573151]
[22.93050957 -36.68457031]
[32.15630722 -49.31068039]
[47.35187149 -53.00240326]
[61.34232330 -46.01661301]
[67.52180481 -31.65179253]
[62.97254181 -16.69056892]
[71.30609894 -4.21852398]
[79.63964844 8.25352001]
[87.97320557 20.72556496]
[96.30675507 33.19760895]
[104.64031219 45.66965103]
[112.97386169 58.14169693]
[127.56781769 54.67521286]
[141.47494507 60.29585266]
[149.56214905 72.92903900]
[148.84440613 87.91185760]
[139.58665466 99.71414948]
[125.20594025 103.97969055]
[111.00945282 99.13353729]
[123.79905701 106.97101593]
[136.58865356 114.80849457]
[149.37826538 122.64597321]
[155.04951477 118.39399719]
[161.53608704 115.58200836]
[168.48020935 114.35581970]
[175.50097656 114.77406311]
[182.21533203 116.80538940]
[188.25888062 120.33068085]
[193.30570984 125.14997101]
[197.08595276 130.99380493]
[199.40020752 137.53828430]
[200.13006592 144.42300415]
[199.24409485 151.27088928]
[196.79913330 157.70890808]
[208.01176453 167.67269897]
[219.22438049 177.63648987]
[230.43701172 187.60028076]
[241.64962769 197.56405640]
[252.86225891 207.52784729]
[264.07489014 217.49163818]
[275.28750610 227.45541382]
[286.50012207 237.41920471]
[295.51712036 239.19062805]
[300.69387817 245.55215454]
[314.95971680 250.18740845]
[329.22558594 254.82266235]
[343.49142456 259.45791626]
[357.80209351 263.95291138]
[372.15618896 268.30715942]
[386.55236816 272.52032471]
[400.98919678 276.59191895]
[415.42602539 280.66351318]
[433.13452148 275.70294189]
[444.90911865 288.68563843]
[459.42309570 292.47302246]
[473.93707275 296.26037598]
[488.45104980 300.04776001]
[502.96505737 303.83514404]
[517.47906494 307.62249756]
[529.38800049 297.67483521]
[544.87188721 296.66055298]
[557.97680664 304.96960449]
[563.66369629 319.40704346]
[559.74572754 334.42132568]
[547.72955322 344.23922729]
[532.23559570 345.08551025]
[519.22155762 336.63476562]
[513.69165039 322.13647461]
[499.17767334 318.34912109]
[484.66369629 314.56173706]
[470.14971924 310.77438354]
[455.63571167 306.98699951]
[441.12173462 303.19961548]
[430.49774170 309.05145264]
[418.35031128 305.97671509]
[411.35440063 295.10034180]
[396.91757202 291.02874756]
[382.48074341 286.95715332]
[375.15136719 288.17456055]
[367.80194092 282.66128540]
[353.44781494 278.30700684]
[346.09594727 279.38027954]
[338.85617065 273.72375488]
[324.59033203 269.08850098]
[310.32446289 264.45324707]
[296.05862427 259.81799316]
[306.05380249 271.00265503]
[312.88571167 284.35650635]
[316.10769653 299.00637817]
[315.50909424 313.99441528]
[311.12902832 328.34066772]
[303.25387573 341.10711670]
[292.39852905 351.45901489]
[279.27282715 358.71954346]
[264.73489380 362.41397095]
[249.73532104 362.30075073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 105]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[23 85]
[24 84]
[25 83]
[26 82]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[107 149]
[108 148]
[109 147]
[110 146]
[111 144]
[112 143]
[113 141]
[114 140]
[115 139]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
