%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGCGACAGAGCCUUCCUCAAACCUGUAGUGACUGCCACACUUUGCAAGGACACCGUAGAGGGGGCAUGUCCGCGCUCCAACUUCCUCCCGACGCAGCCUCUGAUUGGCUCCUGGGCUUAUAAGAAACGCGUGA\
) } def
/len { sequence length } bind def

/coor [
[192.91752625 161.51681519]
[190.46546936 139.77313232]
[176.26379395 134.94485474]
[162.06210327 130.11657715]
[147.86042786 125.28829956]
[140.45269775 126.12044525]
[133.39450073 120.18710327]
[119.30556488 115.03910065]
[105.21662903 109.89110565]
[91.07041168 104.90264893]
[76.86873627 100.07437134]
[62.66705322 95.24609375]
[50.71755600 100.24558258]
[38.95381546 95.86975098]
[33.53594971 84.99537659]
[19.44701385 79.84737396]
[5.35807800 74.69937897]
[-8.73085880 69.55138397]
[-17.95162201 69.53651428]
[-23.07780838 64.12456512]
[-37.04680252 58.65948105]
[-51.01580048 53.19439697]
[-64.98479462 47.72930908]
[-81.55732727 60.00231552]
[-102.04294586 59.93946075]
[-118.32147217 47.72877884]
[-124.03780365 28.34118652]
[-138.53398132 24.48619652]
[-153.03015137 20.63120651]
[-167.56896973 16.94027710]
[-182.14855957 13.41387749]
[-196.80412292 10.21786976]
[-211.52816772 7.35388565]
[-226.25221252 4.48990202]
[-240.97627258 1.62591827]
[-253.01553345 11.60540771]
[-268.65243530 11.45975876]
[-280.50372314 1.25774169]
[-282.97357178 -14.18356228]
[-274.89578247 -27.57324219]
[-260.08447266 -32.58909988]
[-245.53305054 -26.86280251]
[-238.11228943 -13.09813023]
[-223.38822937 -10.23414612]
[-208.66418457 -7.37016249]
[-193.94013977 -4.50617886]
[-189.48764038 -6.43625307]
[-183.76951599 -5.52951479]
[-178.62216187 -1.16571486]
[-164.04257202 2.36068463]
[-156.74020386 0.86314750]
[-149.17517090 6.13503313]
[-134.67898560 9.99002266]
[-120.18281555 13.84501266]
[-114.26452637 5.92529106]
[-106.18941498 0.16947231]
[-96.71569824 -2.85974097]
[-86.73975372 -2.85671043]
[-77.21126556 0.19639795]
[-69.04286194 6.02619267]
[-63.02268600 14.09244061]
[-59.73836899 23.63809013]
[-59.51971054 33.76031494]
[-45.55071640 39.22539902]
[-31.58172035 44.69048309]
[-17.61272430 50.15556717]
[-3.58286166 55.46244812]
[10.50607491 60.61044312]
[24.59501076 65.75843811]
[38.68394852 70.90644073]
[55.73795319 66.92321777]
[67.49533081 81.04441071]
[81.69701385 85.87268829]
[95.89869690 90.70097351]
[104.01121521 90.10958099]
[110.36462402 95.80216980]
[124.45355988 100.95016479]
[138.54249573 106.09816742]
[152.68870544 111.08662415]
[166.89038086 115.91490173]
[181.09207153 120.74317932]
[195.29374695 125.57145691]
[200.56964111 118.10992432]
[207.30003357 111.94329071]
[215.17608643 107.34874725]
[223.83758545 104.53149414]
[232.88946533 103.61553955]
[241.91975403 104.63827515]
[250.51843262 107.54898071]
[258.29595947 112.21127319]
[264.90090942 118.40953827]
[270.03601074 125.85890198]
[273.47128296 134.21826172]
[275.05450439 143.10598755]
[274.71789551 152.11726379]
[272.48101807 160.84260559]
[285.41455078 168.44026184]
[298.34805298 176.03791809]
[311.28155518 183.63557434]
[323.51644897 177.18475342]
[337.23165894 177.64019775]
[348.82675171 184.77476501]
[355.31112671 196.62205505]
[355.07507324 210.01721191]
[367.83358765 217.90521240]
[380.59210205 225.79321289]
[394.11099243 218.63871765]
[409.29562378 219.20780945]
[422.07171631 227.24757385]
[429.06140137 240.51408386]
[428.47613525 255.39773560]
[441.23461914 263.28573608]
[453.99313354 271.17373657]
[466.75164795 279.06173706]
[483.15072632 279.01473999]
[491.15588379 293.32730103]
[482.53213501 307.27587891]
[466.15081787 306.51138306]
[458.86361694 291.82025146]
[446.10513306 283.93225098]
[433.34661865 276.04425049]
[420.58813477 268.15625000]
[407.53524780 275.33172607]
[392.54351807 275.00814819]
[379.64141846 267.17221069]
[372.34588623 253.84284973]
[372.70410156 238.55171204]
[359.94558716 230.66371155]
[347.18707275 222.77571106]
[332.24594116 229.48181152]
[316.08343506 225.95527649]
[305.07543945 213.38568115]
[303.68389893 196.56907654]
[290.75039673 188.97142029]
[277.81689453 181.37376404]
[264.88336182 173.77612305]
[247.15264893 186.13206482]
[225.56517029 188.12023926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[7 78]
[8 77]
[9 76]
[10 74]
[11 73]
[12 72]
[15 70]
[16 69]
[17 68]
[18 67]
[20 66]
[21 65]
[22 64]
[23 63]
[27 54]
[28 53]
[29 52]
[30 50]
[31 49]
[32 46]
[33 45]
[34 44]
[35 43]
[96 136]
[97 135]
[98 134]
[99 133]
[104 129]
[105 128]
[106 127]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
