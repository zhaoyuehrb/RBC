%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGGGUGGGGUUACGUGUAGGUGACGUGGCCGCUUCCAGUCUUUGGUCGGGUUUCGGCGGCUUCAGUGCUCGGGGAGGAGGCAGUGACGGCCGGUGAGAUUGGAAGUGGCGGCGGCGGCAGGCGGCAGAGGGGAGUCCGAGGUUAUGCGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[75.45735931 130.27395630]
[63.94541550 139.89036560]
[52.43347549 149.50677490]
[40.92153549 159.12316895]
[29.40959549 168.73957825]
[17.89765549 178.35598755]
[6.38571596 187.97238159]
[-5.12622404 197.58879089]
[-16.63816452 207.20520020]
[-19.30272102 213.35238647]
[-23.98641586 216.69114685]
[-28.80430031 216.96403503]
[-40.68945312 226.11515808]
[-52.57460785 235.26628113]
[-64.45976257 244.41740417]
[-76.34491730 253.56854248]
[-88.23006439 262.71966553]
[-100.11521912 271.87078857]
[-112.00037384 281.02191162]
[-112.47577667 296.65228271]
[-122.92546844 308.28576660]
[-138.41542053 310.42941284]
[-151.63175964 302.07101440]
[-156.33413696 287.15722656]
[-150.30223083 272.72982788]
[-136.38410950 265.60098267]
[-121.15150452 269.13677979]
[-109.26634979 259.98562622]
[-97.38119507 250.83451843]
[-85.49604034 241.68338013]
[-73.61088562 232.53225708]
[-61.72573471 223.38113403]
[-49.84057999 214.22999573]
[-37.95542908 205.07887268]
[-26.25456810 195.69325256]
[-14.74262905 186.07684326]
[-3.23068881 176.46044922]
[8.28125095 166.84403992]
[19.79319191 157.22763062]
[31.30513191 147.61123657]
[42.81707001 137.99482727]
[54.32901001 128.37841797]
[65.84095001 118.76201630]
[62.11348724 109.13598633]
[61.04393768 98.86901855]
[62.70732880 88.68139648]
[66.98697662 79.28782654]
[73.58263397 71.34731293]
[82.03158569 65.41690826]
[91.74111176 61.91267014]
[91.44287872 46.91563416]
[83.43272400 33.27202606]
[90.91545105 20.39343452]
[90.61721802 5.39640045]
[90.31898499 -9.60063457]
[90.02075195 -24.59766960]
[89.72251892 -39.59470367]
[89.42428589 -54.59173965]
[89.12605286 -69.58877563]
[81.11590576 -83.23238373]
[88.59863281 -96.11097717]
[88.30039978 -111.10800934]
[88.00216675 -126.10504150]
[87.70393372 -141.10208130]
[87.40570068 -156.09912109]
[86.95838928 -171.09243774]
[86.36203766 -186.08058167]
[85.76569366 -201.06872559]
[77.48586273 -214.55038452]
[84.71105194 -227.57519531]
[84.11470795 -242.56333923]
[83.51835632 -257.55148315]
[82.77303314 -272.53295898]
[81.87880707 -287.50628662]
[69.89228821 -297.80670166]
[68.78337097 -313.57205200]
[79.20995331 -325.44897461]
[94.98613739 -326.39117432]
[106.75218201 -315.83959961]
[107.52751160 -300.05432129]
[96.85212708 -288.40051270]
[97.74635315 -273.42718506]
[101.30381012 -266.90206909]
[98.50650024 -258.14782715]
[99.10284424 -243.15968323]
[99.69919586 -228.17153931]
[107.93637085 -215.76194763]
[100.75382996 -201.66506958]
[101.35018158 -186.67692566]
[101.94652557 -171.68879700]
[105.37354279 -165.09425354]
[102.40273285 -156.39735413]
[102.70096588 -141.40031433]
[102.99919891 -126.40327454]
[103.29743195 -111.40624237]
[103.59566498 -96.40921021]
[111.58448029 -83.83828735]
[104.12309265 -69.88700867]
[104.42132568 -54.88997269]
[104.71955872 -39.89293671]
[105.01779175 -24.89590263]
[105.31601715 -9.89886761]
[105.61425018 5.09816790]
[105.91248322 20.09520340]
[113.90130615 32.66612244]
[106.43991089 46.61740494]
[106.73814392 61.61443710]
[129.84535217 71.02645874]
[143.76066589 93.64890289]
[158.65405273 91.86363220]
[171.43525696 82.53885651]
[184.99293518 88.70638275]
[199.88632202 86.92110443]
[212.68002319 76.66179657]
[227.86143494 82.86314392]
[229.81323242 99.14572906]
[216.52757263 108.75942230]
[201.67160034 101.81449127]
[186.77821350 103.59976196]
[175.06228638 112.79684448]
[160.43931580 106.75701141]
[145.54594421 108.54228210]
[140.43121338 122.64333344]
[150.71679688 133.56150818]
[161.00238037 144.47969055]
[171.28797913 155.39787292]
[181.57356262 166.31605530]
[192.28507996 176.81669617]
[203.40560913 186.88316345]
[218.50860596 183.84907532]
[232.34054565 190.21546936]
[239.68458557 203.35049438]
[237.90724182 218.11460876]
[249.02777100 228.18107605]
[265.05798340 228.82322693]
[274.43405151 241.84124756]
[269.96347046 257.24884033]
[255.07568359 263.22659302]
[241.19132996 255.18890381]
[238.96128845 239.30160522]
[227.84077454 229.23512268]
[213.32597351 232.46908569]
[199.52687073 226.46499634]
[191.81904602 213.33325195]
[193.33912659 198.00369263]
[182.21861267 187.93721008]
[179.36363220 187.97332764]
[176.32275391 186.84934998]
[173.54959106 184.48869324]
[171.51684570 180.98461914]
[170.65538025 176.60163879]
[160.36979675 165.68347168]
[150.08419800 154.76528931]
[139.79861450 143.84710693]
[129.51303101 132.92892456]
[115.82577515 139.88227844]
[101.02991486 141.58305359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[50 107]
[51 106]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[61 96]
[62 95]
[63 94]
[64 93]
[65 92]
[66 90]
[67 89]
[68 88]
[70 86]
[71 85]
[72 84]
[73 82]
[74 81]
[109 122]
[110 121]
[112 119]
[113 118]
[123 155]
[124 154]
[125 153]
[126 152]
[127 151]
[128 146]
[129 145]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
