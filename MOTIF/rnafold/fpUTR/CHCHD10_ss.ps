%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUUGCGCCGGCUGUGACAAGCGCUGCGGCAUUUGUCCCCGCGACAGCACCGCUGCCGCCGUCUCUAAGGUCGCCCGGGUCCCACCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[80.24662018 355.38009644]
[65.05261230 353.92922974]
[51.99723434 346.02230835]
[43.67263794 333.22918701]
[41.73167801 318.08996582]
[46.55973053 303.61059570]
[57.19818878 292.66589355]
[71.53477478 287.42901611]
[72.96060944 272.49691772]
[74.38645172 257.56484985]
[67.89398956 244.15972900]
[76.90805054 231.15753174]
[78.33388519 216.22544861]
[79.75972748 201.29336548]
[77.21528625 194.20603943]
[81.47505951 185.91275024]
[83.37394714 171.03341675]
[77.31006622 157.42906189]
[86.73211670 144.71939087]
[88.63100433 129.84007263]
[90.52989197 114.96075439]
[83.86100769 107.28286743]
[82.51627350 97.20240784]
[86.93930817 88.04485321]
[95.67098236 82.83123016]
[98.50975037 68.10230255]
[91.90026093 56.88678360]
[94.69210815 44.58472824]
[104.82651520 37.77178192]
[108.13117218 23.14033699]
[111.43582916 8.50889015]
[114.74048615 -6.12255716]
[118.04514313 -20.75400352]
[104.71135712 -27.79994202]
[93.66439056 -38.04933167]
[85.65320587 -50.79911041]
[81.21880341 -65.17696381]
[80.65773010 -80.20104218]
[84.00222778 -94.84697723]
[91.01844788 -108.11773682]
[101.22282410 -119.11151123]
[113.91535187 -127.08297729]
[128.22763062 -131.49383545]
[143.18226624 -132.04914856]
[146.48692322 -146.68058777]
[149.79158020 -161.31204224]
[145.28471375 -176.47773743]
[155.63584900 -187.18769836]
[158.94050598 -201.81913757]
[162.24516296 -216.45059204]
[165.54983521 -231.08203125]
[163.14157104 -247.86407471]
[178.60108948 -254.82392883]
[189.56858826 -241.89526367]
[180.18127441 -227.77737427]
[176.87661743 -213.14593506]
[173.57196045 -198.51448059]
[170.26730347 -183.88304138]
[175.01054382 -169.76387024]
[164.42301941 -158.00738525]
[161.11836243 -143.37593079]
[157.81370544 -128.74449158]
[171.07797241 -121.81565094]
[182.10514832 -111.68163300]
[190.13946533 -99.02880096]
[194.62820435 -84.71644592]
[195.25962830 -69.71838379]
[191.98472595 -55.05673218]
[185.02084351 -41.73224258]
[174.83737183 -30.65597725]
[162.12406921 -22.58703423]
[147.74433899 -18.08051491]
[132.67658997 -17.44934654]
[129.37193298 -2.81789899]
[126.06727600 11.81354809]
[122.76261902 26.44499397]
[119.45796204 41.07644272]
[125.61733246 57.42451096]
[113.23867798 70.94107056]
[110.39990997 85.66999817]
[117.48372650 102.79759216]
[105.40921783 116.85964203]
[103.51033020 131.73896790]
[101.61144257 146.61828613]
[107.53949738 161.28691101]
[98.25326538 172.93231201]
[96.35437775 187.81163025]
[94.69181061 202.71920776]
[93.26596832 217.65129089]
[91.84012604 232.58337402]
[98.23059845 247.05653381]
[89.31853485 258.99069214]
[87.89269257 273.92276001]
[86.46685028 288.85485840]
[99.55326843 296.71032715]
[107.92817688 309.47055054]
[109.92874146 324.60198975]
[105.15774536 339.10028076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 94]
[9 93]
[10 92]
[12 90]
[13 89]
[14 88]
[16 87]
[17 86]
[19 84]
[20 83]
[21 82]
[25 80]
[26 79]
[29 77]
[30 76]
[31 75]
[32 74]
[33 73]
[44 62]
[45 61]
[46 60]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
