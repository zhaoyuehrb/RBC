%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCAGCGCUUCCAUCCCCGCCCCGGCGGGUCCAAGCCGGUGCCGGGCGCCCAGGGGUUGCCGCGCUGGGCGGGAGGGCAGCGCCUGAGAGGGCGGUGGGGUGGCGGGGUUCCUGCGCGCGGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[225.52766418 218.52955627]
[214.60792542 208.24562073]
[203.68817139 197.96170044]
[185.53488159 199.67106628]
[171.59223938 187.43524170]
[170.90678406 168.58079529]
[159.50653076 158.83222961]
[148.10629272 149.08367920]
[136.58996582 139.47251892]
[124.95923615 130.00013733]
[113.32850647 120.52774811]
[101.69777679 111.05535889]
[89.95429993 101.72311401]
[78.09976959 92.53235626]
[66.24523926 83.34159088]
[55.42652893 85.34148407]
[45.51839066 81.09149170]
[39.75254440 72.24413300]
[39.86091614 61.90518951]
[28.46067047 52.15663147]
[17.06042290 42.40807343]
[5.66017580 32.65951538]
[-5.74007082 22.91095924]
[-17.14031792 13.16240120]
[-28.54056549 3.41384363]
[-37.18824768 0.16947313]
[-40.09366989 -6.70774984]
[-51.25687408 -16.72687340]
[-62.42007828 -26.74599838]
[-73.58328247 -36.76512146]
[-84.86582184 -46.64967346]
[-96.26606750 -56.39823151]
[-102.84223938 -58.01839066]
[-106.93380737 -62.14160156]
[-107.96464539 -66.89785767]
[-118.88439178 -77.18179321]
[-129.80413818 -87.46572113]
[-145.15507507 -91.29443359]
[-149.11566162 -105.65280914]
[-160.03540039 -115.93673706]
[-171.31793213 -125.82128906]
[-182.94866943 -135.29367065]
[-194.57940674 -144.76605225]
[-206.21012878 -154.23844910]
[-217.84086609 -163.71083069]
[-233.94046021 -169.02488708]
[-233.29089355 -185.96638489]
[-216.83164978 -190.03207397]
[-208.36848450 -175.34156799]
[-196.73774719 -165.86917114]
[-185.10702515 -156.39678955]
[-173.47628784 -146.92440796]
[-161.84555054 -137.45202637]
[-158.22549438 -137.48904419]
[-154.41532898 -135.71064758]
[-151.29853821 -132.05134583]
[-149.75146484 -126.85648346]
[-138.83172607 -116.57255554]
[-124.26183319 -113.47941589]
[-119.52020264 -98.38545990]
[-108.60045624 -88.10153198]
[-97.68071747 -77.81760406]
[-86.51750946 -67.79847717]
[-75.11726379 -58.04992294]
[-67.91766357 -56.07420731]
[-63.56415939 -47.92832947]
[-52.40095520 -37.90920258]
[-41.23775101 -27.89007950]
[-30.07454491 -17.87095451]
[-18.79200745 -7.98640299]
[-7.39176035 1.76215422]
[4.00848627 11.51071167]
[15.40873337 21.25926971]
[26.80898094 31.00782585]
[38.20922852 40.75638199]
[49.60947418 50.50494003]
[68.78075409 52.52863693]
[75.43600464 71.48706055]
[87.29053497 80.67782593]
[99.14505768 89.86859131]
[107.02021790 91.95652008]
[111.17015839 99.42462921]
[122.80088806 108.89701080]
[134.43162537 118.36940002]
[146.06236267 127.84178162]
[154.78535461 130.87785339]
[157.85484314 137.68342590]
[169.25509644 147.43199158]
[180.65533447 157.18054199]
[192.21795654 153.94515991]
[203.77793884 156.71099854]
[212.44645691 164.66644287]
[216.11602783 175.71839905]
[213.97210693 187.04196167]
[224.89184570 197.32588196]
[235.81158447 207.60981750]
[246.85385132 217.76206970]
[258.01705933 227.78118896]
[269.18026733 237.80032349]
[280.34347534 247.81944275]
[291.50668335 257.83856201]
[302.66989136 267.85769653]
[318.10821533 271.31719971]
[322.41195679 285.57647705]
[333.57516479 295.59561157]
[344.85772705 305.48016357]
[356.25796509 315.22869873]
[367.65820312 324.97726440]
[383.17507935 328.06558228]
[387.81948853 342.21755981]
[399.21975708 351.96612549]
[415.18728638 357.66470337]
[414.13165283 374.58575439]
[397.57965088 378.25558472]
[389.47119141 363.36636353]
[378.07095337 353.61779785]
[363.36950684 351.22677612]
[357.90963745 336.37750244]
[346.50939941 326.62896729]
[335.10916138 316.88040161]
[327.90954590 314.90469360]
[323.55606079 306.75881958]
[312.39285278 296.73968506]
[297.75296021 293.99682617]
[292.65075684 279.02090454]
[281.48754883 269.00177002]
[270.32434082 258.98263550]
[259.16113281 248.96353149]
[247.99794006 238.94439697]
[236.83473206 228.92527771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[6 89]
[7 88]
[8 87]
[9 85]
[10 84]
[11 83]
[12 82]
[13 80]
[14 79]
[15 78]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[27 69]
[28 68]
[29 67]
[30 66]
[31 64]
[32 63]
[35 62]
[36 61]
[37 60]
[39 58]
[40 57]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[104 123]
[105 122]
[106 120]
[107 119]
[108 118]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
