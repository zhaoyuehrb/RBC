%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:27 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TSEN15)
} def

/sequence { (\
ACUGCAGCUGCGAGCCUCGGGGAAGCGGAACCCACAGGCGCGCGCGCCGCUGCUUCUGGCCGGGCGCGGGUCGUGGUGCACCACGGGAGCGCCGCACCGGCCGGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 104 0.011868749 ubox
3 49 0.005547919 ubox
3 52 0.009097780 ubox
3 103 0.010433476 ubox
4 47 0.021146763 ubox
4 48 0.007048378 ubox
4 50 0.144975527 ubox
4 53 0.987300643 ubox
5 46 0.021295701 ubox
5 49 0.145104862 ubox
5 52 0.988977722 ubox
6 51 0.988713468 ubox
7 45 0.030271212 ubox
7 47 0.156390098 ubox
7 50 0.987168813 ubox
8 44 0.030278742 ubox
8 46 0.159294298 ubox
8 49 0.986048411 ubox
9 42 0.007079397 ubox
9 44 0.907327800 ubox
9 46 0.256342643 ubox
9 49 0.005082695 ubox
10 41 0.007376433 ubox
10 43 0.936780781 ubox
10 45 0.312644079 ubox
10 47 0.155812396 ubox
10 48 0.007658483 ubox
11 19 0.003691463 ubox
11 40 0.007352869 ubox
11 42 0.937158872 ubox
11 44 0.312413514 ubox
11 46 0.154775330 ubox
12 18 0.003806817 ubox
12 41 0.935553214 ubox
12 43 0.307547910 ubox
12 45 0.144644686 ubox
13 17 0.003312331 ubox
14 39 0.995104879 ubox
14 41 0.066670076 ubox
14 43 0.035658042 ubox
15 38 0.997380133 ubox
15 40 0.065135462 ubox
15 42 0.030692551 ubox
16 37 0.997606333 ubox
16 38 0.059923376 ubox
17 36 0.967432757 ubox
17 37 0.057301564 ubox
17 38 0.025507508 ubox
18 27 0.005129030 ubox
18 37 0.027363019 ubox
18 40 0.009251798 ubox
19 26 0.005158548 ubox
19 32 0.026953965 ubox
19 33 0.435473534 ubox
19 39 0.009189514 ubox
20 31 0.026956382 ubox
20 32 0.435908129 ubox
20 33 0.898939042 ubox
21 31 0.435585551 ubox
21 32 0.899376685 ubox
21 33 0.016806031 ubox
22 31 0.898679485 ubox
22 32 0.016857721 ubox
25 41 0.003557282 ubox
26 40 0.003559975 ubox
27 39 0.003548804 ubox
37 48 0.004299963 ubox
38 47 0.004308978 ubox
39 46 0.004309666 ubox
40 45 0.005196974 ubox
40 47 0.004717403 ubox
41 46 0.004731507 ubox
44 48 0.016883714 ubox
44 53 0.003937605 ubox
45 52 0.003946342 ubox
46 53 0.006994189 ubox
47 52 0.006972342 ubox
52 105 0.028892369 ubox
53 104 0.028374394 ubox
54 103 0.024428965 ubox
54 104 0.009059849 ubox
55 103 0.006254847 ubox
55 104 0.049438437 ubox
56 103 0.063581486 ubox
56 104 0.973024995 ubox
57 103 0.988433645 ubox
58 102 0.999789573 ubox
59 101 0.999841290 ubox
59 105 0.017242241 ubox
60 100 0.999841379 ubox
60 104 0.017448776 ubox
61 99 0.999807131 ubox
61 103 0.017438015 ubox
62 98 0.997724866 ubox
62 102 0.015720475 ubox
63 72 0.007400150 ubox
63 93 0.204950102 ubox
63 97 0.973818471 ubox
63 98 0.062773056 ubox
63 101 0.013128335 ubox
63 102 0.007572308 ubox
64 71 0.013263773 ubox
64 92 0.289525576 ubox
64 95 0.861450290 ubox
64 97 0.088614172 ubox
64 101 0.010677468 ubox
65 70 0.013600994 ubox
65 91 0.289850116 ubox
65 94 0.861799634 ubox
65 99 0.009103444 ubox
65 100 0.013047079 ubox
66 74 0.006181232 ubox
66 90 0.291103913 ubox
66 92 0.609124695 ubox
66 93 0.609647470 ubox
66 95 0.413593368 ubox
66 98 0.004004132 ubox
66 101 0.004197203 ubox
67 73 0.006381365 ubox
67 89 0.291225818 ubox
67 91 0.860892015 ubox
67 94 0.414097856 ubox
67 99 0.012823256 ubox
67 100 0.005696824 ubox
68 72 0.006021552 ubox
68 90 0.857500946 ubox
68 93 0.413962244 ubox
68 98 0.012128569 ubox
69 92 0.413296783 ubox
69 93 0.015316355 ubox
69 97 0.011251010 ubox
69 98 0.011928433 ubox
70 90 0.399398430 ubox
70 92 0.021048236 ubox
70 97 0.013359956 ubox
71 86 0.876415810 ubox
71 87 0.064687793 ubox
71 88 0.054991514 ubox
71 89 0.361546301 ubox
71 91 0.023104157 ubox
71 96 0.014093942 ubox
72 85 0.995593705 ubox
72 86 0.057203448 ubox
72 87 0.052553888 ubox
73 84 0.999136880 ubox
73 95 0.022395870 ubox
74 83 0.999015293 ubox
74 85 0.029734295 ubox
74 94 0.022425602 ubox
75 82 0.999194119 ubox
75 84 0.029095546 ubox
75 93 0.023576388 ubox
76 81 0.993011733 ubox
76 84 0.011048009 ubox
76 92 0.023633866 ubox
77 83 0.012661734 ubox
77 91 0.023653310 ubox
78 82 0.012573485 ubox
78 90 0.023665562 ubox
79 89 0.023637760 ubox
81 87 0.023107735 ubox
82 86 0.022985537 ubox
4 53 0.9500000 lbox
5 52 0.9500000 lbox
6 51 0.9500000 lbox
7 50 0.9500000 lbox
8 49 0.9500000 lbox
9 44 0.9500000 lbox
10 43 0.9500000 lbox
11 42 0.9500000 lbox
12 41 0.9500000 lbox
14 39 0.9500000 lbox
15 38 0.9500000 lbox
16 37 0.9500000 lbox
17 36 0.9500000 lbox
20 33 0.9500000 lbox
21 32 0.9500000 lbox
22 31 0.9500000 lbox
56 104 0.9500000 lbox
57 103 0.9500000 lbox
58 102 0.9500000 lbox
59 101 0.9500000 lbox
60 100 0.9500000 lbox
61 99 0.9500000 lbox
62 98 0.9500000 lbox
63 97 0.9500000 lbox
64 95 0.9500000 lbox
65 94 0.9500000 lbox
66 93 0.9500000 lbox
67 91 0.9500000 lbox
68 90 0.9500000 lbox
71 86 0.9500000 lbox
72 85 0.9500000 lbox
73 84 0.9500000 lbox
74 83 0.9500000 lbox
75 82 0.9500000 lbox
76 81 0.9500000 lbox
showpage
end
%%EOF
