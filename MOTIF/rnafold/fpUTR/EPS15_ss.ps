%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCGCCUGCGGCCGCUCCCUCCGCCUCCUCCCCGCCCCGAGCCCCAGUCAGCCCGUCUUCCUUCCCCUCCCUUGCAUGAUGGAAACACC\
) } def
/len { sequence length } bind def

/coor [
[69.26686096 126.30360413]
[61.11853409 138.89744568]
[52.97020721 151.49128723]
[44.82188416 164.08511353]
[50.53259277 178.51312256]
[46.63948822 193.53388977]
[34.63954163 203.37162781]
[19.14698029 204.24351501]
[6.11901093 195.81430054]
[0.56515187 181.32518005]
[4.62097597 166.34753418]
[16.72693634 156.64056396]
[32.22804260 155.93679810]
[40.37636948 143.34295654]
[48.52469635 130.74911499]
[56.67301941 118.15527344]
[53.15902328 103.57268524]
[40.16864395 96.07268524]
[27.17826080 88.57268524]
[14.18788052 81.07268524]
[3.32458949 87.71924591]
[-9.27027321 89.02464294]
[-21.12830925 84.79628754]
[-29.95275879 75.91996002]
[-34.06331635 64.17507935]
[-32.71586609 51.87823105]
[-45.17028809 43.51836395]
[-59.28747940 49.73997879]
[-74.52370453 47.31903076]
[-86.01714325 37.02804184]
[-90.10027313 22.15082550]
[-85.47019196 7.43464804]
[-73.60433960 -2.42461181]
[-58.28905869 -4.28090000]
[-44.41140747 2.45811844]
[-36.39969254 15.64204693]
[-36.81042099 31.06394196]
[-24.35600090 39.42380905]
[-8.26703167 32.55485535]
[8.91096687 36.60272598]
[20.44044304 50.16809464]
[21.68787956 68.08230591]
[34.67826080 75.58230591]
[47.66864395 83.08230591]
[60.65902328 90.58230591]
[64.56293488 81.33649445]
[70.57401276 73.42459869]
[78.27864838 67.30942535]
[87.16633606 63.33312225]
[96.66343689 61.69824982]
[106.17005157 62.45798111]
[115.09799957 65.51579285]
[122.90714264 70.63449860]
[129.13806152 77.45394897]
[133.43901062 85.51598358]
[135.58557129 94.29505920]
[150.56631470 95.05479431]
[165.54705811 95.81452942]
[180.52781677 96.57427216]
[195.50856018 97.33400726]
[200.47987366 83.06997681]
[209.26959229 70.78511810]
[221.16514587 61.47532272]
[235.20223999 55.89528275]
[250.24293518 54.49735641]
[265.06796265 57.39486313]
[278.47549438 64.35291290]
[289.37866211 74.80744934]
[296.89361572 87.91097260]
[300.41113281 102.60123444]
[299.64602661 117.68737030]
[294.66040039 131.94639587]
[285.85833740 144.22241211]
[273.95343018 153.52026367]
[259.91073608 159.08619690]
[244.86865234 160.46900940]
[230.04655457 157.55661011]
[216.64601135 150.58509827]
[205.75334167 140.11961365]
[198.25157166 127.00854492]
[194.74882507 112.31475830]
[179.76806641 111.55501556]
[164.78732300 110.79528046]
[149.80657959 110.03554535]
[134.82583618 109.27580261]
[132.02684021 117.57100677]
[127.25642395 125.05207825]
[120.74552917 131.25193787]
[112.83531189 135.76783752]
[103.95950317 138.28718567]
[94.62064362 138.60870361]
[85.36171722 136.65725708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[17 45]
[18 44]
[19 43]
[20 42]
[26 38]
[27 37]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
