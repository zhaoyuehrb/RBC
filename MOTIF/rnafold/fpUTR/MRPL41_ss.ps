%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGCCAAUCGGAGCCGCUCUUGCUGCGACGCAGCGGUCGGAAGCGGAGCAAGGUCGAGGCCGGGUUGGCGCCGGAGCCGGGGCCGCUUGGAGCUCGUGUGGGGUCUCCGGUCCAGGGCGCGGC\
) } def
/len { sequence length } bind def

/coor [
[74.98815918 426.95745850]
[58.63143158 425.77862549]
[51.71837616 410.90780640]
[61.36054993 397.64279175]
[62.43879318 382.68161011]
[63.51703644 367.72039795]
[64.59527588 352.75921631]
[65.67352295 337.79800415]
[66.75176239 322.83682251]
[59.94934845 309.58627319]
[68.65863037 296.37799072]
[69.73686981 281.41680908]
[59.98558426 264.78713989]
[71.29221344 248.17765808]
[71.65190887 233.18197632]
[72.01159668 218.18629456]
[72.37128448 203.19061279]
[72.73097229 188.19491577]
[73.09066772 173.19923401]
[73.45035553 158.20355225]
[73.63021088 143.20462036]
[73.63021088 128.20462036]
[64.87174225 116.02722168]
[50.65101242 111.25533295]
[36.43028259 106.48344421]
[22.20955658 101.71155548]
[7.98882866 96.93967438]
[-1.24458766 97.16856384]
[-6.51329041 91.87909698]
[-20.61550331 86.76757812]
[-34.71771622 81.65605927]
[-52.71456909 85.33015442]
[-63.54281998 71.57417297]
[-77.76354980 66.80228424]
[-91.98427582 62.03039551]
[-106.20500183 57.25851059]
[-120.24149323 64.52160645]
[-135.27703857 59.65254974]
[-142.39132690 45.54005814]
[-137.36358643 30.55682564]
[-123.17666626 23.59213829]
[-108.24742126 28.77802086]
[-101.43312073 43.03778076]
[-87.21238708 47.80966949]
[-72.99166107 52.58155441]
[-58.77093506 57.35344315]
[-47.74086380 52.23758316]
[-35.81243134 56.17303848]
[-29.60619545 67.55384827]
[-15.50398445 72.66536713]
[-1.40177226 77.77688599]
[12.76071548 82.71894836]
[26.98144341 87.49082947]
[41.20217133 92.26271820]
[55.42289734 97.03460693]
[69.64362335 101.80649567]
[71.68781281 91.27910614]
[77.16475677 82.38524628]
[85.20481110 76.16394806]
[94.65560913 73.25952911]
[104.24504852 73.85830688]
[112.75198364 77.68807983]
[123.67172241 67.40414429]
[134.59146118 57.12021637]
[145.51121521 46.83628845]
[150.34425354 29.11546898]
[167.50450134 25.65076065]
[178.17449951 15.10794067]
[188.84449768 4.56511974]
[199.51451111 -5.97770071]
[210.18450928 -16.52052116]
[220.85450745 -27.06334114]
[224.81245422 -35.40858078]
[231.90904236 -37.72720718]
[242.82879639 -48.01113510]
[253.74853516 -58.29506683]
[258.49017334 -73.38902283]
[273.06005859 -76.48215485]
[283.97979736 -86.76609039]
[294.89953613 -97.05001831]
[299.09603882 -112.90313721]
[314.99215698 -116.93369293]
[326.23535156 -104.99539948]
[321.25955200 -89.36933899]
[305.18347168 -86.13027191]
[294.26373291 -75.84634399]
[283.34399414 -65.56241608]
[279.38342285 -51.20403290]
[264.03247070 -47.37532425]
[253.11271667 -37.09139252]
[242.19297791 -26.80746460]
[231.39732361 -16.39334106]
[220.72732544 -5.85051966]
[210.05732727 4.69230080]
[199.38732910 15.23512173]
[188.71731567 25.77794266]
[178.04731750 36.32076263]
[177.64175415 48.47271729]
[168.75169373 57.34640884]
[155.79513550 57.75603104]
[144.87539673 68.03996277]
[133.95565796 78.32389069]
[123.03591156 88.60781860]
[126.44101715 98.48962402]
[125.66110229 109.22621918]
[120.57760620 119.06875610]
[111.79201508 126.31874847]
[100.56338501 129.61952209]
[88.63021088 128.20462036]
[88.63021088 143.20462036]
[91.78459930 151.88552856]
[88.44604492 158.56323242]
[88.08634949 173.55891418]
[87.72666168 188.55461121]
[87.36697388 203.55029297]
[87.00727844 218.54597473]
[86.64759064 233.54167175]
[86.28790283 248.53735352]
[94.31923676 256.05679321]
[96.78035736 266.55328369]
[93.08283997 276.44515991]
[84.69806671 282.49502563]
[83.61982727 297.45623779]
[90.34511566 311.77688599]
[81.71295929 323.91506958]
[80.63471222 338.87625122]
[79.55647278 353.83743286]
[78.47823334 368.79864502]
[77.39998627 383.75982666]
[76.32174683 398.72103882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[11 123]
[12 122]
[14 118]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 110]
[22 109]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[29 51]
[30 50]
[31 49]
[33 46]
[34 45]
[35 44]
[36 43]
[62 103]
[63 102]
[64 101]
[65 100]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[74 91]
[75 90]
[76 89]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
