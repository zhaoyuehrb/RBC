%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCACAGCAAAUAGCGGGAAGCAGAAAAGCAAGAGAGGAGGUCUCUAAGUGGAUACACUGUUGCUGAGUCUAGACACCAGAAGAACGUUGCAGGCGGCGACUCACAGUUCUAGCACUGCCUAGGAGAGCGUGGUGGCCCCAGCUCAGAAUCUGCAGAAGUGCACAGCUCCAUCCACACCACUCAGGGU\
) } def
/len { sequence length } bind def

/coor [
[109.85955048 238.41191101]
[112.36683655 219.19308472]
[112.61354828 204.19511414]
[112.86026001 189.19712830]
[113.10697174 174.19915771]
[105.79110718 172.54743958]
[95.61460876 183.56738281]
[91.15938568 169.24400330]
[83.84352875 167.59228516]
[77.62250519 181.24140930]
[81.87076569 196.71176147]
[72.30822754 209.59342957]
[56.27045059 210.00471497]
[46.06023788 197.63009644]
[49.50999832 181.96232605]
[63.97336960 175.02038574]
[70.19438934 161.37126160]
[64.29783630 156.73654175]
[55.02839279 168.52964783]
[41.10427475 174.10807800]
[43.23528671 159.26019287]
[52.50473022 147.46708679]
[46.60817719 142.83236694]
[34.81507111 152.10180664]
[33.18397903 167.82170105]
[20.86248589 177.71899414]
[5.16071558 175.92179871]
[-4.60575151 163.49635315]
[-2.64264274 147.81445312]
[9.88536453 138.17990112]
[25.54562569 140.30870056]
[37.33873367 131.03926086]
[30.89376450 117.49369049]
[24.44938469 103.94931793]
[9.81766415 107.25276184]
[-4.81405735 110.55620575]
[-19.44577789 113.85964966]
[-34.07749939 117.16309357]
[-43.82601547 129.90460205]
[-59.86807632 130.08303833]
[-69.89758301 117.56151581]
[-66.22076416 101.94548035]
[-51.65815353 95.21421051]
[-37.38094330 102.53137207]
[-22.74922180 99.22792816]
[-8.11749935 95.92448425]
[6.51422167 92.62104034]
[21.14594269 89.31759644]
[51.70294571 54.09573364]
[90.10072327 47.23109818]
[117.35243225 63.13258362]
[126.12924194 50.96839142]
[134.90605164 38.80419540]
[143.68286133 26.64000320]
[152.45967102 14.47581005]
[161.23648071 2.31161714]
[155.73797607 -13.67549229]
[160.79571533 -29.63331413]
[174.23013306 -39.33982086]
[190.63682556 -39.13437653]
[199.21237183 -51.44128036]
[207.78793335 -63.74818420]
[216.36347961 -76.05508423]
[202.52114868 -83.07816315]
[196.44358826 -96.37087250]
[199.75997925 -109.67452240]
[190.01356506 -121.07659912]
[180.26715088 -132.47868347]
[172.29804993 -136.97868347]
[170.45608521 -144.14938354]
[160.89852905 -155.71023560]
[145.14317322 -156.95301819]
[134.94493103 -169.02659607]
[136.35423279 -184.76792908]
[148.53495789 -194.83795166]
[164.26051331 -193.26231384]
[174.20118713 -180.97579956]
[172.45936584 -165.26779175]
[182.01693726 -153.70693970]
[191.66923523 -142.22509766]
[201.41564941 -130.82301331]
[211.16206360 -119.42092896]
[211.57411194 -119.55521393]
[211.98895264 -119.68061066]
[213.46688843 -134.60762024]
[214.94482422 -149.53463745]
[216.42274475 -164.46165466]
[217.90068054 -179.38865662]
[218.76373291 -194.36381531]
[219.01043701 -209.36178589]
[219.25714111 -224.35975647]
[219.50386047 -239.35772705]
[219.75056458 -254.35569763]
[209.67274475 -266.83837891]
[213.28918457 -282.46850586]
[227.82568359 -289.25598145]
[242.13105774 -281.99404907]
[245.23147583 -266.25344849]
[234.74853516 -254.10899353]
[234.50183105 -239.11102295]
[234.25511169 -224.11305237]
[234.00840759 -209.11508179]
[233.76170349 -194.11709595]
[246.24674988 -202.43115234]
[260.58187866 -198.01481628]
[266.22369385 -184.11625671]
[259.02267456 -170.95777893]
[244.27513123 -168.21736145]
[232.82768250 -177.91073608]
[231.34976196 -162.98371887]
[229.87182617 -148.05670166]
[228.39390564 -133.12969971]
[226.91596985 -118.20268250]
[238.65135193 -107.50334930]
[239.66874695 -90.11342621]
[254.55474854 -91.95915222]
[269.44076538 -93.80487823]
[284.32678223 -95.65059662]
[299.21276855 -97.49632263]
[304.15737915 -111.89466858]
[314.81967163 -122.67440796]
[329.04672241 -127.73512268]
[343.99877930 -126.12351227]
[356.71588135 -118.21247864]
[364.70397949 -105.61661530]
[379.58999634 -107.46234131]
[394.47601318 -109.30806732]
[409.29327393 -111.64239502]
[424.02572632 -114.46281433]
[438.75817871 -117.28322601]
[453.49063110 -120.10363770]
[461.34667969 -124.79822540]
[468.48846436 -122.84719086]
[483.26531982 -125.42491150]
[498.04217529 -128.00263977]
[508.40728760 -140.24778748]
[524.43865967 -139.63475037]
[533.83831787 -126.63376617]
[529.39569092 -111.21810150]
[514.51879883 -105.21331787]
[500.61990356 -113.22578430]
[485.84304810 -110.64806366]
[471.06619263 -108.07034302]
[456.31103516 -105.37118530]
[441.57858276 -102.55076599]
[426.84613037 -99.73035431]
[412.11367798 -96.90994263]
[410.42779541 -94.65011597]
[407.73757935 -92.92785645]
[404.24545288 -92.13189697]
[400.29162598 -92.56977081]
[396.32174683 -94.42205811]
[381.43572998 -92.57633209]
[366.54971313 -90.73060608]
[361.87976074 -76.56526184]
[351.47982788 -65.78793335]
[337.37414551 -60.57344055]
[322.34194946 -62.00628281]
[309.36984253 -69.85558319]
[301.05850220 -82.61031342]
[286.17248535 -80.76458740]
[271.28649902 -78.91886139]
[256.40048218 -77.07314301]
[241.51446533 -75.22741699]
[228.67039490 -67.47953033]
[220.09483337 -55.17263031]
[211.51928711 -42.86572647]
[202.94372559 -30.55882263]
[208.47277832 -18.39646149]
[207.25607300 -4.98308420]
[199.50518799 6.16374350]
[187.15922546 12.06778145]
[173.40068054 11.08842754]
[164.62387085 23.25262070]
[155.84706116 35.41681290]
[147.07025146 47.58100891]
[138.29344177 59.74520111]
[129.51663208 71.90939331]
[138.60966492 76.76647186]
[146.82557678 84.33853149]
[153.40028381 94.43559265]
[157.61968994 106.66225433]
[158.87284851 120.43246460]
[156.70075989 134.99758911]
[150.83723450 149.48651123]
[141.23936462 162.95562744]
[128.10493469 174.44587708]
[127.85823059 189.44384766]
[127.61151886 204.44181824]
[127.36480713 219.43978882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 190]
[3 189]
[4 188]
[5 187]
[9 17]
[10 16]
[23 32]
[24 31]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[51 178]
[52 177]
[53 176]
[54 175]
[55 174]
[56 173]
[60 168]
[61 167]
[62 166]
[63 165]
[66 82]
[67 81]
[68 80]
[70 79]
[71 78]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[115 164]
[116 163]
[117 162]
[118 161]
[119 160]
[125 154]
[126 153]
[127 152]
[128 147]
[129 146]
[130 145]
[131 144]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
