%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAUCCCAGGAGGCCGAGGCGGCUUGCCCCGCAUCUCAGAAGCCGGGCAGGCCCUGAGCCUUCUGACCUCACAUCCUCUGCCACACCACAGUGGAGAAACCAGAA\
) } def
/len { sequence length } bind def

/coor [
[210.33656311 275.44467163]
[201.38981628 266.02743530]
[194.19692993 255.20687866]
[188.97396851 243.30577087]
[185.87818909 230.67939758]
[185.00334167 217.70489502]
[186.37683105 204.77006531]
[189.95880127 192.26170349]
[195.64338684 180.55404663]
[183.61154175 171.59666443]
[171.57969666 162.63929749]
[159.54785156 153.68191528]
[147.51600647 144.72453308]
[135.48414612 135.76715088]
[123.45230103 126.80977631]
[111.42045593 117.85240173]
[99.09548187 121.17349243]
[87.09864044 116.81338501]
[79.78208160 106.35380554]
[79.80007935 93.58922577]
[68.03384399 84.28569794]
[59.21538925 81.35213470]
[56.06587982 74.53645325]
[44.57521057 64.89463806]
[33.08454514 55.25282288]
[21.59387779 45.61100769]
[10.10321140 35.96919632]
[-1.38745522 26.32738113]
[-12.87812138 16.68556786]
[-24.36878777 7.04375315]
[-35.85945511 -2.59806108]
[-51.40444183 -5.54152489]
[-56.18065643 -19.64957428]
[-67.67132568 -29.29138756]
[-83.21630859 -32.23485184]
[-87.99252319 -46.34289932]
[-99.48319244 -55.98471451]
[-115.50318146 -61.53414917]
[-114.60540009 -78.46430969]
[-98.08834076 -82.28834534]
[-89.84137726 -67.47537994]
[-78.35070801 -57.83356857]
[-63.62761307 -55.57975006]
[-58.02951050 -40.78205490]
[-46.53884125 -31.14023972]
[-31.81574631 -28.88642311]
[-26.21764183 -14.08872795]
[-14.72697449 -4.44691372]
[-3.23630762 5.19490051]
[8.25435925 14.83671474]
[19.74502563 24.47852898]
[31.23569298 34.12034225]
[42.72636032 43.76215744]
[54.21702576 53.40397263]
[65.70769501 63.04578400]
[77.33737183 72.51946259]
[89.10360718 81.82299042]
[105.37295532 79.49960327]
[118.41123962 89.50423431]
[120.37783051 105.82054901]
[132.40968323 114.77793121]
[144.44152832 123.73530579]
[156.47337341 132.69268799]
[168.50521851 141.65007019]
[180.53707886 150.60745239]
[192.56892395 159.56481934]
[204.60076904 168.52220154]
[217.68856812 157.18212891]
[233.01531982 149.13668823]
[249.76823425 144.80882263]
[267.05966187 144.42445374]
[283.97430420 148.00064087]
[299.61743164 155.34487915]
[313.16241455 166.06544495]
[323.89431763 179.59228516]
[331.24765015 195.20733643]
[334.83612061 212.08265686]
[334.47299194 229.32429504]
[330.18078613 246.01965332]
[343.58526611 252.75163269]
[356.98974609 259.48361206]
[366.21923828 260.57333374]
[370.68194580 266.61132812]
[383.88494873 273.73031616]
[397.08798218 280.84933472]
[410.29098511 287.96832275]
[425.35754395 283.19607544]
[439.34704590 290.54931641]
[443.95971680 305.66546631]
[436.45901489 319.57644653]
[421.29492188 324.02905273]
[407.46405029 316.38168335]
[403.17199707 301.17135620]
[389.96896362 294.05233765]
[376.76596069 286.93334961]
[363.56292725 279.81433105]
[350.25775146 272.88812256]
[336.85327148 266.15612793]
[323.44879150 259.42413330]
[315.60260010 269.73104858]
[306.09564209 278.53485107]
[295.21133423 285.57141113]
[283.27432251 290.62939453]
[270.64099121 293.55639648]
[257.68872070 294.26376343]
[244.80461121 292.72909546]
[232.37400818 288.99700928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[20 57]
[21 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[33 45]
[34 44]
[36 42]
[37 41]
[79 99]
[80 98]
[81 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
