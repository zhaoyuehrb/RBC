%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGUCACGAGAUUUGGAGCUCGCGGGAAAACUUGUCUCUGCGUUGUGGGGAGGACGCGCGCUCGCGCGGGAUUUUCAAGCGUAGGCCCCCGGGAACUCGAGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[56.94635773 292.25878906]
[43.80114365 292.26654053]
[38.40581131 306.26263428]
[33.01048279 320.25869751]
[36.08610916 336.36685181]
[23.49870491 346.87823486]
[8.19711399 340.97964478]
[5.92229986 324.73904419]
[19.01439667 314.86337280]
[24.40972710 300.86727905]
[29.80505753 286.87121582]
[17.94337082 275.01550293]
[12.37041569 259.13980103]
[14.23111629 242.36248779]
[23.20526695 228.00088501]
[37.56144714 218.91531372]
[54.49089050 216.93945312]
[59.08575439 202.66053772]
[55.61907578 188.17498779]
[67.21174622 177.40834045]
[71.80660248 163.12942505]
[76.40146637 148.85052490]
[72.93479156 134.36495972]
[84.52745819 123.59832001]
[89.12232208 109.31941223]
[86.36464691 95.61222839]
[96.59877014 86.08572388]
[101.19363403 71.80681610]
[105.78849030 57.52790451]
[110.38335419 43.24899673]
[104.39674377 38.18287659]
[99.92633820 31.76630402]
[97.26322174 24.43706894]
[96.57564545 16.69168091]
[97.89844513 9.05172539]
[101.13146210 2.02874660]
[106.04701233 -3.91000843]
[112.30593109 -8.37267113]
[119.48089600 -11.06860065]
[127.08566284 -11.82729149]
[134.60795593 -10.60911846]
[142.29103088 -23.49206734]
[149.97410583 -36.37501526]
[157.65718079 -49.25796509]
[165.34025574 -62.14091492]
[173.02333069 -75.02386475]
[180.70640564 -87.90681458]
[188.38948059 -100.78976440]
[190.14074707 -109.90786743]
[196.47666931 -113.92419434]
[204.52124023 -126.58456421]
[212.56581116 -139.24493408]
[220.61038208 -151.90528870]
[228.65495300 -164.56565857]
[236.69950867 -177.22602844]
[231.15922546 -191.60000610]
[235.09906006 -206.30821228]
[246.80569458 -215.76435852]
[261.65795898 -216.50506592]
[269.70251465 -229.16543579]
[277.74710083 -241.82579041]
[285.79165649 -254.48616028]
[293.83621216 -267.14654541]
[293.99124146 -283.54495239]
[308.40133667 -291.37319946]
[322.24261475 -282.57827759]
[321.27636719 -266.20761108]
[306.49658203 -259.10195923]
[298.45202637 -246.44158936]
[290.40744019 -233.78123474]
[282.36288452 -221.12086487]
[274.31832886 -208.46049500]
[279.95629883 -194.70001221]
[276.36801147 -180.08534241]
[264.72604370 -170.27119446]
[249.35987854 -169.18145752]
[241.31530762 -156.52108765]
[233.27073669 -143.86073303]
[225.22618103 -131.20036316]
[217.18161011 -118.53999329]
[209.13703918 -105.87962341]
[201.27243042 -93.10668945]
[193.58935547 -80.22373962]
[185.90628052 -67.34078979]
[178.22320557 -54.45783997]
[170.54013062 -41.57489014]
[162.85705566 -28.69194221]
[155.17398071 -15.80899334]
[147.49090576 -2.92604423]
[156.16949463 18.42222404]
[146.75302124 39.72408676]
[124.66226196 47.84385681]
[120.06739807 62.12276840]
[115.47254181 76.40167999]
[110.87767792 90.68058777]
[113.63535309 104.38777161]
[103.40122986 113.91427612]
[98.80636597 128.19319153]
[101.94438934 143.70007324]
[90.68037415 153.44538879]
[86.08551788 167.72428894]
[81.49065399 182.00320435]
[84.62867737 197.51008606]
[73.36466217 207.25540161]
[68.76979828 221.53431702]
[79.08454132 230.04176331]
[85.83824921 241.54386902]
[88.23017883 254.63325500]
[85.99169922 267.71710205]
[79.41631317 279.21096802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[17 105]
[18 104]
[20 102]
[21 101]
[22 100]
[24 98]
[25 97]
[27 95]
[28 94]
[29 93]
[30 92]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
