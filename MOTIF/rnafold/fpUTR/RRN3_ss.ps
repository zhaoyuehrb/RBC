%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAAGGUUGCGCUGGCACGCGCAACUUCCGGGACAGAGGCUGUGGCUGGAAGGAGCUGGGCAUCCGGCCUGAGGCGCAGCGGUCGCGUUAGUUCGGCCCA\
) } def
/len { sequence length } bind def

/coor [
[88.66394043 125.62798309]
[80.82107544 119.12046051]
[67.68088531 126.35478973]
[54.54069519 133.58911133]
[46.18317795 147.02273560]
[31.30232048 146.38298035]
[18.16213036 153.61730957]
[5.02194023 160.85162354]
[-8.11824894 168.08595276]
[-21.25843811 175.32026672]
[-34.39862823 182.55459595]
[-47.53881836 189.78890991]
[-60.67900848 197.02323914]
[-73.81919861 204.25755310]
[-77.97792053 219.50486755]
[-91.74131012 227.27304077]
[-106.94380951 222.95335388]
[-114.56602478 209.10859680]
[-110.08584595 193.95262146]
[-96.16127777 186.47720337]
[-81.05352020 191.11737061]
[-67.91333008 183.88304138]
[-54.77313995 176.64872742]
[-41.63294983 169.41439819]
[-28.49276161 162.18008423]
[-15.35257149 154.94575500]
[-2.21238184 147.71144104]
[10.92780781 140.47711182]
[24.06799698 133.24279785]
[31.48563957 120.32660675]
[47.30637360 120.44892120]
[60.44656372 113.21459961]
[73.58675385 105.98027802]
[72.53976440 96.59795380]
[74.79510498 87.22270966]
[80.21692657 79.00534058]
[88.27287292 73.00162506]
[98.08412170 70.03749084]
[108.52053070 70.59761810]
[118.33072662 74.75216675]
[126.29211426 82.13228607]
[134.88534546 69.83772278]
[143.47857666 57.54315567]
[152.07180786 45.24858856]
[160.66505432 32.95402145]
[169.25828552 20.65945625]
[170.82237244 4.91575336]
[184.45538330 -1.08343697]
[193.04861450 -13.37800217]
[201.26290894 -25.92891121]
[209.09063721 -38.72448730]
[205.60696411 -53.90677261]
[213.72767639 -66.77179718]
[228.22312927 -69.99938202]
[236.05085754 -82.79495239]
[243.87857056 -95.59053040]
[251.51025391 -108.50399017]
[258.94412231 -121.53232574]
[261.54226685 -138.28601074]
[278.36047363 -140.42727661]
[285.07379150 -124.85912323]
[271.97247314 -114.09845734]
[264.53860474 -101.07012177]
[263.94757080 -93.57342529]
[256.67416382 -87.76280212]
[248.84642029 -74.96723175]
[241.01870728 -62.17165375]
[244.74563599 -47.79648209]
[236.98948669 -34.70843887]
[221.88621521 -30.89676094]
[214.05848694 -18.10118675]
[214.33811951 -13.17655849]
[211.40660095 -8.05643749]
[205.34318542 -4.78476954]
[196.74993896 7.50979614]
[195.80050659 22.37410927]
[181.55284119 29.25268936]
[172.95960999 41.54725647]
[164.36637878 53.84181976]
[155.77314758 66.13639069]
[147.17991638 78.43095398]
[138.58668518 90.72551727]
[139.27270508 105.70982361]
[148.95341492 117.16774750]
[158.63410950 128.62567139]
[168.31481934 140.08360291]
[177.99551392 151.54151917]
[193.46060181 150.27238464]
[206.70057678 158.36453247]
[212.62438965 172.70635986]
[208.95420837 187.78315735]
[197.10131836 197.79756165]
[181.62336731 198.89884949]
[168.47195435 190.66355896]
[162.70408630 176.25830078]
[166.53758240 161.22222900]
[156.85688782 149.76429749]
[147.17619324 138.30636597]
[137.49548340 126.84844971]
[127.81478882 115.39052582]
[119.75283051 123.69366455]
[109.53434753 128.34547424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[41 82]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[48 75]
[49 74]
[50 71]
[51 70]
[54 67]
[55 66]
[56 65]
[57 63]
[58 62]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
