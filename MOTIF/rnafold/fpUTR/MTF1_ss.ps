%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGACGUUAGGGGAAGGUGGGGGCAAUCAUGGUGCCGCUGGGGAGGGGAGAAGCUGCUGCUGCCGCCGUUGCCGGGAGCCGCGGAGACAAGUCAUUACGUUUUCAUUUCUCACAACUGGGCUGAGCACAACUGAACC\
) } def
/len { sequence length } bind def

/coor [
[168.83895874 193.89433289]
[168.60794067 187.31604004]
[169.73905945 180.81820679]
[172.18916321 174.68038940]
[161.01242065 164.67636108]
[149.83569336 154.67233276]
[138.65896606 144.66830444]
[127.48223114 134.66426086]
[116.30550385 124.66023254]
[109.55861664 128.45359802]
[101.94780731 130.40672302]
[93.97350311 130.32890320]
[86.17621613 128.16510010]
[79.09992981 124.00364685]
[73.25418091 118.07422638]
[69.07752991 110.73574829]
[66.90502167 102.45490265]
[66.94198608 93.77659607]
[69.24626160 85.28812408]
[73.72023010 77.57937622]
[60.16483307 71.15666962]
[46.60942841 64.73397064]
[33.05402756 58.31127548]
[19.49862480 51.88857269]
[3.71454215 52.97176361]
[-4.47405338 40.53005219]
[-18.02945518 34.10735321]
[-31.58485794 27.68465424]
[-45.14025879 21.26195335]
[-55.21426392 32.50448227]
[-68.03508759 40.44480133]
[-82.55921173 44.44667435]
[-97.60728455 44.19401932]
[-111.95991516 39.71586227]
[-124.45648193 31.38327980]
[-134.08897400 19.87867928]
[-140.08329773 6.13990879]
[-141.96150208 -8.71619034]
[-139.57984924 -23.48456955]
[-153.13525391 -29.90726852]
[-168.91932678 -28.82407951]
[-177.10792542 -41.26578903]
[-190.66333008 -47.68848801]
[-206.95581055 -45.82105255]
[-216.50056458 -59.15633011]
[-209.47877502 -73.97613525]
[-193.11386108 -75.03511810]
[-184.24063110 -61.24389267]
[-170.68522644 -54.82119370]
[-155.87071228 -56.36377716]
[-146.71255493 -43.46266937]
[-133.15715027 -37.03997040]
[-123.23645020 -48.23627090]
[-110.55000305 -56.19147491]
[-96.12139893 -60.25363159]
[-81.11765289 -60.08531189]
[-66.75479889 -55.69160461]
[-54.19934845 -47.42041397]
[-44.47352219 -35.93492126]
[-38.37204742 -22.16041183]
[-36.39722061 -7.20974779]
[-38.71755981 7.70655203]
[-25.16215706 14.12925148]
[-11.60675621 20.55195236]
[1.94864643 26.97465134]
[16.76315689 25.43206596]
[25.92132568 38.33317184]
[39.47672653 44.75587082]
[53.03212738 51.17856979]
[66.58753204 57.60127258]
[80.14293671 64.02397156]
[94.37770081 59.29413223]
[101.39371490 46.03609848]
[108.40972900 32.77806091]
[108.02577972 16.96151352]
[120.81752777 9.33127117]
[127.83354187 -3.92676616]
[134.84954834 -17.18480301]
[128.79588318 -31.60309219]
[133.47575378 -46.52397919]
[146.67945862 -54.90227509]
[162.17263794 -52.78200912]
[172.63987732 -41.16430283]
[173.13885498 -25.53468132]
[163.43397522 -13.27297688]
[148.10758972 -10.16878891]
[141.09158325 3.08924818]
[134.07556152 16.34728432]
[134.96134949 31.21552849]
[121.66777039 39.79407501]
[114.65175629 53.05211258]
[107.63574219 66.31015015]
[124.26730347 77.80861664]
[130.94558716 95.84165955]
[126.30953217 113.48349762]
[137.48626709 123.48753357]
[148.66299438 133.49156189]
[159.83972168 143.49560547]
[171.01646423 153.49963379]
[182.19319153 163.50366211]
[206.68157959 158.79745483]
[226.84396362 173.07061768]
[230.47399902 197.26966858]
[243.73204041 204.28567505]
[259.54858398 203.90173340]
[267.17883301 216.69348145]
[280.43685913 223.70948792]
[293.69491577 230.72550964]
[306.95294189 237.74151611]
[317.24209595 233.91842651]
[327.71188354 236.38287354]
[334.91360474 244.07234192]
[336.61459351 254.24586487]
[349.54931641 261.84146118]
[362.48403931 269.43707275]
[375.41876221 277.03265381]
[391.81253052 276.61245728]
[400.14135742 290.73910522]
[391.83728027 304.88034058]
[375.44281006 304.48886108]
[367.82315063 289.96737671]
[354.88845825 282.37176514]
[341.95373535 274.77618408]
[329.01901245 267.18060303]
[309.77661133 268.53356934]
[299.93692017 250.99955750]
[286.67889404 243.98353577]
[273.42083740 236.96752930]
[260.16281128 229.95150757]
[245.29457092 230.83729553]
[236.71601868 217.54371643]
[223.45799255 210.52769470]
[218.73176575 214.89794922]
[213.19541931 218.20782471]
[207.08355713 220.31072998]
[200.65652466 221.11131287]
[194.18922424 220.56987000]
[187.95947266 218.70419312]
[182.23596191 215.58906555]
[177.26673889 211.35331726]
[173.26841736 206.17443848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[26 65]
[27 64]
[28 63]
[29 62]
[39 52]
[40 51]
[42 49]
[43 48]
[72 92]
[73 91]
[74 90]
[76 88]
[77 87]
[78 86]
[103 132]
[104 131]
[106 129]
[107 128]
[108 127]
[109 126]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
