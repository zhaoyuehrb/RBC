%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGACCCGGCCGGCCCAGGCCCGCGCCCGCCGCGGCCCUGAGAGGCCCCGGCAGGUCCCGGCCCGGCGGCGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[143.07920837 191.06221008]
[136.87226868 183.70787048]
[134.87812805 174.14988708]
[137.70648193 164.65829468]
[128.88970947 152.52304077]
[120.07292938 140.38777161]
[111.25614929 128.25251770]
[102.43936920 116.11727142]
[90.91274261 113.53287506]
[84.15832520 103.84162903]
[85.72322845 92.13294220]
[77.38967133 79.66089630]
[69.05612183 67.18885040]
[60.23934174 55.05359650]
[50.95293045 43.27384567]
[41.66652298 31.49408913]
[32.38011169 19.71433640]
[22.41632652 8.50171089]
[11.80972385 -2.10489058]
[1.20312262 -12.71149254]
[-9.40347958 -23.31809425]
[-24.63277245 -27.60519218]
[-28.16121483 -42.07582855]
[-38.76781464 -52.68243027]
[-49.37441635 -63.28903198]
[-59.98102188 -73.89563751]
[-70.58762360 -84.50223541]
[-86.56610870 -85.94010925]
[-95.28375244 -99.40792847]
[-90.05312347 -114.57434082]
[-74.88671112 -119.80496979]
[-61.41889191 -111.08732605]
[-59.98102188 -95.10884094]
[-49.37441635 -84.50223541]
[-38.76781464 -73.89563751]
[-28.16121483 -63.28903198]
[-17.55461311 -52.68243027]
[-3.08397532 -49.15398788]
[1.20312262 -33.92469406]
[11.80972385 -23.31809425]
[22.41632652 -12.71149254]
[33.02292633 -2.10489058]
[36.79625320 -1.83883083]
[40.58895493 0.44559768]
[43.36557388 4.71383858]
[44.15986633 10.42792702]
[53.44627762 22.20768166]
[62.73268509 33.98743439]
[72.01909637 45.76718903]
[76.82830811 47.21446991]
[80.66366577 51.85975647]
[81.52816010 58.85530090]
[89.86171722 71.32734680]
[98.19526672 83.79938507]
[113.37322235 90.67938232]
[114.57462311 107.30049133]
[123.39140320 119.43574524]
[132.20819092 131.57099915]
[141.02496338 143.70625305]
[149.84173584 155.84150696]
[169.88598633 162.87202454]
[172.19497681 183.22282410]
[182.37698364 194.23767090]
[192.55899048 205.25250244]
[203.16558838 215.85910034]
[214.18043518 226.04112244]
[225.19526672 236.22312927]
[241.30076599 239.31266785]
[246.42153931 254.89179993]
[235.28977966 266.93408203]
[219.35688782 263.05139160]
[215.01325989 247.23796082]
[203.99842834 237.05595398]
[192.98358154 226.87394714]
[188.00717163 226.19680786]
[183.49235535 222.20869446]
[181.54415894 215.43450928]
[171.36215210 204.41967773]
[161.18013000 193.40483093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[11 54]
[12 53]
[13 52]
[14 49]
[15 48]
[16 47]
[17 46]
[18 42]
[19 41]
[20 40]
[21 39]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[62 79]
[63 78]
[64 77]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
