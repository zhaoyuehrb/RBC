%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCUCCGAACGCGCGGGCGCACGCUGAGAGCCGGGAGGACCAGGUGAGGGGGCCUCCGUCUUCCGAAGACAGGUGUAAAGAAUAUCCAGCUGGUGGCUACAGUUCCCCCUCUGGUUUUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-69.77843475 356.35366821]
[-77.85964966 368.99066162]
[-85.94086456 381.62768555]
[-94.02207947 394.26467896]
[-102.10329437 406.90170288]
[-110.18450928 419.53869629]
[-111.10089111 435.33334351]
[-124.47610474 441.88720703]
[-132.55731201 454.52420044]
[-132.75984192 470.92211914]
[-147.19255066 478.70858765]
[-161.00828552 469.87356567]
[-159.99462891 453.50579834]
[-145.19432068 446.44299316]
[-137.11311340 433.80599976]
[-136.77474976 418.91522217]
[-122.82151794 411.45748901]
[-114.74030304 398.82046509]
[-106.65908813 386.18347168]
[-98.57787323 373.54644775]
[-90.49665833 360.90945435]
[-82.41544342 348.27243042]
[-86.45604706 341.95394897]
[-94.53726196 329.31692505]
[-98.57787323 322.99841309]
[-113.43925476 325.03292847]
[-128.30064392 327.06744385]
[-143.17330933 335.20623779]
[-155.11120605 323.16781616]
[-146.84800720 308.36392212]
[-130.33514404 312.20605469]
[-115.47376251 310.17153931]
[-100.61238098 308.13705444]
[-87.23886871 301.34371948]
[-76.83086395 290.54217529]
[-66.42285919 279.74063110]
[-63.16347504 265.20703125]
[-48.01633453 260.63812256]
[-37.60832977 249.83659363]
[-27.20032310 239.03503418]
[-16.79231644 228.23348999]
[-6.38430977 217.43194580]
[4.02369690 206.63040161]
[14.43170357 195.82885742]
[14.69312191 192.21012878]
[16.78869247 188.55230713]
[20.70978355 185.74822998]
[26.03465652 184.64863586]
[37.21487427 174.64849854]
[48.39508820 164.64836121]
[59.57530594 154.64822388]
[70.75552368 144.64808655]
[81.93573761 134.64794922]
[93.11595154 124.64781189]
[83.72038269 118.86563110]
[77.85373688 109.87007904]
[76.43121338 99.52053070]
[79.47866821 89.83441162]
[86.17420197 82.59418488]
[95.05052185 79.01969147]
[96.90106964 64.13427734]
[98.75160980 49.24886703]
[100.60215759 34.36345673]
[102.45269775 19.47804451]
[98.40661621 3.01397538]
[113.10720062 -5.43169212]
[125.29232788 6.35638952]
[117.33811188 21.32858849]
[115.48757172 36.21400070]
[113.63702393 51.09941101]
[111.78647614 65.98482513]
[109.93593597 80.87023926]
[110.23493958 81.02852631]
[110.53141785 81.19149017]
[121.95555878 71.47094727]
[133.37969971 61.75040817]
[144.80384827 52.02986526]
[156.22799683 42.30932236]
[158.94442749 26.49791718]
[173.06884766 18.89001083]
[187.76620483 25.32173729]
[191.76194763 40.85922623]
[181.99089050 53.58344650]
[165.94853210 53.73346710]
[154.52438354 63.45401001]
[143.10025024 73.17455292]
[131.67610168 82.89509583]
[120.25196075 92.61563873]
[123.20304871 104.16365814]
[119.49456787 116.57909393]
[134.35595703 118.61360168]
[149.21734619 120.64810944]
[164.07872009 122.68261719]
[178.94010925 124.71712494]
[190.40132141 114.07875824]
[206.02182007 113.34806061]
[218.42610168 122.87003326]
[221.75721741 138.14869690]
[214.44235229 151.96994019]
[199.93533325 157.80778503]
[185.08593750 152.90577698]
[176.90560913 139.57850647]
[162.04421997 137.54400635]
[147.18283081 135.50949097]
[132.32144165 133.47499084]
[117.46006012 131.44047546]
[103.11609650 135.82801819]
[91.93587494 145.82817078]
[80.75566101 155.82830811]
[69.57544708 165.82844543]
[58.39522934 175.82858276]
[47.21501160 185.82872009]
[36.03479767 195.82885742]
[25.23324966 206.23686218]
[14.82524300 217.03840637]
[4.41723680 227.83995056]
[-5.99076986 238.64149475]
[-16.39877701 249.44303894]
[-26.80678177 260.24459839]
[-37.21479034 271.04614258]
[-41.21862030 286.35235596]
[-55.62131119 290.14862061]
[-66.02931976 300.95016479]
[-76.43732452 311.75173950]
[-68.61064148 317.81396484]
[-63.61187363 328.39157104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[8 15]
[9 14]
[25 33]
[26 32]
[27 31]
[34 124]
[35 123]
[36 122]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
