%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAGUUCCAGUGGAGAAAGAUUAGACUCCUCAGAAGCUAAUUGACUAGGGAAGGAUCAGGAAGACAAGACACAUCAAAAAGGGGAGGGAAUCUACAAUGGAAGGACACAAGAAAGAUCAGCUGGAUUAAGUAGUCAUGAUUAUGCAAAGCCAUAUCCAGAGACCAAGGUGUAAAGCAGGUCGGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[470.01196289 285.77355957]
[458.61123657 277.42242432]
[449.06869507 266.99151611]
[441.75735474 254.88552856]
[436.96362305 241.57475281]
[434.87603760 227.57672119]
[435.57785034 213.43612671]
[421.06268311 209.65322876]
[406.54754639 205.87033081]
[392.03237915 202.08743286]
[377.51724243 198.30453491]
[363.25006104 202.58200073]
[351.84722900 191.61448669]
[337.33209229 187.83158875]
[331.51425171 193.19856262]
[323.95684814 195.85098267]
[315.87329102 195.28404236]
[308.59301758 191.51626587]
[303.34286499 185.09867859]
[301.04046631 177.03533936]
[286.80545044 172.30632019]
[272.57040405 167.57731628]
[258.33535767 162.84829712]
[244.10031128 158.11929321]
[233.49295044 165.45196533]
[220.40370178 165.32919312]
[209.61955261 157.57156372]
[205.21362305 144.83276367]
[191.05828857 139.87025452]
[176.90295410 134.90776062]
[162.74761963 129.94525146]
[148.59228516 124.98274994]
[134.43693542 120.02024841]
[124.43881226 133.43405151]
[109.30724335 141.97425842]
[91.37233734 143.73089600]
[73.64384460 137.88851929]
[59.30603409 124.95072937]
[51.14810181 106.73609924]
[36.29446411 104.64579010]
[23.75176811 113.88259125]
[8.71784210 111.55112457]
[-0.01074241 99.53665924]
[-14.86438179 97.44634247]
[-29.71802139 95.35603333]
[-44.57165909 93.26572418]
[-59.44198608 91.29763794]
[-74.32799530 89.45191193]
[-86.63786316 99.36367035]
[-102.34172821 97.58490753]
[-112.12277985 85.17094421]
[-110.17809296 69.48675537]
[-97.66140747 59.83749771]
[-81.99865723 61.94790268]
[-72.48227692 74.56590271]
[-57.59626389 76.41162872]
[-50.55939484 74.11071014]
[-42.48134995 78.41208649]
[-27.62771034 80.50239563]
[-12.77407074 82.59270477]
[2.07956886 84.68301392]
[13.78499985 75.54417419]
[28.87847900 77.45245361]
[38.38477325 89.79214478]
[53.23841476 91.88246155]
[56.79087448 85.27716064]
[43.58038330 78.17202759]
[50.68571854 64.96164703]
[63.89580154 72.06655121]
[67.44826508 65.46125031]
[57.51564026 54.22101593]
[41.80350494 49.52411270]
[38.27885056 33.50822067]
[50.56753922 22.64911270]
[66.02802277 28.11771202]
[68.75587463 44.28839111]
[78.68849945 55.52862549]
[95.90109253 52.44227982]
[112.52999878 55.57944870]
[126.47042084 64.13713837]
[136.10234070 76.65296173]
[140.47656250 91.23992157]
[139.39944458 105.86491394]
[153.55477905 110.82741547]
[167.71011353 115.78991699]
[181.86544800 120.75241852]
[196.02079773 125.71492004]
[210.17613220 130.67742920]
[225.79071045 122.80854034]
[241.95001221 128.54618835]
[248.82931519 143.88424683]
[263.06436157 148.61325073]
[277.29940796 153.34226990]
[291.53445435 158.07128906]
[305.76950073 162.80029297]
[327.31008911 156.65461731]
[341.11499023 173.31643677]
[355.63012695 177.09933472]
[370.93554688 173.09243774]
[381.30014038 183.78938293]
[395.81527710 187.57228088]
[410.33044434 191.35517883]
[424.84558105 195.13807678]
[439.36074829 198.92095947]
[446.63442993 184.70797729]
[456.86669922 172.46049500]
[469.54870605 162.78305054]
[484.05062866 156.15243530]
[499.65322876 152.89425659]
[515.58331299 153.16693115]
[531.05224609 156.95397949]
[545.29467773 164.06500244]
[557.60681152 174.14524841]
[567.38085938 186.69328308]
[574.13525391 201.08598328]
[577.53826904 216.60943604]
[577.42425537 232.49438477]
[592.05596924 235.79782104]
[606.68774414 239.10125732]
[621.31945801 242.40470886]
[636.48480225 237.89657593]
[647.19555664 248.24682617]
[661.82733154 251.55027771]
[676.45904541 254.85371399]
[689.71813965 246.67848206]
[704.50970459 250.23707581]
[712.22180176 262.92797852]
[726.85351562 266.23141479]
[735.65954590 253.87303162]
[748.49163818 245.84924316]
[763.37780762 243.35635376]
[778.04461670 246.74353027]
[790.26397705 255.46429443]
[798.19201660 268.16436768]
[800.64697266 282.89196777]
[815.27868652 286.19540405]
[829.91046143 289.49884033]
[847.35229492 283.61886597]
[859.77880859 296.00006104]
[874.46289062 299.06237793]
[887.58569336 290.67019653]
[902.43383789 293.98501587]
[910.35363770 306.54736328]
[925.03771973 309.60971069]
[939.72180176 312.67202759]
[954.40588379 315.73437500]
[967.48834229 306.86737061]
[982.99304199 309.93014526]
[991.72125244 323.10565186]
[988.49468994 338.57708740]
[975.22766113 347.16549683]
[959.79119873 343.77557373]
[951.34350586 330.41845703]
[936.65948486 327.35610962]
[921.97540283 324.29376221]
[907.29132080 321.23141479]
[895.01037598 329.58093262]
[880.07501221 326.68444824]
[871.40057373 313.74645996]
[856.71649170 310.68411255]
[846.41778564 317.04977417]
[834.15045166 314.60656738]
[826.60699463 304.13058472]
[811.97528076 300.82711792]
[797.34356689 297.52368164]
[788.79907227 309.76791382]
[776.18353271 317.82980347]
[761.40264893 320.45465088]
[746.70330811 317.21176147]
[734.33215332 308.56491089]
[726.19219971 295.80621338]
[723.55010986 280.86312866]
[708.91839600 277.55969238]
[696.50177002 285.70608521]
[681.61608887 282.56436157]
[673.15557861 269.48544312]
[658.52386475 266.18200684]
[643.89215088 262.87854004]
[629.77337646 267.62295532]
[618.01599121 257.03643799]
[603.38427734 253.73298645]
[588.75256348 250.42953491]
[574.12084961 247.12609863]
[568.32214355 259.96276855]
[560.11279297 271.41519165]
[549.81079102 281.03628540]
[537.81585693 288.45001221]
[524.59381104 293.36599731]
[510.65887451 295.59094238]
[496.55310059 295.03619385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 104]
[8 103]
[9 102]
[10 101]
[11 100]
[13 98]
[14 97]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[39 65]
[40 64]
[43 61]
[44 60]
[45 59]
[46 58]
[47 56]
[48 55]
[70 77]
[71 76]
[117 183]
[118 182]
[119 181]
[120 180]
[122 178]
[123 177]
[124 176]
[127 173]
[128 172]
[135 165]
[136 164]
[137 163]
[139 160]
[140 159]
[143 156]
[144 155]
[145 154]
[146 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
