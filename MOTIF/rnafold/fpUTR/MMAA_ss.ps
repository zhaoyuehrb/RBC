%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGUGGCUUCGGGCGGGGAGGUCACAAUCACAUUGAGCCAAAACGCAUCCAGUGUUUUCUCCAGUUACAAAUAAAACGAAU\
) } def
/len { sequence length } bind def

/coor [
[61.39974213 179.42263794]
[51.45837021 173.76750183]
[42.33129120 166.87492371]
[34.17161179 158.86050415]
[27.11621284 149.85868835]
[21.28344727 140.02049255]
[16.77116013 129.51094055]
[2.25890565 133.30493164]
[-12.25335026 137.09893799]
[-26.76560593 140.89294434]
[-41.27786255 144.68693542]
[-55.79011536 148.48094177]
[-70.30236816 152.27494812]
[-84.81462860 156.06893921]
[-91.34555817 170.27742004]
[-105.50360870 176.91697693]
[-120.60377502 172.85261536]
[-129.51622009 160.00340271]
[-128.03276062 144.43634033]
[-116.85384369 133.50172424]
[-101.25780487 132.36254883]
[-88.60862732 141.55668640]
[-74.09637451 137.76268005]
[-59.58411789 133.96868896]
[-45.07186127 130.17468262]
[-30.55960655 126.38068390]
[-16.04734993 122.58668518]
[-1.53509521 118.79268646]
[12.97716045 114.99868011]
[11.85682869 94.64122009]
[15.43510914 74.56941986]
[23.52125549 55.85323715]
[35.68422318 39.49036789]
[51.27564240 26.35305786]
[69.46439362 17.14161491]
[89.28089142 12.34707165]
[109.66879272 12.22500610]
[129.54127502 16.78192520]
[147.83901978 25.77491760]
[157.00662231 13.90246964]
[166.17424011 2.03002262]
[167.50625610 -4.84093428]
[171.60865784 -9.19885445]
[176.47019958 -10.34186077]
[186.47998047 -21.51344299]
[196.48976135 -32.68502808]
[206.49954224 -43.85660934]
[216.50932312 -55.02819061]
[226.51910400 -66.19977570]
[236.52888489 -77.37136078]
[237.08949280 -93.40460968]
[250.05966187 -102.84677887]
[265.48977661 -98.45462799]
[271.54318237 -83.59745026]
[263.57623291 -69.67239380]
[247.70046997 -67.36157227]
[237.69068909 -56.18999100]
[227.68090820 -45.01840973]
[217.67112732 -33.84682846]
[207.66134644 -22.67524338]
[197.65156555 -11.50366116]
[187.64178467 -0.33207878]
[178.04667664 11.19762802]
[168.87907410 23.07007599]
[159.71147156 34.94252396]
[167.61911011 43.20572281]
[174.39244080 52.42164993]
[179.91783142 62.43571472]
[184.10258484 73.07991791]
[186.87651062 84.17572021]
[188.19306946 95.53696442]
[188.03016663 106.97308350]
[186.39056396 118.29222870]
[183.30174255 129.30451965]
[178.81552124 139.82522583]
[173.00717163 149.67784119]
[165.97410583 158.69712830]
[157.83432007 166.73175049]
[148.72434998 173.64694214]
[138.79704285 179.32670593]
[128.21888733 183.67573547]
[117.16736603 186.62110901]
[105.82786560 188.11340332]
[94.39059448 188.12757874]
[83.04742432 186.66340637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[39 65]
[40 64]
[41 63]
[44 62]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
