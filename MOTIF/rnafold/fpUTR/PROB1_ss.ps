%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCUUUAAGGCGCGGUGACCCCCACGGCAUCCUCGGGCGGGGCGGGGACAGUGCCGGCGCCACCAGCGGAGGCGAAUGCGAGGGAGAUAGUGCACGGCGUCCGGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[87.41352844 401.65658569]
[98.36549377 390.49465942]
[96.74371338 375.58258057]
[95.12192535 360.67053223]
[93.50013733 345.75845337]
[91.87835693 330.84637451]
[81.03196716 341.20764160]
[66.03225708 341.11431885]
[55.31564331 330.61886597]
[54.90956497 315.62438965]
[65.04241180 304.56430054]
[80.01508331 303.65927124]
[91.40623474 313.41802979]
[92.21831512 298.44000244]
[93.03040314 283.46200562]
[93.84248352 268.48400879]
[94.65456390 253.50601196]
[87.61765289 240.37852478]
[96.09073639 227.01747131]
[96.90281677 212.03947449]
[97.71490479 197.06147766]
[98.32409668 182.07385254]
[98.73028564 167.07934570]
[98.12109375 152.09172058]
[96.49930573 137.17965698]
[94.87751770 122.26758575]
[84.73731995 117.00399017]
[78.41301727 107.48914337]
[77.48578644 96.10189819]
[82.18743896 85.68923950]
[91.34250641 78.85448456]
[90.53042603 63.87648010]
[89.71833801 48.89847946]
[88.90625763 33.92047882]
[87.48654175 18.98781395]
[85.46154022 4.12513113]
[83.43654633 -10.73755264]
[81.41154480 -25.60023689]
[71.58041382 -34.08328247]
[70.26324463 -46.59663773]
[77.62665558 -56.29867935]
[76.00486755 -71.21074677]
[74.18131256 -86.09948730]
[72.15631104 -100.96217346]
[69.93023682 -115.79607391]
[67.50350952 -130.59846497]
[65.07678223 -145.40086365]
[62.65005112 -160.20326233]
[50.65406418 -174.09213257]
[57.32867813 -190.26051331]
[54.50199890 -204.99176025]
[41.28195572 -213.65235901]
[38.13977814 -229.14114380]
[46.93966675 -242.26889038]
[62.46080017 -245.24713135]
[75.49476624 -236.30894470]
[78.30874634 -220.75718689]
[69.23325348 -207.81845093]
[72.05993652 -193.08718872]
[81.94676971 -185.97383118]
[84.36057281 -173.62504578]
[77.45244598 -162.63000488]
[79.87918091 -147.82760620]
[82.30590820 -133.02520752]
[84.73263550 -118.22280121]
[88.97642517 -112.04923248]
[87.01898956 -102.98717499]
[89.04399109 -88.12448883]
[93.11904907 -81.83826447]
[90.91693878 -72.83253479]
[92.53872681 -57.92046356]
[103.66512299 -44.42341614]
[96.27422333 -27.62523651]
[98.29922485 -12.76255322]
[100.32422638 2.10013080]
[102.34922791 16.96281433]
[105.05298615 19.41892433]
[106.63475800 23.36282730]
[106.38261414 28.21993256]
[103.88425446 33.10839462]
[104.69634247 48.08639526]
[105.50842285 63.06439590]
[106.32051086 78.04239655]
[120.22113037 89.36087036]
[121.67596436 107.22756195]
[109.78958893 120.64579773]
[111.41137695 135.55787659]
[113.03316498 150.46994019]
[124.81242371 141.18290710]
[139.47824097 144.33152771]
[146.40748596 157.63513184]
[140.58099365 171.45727539]
[126.21916199 175.78598022]
[113.72478485 167.48553467]
[113.31859589 182.48004150]
[116.24433136 191.27734375]
[112.69290161 197.87355042]
[111.88082123 212.85156250]
[111.06873322 227.82955933]
[118.04756165 242.02838135]
[109.63256836 254.31809998]
[108.82048798 269.29611206]
[108.00839996 284.27410889]
[107.19631958 299.25210571]
[106.38423157 314.23010254]
[106.79042816 329.22460938]
[108.41220856 344.13665771]
[110.03399658 359.04873657]
[111.65577698 373.96081543]
[113.27756500 388.87286377]
[126.37296295 397.41949463]
[130.86146545 412.39904785]
[124.62374878 426.73867798]
[110.60506439 433.66763306]
[95.42460632 429.91427612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[19 99]
[20 98]
[21 97]
[22 95]
[23 94]
[24 88]
[25 87]
[26 86]
[31 83]
[32 82]
[33 81]
[34 80]
[35 76]
[36 75]
[37 74]
[38 73]
[41 71]
[42 70]
[43 68]
[44 67]
[45 65]
[46 64]
[47 63]
[48 62]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
