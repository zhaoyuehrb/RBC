%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCCAUCUUGGAUUGCGAACUGGGUCGCUACGCUUCACGCCAGGGGCGGAGUGGCGGCCCUUCUGUUACCCGCCACACACGUCGCCGCUGGGGACUGGGAAAUCAGGGCAUCGGAGAGUGCCACAUUA\
) } def
/len { sequence length } bind def

/coor [
[111.65783691 322.74319458]
[109.52311707 307.89587402]
[107.38839722 293.04855347]
[103.28267670 286.81491089]
[105.38390350 277.82293701]
[103.60311890 262.92901611]
[100.39224243 259.27429199]
[99.50756073 253.53584290]
[102.10941315 247.28625488]
[101.03932953 232.32446289]
[99.96923828 217.36268616]
[98.89914703 202.40090942]
[90.27361298 190.25802612]
[97.00670624 175.94105530]
[95.93661499 160.97926331]
[94.86653137 146.01748657]
[91.21597290 139.50683594]
[93.95333099 130.68766785]
[93.23960114 115.70465851]
[85.81452179 128.73800659]
[71.18399048 132.04672241]
[58.87327957 123.47663116]
[56.89733505 108.60734558]
[66.54260254 97.11958313]
[81.52907562 96.49233246]
[68.53869629 88.99233246]
[55.54831314 81.49233246]
[42.55792999 73.99233246]
[29.56755066 66.49233246]
[16.57716942 58.99233246]
[3.58678865 51.49233246]
[-9.40359211 43.99233246]
[-22.39397430 36.49233246]
[-35.38435364 28.99233246]
[-40.80062485 29.00474739]
[-45.19919968 27.07462311]
[-47.99828339 23.94038963]
[-49.00637817 20.46531105]
[-61.42861938 12.05769730]
[-70.38384247 9.80498600]
[-74.04316711 3.29925823]
[-86.26181030 -5.40159559]
[-98.48044586 -14.10244942]
[-110.69908905 -22.80330276]
[-127.10848236 -27.06569862]
[-127.55523682 -44.01375961]
[-111.39318848 -49.13474274]
[-101.99823761 -35.02194214]
[-89.77959442 -26.32108879]
[-77.56095886 -17.62023544]
[-65.34231567 -8.91938114]
[-53.02100372 -0.36454153]
[-40.59876633 8.04307270]
[-27.88435364 16.00195122]
[-14.89397335 23.50195122]
[-1.90359247 31.00195122]
[11.08678818 38.50194931]
[24.07716942 46.00194931]
[37.06755066 53.50194931]
[50.05792999 61.00194931]
[63.04831314 68.50195312]
[76.03869629 76.00195312]
[89.02907562 83.50195312]
[100.04538727 83.42395020]
[107.44715881 88.93291473]
[120.25537872 81.12590027]
[133.06359863 73.31888580]
[145.87181091 65.51186371]
[158.58622742 57.55298615]
[171.20503235 49.44337463]
[178.63137817 35.47340775]
[193.52133179 35.10155487]
[206.14013672 26.99194336]
[218.75894165 18.88232994]
[231.37774658 10.77271843]
[216.68037415 7.77483797]
[206.41754150 -3.16473436]
[204.36303711 -18.02336693]
[211.27230835 -31.33733749]
[224.60475159 -38.21091461]
[239.45782471 -36.11658859]
[250.36985779 -25.82447433]
[253.32833862 -11.11912155]
[247.24494934 2.59260464]
[261.17047119 -2.98233223]
[275.09597778 -8.55726910]
[285.03195190 -20.86933708]
[299.72320557 -18.41652489]
[313.64874268 -23.99146080]
[326.10607910 -35.49150085]
[340.60522461 -26.70451927]
[336.17541504 -10.33952522]
[319.22366333 -10.06594181]
[305.29815674 -4.49100494]
[296.35821533 7.42230558]
[280.67092896 5.36824989]
[266.74542236 10.94318676]
[252.81988525 16.51812363]
[239.48735046 23.39152145]
[226.86856079 31.50113297]
[214.24975586 39.61074448]
[201.63095093 47.72035980]
[195.10719299 61.11027145]
[179.31463623 62.06217575]
[166.69584656 70.17179108]
[162.73109436 76.49603271]
[153.67883301 78.32008362]
[140.87062073 86.12709808]
[128.06239319 93.93412018]
[115.25417328 101.74113464]
[108.22261047 114.99092865]
[108.93634033 129.97393799]
[109.82830811 144.94740295]
[110.89839935 159.90917969]
[111.96848297 174.87095642]
[120.67056274 188.08399963]
[113.86093140 201.33081055]
[114.93102264 216.29260254]
[116.00110626 231.25437927]
[117.07119751 246.21615601]
[118.49703979 261.14825439]
[120.27782440 276.04214478]
[122.23571777 290.91381836]
[124.37043762 305.76113892]
[126.50515747 320.60848999]
[139.88731384 328.69869995]
[144.88938904 343.51470947]
[139.14953613 358.06076050]
[125.37796783 365.46871948]
[110.07717896 362.24075317]
[100.47173309 349.90100098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[5 122]
[6 121]
[9 120]
[10 119]
[11 118]
[12 117]
[14 115]
[15 114]
[16 113]
[18 112]
[19 111]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[38 53]
[39 52]
[41 51]
[42 50]
[43 49]
[44 48]
[65 110]
[66 109]
[67 108]
[68 107]
[69 105]
[70 104]
[72 102]
[73 101]
[74 100]
[75 99]
[84 98]
[85 97]
[86 96]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
