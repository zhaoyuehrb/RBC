%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCUGCGCGCCCGGCCCGCUCCAGCCGCCGCGCAUCCUCGGCCCGCGCCCCGAGACCCGCGCCCAGCUAGCCCCGGCCCCGCUCGGCGCCCCAGGCAGCUCGGCUGCGCUCGCCGCGGGACGGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[93.58304596 213.45301819]
[92.52890778 198.49011230]
[91.47476196 183.52719116]
[90.42061615 168.56428528]
[89.36647797 153.60136414]
[88.31233215 138.63845825]
[75.01168823 131.70356750]
[62.14011002 139.40567017]
[49.26853180 147.10778809]
[36.39695740 154.80990601]
[23.52538300 162.51200867]
[10.65380669 170.21412659]
[6.72901011 182.56471252]
[-4.22751808 188.69952393]
[-16.02741241 185.78269958]
[-29.07600784 193.18095398]
[-42.12460327 200.57920837]
[-55.17319870 207.97746277]
[-56.78184509 223.41093445]
[-67.17984772 234.92878723]
[-82.36895752 238.10220337]
[-96.50865173 231.71092224]
[-104.16194153 218.21250916]
[-102.38596344 202.79740906]
[-91.86363220 191.39302063]
[-76.64098358 188.38456726]
[-62.57145309 194.92886353]
[-49.52285767 187.53060913]
[-36.47426224 180.13235474]
[-23.42566490 172.73410034]
[-15.41823387 157.16337585]
[2.95169401 157.34255981]
[15.82326984 149.64044189]
[28.69484520 141.93832397]
[41.56642151 134.23622131]
[54.43799591 126.53410339]
[67.30957031 118.83198547]
[63.70641708 107.13061523]
[64.07994843 95.13430786]
[68.23412323 84.13172150]
[75.57508087 75.25453186]
[85.19070435 69.36122894]
[95.96176147 66.95503235]
[106.69132996 68.14368439]
[116.23764801 72.64398193]
[126.71918488 61.91377640]
[137.20072937 51.18357086]
[147.68226624 40.45336533]
[158.16381836 29.72316170]
[168.64535522 18.99295616]
[167.89097595 8.02424049]
[173.23513794 -1.33076429]
[182.67218018 -6.05414772]
[192.92561340 -4.77942944]
[203.89859009 -15.00654697]
[214.87155151 -25.23366356]
[225.84452820 -35.46078110]
[227.41567993 -40.63589859]
[230.54260254 -44.27360535]
[234.35238647 -46.03461838]
[237.96672058 -45.98736191]
[249.63128662 -55.41805267]
[261.29583740 -64.84874725]
[272.84906006 -74.41552734]
[284.28933716 -84.11707306]
[295.72961426 -93.81861877]
[301.25054932 -108.64527893]
[315.96170044 -110.97577667]
[327.40197754 -120.67732239]
[338.84225464 -130.37887573]
[350.28253174 -140.08041382]
[354.85964966 -148.09585571]
[362.10659790 -149.87149048]
[373.77117920 -159.30216980]
[385.43572998 -168.73286438]
[386.92904663 -186.11743164]
[400.24206543 -196.86853027]
[416.88366699 -194.75282288]
[428.32394409 -204.45437622]
[439.76422119 -214.15591431]
[445.28515625 -228.98257446]
[459.99630737 -231.31307983]
[471.43658447 -241.01461792]
[476.45263672 -256.62780762]
[492.53701782 -259.82540894]
[503.14349365 -247.31800842]
[497.36102295 -231.97216797]
[481.13812256 -229.57434082]
[469.69784546 -219.87280273]
[464.99520874 -205.74005127]
[449.46575928 -202.71563721]
[438.02548218 -193.01409912]
[426.58520508 -183.31254578]
[427.32644653 -170.39437866]
[420.36340332 -159.25735474]
[408.06515503 -154.11587524]
[394.86642456 -157.06831360]
[383.20187378 -147.63761902]
[371.53729248 -138.20692444]
[359.98406982 -128.64013672]
[348.54379272 -118.93859100]
[337.10351562 -109.23704529]
[325.66323853 -99.53549957]
[320.96060181 -85.40275574]
[305.43115234 -82.37834167]
[293.99087524 -72.67679596]
[282.55059814 -62.97524643]
[279.45483398 -56.18646622]
[270.72653198 -53.18418503]
[259.06198120 -43.75349045]
[247.39741516 -34.32279587]
[236.07164001 -24.48781204]
[225.09866333 -14.26069355]
[214.12570190 -4.03357649]
[203.15272522 6.19354105]
[198.97132874 25.01598930]
[179.37556458 29.47449875]
[168.89401245 40.20470428]
[158.41247559 50.93490601]
[147.93093872 61.66511154]
[137.44938660 72.39531708]
[126.96784973 83.12551880]
[133.53308105 104.10725403]
[124.83707428 125.72071838]
[103.27524567 137.58432007]
[104.32939148 152.54722595]
[105.38352966 167.51014709]
[106.43767548 182.47305298]
[107.49182129 197.43597412]
[108.54595947 212.39888000]
[118.16675568 225.67941284]
[111.22975922 240.53909302]
[94.87115479 241.69155884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[15 30]
[16 29]
[17 28]
[18 27]
[45 122]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[54 115]
[55 114]
[56 113]
[57 112]
[61 111]
[62 110]
[63 109]
[64 107]
[65 106]
[66 105]
[68 103]
[69 102]
[70 101]
[71 100]
[73 99]
[74 98]
[75 97]
[78 93]
[79 92]
[80 91]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
