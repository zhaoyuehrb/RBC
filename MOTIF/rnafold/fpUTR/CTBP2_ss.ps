%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUUGGUUGUCCCUGCCGUCUCGGAAGGGUUAGCACACAGCCAGGUCUGUUUUUGAUGUAUGUAAUUGAAGAUUUAUAAAGAAAAGCUUCUCCUCUGCCUCAUCCGCAGUCAUUUUUUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[66.47057343 199.23481750]
[58.52534485 186.51187134]
[54.79979324 171.98188782]
[55.64281464 157.00559998]
[60.97546768 142.98550415]
[70.29639435 131.23640442]
[55.96280289 135.65773010]
[41.62921143 140.07905579]
[27.29561806 144.50038147]
[12.96202564 148.92170715]
[-1.37156677 153.34304810]
[-15.70515919 157.76437378]
[-29.59886360 163.41812134]
[-42.94694138 170.26129150]
[-56.29501724 177.10444641]
[-69.64309692 183.94760132]
[-78.39363861 197.12860107]
[-93.24912262 196.04971313]
[-106.59719849 202.89286804]
[-119.94527435 209.73602295]
[-131.28166199 222.34248352]
[-146.53367615 214.93893433]
[-143.64163208 198.23345947]
[-126.78843689 196.38795471]
[-113.44035339 189.54479980]
[-100.09227753 182.70162964]
[-92.29647827 170.01011658]
[-76.48625183 170.59953308]
[-63.13817596 163.75636292]
[-49.79010010 156.91320801]
[-36.44202423 150.07005310]
[-50.47776413 144.77874756]
[-58.01047134 131.80729675]
[-55.64962006 116.99425507]
[-44.45784760 107.00704956]
[-29.47264099 106.34099579]
[-17.43894386 115.29589081]
[-13.77320004 129.84107971]
[-20.12648582 143.43077087]
[-5.79289436 139.00944519]
[8.54069805 134.58811951]
[22.87429047 130.16679382]
[37.20788193 125.74546814]
[51.54147339 121.32414246]
[65.87506866 116.90280914]
[78.86544800 109.40280914]
[89.86122894 99.20021820]
[93.20626831 91.76136017]
[101.26064301 88.88455963]
[112.50736237 78.95927429]
[123.75407410 69.03398132]
[135.00079346 59.10869598]
[133.67436218 43.76116562]
[141.54734802 30.72776794]
[155.42112732 24.89836121]
[169.89395142 28.31530190]
[181.14067078 18.39001465]
[192.38739014 8.46472645]
[197.61483765 -6.46793413]
[212.27717590 -9.08810711]
[223.52388000 -19.01339531]
[234.77059937 -28.93868256]
[230.26158142 -41.48425674]
[230.31861877 -54.78327942]
[234.91282654 -67.22944641]
[243.46864319 -77.32699585]
[254.93583679 -83.87046051]
[267.91839600 -86.08853149]
[280.84439087 -83.73497009]
[292.15649414 -77.11569977]
[303.88394165 -86.46804047]
[315.61141968 -95.82038879]
[327.33889771 -105.17273712]
[332.16567993 -113.05992889]
[339.47732544 -114.60767365]
[351.43432617 -123.66474152]
[363.39129639 -132.72180176]
[362.94717407 -148.23252869]
[371.73263550 -161.02297974]
[386.36944580 -166.17497253]
[401.22949219 -161.70745850]
[410.59878540 -149.33828735]
[410.87460327 -133.82366943]
[401.95092773 -121.12928009]
[387.25906372 -116.13636780]
[372.44836426 -120.76481628]
[360.49139404 -111.70775604]
[348.53439331 -102.65068817]
[336.69125366 -93.44526672]
[324.96377563 -84.09291840]
[313.23629761 -74.74057007]
[301.50881958 -65.38822174]
[305.75250244 -49.13055038]
[302.50573730 -32.58888626]
[292.36581421 -19.05362129]
[277.30593872 -11.23819065]
[260.29144287 -10.73516560]
[244.69589233 -17.69196510]
[233.44917297 -7.76667690]
[222.20245361 2.15861058]
[217.77944946 16.38134766]
[202.31268311 19.71144485]
[191.06596375 29.63673210]
[179.81924438 39.56201935]
[181.41006470 54.34739304]
[173.90077209 67.38866425]
[159.98957825 73.57992554]
[144.92608643 70.35541534]
[133.67936707 80.28070068]
[122.43264771 90.20599365]
[111.18592834 100.13127899]
[100.06381989 110.19599915]
[89.06803894 120.39859009]
[103.90618896 118.20100403]
[118.71413422 120.59363556]
[132.10513306 127.35243225]
[142.82511902 137.84442139]
[149.87017822 151.08705139]
[152.58053589 165.84014893]
[150.70239258 180.72210693]
[144.41162109 194.33923340]
[134.29734802 205.41629028]
[121.30675507 212.91593933]
[106.65642548 216.13583374]
[91.71833038 214.77442932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[20 24]
[46 113]
[47 112]
[49 111]
[50 110]
[51 109]
[52 108]
[56 104]
[57 103]
[58 102]
[60 100]
[61 99]
[62 98]
[70 92]
[71 91]
[72 90]
[73 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
