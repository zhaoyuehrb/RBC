%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCGCUGUUACAUAGCCCGUAGUCAGAGGCCUUUCAGCCCAGGGGCCGGCGCACGAAACCUGUUUGGAGGUU\
) } def
/len { sequence length } bind def

/coor [
[117.07643127 148.57975769]
[118.19455719 133.04310608]
[108.50006866 121.59684753]
[98.80558014 110.15058899]
[91.39210510 106.38671112]
[88.95887756 98.02511597]
[79.74568939 86.18801117]
[70.53249359 74.35090637]
[61.31930542 62.51379395]
[52.10611343 50.67668915]
[48.22455978 65.16577148]
[36.13837051 74.04969025]
[21.15117455 73.43002319]
[9.83962059 63.57868958]
[7.16741657 48.81863022]
[14.30717182 35.62681961]
[28.12583733 29.79205322]
[42.55902863 33.87437439]
[37.10641098 19.90050697]
[31.65379143 5.92664099]
[26.20117188 -8.04722500]
[15.98372173 -8.05321503]
[6.23240042 -11.02263641]
[-2.21434999 -16.68556404]
[-8.63451099 -24.54111099]
[-12.48419952 -33.90171432]
[-13.44372749 -43.95330048]
[-11.44410324 -53.82607651]
[-6.67179012 -62.66981506]
[0.44858268 -69.72704315]
[9.29197407 -74.39794159]
[7.43658447 -89.28274536]
[5.58119488 -104.16755676]
[-7.04298306 -113.67574310]
[-9.16355705 -129.33712769]
[0.47757173 -141.86006165]
[16.16049194 -143.81494141]
[28.58080673 -134.04194641]
[30.36976242 -118.33924103]
[20.46600342 -106.02294922]
[22.32139397 -91.13813782]
[24.17678261 -76.25332642]
[43.17108536 -68.31715393]
[54.19784546 -50.78790283]
[53.11480331 -29.98358727]
[40.17503738 -13.49984455]
[45.62765884 0.47402155]
[51.08027649 14.44788742]
[56.53289795 28.42175484]
[63.94322205 41.46349716]
[73.15641022 53.30060577]
[82.36960602 65.13771057]
[91.58279419 76.97482300]
[100.79598236 88.81192780]
[110.25184631 100.45610046]
[119.94633484 111.90235901]
[129.64082336 123.34862518]
[145.14961243 124.80299377]
[154.81814575 136.54922485]
[153.33604431 151.32553101]
[163.03053284 162.77178955]
[172.72502136 174.21804810]
[182.41950989 185.66430664]
[192.11399841 197.11056519]
[207.88302612 198.16574097]
[218.22425842 210.11706543]
[217.00244141 225.87405396]
[204.94244385 236.08836365]
[189.19924927 234.70001221]
[179.11302185 222.53268433]
[180.66773987 206.80505371]
[170.97325134 195.35879517]
[161.27876282 183.91253662]
[151.58427429 172.46627808]
[141.88978577 161.02001953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[18 49]
[19 48]
[20 47]
[21 46]
[31 42]
[32 41]
[33 40]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
