%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAGGGCUUCCGCCCGGGUGAGCGCGGGGCUGCUGGGUGACCCGGCUCCUGCUUGCCCCGCAGCCCCGGCCCCCUGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[89.27130127 246.71870422]
[76.97729492 255.31274414]
[62.00101852 256.15603638]
[48.81994247 248.99649048]
[41.37481308 235.97457886]
[41.89086533 220.98548889]
[30.62088966 230.88435364]
[19.35091019 240.78323364]
[8.08093166 250.68209839]
[3.33692479 266.38006592]
[-12.68946838 269.85665894]
[-23.51166916 257.53546143]
[-17.99672318 242.09146118]
[-1.81793594 239.41212463]
[9.45204258 229.51324463]
[20.72202110 219.61437988]
[31.99199867 209.71551514]
[41.46766281 198.08744812]
[48.88750076 185.05111694]
[56.30733871 172.01478577]
[63.72717667 158.97845459]
[57.02754593 140.91526794]
[65.56144714 123.31428528]
[84.45428467 117.20571136]
[90.38604736 103.42840576]
[90.45023346 95.15673065]
[96.79999542 89.25802612]
[103.23680115 75.70932007]
[109.67360687 62.16061020]
[116.11042023 48.61190414]
[122.54722595 35.06319427]
[128.98403931 21.51448822]
[135.42085266 7.96577930]
[141.85765076 -5.58292866]
[148.29446411 -19.13163757]
[147.22770691 -34.91683960]
[159.67793274 -43.09247589]
[166.11474609 -56.64118576]
[172.55155945 -70.18989563]
[178.98837280 -83.73860168]
[185.42517090 -97.28730774]
[184.80641174 -102.16255188]
[185.82722473 -106.47291565]
[188.06077576 -109.73405457]
[190.95893860 -111.67284393]
[193.94096375 -112.24917603]
[202.30329895 -124.70193481]
[210.66564941 -137.15469360]
[211.23554993 -153.54393005]
[225.83909607 -161.00506592]
[239.45339966 -151.86271667]
[238.07324219 -135.52174377]
[223.11840820 -128.79235840]
[214.75605774 -116.33959198]
[206.39372253 -103.88683319]
[198.97387695 -90.85050201]
[192.53707886 -77.30178833]
[186.10026550 -63.75308228]
[179.66345215 -50.20437622]
[173.22663879 -36.65566635]
[174.75379944 -21.83955956]
[161.84317017 -12.69482708]
[155.40635681 0.85388047]
[148.96955872 14.40258884]
[142.53274536 27.95129585]
[136.09593201 41.50000381]
[129.65913391 55.04871368]
[123.22232056 68.59741974]
[116.78550720 82.14612579]
[110.34870148 95.69483948]
[104.16335297 109.36017609]
[98.23159027 123.13748169]
[104.75485229 132.10421753]
[106.81924438 142.91531372]
[104.09976196 153.49574280]
[97.18282318 161.84498596]
[87.44152832 166.41528320]
[76.76351166 166.39828491]
[69.34367371 179.43463135]
[61.92383575 192.47096252]
[54.50399780 205.50729370]
[69.08238220 201.97592163]
[83.33885193 206.63995361]
[93.01113129 218.10498047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 81]
[19 80]
[20 79]
[21 78]
[24 72]
[25 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
