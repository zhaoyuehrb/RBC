%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGUGAAGGCCUGGUGAACGGCUGCGCGACAGAGGACACUUCCUUUUGCGGGUGGCGGCGAACGCGGAGAGCACGCC\
) } def
/len { sequence length } bind def

/coor [
[87.53325653 264.06088257]
[87.53325653 249.06086731]
[87.53325653 234.06086731]
[84.29815674 227.19120789]
[87.83932495 218.47486877]
[88.42822266 203.48643494]
[89.01712036 188.49800110]
[76.34752655 180.66555786]
[69.25229645 167.45520020]
[69.72517395 152.36735535]
[77.73924255 139.45722961]
[91.22731018 132.24479675]
[91.81620789 117.25635529]
[82.05804443 106.54541016]
[82.62689972 92.06705475]
[93.19535828 82.15474701]
[93.78425598 67.16631317]
[80.37651062 59.95564270]
[71.46538544 47.68865967]
[68.77502441 32.82991791]
[72.78633118 18.33611298]
[82.65206909 7.06771803]
[96.37511444 1.22447979]
[96.96401215 -13.76395607]
[97.55290985 -28.75239182]
[98.14180756 -43.74082565]
[98.73070526 -58.72926331]
[91.54116058 -72.82256317]
[99.77216339 -85.23625183]
[100.36106110 -100.22469330]
[89.91199493 -111.77694702]
[90.72273254 -126.96896362]
[101.80044556 -136.85935974]
[102.38934326 -151.84779358]
[102.97824097 -166.83624268]
[103.56713104 -181.82467651]
[104.15602875 -196.81311035]
[104.74492645 -211.80154419]
[96.63455200 -226.05474854]
[105.15534973 -240.06645203]
[121.54185486 -239.42263794]
[128.93702698 -224.78558350]
[119.73336792 -211.21264648]
[119.14447021 -196.22421265]
[118.55557251 -181.23577881]
[117.96667480 -166.24734497]
[117.37777710 -151.25889587]
[116.78887939 -136.27046204]
[127.05644989 -125.54141235]
[126.67273712 -110.33261871]
[115.34949493 -99.63579559]
[114.76060486 -84.64735413]
[121.99226379 -71.62613678]
[113.71913910 -58.14036560]
[113.13024139 -43.15192795]
[112.54134369 -28.16349411]
[111.95244598 -13.17505836]
[111.36354828 1.81337702]
[124.58583832 8.71530056]
[133.53704834 20.72301483]
[136.39881897 35.48686600]
[132.55094910 50.08871460]
[122.70484161 61.61872864]
[108.77268982 67.75521088]
[108.18379211 82.74364471]
[117.94195557 93.45458984]
[117.37310028 107.93294525]
[106.80464172 117.84525299]
[106.21574402 132.83369446]
[119.09635162 141.08215332]
[126.07280731 154.58126831]
[125.36044312 169.65968323]
[117.25061035 182.27264404]
[104.00555420 189.08689880]
[103.41665649 204.07533264]
[102.82775879 219.06376648]
[102.53325653 234.06086731]
[102.53325653 249.06086731]
[102.53325653 264.06088257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[7 74]
[12 69]
[13 68]
[16 65]
[17 64]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
