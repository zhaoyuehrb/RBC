%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAGUACGCACACGCCGAUUUGCCCUUUUGAUUCUUCCACAAUCAGGGUGAGACUGCUCCCAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[79.63497162 268.22476196]
[69.54693604 279.73519897]
[55.26109314 285.22821045]
[40.06022263 283.44155884]
[27.43737411 274.78579712]
[20.29318619 261.24993896]
[20.26933861 245.94445801]
[27.37131310 232.38641357]
[39.96712875 223.69136047]
[55.16235733 221.85734558]
[60.43297958 207.81382751]
[65.70359802 193.77029419]
[70.97422028 179.72677612]
[61.46877670 163.06604004]
[66.87001801 144.35699463]
[84.30689240 135.05131531]
[87.64470673 120.42739105]
[78.02258301 109.32334900]
[76.72531128 94.68770599]
[84.24427795 82.06430817]
[97.73137665 76.23479462]
[101.06919098 61.61087418]
[104.40700531 46.98695755]
[107.74481964 32.36303711]
[111.08263397 17.73911858]
[114.42044830 3.11520076]
[117.75826263 -11.50871754]
[121.09607697 -26.13263702]
[119.31616211 -31.75844955]
[120.04486847 -36.90664291]
[122.59667969 -40.62711716]
[125.99046326 -42.43170547]
[131.26107788 -56.47523117]
[136.53170776 -70.51875305]
[141.80232239 -84.56227875]
[133.96191406 -98.09231567]
[136.70365906 -113.48766327]
[148.73300171 -123.47911835]
[164.37004089 -123.34900665]
[176.23146057 -113.15877533]
[178.71664429 -97.71993256]
[170.65217590 -84.32222748]
[155.84585571 -79.29165649]
[150.57522583 -65.24813080]
[145.30461121 -51.20460892]
[140.03398132 -37.16108322]
[135.71998596 -22.79482269]
[132.38218689 -8.17090416]
[129.04437256 6.45301485]
[125.70655060 21.07693291]
[122.36873627 35.70085144]
[119.03092194 50.32477188]
[115.69310760 64.94869232]
[112.35529327 79.57260895]
[121.97741699 90.67665100]
[123.27468872 105.31229401]
[115.75572205 117.93569183]
[102.26862335 123.76520538]
[98.93080902 138.38912964]
[107.07350159 146.13528442]
[111.06315613 156.55352783]
[110.19029236 167.59252930]
[104.69543457 177.11123657]
[95.70863342 183.29414368]
[85.01774597 184.99740601]
[79.74712372 199.04092407]
[74.47650146 213.08444214]
[69.20587921 227.12797546]
[79.44230652 238.50663757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 68]
[11 67]
[12 66]
[13 65]
[16 59]
[17 58]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[32 46]
[33 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
