%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCUGGAGGCCUCUGGGCGCGUGCGCGGGCGGUCGCUACCUGCGGCCGAGCCAGGGAGCGAGAGGGCGCAGAGGGCAGCGGGCUUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[139.50123596 330.69934082]
[136.09509277 316.09118652]
[132.68894958 301.48303223]
[128.01364136 295.56942749]
[129.41865540 286.34130859]
[126.49230194 271.62951660]
[123.56594849 256.91775513]
[120.63959503 242.20596313]
[106.49161530 237.54759216]
[96.50852966 226.35858154]
[93.44615936 211.57723999]
[98.22499084 197.15296936]
[109.65666962 186.99108887]
[106.73031616 172.27931213]
[103.80396271 157.56752014]
[100.87760162 142.85574341]
[97.95124817 128.14396667]
[95.02489471 113.43218994]
[85.95128632 102.79446411]
[90.26332855 89.49416351]
[87.33696747 74.78238678]
[72.61638641 70.90092468]
[61.08781052 61.05313873]
[55.00307846 47.23299789]
[55.52003860 32.20323563]
[62.48263168 18.94307899]
[74.46243286 10.05770779]
[71.53607941 -4.65407133]
[68.60972595 -19.36585045]
[64.49089050 -33.78927612]
[59.20714188 -47.82786560]
[44.72615433 -59.05472183]
[48.02531433 -76.20546722]
[42.28506470 -90.06365967]
[36.54481125 -103.92185211]
[30.80455971 -117.78005219]
[25.06430817 -131.63824463]
[19.32405663 -145.49642944]
[13.58380604 -159.35462952]
[-0.62814283 -166.79774475]
[-3.52828407 -182.57649231]
[7.10812235 -194.58676147]
[23.12173653 -193.61529541]
[32.22828293 -180.40733337]
[27.44199944 -165.09487915]
[33.18225098 -151.23667908]
[38.92250061 -137.37849426]
[44.66275406 -123.52030182]
[50.40300369 -109.66210938]
[56.14325714 -95.80391693]
[61.88350677 -81.94572449]
[73.03266144 -76.94734192]
[77.86875916 -65.28881836]
[73.24572754 -53.11161804]
[78.52947998 -39.07302856]
[80.87960052 -38.15597534]
[83.02748871 -36.28584671]
[84.62704468 -33.53020859]
[85.36071014 -30.07337761]
[84.97673798 -26.20415688]
[83.32150269 -22.29220581]
[86.24785614 -7.58042622]
[89.17420959 7.13135290]
[103.64238739 10.75589371]
[115.14942932 20.34221458]
[121.37867737 34.03007126]
[121.04586029 49.12673950]
[114.16342926 62.63670349]
[102.04875183 71.85603333]
[104.97510529 86.56781006]
[114.04871368 97.20553589]
[109.73667145 110.50583649]
[112.66303253 125.21761322]
[115.58938599 139.92939758]
[118.51573944 154.64117432]
[121.44209290 169.35295105]
[124.36844635 184.06472778]
[138.81872559 189.07836914]
[148.75372314 200.57588196]
[151.58103943 215.40399170]
[146.63970947 229.56164551]
[135.35136414 239.27961731]
[138.27772522 253.99139404]
[141.20408630 268.70318604]
[144.13043213 283.41494751]
[147.29710388 298.07687378]
[150.70324707 312.68502808]
[154.10939026 327.29318237]
[168.45794678 333.20071411]
[176.56510925 346.43148804]
[175.31353760 361.89801025]
[165.18447876 373.65307617]
[150.07275391 377.17663574]
[135.78913879 371.11380005]
[127.82597351 357.79586792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[5 85]
[6 84]
[7 83]
[8 82]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[20 70]
[21 69]
[27 63]
[28 62]
[29 61]
[30 55]
[31 54]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
