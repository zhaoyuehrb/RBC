%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACAGGAAGGAGCCGAGUGGGACUUUCCUCUCGCUGCCUCCCGGCUCUGCCCGCCCUUCGAAAGUCCAGGGUCCCUGCCCGCUAGGCAAGUUGCACUC\
) } def
/len { sequence length } bind def

/coor [
[18.38468361 149.55207825]
[22.38196754 135.09449768]
[30.48385429 122.47073364]
[41.96258926 112.81472015]
[55.78709412 106.99380493]
[70.71170807 105.53065491]
[85.48677063 102.94268799]
[71.27969360 98.13029480]
[57.23983383 104.87715149]
[42.90039825 99.79432678]
[36.55482483 86.36788177]
[22.34775162 81.55549622]
[8.14067841 76.74311066]
[-6.06639481 71.93072510]
[-20.27346802 67.11833954]
[-34.48054123 62.30595016]
[-48.68761444 57.49356461]
[-63.28129196 54.02591705]
[-78.13459015 51.93318939]
[-92.98789215 49.84045792]
[-107.84118652 47.74772644]
[-122.69448853 45.65499878]
[-137.54779053 43.56226730]
[-152.40109253 41.46953964]
[-164.87388611 51.17545319]
[-180.54605103 49.13609695]
[-190.11955261 36.56137466]
[-187.91461182 20.91165543]
[-175.23937988 11.47163296]
[-159.61384583 13.84190845]
[-150.30834961 26.61623955]
[-135.45506287 28.70896912]
[-120.60176086 30.80169868]
[-105.74845886 32.89442825]
[-90.89515686 34.98715973]
[-76.04186249 37.07989120]
[-61.18856430 39.17261887]
[-68.31195831 25.97196770]
[-64.28988647 11.52126026]
[-51.37084579 3.89903188]
[-36.77710342 7.36641645]
[-28.66715813 19.98500443]
[-31.57479668 34.70049667]
[-43.87522888 43.28649139]
[-29.66815567 48.09887695]
[-15.46108150 52.91126251]
[-1.25400841 57.72364807]
[12.95306492 62.53603745]
[27.16013908 67.34841919]
[41.36721039 72.16081238]
[54.56618118 65.35472107]
[69.04273224 70.03278351]
[76.09208679 83.92322540]
[90.29915619 88.73561096]
[105.03868866 85.95239258]
[116.51267242 76.29074097]
[127.98666382 66.62908173]
[139.46064758 56.96742630]
[150.93463135 47.30577087]
[148.16250610 32.19912338]
[153.33020020 17.73570442]
[165.04765320 7.80610418]
[180.16291809 5.08133507]
[194.61006165 10.29434490]
[204.50288391 22.04286194]
[207.18026733 37.16659164]
[201.92199707 51.59732819]
[190.14253235 61.45327759]
[175.01048279 64.08323669]
[160.59629822 58.77975845]
[149.12229919 68.44141388]
[137.64831543 78.10307312]
[126.17433167 87.76472473]
[114.70034027 97.42638397]
[115.39918518 104.89375305]
[129.03202820 111.15040588]
[116.79687500 119.82849121]
[117.49571991 127.29586029]
[130.56315613 134.66078186]
[143.63059998 142.02568054]
[156.69804382 149.39059448]
[172.47489929 146.48020935]
[184.49208069 157.10881042]
[183.53102112 173.12304688]
[170.32897949 182.23817444]
[155.01341248 177.46183777]
[149.33314514 162.45803833]
[136.26570129 155.09312439]
[123.19824982 147.72822571]
[110.13080597 140.36331177]
[118.06764221 153.09149170]
[116.53910065 168.01341248]
[110.65747833 181.81219482]
[100.95111084 193.24838257]
[88.29185486 201.29470825]
[73.81684113 205.22840881]
[58.82629013 204.69613647]
[44.66672516 199.74572754]
[32.61003113 190.82182312]
[23.73920059 178.72601318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
