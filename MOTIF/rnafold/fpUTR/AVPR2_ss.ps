%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCUCCUCAGGCAGAGGCUGAGUCCGCACAUCACCUCCAGGCCCUCAGAACACCUGCCCCAGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[83.30300903 303.84667969]
[81.34601593 288.61297607]
[87.28285980 274.44790649]
[99.51656342 265.16180420]
[97.55867004 250.29011536]
[95.60077667 235.41844177]
[85.59288025 231.35203552]
[78.24598694 223.32044983]
[75.03675079 212.83299255]
[76.65509796 201.90214539]
[82.85738373 192.65744019]
[92.50000000 186.93063354]
[92.50000000 171.93063354]
[92.50000000 156.93063354]
[92.50000000 141.93063354]
[92.50000000 126.93063354]
[78.11237335 117.39082336]
[72.07112885 101.21939850]
[76.67995453 84.58298492]
[90.18138123 73.82551575]
[88.87404633 58.88259506]
[87.56671143 43.93967438]
[86.25936890 28.99675560]
[84.95203400 14.05383492]
[74.02331543 -0.58288890]
[81.67617035 -16.22398567]
[79.71827698 -31.09565735]
[65.02628326 -34.99613953]
[52.94833374 -44.22606659]
[45.32622910 -57.37794876]
[43.32228470 -72.44621277]
[47.24208832 -87.13306427]
[56.48789597 -99.19886017]
[69.64979553 -106.80365753]
[84.72068024 -108.78778076]
[99.40236664 -104.84865570]
[111.45598602 -95.58698273]
[119.04346466 -82.41510010]
[121.00775909 -67.34161377]
[117.04933167 -52.66512299]
[107.77180481 -40.62369156]
[94.58995056 -33.05355072]
[96.54784393 -18.18187714]
[106.06740570 -10.40486908]
[107.65953827 2.19241285]
[99.89495850 12.74649811]
[101.20229340 27.68941879]
[102.50962830 42.63233948]
[103.81696320 57.57526016]
[105.12429810 72.51818085]
[116.51385498 77.44337463]
[124.64971161 86.81286621]
[127.92887115 98.78060150]
[125.70524597 110.98858643]
[118.41695404 121.03151703]
[107.50000000 126.93063354]
[107.50000000 141.93063354]
[107.50000000 156.93063354]
[107.50000000 171.93063354]
[107.50000000 186.93063354]
[122.43052673 199.90354919]
[123.49798584 219.36141968]
[110.47245026 233.46055603]
[112.43034363 248.33222961]
[114.38823700 263.20388794]
[128.60852051 269.00729370]
[138.00926208 281.15313721]
[140.06172180 296.37426758]
[134.21379089 310.57629395]
[122.03853607 319.93890381]
[106.81104279 321.94366455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[26 43]
[27 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
