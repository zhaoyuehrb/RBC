%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCUCGCUGGCUGCUCGCGCUCGGGCAGGCGGGCUGAGGAGGCUGCCGCGCCCCCGCCGCCGCCGCCGCGGGGGAAGCCUGGGAGCCAGAUCGGCGUCGCCUCGGCCUCCGUAACCCCCGCCUAGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[-88.83002472 548.12048340]
[-94.61056519 561.96191406]
[-100.39109802 575.80334473]
[-106.17163849 589.64477539]
[-111.95217896 603.48620605]
[-117.73271942 617.32763672]
[-115.10398102 633.51477051]
[-127.97741699 643.67382812]
[-143.10993958 637.35406494]
[-144.93449402 621.05676270]
[-131.57415771 611.54711914]
[-125.79361725 597.70568848]
[-120.01307678 583.86425781]
[-114.23253632 570.02282715]
[-108.45199585 556.18139648]
[-102.67146301 542.33996582]
[-109.24002075 532.88134766]
[-110.39715576 521.30285645]
[-105.73488617 510.51022339]
[-96.32048035 503.26910400]
[-84.45459747 501.49670410]
[-78.03633881 487.93917847]
[-71.61808777 474.38168335]
[-65.19982910 460.82418823]
[-58.78157425 447.26666260]
[-52.36331558 433.70916748]
[-57.60227966 419.81353760]
[-51.28638840 405.97286987]
[-36.67583847 400.57196045]
[-30.25758362 387.01446533]
[-23.83932686 373.45693970]
[-17.42107010 359.89944458]
[-11.00281334 346.34194946]
[-4.58455706 332.78442383]
[1.83369935 319.22692871]
[-1.23284459 300.18988037]
[15.33329678 288.81066895]
[21.11383629 274.96920776]
[18.87884521 260.24325562]
[31.33669853 250.49069214]
[37.11723709 236.64926147]
[42.89777756 222.80781555]
[48.67831421 208.96638489]
[54.45885468 195.12493896]
[60.23939133 181.28350830]
[66.01993561 167.44207764]
[71.80046844 153.60063171]
[65.92067719 139.96379089]
[71.58579254 125.84425354]
[85.92923737 119.76945496]
[91.70977783 105.92801666]
[74.81307983 99.35825348]
[68.53423309 74.98339081]
[66.44663239 60.12937164]
[64.35903931 45.27535248]
[62.27144241 30.42132950]
[60.18384552 15.56730938]
[58.09624863 0.71328831]
[56.00865173 -14.14073277]
[46.42604065 -26.72977829]
[52.31674576 -40.41001511]
[50.22914886 -55.26403427]
[39.71194458 -67.84658051]
[45.60345840 -83.15089417]
[61.84300995 -85.43321228]
[71.72473907 -72.34568024]
[65.08316803 -57.35163116]
[67.17076874 -42.49761200]
[76.60406494 -30.97102356]
[70.86267090 -16.22832870]
[72.95027161 -1.37430823]
[75.03786469 13.47971249]
[77.12546539 28.33373451]
[79.21305847 43.18775558]
[81.30065918 58.04177475]
[83.38825226 72.89579773]
[89.96894073 76.49364471]
[95.25830078 62.45716858]
[99.78617096 48.15687561]
[114.72832489 46.84082031]
[121.68614197 60.12948990]
[112.09164429 71.66043091]
[103.13032532 83.68933868]
[109.71101379 87.28719330]
[123.34228516 81.02711487]
[132.65412903 68.23648834]
[147.44912720 69.95619202]
[161.08039856 63.69611359]
[174.71165466 57.43603897]
[181.61215210 42.95285034]
[197.26997375 39.45824432]
[209.67378235 49.63298035]
[209.30842590 65.67187500]
[196.45419312 75.27125549]
[180.97174072 71.06730652]
[167.34046936 77.32737732]
[153.70919800 83.58745575]
[145.37236023 95.93032074]
[129.60235596 94.65837860]
[115.97109222 100.91845703]
[105.55121613 111.70855713]
[99.77067566 125.54998779]
[105.53340149 140.02165222]
[99.47393036 153.97648621]
[85.64190674 159.38117981]
[79.86136627 173.22261047]
[74.08082581 187.06404114]
[68.30029297 200.90548706]
[62.51975250 214.74691772]
[56.73921204 228.58836365]
[50.95867538 242.42979431]
[45.17813492 256.27124023]
[46.99966431 271.98724365]
[34.95527267 280.74975586]
[29.17473412 294.59118652]
[33.92381287 304.50460815]
[32.41181183 315.16946411]
[25.38800049 323.04251099]
[15.39120579 325.64517212]
[8.97294903 339.20269775]
[2.55469298 352.76019287]
[-3.86356354 366.31768799]
[-10.28182030 379.87521362]
[-16.70007706 393.43270874]
[-23.11833382 406.99023438]
[-18.03515053 421.71432495]
[-24.73730850 435.37213135]
[-38.80580902 440.12741089]
[-45.22406769 453.68493652]
[-51.64232254 467.24243164]
[-58.06057739 480.79995728]
[-64.47883606 494.35745239]
[-70.89709473 507.91494751]
[-63.81646729 525.40948486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[21 133]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[35 119]
[37 115]
[38 114]
[40 112]
[41 111]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[50 102]
[51 101]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[61 68]
[62 67]
[84 100]
[85 99]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
