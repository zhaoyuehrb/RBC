%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGCUGUGGGCGGCGGCGGCGGCGCGCAGCGACAGAGCGUCCCCCGGCGAGGACGAGCGAGCACGGCGCCCGCACCUCCCCGCACCGCCCGCGCUGCGCGCCCGGAGGAGCGACCGCCGCAGUUCUCGAGCUCCAGCUGCAUUCCCUCCGCGUCCGCCCCACGCUUCUCCCGCUCCGGGCCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[69.70854950 203.81692505]
[75.75489044 187.97778320]
[75.75489044 172.97778320]
[75.75489044 157.97778320]
[75.75489044 142.97778320]
[75.75489044 127.97778320]
[70.44828796 98.45804596]
[87.30780792 81.83181763]
[83.38561249 67.35368347]
[79.46340942 52.87555313]
[75.54121399 38.39741898]
[71.61901093 23.91928482]
[67.69681549 9.44115162]
[63.65505600 -5.00406122]
[59.49401093 -19.41536522]
[55.33296967 -33.82667160]
[41.77762604 -41.50068283]
[37.76303101 -56.17506790]
[45.16256332 -69.05072784]
[41.00151825 -83.46202850]
[36.84047318 -97.87333679]
[32.67943192 -112.28463745]
[21.41758347 -123.39685822]
[25.32064056 -137.77098083]
[21.15959740 -152.18228149]
[5.18474245 -157.71492004]
[-4.25646162 -171.53814697]
[-3.61108589 -188.09921265]
[6.66913652 -200.88687134]
[2.27038598 -215.22741699]
[-2.12836456 -229.56794739]
[-6.52711535 -243.90849304]
[-10.92586613 -258.24902344]
[-22.33145523 -261.67819214]
[-30.57511139 -270.10702515]
[-33.68608093 -281.35467529]
[-31.00110626 -292.58825684]
[-23.30183601 -301.03613281]
[-27.22403526 -315.51425171]
[-31.14623451 -329.99240112]
[-35.06843567 -344.47052002]
[-46.67341995 -353.97442627]
[-61.64062119 -354.96578979]
[-76.60782623 -355.95715332]
[-91.57503510 -356.94851685]
[-101.40161896 -344.93945312]
[-116.41876221 -341.03240967]
[-130.85206604 -346.72970581]
[-139.15162659 -359.84066772]
[-138.12609863 -375.32382202]
[-128.16979980 -387.22558594]
[-113.11116028 -390.96948242]
[-98.74051666 -385.11593628]
[-90.58367157 -371.91571045]
[-75.61647034 -370.92434692]
[-60.64926529 -369.93298340]
[-45.68206024 -368.94165039]
[-40.20631409 -374.06668091]
[-50.45624542 -385.01837158]
[-39.50440979 -395.26809692]
[-29.25481987 -384.31680298]
[-23.77907372 -389.44186401]
[-23.77907372 -404.44186401]
[-23.77907372 -419.44186401]
[-23.77907372 -434.44186401]
[-33.35602188 -450.15994263]
[-24.01663208 -465.00833130]
[-24.26464081 -480.00625610]
[-24.51264954 -495.00421143]
[-24.76066017 -510.00216675]
[-25.00866890 -525.00012207]
[-36.08580780 -535.95159912]
[-36.12367249 -551.16516113]
[-25.61485100 -561.65802002]
[-25.86285973 -576.65600586]
[-26.11087036 -591.65393066]
[-34.07528305 -605.32427979]
[-26.54947281 -618.17773438]
[-26.79748154 -633.17572021]
[-27.04549217 -648.17364502]
[-27.29350090 -663.17163086]
[-27.54150963 -678.16955566]
[-38.68629837 -694.95294189]
[-28.61463165 -711.44677734]
[-29.35838699 -726.42834473]
[-30.10214424 -741.40991211]
[-42.92610931 -749.94525146]
[-48.20355225 -764.22814941]
[-44.10720062 -778.70861816]
[-32.40966034 -787.89044189]
[-33.15341949 -802.87200928]
[-42.49685669 -816.34906006]
[-35.25333023 -831.06176758]
[-18.87435341 -831.87493896]
[-10.20921707 -817.95202637]
[-18.17186928 -803.61572266]
[-17.42811203 -788.63421631]
[-4.87867546 -780.65612793]
[0.63176084 -766.65258789]
[-3.20507288 -751.91717529]
[-15.12059402 -742.15362549]
[-14.37683773 -727.17211914]
[-13.63308144 -712.19055176]
[-5.45641613 -706.02575684]
[-1.95849049 -696.16796875]
[-4.52601242 -685.80139160]
[-12.54356003 -678.41754150]
[-12.29555130 -663.41961670]
[-12.04754162 -648.42169189]
[-11.79953289 -633.42370605]
[-11.55152321 -618.42578125]
[-3.60484886 -605.82818604]
[-11.11291981 -591.90197754]
[-10.86491108 -576.90399170]
[-10.61690140 -561.90606689]
[0.23310253 -551.76635742]
[0.69827056 -536.55987549]
[-10.01071930 -525.24810791]
[-9.76270962 -510.25018311]
[-9.51470089 -495.25222778]
[-9.26669121 -480.25427246]
[-9.01868248 -465.25631714]
[-0.54018635 -456.61257935]
[-0.22126707 -444.10778809]
[-8.77907467 -434.44186401]
[-8.77907467 -419.44186401]
[-8.77907467 -404.44186401]
[-8.77907467 -389.44186401]
[-4.79064846 -379.26513672]
[-4.54027271 -368.96008301]
[-7.64502478 -359.78411865]
[-13.33542252 -352.72451782]
[-20.59029961 -348.39273071]
[-16.66810036 -333.91458130]
[-12.74590206 -319.43646240]
[-8.82370281 -304.95831299]
[7.56836987 -296.83795166]
[12.92868042 -279.01443481]
[3.41467094 -262.64776611]
[7.81342173 -248.30723572]
[12.21217251 -233.96670532]
[16.61092186 -219.62615967]
[21.00967407 -205.28562927]
[33.99396515 -202.13671875]
[43.80231857 -192.90582275]
[47.79607773 -179.92921448]
[44.82839584 -166.56927490]
[35.57090378 -156.34332275]
[39.73194504 -141.93202209]
[50.69616699 -131.85060120]
[47.09073639 -116.44568634]
[51.25178146 -102.03437805]
[55.41282272 -87.62307739]
[59.57386780 -73.21176910]
[72.69770813 -66.26192474]
[77.12289429 -51.70608521]
[69.74427032 -37.98771667]
[73.90531921 -23.57641029]
[78.06636047 -9.16510487]
[82.95123291 -3.60090160]
[82.17494965 5.51895285]
[86.09714508 19.99708748]
[90.01934814 34.47521973]
[93.94154358 48.95335388]
[97.86374664 63.43148804]
[101.78594208 77.90962219]
[109.59865570 77.30764008]
[117.87263489 79.60845184]
[125.50758362 84.99852753]
[131.34950256 93.24788666]
[134.34600830 103.70143890]
[133.69960022 115.32707214]
[139.95132446 128.96217346]
[146.20304871 142.59725952]
[152.45477295 156.23236084]
[164.55239868 168.11022949]
[156.48768616 183.02319336]
[139.92498779 179.40197754]
[138.81968689 162.48408508]
[132.56794739 148.84899902]
[126.31622314 135.21389771]
[120.06449890 121.57879639]
[112.73709869 123.17854309]
[90.75489044 127.97778320]
[90.75489044 142.97778320]
[90.75489044 157.97778320]
[90.75489044 172.97778320]
[90.75489044 187.97778320]
[96.80123138 203.81692505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 188]
[3 187]
[4 186]
[5 185]
[6 184]
[8 166]
[9 165]
[10 164]
[11 163]
[12 162]
[13 161]
[14 159]
[15 158]
[16 157]
[19 154]
[20 153]
[21 152]
[22 151]
[24 149]
[25 148]
[29 143]
[30 142]
[31 141]
[32 140]
[33 139]
[38 136]
[39 135]
[40 134]
[41 133]
[42 57]
[43 56]
[44 55]
[45 54]
[62 128]
[63 127]
[64 126]
[65 125]
[67 122]
[68 121]
[69 120]
[70 119]
[71 118]
[74 115]
[75 114]
[76 113]
[78 111]
[79 110]
[80 109]
[81 108]
[82 107]
[84 103]
[85 102]
[86 101]
[90 97]
[91 96]
[172 182]
[173 181]
[174 180]
[175 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
