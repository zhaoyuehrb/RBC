%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCGCGCGCGGCCCUGCGGGUGACAGGCAGGCGGGAAGGGGCGGGGCCUCGGGCGGGGCCGCCGUGGGGAGGAGGGCGGUGGGAGGGGAGGAGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[140.11766052 150.07919312]
[137.68702698 143.28639221]
[136.32363892 136.19754028]
[136.06085205 128.97937012]
[136.90617371 121.80182648]
[122.85563660 116.54993439]
[108.80509949 111.29803467]
[94.98480988 113.41727448]
[85.94300079 102.75250244]
[71.89246368 97.50060272]
[56.25677872 99.91634369]
[47.04414368 88.21264648]
[32.99361038 82.96074677]
[18.94307137 77.70884705]
[4.89253521 72.45695496]
[-9.15800095 67.20505524]
[-23.20853806 61.95315933]
[-37.25907516 56.70126343]
[-51.30961227 51.44936752]
[-59.92957687 63.82462692]
[-71.35686493 73.66677094]
[-84.87315369 80.35711670]
[-99.62879944 83.47510529]
[-114.69624329 82.82472992]
[-129.12832642 78.44688416]
[-142.01785278 70.61675262]
[-152.55458069 59.82655334]
[-160.07612610 46.75456238]
[-164.10972595 32.22249603]
[-164.40177917 17.14385033]
[-160.93395996 2.46648502]
[-153.92425537 -10.88696861]
[-143.81327820 -22.07710266]
[-131.23663330 -30.40049553]
[-116.98490143 -35.33393097]
[-101.95394135 -36.56728745]
[-87.08862305 -34.02304077]
[-73.32339478 -27.86112022]
[-61.52354813 -18.46886826]
[-52.43082809 -6.43669271]
[-46.61680984 7.47905540]
[-44.44697571 22.40361977]
[-46.05771637 37.39883041]
[-32.00717926 42.65072632]
[-17.95664215 47.90262222]
[-3.90610456 53.15452194]
[10.14443207 58.40641785]
[24.19496918 63.65831375]
[38.24550629 68.91020966]
[52.29604340 74.16210938]
[66.92674255 71.37071228]
[77.14436340 83.45006561]
[91.19490051 88.70196533]
[105.01519012 86.58272552]
[114.05699921 97.24749756]
[128.10752869 102.49939728]
[142.15806580 107.75128937]
[161.06793213 89.58983612]
[186.68072510 84.39151764]
[211.01824951 93.68407440]
[226.54850769 114.49565125]
[241.24298096 111.48354340]
[255.93743896 108.47143555]
[270.63189697 105.45933533]
[285.32635498 102.44722748]
[300.02081299 99.43511963]
[314.71527100 96.42301178]
[319.49114990 81.82552338]
[330.93661499 71.58360291]
[345.97290039 68.45227814]
[360.55535889 73.27386475]
[370.76135254 84.75138092]
[373.84552002 99.79742432]
[368.97824097 114.36469269]
[357.46881104 124.53465271]
[342.41317749 127.57165527]
[327.86123657 122.65874481]
[317.72738647 111.11747742]
[303.03292847 114.12958527]
[288.33847046 117.14168549]
[273.64401245 120.15379333]
[258.94955444 123.16590118]
[244.25508118 126.17800903]
[229.56062317 129.19010925]
[229.32653809 136.32539368]
[228.00262451 143.34495544]
[225.61878967 150.08322144]
[222.22996521 156.38104248]
[217.91485596 162.08950806]
[212.77406311 167.07337952]
[206.92776489 171.21435547]
[200.51292419 174.41384888]
[193.68006897 176.59535217]
[186.58972168 177.70628357]
[179.40869141 177.71919250]
[172.30610657 176.63249207]
[165.44946289 174.47050476]
[159.00062561 171.28294373]
[153.11204529 167.14373779]
[147.92317200 162.14930725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 57]
[6 56]
[7 55]
[9 53]
[10 52]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
