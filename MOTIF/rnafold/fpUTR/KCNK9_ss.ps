%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGACGCGCGCGGCUGUGAGCCUGCGGGACAUGCCCCCCGCGCCGGCUCCUUGCUGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[75.79125214 272.34307861]
[60.85617065 275.49047852]
[46.03657150 271.83776855]
[34.27489471 262.11019897]
[27.90642548 248.23918152]
[28.19563293 232.97880554]
[35.08509064 219.35903931]
[47.20689392 210.08409119]
[62.15425110 206.99551392]
[65.74398804 192.43138123]
[69.33372498 177.86726379]
[67.81951904 170.34855652]
[73.46477509 162.69467163]
[77.75395966 148.32098389]
[82.04314423 133.94729614]
[86.33232880 119.57361603]
[77.45873260 107.86275482]
[77.12356567 93.17355347]
[85.45378876 81.07014465]
[99.29398346 76.13719940]
[103.58316803 61.76351166]
[107.87235260 47.38982391]
[112.16153717 33.01613998]
[116.45072937 18.64245033]
[120.04045868 4.07832336]
[122.92236328 -10.64222813]
[125.80426025 -25.36277962]
[128.68615723 -40.08333206]
[131.56806946 -54.80388260]
[134.44996643 -69.52443695]
[123.78437805 -80.79496765]
[121.81377411 -96.18640137]
[129.29589844 -109.78042603]
[143.35371399 -116.34985352]
[158.58171082 -113.36861420]
[169.12440491 -101.98303986]
[170.92791748 -86.57113647]
[163.29876709 -73.05907440]
[149.17051697 -66.64253235]
[146.28862000 -51.92198181]
[143.40670776 -37.20143127]
[140.52481079 -22.48087883]
[137.64291382 -7.76032782]
[134.76101685 6.96022415]
[136.86093140 11.62582397]
[135.77525330 17.68322563]
[130.82441711 22.93163681]
[126.53522491 37.30532455]
[122.24604034 51.67901230]
[117.95685577 66.05269623]
[113.66767120 80.42638397]
[122.54126740 92.13724518]
[122.87643433 106.82644653]
[114.54621124 118.92985535]
[100.70601654 123.86280060]
[96.41683197 138.23648071]
[92.12764740 152.61016846]
[87.83846283 166.98385620]
[83.89785004 181.45700073]
[80.30811310 196.02111816]
[76.71837616 210.58525085]
[88.51827240 220.26643372]
[94.94131470 234.11227417]
[94.71220398 249.37367249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 61]
[10 60]
[11 59]
[13 58]
[14 57]
[15 56]
[16 55]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
