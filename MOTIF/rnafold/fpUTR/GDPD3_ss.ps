%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACACUGGCUAGGCAGGCAGCACAGUCCCGCGGACGGCUGAGCGUGUGGCUGCAGGAGCUUCUGUGGGAGUACGGUC\
) } def
/len { sequence length } bind def

/coor [
[184.06077576 340.63140869]
[178.86901855 326.55853271]
[173.67726135 312.48565674]
[168.48550415 298.41278076]
[163.29374695 284.33993530]
[158.10198975 270.26705933]
[144.51016235 264.28393555]
[139.04450989 250.08599854]
[145.41232300 235.87020874]
[140.22056580 221.79733276]
[135.02880859 207.72445679]
[129.83705139 193.65159607]
[114.35986328 187.38868713]
[107.95609283 171.60803223]
[114.96173859 155.71926880]
[109.22148132 141.86106873]
[103.48123169 128.00288391]
[97.74098206 114.14469147]
[86.76640320 105.48153687]
[88.40082550 91.59556580]
[82.66057587 77.73736572]
[76.32141113 70.78543854]
[76.97884369 63.22064972]
[71.78708649 49.14778137]
[66.59532928 35.07490921]
[52.52079010 28.40069962]
[47.45608521 14.05484962]
[53.90565872 0.67805755]
[48.71390533 -13.39481258]
[42.97365189 -27.25300598]
[36.69375610 -40.87515259]
[30.41386032 -54.49729919]
[16.71664238 -63.51496506]
[17.94754219 -79.86785126]
[32.84031677 -86.73351288]
[46.07455444 -77.04914856]
[44.03600693 -60.77719498]
[50.31590271 -47.15504837]
[56.59579849 -33.53290176]
[60.93427658 -31.00291824]
[63.57924271 -25.59063721]
[62.78677368 -18.58656883]
[67.97853088 -4.51369810]
[81.57035828 1.46942914]
[87.03601074 15.66736221]
[80.66819763 29.88315392]
[85.85995483 43.95602417]
[91.05171204 58.02889252]
[96.51876831 71.99711609]
[102.25901794 85.85530853]
[113.23359680 94.51846313]
[111.59917450 108.40443420]
[117.33942413 122.26263428]
[123.07967377 136.12081909]
[128.81993103 149.97901917]
[141.91838074 153.74029541]
[150.26930237 164.26025391]
[150.94059753 177.47856140]
[143.90992737 188.45983887]
[149.10168457 202.53269958]
[154.29344177 216.60557556]
[159.48518372 230.67845154]
[173.55973816 237.35266113]
[178.62443542 251.69850159]
[172.17486572 265.07528687]
[177.36662292 279.14816284]
[182.55836487 293.22103882]
[187.75012207 307.29391479]
[192.94187927 321.36679077]
[198.13363647 335.43963623]
[213.28407288 337.96154785]
[225.13357544 347.73318481]
[230.49468994 362.12603760]
[227.92530823 377.26849365]
[218.11657715 389.08731079]
[203.70698547 394.40328979]
[188.57266235 391.78643799]
[176.78465271 381.94070435]
[171.51387024 367.51455688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[9 62]
[10 61]
[11 60]
[12 59]
[15 55]
[16 54]
[17 53]
[18 52]
[20 50]
[21 49]
[23 48]
[24 47]
[25 46]
[28 43]
[29 42]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
