%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUACUAGGGCAAUCUGCCGGAAGAGUCAGGUUCUGUGUAUGUCUCCGCGUCUUCCGCGGAGCGGGUGUGCAGGGCCUGCAGCAUUGAACUAG\
) } def
/len { sequence length } bind def

/coor [
[92.13023376 262.70684814]
[79.31665802 271.95822144]
[63.72792053 269.35690308]
[54.61253738 256.44625854]
[57.37850571 240.88587952]
[70.38482666 231.90750122]
[72.85374451 217.11209106]
[75.32266235 202.31666565]
[77.79158020 187.52124023]
[68.95462036 175.58627319]
[71.24768829 160.54644775]
[83.82610321 151.35833740]
[86.29502106 136.56292725]
[88.76393890 121.76750183]
[91.23285675 106.97208405]
[93.45681763 92.13786316]
[95.43519592 77.26890564]
[97.41358185 62.39994431]
[99.39196014 47.53098297]
[87.70281982 56.93119049]
[72.91437531 59.44154358]
[58.77801514 54.42523956]
[48.87971497 43.15476227]
[45.73038101 28.48909760]
[50.12890244 14.14849186]
[60.95950699 3.77072787]
[75.47479248 -0.01166296]
[89.99266052 3.76079965]
[100.83036041 14.13115406]
[105.23873138 28.46969604]
[111.93786621 15.04875565]
[118.63700104 1.62781537]
[125.33612823 -11.79312420]
[132.03526306 -25.21406364]
[138.73439026 -38.63500595]
[145.43353271 -52.05594254]
[152.13265991 -65.47688293]
[158.83178711 -78.89782715]
[165.53092957 -92.31876373]
[172.23005676 -105.73970795]
[178.92918396 -119.16064453]
[185.62832642 -132.58158875]
[179.76213074 -148.96046448]
[187.31884766 -164.25846863]
[203.25291443 -169.34916687]
[209.50465393 -182.98426819]
[215.75637817 -196.61936951]
[222.00810242 -210.25447083]
[228.25982666 -223.88955688]
[234.51156616 -237.52465820]
[240.76329041 -251.15975952]
[236.54985046 -266.63961792]
[246.14135742 -279.49975586]
[262.18002319 -279.87490845]
[272.36236572 -267.47735596]
[268.87734985 -251.81739807]
[254.39839172 -244.90803528]
[248.14665222 -231.27293396]
[241.89492798 -217.63783264]
[235.64320374 -204.00273132]
[229.39147949 -190.36764526]
[223.13973999 -176.73254395]
[216.88801575 -163.09744263]
[223.04908752 -151.64996338]
[221.40573120 -138.55674744]
[212.34179688 -128.69854736]
[199.04925537 -125.88245392]
[192.35012817 -112.46150970]
[185.65100098 -99.04057312]
[178.95185852 -85.61962891]
[172.25273132 -72.19869232]
[165.55360413 -58.77775192]
[158.85446167 -45.35681152]
[152.15533447 -31.93587303]
[145.45620728 -18.51493263]
[138.75706482 -5.09399271]
[132.05793762 8.32694721]
[125.35881042 21.74788666]
[118.65967560 35.16882706]
[114.26092529 49.50936508]
[112.28253937 64.37832642]
[110.30416107 79.24728394]
[108.32577515 94.11624908]
[110.49820709 102.05894470]
[106.02828217 109.44100189]
[103.55936432 124.23641968]
[101.09043884 139.03184509]
[98.62152100 153.82725525]
[107.53503418 166.60173035]
[104.82043457 181.57121277]
[92.58700562 189.99015808]
[90.11808014 204.78558350]
[87.64916229 219.58100891]
[85.18024445 234.37641907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 94]
[7 93]
[8 92]
[9 91]
[12 88]
[13 87]
[14 86]
[15 85]
[16 83]
[17 82]
[18 81]
[19 80]
[30 79]
[31 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
