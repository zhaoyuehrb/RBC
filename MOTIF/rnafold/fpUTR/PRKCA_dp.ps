%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:15 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PRKCA)
} def

/sequence { (\
GGCCGCAGCUCCCCGGCGGAGGCAAGAGGUGGUUGGGGGGGACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.067268115 ubox
1 34 0.199979843 ubox
1 44 0.304413012 ubox
2 9 0.096757299 ubox
2 17 0.004806343 ubox
2 23 0.028856911 ubox
2 30 0.030848657 ubox
2 33 0.240234631 ubox
2 43 0.307807718 ubox
3 8 0.106318521 ubox
3 16 0.004810839 ubox
3 19 0.003196529 ubox
3 22 0.028892694 ubox
3 29 0.031811494 ubox
3 32 0.243077887 ubox
3 36 0.014927573 ubox
3 37 0.059205861 ubox
3 38 0.518582618 ubox
3 39 0.044127770 ubox
3 40 0.024100614 ubox
3 41 0.224703910 ubox
4 15 0.004811199 ubox
4 18 0.003217190 ubox
4 21 0.028868379 ubox
4 28 0.031809937 ubox
4 31 0.243084086 ubox
4 35 0.014951673 ubox
4 36 0.059592991 ubox
4 37 0.520641575 ubox
4 38 0.036869210 ubox
4 39 0.023794624 ubox
4 40 0.199628782 ubox
5 14 0.004776364 ubox
5 17 0.003258553 ubox
5 23 0.006967615 ubox
5 30 0.242901933 ubox
5 33 0.004561846 ubox
5 34 0.011801167 ubox
6 16 0.003255132 ubox
6 22 0.006943691 ubox
6 29 0.242871388 ubox
6 31 0.015650351 ubox
6 32 0.004595972 ubox
6 35 0.525781111 ubox
7 30 0.017080252 ubox
7 34 0.525439434 ubox
8 17 0.028820173 ubox
8 23 0.041307916 ubox
8 33 0.525635815 ubox
9 16 0.028814926 ubox
9 21 0.050709956 ubox
9 22 0.035975630 ubox
9 26 0.228905516 ubox
9 28 0.060809749 ubox
9 32 0.525796868 ubox
9 39 0.080988412 ubox
9 40 0.772660916 ubox
9 41 0.090253610 ubox
10 15 0.026145283 ubox
10 20 0.055225689 ubox
10 21 0.028200232 ubox
10 22 0.005663561 ubox
10 25 0.225626929 ubox
10 27 0.061681548 ubox
10 29 0.006873511 ubox
10 31 0.500490872 ubox
10 38 0.015594197 ubox
10 39 0.798399234 ubox
10 40 0.084910860 ubox
10 41 0.010240383 ubox
10 42 0.021759689 ubox
11 15 0.003530125 ubox
11 19 0.056347173 ubox
11 21 0.012126902 ubox
11 22 0.077959248 ubox
11 26 0.061740417 ubox
11 28 0.013751739 ubox
11 29 0.279282349 ubox
11 31 0.095407462 ubox
11 32 0.008614929 ubox
11 37 0.013984001 ubox
11 38 0.809038860 ubox
11 39 0.079704708 ubox
11 40 0.014650827 ubox
11 41 0.025509223 ubox
12 18 0.056210451 ubox
12 19 0.029344168 ubox
12 21 0.078202156 ubox
12 22 0.014283505 ubox
12 28 0.278964746 ubox
12 29 0.441274961 ubox
12 31 0.010006619 ubox
12 36 0.012101306 ubox
12 37 0.809770511 ubox
12 38 0.072898561 ubox
12 39 0.014664112 ubox
12 40 0.025496729 ubox
13 18 0.029465777 ubox
13 19 0.076959055 ubox
13 21 0.013953477 ubox
13 22 0.225473764 ubox
13 28 0.440985640 ubox
13 29 0.048222274 ubox
13 35 0.009784105 ubox
13 36 0.810443991 ubox
13 37 0.065379251 ubox
13 38 0.014656144 ubox
13 39 0.025466800 ubox
14 18 0.076422627 ubox
14 21 0.225590809 ubox
14 28 0.048544125 ubox
14 35 0.811086526 ubox
14 36 0.056819412 ubox
14 37 0.014640865 ubox
14 38 0.025412448 ubox
15 34 0.808848834 ubox
16 23 0.525545487 ubox
16 30 0.023094618 ubox
16 33 0.809808086 ubox
17 22 0.525594934 ubox
17 29 0.024172946 ubox
17 31 0.059850643 ubox
17 32 0.807819604 ubox
17 35 0.024105386 ubox
18 30 0.073811354 ubox
18 34 0.023157152 ubox
19 33 0.017689298 ubox
19 34 0.007550294 ubox
20 33 0.007966070 ubox
20 34 0.016005495 ubox
21 33 0.020419461 ubox
21 34 0.010753591 ubox
22 30 0.186650258 ubox
22 33 0.015183836 ubox
23 29 0.205958321 ubox
23 31 0.088531310 ubox
23 32 0.015503193 ubox
23 35 0.004614205 ubox
24 30 0.082918357 ubox
24 34 0.005821569 ubox
25 33 0.006100463 ubox
25 34 0.003569230 ubox
26 33 0.003503554 ubox
26 34 0.004920533 ubox
27 33 0.005605050 ubox
27 34 0.005695634 ubox
28 33 0.006021156 ubox
28 44 0.006176570 ubox
29 43 0.006227381 ubox
30 42 0.006176103 ubox
31 44 0.040786994 ubox
32 43 0.041380023 ubox
33 42 0.041376633 ubox
34 41 0.040958097 ubox
35 44 0.142531381 ubox
36 43 0.144035106 ubox
36 44 0.111978139 ubox
37 43 0.113231866 ubox
37 44 0.121956036 ubox
38 43 0.124032711 ubox
38 44 0.023021964 ubox
39 43 0.027055517 ubox
9 40 0.9500000 lbox
10 39 0.9500000 lbox
11 38 0.9500000 lbox
12 37 0.9500000 lbox
13 36 0.9500000 lbox
14 35 0.9500000 lbox
15 34 0.9500000 lbox
16 33 0.9500000 lbox
17 32 0.9500000 lbox
showpage
end
%%EOF
