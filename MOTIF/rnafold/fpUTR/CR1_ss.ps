%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUCCCGGAACCCCGCAGCCCUCCCCACACUCUGGGCGCGGAGCACAAUGAUUGGUCACUCCUAUUUUCGCUGAGCUUUUCCUCUUAUUUCAGUUUUCUUCGAGAUCAAAUCUGGUUUGUAGAUGUGCUUGGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[228.53341675 223.90013123]
[212.87406921 227.27833557]
[196.86154175 226.52461243]
[181.56842041 221.68394470]
[168.02053833 213.07531738]
[157.12811279 201.27059937]
[149.62461853 187.05664062]
[146.01741028 171.38278198]
[146.55337524 155.29743958]
[151.20210266 139.87803650]
[138.38203430 132.09048462]
[125.56197357 124.30293274]
[112.74190521 116.51538086]
[99.88462830 123.25214386]
[84.13380432 120.14830780]
[72.77615356 106.70974731]
[58.18477249 110.18704987]
[43.59339523 113.66435242]
[29.00201416 117.14165497]
[21.30584145 122.21366882]
[14.04685783 120.53003693]
[-0.61837143 123.68139648]
[-15.28360081 126.83275604]
[-29.94882965 129.98411560]
[-33.48427200 144.83212280]
[-43.11856461 156.67033386]
[-56.93881607 163.14825439]
[-72.20100403 162.97969055]
[-85.87480927 156.19810486]
[-95.24528503 144.14999390]
[-98.45191956 129.22752380]
[-94.85803986 114.39354706]
[-85.17720032 102.59337616]
[-71.33154297 96.16992950]
[-56.07014084 96.39859772]
[-42.42314911 103.23397064]
[-33.10018921 115.31888580]
[-18.43495941 112.16752625]
[-3.76972985 109.01616669]
[10.89549923 105.86480713]
[25.52471161 102.55027008]
[40.11609268 99.07296753]
[54.70746994 95.59566498]
[69.29885101 92.11837006]
[76.36058807 78.88462830]
[71.12574768 64.82772827]
[65.89089966 50.77083206]
[53.82395172 40.53855896]
[56.63309479 25.91125679]
[51.39825058 11.85435867]
[39.33130264 1.62208879]
[42.14044571 -13.00521374]
[36.90560150 -27.06211281]
[31.67075539 -41.11901093]
[13.02021980 -48.38445282]
[5.71535492 -66.69496918]
[13.98618603 -84.25681305]
[7.82413340 -97.93267059]
[-6.60913897 -104.93697357]
[-9.99124336 -120.61947632]
[0.27228224 -132.94990540]
[16.30813789 -132.46942139]
[25.81498909 -119.54660034]
[21.49999237 -104.09472656]
[27.66204453 -90.41886902]
[38.02313232 -89.47993469]
[47.10881805 -84.24731445]
[53.21462631 -75.62416840]
[55.16242981 -65.15668488]
[52.52724075 -54.75698853]
[45.72765350 -46.35385513]
[50.96249771 -32.29695892]
[56.19734573 -18.24005890]
[67.88986206 -9.01323223]
[65.45514679 6.61951399]
[70.68999481 20.67641258]
[82.38250732 29.90323830]
[79.94779968 45.53598404]
[85.18264008 59.59288406]
[90.41748810 73.64978027]
[115.75136566 81.30118561]
[120.52945709 103.69532013]
[133.34951782 111.48286438]
[146.16958618 119.27041626]
[158.98965454 127.05796814]
[168.90304565 117.08359528]
[180.79605103 109.59372711]
[194.05957031 104.96778107]
[208.01524353 103.43860626]
[221.95013428 105.08075714]
[235.15318298 109.80688477]
[246.95146179 117.37233734]
[256.74450684 127.38787842]
[264.03485107 139.33966064]
[268.45327759 152.61563110]
[269.77752686 166.53680420]
[267.94354248 180.39210510]
[263.04846191 193.47456360]
[275.50888062 201.82546997]
[287.96932983 210.17639160]
[300.42974854 218.52729797]
[312.89016724 226.87821960]
[325.35058594 235.22912598]
[337.81103516 243.58004761]
[350.27145386 251.93095398]
[362.73187256 260.28186035]
[375.19232178 268.63278198]
[390.50582886 265.78085327]
[403.02352905 274.42736816]
[405.64804077 289.04403687]
[418.10845947 297.39495850]
[424.79870605 298.23263550]
[429.33288574 301.82550049]
[430.92654419 306.40579224]
[443.00259399 315.30349731]
[455.07864380 324.20117188]
[467.15469360 333.09887695]
[483.16824341 332.12646484]
[493.80535889 344.13610840]
[490.90612793 359.91503906]
[476.69461060 367.35897827]
[462.07266235 360.75759888]
[458.25698853 345.17492676]
[446.18093872 336.27722168]
[434.10488892 327.37954712]
[422.02883911 318.48184204]
[409.75753784 309.85537720]
[397.29711914 301.50448608]
[382.77993774 304.63290405]
[370.02432251 296.34136963]
[366.84140015 281.09320068]
[354.38098145 272.74230957]
[341.92053223 264.39138794]
[329.46011353 256.04046631]
[316.99969482 247.68955994]
[304.53924561 239.33863831]
[292.07882690 230.98773193]
[279.61840820 222.63681030]
[267.15798950 214.28590393]
[254.69755554 205.93498230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[16 44]
[17 43]
[18 42]
[19 41]
[21 40]
[22 39]
[23 38]
[24 37]
[45 80]
[46 79]
[47 78]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[57 65]
[58 64]
[98 140]
[99 139]
[100 138]
[101 137]
[102 136]
[103 135]
[104 134]
[105 133]
[106 132]
[107 131]
[110 128]
[111 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
