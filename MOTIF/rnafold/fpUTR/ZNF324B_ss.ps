%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGCGUUGGGACUGUCACUUGGCUGCUCGCGUCAGGCCACACCGGUGGUCUGGGCUGUGGCGCGCGGGUCGGGGCCCGAGGCGGGCGGCCAGGAAGGACCUG\
) } def
/len { sequence length } bind def

/coor [
[-10.00508499 419.96331787]
[-19.31785393 422.87814331]
[-28.98758125 422.11657715]
[-36.86223221 434.88333130]
[-44.73688126 447.65008545]
[-52.61152649 460.41680908]
[-60.48617554 473.18356323]
[-60.42202377 489.58258057]
[-74.72619629 497.60275269]
[-88.68378448 488.99356079]
[-87.93641663 472.61145020]
[-73.25292969 465.30892944]
[-65.37828064 452.54217529]
[-57.50362778 439.77542114]
[-49.62898254 427.00866699]
[-41.75433350 414.24191284]
[-48.31204605 395.02874756]
[-38.72007751 376.81341553]
[-18.61870193 371.19589233]
[-12.27942848 357.60128784]
[-5.94015408 344.00668335]
[-9.17744160 325.03689575]
[7.18916655 313.44696045]
[12.72725868 299.50674438]
[18.26535034 285.56652832]
[23.80344391 271.62631226]
[29.34153557 257.68609619]
[34.87962723 243.74589539]
[40.41772079 229.80567932]
[45.95581055 215.86546326]
[51.49390411 201.92526245]
[57.03199768 187.98504639]
[62.57008743 174.04483032]
[68.10817719 160.10461426]
[73.64627075 146.16441345]
[71.15461731 131.47969055]
[83.44036865 121.51119232]
[88.97846222 107.57097626]
[88.97846222 92.57097626]
[83.44036865 78.63076782]
[77.90227509 64.69055176]
[72.36418152 50.75033951]
[66.82609558 36.81012726]
[61.28799820 22.86991501]
[55.74990845 8.92970181]
[42.55756378 -0.81165814]
[44.66627502 -17.07466507]
[59.90678406 -23.12932968]
[72.60095978 -12.74713516]
[69.69011688 3.39160943]
[75.22821045 17.33182144]
[80.76630402 31.27203560]
[86.30439758 45.21224976]
[91.84249115 59.15246201]
[97.38058472 73.09267426]
[102.91867065 87.03289032]
[117.40756226 90.91516876]
[129.17379761 81.61164093]
[140.94003296 72.30810547]
[152.70626831 63.00457382]
[164.47250366 53.70104218]
[170.49862671 39.07242584]
[185.28103638 37.24777985]
[197.04727173 27.94424820]
[208.81350708 18.64071465]
[220.57974243 9.33718300]
[222.16534424 -6.38736534]
[234.45814514 -16.32026863]
[250.16505432 -14.56851101]
[259.96743774 -2.17137885]
[258.04971313 13.51612854]
[245.54963684 23.18689156]
[229.88328552 21.10341835]
[218.11705017 30.40695000]
[206.35081482 39.71048355]
[194.58457947 49.01401520]
[189.40005493 62.97718048]
[173.77603149 65.46727753]
[162.00979614 74.77081299]
[150.24356079 84.07434082]
[138.47732544 93.37787628]
[126.71109009 102.68140411]
[102.91867065 113.10906982]
[97.38058472 127.04928589]
[99.47611237 142.73109436]
[87.58648682 151.70249939]
[82.04839325 165.64271545]
[76.51029968 179.58293152]
[70.97220612 193.52313232]
[65.43412018 207.46334839]
[59.89602661 221.40356445]
[54.35793304 235.34378052]
[48.81983948 249.28398132]
[43.28174973 263.22421265]
[37.74365616 277.16442871]
[32.20556259 291.10461426]
[26.66747093 305.04483032]
[21.12937927 318.98504639]
[26.08043098 328.88854980]
[24.70268059 339.65133667]
[17.70798302 347.65454102]
[7.65446234 350.34594727]
[1.31518865 363.94055176]
[-5.02408552 377.53518677]
[0.99596471 385.58422852]
[3.56725049 395.24041748]
[2.36144662 405.10104370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[19 104]
[20 103]
[21 102]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[28 93]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[37 84]
[38 83]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
