%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAACGCGCCACACAGAUUCGGGCUGCGCAACCUCUGUGGCCGUCUACACGGCGCGCAGAUGCGAAUAUUCUCGCGGCGCCGGAAGUCCGGGGCACGUGACCUGGUGACAGUGCUGACUUGGCUGUACAGCUCGAUCUAGGUUCUGCGGCACGGG\
) } def
/len { sequence length } bind def

/coor [
[93.83208466 517.14758301]
[102.21545410 503.05319214]
[101.91532135 488.05621338]
[89.30891418 476.96258545]
[88.58509827 459.84829712]
[100.67620850 447.24319458]
[100.07606506 432.25521851]
[99.47592163 417.26724243]
[98.87577820 402.27923584]
[87.79064941 392.39715576]
[86.96850586 377.20574951]
[97.40890503 365.64566040]
[96.80876160 350.65765381]
[85.72363281 340.77557373]
[84.90148926 325.58416748]
[95.34188843 314.02407837]
[94.74174500 299.03610229]
[94.14160156 284.04809570]
[93.54145813 269.06011963]
[90.11225891 262.46554565]
[93.08229065 253.76686096]
[92.78215790 238.76986694]
[92.48202515 223.77285767]
[92.18189240 208.77586365]
[91.88175964 193.77886963]
[91.58162689 178.78187561]
[91.28149414 163.78488159]
[56.76954651 83.44614410]
[42.39651871 79.15474701]
[28.02349091 74.86334991]
[13.65046310 70.57195282]
[8.46475029 71.81300354]
[3.80283785 70.98690033]
[0.37441722 68.65152740]
[-1.44187260 65.56779480]
[-15.53155041 60.42182541]
[-29.62122726 55.27585983]
[-43.71090317 50.12989044]
[-57.80058289 44.98392105]
[-71.89025879 39.83795166]
[-86.03071594 34.83320618]
[-100.22053528 29.97018623]
[-114.41036224 25.10716629]
[-128.60017395 20.24414635]
[-142.79000854 15.38112545]
[-158.77053833 19.06276894]
[-169.74971008 6.88122988]
[-164.43307495 -8.63216782]
[-148.28994751 -11.51857185]
[-137.92698669 1.19130397]
[-123.73715973 6.05432463]
[-109.54734039 10.91734505]
[-95.35752106 15.78036594]
[-81.16769409 20.64338684]
[-73.77918243 19.83234024]
[-66.74429321 25.74827576]
[-52.65461349 30.89424324]
[-38.56493759 36.04021072]
[-24.47525978 41.18618011]
[-10.38558197 46.33214951]
[3.70409584 51.47811890]
[17.94186020 56.19892883]
[32.31488800 60.49032593]
[46.68791580 64.78172302]
[61.06094360 69.07312012]
[47.05285263 63.70903778]
[39.25934982 50.89258957]
[40.94189072 35.98725510]
[51.39635849 25.23066902]
[66.24772644 23.12429237]
[79.28093719 30.54961014]
[85.04180908 44.39924240]
[81.11879730 58.87839508]
[86.12354279 44.73793793]
[91.12828827 30.59748268]
[96.13303375 16.45702553]
[101.13777924 2.31656814]
[106.00080109 -11.87325287]
[110.72161102 -26.11101913]
[107.72068024 -41.64501572]
[119.07034302 -51.29045486]
[123.79115295 -65.52822113]
[128.51196289 -79.76598358]
[133.23277283 -94.00374603]
[129.39143372 -109.94664764]
[141.46250916 -121.04714203]
[157.02832031 -115.88599396]
[160.07609558 -99.77255249]
[147.47053528 -89.28293610]
[142.74972534 -75.04517365]
[138.02891541 -60.80741119]
[133.30810547 -46.56964493]
[136.64669800 -32.05402756]
[124.95937347 -21.39020920]
[120.23856354 -7.15244389]
[121.12348938 0.22758278]
[115.27823639 7.32131290]
[110.27349091 21.46177101]
[105.26874542 35.60222626]
[100.26399994 49.74268341]
[95.25925446 63.88314056]
[100.74497986 68.99752045]
[117.20214081 84.34065247]
[130.95770264 78.35865021]
[144.71327209 72.37665558]
[154.02685547 58.87889481]
[170.34907532 60.46533203]
[176.88906860 75.50396729]
[166.91902161 88.52435303]
[150.69528198 86.13221741]
[136.93971252 92.11421967]
[123.18414307 98.09622192]
[124.52753448 105.47492981]
[128.55772400 127.61104584]
[143.53895569 128.36111450]
[158.52018738 129.11117554]
[171.33415222 119.45808411]
[186.83406067 123.59721375]
[193.12971497 138.35337830]
[185.39163208 152.40690613]
[169.55581665 154.97714233]
[157.77012634 144.09240723]
[142.78889465 143.34234619]
[127.80765533 142.59226990]
[122.42536926 147.81539917]
[132.87142944 158.58013916]
[122.10652924 169.02603149]
[111.66078186 158.26162720]
[106.27849579 163.48474121]
[106.57862854 178.48173523]
[106.87876129 193.47874451]
[107.17889404 208.47573853]
[107.47902679 223.47273254]
[107.77915192 238.46972656]
[108.07928467 253.46672058]
[108.52944946 268.45996094]
[109.12959290 283.44796753]
[109.72973633 298.43594360]
[110.32987976 313.42395020]
[121.66114044 324.11227417]
[122.05626678 339.32077026]
[111.79675293 350.05752563]
[112.39689636 365.04550171]
[123.72815704 375.73382568]
[124.12327576 390.94232178]
[113.86376190 401.67910767]
[114.46390533 416.66708374]
[115.06404877 431.65505981]
[115.66419983 446.64306641]
[126.57070160 454.60330200]
[130.82194519 467.21356201]
[127.07241821 479.77865601]
[116.91232300 487.75607300]
[117.21245575 502.75308228]
[126.15302277 516.50073242]
[118.47731781 530.99267578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[6 149]
[7 148]
[8 147]
[9 146]
[12 143]
[13 142]
[16 139]
[17 138]
[18 137]
[19 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 65]
[29 64]
[30 63]
[31 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 95]
[79 94]
[81 92]
[82 91]
[83 90]
[84 89]
[103 112]
[104 111]
[105 110]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
