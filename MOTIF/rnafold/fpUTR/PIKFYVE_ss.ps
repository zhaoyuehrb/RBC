%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAUGUAAGCAGCUUCGCUUCCUGCCGCAACCGUCCGCGGCCUGAGGAGCCCACCGCCGCUCUCGGGGGCCGACUUCCGGGGGCUGAGCCGUUGAAGCGGAGGCUGGGGCGGGGGGCAGCCGGCGCGGCCGGGGCAGGAGGCGCAGACUCAUGAA\
) } def
/len { sequence length } bind def

/coor [
[-15.83879662 775.34405518]
[-30.30073738 769.39544678]
[-37.50968170 755.51861572]
[-34.06178665 740.26586914]
[-21.58504295 730.83905029]
[-20.99244308 715.85076904]
[-20.39984512 700.86248779]
[-19.80724525 685.87420654]
[-32.59110260 693.72106934]
[-46.76426315 688.80969238]
[-51.95183563 674.73529053]
[-44.35647202 661.80041504]
[-29.53804588 659.47357178]
[-18.34377480 669.45800781]
[-16.27574730 654.60125732]
[-14.35459042 639.72479248]
[-12.58049202 624.83007812]
[-18.75819016 611.27703857]
[-9.44300747 598.48883057]
[-7.66891003 583.59411621]
[-5.89481211 568.69940186]
[-4.12071466 553.80468750]
[-2.34661722 538.90997314]
[-0.57251966 524.01525879]
[1.20157790 509.12054443]
[2.97567558 494.22583008]
[4.74977303 479.33111572]
[6.52387047 464.43640137]
[8.29796791 449.54168701]
[6.61774778 447.23483276]
[5.77524424 444.10604858]
[6.09481764 440.48046875]
[7.77371359 436.79669189]
[10.84568214 433.55825806]
[13.79020309 418.85009766]
[16.73472214 404.14193726]
[11.64634323 390.14346313]
[21.94209671 378.13064575]
[24.88661575 363.42248535]
[27.83113670 348.71432495]
[30.77565765 334.00616455]
[33.72017670 319.29800415]
[31.94008255 312.08355713]
[36.87090302 304.32965088]
[40.10543823 289.68255615]
[38.48372269 286.49511719]
[38.35720444 282.35235596]
[40.16289520 277.98059082]
[43.98993683 274.27569580]
[48.08649826 259.84591675]
[42.86827087 243.11447144]
[56.12280655 230.36721802]
[59.93347931 215.85932922]
[63.74414825 201.35144043]
[67.55481720 186.84356689]
[63.30465317 172.56822205]
[74.29396820 161.18641663]
[78.10463715 146.67852783]
[81.91530609 132.17063904]
[85.72597504 117.66275024]
[89.53664398 103.15486145]
[89.98114777 88.16145325]
[87.03662872 73.45330048]
[84.09210968 58.74514389]
[81.14758301 44.03698730]
[78.20306396 29.32883453]
[75.25854492 14.62068081]
[72.31402588 -0.08747364]
[69.36950684 -14.79562759]
[66.42498779 -29.50378227]
[63.48046494 -44.21193695]
[60.53594589 -58.92008972]
[49.30754471 -70.87229156]
[54.30265427 -86.49217987]
[70.38273621 -89.71134949]
[81.00597382 -77.21820068]
[75.24409485 -61.86461258]
[78.18862152 -47.15645599]
[81.13314056 -32.44830322]
[84.07765961 -17.74014854]
[87.02217865 -3.03199387]
[89.96669769 11.67616081]
[92.91121674 26.38431549]
[95.85574341 41.09246826]
[98.80026245 55.80062485]
[101.74478149 70.50877380]
[104.68930054 85.21693420]
[111.88359833 87.33638763]
[126.27219391 91.57530212]
[133.46649170 93.69475555]
[143.91474915 82.93214417]
[154.36302185 72.16954041]
[164.81127930 61.40692902]
[168.87223816 46.11578369]
[183.28900146 42.37329483]
[193.73727417 31.61068726]
[204.18553162 20.84807777]
[210.88000488 5.27180195]
[227.70077515 7.39270878]
[230.31919861 24.14323616]
[214.94813538 31.29634476]
[204.49987793 42.05895233]
[194.05160522 52.82156372]
[190.73799133 67.34289551]
[175.57389832 71.85519409]
[165.12562561 82.61780548]
[154.67736816 93.38041687]
[144.22909546 104.14302063]
[129.61647034 112.89014435]
[115.06763458 113.41978455]
[104.04453278 106.96553040]
[100.23386383 121.47341919]
[96.42319489 135.98130798]
[92.61252594 150.48919678]
[88.80185699 164.99708557]
[92.77945709 180.31011963]
[82.06270599 190.65423584]
[78.25203705 205.16210938]
[74.44136810 219.66999817]
[70.63069916 234.17788696]
[76.45829773 245.72343445]
[72.94825745 257.75320435]
[62.51626587 263.94247437]
[58.41970444 278.37225342]
[54.75254822 292.91708374]
[51.51800919 307.56417847]
[48.42832947 322.24252319]
[45.48381042 336.95068359]
[42.53929138 351.65884399]
[39.59477234 366.36700439]
[36.65024948 381.07516479]
[41.52801895 396.12567139]
[31.44287682 407.08645630]
[28.49835777 421.79461670]
[25.55383682 436.50277710]
[23.19268417 451.31576538]
[21.41858673 466.21051025]
[19.64448929 481.10522461]
[17.87039185 495.99993896]
[16.09629440 510.89465332]
[14.32219696 525.78936768]
[12.54809952 540.68408203]
[10.77400208 555.57879639]
[8.99990368 570.47351074]
[7.22580671 585.36822510]
[5.45170879 600.26293945]
[11.50251198 614.88134766]
[2.31422400 626.60418701]
[0.54012644 641.49890137]
[2.63960123 650.44476318]
[-1.41898882 656.66931152]
[-3.48701739 671.52606201]
[-4.81895590 686.46679688]
[-5.41155481 701.45507812]
[-6.00415373 716.44335938]
[-6.59675312 731.43170166]
[5.09678316 741.81414795]
[7.32968903 757.29144287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 156]
[6 155]
[7 154]
[8 153]
[14 152]
[15 151]
[16 149]
[17 148]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[28 137]
[29 136]
[34 135]
[35 134]
[36 133]
[38 131]
[39 130]
[40 129]
[41 128]
[42 127]
[44 126]
[45 125]
[49 124]
[50 123]
[52 120]
[53 119]
[54 118]
[55 117]
[57 115]
[58 114]
[59 113]
[60 112]
[61 111]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[90 108]
[91 107]
[92 106]
[93 105]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
