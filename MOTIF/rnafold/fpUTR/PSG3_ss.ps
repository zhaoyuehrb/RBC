%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGUGCUCCUGCCCCGGGAAGAGGCUCAGCGCAGAAGGAGGAAGGACAGCACAGCUGAGAGCCAUGCUCAGGAAGUUUCUGGAUCCUAGGCUCAGCUCCACAGAGGAGAACACGCAGGCAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[110.62271118 140.55178833]
[98.02034760 141.87327576]
[85.59886932 139.36874390]
[74.49324799 133.26702881]
[65.71820068 124.12567902]
[60.07552719 112.77993011]
[45.20193481 114.72318268]
[30.32834244 116.66643524]
[15.45474911 118.60969543]
[0.63120300 120.90370178]
[-14.13402653 123.54718781]
[-28.89925575 126.19067383]
[-43.66448593 128.83415222]
[-55.88510132 138.88238525]
[-69.77674103 133.50914001]
[-84.54196930 136.15263367]
[-99.27494812 138.97030640]
[-113.97361755 141.96179199]
[-115.81962585 155.37634277]
[-121.72353363 167.53703308]
[-131.09077454 177.25169373]
[-142.98805237 183.57287598]
[-156.23629761 185.89021301]
[-169.52754211 183.98930359]
[-181.55404663 178.07153320]
[-191.13691711 168.73280334]
[-197.34173584 156.90354919]
[-212.16528320 159.19755554]
[-226.89340210 167.59510803]
[-239.03991699 155.76725769]
[-231.03678894 140.82113647]
[-214.45928955 144.37400818]
[-199.63574219 142.08000183]
[-196.11489868 125.88949585]
[-186.65786743 112.24014282]
[-172.67488098 103.21629333]
[-156.26985168 100.20886230]
[-139.92378235 103.70101929]
[-126.11962891 113.19081116]
[-116.96510315 127.26311493]
[-102.26642609 124.27163696]
[-96.28234100 119.81251526]
[-87.18544769 121.38739777]
[-72.42021942 118.74391937]
[-61.25571060 108.88475800]
[-46.30796814 114.06892395]
[-31.54273987 111.42543793]
[-16.77750969 108.78195953]
[-2.01228094 106.13847351]
[1.44871855 102.72221375]
[7.12344646 101.50525665]
[13.51149368 103.73609924]
[28.38508606 101.79284668]
[43.25867844 99.84958649]
[58.13227081 97.90633392]
[62.99433517 80.30556488]
[74.87782288 66.44160461]
[91.52796936 58.94498062]
[91.17368317 43.94916534]
[90.81940460 28.95334816]
[90.46511841 13.95753288]
[90.11083984 -1.03828287]
[77.78551483 -10.66222858]
[74.58049774 -25.96784592]
[82.00910187 -39.72828674]
[96.56377411 -45.44629669]
[111.37223053 -40.42200470]
[119.44238281 -27.02772522]
[116.96374512 -11.58782959]
[105.10665131 -1.39256489]
[105.46093750 13.60325050]
[105.81521606 28.59906578]
[106.16950226 43.59488297]
[106.52378082 58.59069824]
[120.86645508 63.64231873]
[132.46343994 73.47802734]
[139.78875732 86.80360413]
[141.87850952 101.86562347]
[156.50242615 105.20343018]
[171.12634277 108.54124451]
[185.75025940 111.87905884]
[200.37419128 115.21687317]
[214.99810791 118.55468750]
[229.62202454 121.89250183]
[241.30895996 111.85649109]
[256.48709106 110.64070892]
[269.31893921 118.50248718]
[274.99301147 132.24813843]
[289.61694336 135.58595276]
[304.24084473 138.92376709]
[310.81088257 137.30554199]
[316.34545898 139.05244446]
[319.46871948 142.77998352]
[333.91870117 146.80468750]
[345.56216431 135.12882996]
[361.40707397 130.91494751]
[377.13186646 135.21499634]
[388.49642944 146.77198792]
[392.48556519 162.38543701]
[407.02658081 166.06771851]
[421.56756592 169.75000000]
[436.10858154 173.43228149]
[450.57098389 166.48834229]
[464.95388794 173.59550476]
[468.22396851 189.30174255]
[457.87268066 201.55859375]
[441.84066772 200.96365356]
[432.42630005 187.97329712]
[417.88528442 184.29101562]
[403.34429932 180.60871887]
[388.80328369 176.92643738]
[379.90615845 187.35472107]
[367.31518555 192.94033813]
[353.48052979 192.53367615]
[341.12145996 186.15727234]
[332.69210815 175.01272583]
[329.89401245 161.25465393]
[315.44403076 157.22996521]
[300.90304565 153.54768372]
[286.27911377 150.20986938]
[271.65518188 146.87205505]
[260.57901001 156.79457092]
[245.60682678 158.31025696]
[232.45932007 150.62933350]
[226.28421021 136.51641846]
[211.66029358 133.17860413]
[197.03637695 129.84078979]
[182.41244507 126.50298309]
[167.78852844 123.16516876]
[153.16461182 119.82735443]
[138.54069519 116.48954010]
[131.85279846 127.25233459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 55]
[7 54]
[8 53]
[9 52]
[10 49]
[11 48]
[12 47]
[13 46]
[15 44]
[16 43]
[17 41]
[18 40]
[27 33]
[28 32]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[78 131]
[79 130]
[80 129]
[81 128]
[82 127]
[83 126]
[84 125]
[88 121]
[89 120]
[90 119]
[93 118]
[94 117]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
