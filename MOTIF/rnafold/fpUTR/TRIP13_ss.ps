%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGUCAGGAGGUGGUGCGCCUCGCGCGGCAGAUUCGAAGCUAGGGCGGGGCCCGCGGGCUGAGGCAGCGGCUGUGGCGGCGACGCUGGGCGUGAGGUGGCGGCGGCCGCGCCCUGGUUGGGUCCCCACUGCUCUCGGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[94.40479279 115.52539062]
[83.46143341 125.78418732]
[72.51806641 136.04298401]
[61.57470703 146.30177307]
[50.63134384 156.56056213]
[39.68798065 166.81935120]
[40.99818420 175.22692871]
[38.85934830 183.36509705]
[33.70181656 189.89370728]
[26.44641113 193.76904297]
[18.34073257 194.41041565]
[10.74482155 191.78599548]
[-1.03992605 201.06607056]
[-7.09518290 215.68264771]
[-21.88120842 217.47784424]
[-33.66595840 226.75791931]
[-45.45070267 236.03797913]
[-57.23545074 245.31805420]
[-69.02020264 254.59812927]
[-77.72351837 269.14764404]
[-94.11375427 264.81216431]
[-94.48497772 247.86228943]
[-78.30027008 242.81338501]
[-66.51552582 233.53330994]
[-54.73077393 224.25323486]
[-42.94602585 214.97315979]
[-31.16127968 205.69309998]
[-25.94894791 191.74028015]
[-10.31999683 189.28132629]
[1.46475065 180.00125122]
[7.30403805 159.18711853]
[29.42918777 155.87599182]
[40.37255096 145.61720276]
[51.31591415 135.35839844]
[62.25927734 125.09961700]
[73.20264435 114.84082031]
[84.14600372 104.58203125]
[89.83625793 84.00951385]
[114.10137177 83.91424561]
[117.93167114 69.41152954]
[121.76197052 54.90880966]
[125.59226990 40.40609360]
[129.42256165 25.90337753]
[133.25286865 11.40065956]
[137.08316040 -3.10205722]
[140.91346741 -17.60477448]
[144.74375916 -32.10749054]
[148.57406616 -46.61021042]
[144.61718750 -61.92861938]
[155.34793091 -72.25820923]
[159.17823792 -86.76092529]
[163.00852966 -101.26364136]
[166.83883667 -115.76636505]
[165.22811890 -130.67962646]
[158.38951111 -144.03004456]
[151.55091858 -157.38046265]
[139.49703979 -162.10163879]
[134.09172058 -173.42092896]
[137.75578308 -184.99676514]
[131.20602417 -198.49122620]
[117.33203888 -207.23449707]
[118.23722839 -223.60864258]
[132.99040222 -230.76934814]
[146.41476440 -221.35029602]
[144.70048523 -205.04100037]
[151.25024414 -191.54653931]
[166.28044128 -182.54785156]
[164.90132141 -164.21905518]
[171.73992920 -150.86863708]
[178.57852173 -137.51823425]
[193.53601074 -136.38961792]
[202.30047607 -148.56269836]
[211.06495667 -160.73579407]
[219.82942200 -172.90887451]
[228.59390259 -185.08195496]
[230.37818909 -200.80223083]
[244.09384155 -206.61001587]
[252.85830688 -218.78309631]
[247.57151794 -231.55693054]
[249.29202271 -245.16474915]
[257.46148682 -256.04721069]
[269.84906006 -261.41159058]
[283.15951538 -259.94799805]
[292.18386841 -271.92968750]
[301.20825195 -283.91137695]
[310.23260498 -295.89306641]
[314.93212891 -312.18264771]
[331.88607788 -312.17620850]
[336.57318115 -295.88305664]
[322.21429443 -286.86871338]
[313.18994141 -274.88702393]
[304.16558838 -262.90530396]
[295.14120483 -250.92362976]
[300.44879150 -235.42466736]
[295.44723511 -219.65031433]
[281.91027832 -209.84680176]
[265.03140259 -210.01863098]
[256.26690674 -197.84555054]
[255.10952759 -182.99597168]
[240.76698303 -176.31748962]
[232.00251770 -164.14439392]
[223.23803711 -151.97131348]
[214.47357178 -139.79823303]
[205.70909119 -127.62514496]
[181.34155273 -111.93606567]
[177.51124573 -97.43334198]
[173.68095398 -82.93062592]
[169.85064697 -68.42790985]
[174.08149719 -54.14683151]
[163.07678223 -42.77991104]
[159.24649048 -28.27719307]
[155.41618347 -13.77447510]
[151.58589172 0.72824210]
[147.75558472 15.23095894]
[143.92527771 29.73367691]
[140.09498596 44.23639297]
[136.26467896 58.73910904]
[132.43438721 73.24182892]
[128.60408020 87.74454498]
[131.01434326 102.54963684]
[139.24697876 115.08851624]
[147.61405945 127.53810120]
[156.11457825 139.89694214]
[164.61511230 152.25579834]
[173.11563110 164.61463928]
[181.61616516 176.97348022]
[190.11668396 189.33232117]
[205.53292847 188.74678040]
[218.80683899 196.60852051]
[225.70275879 210.40887451]
[224.02021790 225.74421692]
[214.29612732 237.72108459]
[199.63337708 242.51770020]
[184.71083069 238.60350037]
[174.29020691 227.22747803]
[171.69667053 212.01966858]
[177.75784302 197.83285522]
[169.25730896 185.47401428]
[160.75679016 173.11515808]
[152.25625610 160.75631714]
[143.75573730 148.39747620]
[135.25520325 136.03863525]
[128.82659912 132.28279114]
[126.70810699 123.32115936]
[118.47545624 110.78227997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[12 30]
[13 29]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[50 108]
[51 107]
[52 106]
[53 105]
[54 70]
[55 69]
[56 68]
[59 66]
[60 65]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[77 98]
[78 97]
[83 93]
[84 92]
[85 91]
[86 90]
[120 145]
[121 144]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
