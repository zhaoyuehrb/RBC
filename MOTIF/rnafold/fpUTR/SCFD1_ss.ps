%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCUUUGCUUCCGGGGCGGUAAGGGCAGCCACGUCAUCCCCCCGCUCCGCUCCCCAGCCGGGCAGUGGCUCGUGGGAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[125.09654236 179.83589172]
[121.95054626 170.22085571]
[122.66708374 160.07051086]
[127.18469238 150.88696289]
[118.45681000 138.68762207]
[109.72892761 126.48826599]
[101.00104523 114.28892517]
[88.35047913 108.33451843]
[86.79961395 94.43895721]
[78.07173157 82.23961639]
[69.34384155 70.04026794]
[55.75154877 69.34569550]
[45.24190903 61.01007080]
[41.57947922 48.30964661]
[45.90681458 36.02777863]
[37.63029861 23.51781082]
[29.35378456 11.00784397]
[21.07726860 -1.50212359]
[12.80075169 -14.01209068]
[4.52423525 -26.52205849]
[-3.75228071 -39.03202438]
[-19.13590622 -39.83840179]
[-30.95677948 -49.43633652]
[-34.81377792 -63.98238754]
[-29.43033028 -77.84443665]
[-37.70684814 -90.35440826]
[-45.98336411 -102.86437225]
[-60.80577087 -99.59931183]
[-75.80613708 -101.91307831]
[-88.95578003 -109.49273682]
[-98.47632599 -121.31321716]
[-103.08018494 -135.77589417]
[-102.14473724 -150.92478943]
[-95.79649353 -164.71116638]
[-84.89398956 -175.27052307]
[-70.91171265 -181.17478943]
[-55.74064255 -181.62545776]
[-41.43254471 -176.56158447]
[-29.92247391 -166.66801453]
[-22.76707077 -153.28277588]
[-20.93404388 -138.21611023]
[-24.67129707 -123.50566101]
[-33.47339630 -111.14089203]
[-25.19688034 -98.63092041]
[-16.92036247 -86.12095642]
[-2.05698490 -85.65407562]
[9.82192421 -76.41527557]
[14.03214836 -61.78218079]
[8.75768661 -47.30854034]
[17.03420258 -34.79857254]
[25.31071854 -22.28860664]
[33.58723450 -9.77863979]
[41.86375046 2.73132753]
[50.14026642 15.24129486]
[58.41678238 27.75126266]
[74.92919159 30.31425476]
[84.76541901 44.23441696]
[81.54319000 61.31238556]
[90.27107239 73.51173401]
[98.99895477 85.71107483]
[111.64952087 91.66548157]
[113.20038605 105.56104279]
[121.92826843 117.76038361]
[130.65615845 129.95973206]
[139.38403320 142.15907288]
[160.09625244 143.85661316]
[173.05313110 159.74430847]
[170.61738586 179.81782532]
[181.02848816 190.61637878]
[191.43960571 201.41493225]
[201.85072327 212.21348572]
[212.26184082 223.01203918]
[222.67294312 233.81059265]
[238.57412720 237.82113647]
[242.79057312 253.66896057]
[230.98477173 265.05117798]
[215.30151367 260.25875854]
[211.87438965 244.22169495]
[201.46328735 233.42315674]
[191.05216980 222.62460327]
[180.64105225 211.82604980]
[170.22994995 201.02749634]
[159.81883240 190.22894287]
[150.35688782 193.07518005]
[140.46150208 192.13729858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[7 62]
[9 60]
[10 59]
[11 58]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[25 45]
[26 44]
[27 43]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
