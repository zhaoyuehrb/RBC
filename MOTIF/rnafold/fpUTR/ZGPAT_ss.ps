%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCCAAGCACUUCCGGAAGCGGCGGCGCUCGGGAGGAAGUGCCGAUCGGCUGCUGGGGCGAAAAGGGGGCGCCGGGCCGCUCUAGCCGGUGAGGCCGGCGGGCUCUCUGUGGCUGCGGCUGGGAAACCGCGCGGAGGAGGUGCCCGGCCGGGGACCAGCCCUGGUCCAGCGCCUCCCUCUCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[-198.31781006 353.01501465]
[-203.82344055 359.09127808]
[-211.20114136 362.44812012]
[-219.21105957 362.60333252]
[-226.53909302 359.60595703]
[-238.81846619 368.22088623]
[-251.09783936 376.83581543]
[-253.49316406 396.76748657]
[-269.51068115 408.35687256]
[-288.59445190 404.51828003]
[-300.43154907 413.73147583]
[-312.26867676 422.94467163]
[-324.10577393 432.15786743]
[-335.94287109 441.37103271]
[-347.77999878 450.58422852]
[-359.61709595 459.79742432]
[-371.45419312 469.01062012]
[-370.30706787 487.09106445]
[-380.14492798 502.11672974]
[-396.88031006 508.18841553]
[-413.76364136 503.05761719]
[-425.28967285 512.65716553]
[-436.81567383 522.25665283]
[-448.34170532 531.85620117]
[-453.49627686 547.42419434]
[-469.60842896 550.47875977]
[-480.10336304 537.87768555]
[-474.18478394 522.58380127]
[-457.94122314 520.33020020]
[-446.41522217 510.73065186]
[-434.88919067 501.13113403]
[-423.36318970 491.53161621]
[-425.95425415 479.65084839]
[-423.22509766 467.72695923]
[-415.63504028 458.04232788]
[-404.57980347 452.47760010]
[-392.13522339 452.14651489]
[-380.66738892 457.17352295]
[-368.83029175 447.96032715]
[-356.99319458 438.74713135]
[-345.15606689 429.53393555]
[-333.31896973 420.32073975]
[-321.48187256 411.10754395]
[-309.64474487 401.89437866]
[-297.80764771 392.68118286]
[-299.33093262 382.49859619]
[-296.45861816 372.52731323]
[-289.64657593 364.59274292]
[-280.07812500 360.17645264]
[-269.45886230 360.13970947]
[-259.71276855 364.55642700]
[-247.43339539 355.94149780]
[-235.15402222 347.32656860]
[-228.04125977 326.89166260]
[-205.71171570 325.12033081]
[-194.02854919 315.71270752]
[-182.34539795 306.30505371]
[-170.66223145 296.89739990]
[-158.97908020 287.48974609]
[-147.29591370 278.08212280]
[-135.61274719 268.67446899]
[-132.36894226 262.01864624]
[-123.65776062 259.20977783]
[-111.82065582 249.99659729]
[-111.47012329 239.76237488]
[-105.40922546 231.23725891]
[-95.44827271 227.38526917]
[-84.79899597 229.70788574]
[-72.66374207 220.89111328]
[-60.52848816 212.07434082]
[-48.39323425 203.25755310]
[-36.25798035 194.44078064]
[-24.12272453 185.62399292]
[-11.98746872 176.80722046]
[0.14778596 167.99044800]
[5.89649439 154.24992371]
[21.60894012 152.39799500]
[33.74419403 143.58122253]
[45.87944794 134.76445007]
[58.01470566 125.94766235]
[70.14995575 117.13088226]
[82.28521729 108.31410980]
[67.29404449 108.82877350]
[56.80293274 98.10792542]
[57.64216232 83.13142395]
[69.26535034 73.64978027]
[84.10516357 75.83607483]
[92.50000000 88.26645660]
[92.50000000 73.26645660]
[92.50000000 58.26646042]
[92.50000000 43.26646042]
[92.50000000 28.26646042]
[92.50000000 13.26645947]
[86.45365906 -2.57267261]
[100.00000000 -12.76742744]
[113.54634094 -2.57267261]
[107.50000000 13.26645947]
[107.50000000 28.26646042]
[107.50000000 43.26646042]
[107.50000000 58.26646042]
[107.50000000 73.26645660]
[107.50000000 88.26645660]
[119.56195068 97.18326569]
[133.90248108 92.78451538]
[148.24302673 88.38576508]
[162.58355713 83.98700714]
[176.92410278 79.58825684]
[164.27946472 71.51898193]
[160.89485168 56.90582275]
[168.70429993 44.09908676]
[183.24531555 40.41683960]
[196.20881653 47.96320343]
[200.18714905 62.42601013]
[192.90708923 75.54081726]
[207.61279297 72.58406067]
[222.29354858 69.50582886]
[236.94834900 66.30633545]
[248.78057861 55.80352402]
[262.86532593 60.64804077]
[277.52011108 57.44854736]
[292.17492676 54.24905396]
[306.82971191 51.04955673]
[321.48452759 47.85006332]
[336.13931274 44.65056992]
[350.79412842 41.45107269]
[365.44894409 38.25157928]
[373.06704712 27.82897758]
[385.35208130 25.47328949]
[395.60537720 31.91296005]
[410.31106567 28.95620537]
[425.01675415 25.99944878]
[429.84753418 11.42004299]
[441.33148193 1.22129202]
[456.37948608 -1.85339034]
[470.94366455 3.02306962]
[481.10638428 14.53892899]
[484.13388062 29.59647942]
[479.21179199 44.14531708]
[467.66412354 54.27187347]
[452.59716797 57.25215912]
[438.06384277 52.28449249]
[427.97351074 40.70515060]
[413.26782227 43.66190338]
[398.56213379 46.61865997]
[386.04754639 58.91027451]
[368.64843750 52.90638351]
[353.99362183 56.10587692]
[339.33880615 59.30537033]
[324.68402100 62.50486755]
[310.02920532 65.70436096]
[295.37442017 68.90385437]
[280.71960449 72.10334778]
[266.06481934 75.30284119]
[255.28079224 85.57680511]
[240.14784241 80.96113586]
[225.49304199 84.16062927]
[219.61816406 88.66708374]
[210.56954956 87.28975677]
[195.86384583 90.24651337]
[181.32284546 93.92879486]
[166.98231506 98.32754517]
[152.64176941 102.72629547]
[138.30123901 107.12504578]
[123.96070099 111.52379608]
[91.10198975 120.44936371]
[78.96673584 129.26614380]
[66.83148193 138.08291626]
[54.69622803 146.89970398]
[42.56097412 155.71647644]
[30.42571831 164.53324890]
[23.80901527 178.90440369]
[8.96456432 180.12570190]
[-3.17069006 188.94247437]
[-15.30594540 197.75924683]
[-27.44120026 206.57603455]
[-39.57645416 215.39280701]
[-51.71170807 224.20959473]
[-63.84696579 233.02636719]
[-75.98221588 241.84315491]
[-83.32075500 260.60574341]
[-102.60746765 261.83370972]
[-114.44457245 271.04690552]
[-126.20510864 280.35763550]
[-137.88827515 289.76525879]
[-149.57142639 299.17291260]
[-161.25459290 308.58056641]
[-172.93774414 317.98822021]
[-184.62091064 327.39584351]
[-196.30406189 336.80349731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 53]
[6 52]
[7 51]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[21 32]
[22 31]
[23 30]
[24 29]
[55 189]
[56 188]
[57 187]
[58 186]
[59 185]
[60 184]
[61 183]
[63 182]
[64 181]
[68 179]
[69 178]
[70 177]
[71 176]
[72 175]
[73 174]
[74 173]
[75 172]
[77 170]
[78 169]
[79 168]
[80 167]
[81 166]
[82 165]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
[103 164]
[104 163]
[105 162]
[106 161]
[107 160]
[114 159]
[115 158]
[116 156]
[117 155]
[119 153]
[120 152]
[121 151]
[122 150]
[123 149]
[124 148]
[125 147]
[126 146]
[129 144]
[130 143]
[131 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
