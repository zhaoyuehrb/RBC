%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUAGCUCUCCAAACUAGGACUUGCUCAGCAGAGGCCGCCAGCCCGGAGCUGGAUCCAGAGCCCGGCCUUGGGGACCCCAGCUCCCACCUGCGCCCUGCCUUCCAGAUCAGCCAACCGCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[94.99650574 114.87376404]
[84.00073242 125.07635498]
[73.00495148 135.27894592]
[62.00917435 145.48153687]
[51.14144135 155.82040405]
[40.40343857 166.29396057]
[29.66543388 176.76751709]
[29.79810143 194.20776367]
[17.55561066 206.15278625]
[0.79616493 205.61259460]
[-9.67738724 216.35060120]
[-20.15093994 227.08860779]
[-19.70332909 242.88655090]
[-30.61823273 254.31636047]
[-46.42003250 254.59690857]
[-57.73379898 243.56178284]
[-57.84727478 227.75788879]
[-46.69314194 216.56143188]
[-30.88894272 216.61505127]
[-20.41539001 205.87704468]
[-9.94183826 195.13903809]
[-11.89820766 182.33886719]
[-6.00649309 170.58918762]
[5.76608706 164.31666565]
[19.19188309 166.02951050]
[29.92988586 155.55595398]
[40.66788864 145.08241272]
[43.28808975 138.08311462]
[51.80658340 134.48574829]
[62.80236053 124.28316498]
[73.79814148 114.08057404]
[84.79391479 103.87798309]
[92.45527649 90.98210907]
[96.15663910 76.44594574]
[99.85800171 61.90979004]
[103.55935669 47.37363052]
[107.26071930 32.83747101]
[100.84946442 13.80255032]
[114.70524597 0.40813541]
[117.67743683 -14.29445171]
[120.46611023 -29.03294945]
[123.07083130 -43.80506516]
[125.67555237 -58.57718277]
[115.06947327 -69.74934387]
[113.09863281 -84.84799194]
[120.31101990 -98.05577087]
[133.75675964 -104.40795898]
[136.36148071 -119.18006897]
[138.96620178 -133.95219421]
[141.57092285 -148.72430420]
[144.17564392 -163.49641418]
[146.78036499 -178.26853943]
[149.38508606 -193.04064941]
[151.98982239 -207.81277466]
[143.31153870 -227.32612610]
[156.87715149 -242.80003357]
[158.37066650 -257.72549438]
[159.86418152 -272.65097046]
[161.35769653 -287.57641602]
[162.85122681 -302.50189209]
[156.52642822 -317.00387573]
[165.49249268 -328.89752197]
[166.98602295 -343.82296753]
[162.54679871 -360.18542480]
[177.04089355 -368.98074341]
[189.50483704 -357.48785400]
[181.91148376 -342.32943726]
[180.41796875 -327.40399170]
[186.84957886 -313.96957397]
[177.77668762 -301.00836182]
[176.28315735 -286.08291626]
[174.78964233 -271.15744019]
[173.29612732 -256.23199463]
[171.80261230 -241.30651855]
[178.60363770 -235.30601501]
[181.86990356 -226.69635010]
[180.72642517 -217.41946411]
[175.30891418 -209.63290405]
[166.76193237 -205.20805359]
[164.15721130 -190.43592834]
[161.55249023 -175.66381836]
[158.94776917 -160.89169312]
[156.34304810 -146.11958313]
[153.73831177 -131.34747314]
[151.13359070 -116.57534790]
[148.52886963 -101.80323029]
[158.99114990 -91.23542023]
[161.25125122 -76.35738373]
[154.23522949 -62.84336472]
[140.44767761 -55.97245789]
[137.84294128 -41.20034409]
[135.23822021 -26.42822647]
[137.19657898 -19.21570778]
[132.38002014 -11.32225990]
[129.40783691 3.38032746]
[135.87026978 11.46765423]
[136.77406311 22.00210571]
[131.57087708 31.45936012]
[121.79688263 36.53883362]
[118.09552002 51.07499313]
[114.39415741 65.61115265]
[110.69279480 80.14730835]
[106.99143982 94.68347168]
[123.17013550 95.38758087]
[137.20146179 109.78289032]
[145.65126038 122.17647552]
[154.10105896 134.57005310]
[158.31858826 136.39573669]
[161.36811829 139.22550964]
[163.07362366 142.54464722]
[163.45332336 145.83578491]
[162.70233154 148.64541626]
[169.87614441 161.81874084]
[184.79560852 167.71693420]
[189.34837341 183.10043335]
[180.04193115 196.16831970]
[164.01539612 196.89604187]
[153.56294250 184.72534180]
[156.70281982 168.99253845]
[149.52900696 155.81921387]
[141.70747375 143.01985168]
[133.25767517 130.62628174]
[124.80787659 118.23269653]
[117.35503387 117.39295959]
[108.44798279 129.46211243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 27]
[6 26]
[7 25]
[10 21]
[11 20]
[12 19]
[33 103]
[34 102]
[35 101]
[36 100]
[37 99]
[39 95]
[40 94]
[41 92]
[42 91]
[43 90]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[62 68]
[63 67]
[105 123]
[106 122]
[107 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
