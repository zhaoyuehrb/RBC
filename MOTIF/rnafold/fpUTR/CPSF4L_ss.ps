%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUAUUGGGCCCACCUGCCUGGGUUCCAGCAGCUUCCGCAGCCCCAGCAGGAGACGGAAG\
) } def
/len { sequence length } bind def

/coor [
[88.90431213 105.16035461]
[74.28039551 101.82254791]
[59.65647507 98.48473358]
[50.38091278 105.03760529]
[39.24937820 105.17481995]
[30.18808174 99.10215759]
[26.24927330 89.17112732]
[12.03036308 84.39382935]
[-2.18854690 79.61653137]
[-16.40745735 74.83923340]
[-30.62636757 70.06192780]
[-44.95996094 65.64060211]
[-59.39932251 61.57799530]
[-73.83868408 57.51538849]
[-88.27805328 53.45278168]
[-101.93807983 61.40131378]
[-117.19607544 57.28195953]
[-124.99974060 43.53865814]
[-120.71929932 28.32506752]
[-106.89426422 20.66713905]
[-91.72677612 25.10818863]
[-84.21544647 39.01342010]
[-69.77607727 43.07602692]
[-55.33671570 47.13863373]
[-40.89735413 51.20124054]
[-33.32052994 49.93045807]
[-25.84906769 55.84302139]
[-11.63015747 60.62031937]
[2.58875275 65.39762115]
[16.80766296 70.17491913]
[31.02657318 74.95221710]
[49.30825806 69.42343140]
[62.99428940 83.86080933]
[77.61820984 87.19862366]
[92.24212646 90.53643799]
[107.01424408 93.14115906]
[121.89783478 95.00631714]
[136.78141785 96.87147522]
[151.66500854 98.73662567]
[166.54859924 100.60178375]
[177.17820740 89.45200348]
[192.15983582 86.73100281]
[205.71070862 93.27607727]
[212.72521973 106.38846588]
[227.60879517 108.25362396]
[239.93159485 98.35794830]
[255.63313293 100.15720367]
[265.39797974 112.58393097]
[263.43280029 128.26556396]
[250.90353394 137.89846802]
[235.24354553 135.76762390]
[225.74365234 123.13720703]
[210.86006165 121.27205658]
[200.82688904 132.24809265]
[186.08000183 135.24699402]
[172.23306274 128.91331482]
[164.68344116 115.48537445]
[149.79985046 113.62021637]
[134.91625977 111.75505829]
[120.03267670 109.88990784]
[105.14908600 108.02474976]
[100.01910400 110.43541718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 25]
[13 24]
[14 23]
[15 22]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
