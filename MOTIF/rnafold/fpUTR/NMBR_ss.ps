%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGUGAGGCUUGCCCCGCGGACAGUAAACUUGCAGGGGCGAGAGGGAGGGACAUCGAUUAAACCUAAAUCGUGGGCGUUCAGUCCUCAGGGCACCGGAGCGCGUGAAAACUCCAGCGGACUCUGCUGGAAAGGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[220.13677979 250.60664368]
[209.41349792 240.11801147]
[198.69021606 229.62939453]
[187.96693420 219.14076233]
[177.24365234 208.65214539]
[162.73486328 205.28398132]
[158.27957153 190.10304260]
[147.55628967 179.61442566]
[132.71182251 180.03546143]
[121.68747711 169.55126953]
[121.34649658 153.97816467]
[110.62321472 143.48953247]
[99.89993286 133.00091553]
[85.30284882 129.54765320]
[71.01662445 134.11973572]
[56.73040771 138.69183350]
[42.44419098 143.26391602]
[28.15797424 147.83599854]
[13.87175560 152.40808105]
[-0.36301342 157.13792419]
[-14.54459095 162.02493286]
[-28.72616959 166.91194153]
[-42.90774536 171.79895020]
[-46.46500778 186.81059265]
[-57.58931732 197.49952698]
[-72.73094940 200.45495605]
[-87.05826569 194.73379517]
[-95.99946594 182.16166687]
[-96.70145416 166.75028992]
[-88.94022369 153.41735840]
[-75.19235229 146.41738892]
[-59.84474182 147.98402405]
[-47.79475403 157.61737061]
[-33.61317825 152.73036194]
[-19.43160057 147.84335327]
[-5.25002193 142.95634460]
[0.09126687 137.76223755]
[9.29966927 138.12187195]
[23.58588600 133.54978943]
[37.87210464 128.97769165]
[52.15832138 124.40560913]
[66.44454193 119.83352661]
[80.73075867 115.26143646]
[78.39453125 96.21677399]
[89.84880066 83.59983826]
[87.53507233 68.77935791]
[85.22133636 53.95887756]
[82.90760040 39.13839722]
[80.59386444 24.31791687]
[68.11242676 14.99850655]
[65.97709656 -0.06452762]
[74.93864441 -11.90624046]
[72.62491608 -26.72672081]
[70.31118011 -41.54719925]
[67.99744415 -56.36767960]
[51.17935181 -67.22340393]
[47.69361115 -86.62823486]
[59.32056427 -102.17485809]
[56.02898407 -116.80924988]
[52.73740768 -131.44364929]
[49.44583130 -146.07803345]
[46.15425110 -160.71243286]
[32.17930222 -167.72918701]
[26.03165245 -182.10765076]
[30.61403275 -197.05877686]
[43.76278305 -205.52307129]
[59.26946640 -203.50396729]
[69.81230164 -191.95483398]
[70.41328430 -176.32879639]
[60.78864670 -164.00401306]
[64.08022308 -149.36961365]
[67.37180328 -134.73522949]
[70.66338348 -120.10083008]
[73.95495605 -105.46643066]
[83.91396332 -102.46796417]
[91.76297760 -95.52094269]
[96.01436615 -85.85126495]
[95.82453156 -75.20876312]
[91.16038513 -65.55060577]
[82.81792450 -58.68141556]
[85.13166046 -43.86093521]
[87.44539642 -29.04045486]
[89.75912476 -14.21997452]
[101.90366364 -5.67328787]
[104.46124268 9.32382679]
[95.41434479 22.00418282]
[97.72808075 36.82466507]
[100.04181671 51.64514542]
[102.35555267 66.46562195]
[104.66928101 81.28610229]
[118.41362000 89.79579926]
[121.69934082 107.05171204]
[110.38855743 122.27763367]
[121.11183929 132.76626587]
[131.83511353 143.25488281]
[147.41195679 143.25126648]
[158.13746643 154.04098511]
[158.04492188 168.89114380]
[168.76820374 179.37976074]
[184.04397583 183.49813843]
[187.73228455 197.92886353]
[198.45556641 208.41748047]
[209.17883301 218.90611267]
[219.90211487 229.39474487]
[230.62539673 239.88336182]
[245.05007935 232.11578369]
[261.14526367 229.15861511]
[277.35223389 231.28668213]
[292.10491943 238.28286743]
[303.98135376 249.46022034]
[311.84072876 263.72940063]
[314.93283081 279.70486450]
[312.96978760 295.83926392]
[306.15277100 310.57357788]
[317.32949829 320.57760620]
[328.50622559 330.58163452]
[339.68298340 340.58566284]
[350.85971069 350.58969116]
[362.03643799 360.59371948]
[373.21316528 370.59777832]
[384.38989258 380.60180664]
[400.22439575 386.66024780]
[398.78613281 403.55310059]
[382.15533447 406.84744263]
[374.38586426 391.77853394]
[363.20913696 381.77450562]
[352.03240967 371.77047729]
[340.85568237 361.76641846]
[329.67892456 351.76239014]
[318.50219727 341.75836182]
[307.32546997 331.75433350]
[296.14874268 321.75030518]
[284.58807373 329.13128662]
[271.49160767 333.24981689]
[257.76165771 333.81515503]
[244.34593201 330.78158569]
[232.17227173 324.35208130]
[222.08435059 314.96469116]
[214.78327942 303.26269531]
[210.77882385 290.05056763]
[210.35388184 276.23864746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[7 99]
[8 98]
[11 95]
[12 94]
[13 93]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 36]
[21 35]
[22 34]
[23 33]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[52 83]
[53 82]
[54 81]
[55 80]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
