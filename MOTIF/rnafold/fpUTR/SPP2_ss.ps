%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUUUGAUAAAGACAGCUCCUCUUAGGAAGAACUGUCAUCCCCAAACACAUAGAGAGACACUCUCUGUCUCUCGAUUACAAUC\
) } def
/len { sequence length } bind def

/coor [
[211.41407776 159.78048706]
[211.80328369 150.79096985]
[197.79304504 145.43251038]
[183.78280640 140.07405090]
[169.77255249 134.71557617]
[155.76231384 129.35711670]
[141.75207520 123.99865723]
[127.74183655 118.64019012]
[116.92536926 128.82009888]
[102.76605988 133.30787659]
[88.06044006 131.21719360]
[75.71294403 122.96093750]
[68.16226196 110.16978455]
[66.89970398 95.37004852]
[52.88946152 90.01158905]
[38.87921906 84.65312195]
[24.86897850 79.29466248]
[10.85873699 73.93619537]
[-4.79484844 76.23310852]
[-13.91832256 64.45977020]
[-27.92856407 59.10131073]
[-43.58214951 61.39822388]
[-52.70562363 49.62488937]
[-66.71586609 44.26642609]
[-82.81586456 47.38444901]
[-93.36035919 34.82476425]
[-87.50207520 19.50769615]
[-71.26751709 17.19013214]
[-61.35740280 30.25618362]
[-47.34716034 35.61464691]
[-32.69568253 32.93445587]
[-22.57010078 45.09106827]
[-8.55985928 50.44953156]
[6.09161997 47.76934433]
[16.21720123 59.92595291]
[30.22744179 65.28441620]
[44.23768234 70.64288330]
[58.24792480 76.00134277]
[72.25816345 81.35980988]
[83.07463074 71.17990112]
[97.23394012 66.69211578]
[111.93955994 68.78281403]
[124.28705597 77.03906250]
[131.83773804 89.83021545]
[133.10029602 104.62995148]
[147.11053467 109.98841095]
[161.12077332 115.34687805]
[175.13102722 120.70533752]
[189.14126587 126.06380463]
[203.15150452 131.42227173]
[217.16174316 136.78073120]
[234.50935364 122.21776581]
[256.94741821 120.08187866]
[276.53811646 131.00276184]
[286.42236328 151.01327515]
[301.41235352 151.56109619]
[316.40234375 152.10893250]
[331.39236450 152.65676880]
[346.38235474 153.20458984]
[361.37234497 153.75242615]
[376.36233521 154.30024719]
[391.35232544 154.84808350]
[404.03485107 145.02294922]
[419.58920288 148.95252991]
[426.08340454 163.62239075]
[418.53570557 177.77906799]
[402.73599243 180.56275940]
[390.80450439 169.83807373]
[375.81451416 169.29025269]
[360.82449341 168.74241638]
[345.83450317 168.19458008]
[330.84451294 167.64675903]
[315.85452271 167.09892273]
[300.86453247 166.55110168]
[285.87454224 166.00326538]
[282.84628296 174.30435181]
[277.95172119 181.67726135]
[271.45751953 187.70889282]
[263.72018433 192.05953979]
[255.16647339 194.48196411]
[246.26991272 194.83552551]
[237.52452087 193.09426880]
[229.41738892 189.34875488]
[222.40156555 183.80134583]
[216.87075806 176.75527954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[8 45]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[20 33]
[21 32]
[23 30]
[24 29]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
