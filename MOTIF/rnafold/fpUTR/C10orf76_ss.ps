%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUGAGCCCGGAGCAGCGGCAGCGUCGGUGGCGUCGAGAGCGAGCGGGCCCGGGAACGGCGCGGGUGGUAGAGGAGGAGCCGCGGGCUCGAUUCUCUAACC\
) } def
/len { sequence length } bind def

/coor [
[257.53521729 173.65542603]
[243.97843933 167.23564148]
[230.42166138 160.81585693]
[216.86488342 154.39607239]
[203.30809021 147.97627258]
[185.70701599 155.97061157]
[167.52224731 148.57910156]
[160.27285767 130.01684570]
[146.18617249 124.86266327]
[132.09950256 119.70848846]
[118.01282501 114.55430603]
[103.92614746 109.40012360]
[95.72618866 109.80063629]
[89.49251556 103.86799622]
[75.56958008 98.28662109]
[57.49766922 101.37968445]
[47.09003067 87.34107208]
[33.00335312 82.18689728]
[15.03417873 85.82964325]
[4.20325565 72.11495209]
[-10.03405094 67.39276123]
[-25.42778397 75.52832794]
[-41.65092468 70.19966888]
[-48.93054581 55.12493134]
[-63.30523682 50.83911896]
[-78.74082947 54.31087875]
[-88.72682953 43.25967789]
[-103.10152435 38.97386169]
[-118.92028046 43.29808044]
[-130.38259888 31.57002068]
[-125.69702148 15.85450649]
[-109.68367004 12.31831169]
[-98.81571198 24.59917068]
[-84.44101715 28.88498306]
[-70.03359985 25.10667419]
[-59.01942444 36.46442795]
[-44.64473343 40.75024033]
[-34.18545151 33.05696106]
[-21.00760269 32.84265900]
[-9.98105526 40.41312408]
[-5.31185818 53.15545273]
[8.92544842 57.87764740]
[19.98320198 52.71590042]
[31.95512772 56.66451263]
[38.15753174 68.10021973]
[52.24420929 73.25439453]
[63.45423126 68.43226624]
[75.30017090 72.74414825]
[81.15094757 84.36367798]
[95.07389069 89.94505310]
[109.08032990 95.31345367]
[123.16699982 100.46762848]
[137.25367737 105.62181091]
[151.34034729 110.77598572]
[165.42703247 115.93016815]
[173.91694641 108.98955536]
[184.46644592 106.31116486]
[195.07846069 108.33074188]
[203.77412415 114.60134125]
[208.96171570 123.88997650]
[209.72789001 134.41949463]
[223.28466797 140.83927917]
[236.84144592 147.25907898]
[250.39822388 153.67886353]
[263.95501709 160.09864807]
[276.45489502 156.49336243]
[287.66882324 162.25236511]
[291.75036621 173.75274658]
[305.10504150 180.58297729]
[318.45974731 187.41320801]
[331.91705322 194.03898621]
[345.47384644 200.45878601]
[359.03060913 206.87857056]
[372.58740234 213.29835510]
[386.14419556 219.71813965]
[399.70095825 226.13792419]
[417.92782593 224.15235901]
[427.46026611 238.79934692]
[441.20651245 244.80271912]
[454.95275879 250.80609131]
[468.69900513 256.80947876]
[482.44528198 262.81283569]
[499.38043213 263.61108398]
[503.30148315 280.10537720]
[488.53726196 288.43927002]
[476.44189453 276.55908203]
[462.69564819 270.55572510]
[448.94940186 264.55233765]
[435.20312500 258.54898071]
[421.45687866 252.54560852]
[409.97372437 256.67535400]
[398.41268921 251.64932251]
[393.28118896 239.69471741]
[379.72439575 233.27493286]
[366.16760254 226.85513306]
[352.61083984 220.43534851]
[339.05404663 214.01556396]
[325.49725342 207.59577942]
[317.97732544 207.57756042]
[311.62951660 200.76791382]
[298.27481079 193.93768311]
[284.92013550 187.10743713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[14 50]
[15 49]
[17 46]
[18 45]
[20 42]
[21 41]
[24 37]
[25 36]
[27 34]
[28 33]
[68 102]
[69 101]
[70 100]
[71 98]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
