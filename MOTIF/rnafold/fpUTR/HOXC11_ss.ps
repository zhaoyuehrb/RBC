%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUCAGAGAGAGAGAGACUAAGACGGAUAACGCGUCAUCUCGCCUUCCCAAAUUUUCCCCCCUCGCUAGACCGGGUCCAAAACCUCCAUCCGGAGCCGGCAGGAGAGGAGAACG\
) } def
/len { sequence length } bind def

/coor [
[125.64589691 147.89663696]
[111.47376251 153.10510254]
[96.41546631 154.21209717]
[81.63401794 151.13209534]
[74.66316986 164.41392517]
[67.69232178 177.69577026]
[71.07321167 193.37854004]
[60.80872345 205.70817566]
[44.77290726 205.22644043]
[35.26705933 192.30287170]
[39.58325958 176.85133362]
[54.41048431 170.72492981]
[61.38133240 157.44308472]
[68.35218048 144.16123962]
[53.31737137 127.79446411]
[46.09384537 106.77690887]
[31.09519768 106.57553101]
[16.09654999 106.37415314]
[1.09790170 106.17277527]
[-4.86969614 113.77136993]
[-13.57085228 117.64125824]
[-22.93313408 117.00275421]
[-30.79211426 112.13357544]
[-35.39175415 104.27437592]
[-50.32556152 102.86676025]
[-65.25936890 101.45914459]
[-80.19317627 100.05152893]
[-91.19676971 111.16255188]
[-106.77272034 112.54963684]
[-119.56652069 103.55783081]
[-123.53734589 88.43280029]
[-116.81028748 74.31611633]
[-102.56166077 67.87325287]
[-87.51922607 72.14632416]
[-78.78556061 85.11772156]
[-63.85175323 86.52533722]
[-48.91794586 87.93295288]
[-33.98413849 89.34056854]
[-16.21699142 78.98236847]
[1.29927981 91.17412567]
[16.29792786 91.37550354]
[31.29657555 91.57688141]
[46.29522324 91.77825928]
[49.44442749 80.10190582]
[55.09854126 69.41145325]
[62.97741699 60.23659515]
[72.69067383 53.03191757]
[83.75704193 48.15439987]
[95.62821198 45.84570694]
[107.71599579 46.22023392]
[119.42147064 49.25941849]
[130.16465759 54.81268311]
[139.41325378 62.60486984]
[146.70901489 72.24990082]
[151.69046021 83.26988220]
[166.46257019 80.66515350]
[181.23468018 78.06043243]
[196.00680542 75.45571136]
[210.77891541 72.85099030]
[225.55104065 70.24626923]
[231.36247253 60.85796738]
[241.21166992 56.37801743]
[251.67053223 58.09567261]
[259.24633789 65.18826294]
[274.13696289 63.38021088]
[289.02758789 61.57216263]
[297.29522705 57.38280869]
[304.34158325 59.92100906]
[319.27539062 58.51339340]
[325.82345581 49.62316895]
[336.00119019 45.95027161]
[346.28790283 48.50394821]
[353.26843262 56.18313599]
[368.25625610 55.57914734]
[383.24411011 54.97515869]
[398.23193359 54.37117004]
[411.70935059 46.08446884]
[424.73785400 53.30301666]
[439.72570801 52.69902802]
[454.71353149 52.09503937]
[460.30325317 37.92905807]
[471.17605591 27.26596451]
[485.44821167 21.95320320]
[500.64697266 22.91124153]
[514.13903809 29.97409630]
[523.58685303 41.91808319]
[527.35351562 56.67383575]
[524.78643799 71.68482971]
[516.33032227 84.35031891]
[503.45034790 92.47592926]
[488.37796021 94.65385437]
[473.72457886 90.50675201]
[462.02899170 80.75313568]
[455.31753540 67.08287048]
[440.32968140 67.68686676]
[425.34185791 68.29085541]
[412.93646240 76.53435516]
[398.83593750 69.35900116]
[383.84808350 69.96299744]
[368.86026001 70.56698608]
[353.87240601 71.17097473]
[338.47442627 82.73848724]
[320.68301392 73.44720459]
[305.74920654 74.85482025]
[290.83563232 76.46279144]
[275.94500732 78.27084351]
[261.05438232 80.07889557]
[246.63710022 92.84792328]
[228.15576172 85.01837921]
[213.38363647 87.62310791]
[198.61152649 90.22782898]
[183.83940125 92.83255005]
[169.06729126 95.43727112]
[154.29518127 98.04199219]
[152.73735046 113.06034088]
[147.10643005 127.06999969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[16 43]
[17 42]
[18 41]
[19 40]
[24 38]
[25 37]
[26 36]
[27 35]
[55 114]
[56 113]
[57 112]
[58 111]
[59 110]
[60 109]
[64 107]
[65 106]
[66 105]
[68 104]
[69 103]
[73 101]
[74 100]
[75 99]
[76 98]
[78 96]
[79 95]
[80 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
