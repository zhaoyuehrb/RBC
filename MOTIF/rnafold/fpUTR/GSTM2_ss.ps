%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGGCUUCCCCUCUACCCUCUCUGGGCCUCUCACAAACGCUGAGCCCCGCCCCGCUGAGGCCUGUCUGCAGAAUCCACAGCAACCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[148.01846313 199.89349365]
[156.74694824 183.08718872]
[147.14741516 171.56117249]
[137.54789734 160.03515625]
[130.71334839 156.84745789]
[127.82915497 147.96565247]
[118.61596680 136.12854004]
[109.40277863 124.29143524]
[96.13877106 125.75998688]
[83.88826752 120.46700287]
[75.86680603 109.80179596]
[74.17987823 96.56379700]
[79.27027130 84.22773743]
[70.45349121 72.09247589]
[61.63671112 59.95722198]
[52.81993103 47.82196808]
[39.70972061 52.20429611]
[25.91114998 52.66522598]
[12.57059002 49.17616272]
[0.79359168 42.03627014]
[-8.44672871 31.84684181]
[-14.39009285 19.46067047]
[-16.55161285 5.91068554]
[-14.76132965 -7.67618704]
[-9.17754745 -20.17275429]
[-0.27287662 -30.54506111]
[-8.26835251 -43.23648834]
[-16.26382828 -55.92791748]
[-24.25930405 -68.61934662]
[-38.16172791 -76.17137909]
[-38.39927292 -91.06409454]
[-46.39474869 -103.75552368]
[-54.39022446 -116.44695282]
[-69.64301300 -115.17766571]
[-83.73402405 -121.15277863]
[-93.42525482 -132.99923706]
[-96.48972321 -147.99482727]
[-92.22324371 -162.69366455]
[-81.60621643 -173.71806335]
[-67.07835388 -178.53469849]
[-51.97806549 -176.03674316]
[-39.77527618 -166.79820251]
[-33.27410126 -152.94203186]
[-33.96846008 -137.65228271]
[-41.69879532 -124.44242859]
[-33.70331955 -111.75099945]
[-25.70784569 -99.05957031]
[-12.37731266 -92.41531372]
[-11.56787586 -76.61482239]
[-3.57239962 -63.92339325]
[4.42307615 -51.23196411]
[12.41855240 -38.54053879]
[28.25468826 -42.33681107]
[44.46678162 -40.55145264]
[59.14275742 -33.37781906]
[70.54589844 -21.64577103]
[77.32035065 -6.72572470]
[78.65232849 9.63142872]
[74.36783600 25.49978638]
[64.95518494 39.00519180]
[73.77196503 51.14044571]
[82.58874512 63.27569962]
[91.40552521 75.41095734]
[107.56928253 75.07627106]
[120.81706238 84.34317780]
[126.04530334 99.64170074]
[121.23988342 115.07824707]
[130.45307922 126.91535950]
[139.66625977 138.75245667]
[149.07391357 150.43562317]
[158.67343140 161.96163940]
[168.27296448 173.48765564]
[179.12326050 169.12586975]
[190.72683716 167.80628967]
[202.24818420 169.61546326]
[212.85998535 174.41496277]
[221.80250549 181.85194397]
[228.43794250 191.38504028]
[232.29600525 202.32382202]
[233.10713196 213.87876892]
[230.82138062 225.21823120]
[225.61138916 235.52832031]
[217.85939026 244.07133484]
[225.43087769 257.02017212]
[240.52297974 262.46148682]
[245.54190063 277.69927979]
[236.63757324 291.04440308]
[220.64060974 292.25964355]
[209.82252502 280.41275024]
[212.48202515 264.59167480]
[204.91053772 251.64282227]
[186.39189148 254.25959778]
[168.46678162 248.76058960]
[154.53164673 236.14605713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[6 69]
[7 68]
[8 67]
[13 63]
[14 62]
[15 61]
[16 60]
[26 52]
[27 51]
[28 50]
[29 49]
[31 47]
[32 46]
[33 45]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
