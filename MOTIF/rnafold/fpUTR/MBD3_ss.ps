%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGGGCCGGAACAGCCGCGGCAAGUGGCGGCGGCGGCAGCGGCAGCGGAGGCAGCUGAGGCGGCGGCGGCGAGUGGGGGUCCGGGCGGCGGCGGCGGGCCCGGCGGCGGGCCGAGGAGCCGGGCGCA\
) } def
/len { sequence length } bind def

/coor [
[227.01934814 157.56668091]
[213.04376221 152.11846924]
[199.06817627 146.67025757]
[185.09259033 141.22204590]
[171.11700439 135.77383423]
[157.62451172 141.97773743]
[143.37367249 136.65156555]
[136.95793152 122.45734406]
[122.98234558 117.00913239]
[109.00675964 111.56092834]
[118.18161011 123.42777252]
[117.03044891 138.38352966]
[106.14762115 148.70651245]
[91.15194702 149.06694031]
[79.78573608 139.27873230]
[77.91738892 124.39553833]
[86.51322937 112.10045624]
[72.81492615 118.21246338]
[59.11662674 124.32446289]
[45.41832733 130.43646240]
[31.72002602 136.54846191]
[24.66299438 150.95602417]
[8.96822739 154.28076172]
[-3.32459283 143.97221375]
[-2.78546715 127.93822479]
[10.17203331 118.47869110]
[25.60802269 122.85016632]
[39.30632401 116.73816681]
[53.00462341 110.62615967]
[66.70292664 104.51416016]
[80.40122223 98.40216064]
[85.53773499 97.88479614]
[90.63998413 98.01372528]
[81.30773926 86.27024841]
[66.66444397 80.27987671]
[64.80369568 65.50196075]
[55.47145462 53.75848389]
[40.82816315 47.76810837]
[38.96741486 32.99019241]
[29.63516998 21.24671555]
[14.17937183 19.30865288]
[4.88243961 7.26615715]
[6.82533503 -7.45663977]
[-2.50690913 -19.20011520]
[-11.83915329 -30.94359016]
[-21.17139816 -42.68706512]
[-35.81468964 -48.67744064]
[-37.67543793 -63.45535660]
[-47.00768280 -75.19883728]
[-62.45317078 -80.70964050]
[-65.13684845 -96.88770294]
[-52.29798508 -107.09043121]
[-37.14409637 -100.82212067]
[-35.26420593 -84.53107452]
[-25.93196297 -72.78760529]
[-11.95617485 -67.63719940]
[-9.42792320 -52.01931000]
[-0.09567837 -40.27583313]
[9.23656654 -28.53236008]
[18.56881142 -16.78888321]
[33.34999084 -15.35628891]
[42.98150253 -3.57967639]
[41.37864304 11.91447067]
[50.71088791 23.65794563]
[64.68667603 28.80834770]
[67.21492767 44.42623901]
[76.54717255 56.16971588]
[90.52296448 61.32011414]
[93.05121613 76.93800354]
[102.38346100 88.68148041]
[114.45496368 97.58534241]
[128.43055725 103.03354645]
[142.40614319 108.48175812]
[156.73599243 102.37494659]
[170.83160400 108.09929657]
[176.56521606 121.79824829]
[190.54080200 127.24645996]
[204.51638794 132.69467163]
[218.49197388 138.14288330]
[232.46755981 143.59109497]
[239.25405884 137.39724731]
[247.66714478 133.81433105]
[256.74810791 133.21911621]
[265.47250366 135.64971924]
[272.86569214 140.80451965]
[278.11175537 148.07933044]
[280.64343262 156.63800049]
[280.20343018 165.50854492]
[293.42697144 172.58940125]
[306.65048218 179.67027283]
[324.98818970 178.61477661]
[333.73202515 193.78131104]
[347.12152100 200.54304504]
[360.51101685 207.30477905]
[373.90054321 214.06651306]
[387.59298706 204.88227844]
[403.95318604 203.83317566]
[418.53912354 211.10983276]
[427.43777466 224.65499878]
[428.31491089 240.74429321]
[441.86270142 247.18301392]
[455.41049194 253.62173462]
[468.95831299 260.06045532]
[482.50610352 266.49917603]
[496.05389404 272.93789673]
[512.34857178 271.08972168]
[521.87756348 284.43627930]
[514.83825684 299.24777222]
[498.47210693 300.28738403]
[489.61517334 286.48568726]
[476.06738281 280.04696655]
[462.51959229 273.60824585]
[448.97177124 267.16952515]
[435.42398071 260.73080444]
[421.87619019 254.29208374]
[411.11968994 262.79287720]
[397.68081665 265.82360840]
[384.18750000 262.73278809]
[373.30392456 254.07186890]
[367.20431519 241.49772644]
[367.13879395 227.45602417]
[353.74929810 220.69429016]
[340.35980225 213.93255615]
[326.97027588 207.17082214]
[315.32061768 210.65216064]
[304.07977295 205.04692078]
[299.56961060 192.89378357]
[286.34609985 185.81292725]
[273.12258911 178.73205566]
[253.60066223 186.91149902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[8 73]
[9 72]
[10 71]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[33 70]
[34 69]
[36 67]
[37 66]
[39 64]
[40 63]
[43 60]
[44 59]
[45 58]
[46 57]
[48 55]
[49 54]
[88 129]
[89 128]
[90 127]
[92 124]
[93 123]
[94 122]
[95 121]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
