%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUUCCGGCGCGAACCGCUACUUCCGGUGCGAACCGCCUCGGCCGUUCCCUCGCGGAGCUUACUGAGCGCGGCCGCCGAGCCCAGCUCCGCCGCCGAGCGCCUGUGCCGGCACGGCUACACC\
) } def
/len { sequence length } bind def

/coor [
[133.35021973 443.56439209]
[131.09683228 428.73461914]
[117.17566681 423.43679810]
[107.71244812 411.80480957]
[105.32635498 396.89932251]
[110.75707245 382.70764160]
[122.63964081 373.07687378]
[120.38625336 358.24710083]
[118.13287354 343.41732788]
[115.87948608 328.58752441]
[113.62610626 313.75775146]
[111.37271881 298.92797852]
[109.11933899 284.09820557]
[106.86595154 269.26843262]
[95.47290802 263.11187744]
[89.65053558 251.32627869]
[91.74495697 238.15107727]
[101.20795441 228.47261047]
[99.32795715 213.59089661]
[97.44795990 198.70916748]
[95.56796265 183.82745361]
[84.02928162 193.41175842]
[69.29166412 190.61846924]
[62.06037903 177.47660828]
[67.58818054 163.53230286]
[81.85971832 158.91459656]
[94.50782013 166.97705078]
[94.50782013 151.97705078]
[94.50782013 136.97705078]
[94.50782013 121.97705078]
[94.50782013 106.97705078]
[83.75509644 108.90286255]
[71.96756744 102.77729034]
[58.91481018 95.38638306]
[45.86205292 87.99546814]
[32.80929947 80.60456085]
[16.98823357 80.53771210]
[9.72554684 67.53376770]
[-3.32720923 60.14285278]
[-19.71232033 60.82122803]
[-28.26263809 46.82751083]
[-20.18232918 32.55723953]
[-3.78372312 32.69044495]
[4.06370115 47.09009933]
[17.11645699 54.48100662]
[32.00390244 54.01921082]
[40.20020676 67.55180359]
[53.25296402 74.94271851]
[66.30571747 82.33362579]
[79.35847473 89.72453308]
[71.21138000 77.12989807]
[76.76028442 63.19398880]
[91.33475494 59.64646530]
[102.66765594 69.47323608]
[101.22019196 84.40330505]
[109.41610718 71.84038544]
[117.61202240 59.27746582]
[125.80793762 46.71454620]
[134.00384521 34.15162659]
[142.19976807 21.58870506]
[150.39567566 9.02578449]
[150.46049500 4.42536116]
[151.90379333 0.51892173]
[154.31680298 -2.33232903]
[157.21334839 -3.94617033]
[160.09844971 -4.32892561]
[169.51382446 -16.00585938]
[172.15286255 -31.60541153]
[186.16487122 -36.65647507]
[195.58023071 -48.33340836]
[198.21928406 -63.93296051]
[212.23127747 -68.98402405]
[221.64665222 -80.66095734]
[231.06202698 -92.33789825]
[236.29725647 -108.46329498]
[253.24172974 -107.89660645]
[257.38787842 -91.45745850]
[242.73895264 -82.92252350]
[233.32359314 -71.24559021]
[223.90821838 -59.56865692]
[221.94261169 -44.80431747]
[207.25717163 -38.91804123]
[197.84179688 -27.24110603]
[195.87619019 -12.47676754]
[181.19075012 -6.59048986]
[171.77537537 5.08644438]
[162.95860291 17.22169876]
[154.76269531 29.78462029]
[146.56677246 42.34754181]
[138.37086487 54.91046143]
[130.17494202 67.47338104]
[121.97902679 80.03630066]
[113.78311157 92.59922028]
[109.50782013 106.97705078]
[109.50782013 121.97705078]
[109.50782013 136.97705078]
[109.50782013 151.97705078]
[109.50782013 166.97705078]
[110.44968414 181.94744873]
[112.32968140 196.82917786]
[114.20967865 211.71089172]
[116.08967590 226.59260559]
[130.08187866 237.00228882]
[132.23002625 253.97027588]
[121.69573212 267.01504517]
[123.94911194 281.84481812]
[126.20249939 296.67459106]
[128.45588684 311.50436401]
[130.70925903 326.33416748]
[132.96264648 341.16394043]
[135.21603394 355.99371338]
[137.46942139 370.82348633]
[151.67640686 376.48995972]
[161.07751465 388.42794800]
[163.22666931 403.36941528]
[157.64576721 417.28738403]
[145.92660522 426.48123169]
[148.17999268 441.31100464]
[161.62641907 449.29397583]
[166.74679565 464.06948853]
[161.12345886 478.66098022]
[147.41156006 486.17883301]
[132.08544922 483.07330322]
[122.38164520 470.81076050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[18 102]
[19 101]
[20 100]
[21 99]
[27 98]
[28 97]
[29 96]
[30 95]
[31 94]
[33 50]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[66 86]
[67 85]
[69 83]
[70 82]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
