%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGCGGCGGCUCGGGCCGGGGCCGCGGGCGUCCUGAGCGCAGCGCCCUCCCGGGAUGCCCGCCGGCCGCUGGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[43.09401321 350.68032837]
[36.39228821 364.57604980]
[23.22992706 372.62313843]
[7.80698395 372.25381470]
[-4.95513248 363.58596802]
[-10.98407841 349.38540649]
[-8.35603905 334.18353271]
[2.09038782 322.83120728]
[17.02178574 318.95086670]
[21.60167503 304.66714478]
[26.18156624 290.38345337]
[25.19908142 282.85806274]
[31.22590446 275.64080811]
[36.35620499 261.54541016]
[41.48650742 247.45002747]
[46.61680984 233.35462952]
[51.74711227 219.25924683]
[56.87741470 205.16386414]
[62.00771713 191.06846619]
[67.13801575 176.97308350]
[71.99402618 162.78085327]
[76.57392120 148.49713135]
[81.15380859 134.21342468]
[85.73369598 119.92970276]
[90.31359100 105.64598083]
[94.61563873 91.27613831]
[98.63822937 76.82557678]
[102.66081238 62.37501526]
[106.68340302 47.92444992]
[110.70599365 33.47388840]
[114.72858429 19.02332497]
[118.75117493 4.57276154]
[122.77375793 -9.87780190]
[126.79634857 -24.32836533]
[130.81893921 -38.77892685]
[134.27818298 -53.37459946]
[137.16885376 -68.09342957]
[140.05953979 -82.81226349]
[135.12673950 -97.84482574]
[145.17170715 -108.84245300]
[148.06239319 -123.56128693]
[145.18177795 -140.26872253]
[160.43885803 -147.66183472]
[171.76661682 -135.04763794]
[162.78121948 -120.67060089]
[159.89053345 -105.95177460]
[165.03010559 -91.97200012]
[154.77838135 -79.92157745]
[151.88769531 -65.20274353]
[148.99700928 -50.48391724]
[151.02761841 -45.89592743]
[150.00384521 -39.96656036]
[145.26950073 -34.75634003]
[141.24691772 -20.30577660]
[137.22431946 -5.85521269]
[133.20173645 8.59535027]
[129.17913818 23.04591370]
[125.15655518 37.49647522]
[121.13396454 51.94704056]
[117.11138153 66.39760590]
[113.08879089 80.84816742]
[109.06620026 95.29872894]
[110.11685944 103.52143097]
[104.59730530 110.22587585]
[100.01741791 124.50959015]
[95.43752289 138.79330444]
[90.85763550 153.07702637]
[86.27774811 167.36074829]
[86.62000275 176.75724792]
[81.23340607 182.10337830]
[76.10310364 196.19877625]
[70.97280121 210.29415894]
[65.84249878 224.38954163]
[60.71220016 238.48493958]
[55.58189774 252.58032227]
[50.45159531 266.67572021]
[45.32129288 280.77111816]
[40.46528244 294.96331787]
[35.88539505 309.24703979]
[31.30550385 323.53076172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 80]
[10 79]
[11 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[20 70]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 50]
[37 49]
[38 48]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
