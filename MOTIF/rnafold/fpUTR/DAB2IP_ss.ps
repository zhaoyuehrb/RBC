%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUACAAAAGGAGGAACCCAGACGCUCAUGGAGACAGCCUCGGUUCAUAAAUCAGGUGGGGCCAGGGGCUGGGGGCCCACACGCC\
) } def
/len { sequence length } bind def

/coor [
[61.63856506 379.95437622]
[46.75669098 382.39990234]
[31.73425102 381.06683350]
[17.51557159 376.03890991]
[4.99445057 367.63223267]
[-5.04202509 356.37521362]
[-11.96295357 342.97552490]
[-15.33327866 328.27548218]
[-14.94114017 313.19909668]
[-10.81118774 298.69412231]
[-3.20303345 285.67233276]
[7.40506744 274.95233154]
[20.34628105 267.20791626]
[34.80710983 262.92596436]
[49.87854004 262.37561035]
[53.06701660 247.71839905]
[44.82341766 235.36611938]
[47.84819412 220.45622253]
[60.86028671 211.89332581]
[64.04876709 197.23611450]
[67.23724365 182.57891846]
[70.42572784 167.92170715]
[68.64462280 164.62818909]
[68.51412964 160.25538635]
[70.54725647 155.66085815]
[74.81896210 151.90766907]
[79.55596161 137.67527771]
[84.29295349 123.44288635]
[89.02994537 109.21050262]
[86.40907288 95.47650146]
[96.73766327 86.05250549]
[101.47466278 71.82011414]
[106.21165466 57.58773041]
[96.32408905 47.52015305]
[91.80772400 34.22177887]
[93.50302887 20.34721756]
[101.01657104 8.63968563]
[112.81033325 1.38863504]
[126.51625061 -0.01787626]
[131.75820923 -14.07212257]
[137.00016785 -28.12636757]
[142.24214172 -42.18061447]
[142.33512878 -51.54812241]
[147.93017578 -56.63734436]
[153.67042542 -70.49553680]
[159.41067505 -84.35372925]
[165.15092468 -98.21192169]
[162.47511292 -114.39129639]
[175.31895447 -124.58776855]
[190.46978760 -118.31208801]
[192.34175110 -102.02013397]
[179.00912476 -92.47167206]
[173.26887512 -78.61347961]
[167.52861023 -64.75528717]
[161.78836060 -50.89709473]
[156.29638672 -36.93865204]
[151.05441284 -22.88440514]
[145.81245422 -8.83015919]
[140.57049561 5.22408628]
[151.11970520 17.32501411]
[154.20870972 33.17348480]
[148.91552734 48.52645111]
[136.57508850 59.22585678]
[120.44403839 62.32472229]
[115.70704651 76.55711365]
[110.97005463 90.78949738]
[113.59092712 104.52349854]
[103.26233673 113.94749451]
[98.52533722 128.17988586]
[93.78834534 142.41227722]
[89.05135345 156.64465332]
[85.08293152 171.11018372]
[81.89444733 185.76739502]
[78.70597076 200.42459106]
[75.51748657 215.08180237]
[83.79655457 228.27630615]
[80.35418701 243.09536743]
[67.72422028 250.90687561]
[64.53574371 265.56408691]
[78.01657104 272.32559204]
[89.39181519 282.22784424]
[97.94641113 294.64837646]
[103.14262390 308.80642700]
[104.65380096 323.81201172]
[102.38494873 338.72183228]
[96.47869873 352.59869385]
[87.30632019 364.57025146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 79]
[16 78]
[19 75]
[20 74]
[21 73]
[22 72]
[26 71]
[27 70]
[28 69]
[29 68]
[31 66]
[32 65]
[33 64]
[39 59]
[40 58]
[41 57]
[42 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
