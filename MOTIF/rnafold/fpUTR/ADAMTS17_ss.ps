%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACUUUUUCCAAAGGCUGGAGGGCUUCACUCCGGCUGGCGCCGCCGCCUAGCGCGCUCCUGCUUCGCCGCCACGGUCCGGGGGGGCUGCCGGUCCCGGGUACC\
) } def
/len { sequence length } bind def

/coor [
[29.70994186 214.12809753]
[30.16859627 229.12107849]
[26.47791672 243.65995789]
[18.92369652 256.61886597]
[8.09090710 266.99435425]
[-5.18159962 273.98297119]
[-19.86604881 277.04351807]
[-34.82532883 275.93902588]
[-48.90105057 270.75500488]
[-61.00323486 261.89288330]
[-70.19474030 250.03892517]
[-75.76380157 236.11105347]
[-77.27917480 221.18778992]
[-74.62351990 206.42474365]
[-68.00247192 192.96511841]
[-57.92874908 181.85115051]
[-45.18687820 173.94546509]
[-60.14648819 172.84542847]
[-75.10609436 171.74539185]
[-90.06570435 170.64535522]
[-105.02531433 169.54531860]
[-119.98492432 168.44528198]
[-134.94453430 167.34524536]
[-149.90414429 166.24520874]
[-160.67678833 177.58029175]
[-176.22090149 179.28756714]
[-189.19700623 170.56091309]
[-193.47821045 155.52079773]
[-187.04304504 141.26867676]
[-172.92999268 134.53399658]
[-157.80282593 138.49665833]
[-148.80410767 151.28559875]
[-133.84449768 152.38563538]
[-118.88488770 153.48567200]
[-103.92527771 154.58570862]
[-88.96566772 155.68574524]
[-74.00605774 156.78578186]
[-59.04645157 157.88581848]
[-44.08684158 158.98585510]
[-37.94747925 155.48098755]
[-30.14625549 156.07968140]
[-16.87229538 149.09384155]
[-12.34778118 143.09919739]
[-3.10452676 142.10426331]
[10.36879158 135.51110840]
[23.84210968 128.91795349]
[28.41496277 114.78909302]
[41.98490143 107.91075897]
[56.77354050 112.80298615]
[70.24685669 106.20983124]
[83.72017670 99.61667633]
[88.21266937 88.76441193]
[98.83728027 83.75723267]
[110.06676483 87.20001221]
[123.72782898 81.00522614]
[137.29647827 74.61057281]
[150.76980591 68.01741791]
[159.76452637 55.00183105]
[174.59732056 56.35744476]
[188.07063293 49.76429367]
[201.54396057 43.17113876]
[215.01727295 36.57798386]
[228.49058533 29.98482895]
[241.96391296 23.39167404]
[243.86773682 13.86940002]
[249.92832947 6.46103239]
[258.62789917 2.81582165]
[267.88217163 3.66561484]
[275.53945923 8.68179798]
[289.54052734 3.29942679]
[303.54162598 -2.08294439]
[317.54269409 -7.46531582]
[330.15744019 -18.79247093]
[344.53402710 -9.80638123]
[339.87896729 6.49596930]
[322.92504883 6.53575850]
[308.92398071 11.91812992]
[294.92291260 17.30050087]
[280.92184448 22.68287277]
[269.66546631 39.87546921]
[248.55706787 36.86499405]
[235.08374023 43.45814896]
[221.61042786 50.05130005]
[208.13711548 56.64445496]
[194.66378784 63.23760986]
[181.19047546 69.83076477]
[173.15943909 82.37476349]
[157.36296082 81.49073029]
[143.88963318 88.08388519]
[139.19110107 93.94312286]
[129.92260742 94.66629028]
[116.26155090 100.86107635]
[106.94218445 114.73043060]
[90.31333160 113.08999634]
[76.84001160 119.68315125]
[63.36669540 126.27630615]
[58.15531921 140.95552063]
[44.39753342 147.44998169]
[30.43526459 142.39126587]
[16.96194649 148.98442078]
[3.48862767 155.57757568]
[-9.88645267 162.36779785]
[-23.16041374 169.35365295]
[-8.31634521 171.51087952]
[5.35852289 177.67512512]
[16.80525970 187.36906433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[41 103]
[42 102]
[44 101]
[45 100]
[46 99]
[49 96]
[50 95]
[51 94]
[54 92]
[55 91]
[56 89]
[57 88]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
