%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGGUCUAUGGGAAGUUCGGGGACUUGACAGCCGCUGCCGCCGCAGGGCAUUUUUGGUCGAAGAGAGCUGAAGUAAUGAGAAGACAUC\
) } def
/len { sequence length } bind def

/coor [
[68.09116364 144.73783875]
[62.36616135 140.04174805]
[57.32448959 134.61860657]
[53.05768967 128.56687927]
[39.29952240 134.54289246]
[25.54135132 140.51892090]
[11.78318214 146.49493408]
[-1.97498775 152.47094727]
[-15.73315716 158.44696045]
[-29.49132729 164.42297363]
[-39.06645203 177.01773071]
[-53.82259750 174.99154663]
[-67.58076477 180.96755981]
[-81.33893585 186.94357300]
[-88.53833008 201.28053284]
[-104.26525879 204.44964600]
[-116.45536804 194.01983643]
[-115.75744629 177.99197388]
[-102.70688629 168.66125488]
[-87.31495667 173.18540955]
[-73.55678558 167.20939636]
[-59.79861450 161.23336792]
[-51.20756531 149.06607056]
[-35.46734238 150.66481018]
[-21.70917320 144.68879700]
[-7.95100403 138.71278381]
[5.80716562 132.73675537]
[19.56533432 126.76074219]
[33.32350540 120.78472900]
[47.08167267 114.80871582]
[45.33768082 94.37168121]
[51.20953751 74.71881866]
[63.87915039 58.58826828]
[81.58131409 48.22742844]
[78.52947235 33.54116440]
[75.47763824 18.85490417]
[70.57310486 10.89391804]
[72.58134460 3.61549568]
[70.03269196 -11.16639709]
[67.48403931 -25.94828987]
[64.93537903 -40.73018265]
[54.03185272 -52.97947311]
[59.44443893 -68.45965576]
[75.60513306 -71.24604034]
[85.88920593 -58.47223663]
[79.71726990 -43.27883911]
[82.26593018 -28.49694633]
[84.81458282 -13.71505260]
[87.36324310 1.06683981]
[90.16389465 15.80306435]
[93.21573639 30.48932648]
[96.26757812 45.17558670]
[118.99575806 48.43636703]
[138.40745544 60.69968414]
[151.11355591 79.82447815]
[165.68705750 76.27301025]
[180.26057434 72.72154999]
[194.83407593 69.17008209]
[209.40757751 65.61861420]
[223.98109436 62.06715012]
[238.49183655 58.26738739]
[252.93559265 54.22043228]
[262.02014160 40.99733353]
[278.03213501 39.99922180]
[288.68850708 51.99177170]
[285.81463623 67.77531433]
[271.61508179 75.24208069]
[256.98254395 68.66419220]
[242.53878784 72.71114349]
[236.82833862 77.65069580]
[227.53254700 76.64065552]
[212.95904541 80.19212341]
[198.38554382 83.74358368]
[183.81204224 87.29505157]
[169.23852539 90.84651947]
[154.66502380 94.39798737]
[154.92189026 101.79818726]
[154.18151855 109.16573334]
[152.45735168 116.36685181]
[149.78068542 123.27079773]
[146.20014954 129.75219727]
[141.78073120 135.69338989]
[136.60267639 140.98646545]
[130.76002502 145.53535461]
[124.35884857 149.25741577]
[117.51538086 152.08511353]
[110.35387421 153.96707153]
[103.00437164 154.86912537]
[95.60031128 154.77490234]
[88.27614594 153.68611145]
[81.16484833 151.62251282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[34 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[41 46]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
