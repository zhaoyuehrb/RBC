%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGUGCGCAGGCGCGGGCGGAGGGCGGGCUGAAGCAGCUGAAGCGGCGGUAGCGGCGGCGGCUCGGGCAGAGGGGCGGGAGCUGAGGCGGGAGCGGACAGGCUGGUGGGCGAGCGAGAGGCGGCGGA\
) } def
/len { sequence length } bind def

/coor [
[219.22236633 324.90115356]
[227.37417603 312.04388428]
[219.51371765 299.26837158]
[211.65324402 286.49288940]
[195.80705261 279.05136108]
[195.32144165 260.68972778]
[187.15687561 248.10641479]
[173.73864746 241.64109802]
[172.71789551 225.85284424]
[164.55332947 213.26953125]
[156.38877869 200.68620300]
[141.53015137 200.08671570]
[129.73416138 190.74227905]
[125.65467834 176.07220459]
[131.05809021 161.64619446]
[122.89353180 149.06288147]
[114.72897339 136.47955322]
[97.48632050 139.26043701]
[80.73909760 134.30332947]
[67.78807831 122.58523560]
[54.08977890 128.69723511]
[47.03274918 143.10479736]
[31.33798218 146.42953491]
[19.04516029 136.12098694]
[19.58428764 120.08699799]
[32.54178619 110.62746429]
[47.97777557 114.99893188]
[61.67607880 108.88693237]
[61.00088882 105.17398071]
[60.68457031 101.41341400]
[45.86644363 99.08466339]
[31.04831505 96.75591278]
[16.23018837 94.42716217]
[1.41205966 92.09841156]
[-15.17372131 95.61241913]
[-23.14179611 80.64759064]
[-10.96758175 68.84822845]
[3.74081016 77.28028870]
[18.55893898 79.60903931]
[33.37706757 81.93778992]
[48.19519424 84.26654053]
[63.01332092 86.59529114]
[64.56945801 82.90096283]
[66.49345398 79.38417816]
[68.76535797 76.08144379]
[71.36155701 73.02704620]
[62.60308456 60.84964371]
[48.26383972 54.16408920]
[47.11375809 39.31395340]
[38.35528564 27.13654900]
[23.19177437 20.89155197]
[21.28683281 4.60341930]
[34.60010147 -4.97201347]
[49.43603134 2.01563740]
[50.53268814 18.37807465]
[59.29116058 30.55547905]
[73.00393677 36.37002563]
[74.78048706 52.09117126]
[83.53896332 64.26857758]
[91.88163757 61.50593948]
[100.62943268 60.66421127]
[109.34581757 61.78539276]
[115.62162781 48.16136169]
[121.89744568 34.53733444]
[128.17324829 20.91330338]
[134.44906616 7.28927374]
[140.72488403 -6.33475590]
[135.48765564 -21.00476837]
[142.04631042 -34.73207092]
[156.06419373 -39.63455200]
[162.34001160 -53.25858307]
[156.63099670 -67.99570465]
[163.09118652 -82.41935730]
[177.88784790 -87.97222900]
[192.24238586 -81.35991669]
[197.63850403 -66.50537109]
[190.87480164 -52.22154617]
[175.96403503 -46.98277283]
[169.68821716 -33.35874176]
[175.07254028 -19.51877213]
[168.90205383 -5.61266708]
[154.34890747 -0.05894360]
[148.07308960 13.56508636]
[141.79728699 27.18911552]
[135.52146912 40.81314468]
[129.24566650 54.43717575]
[122.96984863 68.06120300]
[136.76695251 86.00386810]
[138.39395142 108.57934570]
[127.31229401 128.31500244]
[135.47685242 140.89831543]
[143.64140320 153.48164368]
[159.01722717 154.42526245]
[170.75198364 164.12829590]
[174.47903442 178.70819092]
[168.97210693 192.52165222]
[177.13665771 205.10496521]
[185.30120850 217.68829346]
[199.30343628 225.05364990]
[199.74020386 239.94184875]
[207.90475464 252.52517700]
[220.39323425 256.00057983]
[226.92114258 266.73190308]
[224.42872620 278.63241577]
[232.28919983 291.40792847]
[240.14965820 304.18341064]
[255.30119324 302.70266724]
[269.53509521 307.92593384]
[280.04666138 318.76693726]
[284.78936768 333.03817749]
[282.87341309 347.89205933]
[274.73190308 360.38931274]
[282.59237671 373.16482544]
[294.99392700 376.93865967]
[301.26263428 387.82345581]
[298.48556519 399.66079712]
[306.03741455 412.62109375]
[321.12127686 418.08526611]
[326.11712646 433.33062744]
[317.19256592 446.66223145]
[301.19378662 447.85324097]
[290.39364624 435.98999023]
[293.07711792 420.17294312]
[285.52526855 407.21264648]
[269.86206055 399.39328003]
[269.81689453 381.02526855]
[261.95642090 368.24978638]
[247.13090515 369.88363647]
[233.00811768 364.89801025]
[222.40708923 354.23129272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[6 101]
[7 100]
[9 98]
[10 97]
[11 96]
[15 92]
[16 91]
[17 90]
[20 28]
[21 27]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[46 59]
[47 58]
[49 56]
[50 55]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[70 79]
[71 78]
[112 127]
[113 126]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
