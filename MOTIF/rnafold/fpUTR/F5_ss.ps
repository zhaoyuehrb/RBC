%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGAACUGCAGGGGAGGAGGACGCUGCCACCCACAGCCUCUAGAGCUCAUUGCAGCUGGGACAGCCCGGAGUGUGGUUAGCAGCUCGGCAAGCGCUGCCCAGGUCCUGGGGUGGUGGCAGCCAGCGGGAGCAGGAAAGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[93.42111206 138.33741760]
[89.59081268 152.84013367]
[85.76051331 167.34284973]
[92.55668640 181.87527466]
[85.30329895 196.18499756]
[69.56453705 199.29481506]
[57.41382980 188.81913757]
[58.17215347 172.79402161]
[71.25779724 163.51254272]
[75.08809662 149.00982666]
[78.91839600 134.50711060]
[72.39054871 127.94593811]
[67.70387268 120.27210236]
[65.01231384 111.96908569]
[64.34899139 103.53002167]
[65.63029480 95.42876434]
[68.66662598 88.09334564]
[73.17890167 81.88339233]
[78.81962585 77.07254791]
[85.19709015 73.83700562]
[91.90106201 72.25028992]
[91.57831573 57.25376129]
[80.44674683 46.35762405]
[80.33306885 31.14441490]
[90.78947449 20.59930992]
[90.46673584 5.60278320]
[90.14398956 -9.39374447]
[89.82125092 -24.39027214]
[89.49851227 -39.38679886]
[89.17576599 -54.38332748]
[88.85302734 -69.37985229]
[88.53028107 -84.37638092]
[88.20754242 -99.37290955]
[87.88480377 -114.36943817]
[84.55170441 -122.95368195]
[87.71994781 -129.69131470]
[87.71994781 -144.69131470]
[87.71994781 -159.69131470]
[87.39720917 -174.68783569]
[86.75187683 -189.67395020]
[86.10653687 -204.66006470]
[72.15132141 -212.07334900]
[64.88243866 -227.14115906]
[68.09569550 -244.50358582]
[81.62106323 -257.25036621]
[77.47960663 -271.66732788]
[73.33815002 -286.08425903]
[69.19670105 -300.50122070]
[65.05524445 -314.91815186]
[48.71497726 -328.70837402]
[54.26170731 -348.54718018]
[49.19886398 -362.66693115]
[44.13602066 -376.78668213]
[39.07317734 -390.90646362]
[34.01033401 -405.02621460]
[28.94748878 -419.14596558]
[14.63237000 -430.67526245]
[18.34675980 -447.79501343]
[12.98128605 -461.80258179]
[7.61581230 -475.81011963]
[2.25033855 -489.81768799]
[-3.11513495 -503.82525635]
[-16.18614197 -513.72882080]
[-13.87670231 -529.96453857]
[1.43743193 -535.83050537]
[14.00239182 -525.29229736]
[10.89242363 -509.19073486]
[16.25789642 -495.18316650]
[21.62337112 -481.17559814]
[26.98884392 -467.16806030]
[32.35431671 -453.16049194]
[43.30548477 -447.91668701]
[47.86675644 -436.23171997]
[43.06724930 -424.20883179]
[48.13009262 -410.08905029]
[53.19293594 -395.96929932]
[58.25577927 -381.84954834]
[63.31862259 -367.72976685]
[68.38146973 -353.61001587]
[77.03939056 -351.13497925]
[83.65848541 -344.82760620]
[86.63686371 -336.03710938]
[85.17205811 -326.73205566]
[79.47219086 -319.05963135]
[83.61364746 -304.64266968]
[87.75509644 -290.22573853]
[91.89655304 -275.80877686]
[96.03800964 -261.39184570]
[110.21141815 -256.48120117]
[122.38450623 -265.24566650]
[134.55758667 -274.01013184]
[146.73068237 -282.77459717]
[150.71734619 -298.31442261]
[165.41094971 -304.75473022]
[179.53981018 -297.15509033]
[182.26548767 -281.34527588]
[171.49705505 -269.45321655]
[155.49514771 -270.60153198]
[143.32206726 -261.83706665]
[131.14898682 -253.07258606]
[118.97589111 -244.30810547]
[118.73432159 -219.26397705]
[101.09265137 -205.30538940]
[101.73798370 -190.31929016]
[102.38331604 -175.33317566]
[105.28869629 -171.45976257]
[105.74259949 -165.70309448]
[102.71994781 -159.69131470]
[102.71994781 -144.69131470]
[102.71994781 -129.69131470]
[102.88133240 -114.69217682]
[103.20407104 -99.69564819]
[103.52680969 -84.69912720]
[103.84955597 -69.70259857]
[104.17229462 -54.70606995]
[104.49503326 -39.70954132]
[104.81777954 -24.71301270]
[105.14051819 -9.71648598]
[105.46326447 5.28004169]
[105.78600311 20.27656937]
[116.68640137 30.36205101]
[117.22733307 45.56606674]
[106.57484436 56.93102264]
[106.89759064 71.92755127]
[132.20310974 87.14961243]
[134.03323364 121.83835602]
[143.81172180 133.21293640]
[159.45837402 138.12358093]
[162.76438904 154.18603516]
[150.32881165 164.87661743]
[134.94432068 159.19778442]
[132.43713379 142.99142456]
[122.65865326 131.61683655]
[115.34926605 133.29698181]
[118.70955658 147.91575623]
[122.06983948 162.53453064]
[125.43013000 177.15330505]
[128.79042053 191.77206421]
[136.50352478 204.63705444]
[126.65153503 215.94804382]
[112.84979248 210.07334900]
[114.17164612 195.13235474]
[110.81135559 180.51358032]
[107.45106506 165.89482117]
[104.09078217 151.27604675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[21 124]
[22 123]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[36 110]
[37 109]
[38 108]
[39 105]
[40 104]
[41 103]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[89 101]
[90 100]
[91 99]
[92 98]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
