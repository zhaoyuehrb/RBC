%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCAUCGCCGCGGGGCGGAGGCGACAGUGUCUAGCGGGAGCUCCGCGUGUAGCUACGCCGGCCGCCUGGCUUUGAGACAACGUGAUUCUCCGCAGCUGGUCGCCUACCCGUGAUGUUCUGCCCACGUCGAGACCUGAGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[36.54290390 292.86840820]
[27.94119835 280.57977295]
[26.31089020 265.66979980]
[17.59817123 277.88000488]
[8.88545227 290.09017944]
[0.17273340 302.30035400]
[-1.54481220 318.02804565]
[-15.23567772 323.89401245]
[-23.94839668 336.10418701]
[-32.66111755 348.31439209]
[-41.37383652 360.52456665]
[-50.08655548 372.73474121]
[-51.12180710 389.10119629]
[-65.93141174 396.14443970]
[-79.28051758 386.61904907]
[-77.43670654 370.32388306]
[-62.29673386 364.02203369]
[-53.58401489 351.81182861]
[-44.87129593 339.60165405]
[-36.15857697 327.39147949]
[-27.44585991 315.18130493]
[-26.35150528 300.32696533]
[-12.03744793 293.58764648]
[-3.32472873 281.37747192]
[5.38799000 269.16726685]
[14.10070896 256.95709229]
[14.83187008 246.86120605]
[23.91036415 239.96627808]
[30.12833214 226.31575012]
[36.34629822 212.66522217]
[36.25609207 205.22161865]
[42.84576797 198.79162598]
[49.35402298 185.27709961]
[55.86228180 171.76255798]
[62.37053680 158.24803162]
[60.08884811 140.87849426]
[75.31223297 130.57688904]
[81.53019714 116.92636871]
[87.74816895 103.27584076]
[88.86911774 88.31778717]
[84.75510406 73.89298248]
[80.64109039 59.46818161]
[76.52707672 45.04338074]
[62.10453796 39.63075256]
[53.73246002 26.91219711]
[54.44642258 11.88042259]
[63.76327515 0.29015806]
[59.64926147 -14.13464355]
[55.53525162 -28.55944443]
[51.42123795 -42.98424530]
[47.30722427 -57.40904999]
[43.03931046 -71.78906250]
[38.61798477 -86.12265778]
[23.51573753 -87.60517883]
[10.16762447 -94.73755646]
[0.59300953 -106.40547943]
[-3.77316022 -120.81118011]
[-2.29535055 -135.75042725]
[4.77025414 -148.94976807]
[16.31951141 -158.41253662]
[11.89818382 -172.74612427]
[7.47685671 -187.07971191]
[3.05552912 -201.41329956]
[-1.36579859 -215.74690247]
[-13.74871063 -226.49842834]
[-10.36384869 -242.54444885]
[5.30673075 -247.37818909]
[17.14247894 -236.02709961]
[12.96779346 -220.16822815]
[17.38912201 -205.83464050]
[21.81044960 -191.50103760]
[26.23177719 -177.16744995]
[30.65310478 -162.83386230]
[45.52611542 -161.52128601]
[58.79944611 -154.59567261]
[68.43604279 -143.08476257]
[72.94356537 -128.72267151]
[71.60541534 -113.68860626]
[64.59450531 -100.27629852]
[52.95157623 -90.54398346]
[57.37290192 -76.21039581]
[62.38549805 -70.70682526]
[61.73202515 -61.52305984]
[65.84603882 -47.09825897]
[69.96005249 -32.67345810]
[74.07406616 -18.24865532]
[78.18807983 -3.82385468]
[92.21712494 1.10806251]
[100.75294495 13.50176239]
[100.34944916 28.72314835]
[90.95188141 40.92936707]
[95.06589508 55.35417175]
[99.17990875 69.77896881]
[103.29392242 84.20377350]
[115.41030121 93.04647064]
[130.40260315 92.56569672]
[145.39488220 92.08492279]
[160.38717651 91.60414886]
[169.14622498 78.93191528]
[183.51954651 73.90589905]
[197.92591858 78.25569153]
[206.90106201 90.11253357]
[221.89335632 89.63175964]
[236.88565063 89.15098572]
[251.87794495 88.67021179]
[266.87023926 88.18944550]
[277.49746704 76.49167633]
[293.28738403 75.81814575]
[304.87213135 86.56844330]
[305.37869263 102.36460876]
[294.50650024 113.83506012]
[278.70587158 114.17458344]
[267.35101318 103.18173218]
[252.35871887 103.66250610]
[237.36642456 104.14328003]
[222.37413025 104.62405396]
[207.38183594 105.10482788]
[199.18479919 117.51235199]
[185.08673096 122.77622986]
[170.42091370 118.68143463]
[160.86795044 106.59643555]
[145.87565613 107.07720947]
[130.88337708 107.55798340]
[115.89107513 108.03875732]
[111.97530365 110.23863983]
[108.01028442 111.11724091]
[104.37851715 110.79521179]
[101.39868927 109.49381256]
[95.18072510 123.14434052]
[88.96276093 136.79486084]
[92.74711609 149.17375183]
[87.23242950 160.43902588]
[75.88507080 164.75628662]
[69.37681580 178.27081299]
[62.86855698 191.78535461]
[56.36030197 205.29988098]
[49.99682617 218.88319397]
[43.77885818 232.53372192]
[37.56089020 246.18424988]
[51.28964615 240.14096069]
[66.23271942 241.44653320]
[78.70545197 249.77905273]
[85.63233185 263.08389282]
[85.30532074 278.08032227]
[77.80506134 291.07055664]
[64.98095703 298.85144043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[28 139]
[29 138]
[30 137]
[32 136]
[33 135]
[34 134]
[35 133]
[37 130]
[38 129]
[39 128]
[40 94]
[41 93]
[42 92]
[43 91]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[52 81]
[53 80]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[95 124]
[96 123]
[97 122]
[98 121]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
