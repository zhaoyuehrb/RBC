%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGCAGCCCCCAGCUAUUUUUCUCCGUGGCGGCGGCGACGAGCGGAAGUUCUUGGGAGCGCCAGUUCCGUCUGUGUGUUCGAGUGGACAAA\
) } def
/len { sequence length } bind def

/coor [
[67.87284851 230.45046997]
[60.12130356 216.86930847]
[62.96392441 201.49226379]
[75.05850983 191.57989502]
[75.05850983 176.57989502]
[67.32120514 163.85263062]
[75.05850983 150.05245972]
[75.05850983 135.05245972]
[64.53995514 124.35852814]
[49.54200363 124.11051941]
[34.54405594 123.86251068]
[20.61784172 131.37057495]
[8.02023697 123.42390442]
[-6.97771215 123.17589569]
[-15.80956936 126.20957184]
[-22.46525764 122.66355133]
[-37.44680786 121.91979218]
[-52.42835617 121.17603302]
[-67.40990448 120.43228149]
[-82.39145660 119.68852234]
[-92.01814270 131.85842896]
[-106.96863556 136.01322937]
[-121.49416351 130.55532837]
[-130.00936890 117.58339691]
[-129.23997498 102.08540344]
[-119.48182678 90.02065277]
[-104.48714447 86.02827454]
[-90.02168274 91.64343262]
[-81.64769745 104.70697021]
[-66.66615295 105.45072937]
[-51.68460083 106.19448853]
[-36.70305252 106.93824005]
[-21.72150230 107.68199921]
[-6.72970343 108.17794800]
[8.26824665 108.42595673]
[21.12170601 100.90014648]
[34.79206467 108.86456299]
[49.79001236 109.11257172]
[64.78796387 109.36058044]
[65.17712402 94.57350159]
[71.31383514 81.65345001]
[81.78983307 72.64794159]
[94.54978943 68.80488586]
[95.54114532 53.83768463]
[96.53250122 38.87047958]
[97.52386475 23.90327644]
[89.79933167 9.43732643]
[98.69348907 -4.34041166]
[115.05677795 -3.25658226]
[122.05606079 11.57386398]
[112.49106598 24.89463425]
[111.49971008 39.86183929]
[110.50834656 54.82904434]
[109.51699066 69.79624939]
[115.38273621 72.31948090]
[120.62304688 75.96814728]
[125.02485657 80.59391022]
[128.40921021 86.00868988]
[130.63848877 91.99233246]
[145.63644409 91.74432373]
[160.63438416 91.49631500]
[175.63233948 91.24830627]
[190.63027954 91.00028992]
[205.62823486 90.75228119]
[220.62004089 90.25633240]
[235.60157776 89.51258087]
[250.58312988 88.76882172]
[261.00347900 76.88639069]
[276.77914429 75.93590546]
[288.55075073 86.48128510]
[289.33438110 102.26613617]
[278.66513062 113.92558289]
[262.87289429 114.54228973]
[251.32688904 103.75037384]
[236.34533691 104.49412537]
[221.36378479 105.23788452]
[214.70809937 108.78391266]
[205.87625122 105.75023651]
[190.87829590 105.99824524]
[175.88034058 106.24625397]
[160.88240051 106.49426270]
[145.88444519 106.74227142]
[130.88650513 106.99028015]
[126.57615662 119.32493591]
[117.38805389 129.27708435]
[104.56123352 134.94674683]
[90.05850983 135.05245972]
[90.05850983 150.05245972]
[97.79580688 163.85263062]
[90.05850983 176.57989502]
[90.05850983 191.57989502]
[102.15309143 201.49226379]
[104.99570465 216.86930847]
[97.24417114 230.45046997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 91]
[5 90]
[7 88]
[8 87]
[9 39]
[10 38]
[11 37]
[13 35]
[14 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[43 54]
[44 53]
[45 52]
[46 51]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
