%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUGCUGCAGUGGGACAGGUGGCGGCGACCGGCGGCGUCCGAGGAGAUUUAAUCCAGAGACUGACUUCACUAUAGAACCCACAGUUGUAUCAAUGGUUGGGGAAAGAUAGUGGCAACAGGCAAAGGAGAAACAGCUCUGACAUACAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[-39.09469604 321.51470947]
[-49.91273117 331.90557861]
[-60.73077011 342.29644775]
[-71.54880524 352.68731689]
[-82.36684418 363.07818604]
[-93.18488312 373.46905518]
[-103.57574463 384.28707886]
[-113.52258301 395.51473999]
[-123.46942139 406.74240112]
[-133.41625977 417.97006226]
[-143.36309814 429.19772339]
[-137.01869202 443.04217529]
[-136.86030579 458.27026367]
[-142.91540527 472.24365234]
[-154.13488770 482.54138184]
[-168.57492065 487.37927246]
[-183.73368835 485.91915894]
[-196.98481750 478.41400146]
[-206.03250122 466.16415405]
[-209.30914307 451.29190063]
[-206.24707031 436.37399292]
[-197.37680054 423.99505615]
[-184.23513794 416.29980469]
[-169.09899902 414.62149048]
[-154.59075928 419.25088501]
[-144.64392090 408.02322388]
[-134.69708252 396.79556274]
[-124.75024414 385.56790161]
[-114.80340576 374.34024048]
[-114.87178802 371.48321533]
[-113.77954102 368.42700195]
[-111.44491577 365.62603760]
[-107.95658875 363.55569458]
[-103.57574463 362.65100098]
[-92.75770569 352.26016235]
[-81.93967438 341.86929321]
[-71.12163544 331.47842407]
[-60.30359650 321.08755493]
[-49.48556137 310.69668579]
[-39.99888229 299.07760620]
[-31.98189354 286.39974976]
[-23.96490669 273.72192383]
[-23.70210457 258.82962036]
[-9.78689384 251.30117798]
[-1.76990628 238.62332153]
[6.24708128 225.94548035]
[-2.55844116 215.67698669]
[-8.10927486 203.32287598]
[-9.94399643 189.88687134]
[-7.90351820 176.46350098]
[-2.14484000 164.14903259]
[6.87099314 153.95188904]
[18.41578674 146.71003723]
[31.55300522 143.02223206]
[45.21374893 143.19841003]
[58.28371429 147.23374939]
[66.80468750 134.88899231]
[75.32565308 122.54424286]
[67.99378204 109.62642670]
[66.98329926 94.80734253]
[72.49378967 81.01383209]
[83.43689728 70.97019196]
[97.65129852 66.66008759]
[112.32958984 68.93479156]
[120.85055542 56.59003067]
[129.37153625 44.24527359]
[124.38276672 29.67069054]
[128.87998962 15.12323952]
[140.93832397 6.11986637]
[155.80799866 5.94542456]
[164.32897949 -6.39933348]
[172.84994507 -18.74409103]
[181.37092590 -31.08885002]
[189.89189148 -43.43360901]
[198.41285706 -55.77836609]
[206.93383789 -68.12312317]
[199.69564819 -82.95895386]
[200.90310669 -99.32814026]
[210.13383484 -112.78679657]
[224.80014038 -119.72879028]
[240.87384033 -118.35182190]
[249.14450073 -130.86566162]
[257.41516113 -143.37950134]
[265.55938721 -155.97599792]
[273.57638550 -168.65383911]
[274.41259766 -184.45294189]
[287.75439453 -191.07456970]
[295.77139282 -203.75242615]
[303.78836060 -216.43028259]
[311.80535889 -229.10812378]
[315.16052246 -245.72677612]
[332.05850220 -247.10322571]
[338.05899048 -231.24665833]
[324.48321533 -221.09114075]
[316.46621704 -208.41328430]
[308.44921875 -195.73544312]
[300.43225098 -183.05758667]
[300.16943359 -168.16529846]
[286.25424194 -160.63685608]
[278.23724365 -147.95899963]
[277.31506348 -140.58247375]
[269.92898560 -135.10885620]
[261.65835571 -122.59500885]
[253.38768005 -110.08116913]
[260.29241943 -98.26261902]
[261.42459106 -84.55531311]
[256.50543213 -71.64015961]
[246.44519043 -62.06791306]
[233.17553711 -57.75547028]
[219.27859497 -59.60215378]
[210.75761414 -47.25739288]
[202.23664856 -34.91263580]
[193.71568298 -22.56787872]
[185.19470215 -10.22311974]
[176.67373657 2.12163782]
[168.15277100 14.46639538]
[173.26252747 28.43165207]
[169.12016296 42.89902496]
[157.11279297 52.26259995]
[141.71629333 52.76624298]
[133.19531250 65.11100006]
[124.67434692 77.45575714]
[132.00622559 90.37357330]
[133.01669312 105.19265747]
[127.50621033 118.98616791]
[116.56310272 129.02980042]
[102.34870148 133.33990479]
[87.67041016 131.06521606]
[79.14944458 143.40997314]
[70.62847137 155.75473022]
[80.41549683 169.14804077]
[85.03911591 185.05216980]
[83.96131897 201.55403137]
[77.32883453 216.67483521]
[65.95341492 228.60733032]
[51.21253967 235.93186951]
[34.88262177 237.78526306]
[18.92493248 233.96246338]
[10.90794468 246.64031982]
[2.89095759 259.31817627]
[2.05472660 275.11724854]
[-11.28705502 281.73889160]
[-19.30404282 294.41674805]
[-27.32102966 307.09460449]
[-13.45117950 301.38256836]
[1.52979898 302.13775635]
[14.75492477 309.21560669]
[23.69324493 321.26162720]
[26.63418961 335.97048950]
[23.01493645 350.52731323]
[13.52811909 362.14627075]
[-0.01072474 368.60379028]
[-15.01060390 368.66409302]
[-28.60091972 362.31561279]
[-38.18083191 350.77328491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[40 144]
[41 143]
[42 142]
[44 140]
[45 139]
[46 138]
[56 130]
[57 129]
[58 128]
[64 122]
[65 121]
[66 120]
[70 116]
[71 115]
[72 114]
[73 113]
[74 112]
[75 111]
[76 110]
[81 104]
[82 103]
[83 102]
[84 100]
[85 99]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
