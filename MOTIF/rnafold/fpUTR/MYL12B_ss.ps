%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCUCCCGGCGCCGCGGCGGGUCCUGGCGGUGGAUUGGGGCCGACCCGGGCGUGUUCGUGUGGAGCACCUGCCCUGUGCCCAACACUAUCCUAGAUGCUUUGGAGGGUGGAGGAGCCUCCUGUUGCACGGUCUUGCCUAAGAAUUAAACAACCACC\
) } def
/len { sequence length } bind def

/coor [
[40.32740784 222.67012024]
[37.04261780 225.19482422]
[33.55023956 225.95884705]
[24.26383209 237.73860168]
[14.97742271 249.51835632]
[17.94759750 268.18807983]
[6.56593704 282.88217163]
[-11.62034798 284.61376953]
[-20.43712616 296.74902344]
[-29.25390625 308.88427734]
[-38.07068253 321.01953125]
[-39.92261505 336.73199463]
[-53.66312408 342.48068237]
[-62.47990417 354.61593628]
[-66.89832306 370.98400879]
[-83.84986877 371.26940918]
[-88.81675720 355.05935669]
[-74.61515808 345.79916382]
[-65.79837799 333.66390991]
[-64.57708740 318.81945801]
[-50.20594025 312.20275879]
[-41.38916016 300.06750488]
[-32.57238007 287.93225098]
[-23.75560188 275.79699707]
[-27.95481110 265.12387085]
[-26.44125366 253.63345337]
[-19.47853088 244.21849060]
[-8.71667480 239.30593872]
[3.19766855 240.23194885]
[12.48407745 228.45219421]
[21.77048683 216.67243958]
[30.70597649 204.62432861]
[39.28279495 192.31831360]
[47.85961533 180.01228333]
[56.43643570 167.70626831]
[65.01325226 155.40023804]
[66.26435089 148.07653809]
[73.88124084 142.93905640]
[82.69802094 130.80380249]
[91.51479340 118.66854858]
[86.18513489 104.64732361]
[71.53364563 101.43268585]
[56.88215637 98.21804810]
[41.42515182 103.69645691]
[29.12957191 92.84515381]
[32.64405823 76.82702637]
[48.35321045 72.12015533]
[60.09679413 83.56655884]
[74.74828339 86.78119659]
[89.39977264 89.99583435]
[103.42098999 84.66617584]
[112.23777008 72.53091431]
[121.05455017 60.39566422]
[129.87132263 48.26040649]
[138.68811035 36.12515259]
[134.05297852 21.43427849]
[138.90040588 6.99974489]
[151.17277527 -1.70962512]
[166.04232788 -1.52470851]
[174.85911560 -13.65996361]
[183.67588806 -25.79521751]
[192.49267578 -37.93047333]
[201.30944824 -50.06572723]
[210.12622070 -62.20098495]
[218.45977783 -74.67302704]
[226.29725647 -87.46263123]
[234.13473511 -100.25223541]
[241.97221375 -113.04183197]
[226.98469543 -112.43028259]
[217.01052856 -123.63368225]
[219.35202026 -138.44979858]
[232.29492188 -146.03146362]
[246.36344910 -140.82797241]
[251.25759888 -126.64732361]
[260.31094360 -138.60713196]
[269.24642944 -150.65524292]
[278.06320190 -162.79049683]
[286.87997437 -174.92575073]
[288.73193359 -190.63819885]
[302.47244263 -196.38691711]
[311.28921509 -208.52217102]
[320.10598755 -220.65742493]
[328.92276001 -232.79267883]
[337.73953247 -244.92793274]
[335.46954346 -260.33847046]
[344.58389282 -272.51974487]
[359.28948975 -274.58886719]
[368.10626221 -286.72412109]
[369.25244141 -306.81582642]
[387.16632080 -314.01400757]
[395.49987793 -326.48602295]
[403.83343506 -338.95806885]
[412.16696167 -351.43011475]
[415.93939209 -367.95904541]
[432.86663818 -368.90972900]
[438.46612549 -352.90716553]
[424.63900757 -343.09655762]
[416.30548096 -330.62454224]
[407.97192383 -318.15249634]
[399.63836670 -305.68045044]
[402.53463745 -295.81521606]
[399.43103027 -285.78250122]
[391.12939453 -278.99691772]
[380.24151611 -277.90734863]
[371.42474365 -265.77209473]
[374.00115967 -251.14685059]
[365.23257446 -238.71438599]
[349.87478638 -236.11114502]
[341.05801392 -223.97589111]
[332.24124146 -211.84063721]
[323.42446899 -199.70538330]
[314.60769653 -187.57012939]
[313.38638306 -172.72567749]
[299.01525879 -166.10897827]
[290.19845581 -153.97372437]
[281.38168335 -141.83847046]
[279.98703003 -134.54074097]
[272.27075195 -129.55380249]
[263.21740723 -117.59398651]
[254.76182556 -105.20435333]
[246.92434692 -92.41475677]
[239.08686829 -79.62515259]
[231.24938965 -66.83554840]
[231.81051636 -64.03868103]
[231.26824951 -60.84591293]
[229.46406555 -57.68740845]
[226.40203857 -55.04325485]
[222.26148987 -53.38420486]
[213.44470215 -41.24895096]
[204.62792969 -29.11369514]
[195.81114197 -16.97843933]
[186.99436951 -4.84318447]
[178.17758179 7.29207039]
[182.94839478 21.37671852]
[178.45767212 35.73977280]
[166.22755432 44.81047058]
[150.82336426 44.94193268]
[142.00659180 57.07718658]
[133.18980408 69.21244049]
[124.37302399 81.34769440]
[115.55625153 93.48294830]
[129.27882385 87.42565918]
[144.26084900 88.15998077]
[157.32530212 95.53019714]
[165.70181274 107.97341919]
[167.61412048 122.85102844]
[162.65670776 137.00814819]
[151.88082886 147.44270325]
[137.57151794 151.94203186]
[122.76315308 149.55198669]
[110.59589386 140.77943420]
[103.65005493 127.48532867]
[94.83327484 139.62057495]
[86.01649475 151.75582886]
[77.31927490 163.97706604]
[68.74245453 176.28308105]
[60.16563797 188.58911133]
[51.58881760 200.89512634]
[43.01199722 213.20115662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[8 24]
[9 23]
[10 22]
[11 21]
[13 19]
[14 18]
[32 159]
[33 158]
[34 157]
[35 156]
[36 155]
[38 154]
[39 153]
[40 152]
[41 50]
[42 49]
[43 48]
[51 141]
[52 140]
[53 139]
[54 138]
[55 137]
[59 133]
[60 132]
[61 131]
[62 130]
[63 129]
[64 128]
[65 123]
[66 122]
[67 121]
[68 120]
[74 119]
[75 118]
[76 116]
[77 115]
[78 114]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[87 105]
[88 104]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
