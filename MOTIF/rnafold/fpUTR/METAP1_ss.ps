%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGGCCCAGCUCCUCCCCCGACUCGGUCUCUCUCCCCUCCCCUCCGCCCGGCAGUUCCUCCCUCCCGCCGCCGCCUCUUCCUCGGUGAGGCGCUCUUCCAGCGGGCAGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[73.62834930 112.60462952]
[58.88808823 115.38396454]
[44.14782333 118.16329193]
[29.40756226 120.94261932]
[17.27998734 131.10296631]
[3.33946443 125.85785675]
[-11.40079784 128.63719177]
[-26.14105988 131.41651917]
[-26.51053810 146.46452332]
[-29.99945068 161.10112000]
[-36.45292664 174.68713379]
[-45.58668137 186.62971497]
[-56.99954605 196.40835571]
[-70.19107056 203.59744263]
[-84.58347321 207.88488770]
[-99.54697418 209.08561707]
[-114.42729950 207.14956665]
[-128.57434082 202.16377258]
[-141.37052917 194.34846497]
[-152.25781250 184.04731750]
[-160.76194763 171.71238708]
[-166.51322937 157.88421631]
[-181.25349426 160.66354370]
[-195.99375916 163.44287109]
[-210.43829346 172.31932068]
[-222.96650696 160.89653015]
[-215.45826721 145.69578552]
[-198.77308655 148.70260620]
[-184.03282166 145.92327881]
[-169.29255676 143.14395142]
[-168.97186279 128.17088318]
[-165.54354858 113.58603668]
[-159.15510559 100.02749634]
[-150.08357239 88.08894348]
[-138.72355652 78.29370117]
[-125.56999969 71.07175446]
[-111.19669342 66.74092102]
[-96.23120117 65.49282837]
[-81.32747650 67.38446045]
[-67.13727570 72.33554077]
[-54.28165436 80.13195038]
[-43.32381439 90.43498230]
[-34.74438858 102.79605865]
[-28.92039108 116.67626190]
[-14.18012810 113.89692688]
[0.56013352 111.11759949]
[11.63338757 101.15605164]
[26.62823105 106.20236206]
[41.36849213 103.42302704]
[56.10875702 100.64369965]
[70.84901428 97.86436462]
[72.35666656 90.50331879]
[75.69110107 83.76984406]
[80.63195038 78.10891724]
[86.85272217 73.89463806]
[93.94231415 71.40550232]
[101.43222046 70.80599976]
[108.82748413 72.13574982]
[115.63938904 75.30687714]
[121.41778564 80.10981750]
[125.78080750 86.22718048]
[128.44013977 93.25469971]
[143.43482971 93.65400696]
[157.43608093 86.28681946]
[169.95286560 94.36018372]
[184.94755554 94.75949097]
[199.94223022 95.15879822]
[214.94090271 95.35846710]
[229.94090271 95.35846710]
[244.94090271 95.35846710]
[259.94091797 95.35846710]
[274.94091797 95.35846710]
[285.81530762 77.90657043]
[304.80380249 70.37503815]
[324.42294312 75.55959320]
[337.04272461 91.27807617]
[351.91003418 89.28719330]
[366.77731323 87.29631042]
[381.64459229 85.30542755]
[396.51190186 83.31454468]
[411.37918091 81.32366180]
[417.83023071 67.30982971]
[430.84594727 59.02761841]
[446.27304077 59.11984634]
[459.18878174 67.55709076]
[465.47183228 81.64704895]
[463.11724854 96.89367676]
[452.87640381 108.43181610]
[438.01712036 112.57970428]
[423.28091431 108.01375580]
[413.37008667 96.19095612]
[398.50277710 98.18183899]
[383.63549805 100.17272186]
[368.76818848 102.16360474]
[353.90090942 104.15448761]
[339.03359985 106.14537048]
[336.56683350 115.84239197]
[331.22470093 124.33808899]
[323.50827026 130.80119324]
[314.15191650 134.59271240]
[304.05349731 135.32899475]
[294.18817139 132.92059326]
[285.51422119 127.58256531]
[278.87997437 119.81547546]
[274.94091797 110.35846710]
[259.94091797 110.35846710]
[244.94090271 110.35846710]
[229.94090271 110.35846710]
[214.94090271 110.35846710]
[208.16549683 113.54585266]
[199.54292297 110.15348053]
[184.54824829 109.75417328]
[169.55355835 109.35486603]
[156.62483215 116.75061798]
[143.03552246 108.64868927]
[128.04083252 108.24938202]
[113.53556061 125.90615845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[6 46]
[7 45]
[8 44]
[22 30]
[23 29]
[24 28]
[62 116]
[63 115]
[65 113]
[66 112]
[67 111]
[68 109]
[69 108]
[70 107]
[71 106]
[72 105]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
