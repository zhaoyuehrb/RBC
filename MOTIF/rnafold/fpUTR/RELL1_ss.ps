%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCGAUCAGCCCGCCGGCUCCGGAGCGGCUCUGCCUUCCCGAGCGCGGGACGCGGCGCCCUGGGGGAGGAGGGCGAAGCGACGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[99.59694672 327.42053223]
[99.37334442 312.11666870]
[106.29776764 298.46710205]
[118.77902985 289.60839844]
[116.71422577 274.75119019]
[114.64942169 259.89398193]
[100.79668427 254.41973877]
[91.48200989 242.66845703]
[89.28546906 227.73387146]
[94.89604187 213.61231995]
[106.89999390 204.13328552]
[104.83519745 189.27607727]
[102.77039337 174.41886902]
[100.70558929 159.56166077]
[91.28999329 148.02061462]
[97.05399323 133.28674316]
[94.98918915 118.42954254]
[83.49433136 109.60829163]
[81.49980164 95.25670624]
[90.15360260 83.63526154]
[88.08879852 68.77805328]
[86.02399445 53.92084503]
[83.95919800 39.06364059]
[81.89439392 24.20643234]
[79.82958984 9.34922695]
[76.33113098 4.90094137]
[75.16705322 0.03616282]
[76.07441711 -4.22577906]
[78.40272522 -7.14200163]
[77.88498688 -22.13306427]
[77.36724091 -37.12412643]
[69.15822601 -50.64901352]
[76.45162201 -63.63576508]
[75.93387604 -78.62682343]
[75.41613770 -93.61788940]
[74.89839172 -108.60894775]
[65.94342041 -118.08512115]
[65.93802643 -130.71939087]
[74.33155060 -139.61518860]
[74.33155060 -154.61518860]
[74.33155060 -169.61518860]
[74.33155060 -184.61518860]
[74.33155060 -199.61518860]
[65.66785431 -213.53898621]
[73.63198090 -227.87442017]
[90.03112793 -227.87442017]
[97.99525452 -213.53898621]
[89.33155060 -199.61518860]
[89.33155060 -184.61518860]
[89.33155060 -169.61518860]
[89.33155060 -154.61518860]
[89.33155060 -139.61518860]
[98.94584656 -125.04470062]
[89.88945770 -109.12669373]
[90.40719604 -94.13562775]
[90.92494202 -79.14456940]
[91.44268036 -64.15350342]
[99.61466980 -51.70087814]
[92.35830688 -37.64186859]
[92.87604523 -22.65080643]
[93.39379120 -7.65974331]
[94.68679810 7.28442383]
[96.75160217 22.14163017]
[98.81639862 36.99883652]
[100.88120270 51.85604477]
[102.94600677 66.71324921]
[105.01081085 81.57045746]
[116.50566864 90.39170837]
[118.50019836 104.74329376]
[109.84639740 116.36473846]
[111.91120148 131.22195435]
[121.47448730 143.82568359]
[115.56279755 157.49685669]
[117.62760162 172.35406494]
[119.69239807 187.21127319]
[121.75720215 202.06848145]
[135.89105225 207.91497803]
[145.13975525 219.97145081]
[147.09890747 234.93901062]
[141.34164429 248.78494263]
[129.50663757 257.82916260]
[131.57142639 272.68637085]
[133.63623047 287.54357910]
[148.06013489 292.66311646]
[158.44419861 303.90719604]
[162.40223694 318.69207764]
[159.02470398 333.62026978]
[149.08775330 345.26138306]
[134.87481689 350.94039917]
[119.65192413 349.35229492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[6 81]
[11 76]
[12 75]
[13 74]
[14 73]
[16 71]
[17 70]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[29 61]
[30 60]
[31 59]
[33 57]
[34 56]
[35 55]
[36 54]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
