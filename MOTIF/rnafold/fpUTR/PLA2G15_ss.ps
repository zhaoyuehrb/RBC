%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGCGUCGCCACCGCCCCCGCCUAGGCGAGAGCCCAGAGAGCUGAACCUGCAUCCCGGACCUGCGGCGACCGUCGUACACC\
) } def
/len { sequence length } bind def

/coor [
[102.71585083 263.11926270]
[108.43790436 248.92361450]
[120.10908508 239.02198792]
[116.77127075 224.39807129]
[113.43345642 209.77415466]
[108.76084137 203.80867004]
[110.25509644 194.54124451]
[107.46642303 179.80274963]
[104.67774963 165.06425476]
[101.88907623 150.32574463]
[99.10040283 135.58724976]
[96.31172943 120.84875488]
[83.96456146 116.54901886]
[75.61528778 105.11119080]
[75.20462036 89.86774445]
[60.29893494 88.18827820]
[45.39324951 86.50881195]
[30.48756790 84.82933807]
[20.11844826 96.37321472]
[4.93733215 99.58465576]
[-9.21832943 93.22880554]
[-16.90539742 79.74961090]
[-15.16803551 64.33010101]
[-4.67429686 52.89939499]
[10.54076290 49.85282898]
[24.62664413 56.36186981]
[32.16703415 69.92366028]
[47.07271957 71.60312653]
[61.97840118 73.28259277]
[76.88408661 74.96205902]
[89.87446594 67.46205902]
[95.87284851 53.71362686]
[90.33935547 39.15277863]
[96.61842346 25.29536247]
[110.53406525 20.10976028]
[116.53244019 6.36132574]
[110.99895477 -8.19952106]
[117.27801514 -22.05693817]
[131.19366455 -27.24254036]
[137.19204712 -40.99097443]
[133.19760132 -53.42345810]
[138.66609192 -64.83511353]
[150.10440063 -69.22035980]
[156.61265564 -82.73489380]
[150.01663208 -96.91327667]
[154.12736511 -112.00087738]
[167.00390625 -120.87380219]
[182.56632996 -119.34252930]
[193.46655273 -108.13006592]
[194.55781555 -92.53060150]
[185.32484436 -79.90972900]
[170.12719727 -76.22663879]
[163.61894226 -62.71210480]
[165.97193909 -45.42866135]
[150.94047546 -34.99259567]
[144.94209290 -21.24415970]
[150.60581970 -7.51616716]
[144.71846008 6.51214933]
[130.28088379 12.35970592]
[124.28249359 26.10814095]
[129.94622803 39.83613205]
[124.05886078 53.86444855]
[109.62127686 59.71200562]
[103.62290192 73.46044159]
[120.33258820 85.60123444]
[122.57149506 104.64035797]
[111.05022430 118.06008148]
[113.83889771 132.79858398]
[116.62757111 147.53707886]
[119.41624451 162.27557373]
[122.20491791 177.01406860]
[124.99359131 191.75256348]
[128.05737305 206.43634033]
[131.39518738 221.06025696]
[134.73300171 235.68417358]
[149.54452515 239.54130554]
[160.85917664 249.84844971]
[166.07693481 264.23709106]
[163.99879456 279.40087891]
[155.10231018 291.85522461]
[141.43180847 298.73825073]
[126.12867737 298.46826172]
[112.70947266 291.10733032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[15 30]
[16 29]
[17 28]
[18 27]
[31 64]
[32 63]
[35 60]
[36 59]
[39 56]
[40 55]
[43 53]
[44 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
