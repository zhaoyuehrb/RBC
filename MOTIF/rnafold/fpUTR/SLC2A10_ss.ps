%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUUGUCCGGCGGCAGCGGCGUUGGGGACUCCGGCGGGGGAUGCGCGCCCGGCCCCUCAGCGCCCCCAGCACGCCGCCGAGUCCCGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[96.99152374 356.60266113]
[96.99152374 341.60266113]
[86.31065369 331.28497314]
[86.09696960 316.07284546]
[96.99152374 304.93972778]
[96.99152374 289.93972778]
[96.99152374 274.93972778]
[82.53250885 268.34265137]
[72.32646942 256.08450317]
[68.43023682 240.55738831]
[71.66291809 224.81967163]
[81.43431854 211.99368286]
[95.85194397 204.64619446]
[95.37117004 189.65390015]
[94.89039612 174.66160583]
[94.40962219 159.66931152]
[93.92884827 144.67703247]
[93.44807434 129.68473816]
[92.96730042 114.69243622]
[83.72998047 100.78295898]
[91.58898926 86.05075073]
[90.62793732 71.08157349]
[88.70977783 56.20472336]
[85.84239960 41.48133469]
[82.97502136 26.75794792]
[80.10763550 12.03456020]
[77.24025726 -2.68882680]
[74.37287903 -17.41221428]
[71.50550079 -32.13560104]
[68.63812256 -46.85898972]
[65.77074432 -61.58237457]
[62.90336227 -76.30576324]
[59.90481949 -79.28607178]
[58.08914948 -82.70471954]
[57.45444489 -86.16616058]
[57.87922668 -89.31176758]
[59.14291763 -91.85331726]
[60.95499039 -93.59805298]
[60.47421646 -108.59034729]
[59.99344254 -123.58264160]
[51.81779861 -137.12773132]
[59.14319611 -150.09645081]
[58.66242218 -165.08874512]
[58.18164825 -180.08103943]
[45.26704788 -188.68293762]
[39.90657043 -203.24470520]
[44.16143036 -218.16703796]
[56.39554596 -227.71197510]
[71.90464783 -228.20933533]
[84.72517395 -219.46783447]
[89.92736816 -204.84877014]
[85.51087952 -189.97348022]
[73.17394257 -180.56181335]
[73.65471649 -165.56951904]
[74.13549042 -150.57722473]
[82.27674103 -138.10449219]
[74.98573303 -124.06341553]
[75.46650696 -109.07112122]
[75.94728088 -94.07882690]
[77.62674713 -79.17314148]
[80.49412537 -64.44975281]
[83.36151123 -49.72636795]
[86.22888947 -35.00297928]
[89.09626770 -20.27959442]
[91.96364594 -5.55620623]
[94.83102417 9.16718102]
[97.69840240 23.89056778]
[100.56578827 38.61395645]
[103.43316650 53.33734512]
[105.89302826 55.02681351]
[107.76335907 57.88423538]
[108.55870819 61.66278458]
[107.90339661 65.93090057]
[105.59711456 70.12052155]
[106.55816650 85.08969879]
[114.88951874 93.39479065]
[115.45497131 105.14495087]
[107.95959473 114.21166229]
[108.44036865 129.20396423]
[108.92114258 144.19625854]
[109.40191650 159.18855286]
[109.88269043 174.18083191]
[110.36346436 189.17312622]
[110.84423828 204.16542053]
[124.06293488 209.43891907]
[134.21780396 219.34771729]
[139.77963257 232.35301208]
[139.92880249 246.45333862]
[134.67591858 259.49258423]
[124.85506439 269.48971558]
[111.99152374 274.93972778]
[111.99152374 289.93972778]
[111.99152374 304.93972778]
[122.88607788 316.07284546]
[122.67239380 331.28497314]
[111.99152374 341.60266113]
[111.99152374 356.60266113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[5 93]
[6 92]
[7 91]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[21 75]
[22 74]
[23 69]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
