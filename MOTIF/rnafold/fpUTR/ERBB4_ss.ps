%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCGCGCCCGGCUGGGGGAUCUCCUCCGCGUGCCCGAAAGGGGGAUAUGCCAUUUGGACAUGUAAUUGUCAGCACGGGAUCUGAGACUUCCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[115.04293060 306.67330933]
[108.09327698 293.31231689]
[104.17875671 278.76959229]
[103.48246002 263.72534180]
[106.03695679 248.88322449]
[111.72277069 234.93742371]
[120.27396393 222.54019165]
[131.29057312 212.27139282]
[144.25733948 204.61129761]
[139.57684326 190.36024475]
[134.89634705 176.10917664]
[130.21583557 161.85810852]
[125.30982208 147.68309021]
[120.17951965 133.58770752]
[115.04921722 119.49231720]
[79.80594635 116.46472931]
[64.95862579 118.59944916]
[50.11130142 120.73417664]
[35.26398087 122.86889648]
[20.41665840 125.00362396]
[7.86755228 135.56069946]
[-7.45538235 129.71778870]
[-9.78922462 113.48555756]
[3.26688266 103.56234741]
[18.28193474 110.15629578]
[33.12925720 108.02157593]
[47.97657776 105.88685608]
[62.82389832 103.75212860]
[77.67121887 101.61740875]
[84.11814880 88.07350922]
[76.41298676 75.20375824]
[68.70782471 62.33400726]
[61.00266266 49.46425629]
[53.29750061 36.59450531]
[45.38911819 23.84862518]
[37.27950668 11.22982121]
[29.16989517 -1.38898170]
[13.67545033 -4.50309753]
[4.99091673 -17.70743179]
[8.26867485 -33.16808701]
[21.56408882 -41.71252823]
[36.98922348 -38.27149582]
[45.39262390 -24.88648796]
[41.78869629 -9.49859428]
[49.89831161 3.12020898]
[58.00792313 15.73901176]
[64.38908386 19.73716164]
[66.16725159 28.88934517]
[73.87241364 41.75909424]
[81.57757568 54.62884903]
[89.28273773 67.49859619]
[96.98789978 80.36834717]
[104.27648163 82.13654327]
[100.05059814 67.74411774]
[110.40193939 56.88825607]
[124.97904205 60.42495728]
[129.20460510 74.81747437]
[118.85365295 85.67292786]
[126.14224243 87.44111633]
[138.88812256 79.53273773]
[151.63400269 71.62435150]
[164.37988281 63.71597290]
[167.73944092 48.27288437]
[181.07991028 39.79894638]
[196.48660278 43.32158661]
[204.81903076 56.75089645]
[201.13369751 72.11949158]
[187.61705017 80.30947113]
[172.28826904 76.46185303]
[159.54238892 84.37023163]
[146.79650879 92.27861786]
[134.05062866 100.18699646]
[129.14460754 114.36201477]
[134.27490234 128.45739746]
[139.40521240 142.55279541]
[145.38742065 149.70384216]
[144.46690369 157.17759705]
[149.14741516 171.42866516]
[153.82791138 185.67973328]
[158.50840759 199.93080139]
[173.49189758 198.41114807]
[188.45170593 200.14846802]
[202.68812561 205.06150818]
[215.53532410 212.92050171]
[226.39239502 223.35783386]
[234.75154114 235.88536072]
[240.22178650 249.91712952]
[242.54728699 264.79684448]
[241.61924744 279.82858276]
[237.48110962 294.30923462]
[230.32640076 307.56158447]
[220.48976135 318.96572876]
[208.43125916 327.98828125]
[194.71492004 334.20730591]
[179.98225403 337.33184814]
[164.92236328 337.21582031]
[150.23959351 333.86462402]
[136.62071228 327.43499756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 80]
[10 79]
[11 78]
[12 77]
[13 75]
[14 74]
[15 73]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 46]
[36 45]
[37 44]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
