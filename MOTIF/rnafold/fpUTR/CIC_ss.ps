%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCGCUACCGCUGCCACUGAGAGGAGCCACCGGCGACGCCAGAGCCAGGAAUACGGGUGGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[111.08754730 228.11186218]
[108.37080383 213.35993958]
[103.91310120 207.14784241]
[105.88220215 197.87574768]
[103.83969879 183.01545715]
[101.79720306 168.15516663]
[99.75469971 153.29487610]
[97.71220398 138.43458557]
[82.82872772 134.46156311]
[70.69393921 124.97210693]
[63.25030136 111.48526001]
[61.68935776 96.15991211]
[47.34146118 91.78522491]
[32.99356842 87.41053772]
[23.52648926 87.88336945]
[18.10046577 82.49639130]
[3.96655273 77.47319794]
[-9.42371559 85.55000305]
[-24.86483955 83.07903290]
[-35.06599426 71.22700500]
[-35.21050262 55.59009171]
[-25.23013687 43.55155945]
[-9.83731747 40.79563522]
[3.69993663 48.62358475]
[8.98974705 63.33928680]
[23.12366104 68.36248016]
[37.36825562 73.06263733]
[51.71615219 77.43733215]
[66.06404877 81.81201935]
[79.15550232 67.62781525]
[97.48570251 61.57956314]
[116.44781494 65.18734741]
[125.37473297 53.13287735]
[134.02493286 40.87833023]
[142.39395142 28.43004990]
[150.76295471 15.98177147]
[144.55171204 1.86001551]
[146.98384094 -13.37442780]
[157.28327942 -24.86030388]
[172.16348267 -28.93251038]
[186.87626648 -24.29162216]
[196.72680664 -12.41852856]
[198.57183838 2.89810824]
[191.82263184 16.77080536]
[178.63282776 24.77283669]
[163.21124268 24.35078239]
[154.84222412 36.79906082]
[146.47322083 49.24734116]
[145.31863403 56.80565643]
[137.42919922 62.05979538]
[128.50228882 74.11425781]
[134.58346558 83.07560730]
[137.92852783 93.37595367]
[138.27281189 104.20037079]
[135.58908081 114.69246674]
[130.08966064 124.02214813]
[122.20965576 131.45127869]
[112.57248688 136.39208984]
[114.61499023 151.25238037]
[116.65748596 166.11267090]
[118.69998932 180.97296143]
[120.74248505 195.83325195]
[123.12272644 210.64318848]
[125.83946991 225.39511108]
[138.18168640 235.64447021]
[137.71960449 251.68087769]
[124.80771637 261.20254517]
[109.35089874 256.90530396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[12 29]
[13 28]
[14 27]
[16 26]
[17 25]
[32 51]
[33 50]
[34 48]
[35 47]
[36 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
