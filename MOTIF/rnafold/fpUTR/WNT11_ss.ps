%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCCGCCGCCUCCGCUCUCCCCGGCUGCAGGCGGCGUGCAGGACCAGCGGCGGCCGUGCAGGCGGAGGACUUCGGCGCGGCUCCUCCUGGGUGUGACCCCGGGCGCGCCCGCCGCGCGACG\
) } def
/len { sequence length } bind def

/coor [
[71.73096466 135.21022034]
[64.59639740 127.28723145]
[59.58298492 117.99990845]
[56.92893219 107.89640808]
[56.73491669 97.55974579]
[58.96113586 87.57421112]
[63.43240356 78.49231720]
[52.05102921 68.72173309]
[40.66965866 58.95114517]
[29.28828621 49.18055725]
[17.90691566 39.40997314]
[4.93555975 39.59507751]
[-4.35488176 31.12747383]
[-5.30609131 18.99675179]
[-16.43629456 8.94097900]
[-27.56649780 -1.11479354]
[-42.66656876 1.93382955]
[-56.50462341 -4.41925001]
[-63.86130905 -17.54720497]
[-62.09817123 -32.31302261]
[-73.22837067 -42.36879349]
[-84.35857391 -52.42456818]
[-95.61526489 -62.33854294]
[-106.99664307 -72.10913086]
[-118.37801361 -81.87971497]
[-133.88887024 -84.99803162]
[-138.50592041 -99.15896606]
[-149.88729858 -108.92955017]
[-161.26867676 -118.70013428]
[-172.65003967 -128.47071838]
[-184.03141785 -138.24131775]
[-195.53564453 -147.86694336]
[-207.16087341 -157.34606934]
[-218.78610229 -166.82521057]
[-234.37098694 -169.54959106]
[-239.34529114 -183.58900452]
[-250.97053528 -193.06814575]
[-259.70559692 -196.11575317]
[-262.76620483 -202.93763733]
[-274.14758301 -212.70822144]
[-285.52896118 -222.47880554]
[-300.92813110 -219.75859070]
[-314.44717407 -227.61791992]
[-319.70285034 -242.34585571]
[-314.21356201 -256.98831177]
[-300.57119751 -264.63159180]
[-285.21722412 -261.66674805]
[-275.40136719 -249.49369812]
[-275.75836182 -233.86018372]
[-264.37698364 -224.08959961]
[-252.99562073 -214.31901550]
[-241.49139404 -204.69337463]
[-229.86616516 -195.21424866]
[-215.11280823 -193.16787720]
[-209.30697632 -178.45043945]
[-197.68174744 -168.97131348]
[-186.05650330 -159.49217224]
[-178.80168152 -157.68307495]
[-174.26081848 -149.62268066]
[-162.87945557 -139.85209656]
[-151.49807739 -130.08151245]
[-140.11671448 -120.31092072]
[-128.73533630 -110.54033661]
[-114.03855133 -108.12088013]
[-108.60742188 -93.26108551]
[-97.22605133 -83.49050140]
[-85.84468079 -73.71991730]
[-78.63800812 -71.72760773]
[-74.30280304 -63.55477142]
[-63.17259979 -53.49899673]
[-52.04239655 -43.44322586]
[-37.53071213 -46.69115067]
[-23.72585106 -40.70034409]
[-16.00539398 -27.57601738]
[-17.51072693 -12.24499702]
[-6.38052225 -2.18922472]
[4.74968147 7.86654806]
[22.04231453 10.55356789]
[27.67750168 28.02859879]
[39.05887604 37.79918671]
[50.44024658 47.56977463]
[61.82161713 57.34036255]
[73.20298767 67.11094666]
[91.09948730 57.49706268]
[111.88533783 57.19332504]
[130.90126038 66.70219421]
[143.68547058 84.27820587]
[147.01818848 106.23318481]
[161.78291321 108.87948608]
[176.54763794 111.52577972]
[191.31236267 114.17207336]
[206.07708740 116.81837463]
[220.84181213 119.46466827]
[233.66859436 110.23160553]
[249.25360107 112.85517120]
[258.35052490 125.77883911]
[255.56234741 141.33523560]
[242.54321289 150.29502869]
[227.01716614 147.34252930]
[218.19552612 134.22940063]
[203.43080139 131.58309937]
[188.66606140 128.93679810]
[173.90133667 126.29050446]
[159.13661194 123.64421082]
[144.37188721 120.99790955]
[135.95950317 133.41693115]
[143.89396667 146.14659119]
[151.82843018 158.87625122]
[159.76289368 171.60591125]
[167.69735718 184.33558655]
[182.93722534 189.34814453]
[188.38485718 204.43797302]
[179.86126709 218.02943420]
[163.90504456 219.69635010]
[152.75643921 208.15997314]
[154.96768188 192.27003479]
[147.03323364 179.54037476]
[139.09877014 166.81071472]
[131.16430664 154.08105469]
[123.22984314 141.35137939]
[112.71820068 145.22000122]
[101.69783783 146.48840332]
[90.79615784 145.13546753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[14 77]
[15 76]
[16 75]
[20 71]
[21 70]
[22 69]
[23 67]
[24 66]
[25 65]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 57]
[33 56]
[34 55]
[36 53]
[37 52]
[39 51]
[40 50]
[41 49]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
