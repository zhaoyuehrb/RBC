%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUACUUUUAGCUUCCCCCAUCCUGCAAGGCCACUCAACCAUGUGCUAGCUGGAGUGAUCUUUAUUCACA\
) } def
/len { sequence length } bind def

/coor [
[74.27601624 116.96302032]
[65.25165558 128.94471741]
[56.22729492 140.92640686]
[47.20293427 152.90809631]
[49.65411758 168.52114868]
[40.27987671 181.24510193]
[24.64178658 183.53108215]
[12.01764679 174.02284241]
[9.89713573 158.36145020]
[19.53831482 145.83854675]
[35.22124481 143.88372803]
[44.24560547 131.90203857]
[53.26996613 119.92035675]
[62.29432678 107.93865967]
[48.96730804 101.05458069]
[40.88564301 88.41786194]
[40.22623825 73.43236542]
[47.16671371 60.13462448]
[59.83755493 52.10656738]
[74.82571411 51.51064682]
[88.09393311 58.50738907]
[96.06824493 71.21212769]
[96.60061646 86.20288086]
[100.43091583 71.70016479]
[104.26121521 57.19744492]
[100.30434418 41.87903214]
[111.03508759 31.54944229]
[114.86538696 17.04672623]
[109.01046753 5.32979155]
[112.71769714 -6.81012774]
[123.41492462 -12.85773945]
[127.86562347 -27.18224144]
[132.31631470 -41.50674057]
[131.89201355 -50.94791031]
[137.27893066 -56.34431839]
[142.34176636 -70.46407318]
[133.49235535 -83.21035767]
[133.85877991 -98.72310638]
[143.30012512 -111.03735352]
[158.18600464 -115.41802216]
[172.79249573 -110.18065643]
[181.50309753 -97.33912659]
[180.96842957 -81.83126068]
[171.39405823 -69.62016296]
[156.46153259 -65.40122986]
[151.39868164 -51.28147507]
[146.64080811 -37.05604935]
[142.19012451 -22.73154831]
[137.73942566 -8.40704727]
[142.62782288 8.30863571]
[129.36810303 20.87702560]
[125.53780365 35.37974167]
[129.76864624 49.66082382]
[118.76393127 61.02774429]
[114.93363190 75.53046417]
[111.10333252 90.03318024]
[114.93363190 104.53589630]
[125.42550659 115.25599670]
[135.91738892 125.97609711]
[146.40925598 136.69619751]
[161.98622131 135.32064819]
[174.77337646 144.32191467]
[178.73300171 159.44989014]
[171.99549866 173.56158447]
[157.74209595 179.99389648]
[142.70283508 175.70970154]
[133.97877502 162.73184204]
[135.68916321 147.18807983]
[125.19728088 136.46797180]
[114.70540619 125.74787140]
[104.21353149 115.02777100]
[96.72915649 115.51158142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[23 56]
[24 55]
[25 54]
[27 52]
[28 51]
[31 49]
[32 48]
[33 47]
[35 46]
[36 45]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
