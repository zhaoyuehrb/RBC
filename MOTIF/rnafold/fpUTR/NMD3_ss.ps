%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUCGCUCGCGAGAUCUUCUCUGUGGCGGAGACAGCCAGGUUGGCAGCUGACGGGACAGCCGGGGUCUAUUUUGUUGCGGGUUUUCAGCAAAUCCAGGGCUGGUCUGGAGGCGCGAAAACUUAAGGCAUACAGAACG\
) } def
/len { sequence length } bind def

/coor [
[13.18910599 282.89031982]
[4.73289251 282.76962280]
[-3.54004622 281.05093384]
[-11.33077431 277.79925537]
[-18.35832977 273.13494873]
[-29.59451103 283.07217407]
[-40.83069229 293.00939941]
[-52.06687164 302.94659424]
[-63.30305481 312.88381958]
[-67.70517731 320.98184204]
[-74.90203857 322.91384888]
[-86.35681915 332.59826660]
[-97.81159973 342.28268433]
[-109.15779114 352.09411621]
[-120.39396667 362.03131104]
[-131.63015747 371.96853638]
[-142.86633301 381.90576172]
[-150.72550964 396.92807007]
[-167.33636475 393.53460693]
[-168.67388916 376.63351440]
[-152.80354309 370.66958618]
[-141.56736755 360.73236084]
[-130.33119202 350.79513550]
[-119.09500122 340.85794067]
[-116.14456177 334.01522827]
[-107.49601746 330.82791138]
[-96.04123688 321.14349365]
[-84.58645630 311.45907593]
[-73.24026489 301.64764404]
[-62.00408936 291.71041870]
[-50.76790619 281.77322388]
[-39.53172684 271.83599854]
[-28.29554367 261.89877319]
[-35.01037598 240.46501160]
[-30.35525703 218.42652893]
[-15.46186066 201.44328308]
[5.90056467 193.90821838]
[28.27897453 197.81101990]
[36.76818085 185.44439697]
[45.25738525 173.07777405]
[53.46897125 160.52508545]
[61.39885712 147.79257202]
[69.32874298 135.06005859]
[77.25862885 122.32754517]
[85.18850708 109.59503174]
[84.81580353 91.00638580]
[101.29623413 82.39987183]
[108.65105438 69.32674408]
[110.15325165 60.23279953]
[116.31815338 56.04693222]
[123.96240234 43.14090729]
[131.60665894 30.23488426]
[127.90658569 15.10387993]
[135.84278870 2.12423182]
[150.29069519 -1.30996740]
[157.93495178 -14.21599102]
[165.57919312 -27.12201500]
[161.87913513 -42.25301743]
[169.81533813 -55.23266602]
[184.26324463 -58.66686630]
[191.90748596 -71.57289124]
[199.55174255 -84.47891235]
[207.19598389 -97.38493347]
[214.84024048 -110.29096222]
[214.58393860 -128.66590881]
[230.13005066 -136.73289490]
[237.48487854 -149.80601501]
[244.83969116 -162.87913513]
[252.19450378 -175.95227051]
[237.22814941 -174.94818115]
[226.94427490 -185.86796570]
[228.84347534 -200.74725342]
[241.54055786 -208.73374939]
[255.77485657 -204.00247192]
[261.16445923 -190.00344849]
[269.92706299 -202.17787170]
[278.68966675 -214.35229492]
[287.45230103 -226.52671814]
[296.21490479 -238.70114136]
[304.97750854 -250.87556458]
[299.98907471 -265.56893921]
[304.62200928 -280.37823486]
[317.09487915 -289.60900879]
[332.61160278 -289.71182251]
[345.20568848 -280.64712524]
[350.03448486 -265.90051270]
[345.24114990 -251.14234924]
[332.66888428 -242.04742432]
[317.15194702 -242.11294556]
[308.38934326 -229.93852234]
[299.62670898 -217.76409912]
[290.86410522 -205.58967590]
[282.10150146 -193.41525269]
[273.33886719 -181.24082947]
[265.26763916 -168.59744263]
[257.91281128 -155.52432251]
[250.55799866 -142.45120239]
[243.20318604 -129.37806702]
[246.15946960 -117.59619904]
[240.07174683 -106.62272644]
[227.74626160 -102.64671326]
[220.10200500 -89.74068451]
[212.45776367 -76.83466339]
[204.81350708 -63.92863846]
[197.16926575 -51.02261734]
[201.10104370 -36.70211792]
[193.53253174 -23.50467682]
[178.48521423 -19.47776604]
[170.84097290 -6.57174158]
[163.19671631 6.33428240]
[167.12849426 20.65478134]
[159.55999756 33.85222244]
[144.51268005 37.87913132]
[136.86842346 50.78515625]
[129.22418213 63.69118118]
[121.72417450 76.68156433]
[114.36935425 89.75468445]
[117.63199615 99.25321960]
[115.18419647 108.99361420]
[107.81872559 115.82126617]
[97.92102814 117.52491760]
[89.99114227 130.25743103]
[82.06125641 142.98994446]
[74.13137054 155.72245789]
[66.20148468 168.45497131]
[65.58784485 175.16946411]
[62.14847946 179.82118225]
[57.62401199 181.56698608]
[49.13480377 193.93360901]
[40.64559555 206.30023193]
[46.16266632 212.82812500]
[50.33974457 220.27629089]
[53.02808762 228.37371826]
[54.13305664 236.82632446]
[53.61746216 245.32774353]
[51.50280762 253.57034302]
[47.86840057 261.25640869]
[42.84838486 268.10891724]
[36.62680435 273.88143921]
[29.43082619 278.36706543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[11 28]
[12 27]
[13 26]
[14 24]
[15 23]
[16 22]
[17 21]
[38 130]
[39 129]
[40 128]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[47 117]
[48 116]
[50 115]
[51 114]
[52 113]
[55 110]
[56 109]
[57 108]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[66 98]
[67 97]
[68 96]
[69 95]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
