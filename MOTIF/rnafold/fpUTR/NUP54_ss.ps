%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGCGCCUUCCGGCCUCUUAGGCUAGGUCAGAAAGGAGGCGGAACUCGGUGAUCUGACUGGCGGUUUCCCGGCCGGACUGAGAAGGGGAGCGCGCUGCGCGUCGCAGGAGUAACCUACUUGGUCUCCUGCUUUCGCGAC\
) } def
/len { sequence length } bind def

/coor [
[313.19924927 302.30233765]
[308.96316528 296.01464844]
[307.19949341 288.57064819]
[308.18170166 280.91473389]
[296.57339478 271.41485596]
[284.96508789 261.91500854]
[273.35678101 252.41516113]
[261.74847412 242.91529846]
[250.03579712 233.54443359]
[238.22018433 224.30369568]
[226.40455627 215.06295776]
[214.58894348 205.82223511]
[202.77331543 196.58149719]
[191.92698669 200.40676880]
[180.46876526 198.46551514]
[171.29968262 191.13069153]
[166.79850769 180.15562439]
[168.20521545 168.25585938]
[156.80992126 158.50152588]
[145.41461182 148.74719238]
[134.01930237 138.99285889]
[122.62400055 129.23852539]
[111.22869110 119.48419952]
[96.47076416 122.20950317]
[83.28460693 115.04370117]
[77.54271698 101.17812347]
[63.15885162 96.92319489]
[48.77498627 92.66826630]
[34.39112091 88.41333771]
[20.00725555 84.15841675]
[5.62338972 79.90348816]
[-8.76047611 75.64855957]
[-16.67339516 83.00846100]
[-26.86389542 86.35327911]
[-37.43790054 85.13287354]
[-46.45982361 79.63906860]
[-52.30688095 70.93963623]
[-53.96085358 60.67138672]
[-68.03085327 55.47184753]
[-82.10084534 50.27230835]
[-96.35045624 57.10782623]
[-111.23196411 51.78652954]
[-117.91644287 37.46545410]
[-112.43811035 22.64103317]
[-98.04715729 16.10833740]
[-83.28148651 21.74309921]
[-76.90130615 36.20231247]
[-62.83131409 41.40185165]
[-48.76131821 46.60139084]
[-31.81259727 37.13438034]
[-13.03982735 43.15775681]
[-4.50554943 61.26469421]
[9.87831593 65.51962280]
[24.26218224 69.77454376]
[38.64604950 74.02947235]
[53.02991486 78.28440094]
[67.41378021 82.53932953]
[81.79764557 86.79425049]
[85.75771332 82.59670258]
[90.65563202 79.54516602]
[89.32993317 64.60386658]
[88.00422668 49.66255951]
[86.67852783 34.72126007]
[85.35282898 19.77995682]
[83.86193085 4.85423279]
[82.20601654 -10.05408573]
[72.05816650 -22.93636513]
[78.39107513 -38.06336975]
[94.68998718 -39.87373734]
[104.18798065 -26.50511551]
[97.11434174 -11.70999527]
[98.77024841 3.19832301]
[102.66567230 9.54921150]
[100.29412842 18.45425415]
[101.61982727 33.39555740]
[102.94553375 48.33686066]
[104.27123260 63.27816010]
[105.59693909 78.21946716]
[119.99172974 89.70202637]
[120.98302460 108.08889008]
[132.37832642 117.84322357]
[143.77363586 127.59755707]
[155.16894531 137.35188293]
[166.56425476 147.10621643]
[177.95954895 156.86054993]
[196.71054077 154.63127136]
[210.94668579 166.54853821]
[212.01405334 184.76588440]
[223.82966614 194.00660706]
[235.64529419 203.24734497]
[247.46090698 212.48808289]
[259.27651978 221.72880554]
[268.03866577 224.58343506]
[271.24832153 231.30699158]
[282.85662842 240.80685425]
[294.46493530 250.30670166]
[306.07324219 259.80657959]
[317.68154907 269.30642700]
[340.80337524 270.87780762]
[348.55798340 291.94226074]
[361.14404297 300.10256958]
[373.73013306 308.26287842]
[386.31622314 316.42318726]
[403.31304932 312.44781494]
[417.66567993 321.77816772]
[420.80474854 338.26406860]
[433.56826782 346.14395142]
[446.33178711 354.02383423]
[459.09533691 361.90371704]
[471.85885620 369.78359985]
[484.62237549 377.66348267]
[497.38589478 385.54336548]
[504.09994507 386.13040161]
[508.76403809 389.54928589]
[510.52883911 394.06469727]
[522.93133545 402.50143433]
[535.33380127 410.93817139]
[551.29937744 409.36358643]
[562.38110352 420.96423340]
[560.07800293 436.84109497]
[546.15679932 444.81481934]
[531.29669189 438.76864624]
[526.89703369 423.34066772]
[514.49456787 414.90393066]
[502.09210205 406.46719360]
[489.50601196 398.30688477]
[476.74249268 390.42700195]
[463.97897339 382.54711914]
[451.21545410 374.66723633]
[438.45193481 366.78735352]
[425.68841553 358.90747070]
[412.92486572 351.02761841]
[400.87747192 355.72570801]
[388.13980103 352.55596924]
[379.44458008 342.46398926]
[378.15591431 329.00927734]
[365.56982422 320.84896851]
[352.98376465 312.68865967]
[340.39767456 304.52835083]
[333.85986328 307.79226685]
[326.52294922 308.54907227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[38 49]
[39 48]
[40 47]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 72]
[66 71]
[100 139]
[101 138]
[102 137]
[103 136]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
