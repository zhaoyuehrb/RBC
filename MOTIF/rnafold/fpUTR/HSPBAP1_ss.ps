%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGUAGGAGCCGGGCGGGAGUCGCCGGGGCUCCUUCCUGUGGUGCAGCUUCGGGUCUCGGAGUUUGGCCCCUACUCUGACCCCACCCCAGCUCCGCUCCGCCUUGGGUUCCGGCAGAACCCGCCUUGCGGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[64.12918854 493.66012573]
[63.79261398 478.66390991]
[63.45604324 463.66766357]
[55.43511581 451.11721802]
[62.86082077 437.14691162]
[62.52425003 422.15069580]
[62.18767929 407.15444946]
[61.85110855 392.15823364]
[61.51453400 377.16201782]
[50.03276443 386.81442261]
[35.07218933 385.72756958]
[25.10603905 374.51705933]
[25.77884865 359.53216553]
[36.70955658 349.25988770]
[51.70733261 349.51815796]
[62.27804947 360.16107178]
[63.95751572 345.25540161]
[65.63698578 330.34970093]
[67.31645203 315.44403076]
[68.99591827 300.53836060]
[70.67538452 285.63265991]
[72.35485077 270.72698975]
[65.04093933 261.02722168]
[66.37275696 248.54798889]
[76.17680359 240.08416748]
[78.19029999 225.21992493]
[80.03690338 210.33401489]
[81.71636963 195.42832947]
[83.39583588 180.52265930]
[85.07530212 165.61697388]
[86.75476837 150.71128845]
[88.43424225 135.80560303]
[90.11370850 120.89991760]
[91.79317474 105.99423981]
[89.48085022 98.19738770]
[93.68120575 90.77429962]
[95.69470978 75.91005707]
[85.52924347 68.47422791]
[79.55385590 57.46959305]
[78.86159515 45.03907394]
[83.52352905 33.57331085]
[92.58693695 25.25089455]
[104.26931763 21.62443924]
[106.94766998 6.86549568]
[109.62602234 -7.89344788]
[112.30437469 -22.65239143]
[107.15553284 -37.61233902]
[117.04103088 -48.75352859]
[119.71939087 -63.51247406]
[122.06590271 -78.32779694]
[124.07940674 -93.19204712]
[126.09290314 -108.05628967]
[128.10639954 -122.92053986]
[120.90734863 -133.68757629]
[122.94346619 -146.07142639]
[132.57429504 -153.47584534]
[134.92082214 -168.29118347]
[137.26733398 -183.10650635]
[139.61384583 -197.92182922]
[130.62948608 -217.31677246]
[144.01451111 -232.96768188]
[145.35910034 -247.90730286]
[146.70368958 -262.84692383]
[148.04827881 -277.78652954]
[149.39286804 -292.72613525]
[150.73745728 -307.66574097]
[152.08204651 -322.60537720]
[139.84077454 -331.99444580]
[134.64036560 -346.51889038]
[138.14028931 -361.54400635]
[149.22369385 -372.27532959]
[164.35392761 -375.28854370]
[178.70298767 -369.62216187]
[187.69213867 -357.08425903]
[188.45297241 -341.67565918]
[180.74270630 -328.31320190]
[167.02166748 -321.26077271]
[165.67707825 -306.32116699]
[164.33248901 -291.38156128]
[162.98789978 -276.44192505]
[161.64331055 -261.50231934]
[160.29870605 -246.56271362]
[158.95411682 -231.62309265]
[165.78086853 -225.72416687]
[169.13346863 -217.19902039]
[168.12374878 -207.95491028]
[162.85533142 -200.12481689]
[154.42916870 -195.57531738]
[152.08265686 -180.75997925]
[149.73614502 -165.94465637]
[147.38961792 -151.12933350]
[154.57333374 -135.15667725]
[142.97064209 -120.90703583]
[140.95715332 -106.04279327]
[138.94364929 -91.17854309]
[136.93014526 -76.31430054]
[139.11166382 -71.98126984]
[138.53578186 -66.22265625]
[134.47833252 -60.83411789]
[131.79997253 -46.07517624]
[137.14039612 -32.17088699]
[127.06331635 -19.97403908]
[124.38496399 -5.21509457]
[121.70661163 9.54384899]
[119.02825928 24.30279350]
[131.79286194 36.41189957]
[134.82154846 53.90225983]
[126.73069000 69.87699890]
[110.55895233 77.92355347]
[108.54545593 92.78780365]
[106.69885254 107.67370605]
[105.01938629 122.57938385]
[103.33992004 137.48507690]
[101.66045380 152.39074707]
[99.98098755 167.29643250]
[98.30152130 182.20211792]
[96.62205505 197.10780334]
[94.94258881 212.01348877]
[97.10286713 220.97576904]
[93.05455017 227.23341370]
[91.04105377 242.09767151]
[98.43467712 258.92053223]
[87.26053619 272.40643311]
[85.58106995 287.31213379]
[83.90160370 302.21780396]
[82.22212982 317.12350464]
[80.54266357 332.02917480]
[78.86319733 346.93487549]
[77.18373108 361.84054565]
[76.51075745 376.82543945]
[76.84732819 391.82165527]
[77.18389893 406.81790161]
[77.52046967 421.81411743]
[77.85704041 436.81033325]
[85.90204620 450.43341064]
[78.45227051 463.33111572]
[78.78884125 478.32733154]
[79.12541199 493.32354736]
[81.74780273 512.52703857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[25 121]
[26 120]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[36 110]
[37 109]
[43 105]
[44 104]
[45 103]
[46 102]
[48 100]
[49 99]
[50 96]
[51 95]
[52 94]
[53 93]
[56 91]
[57 90]
[58 89]
[59 88]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
