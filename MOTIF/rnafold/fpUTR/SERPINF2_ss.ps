%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGGCAGAGAGUGAGGAGCACCCAAGUGGGGCCAGAGGAACGUUGUGUGUGGCAGCAAGGAGCCCGCAGAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[69.53874969 105.06531525]
[54.58739090 103.85831451]
[39.63603210 102.65131378]
[23.35683632 110.97583771]
[9.22481632 100.77490234]
[-5.76301908 100.17091370]
[-20.75085449 99.56692505]
[-27.17770767 113.31360626]
[-38.34787369 123.52490234]
[-52.53817749 128.66773987]
[-67.57563782 127.98773956]
[-81.17018127 121.61959839]
[-91.26343536 110.56194305]
[-96.34032440 96.52077484]
[-111.32816315 95.91678619]
[-120.30950928 98.75643158]
[-126.90380096 94.97463226]
[-141.85516357 93.76763916]
[-156.43095398 101.28284454]
[-170.07905579 92.19101715]
[-168.75947571 75.84504700]
[-153.82968140 69.06026459]
[-140.64816284 78.81627655]
[-125.69680786 80.02327728]
[-110.72417450 80.92895508]
[-95.73633575 81.53294373]
[-89.54605865 67.94582367]
[-78.59577179 57.73619461]
[-64.53288269 52.48261261]
[-49.48946762 53.01482391]
[-35.75900650 59.28283691]
[-25.44673157 70.35984039]
[-20.14686394 84.57909393]
[-5.15902996 85.18308258]
[9.82880497 85.78707123]
[19.09223175 77.74135590]
[31.75435066 78.29511261]
[40.84303284 87.69995880]
[55.79439163 88.90695190]
[70.74575043 90.11395264]
[79.57405853 76.84128571]
[93.84552002 69.74000549]
[109.75704193 70.70246887]
[123.06848145 79.47221375]
[130.23258972 93.71224213]
[145.22041321 94.31623077]
[159.32095337 87.14088440]
[171.72634888 95.38438416]
[186.71418762 95.98837280]
[201.70202637 96.59236145]
[216.68984985 97.19635010]
[225.67120361 94.35671234]
[232.26550293 98.13850403]
[247.21685791 99.34550476]
[262.16821289 100.55250549]
[272.16690063 88.68632507]
[287.23880005 84.99614716]
[301.58847046 90.90092468]
[309.69818115 104.13014221]
[308.44958496 119.59690094]
[298.32275391 131.35391235]
[283.21173096 134.88037109]
[268.92694092 128.82028198]
[260.96121216 115.50386047]
[246.00985718 114.29686737]
[231.05850220 113.08986664]
[216.08586121 112.18418884]
[201.09803772 111.58020020]
[186.11019897 110.97621155]
[171.12236023 110.37222290]
[158.09385681 117.59076691]
[144.61642456 109.30406952]
[129.62860107 108.70008087]
[122.92510223 120.68778992]
[111.68628693 128.58279419]
[98.13554382 130.82318115]
[84.95364380 126.96575928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[5 35]
[6 34]
[7 33]
[14 26]
[15 25]
[17 24]
[18 23]
[45 73]
[46 72]
[48 70]
[49 69]
[50 68]
[51 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
