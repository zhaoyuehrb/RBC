%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAAUUGUCAUACGACUUGCAGUGAGCGUCAGGAGCACGUCCAGGAACUCCUCAGCAGCGCCUCCUUCAGCUCCACAGCCAGACGCCCUCAGACAGCAAAGCCUACCCCCGCGCCGCGCCCUGCCCGCCGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[15.18321037 339.16754150]
[15.03106594 346.70175171]
[12.98710728 353.93200684]
[9.19460201 360.39260864]
[3.90906119 365.67034912]
[-2.51894546 369.43096924]
[-9.66703129 371.44030762]
[-17.06874275 371.57882690]
[-24.24399757 369.84872437]
[-32.89420319 382.10327148]
[-41.54440689 394.35781860]
[-42.49600601 410.72933960]
[-57.26942444 417.84820557]
[-70.66703033 408.39114380]
[-68.90652466 392.08676147]
[-53.79895782 385.70761108]
[-45.14875031 373.45306396]
[-36.49854660 361.19851685]
[-43.30089569 339.16320801]
[-31.81128883 318.87719727]
[-8.92453384 313.25915527]
[-2.63688636 299.64059448]
[3.65076137 286.02200317]
[9.93840885 272.40344238]
[16.22605705 258.78488159]
[22.51370430 245.16630554]
[22.46111870 237.71080017]
[29.10261154 231.31181335]
[35.69863129 217.83988953]
[42.29465485 204.36798096]
[40.11969757 186.99133301]
[55.39324951 176.77702332]
[61.68090057 163.15844727]
[67.96854401 149.53988647]
[74.25619507 135.92131042]
[74.20360565 128.46580505]
[80.84510040 122.06681824]
[87.44112396 108.59490204]
[77.54634094 119.86846924]
[62.64622879 121.59663391]
[50.43373871 112.88715363]
[47.21421432 98.23674011]
[54.64989853 85.20943451]
[68.90173340 80.53127289]
[82.61291504 86.61904144]
[70.97724152 77.15271759]
[59.34157562 67.68640137]
[43.07316589 65.61978912]
[36.97907257 50.39500427]
[47.32837677 37.67399979]
[63.47460175 40.54305649]
[68.80789185 56.05073166]
[80.44356537 65.51705170]
[92.07923126 74.98336792]
[96.21482086 80.16978455]
[99.00302124 85.89933777]
[100.38330841 91.92561340]
[111.80047607 82.19687653]
[117.28613281 67.35713196]
[131.99169922 64.99165344]
[143.40887451 55.26292419]
[154.82604980 45.53419113]
[166.24320984 35.80546188]
[160.51702881 21.81731224]
[159.39633179 6.76452112]
[162.97828674 -7.87781048]
[170.89991760 -20.67870522]
[182.37471008 -30.39115143]
[196.27078247 -36.07358551]
[211.22248840 -37.18115616]
[225.76463318 -33.61794662]
[238.47602844 -25.74513435]
[249.89320374 -35.47386551]
[261.31036377 -45.20259476]
[255.18855286 -59.00127029]
[253.20500183 -73.95077515]
[255.51199341 -88.83845520]
[261.91412354 -102.45906830]
[271.88476562 -113.71241760]
[284.60955811 -121.69215393]
[299.05264282 -125.75884247]
[314.04122925 -125.59111786]
[328.36068726 -121.21113586]
[340.85302734 -112.98202515]
[352.27020264 -122.71075439]
[354.97531128 -138.52410889]
[369.09426880 -146.14213562]
[383.79623413 -139.72094727]
[387.80313110 -124.18632507]
[378.04119873 -111.45510101]
[361.99893188 -111.29358673]
[350.58178711 -101.56484985]
[356.72430420 -87.92495728]
[358.77655029 -73.09190369]
[356.56372070 -58.26661301]
[350.25668335 -44.65183640]
[340.35885620 -33.35453796]
[327.66592407 -25.29591179]
[313.20196533 -21.13626480]
[298.13684082 -21.22092247]
[283.69152832 -25.55156898]
[271.03909302 -33.78542709]
[259.62191772 -24.05669403]
[248.20475769 -14.32796288]
[253.96073914 -0.52833927]
[255.17121887 14.39496040]
[251.70510864 28.98146820]
[243.88961792 41.79977036]
[232.47937012 51.58798218]
[218.58364868 57.37796021]
[203.55844116 58.59106064]
[188.87422180 55.09593582]
[175.97193909 47.22263336]
[164.55477905 56.95136261]
[153.13760376 66.68009186]
[141.72042847 76.40882874]
[137.05140686 90.55271149]
[121.52921295 93.61405182]
[110.11203766 103.34278107]
[100.91304016 115.19091797]
[94.31701660 128.66284180]
[87.87476349 142.20895386]
[81.58712006 155.82752991]
[75.29946899 169.44610596]
[69.01182556 183.06466675]
[72.73374939 195.47285461]
[67.14974976 206.71478271]
[55.76657104 210.96398926]
[49.17054749 224.43591309]
[42.57452774 237.90782166]
[36.13227463 251.45394897]
[29.84462929 265.07250977]
[23.55698013 278.69110107]
[17.26933289 292.30966187]
[10.98168468 305.92822266]
[4.69403696 319.54681396]
[9.85224724 325.13113403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 18]
[10 17]
[11 16]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[28 130]
[29 129]
[30 128]
[32 125]
[33 124]
[34 123]
[35 122]
[37 121]
[38 120]
[45 54]
[46 53]
[47 52]
[57 119]
[58 118]
[60 116]
[61 115]
[62 114]
[63 113]
[72 104]
[73 103]
[74 102]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
