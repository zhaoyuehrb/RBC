%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUCAGGCGUGUUAAGCAGCGGGGUUGGCCUGUACUUCCUCUGGCCCUGGCUGAAGAGGGCUAGUGAAACCGUUAAGCCCCUAGGCGAUC\
) } def
/len { sequence length } bind def

/coor [
[38.02478409 359.61639404]
[28.82470894 371.56668091]
[16.94124794 380.85290527]
[3.12140656 386.89135742]
[-11.76609135 389.30242920]
[-26.78540230 387.93453979]
[-40.99240494 382.87371826]
[-53.49402618 374.43807983]
[-63.50441360 363.15786743]
[-70.39430237 349.74218750]
[-73.73058319 335.03436279]
[-73.30353546 319.95895386]
[-69.14001465 305.46356201]
[-61.50173187 292.45944214]
[-50.86883926 281.76400757]
[-37.90972900 274.04956055]
[-23.43902397 269.80111694]
[-8.36636353 269.28564453]
[6.36077356 272.53561401]
[13.12592506 259.14782715]
[6.16656494 246.00608826]
[8.30536270 231.11013794]
[18.92954254 220.20233154]
[34.11493683 217.61198425]
[40.88008881 204.22419739]
[47.64524078 190.83641052]
[54.41039276 177.44862366]
[61.17554474 164.06085205]
[67.94069672 150.67306519]
[74.48120117 137.17410278]
[80.79521942 123.56774139]
[87.10923767 109.96138000]
[83.76293182 98.67391968]
[88.89636993 88.07900238]
[99.82863617 83.70977783]
[106.59378815 70.32199097]
[106.60687256 63.37949753]
[109.77084351 58.35100174]
[114.28427124 56.28864670]
[121.92852783 43.38262177]
[129.57276917 30.47659874]
[127.13760376 17.67599869]
[133.93333435 7.03413200]
[145.78810120 4.05624914]
[153.85932922 -8.58713436]
[161.93057251 -21.23051834]
[170.00180054 -33.87390137]
[178.07302856 -46.51728821]
[186.14427185 -59.16067123]
[194.21549988 -71.80405426]
[202.28674316 -84.44744110]
[196.48799133 -98.84028625]
[200.28926086 -113.88455963]
[212.22888184 -123.79541016]
[227.71582031 -124.76193237]
[240.79504395 -116.41246796]
[246.43731689 -101.95755768]
[242.47308350 -86.95541382]
[230.42665100 -77.17465973]
[214.93013000 -76.37620544]
[206.85888672 -63.73281860]
[198.78765869 -51.08943558]
[190.71641541 -38.44605255]
[182.64518738 -25.80266762]
[174.57394409 -13.15928364]
[166.50271606 -0.51589954]
[158.43147278 12.12748432]
[158.68962097 29.58744621]
[142.47879028 38.12084961]
[134.83454895 51.02687073]
[127.19029999 63.93289566]
[119.98157501 77.08714294]
[113.21642303 90.47492981]
[114.66088104 107.10346985]
[100.71560669 116.27539825]
[94.40158081 129.88175964]
[88.08756256 143.48812866]
[87.27469635 152.79501343]
[81.32848358 157.43821716]
[74.56333160 170.82600403]
[67.79817963 184.21377563]
[61.03302383 197.60156250]
[54.26787186 210.98934937]
[47.50271988 224.37713623]
[54.42497635 238.13897705]
[51.94547653 253.16247559]
[41.22188187 263.72033691]
[26.51370811 265.91299438]
[19.74855614 279.30075073]
[31.10084152 289.22933960]
[39.62666321 301.66964722]
[44.79007721 315.83966064]
[46.26650620 330.84869385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 89]
[20 88]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 77]
[31 76]
[32 75]
[35 73]
[36 72]
[39 71]
[40 70]
[41 69]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
