%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCUGCCCCGCCAGCGCGUCGAGGGAGGGGCCAGCGACACAUGGCCUAGUAACUGUCCGGCCGCGGCGCUGGCUUAAGCC\
) } def
/len { sequence length } bind def

/coor [
[92.23472595 319.47430420]
[83.64643097 306.89810181]
[80.92222595 291.91482544]
[84.53408813 277.12042236]
[93.85625458 265.07812500]
[107.27359772 257.87429810]
[106.12535858 242.91831970]
[104.97711945 227.96232605]
[94.27149963 214.19674683]
[102.02758789 197.62789917]
[100.30733490 182.72686768]
[98.58708191 167.82583618]
[96.86682892 152.92480469]
[92.86966705 146.47819519]
[95.37736511 137.42155457]
[94.22912598 122.46556091]
[93.08088684 107.50957489]
[89.28991699 100.14279938]
[92.18634033 91.96063995]
[91.61179352 76.97164917]
[91.03725433 61.98265457]
[90.46271515 46.99366379]
[86.93291473 38.28437042]
[90.16438293 31.42187500]
[90.16438293 16.42187500]
[82.42708588 2.62170196]
[90.16438293 -10.10556984]
[90.16438293 -25.10556984]
[88.72987366 -40.03681946]
[85.87400818 -54.76244354]
[83.01814270 -69.48806763]
[80.16227722 -84.21369171]
[77.30641174 -98.93931580]
[74.45053864 -113.66493988]
[60.33365250 -120.10645294]
[52.72840500 -133.63198853]
[54.55917358 -149.04067993]
[65.12198639 -160.40759277]
[80.35522461 -163.36190796]
[94.40140533 -156.76762390]
[101.85948181 -143.16038513]
[99.86166382 -127.77246094]
[89.17617035 -116.52081299]
[92.03203583 -101.79518127]
[94.88790131 -87.06955719]
[97.74376678 -72.34393311]
[100.59963226 -57.61830902]
[103.45549774 -42.89268494]
[105.69761658 -41.60890198]
[107.57218170 -39.35812378]
[108.71543121 -36.27426910]
[108.81750488 -32.61690521]
[107.66320801 -28.74957657]
[105.16438293 -25.10556984]
[105.16438293 -10.10556984]
[112.90167999 2.62170196]
[105.16438293 16.42187500]
[105.16438293 31.42187500]
[105.45170593 46.41912079]
[106.02624512 61.40811539]
[106.60079193 76.39710999]
[107.17533112 91.38610077]
[108.03688049 106.36133575]
[109.18511963 121.31732178]
[110.33335876 136.27331543]
[111.76786041 151.20455933]
[113.48811340 166.10559082]
[115.20836639 181.00662231]
[116.92861938 195.90765381]
[126.63198853 204.65612793]
[127.63148499 217.27720642]
[119.93310547 226.81408691]
[121.08134460 241.77008057]
[122.22958374 256.72607422]
[136.58934021 261.79730225]
[147.64050293 272.27545166]
[153.46839905 286.34512329]
[153.06329346 301.56863403]
[146.49540710 315.30847168]
[134.90263367 325.18408203]
[120.29350281 329.48446655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 74]
[7 73]
[8 72]
[10 69]
[11 68]
[12 67]
[13 66]
[15 65]
[16 64]
[17 63]
[19 62]
[20 61]
[21 60]
[22 59]
[24 58]
[25 57]
[27 55]
[28 54]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
