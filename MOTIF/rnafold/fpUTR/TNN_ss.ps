%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUACCAAGGUCUGCGGCAGGAGGAGACCGGCUCACAGGAGCAGCAGCAUUGGAAGAGGCACCCAGCAGCCUCCCAGGCAUCCUGGAGGGUCUGCUCCCUGUCUUUCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[62.29692078 443.68899536]
[49.74312592 453.28991699]
[34.08863068 451.11914062]
[24.62096405 438.46453857]
[26.95712662 422.83389282]
[39.71111298 413.50054932]
[41.77141953 398.64270020]
[32.60894775 386.95574951]
[34.48673248 371.85845947]
[46.80720139 362.32723999]
[48.86750793 347.46942139]
[38.85376358 340.33596802]
[32.83565521 329.53149414]
[32.03273010 317.11724854]
[36.66270447 305.49246216]
[45.88724136 296.93063354]
[57.96305466 293.13494873]
[60.83871460 278.41317749]
[63.71437454 263.69140625]
[66.59003448 248.96963501]
[69.46569061 234.24786377]
[72.34135437 219.52609253]
[75.01389313 204.76609802]
[77.48281097 189.97067261]
[71.94587708 176.14346313]
[81.84908295 163.80502319]
[84.31800842 149.00961304]
[86.78692627 134.21418762]
[89.25584412 119.41876984]
[91.72476196 104.62335205]
[89.65230560 99.64129639]
[90.60028076 93.85773468]
[94.75889587 89.09027863]
[98.03910828 74.45333862]
[101.31932831 59.81639099]
[100.13863373 50.61544418]
[104.89685059 44.82396317]
[108.57913208 30.28296089]
[112.26141357 15.74195671]
[115.94369507 1.20095229]
[119.62597656 -13.34005165]
[123.10755920 -27.93041229]
[126.38777161 -42.56735611]
[113.23713684 -35.35205078]
[98.48192596 -38.05089569]
[88.73674011 -49.45402908]
[88.37024689 -64.44955444]
[97.54673767 -76.31513214]
[112.15248871 -79.73156738]
[125.63990784 -73.16729736]
[131.96267700 -59.56559372]
[137.98809814 -73.30219269]
[144.01353455 -87.03879547]
[150.03897095 -100.77539062]
[149.67970276 -107.60278320]
[152.48683167 -112.74517822]
[156.79339600 -115.08831787]
[163.56640625 -128.47213745]
[170.33940125 -141.85594177]
[177.11239624 -155.23976135]
[183.88540649 -168.62356567]
[176.68316650 -182.36793518]
[178.96847534 -197.71580505]
[189.86257935 -208.76559448]
[205.17648315 -211.26846313]
[219.02165222 -204.26199341]
[226.07435608 -190.44030762]
[223.62269592 -175.11813354]
[212.60935974 -164.18716431]
[197.26921082 -161.85057068]
[190.49621582 -148.46675110]
[183.72320557 -135.08294678]
[176.95021057 -121.69913483]
[170.17721558 -108.31531525]
[163.77555847 -94.74996185]
[157.75013733 -81.01335907]
[151.72470093 -67.27676392]
[145.69926453 -53.54016113]
[141.02471924 -39.28713989]
[137.74450684 -24.65019608]
[139.37500000 -17.33422852]
[134.16697693 -9.65776920]
[130.48469543 4.88323450]
[126.80242157 19.42423820]
[123.12013245 33.96524429]
[119.43785095 48.50624847]
[115.95627594 63.09660721]
[112.67605591 77.73355103]
[109.39584351 92.37049866]
[106.52017975 107.09226990]
[104.05126190 121.88768768]
[101.58234406 136.68310547]
[99.11342621 151.47853088]
[96.64450836 166.27394104]
[102.00484467 181.15942383]
[92.27822876 192.43959045]
[89.80931091 207.23501587]
[91.49507904 216.35694885]
[87.06312561 222.40174866]
[84.18746185 237.12351990]
[81.31180573 251.84529114]
[78.43614197 266.56707764]
[75.56048584 281.28884888]
[72.68482971 296.01062012]
[85.39340210 308.78012085]
[87.97660065 326.45263672]
[79.60169983 342.05148315]
[63.72533798 349.52972412]
[61.66503525 364.38754272]
[70.92715454 376.91156006]
[68.62606049 391.95016479]
[56.62924957 400.70300293]
[54.56894684 415.56085205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 113]
[7 112]
[10 109]
[11 108]
[17 104]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 97]
[24 96]
[26 94]
[27 93]
[28 92]
[29 91]
[30 90]
[33 89]
[34 88]
[35 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[42 80]
[43 79]
[51 78]
[52 77]
[53 76]
[54 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
