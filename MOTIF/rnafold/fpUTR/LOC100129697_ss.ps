%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGAAGCCGCACCCUGGCUGGGGCCACAAGCCUGACAGCUACCGACAAGCCCCCACCCACAGGAGCACGCGACGUGCUCUCUUUUCAAGGGAAAGGUUUUUCUUCCUGGGCCCUGGAAUGGGCCUGAAGUCAGCCGGCCUCAGCCCACAGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[27.11549377 500.77395630]
[23.88095665 515.42108154]
[32.59376526 528.60675049]
[29.34914780 544.07440186]
[16.07207680 552.64733887]
[0.63960093 549.23931885]
[-7.79246283 535.87237549]
[-4.22152185 520.47680664]
[9.23384857 512.18652344]
[12.46838570 497.53942871]
[4.26365423 485.16128540]
[7.33528090 470.26095581]
[20.37422752 461.73901367]
[23.60876465 447.09191895]
[26.84329987 432.44479370]
[30.07783699 417.79769897]
[33.31237411 403.15057373]
[36.54690933 388.50347900]
[39.34598541 373.76696777]
[41.70713806 358.95394897]
[44.06829071 344.14096069]
[46.42944336 329.32794189]
[48.79059219 314.51495361]
[51.15174484 299.70196533]
[53.51289749 284.88894653]
[55.87405014 270.07595825]
[58.23520279 255.26295471]
[60.59635544 240.44995117]
[54.22198105 234.13714600]
[51.45481110 225.45820618]
[53.04611969 216.34864807]
[58.75985336 208.90263367]
[67.39776611 204.89166260]
[70.63230896 190.24455261]
[68.99509430 182.99633789]
[74.07814789 175.34135437]
[77.60144043 160.76101685]
[81.12473297 146.18066406]
[84.64801788 131.60032654]
[65.29485321 115.18717957]
[61.10503387 88.24226379]
[46.71644211 84.00335693]
[32.32784653 79.76444244]
[19.40165138 88.56486511]
[3.84807277 86.94615173]
[-6.98896265 75.67261505]
[-7.99253941 60.06726837]
[1.31120169 47.49848175]
[16.52931786 43.90085220]
[30.47628021 50.97306824]
[36.56676102 65.37584686]
[50.95535278 69.61476135]
[65.34394836 73.85367584]
[76.31088257 63.62008667]
[73.07634735 48.97297668]
[69.84181213 34.32587051]
[54.80225372 32.81948471]
[40.98337173 26.74650955]
[29.73343086 16.71320534]
[22.14579582 3.71155787]
[18.95267677 -10.97879887]
[20.45449257 -25.91651917]
[26.49164009 -39.63996506]
[36.46136856 -50.81022263]
[49.37792206 -58.34173203]
[46.14338684 -72.98883820]
[42.90884781 -87.63594818]
[39.67431259 -102.28305817]
[36.43977356 -116.93016052]
[33.20523834 -131.57727051]
[29.97070122 -146.22438049]
[26.73616409 -160.87149048]
[17.41658783 -175.03417969]
[28.44588089 -187.91017151]
[43.87187958 -180.87632751]
[41.38327026 -164.10601807]
[44.61780930 -149.45892334]
[47.85234451 -134.81181335]
[51.08688354 -120.16470337]
[54.32141876 -105.51759338]
[57.55595779 -90.87048340]
[60.79049301 -76.22337341]
[64.02503204 -61.57627106]
[78.91208649 -60.18465805]
[92.65872955 -54.25171661]
[103.91373444 -44.34691238]
[111.56653595 -31.43081856]
[114.85684967 -16.76192474]
[113.45017242 -1.77405334]
[107.47172546 12.06381416]
[97.49545288 23.39150047]
[84.48891449 31.09133339]
[87.72345734 45.73844147]
[90.95799255 60.38554764]
[103.55403900 59.29156494]
[115.94848633 62.12778091]
[126.93792725 68.66368866]
[139.12522888 59.91899872]
[151.31253052 51.17430878]
[151.26983643 35.65729141]
[160.38325500 23.09841347]
[175.14846802 18.32681656]
[189.88795471 23.17728043]
[198.93409729 35.78470230]
[198.80844116 51.30126572]
[189.55934143 63.76054382]
[174.74322510 68.37168121]
[160.05722046 63.36161041]
[147.86991882 72.10630035]
[135.68261719 80.85099792]
[140.20498657 95.15303040]
[155.20425415 95.30121613]
[170.20352173 95.44940186]
[185.20278931 95.59758759]
[200.20205688 95.74577332]
[215.20132446 95.89395905]
[226.30961609 84.65201569]
[242.11389160 84.64105225]
[253.23777771 95.86757660]
[253.08164978 111.67109680]
[241.73812866 122.67565918]
[225.93714905 122.35244751]
[215.05313110 110.89322662]
[200.05386353 110.74504089]
[185.05459595 110.59685516]
[170.05532837 110.44866943]
[155.05606079 110.30048370]
[140.05679321 110.15229797]
[133.17546082 121.94264984]
[123.14416504 130.42539978]
[111.33507538 134.88453674]
[99.22836304 135.12361145]
[95.70507050 149.70396423]
[92.18178558 164.28430176]
[88.65849304 178.86463928]
[85.27941132 193.47908020]
[82.04487610 208.12619019]
[89.80661774 228.06312561]
[75.40935516 242.81111145]
[73.04820251 257.62411499]
[70.68704987 272.43710327]
[68.32589722 287.25012207]
[65.96474457 302.06311035]
[63.60359192 316.87609863]
[61.24244308 331.68911743]
[58.88129044 346.50210571]
[56.52013779 361.31509399]
[54.15898514 376.12811279]
[56.06989288 381.10012817]
[55.86659622 385.82574463]
[54.00722504 389.52996826]
[51.19401932 391.73800659]
[47.95948410 406.38513184]
[44.72494507 421.03222656]
[41.49040985 435.67935181]
[38.25587082 450.32644653]
[35.02133560 464.97354126]
[43.25888062 478.19403076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[13 157]
[14 156]
[15 155]
[16 154]
[17 153]
[18 152]
[19 148]
[20 147]
[21 146]
[22 145]
[23 144]
[24 143]
[25 142]
[26 141]
[27 140]
[28 139]
[33 137]
[34 136]
[36 135]
[37 134]
[38 133]
[39 132]
[41 53]
[42 52]
[43 51]
[54 94]
[55 93]
[56 92]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[97 110]
[98 109]
[99 108]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
