%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGCCAGCGAGAGGGGAGAAACAGAUUCACACCCAGGGGCCUCCGGGCAGGGCCCACGGGACUCAGGCCGUGUCCCGCUUGGA\
) } def
/len { sequence length } bind def

/coor [
[97.39823914 110.62306213]
[92.67195129 109.35269165]
[88.63364410 105.94288635]
[73.78631592 103.80816650]
[58.93899918 101.67344666]
[48.02384567 108.81954193]
[35.57994080 106.58779144]
[28.30918884 96.74306488]
[13.54752064 94.07977295]
[8.68977928 99.83332062]
[2.26262116 103.65473938]
[-5.00939989 105.15323639]
[-12.31941891 104.19766235]
[-18.86778259 100.92723846]
[-23.94951630 95.73248291]
[-27.03019142 89.20888519]
[-27.80201530 82.08877563]
[-41.66020966 76.34851837]
[-55.51840210 70.60826874]
[-71.42894745 77.61170197]
[-87.21551514 71.17329407]
[-93.44050598 55.66143799]
[-107.49475098 50.41947556]
[-121.54899597 45.17751312]
[-136.68084717 50.50728226]
[-150.20544434 41.87796021]
[-151.74784851 25.90922546]
[-140.12487793 14.85092258]
[-124.25267029 17.18603516]
[-116.30702972 31.12326622]
[-102.25278473 36.36523056]
[-88.19853973 41.60719299]
[-77.21410370 34.62318420]
[-64.01995850 35.32254028]
[-53.52859879 43.67259979]
[-49.77814865 56.75007629]
[-35.91995621 62.49032974]
[-22.06176376 68.23058319]
[0.16267581 61.68755341]
[16.21081924 79.31809998]
[30.97248650 81.98139954]
[47.01097870 75.10358429]
[61.07371902 86.82611847]
[75.92104340 88.96084595]
[90.76836395 91.09556580]
[105.70866394 92.43254089]
[120.69910431 92.96791840]
[135.68954468 93.50330353]
[150.67999268 94.03868866]
[165.67042542 94.57407379]
[180.66087341 95.10945892]
[195.65132141 95.64484406]
[204.56881714 92.77482605]
[211.16452026 96.47637177]
[226.12629700 97.54646301]
[241.08807373 98.61654663]
[251.46562195 90.70997620]
[264.03704834 92.04830933]
[271.99157715 101.34925842]
[286.90563965 102.95268250]
[301.81967163 104.55610657]
[316.73373413 106.15953827]
[331.64779663 107.76296234]
[341.95791626 96.16635895]
[357.12243652 92.87753296]
[371.31033325 99.16110992]
[379.06604004 112.60092926]
[377.40734863 128.02909851]
[366.97204590 139.51316833]
[351.77270508 142.63729858]
[337.65383911 136.20018005]
[330.04437256 122.67701721]
[315.13031006 121.07359314]
[300.21624756 119.47016144]
[285.30221558 117.86673737]
[270.38815308 116.26331329]
[254.88117981 124.26777649]
[240.01799011 113.57833099]
[225.05621338 112.50823975]
[210.09442139 111.43815613]
[195.11593628 110.63529205]
[180.12548828 110.09990692]
[165.13504028 109.56452179]
[150.14460754 109.02913666]
[135.15415955 108.49375153]
[120.16371918 107.95836639]
[105.17327881 107.42298126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[8 41]
[9 40]
[17 38]
[18 37]
[19 36]
[22 32]
[23 31]
[24 30]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[54 80]
[55 79]
[56 78]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
