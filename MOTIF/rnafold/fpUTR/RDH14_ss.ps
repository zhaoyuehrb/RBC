%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUCAGGGGCCGACCCGCCGCGCCCCAGCGUUCUCCGCGUACAGGUGGUCUCUUGGGUUCCGGUAAGGCGGCGGCUGCGGAACUCCCGUGGAGGGGCCGGUGGGCCCUCGGGCCUGACG\
) } def
/len { sequence length } bind def

/coor [
[64.33332825 584.03369141]
[51.32976151 573.15509033]
[58.18346405 557.64825439]
[58.95564270 542.66815186]
[59.72782516 527.68804932]
[60.50000763 512.70788574]
[61.27219009 497.72781372]
[62.04436874 482.74768066]
[62.81655121 467.76757812]
[54.91790009 458.50802612]
[55.51302338 445.94891357]
[64.82900238 436.91674805]
[65.98663330 421.96148682]
[67.14426422 407.00622559]
[68.30189514 392.05096436]
[68.88114166 377.06216431]
[68.88114166 362.06216431]
[68.88114166 347.06216431]
[68.88114166 332.06216431]
[68.88114166 317.06216431]
[68.88114166 302.06216431]
[68.88114166 287.06216431]
[65.69703674 280.29321289]
[69.07923889 271.67718506]
[69.46546173 256.68215942]
[69.85167694 241.68713379]
[70.23789978 226.69210815]
[70.62411499 211.69706726]
[59.21303940 221.43295288]
[44.21687698 221.77224731]
[32.37714005 212.56243896]
[29.01637459 197.94377136]
[35.64540482 184.48806763]
[49.28416061 178.24432373]
[63.80134964 182.01940918]
[72.67059326 194.11560059]
[75.73887634 179.43276978]
[78.80715942 164.74993896]
[81.87544250 150.06710815]
[84.94371796 135.38426208]
[88.01200104 120.70143127]
[75.72361755 110.36706543]
[71.94593811 93.17353058]
[80.05043793 75.81916046]
[72.32855225 62.95944214]
[64.60665894 50.09972000]
[56.88476562 37.24000168]
[41.49225235 33.65586090]
[33.21352005 20.19338989]
[36.96019745 4.83962965]
[50.50944519 -3.29630470]
[65.82273865 0.61249274]
[73.81496429 14.24700165]
[69.74448395 29.51811028]
[77.46637726 42.37783051]
[85.18827057 55.23754883]
[92.91016388 68.09726715]
[107.90892029 68.29039001]
[115.95935822 55.63375854]
[124.00980377 42.97712708]
[132.06024170 30.32049370]
[140.11068726 17.66386032]
[148.16113281 5.00722599]
[156.21157837 -7.64940739]
[152.88780212 -16.69869041]
[154.15521240 -26.11539078]
[159.59223938 -33.73782349]
[167.83529663 -37.87731171]
[176.91868591 -37.69162750]
[185.92189026 -49.68921280]
[194.92510986 -61.68680191]
[196.35281372 -78.02368164]
[211.32716370 -84.70954132]
[224.44384766 -74.86653900]
[222.20953369 -58.62031555]
[206.92269897 -52.68358994]
[197.91947937 -40.68600082]
[188.91627502 -28.68841171]
[188.44366455 -8.12069988]
[168.86820984 0.40103558]
[160.81776428 13.05766869]
[152.76731873 25.71430206]
[144.71687317 38.37093735]
[136.66644287 51.02756882]
[128.61599731 63.68420410]
[120.56555176 76.34083557]
[128.77041626 97.57210541]
[120.41152191 116.73883820]
[102.69483948 123.76971436]
[99.62655640 138.45254517]
[96.55827332 153.13537598]
[93.48999023 167.81822205]
[90.42171478 182.50105286]
[87.35343170 197.18388367]
[85.61914062 212.08329773]
[85.23292542 227.07832336]
[84.84670258 242.07334900]
[84.46048737 257.06835938]
[84.07426453 272.06341553]
[83.88114166 287.06216431]
[83.88114166 302.06216431]
[83.88114166 317.06216431]
[83.88114166 332.06216431]
[83.88114166 347.06216431]
[83.88114166 362.06216431]
[83.88114166 377.06216431]
[86.62401581 381.78314209]
[87.14408875 386.59423828]
[85.79902649 390.60482788]
[83.25715637 393.20858765]
[82.09952545 408.16384888]
[80.94189453 423.11914062]
[79.78426361 438.07440186]
[88.13668823 454.42343140]
[77.79666138 468.53976440]
[77.02448273 483.51986694]
[76.25229645 498.49996948]
[75.48011780 513.48010254]
[74.70793915 528.46020508]
[73.93575287 543.44030762]
[73.16357422 558.42041016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[9 115]
[12 113]
[13 112]
[14 111]
[15 110]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[22 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[44 57]
[45 56]
[46 55]
[47 54]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
