%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUACUGGGACAUGCGCGUUCCGGCCGAAGGGGGGUAAAUUUCCCAACUCCAGGAAUUUGUGGCGGAGAGGGCAAAUAACUGCGGCUCUCCCGGCGCCCCGAUGCUCGCACC\
) } def
/len { sequence length } bind def

/coor [
[115.52288055 133.27882385]
[107.88381958 136.32308960]
[99.66202545 137.61502075]
[91.25916290 137.04705811]
[83.09558105 134.60362244]
[75.58933258 130.36402893]
[69.13478851 124.50059509]
[64.08195496 117.27196503]
[51.89912033 126.02288818]
[39.71628571 134.77380371]
[27.53345490 143.52471924]
[15.35062122 152.27565002]
[3.16778779 161.02656555]
[-9.01504517 169.77748108]
[-11.32424164 185.41215515]
[-24.06211090 194.76748657]
[-39.67150116 192.29312134]
[-48.89163589 179.45706177]
[-46.25237656 163.87469482]
[-33.31954575 154.79078674]
[-17.76596451 157.59465027]
[-5.58313084 148.84373474]
[6.59970236 140.09280396]
[18.78253555 131.34188843]
[30.96536827 122.59097290]
[43.14820099 113.84004974]
[55.33103561 105.08913422]
[56.14311981 90.11112976]
[44.97784042 80.09431458]
[27.59692574 81.39360046]
[14.85944366 69.99440002]
[14.25387478 53.24789429]
[2.82144427 43.53709793]
[-12.71678543 44.63307953]
[-24.17256165 34.62209702]
[-25.12165642 19.80201340]
[-36.55408859 10.09121990]
[-47.98651886 0.38042551]
[-63.37121964 3.18132448]
[-76.93128967 -4.60702705]
[-82.26408386 -19.30720711]
[-76.85162354 -33.97824097]
[-63.24949646 -41.69291306]
[-47.88021851 -38.80859375]
[-38.00069046 -26.68717003]
[-38.27572632 -11.05200577]
[-26.84329414 -1.34121108]
[-15.41086292 8.36958313]
[-0.63246703 6.90855312]
[11.09997749 16.59382057]
[12.53223896 32.10466766]
[23.96467018 41.81546021]
[36.61408615 38.98421478]
[48.74939728 44.06967926]
[55.80787659 55.40485001]
[54.99465942 68.92903900]
[66.15993500 78.94585419]
[80.17928314 66.56311798]
[97.88142395 62.17412567]
[115.15396118 66.35505676]
[128.18547058 77.74053955]
[134.30619812 93.42658234]
[149.30068970 93.83277130]
[164.29519653 94.23896027]
[179.28968811 94.64514923]
[194.28831482 94.84826660]
[209.28831482 94.84826660]
[224.09071350 92.42153931]
[238.30551147 87.63201141]
[252.52030945 82.84249115]
[266.73510742 78.05297089]
[280.94989014 73.26344299]
[295.16470337 68.47392273]
[306.92987061 54.38899994]
[323.96508789 58.35993195]
[338.04498291 53.18723679]
[352.12484741 48.01454163]
[358.53259277 33.56752396]
[373.30899048 27.96093559]
[387.68746948 34.52106476]
[393.13751221 49.35590744]
[386.42572021 63.66421127]
[371.53408813 68.95711517]
[357.29754639 62.09442902]
[343.21765137 67.26712799]
[329.13778687 72.43981934]
[323.71765137 83.34722900]
[311.92202759 87.72703552]
[299.95422363 82.68872070]
[285.73944092 87.47824097]
[271.52462769 92.26776886]
[257.30984497 97.05728912]
[243.09503174 101.84680939]
[228.88023376 106.63633728]
[226.25329590 121.40451813]
[237.94448853 130.80216980]
[249.63569641 140.19981384]
[265.91598511 142.17060852]
[272.09960938 157.35925293]
[261.82537842 170.14096069]
[245.66255188 167.36701965]
[240.23803711 151.89102173]
[228.54684448 142.49336243]
[216.85563660 133.09571838]
[210.86145020 125.40511322]
[208.44171143 117.21343231]
[209.28831482 109.84826660]
[194.28831482 109.84826660]
[187.50950623 113.03737640]
[178.88349915 109.63964844]
[163.88900757 109.23345947]
[148.89450073 108.82727051]
[133.90000916 108.42108154]
[131.60258484 115.90216064]
[127.65516663 122.77438354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[28 57]
[29 56]
[32 52]
[33 51]
[36 48]
[37 47]
[38 46]
[62 113]
[63 112]
[64 111]
[65 110]
[66 108]
[67 107]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[75 86]
[76 85]
[77 84]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
