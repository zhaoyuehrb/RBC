%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGUGGUUGCCCCCUCCCUCUCCUGAGAUGUCAGGAAGGAGGGGGCCACCUGUGUCCUCCACAGGGGCCCCCCGAAGCCUGGGGACUCCCAGCCCCAGAGCUCCGAGGCGGAGGAGGUGCUGACAGGUGCUCCGAGAG\
) } def
/len { sequence length } bind def

/coor [
[58.21946716 151.56739807]
[65.50025177 138.45289612]
[78.89223480 131.69532776]
[64.50836945 135.95025635]
[50.12450409 140.20516968]
[35.74063492 144.46009827]
[21.35676956 148.71502686]
[6.97290468 152.96995544]
[3.27631998 156.87745667]
[-1.12021196 158.73509216]
[-5.29706812 158.62640381]
[-8.50756836 156.99581909]
[-23.14196396 160.28739929]
[-37.77635956 163.57896423]
[-52.41075134 166.87054443]
[-67.04515076 170.16212463]
[-81.67954254 173.45370483]
[-96.31393433 176.74528503]
[-110.94833374 180.03686523]
[-125.58272552 183.32844543]
[-130.91316223 192.92372131]
[-140.46949768 197.85987854]
[-150.94094849 196.70150757]
[-158.84890747 190.07893372]
[-173.61457825 192.71997070]
[-188.38024902 195.36099243]
[-203.14591980 198.00202942]
[-217.91159058 200.64305115]
[-232.67724609 203.28407288]
[-244.85812378 214.26397705]
[-260.37185669 208.94828796]
[-263.25921631 192.80532837]
[-250.54997253 182.44158936]
[-235.31828308 188.51841736]
[-220.55261230 185.87738037]
[-205.78694153 183.23635864]
[-191.02127075 180.59532166]
[-176.25559998 177.95429993]
[-161.48992920 175.31327820]
[-147.75157166 161.77230835]
[-128.87429810 168.69404602]
[-114.23991394 165.40246582]
[-99.60551453 162.11088562]
[-84.97112274 158.81930542]
[-70.33672333 155.52772522]
[-55.70233154 152.23616028]
[-41.06793594 148.94458008]
[-26.43354034 145.65299988]
[-11.79914570 142.36141968]
[2.71797776 138.58609009]
[17.10184288 134.33116150]
[31.48571014 130.07623291]
[45.86957550 125.82131195]
[60.25344086 121.56638336]
[74.63730621 117.31145477]
[70.70890808 90.66925049]
[89.30009460 71.14477539]
[84.72800446 56.85855865]
[80.15592194 42.57233810]
[75.58383179 28.28612137]
[71.01174927 13.99990368]
[57.46548843 5.40464640]
[55.88290024 -10.56015778]
[67.47800446 -21.64767647]
[83.35603333 -19.35251617]
[91.33672333 -5.43532515]
[85.29796600 9.42781734]
[89.87004852 23.71403503]
[94.44213867 38.00025177]
[99.01422882 52.28647232]
[103.58631134 66.57268524]
[117.76789093 71.45969391]
[130.17036438 63.02295685]
[142.47875977 54.44954300]
[154.69155884 45.74049759]
[166.80728149 36.89689255]
[178.82443237 27.91980934]
[185.24978638 13.46210098]
[200.07672119 12.04386806]
[212.09387207 3.06678367]
[224.11102295 -5.91030121]
[236.02813721 -15.01976681]
[247.84376526 -24.26049995]
[259.65939331 -33.50123215]
[271.47500610 -42.74196243]
[283.29061890 -51.98269653]
[295.10623169 -61.22342682]
[294.42251587 -76.72543335]
[303.00927734 -89.65010071]
[317.56475830 -95.02763367]
[332.49206543 -90.79026031]
[342.05133057 -78.56733704]
[342.56686401 -63.05882263]
[333.84039307 -50.22806549]
[319.22741699 -45.00875092]
[304.34698486 -49.40781021]
[292.53134155 -40.16707611]
[280.71572876 -30.92634392]
[268.90011597 -21.68561172]
[257.08450317 -12.44487953]
[245.26887512 -3.20414734]
[241.91125488 3.44675517]
[233.08811951 6.10685110]
[221.07095337 15.08393574]
[209.05380249 24.06101990]
[203.48799133 37.87662888]
[187.80151367 39.93696213]
[175.78436279 48.91404724]
[172.28044128 55.48904419]
[163.40060425 57.95330429]
[151.18780518 66.66234589]
[147.53927612 73.15821838]
[138.60710144 75.42543793]
[126.20462799 83.86217499]
[129.26588440 109.40951538]
[111.86334229 128.32337952]
[121.61766815 139.71868896]
[131.37200928 151.11399841]
[141.12634277 162.50929260]
[149.15069580 167.04069519]
[150.96701050 174.26628113]
[160.46687317 185.87458801]
[169.96673584 197.48289490]
[179.46658325 209.09120178]
[194.98959351 214.37971497]
[197.90522766 230.51759338]
[185.21414185 240.90356445]
[169.97183228 234.85342407]
[167.85829163 218.59104919]
[158.35842896 206.98274231]
[148.85856628 195.37445068]
[139.35871887 183.76614380]
[129.73103333 172.26362610]
[119.97669983 160.86833191]
[110.22236633 149.47302246]
[100.46803284 138.07771301]
[108.02853394 151.03297424]
[107.00328064 165.99789429]
[97.74658203 177.80101013]
[83.45729065 182.36349487]
[69.07339478 178.10865784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[72 114]
[73 113]
[74 111]
[75 110]
[76 108]
[77 107]
[79 105]
[80 104]
[81 103]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[116 136]
[117 135]
[118 134]
[119 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
