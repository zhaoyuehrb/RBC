%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUACGUCGGCGCGUAACGAGGGGGUGCGUGUGAGGUCAUCGCGCGGGCGGGCGGGCGGGGUCUGGCGGUUUGAACGAGACGAAGACGGAACCGGAGCCGGUUGCGGGCAGUGGACGCGGUUCUGCCGAGAGCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[137.61547852 337.60162354]
[134.93391418 322.84326172]
[140.50906372 308.91784668]
[152.63452148 300.08758545]
[167.59895325 299.05523682]
[180.82188416 306.13653564]
[175.55126953 292.09301758]
[170.28063965 278.04949951]
[165.01002502 264.00598145]
[147.94363403 252.47998047]
[151.44445801 231.39381409]
[145.24108887 217.73664856]
[132.93296814 209.34857178]
[134.27043152 193.58399963]
[128.06706238 179.92683411]
[121.86367798 166.26966858]
[115.66030121 152.61251831]
[109.45692444 138.95535278]
[103.25354767 125.29818726]
[97.67285919 125.40016174]
[92.20361328 124.28579712]
[87.10771179 122.00846863]
[82.62918091 118.67721558]
[78.98249054 114.45157623]
[76.34226227 109.53388977]
[74.83492279 104.15965271]
[59.97067642 102.14615631]
[45.25679779 107.96099091]
[33.68331528 98.58528900]
[18.81906700 96.57179260]
[3.95482087 94.55829620]
[-10.90942574 92.54479218]
[-25.77367210 90.53129578]
[-40.63792038 88.51779938]
[-55.50216675 86.50429535]
[-69.08609009 95.03990173]
[-84.18073273 89.60563660]
[-89.20677948 74.37020111]
[-80.30867004 61.02091980]
[-64.31227875 59.79822159]
[-53.48866653 71.64005280]
[-38.62442017 73.65354919]
[-23.76017380 75.66704559]
[-8.89592648 77.68054962]
[5.96831989 79.69404602]
[20.83256531 81.70754242]
[35.69681168 83.72104645]
[49.34750366 77.76219177]
[61.98417664 87.28191376]
[76.84842682 89.29541016]
[85.94852448 78.71292114]
[99.25598145 74.50431061]
[103.24653625 60.04486847]
[107.23708344 45.58542633]
[99.26429749 34.66843414]
[99.06453705 21.34667587]
[106.48593903 10.51748657]
[118.61623383 6.03192568]
[122.93022156 -8.33433628]
[127.24420929 -22.70059967]
[121.81812286 -34.46126175]
[125.76643372 -46.37411880]
[136.43701172 -52.18079376]
[141.07226562 -66.44664001]
[145.70751953 -80.71248627]
[150.34277344 -94.97834015]
[139.26380920 -109.24468994]
[138.90536499 -127.14792633]
[149.22291565 -141.59210205]
[165.97737122 -146.96366882]
[169.96791077 -161.42311096]
[173.95846558 -175.88255310]
[177.94902039 -190.34199524]
[171.31408691 -204.94874573]
[178.72537231 -219.17732239]
[194.49758911 -222.11277771]
[206.53163147 -211.50328064]
[205.59600830 -195.48753357]
[192.40846252 -186.35144043]
[188.41790771 -171.89199829]
[184.42736816 -157.43255615]
[180.43681335 -142.97311401]
[189.38880920 -134.63699341]
[193.94369507 -123.20629120]
[193.16914368 -110.85326385]
[187.15203857 -99.95411682]
[176.99366760 -92.63189697]
[164.60861206 -90.34308624]
[159.97335815 -76.07723236]
[155.33810425 -61.81138611]
[150.70285034 -47.54553986]
[155.29943848 -30.64574623]
[141.61047363 -18.38660812]
[137.29647827 -4.02034664]
[132.98249817 10.34591579]
[141.57948303 24.75694847]
[137.04309082 41.26208496]
[121.69652557 49.57597733]
[117.70597839 64.03542328]
[113.71542358 78.49486542]
[125.42791748 97.99877930]
[116.91070557 119.09481049]
[123.11408234 132.75196838]
[129.31745911 146.40913391]
[135.52084351 160.06629944]
[141.72421265 173.72346497]
[147.92759705 187.38063049]
[160.67941284 196.74554443]
[158.89823914 211.53326416]
[165.10162354 225.19042969]
[174.43446350 227.33430481]
[181.59611511 233.48063660]
[185.02873230 242.12300110]
[184.06494141 251.23284912]
[179.05354309 258.73535156]
[184.32417297 272.77886963]
[189.59478760 286.82238770]
[194.86541748 300.86590576]
[201.52488708 314.30657959]
[209.50537109 327.00744629]
[217.48585510 339.70831299]
[225.46633911 352.40917969]
[233.44680786 365.11004639]
[241.42729187 377.81088257]
[249.40777588 390.51174927]
[264.15145874 397.69201660]
[265.03494263 414.06735229]
[251.14938354 422.79220581]
[236.77905273 414.89123535]
[236.70690918 398.49224854]
[228.72642517 385.79138184]
[220.74595642 373.09051514]
[212.76547241 360.38964844]
[204.78498840 347.68878174]
[196.80450439 334.98791504]
[188.82402039 322.28704834]
[186.44764709 337.09762573]
[176.56085205 348.37820435]
[162.18974304 352.67605591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 118]
[7 117]
[8 116]
[9 115]
[11 110]
[12 109]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[52 100]
[53 99]
[54 98]
[58 95]
[59 94]
[60 93]
[63 91]
[64 90]
[65 89]
[66 88]
[70 82]
[71 81]
[72 80]
[73 79]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
