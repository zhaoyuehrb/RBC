%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCGCUAUAAAACCCAGGCCGGCAGGAUCGCUGCACCCGCGGCGGCCUCCUCGGUGCGCGACCCCCGGCUCAGAGGACUCUUUGCUGUCCCGCAAG\
) } def
/len { sequence length } bind def

/coor [
[90.74908447 152.74189758]
[86.11383057 167.00773621]
[81.47857666 181.27359009]
[82.33442688 198.20591736]
[66.30073547 203.71566772]
[56.56775665 189.83383179]
[67.21273041 176.63833618]
[71.84798431 162.37248230]
[76.48323822 148.10664368]
[66.90850067 142.09797668]
[58.80847931 134.21324158]
[52.54413986 124.80379486]
[48.39465332 114.28897858]
[46.54493713 103.13738251]
[47.07742691 91.84597015]
[49.96839142 80.91793823]
[55.08899307 70.84029388]
[62.21104050 62.06213760]
[71.01713562 54.97467041]
[81.11483765 49.89373398]
[77.84268951 35.25498581]
[74.57054138 20.61623383]
[71.29839325 5.97748137]
[68.02624512 -8.66127014]
[64.75409698 -23.30002213]
[54.22095871 -30.94641685]
[51.87237930 -43.33848572]
[58.44404221 -53.62842941]
[55.63331985 -68.36273956]
[50.87289429 -76.37498474]
[52.97336960 -83.60357666]
[50.62685013 -98.41890717]
[48.28033447 -113.23423004]
[45.93381882 -128.04956055]
[41.42741013 -136.20738220]
[43.75390244 -143.36642456]
[41.87390518 -158.24815369]
[39.99390793 -173.12986755]
[38.11390686 -188.01159668]
[33.86596680 -196.30694580]
[36.41618347 -203.38937378]
[35.00455856 -218.32281494]
[26.00288582 -231.33358765]
[32.50810623 -244.73252869]
[31.09648132 -259.66595459]
[18.76083946 -269.54559326]
[17.10725784 -285.26315308]
[27.11677551 -297.49365234]
[42.85092545 -298.98095703]
[54.97491074 -288.84268188]
[56.29579163 -273.09368896]
[46.02991104 -261.07757568]
[47.44153595 -246.14414978]
[56.34223938 -234.20150757]
[49.93798828 -219.73443604]
[51.34961319 -204.80101013]
[52.99562836 -189.89158630]
[54.87562561 -175.00987244]
[56.75562668 -160.12814331]
[58.63562393 -145.24642944]
[60.74914169 -130.39607239]
[63.09565735 -115.58074951]
[65.44217682 -100.76541901]
[67.78869629 -85.95009613]
[70.36763000 -71.17345428]
[73.17835236 -56.43914795]
[85.35149384 -43.90661240]
[79.39285278 -26.57217026]
[82.66500092 -11.93341827]
[85.93714905 2.70533276]
[89.20929718 17.34408379]
[92.48144531 31.98283577]
[95.75359344 46.62158585]
[118.58695221 49.78235245]
[137.97586060 62.24922943]
[150.32725525 81.71190643]
[153.35221863 104.56365967]
[146.49020386 126.56968689]
[158.34252930 135.76329041]
[170.19485474 144.95689392]
[182.04718018 154.15049744]
[196.90998840 149.69223022]
[211.54360962 154.85330200]
[220.32110596 167.64921570]
[219.86735535 183.15965271]
[210.35684204 195.42054749]
[195.44653320 199.71733093]
[180.86975098 194.39779663]
[172.23158264 181.50743103]
[172.85357666 166.00282288]
[161.00125122 156.80921936]
[149.14892578 147.61561584]
[137.29660034 138.42201233]
[132.51304626 142.54631042]
[127.27716064 146.07867432]
[121.66176605 148.96994019]
[115.74499512 151.17990112]
[109.60916138 152.67779541]
[103.33964539 153.44281006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[28 66]
[29 65]
[31 64]
[32 63]
[33 62]
[34 61]
[36 60]
[37 59]
[38 58]
[39 57]
[41 56]
[42 55]
[44 53]
[45 52]
[78 93]
[79 92]
[80 91]
[81 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
