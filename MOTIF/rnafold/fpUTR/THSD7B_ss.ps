%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCCGCCGGGUUGCCAGACGCUGGAAUGGGUGGUCUUCCGACACACACCACCAUCUUUCUUGCGCUCGGGAAGCUCGGGGCUCAGCGGCUCCCAGAGGUUACGGCGGCGGCUCUGGCGAGACGGGAAUAGGCAAGUCAAGAGGCUGAAAAAUCUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[268.95425415 399.48968506]
[261.45425415 386.49929810]
[253.95425415 373.50894165]
[237.82293701 373.91162109]
[223.60101318 366.09164429]
[215.20304871 352.09378052]
[214.99464417 335.67761230]
[223.12687683 321.30792236]
[215.37637329 308.46542358]
[207.62588501 295.62292480]
[193.15014648 292.30807495]
[185.10710144 279.39434814]
[188.68217468 264.23333740]
[180.93168640 251.39082336]
[173.18119812 238.54830933]
[165.43069458 225.70581055]
[157.68020630 212.86331177]
[149.92971802 200.02081299]
[142.17922974 187.17829895]
[134.42874146 174.33580017]
[128.24977112 170.21360779]
[126.65525818 161.16825867]
[119.15525818 148.17787170]
[111.65525818 135.18750000]
[104.15525818 122.19711304]
[92.92984772 123.55175781]
[81.51647186 119.12551117]
[72.89965057 109.15474701]
[69.73570251 95.39752960]
[54.73570251 95.39752960]
[39.73570251 95.39752960]
[24.73640633 95.54296875]
[9.73922634 95.83383942]
[-5.25795317 96.12471008]
[-20.25160789 96.56098175]
[-35.24032593 97.14261627]
[-50.22904587 97.72424316]
[-63.80643845 106.92133331]
[-78.43990326 99.51905060]
[-79.07579041 83.13224030]
[-65.05994415 74.61824036]
[-50.81067657 82.73552704]
[-35.82195663 82.15389252]
[-20.83323860 81.57226562]
[-14.23888779 78.15369415]
[-5.54882336 81.12753296]
[9.44835663 80.83666229]
[24.44553566 80.54579163]
[31.10493660 77.25573730]
[39.73570251 80.39752960]
[54.73570251 80.39752960]
[69.73570251 80.39752960]
[56.57196426 73.20614624]
[41.66578674 71.53106689]
[29.13611031 63.28442001]
[21.70233917 50.25602722]
[20.97787476 35.27352905]
[27.11995506 21.58868980]
[38.79551697 12.17162037]
[53.47053909 9.06617355]
[67.95999146 12.94634724]
[79.11913300 22.96999931]
[84.52600861 36.96162796]
[83.00734711 51.88394547]
[87.24890900 66.27175903]
[90.42446899 51.61174774]
[93.60002899 36.95174026]
[92.35662079 27.85147476]
[96.98191833 22.03953362]
[100.44115448 7.44386005]
[94.33721924 -3.95504975]
[97.55297852 -16.06415939]
[107.82837677 -22.50536919]
[111.56999207 -37.03121948]
[107.51959991 -52.32516861]
[118.18702698 -62.72013092]
[121.92864990 -77.24597931]
[125.67026520 -91.77182770]
[129.27085876 -106.33327484]
[132.73010254 -120.92894745]
[136.18933105 -135.52462769]
[139.50689697 -150.15315247]
[142.68244934 -164.81315613]
[145.85800171 -179.47315979]
[140.33839417 -194.91551208]
[151.15687561 -207.23997498]
[167.18432617 -203.76821899]
[171.93307495 -188.07167053]
[160.51802063 -176.29760742]
[157.34245300 -161.63760376]
[154.16690063 -146.97758484]
[155.83250427 -139.73895264]
[150.78500366 -132.06538391]
[147.32577515 -117.46971130]
[143.86653137 -102.87403870]
[145.39146423 -95.60446167]
[140.19612122 -88.03021240]
[136.45449829 -73.50436401]
[132.71287537 -58.97851181]
[137.03089905 -44.72354889]
[126.09584045 -33.28960037]
[122.35422516 -18.76375198]
[127.97978973 -2.16301465]
[115.03682709 10.90309811]
[111.57759094 25.49877167]
[108.26003265 40.12730026]
[105.08448029 54.78730774]
[101.90892029 69.44731140]
[124.49922943 89.64560699]
[117.14563751 114.69711304]
[124.64563751 127.68750000]
[132.14564514 140.67787170]
[139.64564514 153.66825867]
[147.27124023 166.58531189]
[155.02172852 179.42781067]
[162.77221680 192.27030945]
[170.52272034 205.11282349]
[178.27320862 217.95532227]
[186.02369690 230.79782104]
[193.77418518 243.64033508]
[201.52467346 256.48281860]
[216.60470581 260.38543701]
[224.28186035 273.51995850]
[220.46839905 287.87243652]
[228.21888733 300.71493530]
[235.96937561 313.55743408]
[249.94874573 312.56323242]
[262.92681885 317.67474365]
[272.38327026 327.83789062]
[276.50823975 341.02362061]
[274.54858398 354.63290405]
[266.94464111 366.00894165]
[274.44464111 378.99929810]
[281.94464111 391.98968506]
[291.02474976 397.43386841]
[293.24102783 406.56457520]
[303.94998169 417.06784058]
[314.65890503 427.57110596]
[325.36785889 438.07437134]
[341.37493896 441.63876343]
[346.03283691 457.36251831]
[334.54986572 469.07037354]
[318.73873901 464.71826172]
[314.86459351 448.78329468]
[304.15563965 438.28005981]
[293.44671631 427.77679443]
[282.73776245 417.27352905]
[285.84921265 431.94726562]
[283.60937500 446.77911377]
[276.30358887 459.87969971]
[264.86245728 469.58023071]
[250.74342346 474.64508057]
[235.74497986 474.42901611]
[221.77767944 468.95959473]
[210.62072754 458.93350220]
[203.69531250 445.62792969]
[201.88363647 430.73773193]
[205.41647339 416.15969849]
[213.84378052 403.75079346]
[226.09207153 395.09173584]
[240.60113525 391.28555298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[8 126]
[9 125]
[10 124]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[22 113]
[23 112]
[24 111]
[25 110]
[29 52]
[30 51]
[31 50]
[32 48]
[33 47]
[34 46]
[35 44]
[36 43]
[37 42]
[65 108]
[66 107]
[67 106]
[69 105]
[70 104]
[73 102]
[74 101]
[76 99]
[77 98]
[78 97]
[79 95]
[80 94]
[81 93]
[82 91]
[83 90]
[84 89]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
