%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCUAAAAUAAUAAAAUGCUGAGCUCACUGUUCCCCCACCCUCUCCCCCGGCACCGGGCUCCUCCUGCUGCUGGGACAGUGCUCUAGUAGAACAGACAGACCUACUGACACAGGGGAGGUGAGAAGGGAGGUGACCACCAGGACUGGCUCUGUGAGUACCACACAGUGGGGAGGGGGUGGGGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[-7.33351994 414.52078247]
[-21.24078751 412.57888794]
[-28.34571266 425.78948975]
[-35.45063782 439.00009155]
[-42.55556488 452.21069336]
[-49.66049194 465.42129517]
[-42.11191177 480.54876709]
[-45.03218079 497.03225708]
[-57.07690430 508.41751099]
[-73.36872101 510.36648560]
[-80.25540161 523.69213867]
[-75.22001648 538.67285156]
[-82.32711029 552.78894043]
[-97.36017609 557.66564941]
[-111.40036774 550.40972900]
[-116.11787415 535.32592773]
[-108.71389771 521.36328125]
[-93.58107758 516.80548096]
[-86.69438934 503.47979736]
[-93.77141571 492.14804077]
[-94.32514191 478.69097900]
[-88.10378265 466.62353516]
[-76.63919067 459.15069580]
[-62.87109375 458.31637573]
[-55.76616669 445.10577393]
[-48.66124344 431.89517212]
[-41.55631638 418.68457031]
[-34.45138931 405.47396851]
[-44.65708542 393.36108398]
[-49.44803619 378.22348022]
[-48.06327057 362.36767578]
[-40.68516922 348.22143555]
[-28.41605949 337.96221924]
[-13.11362553 333.18191528]
[2.89033723 334.63983154]
[9.77702236 321.31417847]
[16.66370773 307.98849487]
[23.55039215 294.66281128]
[30.43707657 281.33715820]
[37.32376099 268.01147461]
[44.21044540 254.68580627]
[51.09713364 241.36013794]
[57.98381805 228.03445435]
[64.87049866 214.70878601]
[71.75718689 201.38311768]
[78.64387512 188.05743408]
[85.53055573 174.73176575]
[92.41724396 161.40609741]
[88.04084015 147.05871582]
[74.88911438 139.84538269]
[61.73739243 132.63206482]
[48.58566666 125.41873169]
[35.43394089 118.20539856]
[22.28221703 110.99207306]
[9.13049126 103.77873993]
[-6.69002676 103.92632294]
[-14.12828636 91.02199554]
[-27.28001213 83.80867004]
[-40.43173599 76.59533691]
[-53.58346176 69.38201141]
[-69.32561493 72.47462463]
[-81.46487427 61.98567963]
[-80.68904114 45.96139908]
[-67.59326935 36.69423294]
[-52.22351074 41.29316330]
[-46.37013245 56.23028183]
[-33.21840668 63.44361496]
[-20.06668282 70.65694427]
[-6.91495705 77.87026978]
[7.96486187 77.20674896]
[16.34382057 90.62701416]
[29.49554634 97.84034729]
[42.64727020 105.05367279]
[55.79899597 112.26700592]
[68.95072174 119.48033905]
[82.10244751 126.69366455]
[95.25417328 133.90699768]
[69.81324768 102.99783325]
[91.25891876 75.05413818]
[90.51905823 60.07239532]
[89.77919006 45.09065247]
[89.03932190 30.10891151]
[88.29946136 15.12716961]
[77.95897675 -0.09998385]
[86.55574036 -15.39077568]
[85.56956482 -30.35832214]
[84.58338928 -45.32587051]
[80.89115906 -53.69987869]
[83.70614624 -60.54732895]
[82.96627808 -75.52907562]
[70.39749908 -84.83281708]
[66.79987335 -100.05094147]
[73.87210083 -113.99789429]
[88.27487946 -120.08837128]
[103.20767212 -115.44661713]
[111.61965942 -102.26434326]
[109.53896332 -86.76580048]
[97.94802094 -76.26893616]
[98.68788910 -61.28719711]
[99.55094147 -46.31204605]
[100.53711700 -31.34449768]
[101.52329254 -16.37695122]
[110.41677856 -8.16167736]
[111.35153961 4.31159973]
[103.28120422 14.38730431]
[104.02106476 29.36904716]
[104.76093292 44.35078812]
[105.50080109 59.33253098]
[106.24066162 74.31427002]
[126.62114716 85.45552826]
[132.36364746 111.17144775]
[146.59869385 106.44242859]
[160.83374023 101.71341705]
[175.06878662 96.98440552]
[189.30381775 92.25539398]
[203.53886414 87.52638245]
[217.77391052 82.79737091]
[224.90457153 68.94849396]
[239.40829468 64.35538483]
[252.56713867 71.23873901]
[266.80218506 66.50972748]
[281.03723145 61.78071213]
[282.19412231 46.65003967]
[289.03738403 33.15140915]
[300.49636841 23.32771492]
[314.80468750 18.65229416]
[329.77230835 19.80800629]
[343.12075806 26.58769035]
[352.83007812 37.93046570]
[367.06512451 33.20145035]
[373.92236328 18.96228981]
[388.86715698 13.82141876]
[403.03302002 20.82882500]
[408.01559448 35.82714081]
[400.85882568 49.91812897]
[385.80865479 54.74185944]
[371.79412842 47.43649292]
[357.55908203 52.16550827]
[356.56713867 67.06333923]
[349.92901611 80.48274994]
[338.62832642 90.36502838]
[324.36663818 95.18082428]
[309.30725098 94.16679382]
[295.74703979 87.44637299]
[285.76623535 76.01575470]
[271.53118896 80.74476624]
[257.29614258 85.47377777]
[250.87197876 98.86278534]
[236.50299072 103.86146545]
[222.50291443 97.03240967]
[208.26788330 101.76142120]
[194.03283691 106.49044037]
[179.79779053 111.21945190]
[165.56274414 115.94846344]
[151.32771301 120.67747498]
[137.09266663 125.40648651]
[135.50115967 132.73568726]
[150.15951538 135.91891479]
[146.97605896 150.57720947]
[132.31816101 147.39407349]
[130.72666931 154.72328186]
[141.71844482 164.93017578]
[152.71022034 175.13706970]
[163.70201111 185.34396362]
[179.42298889 191.69119263]
[177.67581177 208.55487061]
[160.98750305 211.54431152]
[153.49511719 196.33573914]
[142.50332642 186.12884521]
[131.51155090 175.92195129]
[120.51976776 165.71505737]
[105.74291229 168.29277039]
[98.85623169 181.61845398]
[91.96954346 194.94412231]
[85.08286285 208.26979065]
[78.19617462 221.59547424]
[71.30949402 234.92114258]
[64.42280579 248.24681091]
[57.53612137 261.57247925]
[50.64943695 274.89816284]
[43.76274872 288.22384644]
[36.87606430 301.54949951]
[29.98937988 314.87518311]
[23.10269547 328.20086670]
[16.21601105 341.52651978]
[25.72249794 352.14389038]
[31.02014542 365.34182739]
[31.49082375 379.52560425]
[27.09832764 392.98889160]
[18.39028740 404.11898804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[10 19]
[11 18]
[35 185]
[36 184]
[37 183]
[38 182]
[39 181]
[40 180]
[41 179]
[42 178]
[43 177]
[44 176]
[45 175]
[46 174]
[47 173]
[48 172]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[57 69]
[58 68]
[59 67]
[60 66]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[85 102]
[86 101]
[87 100]
[89 99]
[90 98]
[111 156]
[112 155]
[113 154]
[114 153]
[115 152]
[116 151]
[117 150]
[120 147]
[121 146]
[122 145]
[129 138]
[130 137]
[161 171]
[162 170]
[163 169]
[164 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
