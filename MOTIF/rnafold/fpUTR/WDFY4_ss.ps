%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACGGGCCUCAGAGGGAGCUGGUCUAUCCCGGCCCUGUCAUUACUCCACUGGGUUCUGAUCUGCUUUGCCACGGC\
) } def
/len { sequence length } bind def

/coor [
[96.20627594 290.21902466]
[82.00054932 283.68209839]
[75.36697388 269.52124023]
[79.43771362 254.42280579]
[92.29069519 245.51579285]
[93.49769592 230.56442261]
[94.40337372 215.59179688]
[95.00736237 200.60395813]
[95.61135101 185.61611938]
[82.43311310 173.21069336]
[82.22380829 154.80151367]
[95.56055450 141.66195679]
[94.95656586 126.67412567]
[94.35257721 111.68628693]
[86.95446014 107.23555756]
[83.24173737 98.18571472]
[70.89698029 89.66474915]
[58.55222321 81.14377594]
[49.44358826 78.74359131]
[45.89139175 72.02282715]
[33.89975357 63.01169205]
[21.90810966 54.00056076]
[9.91646862 44.98942566]
[-2.07517242 35.97829056]
[-17.68550491 38.44670105]
[-30.41980362 29.08650780]
[-32.72303391 13.45094967]
[-23.22872925 0.81632560]
[-7.56969309 -1.32146633]
[4.96384573 8.30588818]
[6.93596172 23.98665047]
[18.92760277 32.99778366]
[30.91924477 42.00891876]
[42.91088486 51.02005386]
[54.90252686 60.03118515]
[67.07319641 68.79901886]
[79.41795349 77.31998444]
[91.76271057 85.84095764]
[106.75966644 85.53890228]
[118.75131226 76.52777100]
[130.74295044 67.51663208]
[142.73458862 58.50550079]
[145.09007263 43.10779190]
[157.37966919 34.14004517]
[172.04450989 36.48052597]
[184.03616333 27.46939087]
[196.02780151 18.45825577]
[208.01943970 9.44712257]
[213.94607544 -5.84362888]
[230.19082642 -8.08866501]
[240.04248047 5.02151442]
[233.36651611 20.00028038]
[217.03057861 21.43876457]
[205.03892517 30.44989777]
[193.04728699 39.46103287]
[181.05564880 48.47216415]
[179.22370911 63.20917892]
[167.19084167 72.51857758]
[151.74572754 70.49714661]
[139.75408936 79.50827789]
[127.76244354 88.51940918]
[115.77080536 97.53054810]
[109.34041595 111.08229828]
[109.94440460 126.07013702]
[110.54839325 141.05796814]
[120.95094299 147.46546936]
[126.79230499 158.05743408]
[126.66347504 170.03100586]
[120.71756744 180.28433228]
[110.59918213 186.22010803]
[109.99519348 201.20794678]
[109.39120483 216.19578552]
[112.23085022 225.17712402]
[108.44905090 231.77142334]
[107.24205017 246.72277832]
[118.49980164 257.57623291]
[120.09586334 273.13214111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 75]
[6 74]
[7 72]
[8 71]
[9 70]
[12 65]
[13 64]
[14 63]
[16 38]
[17 37]
[18 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[39 62]
[40 61]
[41 60]
[42 59]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
