%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUCCCGGGCGGGCCGGACCGGCGGGCGGGCGGGGACUCGGCGCGGGCCCUCCCGGCCAGCGGCGGCAGCCUCCUCCCCGGCGCCCUCAGGACCCCCCAGAGCCCCCGGCGGCGGCAGCCUGCCUUGCUCUGCCAGGAACC\
) } def
/len { sequence length } bind def

/coor [
[57.07070541 298.78009033]
[46.20233917 287.30599976]
[46.71414185 271.51000977]
[58.30246735 260.76358032]
[58.62969208 245.76713562]
[58.95691681 230.77070618]
[59.28413773 215.77427673]
[51.12654877 206.77822876]
[51.32239914 194.23399353]
[60.31425858 184.91804504]
[60.96854782 169.93232727]
[61.62283707 154.94659424]
[62.27713013 139.96087646]
[62.93141937 124.97515106]
[89.14978790 91.73639679]
[84.63919830 77.43064117]
[80.12861633 63.12488937]
[75.61802673 48.81913376]
[70.92377472 43.99072647]
[69.62679291 38.35947418]
[71.23745728 33.79008484]
[67.35517120 19.30119896]
[63.47288513 4.81231165]
[59.59059906 -9.67657566]
[54.30877686 -17.22395134]
[55.78534698 -24.52394676]
[52.22005844 -39.09407806]
[48.65476990 -53.66420746]
[45.08948135 -68.23433685]
[41.04938126 -82.68001556]
[36.53879547 -96.98577118]
[32.02820969 -111.29152679]
[26.42219925 -118.60132599]
[27.57894516 -125.95878601]
[23.38150978 -140.35952759]
[19.18407440 -154.76028442]
[5.60938835 -162.40002441]
[1.55773640 -177.06422424]
[8.92471981 -189.95852661]
[4.72728443 -204.35926819]
[-10.46098423 -217.53761292]
[-5.24578905 -236.11120605]
[-10.06738091 -250.31517029]
[-14.88897324 -264.51910400]
[-19.71056557 -278.72308350]
[-24.53215599 -292.92703247]
[-41.82435989 -283.93887329]
[-66.05305481 -291.11715698]
[-76.65966034 -301.72378540]
[-87.26625824 -312.33038330]
[-97.87286377 -322.93698120]
[-113.85134888 -324.37484741]
[-122.56899261 -337.84268188]
[-117.33836365 -353.00909424]
[-102.17195129 -358.23971558]
[-88.70413208 -349.52206421]
[-87.26625824 -333.54357910]
[-76.65966034 -322.93698120]
[-66.05305481 -312.33038330]
[-55.44645309 -301.72378540]
[-48.48646164 -304.51815796]
[-34.56647873 -310.10687256]
[-27.60648537 -312.90124512]
[-27.27926254 -327.89767456]
[-26.95203972 -342.89410400]
[-29.91087914 -351.61798096]
[-26.45054626 -358.21316528]
[-25.79625511 -373.19888306]
[-28.56408119 -381.98519897]
[-24.96069908 -388.50332642]
[-23.97965050 -403.47122192]
[-31.71414375 -417.93182373]
[-22.82948494 -431.71569824]
[-6.46544886 -430.64315796]
[0.54404575 -415.81753540]
[-9.01176739 -402.49017334]
[-9.99281406 -387.52227783]
[-10.81053162 -372.54458618]
[-11.46482277 -357.55886841]
[-11.95560932 -342.56689453]
[-12.28283215 -327.57046509]
[-12.61005592 -312.57403564]
[-10.32820511 -297.74862671]
[-5.50661278 -283.54464722]
[-0.68502086 -269.34069824]
[4.13657093 -255.13674927]
[8.95816326 -240.93280029]
[18.57355499 -237.21070862]
[24.64657021 -228.60697937]
[24.94607925 -217.85943604]
[19.12803268 -208.55671692]
[23.32546806 -194.15596008]
[36.46682358 -187.23928833]
[40.92876434 -172.69468689]
[33.58482361 -158.95771790]
[37.78225708 -144.55696106]
[41.97969055 -130.15621948]
[46.33396149 -115.80210876]
[50.84455109 -101.49636078]
[55.35513687 -87.19060516]
[58.37504196 -85.23529053]
[60.56652069 -81.68299103]
[61.17243576 -76.95436096]
[59.65961456 -71.79962921]
[63.22490311 -57.22949600]
[66.79019165 -42.65936661]
[70.35547638 -28.08923531]
[74.07949066 -13.55886173]
[77.96177673 0.93002605]
[81.84406281 15.41891384]
[85.72634125 29.90780067]
[89.92378235 44.30854797]
[94.43436432 58.61430359]
[98.94495392 72.92005920]
[103.45554352 87.22581482]
[112.58695984 99.12611389]
[125.23783112 107.18560791]
[137.88870239 115.24510193]
[150.53958130 123.30459595]
[167.14686584 126.71552277]
[168.46658325 143.61802673]
[152.58998108 149.56526184]
[142.48008728 135.95545959]
[129.82920837 127.89597321]
[117.17833710 119.83647919]
[104.52746582 111.77698517]
[97.87488556 115.24009705]
[108.57350922 125.75386810]
[101.88021088 139.17771912]
[87.04505920 136.96002197]
[84.56972504 122.16632843]
[77.91714478 125.62944031]
[77.26285553 140.61515808]
[76.60855865 155.60089111]
[75.95426941 170.58660889]
[75.29998016 185.57234192]
[84.19087982 201.65782166]
[74.28057098 216.10150146]
[73.95334625 231.09793091]
[73.62612152 246.09436035]
[73.29889679 261.09078979]
[84.40744781 272.33248901]
[84.22975159 288.13577271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 141]
[5 140]
[6 139]
[7 138]
[10 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 115]
[16 114]
[17 113]
[18 112]
[21 111]
[22 110]
[23 109]
[24 108]
[26 107]
[27 106]
[28 105]
[29 104]
[30 100]
[31 99]
[32 98]
[34 97]
[35 96]
[36 95]
[39 92]
[40 91]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[48 60]
[49 59]
[50 58]
[51 57]
[63 82]
[64 81]
[65 80]
[67 79]
[68 78]
[70 77]
[71 76]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
