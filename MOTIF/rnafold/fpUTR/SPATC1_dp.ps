%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:29 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SPATC1)
} def

/sequence { (\
AGACUCUGCACCCUCCUUCAGCCCAGGCAAGGCCUGGGGCCCUGGGCAGCCUCCAGGUGCAGUGCCCUCCCGUGGGCCGCACCCUUGCCACUGCCCCAGGGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.076482354 ubox
1 14 0.063224015 ubox
1 17 0.050642486 ubox
1 18 0.007572880 ubox
2 6 0.079212185 ubox
2 13 0.072505514 ubox
2 15 0.092719007 ubox
2 16 0.057457768 ubox
2 17 0.008494583 ubox
2 18 0.015826385 ubox
2 19 0.101261192 ubox
3 14 0.088179548 ubox
3 17 0.016206883 ubox
3 18 0.094740346 ubox
4 21 0.053230908 ubox
4 101 0.003272724 ubox
5 20 0.050178059 ubox
5 100 0.003238770 ubox
6 21 0.322517147 ubox
6 99 0.003251956 ubox
7 20 0.327601037 ubox
7 98 0.003248082 ubox
8 19 0.325833974 ubox
8 22 0.033230474 ubox
8 97 0.003219677 ubox
8 102 0.004972980 ubox
9 21 0.048891089 ubox
9 39 0.003938813 ubox
9 101 0.004725309 ubox
11 38 0.026452078 ubox
11 39 0.006095554 ubox
11 101 0.004473795 ubox
12 37 0.026470947 ubox
12 38 0.006757207 ubox
12 100 0.004469222 ubox
13 21 0.099064614 ubox
13 36 0.026420994 ubox
13 37 0.006288278 ubox
13 99 0.004438287 ubox
14 20 0.096127595 ubox
14 36 0.005653170 ubox
14 98 0.004116428 ubox
15 32 0.026795125 ubox
15 38 0.003271852 ubox
16 31 0.026834507 ubox
16 38 0.003183477 ubox
16 39 0.003659371 ubox
17 30 0.026726874 ubox
18 29 0.022792176 ubox
19 36 0.003587202 ubox
19 38 0.005265627 ubox
20 35 0.003720513 ubox
21 28 0.026810124 ubox
21 34 0.003441665 ubox
21 40 0.015219647 ubox
22 27 0.026864006 ubox
22 37 0.004496834 ubox
22 38 0.996100362 ubox
22 39 0.016308976 ubox
23 32 0.003167916 ubox
23 36 0.003207635 ubox
23 37 0.999479158 ubox
23 38 0.014450332 ubox
24 31 0.003186758 ubox
24 36 0.999549168 ubox
24 37 0.010432855 ubox
25 35 0.999375446 ubox
26 34 0.999612674 ubox
27 33 0.999579609 ubox
28 32 0.992307400 ubox
39 102 0.988216443 ubox
40 101 0.999751865 ubox
41 100 0.999970972 ubox
42 99 0.999961673 ubox
43 98 0.998227217 ubox
44 96 0.502078000 ubox
44 97 0.864723244 ubox
45 95 0.708006634 ubox
45 96 0.706151679 ubox
46 94 0.866244998 ubox
46 95 0.499550110 ubox
47 93 0.999731713 ubox
48 92 0.999132257 ubox
49 88 0.098683184 ubox
49 91 0.990669260 ubox
49 94 0.012776943 ubox
50 87 0.110841260 ubox
50 93 0.012812901 ubox
51 56 0.003189621 ubox
54 87 0.559507356 ubox
55 85 0.398504999 ubox
55 86 0.505628143 ubox
56 83 0.929159415 ubox
56 84 0.355594026 ubox
56 85 0.078249704 ubox
57 82 0.965991245 ubox
57 83 0.252341009 ubox
57 84 0.055273261 ubox
58 81 0.999140728 ubox
59 80 0.999853809 ubox
60 79 0.999388776 ubox
62 77 0.030514064 ubox
62 80 0.013645501 ubox
63 76 0.011222400 ubox
63 79 0.014202954 ubox
64 77 0.998766645 ubox
64 78 0.024275846 ubox
65 75 0.005397813 ubox
65 76 0.999915865 ubox
66 74 0.005331612 ubox
66 75 0.999964535 ubox
66 76 0.003493654 ubox
67 74 0.999627730 ubox
67 75 0.004411753 ubox
68 74 0.004772775 ubox
87 94 0.003173809 ubox
88 93 0.003171353 ubox
22 38 0.9500000 lbox
23 37 0.9500000 lbox
24 36 0.9500000 lbox
25 35 0.9500000 lbox
26 34 0.9500000 lbox
27 33 0.9500000 lbox
28 32 0.9500000 lbox
39 102 0.9500000 lbox
40 101 0.9500000 lbox
41 100 0.9500000 lbox
42 99 0.9500000 lbox
43 98 0.9500000 lbox
44 97 0.9500000 lbox
45 96 0.9500000 lbox
46 95 0.9500000 lbox
47 93 0.9500000 lbox
48 92 0.9500000 lbox
49 91 0.9500000 lbox
56 83 0.9500000 lbox
57 82 0.9500000 lbox
58 81 0.9500000 lbox
59 80 0.9500000 lbox
60 79 0.9500000 lbox
64 77 0.9500000 lbox
65 76 0.9500000 lbox
66 75 0.9500000 lbox
67 74 0.9500000 lbox
showpage
end
%%EOF
