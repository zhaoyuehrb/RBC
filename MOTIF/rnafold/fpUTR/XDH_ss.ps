%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACAGAGCAGUGAUAACUACCUGCCAGUGUCUCUUAGGAGUGAGGUACCUGGAGUUCGGGGACCCCAACCUGUGACA\
) } def
/len { sequence length } bind def

/coor [
[107.78683472 227.04220581]
[107.19793701 212.05377197]
[106.60903931 197.06533813]
[106.02014160 182.07688904]
[105.43124390 167.08845520]
[104.84234619 152.10002136]
[104.25344849 137.11158752]
[94.29961395 135.50563049]
[85.51206207 131.38334656]
[78.48331451 125.24688721]
[73.62461853 117.72449493]
[59.55174637 122.91625214]
[45.47887421 128.10801697]
[35.41434097 141.05548096]
[19.20843887 138.54534912]
[13.53241348 123.15981293]
[24.22527313 110.72619629]
[40.28712082 114.03514099]
[54.35998917 108.84338379]
[68.43286133 103.65162659]
[68.47473907 96.00291443]
[70.34305573 88.58577728]
[73.92957306 81.82992554]
[79.02649689 76.12677002]
[85.33853912 71.80673218]
[92.50000000 69.12009430]
[92.50000000 54.12009048]
[92.50000000 39.12009048]
[92.50000000 24.12009239]
[89.30376434 15.27145290]
[92.80606842 8.53408623]
[93.39496613 -6.45434952]
[86.20542145 -20.54764748]
[94.43643188 -32.96134186]
[95.02532959 -47.94977570]
[95.61422729 -62.93821335]
[96.20312500 -77.92665100]
[96.79201508 -92.91508484]
[88.68164062 -107.16828918]
[97.20243835 -121.18000031]
[113.58894348 -120.53617096]
[120.98412323 -105.89911652]
[111.78045654 -92.32618713]
[111.19155884 -77.33775330]
[110.60266113 -62.34931564]
[110.01376343 -47.36088181]
[109.42486572 -32.37244415]
[116.65653229 -19.35121918]
[108.38339996 -5.86545229]
[107.79450226 9.12298393]
[107.50000000 24.12009239]
[107.50000000 39.12009048]
[107.50000000 54.12009048]
[107.50000000 69.12009430]
[130.47599792 83.68962860]
[135.09324646 112.79945374]
[149.53007507 116.87106323]
[163.96690369 120.94266510]
[173.35090637 120.26831818]
[178.88465881 125.46791840]
[193.15049744 130.10317993]
[207.41635132 134.73843384]
[224.34867859 133.88258362]
[229.85842896 149.91625977]
[215.97657776 159.64924622]
[202.78109741 149.00427246]
[188.51524353 144.36901855]
[174.24940491 139.73376465]
[159.89529419 135.37950134]
[145.45846558 131.30789185]
[131.02163696 127.23628235]
[119.24188232 136.52268982]
[119.83078003 151.51112366]
[120.41967773 166.49955750]
[121.00857544 181.48800659]
[121.59747314 196.47644043]
[122.18637085 211.46487427]
[122.77526855 226.45330811]
[125.72046661 245.60992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[11 20]
[12 19]
[13 18]
[26 54]
[27 53]
[28 52]
[29 51]
[31 50]
[32 49]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[56 71]
[57 70]
[58 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
