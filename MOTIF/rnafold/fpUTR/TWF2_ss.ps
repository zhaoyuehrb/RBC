%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGGGCGGGUCCUGCGGCACCGCCCGGGAAGCUGCGCGAGGGUCGACAGCCUCCGCCACAUCCUCCACCUCUCUUGGUCCAGCGAGCGUUGCCGGGCCAGGGUCAAGCGGAGGGCUCCGACGGCGCGGACGGAGCGAAGCGCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[78.64492798 254.25169373]
[78.33493042 239.25488281]
[78.02492523 224.25808716]
[70.02624512 211.69345093]
[77.47668457 197.73631287]
[77.16667938 182.73951721]
[69.16799927 170.17486572]
[76.61843872 156.21774292]
[76.30843353 141.22094727]
[62.90137100 134.49409485]
[50.69364166 143.21023560]
[43.49243546 160.12615967]
[26.00352287 161.20330811]
[13.97853565 170.16989136]
[1.95354807 179.13648987]
[-10.07143974 188.10307312]
[-22.09642792 197.06965637]
[-27.14641380 204.75869751]
[-34.46386719 206.09423828]
[-46.67159653 214.81039429]
[-58.87932968 223.52655029]
[-68.25659943 237.65110779]
[-84.42504883 232.55036926]
[-83.99952698 215.60176086]
[-67.59548187 211.31881714]
[-55.38774872 202.60266113]
[-43.18001938 193.88650513]
[-31.06301308 185.04467773]
[-19.03802681 176.07807922]
[-7.01303864 167.11149597]
[5.01194906 158.14491272]
[17.03693581 149.17832947]
[19.10832596 137.22032166]
[29.10817528 129.65737915]
[41.97748947 131.00250244]
[54.18521881 122.28635406]
[52.63784790 107.36637878]
[38.90124893 101.34095001]
[25.16464806 95.31552124]
[15.98461723 94.72335815]
[11.20844364 89.02099609]
[-2.40069556 82.71295929]
[-16.00983429 76.40492249]
[-29.61897278 70.09688568]
[-43.10713196 77.76820374]
[-58.52460098 76.01283264]
[-69.94304657 65.50575256]
[-72.97183990 50.28714752]
[-66.44635773 36.20887756]
[-52.87577057 28.68432999]
[-37.47825241 30.60684395]
[-26.17446136 41.23717499]
[-23.31093597 56.48774338]
[-9.70179749 62.79578018]
[3.90734172 69.10382080]
[17.51648140 75.41185760]
[31.19008064 81.57891846]
[44.92668152 87.60435486]
[58.66328049 93.62978363]
[64.74488068 79.52487946]
[75.29502106 68.90506744]
[88.64479828 63.04605865]
[102.82272339 62.50204468]
[115.84457397 67.06414032]
[125.99099731 75.82825470]
[134.45298767 63.44299698]
[142.91497803 51.05773926]
[151.37698364 38.67247772]
[159.83897400 26.28722000]
[158.22816467 13.44845486]
[165.58282471 3.29443884]
[177.49546814 0.97635657]
[186.21160889 -11.23137379]
[187.17999268 -31.32492065]
[205.01696777 -38.69418335]
[213.22119141 -51.25168228]
[221.42541504 -63.80918121]
[229.62962341 -76.36667633]
[237.83384705 -88.92417145]
[246.03807068 -101.48167419]
[254.24229431 -114.03916931]
[262.44653320 -126.59666443]
[270.65075684 -139.15415955]
[271.72131348 -154.93910217]
[285.15988159 -161.36204529]
[293.36410522 -173.91954041]
[301.56832886 -186.47705078]
[309.77255249 -199.03454590]
[313.37393188 -215.60156250]
[330.29046631 -216.72712708]
[336.05502319 -200.78327942]
[322.33004761 -190.83032227]
[314.12582397 -178.27282715]
[305.92160034 -165.71531677]
[297.71737671 -153.15782166]
[297.23361206 -138.27107239]
[283.20825195 -130.94993591]
[275.00402832 -118.39244080]
[266.79980469 -105.83494568]
[258.59558105 -93.27745056]
[250.39134216 -80.71994781]
[242.18713379 -68.16245270]
[233.98291016 -55.60495758]
[225.77868652 -43.04745865]
[217.57446289 -30.48996353]
[220.57469177 -20.64146614]
[217.56314087 -10.56620598]
[209.31184387 -3.69745445]
[198.41934204 -2.51522207]
[189.70318604 9.69250870]
[188.98770142 27.19994926]
[172.22422791 34.74921417]
[163.76223755 47.13447189]
[155.30024719 59.51973343]
[146.83824158 71.90499115]
[138.37625122 84.29025269]
[141.45448303 98.97100067]
[154.17884827 106.91394806]
[166.90322876 114.85689545]
[179.62759399 122.79984283]
[192.35197449 130.74278259]
[205.07633972 138.68572998]
[223.46038818 138.86534119]
[231.14826965 154.61077881]
[244.03407288 162.28904724]
[260.73577881 165.20272827]
[262.55944824 182.05831909]
[246.86744690 188.47680664]
[236.35580444 175.17486572]
[223.46998596 167.49658203]
[211.62954712 170.15899658]
[200.81552124 163.81455994]
[197.13339233 151.41009521]
[184.40902710 143.46716309]
[171.68464661 135.52421570]
[158.96028137 127.58126831]
[146.23591614 119.63832092]
[133.51153564 111.69537354]
[128.43186951 123.79692841]
[118.96700287 133.68659973]
[106.08108521 139.77983093]
[91.30522919 140.91093445]
[91.61523438 155.90773010]
[99.63609314 169.54505920]
[92.16347504 182.42951965]
[92.47348022 197.42631531]
[100.49433136 211.06362915]
[93.02172089 223.94808960]
[93.33172607 238.94488525]
[93.64172363 253.94168091]
[96.23009491 273.14974976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[5 146]
[6 145]
[8 143]
[9 142]
[10 36]
[11 35]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[19 27]
[20 26]
[21 25]
[37 59]
[38 58]
[39 57]
[41 56]
[42 55]
[43 54]
[44 53]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[72 110]
[73 109]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[85 95]
[86 94]
[87 93]
[88 92]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
