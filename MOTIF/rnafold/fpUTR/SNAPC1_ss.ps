%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCGUAGGGGGCGGGCCGUUCGGGCUUGGUUUCCUGGGCGACCACCGCUGGCUAGUCCGUUAGAGGCGUGCGGGCUUCGGAGGCGUGCGGGCUUCGGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[6.94251156 147.39833069]
[-1.56671154 139.51454163]
[-16.08423233 143.28834534]
[-30.60175323 147.06214905]
[-45.11927414 150.83595276]
[-52.78620148 156.10499573]
[-60.12761307 154.49855042]
[-74.75153351 157.83636475]
[-89.37545013 161.17417908]
[-103.99936676 164.51199341]
[-118.62329102 167.84980774]
[-133.24720764 171.18762207]
[-147.87112427 174.52543640]
[-162.49504089 177.86325073]
[-177.06739807 181.41944885]
[-191.58491516 185.19325256]
[-206.10243225 188.96705627]
[-220.61996460 192.74085999]
[-235.13748169 196.51466370]
[-244.46981812 209.56405640]
[-260.49777222 210.25997925]
[-270.92605591 198.06857300]
[-267.75500488 182.34204102]
[-253.41714478 175.14443970]
[-238.91128540 181.99714661]
[-224.39375305 178.22334290]
[-209.87623596 174.44953918]
[-195.35871887 170.67573547]
[-180.84120178 166.90193176]
[-175.06506348 162.09431458]
[-165.83285522 163.23933411]
[-151.20893860 159.90151978]
[-136.58502197 156.56370544]
[-121.96110535 153.22589111]
[-107.33718109 149.88807678]
[-92.71326447 146.55026245]
[-78.08934784 143.21244812]
[-63.46542740 139.87463379]
[-48.89307785 136.31842041]
[-34.37555695 132.54463196]
[-19.85803413 128.77082825]
[-5.34051275 124.99702454]
[2.81042624 108.74089050]
[20.50875092 103.35392761]
[36.88246918 112.62216187]
[51.14831543 107.98690796]
[65.41416168 103.35165405]
[79.68001556 98.71640015]
[81.81445312 86.17573547]
[91.69940948 76.07240295]
[106.96053314 73.07572174]
[111.38186646 58.74213028]
[115.80319214 44.40853882]
[120.22451782 30.07494736]
[112.61901093 16.22100258]
[117.11747742 1.07044613]
[131.05105591 -6.38816452]
[146.15321350 -1.72976863]
[153.46408081 12.28188992]
[148.64628601 27.33394432]
[134.55810547 34.49627304]
[130.13677979 48.82986832]
[125.71545410 63.16345978]
[121.29412842 77.49704742]
[129.36938477 90.13786316]
[144.23362732 92.15136719]
[159.09788513 94.16486359]
[173.96212769 96.17835999]
[188.82637024 98.19186401]
[203.54025269 92.37702942]
[215.11373901 101.75272369]
[229.97798157 103.76622772]
[244.84222412 105.77972412]
[259.70648193 107.79322052]
[274.42034912 101.97839355]
[285.99383545 111.35408783]
[300.85809326 113.36759186]
[315.72232056 115.38108826]
[330.58657837 117.39458466]
[347.09399414 113.52910614]
[355.37811279 128.32131958]
[343.45724487 140.37658691]
[328.57308960 132.25883484]
[313.70883179 130.24533081]
[298.84457397 128.23184204]
[283.98034668 126.21833801]
[270.32965088 132.17718506]
[257.69296265 122.65747070]
[242.82873535 120.64397430]
[227.96447754 118.63047028]
[213.10023499 116.61697388]
[199.44955444 122.57582855]
[186.81286621 113.05610657]
[171.94862366 111.04261017]
[157.08438110 109.02910614]
[142.22013855 107.01560974]
[127.35588837 105.00211334]
[106.08171844 123.30447388]
[84.31526947 112.98224640]
[70.04941559 117.61750031]
[55.78357315 122.25275421]
[41.51772308 126.88800812]
[38.21309280 138.51110840]
[29.73833466 146.95429993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[45 102]
[46 101]
[47 100]
[48 99]
[51 64]
[52 63]
[53 62]
[54 61]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[71 91]
[72 90]
[73 89]
[74 88]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
