%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGUGCGUGGGCGCGGUCUAUAGCACGCCGCGCGCGGGGCGGAUGUCCGGGCCGGCUGGGCCGGGGCCGCGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[81.02386475 124.74831390]
[75.47605896 119.26522064]
[71.46242523 112.57693481]
[69.23405457 105.10186005]
[54.28029251 103.92497253]
[39.32653046 102.74808502]
[24.37277222 101.57119751]
[9.41901207 100.39431000]
[-5.53474808 99.21743011]
[-20.48850822 98.04054260]
[-35.44226837 96.86365509]
[-50.39602661 95.68676758]
[-63.34227371 107.25942993]
[-80.32945251 106.04557037]
[-91.06853485 93.26123047]
[-106.05697632 92.67233276]
[-115.55738068 104.94107056]
[-130.46414185 109.25014496]
[-145.04530334 103.94264221]
[-153.69409180 91.05940247]
[-153.08489990 75.55429077]
[-143.45195007 63.38934326]
[-128.49932861 59.24222565]
[-113.97660828 64.70759583]
[-105.46807861 77.68389893]
[-90.47964478 78.27279663]
[-82.20842743 68.19282532]
[-69.42961884 64.74658966]
[-56.84397507 69.43792725]
[-49.21914291 80.73300934]
[-34.26538086 81.90989685]
[-19.31162262 83.08677673]
[-4.35786200 84.26366425]
[10.59589863 85.44055176]
[25.54965782 86.61743927]
[40.50341797 87.79432678]
[55.45718002 88.97121429]
[70.41093445 90.14810181]
[85.54606628 72.36566925]
[108.78501129 70.07682800]
[127.09850311 84.56485748]
[141.53533936 80.49325562]
[155.97216797 76.42164612]
[170.40899658 72.35004425]
[174.41024780 68.19412231]
[179.16539001 66.37310028]
[183.57649231 66.75424957]
[186.78556824 68.75690460]
[201.60089111 66.41039276]
[216.41621399 64.06387329]
[228.83610535 54.26300812]
[242.61706543 59.91406631]
[257.43240356 57.56755066]
[272.24771118 55.22103119]
[287.06304932 52.87451553]
[297.61822510 40.79280472]
[313.63803101 41.65626907]
[322.83343506 54.80253220]
[318.15048218 70.14690399]
[303.18157959 75.91849518]
[289.40954590 67.68984222]
[274.59423828 70.03635406]
[259.77890015 72.38287354]
[244.96357727 74.72939301]
[233.60339355 84.36241913]
[218.76274109 78.87919617]
[203.94741821 81.22571564]
[189.13208008 83.57223511]
[174.48059082 86.78687286]
[160.04376221 90.85847473]
[145.60693359 94.93008423]
[131.17010498 99.00168610]
[130.44287109 106.76786804]
[127.81118011 114.11066437]
[123.43966675 120.57072449]
[117.60180664 125.74391174]
[110.66281128 129.30659485]
[103.05677032 131.03591919]
[95.25950623 130.82369995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[15 26]
[16 25]
[41 72]
[42 71]
[43 70]
[44 69]
[48 68]
[49 67]
[50 66]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
