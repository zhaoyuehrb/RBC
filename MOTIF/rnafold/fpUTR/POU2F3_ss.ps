%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACAGUGGCGGCGACGGCUCCGGCAGCGGCUCCCGCGGCGGCGGCGGCCGGGAACUGGAGGAAGGAGACCCUGGCUUCGCAGGGGCCCCGGCUGGGGCAGAGGCGAGGGGCCUGGGGGGGCGCUGGCUUUGGCCCCGCCUGGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[104.56066132 132.51597595]
[100.85449982 147.05091858]
[110.12497711 159.64425659]
[109.08013916 175.24690247]
[98.21333313 186.49174500]
[82.65553284 188.06932068]
[69.75264740 179.23475647]
[65.59703827 164.15943909]
[72.15084076 149.96150208]
[86.31956482 143.34475708]
[90.02572632 128.80981445]
[85.83465576 122.59009552]
[75.61376953 133.56887817]
[66.83930969 145.73475647]
[51.84122086 145.49526978]
[43.45967484 133.05541992]
[48.87028122 119.06523132]
[63.43939972 115.50161743]
[77.45250702 110.15065765]
[73.26143646 103.93093872]
[58.39839172 101.90859985]
[43.53534317 99.88626862]
[28.67229652 97.86392975]
[13.80925083 95.84159851]
[-1.05379629 93.81926727]
[-12.55189705 106.18235016]
[-28.98588371 109.24920654]
[-43.87090683 102.01028442]
[-51.45229721 87.48348236]
[-66.35420227 85.77079773]
[-81.25610352 84.05810547]
[-96.15800476 82.34541321]
[-111.05990601 80.63272858]
[-125.65326691 86.74372864]
[-137.41386414 77.60384369]
[-152.31576538 75.89115143]
[-167.21766663 74.17845917]
[-182.11956787 72.46577454]
[-196.94152832 79.48300171]
[-210.27388000 69.93415070]
[-208.40142822 53.64225006]
[-193.25041199 47.36701584]
[-180.40689087 57.56386948]
[-165.50497437 59.27655792]
[-150.60307312 60.98925018]
[-135.70117188 62.70193863]
[-122.17369843 56.46842957]
[-109.34722137 65.73082733]
[-94.44531250 67.44351196]
[-79.54341125 69.15620422]
[-64.64151001 70.86889648]
[-49.73960876 72.58158112]
[-41.63433075 61.92792511]
[-29.21729469 56.64316559]
[-15.70484066 58.21291351]
[-4.65518856 66.33191681]
[0.96853811 78.95621490]
[15.83158493 80.97855377]
[30.69463158 83.00088501]
[45.55767822 85.02322388]
[60.42072678 87.04555511]
[75.28377533 89.06788635]
[81.22996521 84.49702454]
[69.15596771 75.59653473]
[56.77296829 67.13123322]
[56.35547638 52.13704300]
[68.24825287 42.99582291]
[82.63050842 47.25617599]
[87.62590027 61.39859772]
[93.12234497 75.35528564]
[99.06853485 70.78442383]
[100.93614197 55.90114212]
[102.80375671 41.01786041]
[104.67137146 26.13458061]
[106.53898621 11.25130081]
[96.64534760 -1.07312274]
[98.44719696 -16.77436066]
[110.87553406 -26.53714752]
[126.55683899 -24.56939507]
[136.18768311 -12.03853416]
[134.05424500 3.62109518]
[121.42226410 13.11891365]
[119.55464935 28.00219345]
[117.68703461 42.88547516]
[115.81942749 57.76875305]
[113.95181274 72.65203094]
[122.96934509 84.63886261]
[137.78709412 86.96997070]
[152.60485840 89.30107117]
[167.42262268 91.63217926]
[182.24037170 93.96327972]
[197.08157349 96.14012146]
[211.94462585 98.16245270]
[226.80767822 100.18479156]
[235.79902649 98.23353577]
[241.95764160 102.40691376]
[256.77542114 104.73801422]
[271.59317017 107.06912231]
[286.41091919 109.40022278]
[301.22866821 111.73133087]
[316.06362915 106.23267365]
[327.43383789 115.85387421]
[342.25158691 118.18498230]
[357.06933594 120.51608276]
[371.88711548 122.84719086]
[386.70486450 125.17829132]
[401.53979492 119.67964172]
[412.91000366 129.30084229]
[427.72778320 131.63194275]
[438.63528442 124.66916656]
[450.96328735 126.95808411]
[458.16674805 136.72625732]
[472.93280029 139.36512756]
[487.69888306 142.00398254]
[502.46493530 144.64285278]
[517.69573975 138.56381226]
[530.40649414 148.92567444]
[527.52148438 165.06906128]
[512.00854492 170.38702393]
[499.82604980 159.40890503]
[485.05999756 156.77003479]
[470.29394531 154.13117981]
[455.52789307 151.49230957]
[439.40603638 158.35421753]
[425.39666748 146.44970703]
[410.57891846 144.11860657]
[396.80383301 149.78399658]
[384.37374878 139.99604797]
[369.55599976 137.66494751]
[354.73825073 135.33384705]
[339.92047119 133.00274658]
[325.10272217 130.67163086]
[311.32766724 136.33702087]
[298.89758301 126.54908752]
[284.07983398 124.21798706]
[269.26205444 121.88687897]
[254.44430542 119.55577850]
[239.62654114 117.22467041]
[224.78533936 115.04783630]
[209.92228699 113.02549744]
[195.05924988 111.00316620]
[187.96156311 113.23217010]
[179.90927124 108.78103638]
[165.09150696 106.44993591]
[150.27375793 104.11883545]
[135.45599365 101.78772736]
[120.63823700 99.45662689]
[122.27598572 106.05084991]
[121.66621399 113.48678589]
[118.48714447 120.97415161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
[38 43]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[87 147]
[88 146]
[89 145]
[90 144]
[91 143]
[92 141]
[93 140]
[94 139]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[108 126]
[109 125]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
