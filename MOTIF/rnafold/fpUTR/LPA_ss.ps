%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUACCUUUGGGGCUGGCUUUCUCAAGGAAGCCCAGCUCCCUGUGAUUGAGAAUGAAGUGUGCAAUCGCUAUGACUGGGAUUGGGACACACUUUCUGGGCACUGCUGGCCAGUCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[74.38948059 347.49871826]
[64.45683289 359.21359253]
[49.99207306 364.37753296]
[34.88614655 361.60147095]
[23.20246887 351.63214111]
[18.08389282 337.15127563]
[20.90728951 322.05410767]
[30.91317940 310.40176392]
[45.41002655 305.32858276]
[48.12121964 290.57565308]
[50.83241272 275.82269287]
[53.54360580 261.06976318]
[56.25479507 246.31680298]
[58.96598816 231.56385803]
[61.67718124 216.81091309]
[64.38837433 202.05796814]
[67.09956360 187.30502319]
[69.81075287 172.55207825]
[72.52194977 157.79911804]
[75.23313904 143.04617310]
[67.95910645 129.92793274]
[54.00959015 124.41330719]
[40.06007767 118.89868164]
[26.11056519 113.38405609]
[12.16105270 107.86943054]
[-1.78845978 102.35480499]
[-16.06629372 97.75660706]
[-30.61231613 94.09419250]
[-45.15834045 90.43178558]
[-60.42998886 94.56546021]
[-70.88292694 83.95483398]
[-85.42894745 80.29241943]
[-99.97496796 76.63001251]
[-116.81100464 78.62606812]
[-123.38973236 63.00055313]
[-110.19604492 52.35335541]
[-96.31256104 62.08399200]
[-81.76654053 65.74639893]
[-67.22052002 69.40880585]
[-52.98929596 65.01317596]
[-41.49592972 75.88576508]
[-26.94990730 79.54817200]
[-12.40388584 83.21057892]
[-17.08462524 68.95959473]
[-9.08473873 56.27094269]
[5.79179621 54.35034561]
[16.75193977 64.59120941]
[15.84402466 79.56370544]
[3.72616553 88.40528870]
[17.67567825 93.91991425]
[31.62519073 99.43453979]
[45.57470322 104.94916534]
[59.52421570 110.46379089]
[73.47373199 115.97841644]
[80.00523376 81.79663849]
[110.02050781 79.17243195]
[120.55803680 68.49720764]
[131.09556580 57.82198715]
[141.63310242 47.14676285]
[152.17063904 36.47153854]
[162.70816040 25.79631424]
[173.24569702 15.12108994]
[183.78323364 4.44586611]
[193.89712524 -6.63154793]
[203.57205200 -18.09435081]
[213.24697876 -29.55715561]
[222.92189026 -41.01995850]
[232.59681702 -52.48276138]
[235.79525757 -61.17124557]
[242.67475891 -64.11332703]
[252.64401245 -75.32109833]
[262.61325073 -86.52887726]
[265.39385986 -102.69056702]
[280.87210083 -108.10869598]
[293.12527466 -97.20955658]
[289.54840088 -81.20524597]
[273.82101440 -76.55963135]
[263.85177612 -65.35186005]
[253.88253784 -54.14408493]
[244.05963135 -42.80783844]
[234.38470459 -31.34503555]
[224.70977783 -19.88223267]
[215.03485107 -8.41942883]
[205.35993958 3.04337502]
[205.34315491 6.68434906]
[203.48385620 10.48735142]
[199.73167419 13.54944038]
[194.45845032 14.98339844]
[183.92092896 25.65862274]
[173.38339233 36.33384705]
[162.84585571 47.00907135]
[152.30833435 57.68429565]
[141.77079773 68.35951996]
[131.23326111 79.03474426]
[120.69573212 89.70996857]
[125.03070068 98.48875427]
[125.48467255 109.03794861]
[121.38067627 119.59755707]
[112.84663391 128.17652893]
[124.91284943 137.08757019]
[136.97906494 145.99859619]
[153.31222534 150.54437256]
[153.46557617 167.49761963]
[137.21730042 172.33810425]
[128.06802368 158.06480408]
[116.00181580 149.15377808]
[103.93560028 140.24273682]
[89.98608398 145.75737000]
[87.27489471 160.51031494]
[84.56370544 175.26325989]
[81.85250854 190.01620483]
[79.14131927 204.76914978]
[76.43013000 219.52210999]
[73.71893311 234.27505493]
[71.00774384 249.02799988]
[68.29655457 263.78094482]
[65.58535767 278.53390503]
[62.87416840 293.28683472]
[60.16297531 308.03979492]
[71.90892029 317.93566895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 119]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 43]
[28 42]
[29 41]
[31 39]
[32 38]
[33 37]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[70 79]
[71 78]
[72 77]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
