%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCUUCAGCCGGAGAACCGUUUACUCGCUGCUGUGCCCAUCUAUCAGCAGGCUCCGGGCUGAAGAUUGCUUCUCUUCUCUCCUCCAAGGUCUAGUGACGGAGCCCGCGCGCGGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[71.92013550 129.44712830]
[67.09008789 123.92800903]
[63.32926941 117.63148499]
[60.75986099 110.76212311]
[59.46534729 103.54310608]
[59.48778152 96.20897675]
[45.06653214 92.08253479]
[30.64528084 87.95609283]
[16.22402954 83.82965088]
[1.80277836 79.70320892]
[-12.61847210 75.57676697]
[-27.03972435 71.45032501]
[-41.46097565 67.32388306]
[-55.93333817 63.38045502]
[-70.45449829 59.62066650]
[-84.97565460 55.86087799]
[-99.49681091 52.10108948]
[-106.52632904 60.99956512]
[-117.71060181 65.89855194]
[-130.75552368 64.91872406]
[-142.56689453 57.48810577]
[-156.98814392 61.61454773]
[-164.43789673 75.55287170]
[-179.58558655 80.06096649]
[-193.44436646 72.46427155]
[-197.79206848 57.26976395]
[-190.04927063 43.49207687]
[-174.80964661 39.30526733]
[-161.11459351 47.19329453]
[-146.69332886 43.06685257]
[-144.60992432 28.21224594]
[-157.33958435 20.27778625]
[-170.06924438 12.34332561]
[-182.79891968 4.40886545]
[-195.52857971 -3.52559447]
[-208.25823975 -11.46005440]
[-221.43084717 -3.66639400]
[-236.71708679 -2.89864540]
[-250.60429382 -9.33323193]
[-259.90130615 -21.49153328]
[-262.47171021 -36.57965851]
[-257.72488403 -51.13047028]
[-246.75157166 -61.80029678]
[-232.07339478 -66.13729095]
[-217.06326294 -63.14484024]
[-205.17041016 -53.51058960]
[-199.12773132 -39.44842148]
[-200.32377625 -24.18971825]
[-187.59411621 -16.25525856]
[-174.86445618 -8.32079792]
[-162.13479614 -0.38633811]
[-149.40512085 7.54812193]
[-136.67546082 15.48258209]
[-107.64569855 15.29886055]
[-95.73702240 37.57993317]
[-81.21586609 41.33972168]
[-66.69470978 45.09951019]
[-52.17354965 48.85929489]
[-44.82596588 47.47422409]
[-37.33453369 52.90263367]
[-22.91328239 57.02907562]
[-8.49203110 61.15551758]
[5.92922020 65.28195953]
[20.35047150 69.40840149]
[34.77172089 73.53484344]
[49.19297409 77.66128540]
[63.61422348 81.78772736]
[79.05601501 65.11502838]
[101.03076935 59.32384872]
[122.68399811 66.22060394]
[137.26150513 83.65400696]
[151.87326050 80.26329041]
[166.48500061 76.87256622]
[181.09674072 73.48184967]
[195.70848083 70.09112549]
[210.27609253 66.51558685]
[224.79725647 62.75579453]
[226.97033691 47.73736191]
[234.70695496 34.73014069]
[246.80142212 25.70031548]
[261.39208984 21.99893188]
[276.24789429 24.15983963]
[289.10955811 31.82293320]
[298.03308105 43.79372406]
[312.55426025 40.03393936]
[327.07540894 36.27415085]
[340.89337158 26.45070839]
[354.15811157 37.00926971]
[347.68423462 52.67851257]
[330.83520508 50.79530716]
[316.31402588 54.55509567]
[301.79287720 58.31488419]
[299.80007935 73.11211395]
[292.27343750 86.05410004]
[280.33297729 95.15303802]
[265.77938843 98.99762726]
[250.82246399 96.97189331]
[237.74554443 89.35366821]
[228.55703735 77.27695465]
[214.03588867 81.03674316]
[208.28372192 85.81357574]
[199.09919739 84.70286560]
[184.48745728 88.09358978]
[169.87571716 91.48430634]
[155.26397705 94.87503052]
[140.65223694 98.26575470]
[139.27439880 110.63638306]
[134.22131348 122.01167297]
[125.96580505 131.32711792]
[133.24533081 144.44232178]
[140.52487183 157.55752563]
[147.80439758 170.67271423]
[160.77775574 181.58731079]
[153.88108826 197.07511902]
[137.08935547 194.73544312]
[134.68919373 177.95225525]
[127.40966797 164.83705139]
[120.13013458 151.72184753]
[112.85060883 138.60665894]
[105.71138000 140.28637695]
[98.38659668 140.65721130]
[91.11423492 139.70710754]
[84.13056183 137.46694946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 58]
[15 57]
[16 56]
[17 55]
[21 30]
[22 29]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[76 100]
[77 99]
[84 92]
[85 91]
[86 90]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
