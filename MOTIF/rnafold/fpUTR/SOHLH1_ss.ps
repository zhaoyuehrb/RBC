%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGGGCUGCCUGCGGAAGGGGCCGUGCGCGUGGGGUCGCUCCGCAGCUGCGAGUUC\
) } def
/len { sequence length } bind def

/coor [
[78.00068665 274.22897339]
[65.55523682 262.71606445]
[73.17297363 247.56990051]
[74.69049835 232.64685059]
[76.20802307 217.72381592]
[77.72554779 202.80078125]
[68.13777161 193.85867310]
[65.53295135 180.80854797]
[71.11582947 168.51205444]
[82.99668121 161.68733215]
[85.26809692 146.86030579]
[79.54728699 133.10815430]
[89.28509521 120.63877106]
[91.55651093 105.81174469]
[89.51671600 97.65813446]
[94.33688354 90.29895782]
[97.35636139 75.60601044]
[100.37583923 60.91305923]
[103.39531708 46.22010803]
[106.41479492 31.52715874]
[105.06007385 22.08684921]
[109.97730255 16.17510796]
[113.73709106 1.65395045]
[109.70584106 -13.64505482]
[120.38626862 -24.02666092]
[124.14604950 -38.54781723]
[127.90583801 -53.06897354]
[131.66563416 -67.59013367]
[120.65781403 -78.30104065]
[116.49567413 -93.08522797]
[120.29879761 -107.96581268]
[131.04415894 -118.94000244]
[145.84132385 -123.05577850]
[160.70991516 -119.20603943]
[171.65036011 -108.42632294]
[175.71974182 -93.61634064]
[171.82341003 -78.75988770]
[161.00946045 -67.85327911]
[146.18678284 -63.83034515]
[142.42700195 -49.30918884]
[138.66720581 -34.78802872]
[134.90742493 -20.26687431]
[139.20759583 -6.00651884]
[128.25825500 5.41373825]
[124.49846649 19.93489456]
[121.10774231 34.54663849]
[118.08826447 49.23958588]
[115.06878662 63.93253708]
[112.04930878 78.62548828]
[109.02983093 93.31843567]
[106.38353729 108.08316040]
[104.11211395 122.91018677]
[109.67046356 137.72285461]
[100.09512329 149.13172913]
[97.82370758 163.95874023]
[108.40460205 177.65007019]
[106.04961395 194.45678711]
[92.64859009 204.31829834]
[91.13106537 219.24134827]
[89.61354065 234.16438293]
[88.09601593 249.08741760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[6 58]
[10 55]
[11 54]
[13 52]
[14 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[22 45]
[23 44]
[25 42]
[26 41]
[27 40]
[28 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
