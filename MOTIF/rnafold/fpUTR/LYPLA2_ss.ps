%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUUCCGGCGGGGGCGGCCGAGGGGGAAGAGUGUGUCUGCGGGAGAAAGAGGAGAAUCGCCCAAGCGGCCUCGGAAGUCCCAGGGAGUGGAGGCCCCCGCCGUGGAGCCGUGUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[150.73847961 533.14624023]
[149.81404114 517.99664307]
[154.42842102 503.53732300]
[163.95755005 491.72375488]
[177.11270142 484.15365601]
[174.80433655 469.33233643]
[172.49598694 454.51101685]
[170.18762207 439.68969727]
[167.87927246 424.86837769]
[165.19004822 410.11141968]
[162.12178040 395.42855835]
[159.05349731 380.74572754]
[155.98521423 366.06289673]
[152.91693115 351.38006592]
[149.84864807 336.69723511]
[146.78036499 322.01440430]
[143.71208191 307.33157349]
[140.64381409 292.64871216]
[128.07827759 284.73400879]
[124.75743866 269.88723755]
[133.14433289 256.76098633]
[130.07604980 242.07815552]
[127.00776672 227.39532471]
[109.62539673 220.86611938]
[99.49230957 205.13055420]
[100.75982666 186.30943298]
[113.10314941 171.84979248]
[108.91086578 157.44755554]
[104.71858215 143.04530334]
[100.52629852 128.64305115]
[86.16522217 125.08586121]
[75.49410248 114.83787537]
[71.35909271 100.63238525]
[74.86306763 86.25823975]
[85.07145691 75.54923248]
[80.87917328 61.14698029]
[66.42745209 55.81275558]
[57.98643112 43.13984680]
[58.61875153 28.10441780]
[67.87252808 16.46372986]
[63.68024445 2.06148219]
[59.48796082 -12.34076595]
[55.29567719 -26.74301338]
[50.73395157 -41.03254318]
[45.80581665 -55.19988251]
[40.87768173 -69.36721802]
[29.03594398 -79.85930634]
[32.16229248 -94.42210388]
[27.23415565 -108.58944702]
[12.13344479 -111.39374542]
[0.46842721 -121.38488770]
[-4.62306547 -135.87530518]
[-1.77144694 -150.96714783]
[8.25621128 -162.60079956]
[22.76251984 -167.64685059]
[37.84535217 -164.74794006]
[49.44750595 -154.68385315]
[54.44805908 -140.16180420]
[51.50188828 -125.08813477]
[41.40149307 -113.51757812]
[46.32963181 -99.35024261]
[57.81887436 -89.87150574]
[55.04502106 -74.29535675]
[59.97315598 -60.12801743]
[64.90129089 -45.96068192]
[68.83925629 -43.07091904]
[70.93392944 -37.62654495]
[69.69792175 -30.93529892]
[73.89020538 -16.53305054]
[78.08248901 -2.13080215]
[82.27478027 12.27144623]
[96.33039856 17.12710762]
[104.93339539 29.47427177]
[104.61257172 44.69762421]
[95.28141785 56.95469666]
[99.47370148 71.35694122]
[113.83477783 74.91413879]
[124.50589752 85.16212463]
[128.64091492 99.36761475]
[125.13693237 113.74176025]
[114.92854309 124.45076752]
[119.12082672 138.85301208]
[123.31311035 153.25526428]
[127.50539398 167.65751648]
[138.99958801 169.64581299]
[148.84686279 175.80181885]
[155.60833740 185.17993164]
[158.31349182 196.36721802]
[156.59934998 207.69624329]
[150.75860596 217.49359131]
[141.69059753 224.32704163]
[144.75888062 239.00988770]
[147.82716370 253.69271851]
[160.76866150 262.36193848]
[163.67117310 277.29614258]
[155.32664490 289.58044434]
[158.39492798 304.26327515]
[161.46321106 318.94610596]
[164.53147888 333.62893677]
[167.59976196 348.31179810]
[170.66804504 362.99462891]
[173.73632812 377.67745972]
[176.80461121 392.36029053]
[179.87289429 407.04312134]
[184.10862732 412.36843872]
[184.81842041 418.15853882]
[182.70059204 422.56002808]
[185.00894165 437.38134766]
[187.31730652 452.20266724]
[189.62565613 467.02398682]
[191.93402100 481.84530640]
[206.76826477 485.05615234]
[219.43872070 493.41223145]
[228.23184204 505.78338623]
[231.95838928 520.49658203]
[230.11442566 535.56188965]
[222.94929504 548.94189453]
[211.43203735 558.82714844]
[197.12025452 563.88061523]
[181.94952393 563.41888428]
[167.97154236 557.50445557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[21 93]
[22 92]
[23 91]
[27 84]
[28 83]
[29 82]
[30 81]
[35 76]
[36 75]
[40 71]
[41 70]
[42 69]
[43 68]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
