%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCCGGGCUAAGAGCGGCCGGCUGGAGCCGCUGAGCCCCCGCUGCGGCCGGGAGCUGCAUGGGGGAGCGCCGGCAGCGCUUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[9.50001526 204.95135498]
[1.72188497 201.98927307]
[-10.35416603 210.88696289]
[-22.43021584 219.78465271]
[-34.50626755 228.68235779]
[-46.58231735 237.58004761]
[-58.65836716 246.47775269]
[-70.73442078 255.37544250]
[-68.35873413 270.49545288]
[-73.29276276 284.98385620]
[-84.40270233 295.51132202]
[-99.13558197 299.65875244]
[-114.10588074 296.47302246]
[-125.87353516 286.68627930]
[-131.73443604 272.54736328]
[-130.34176636 257.30535889]
[-122.01558685 244.46272278]
[-108.66915894 236.97061157]
[-93.36941528 236.55067444]
[-79.63211823 243.29939270]
[-67.55606842 234.40170288]
[-55.48001480 225.50399780]
[-43.40396500 216.60630798]
[-31.32791328 207.70860291]
[-19.25186157 198.81091309]
[-7.17581129 189.91320801]
[-0.99249852 169.25848389]
[21.05050468 165.92033386]
[31.83285904 155.49244690]
[35.60261154 141.08277893]
[50.90141296 137.05076599]
[61.68376923 126.62287903]
[72.46612549 116.19499207]
[83.24848175 105.76710510]
[87.26499176 87.68365479]
[105.20413208 83.06512451]
[115.26589966 71.94034576]
[125.32767487 60.81556320]
[135.38945007 49.69078064]
[138.73684692 31.67954636]
[155.48937988 26.75313759]
[165.17379761 15.29835510]
[174.66545105 3.68334675]
[183.96170044 -8.08864403]
[193.25794983 -19.86063385]
[202.55419922 -31.63262558]
[200.90391541 -47.12179184]
[210.49932861 -58.92783737]
[225.27604675 -60.40567780]
[234.57229614 -72.17766571]
[243.86854553 -83.94966125]
[253.16479492 -95.72164917]
[262.46105957 -107.49364471]
[271.75729370 -119.26563263]
[271.32052612 -135.30273438]
[283.67889404 -145.53260803]
[299.35211182 -142.10775757]
[306.31704712 -127.65544128]
[299.23077393 -113.26223755]
[283.52929688 -109.96938324]
[274.23303223 -98.19739532]
[264.93679810 -86.42539978]
[255.64054871 -74.65341187]
[246.34429932 -62.88142014]
[237.04804993 -51.10942841]
[239.03601074 -36.39265060]
[229.77598572 -24.32174873]
[214.32618713 -22.33637810]
[205.02993774 -10.56438637]
[195.73368835 1.20760429]
[186.43745422 12.97959518]
[184.72860718 20.32783890]
[176.62858582 24.98277283]
[166.94416809 36.43755722]
[167.61225891 48.64234543]
[159.46159363 58.28588486]
[146.51422119 59.75255203]
[136.45245361 70.87733459]
[126.39068604 82.00211334]
[116.32891083 93.12689972]
[117.41368866 103.26132965]
[112.73500824 112.31634521]
[103.84138489 117.29499054]
[93.67636871 116.54946136]
[82.89401245 126.97734070]
[72.11165619 137.40522766]
[61.32929993 147.83311462]
[56.78832245 162.98864746]
[42.26074600 166.27479553]
[31.47838974 176.70268250]
[32.97457123 185.37525940]
[30.81876945 193.80926514]
[25.46324348 200.55049133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[28 90]
[29 89]
[31 87]
[32 86]
[33 85]
[34 84]
[36 80]
[37 79]
[38 78]
[39 77]
[41 74]
[42 73]
[43 71]
[44 70]
[45 69]
[46 68]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
