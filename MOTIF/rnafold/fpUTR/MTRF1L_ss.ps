%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGCAACGCUUGCGCUGGGCGGGGCUUGGUGCGCUCUCACCCUUAUCUCCAAAUUCUGGGUGUUGUCGCGAGGGCUGCUGUGUCCGGAACUUCCGGUUCCGGUCAGGGUCCGCGAUCUCGGACUAAGG\
) } def
/len { sequence length } bind def

/coor [
[119.61215210 141.53540039]
[113.03682709 144.04393005]
[106.15547943 145.51852417]
[99.12962341 145.92459106]
[92.12420654 145.25260925]
[85.30366516 143.51831055]
[78.82811737 140.76245117]
[72.84957886 137.04969788]
[67.50837708 132.46722412]
[62.92991257 127.12258911]
[49.54040527 133.88432312]
[45.51064301 139.32785034]
[40.12894058 141.51396179]
[35.34287262 140.63183594]
[21.64457130 146.74383545]
[7.94627094 152.85583496]
[-5.75202990 158.96784973]
[-19.45033073 165.07984924]
[-33.14863205 171.19184875]
[-46.84693146 177.30384827]
[-60.54523087 183.41584778]
[-74.24353027 189.52784729]
[-86.24446106 201.50341797]
[-101.07419586 193.28665161]
[-97.28382874 176.76184082]
[-80.35552979 175.82955933]
[-66.65723419 169.71754456]
[-52.95893097 163.60554504]
[-39.26063156 157.49354553]
[-25.56233215 151.38154602]
[-11.86403179 145.26954651]
[1.83426881 139.15754700]
[15.53256893 133.04554749]
[29.23086929 126.93354034]
[42.77867126 120.49481964]
[56.16817856 113.73308563]
[54.10013962 101.74044037]
[55.25406647 89.62562561]
[59.54895782 78.23904419]
[66.68332672 68.37998199]
[57.63536453 56.41610336]
[48.58740616 44.45222473]
[39.53944397 32.48834610]
[30.49148560 20.52446556]
[15.90413380 24.71655464]
[0.78782707 23.35210609]
[-12.81307793 16.61565018]
[-23.05916977 5.41823912]
[-28.56475067 -8.72577095]
[-28.58523369 -23.90351868]
[-23.11785126 -38.06233597]
[-12.90202045 -49.28736496]
[0.68065220 -56.06050491]
[15.79322052 -57.46575165]
[30.39183426 -53.31304932]
[42.50215149 -44.16402435]
[50.48634720 -31.25600433]
[53.26463318 -16.33469009]
[50.46125793 -1.41807139]
[42.45536423 11.47650433]
[51.50332642 23.44038391]
[60.55128479 35.40426254]
[69.59924316 47.36814117]
[78.64720917 59.33202362]
[105.07115173 54.34794998]
[129.75715637 65.00945282]
[144.24496460 87.66269684]
[159.15769958 86.04707336]
[174.07044983 84.43145752]
[182.36109924 80.36041260]
[189.35954285 82.96031189]
[204.30673218 81.70275116]
[219.25392151 80.44519806]
[234.20112610 79.18763733]
[249.14831543 77.93008423]
[264.06106567 76.31446075]
[278.93075562 74.34170532]
[293.20150757 62.77747726]
[309.15570068 69.98457336]
[323.97381592 67.65582275]
[338.79196167 65.32707214]
[351.22357178 55.54110336]
[364.99774170 61.20868301]
[379.81588745 58.87993240]
[392.24752808 49.09396744]
[406.02169800 54.76154709]
[420.83981323 52.43279648]
[435.65795898 50.10404587]
[450.47607422 47.77529526]
[465.29418945 45.44654465]
[480.11233521 43.11779404]
[494.93045044 40.78904343]
[509.74859619 38.46029282]
[524.45697021 30.02823639]
[536.63116455 41.82759476]
[528.66314697 56.79242325]
[512.07733154 53.27841949]
[497.25921631 55.60717010]
[482.44107056 57.93592072]
[467.62295532 60.26467133]
[452.80480957 62.59342194]
[437.98669434 64.92217255]
[423.16857910 67.25092316]
[408.35043335 69.57967377]
[396.97869873 79.19907379]
[382.14462280 73.69805908]
[367.32650757 76.02680969]
[355.95477295 85.64620972]
[341.12069702 80.14519501]
[326.30258179 82.47394562]
[311.48443604 84.80269623]
[304.05969238 94.43116760]
[291.66116333 96.44418335]
[280.90350342 89.21141815]
[266.03381348 91.18417358]
[262.41976929 94.44352722]
[256.69058228 95.40180206]
[250.40586853 92.87727356]
[235.45867920 94.13482666]
[220.51148987 95.39238739]
[205.56430054 96.64994812]
[190.61709595 97.90750122]
[175.68606567 99.34419250]
[160.77333069 100.95981598]
[145.86058044 102.57543182]
[144.92886353 109.55106354]
[142.94245911 116.30248260]
[139.94799805 122.67120361]
[136.01576233 128.50773621]
[131.23806763 133.67504883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 36]
[11 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[67 125]
[68 124]
[69 123]
[71 122]
[72 121]
[73 120]
[74 119]
[75 118]
[76 115]
[77 114]
[79 111]
[80 110]
[81 109]
[83 107]
[84 106]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
