%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGGGCGAUCAGGCAGCGACCCUAGAGGCGUCUGUAGGGUAAAGCUGGGGGUUCUGUAGCCGGAGGCGGCGGCGAGUCCAGAACGUCCUGGCCUUACAGGGAGAAGGCGUCACUCGCGGUUACAAGUGCCUGACCCUCACUCCAGUUGGCGGAGGAGGAGAAGGAAGGGGCCGGGCCGGGUCCCCUCCCCUCGCGCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[276.79730225 282.55361938]
[291.71981812 281.03863525]
[280.83261108 270.72027588]
[269.94540405 260.40188599]
[259.05819702 250.08352661]
[248.17098999 239.76516724]
[237.28378296 229.44679260]
[226.39657593 219.12841797]
[209.13606262 215.97074890]
[204.03678894 198.27900696]
[192.99275208 188.12867737]
[181.71830750 178.23489380]
[170.21943665 168.60287476]
[158.72056580 158.97084045]
[147.22169495 149.33880615]
[135.72282410 139.70678711]
[124.22395325 130.07475281]
[112.72508240 120.44272614]
[93.71805573 123.24585724]
[78.71014404 111.25055695]
[77.25547028 92.09308624]
[65.32608032 82.99971008]
[53.39668655 73.90632629]
[41.46729279 64.81294250]
[28.41230011 68.13838196]
[16.00730324 63.40536880]
[8.70279312 52.55183029]
[8.98057365 39.66681671]
[-2.80806923 30.39169312]
[-14.59671211 21.11657143]
[-26.52610588 12.02318954]
[-38.59344864 3.11368489]
[-50.66078949 -5.79581928]
[-62.72813034 -14.70532417]
[-74.79547119 -23.61482811]
[-86.86281586 -32.52433395]
[-101.88916779 -24.22027016]
[-118.97839355 -23.32027626]
[-134.69190979 -29.95701599]
[-145.88908386 -42.75151825]
[-150.35493469 -59.09940720]
[-147.23820496 -75.70093536]
[-159.57292175 -84.23645020]
[-171.90762329 -92.77197266]
[-184.24232483 -101.30748749]
[-199.99317932 -102.79777527]
[-206.05619812 -116.40251923]
[-218.39091492 -124.93803406]
[-230.72561646 -133.47355652]
[-243.06031799 -142.00907898]
[-255.39501953 -150.54458618]
[-267.72973633 -159.08010864]
[-280.06442261 -167.61563110]
[-292.46417236 -176.05638123]
[-304.92822266 -184.40187073]
[-317.39230347 -192.74737549]
[-329.85635376 -201.09286499]
[-342.32040405 -209.43835449]
[-354.78445435 -217.78385925]
[-374.25390625 -212.83984375]
[-390.83093262 -223.63517761]
[-394.08081055 -242.83927917]
[-406.91525269 -250.60311890]
[-419.74966431 -258.36697388]
[-432.58410645 -266.13082886]
[-447.32543945 -260.91290283]
[-461.95379639 -266.43966675]
[-469.56210327 -280.10159302]
[-466.55795288 -295.44787598]
[-454.35980225 -305.23251343]
[-438.72726440 -304.83551025]
[-427.04153442 -294.44427490]
[-424.82025146 -278.96524048]
[-411.98580933 -271.20141602]
[-399.15139771 -263.43756104]
[-386.31695557 -255.67370605]
[-377.37142944 -260.72506714]
[-367.05548096 -261.61187744]
[-357.22689819 -258.10711670]
[-349.68365479 -250.78070068]
[-345.83511353 -240.90794373]
[-346.43896484 -230.24790955]
[-333.97491455 -221.90242004]
[-321.51086426 -213.55691528]
[-309.04678345 -205.21142578]
[-296.58273315 -196.86593628]
[-284.11868286 -188.52043152]
[-276.80819702 -187.41062927]
[-271.52890015 -179.95033264]
[-259.19421387 -171.41481018]
[-246.85951233 -162.87928772]
[-234.52479553 -154.34378052]
[-222.19009399 -145.80825806]
[-209.85539246 -137.27273560]
[-197.52069092 -128.73722839]
[-182.65208435 -127.85745239]
[-175.70680237 -113.64218903]
[-163.37210083 -105.10667419]
[-151.03739929 -96.57115936]
[-138.70269775 -88.03563690]
[-127.96485138 -95.35507965]
[-115.34739685 -98.59641266]
[-102.34767151 -97.35256958]
[-90.51605988 -91.75006104]
[-81.27101135 -82.43654633]
[-75.72904205 -70.50597382]
[-74.56991577 -57.37015152]
[-77.95330811 -44.59167480]
[-65.88596344 -35.68217087]
[-53.81862640 -26.77266502]
[-41.75128555 -17.86316109]
[-29.68394279 -8.95365620]
[-17.61660004 -0.04415198]
[-12.84003353 0.14233243]
[-8.13103390 3.33457828]
[-5.32158995 9.32792759]
[6.46705294 18.60305023]
[18.25569534 27.87817192]
[34.85229111 25.17267609]
[48.54140854 35.50936508]
[50.56067276 52.88355255]
[62.49006653 61.97693253]
[74.41945648 71.07031250]
[86.34885406 80.16369629]
[95.75838470 76.29680634]
[105.92498779 76.66060638]
[115.03405762 81.19016266]
[121.45976257 89.07701874]
[124.05519104 98.91347504]
[122.35710907 108.94385529]
[133.85597229 118.57588196]
[145.35484314 128.20791626]
[156.85371399 137.83993530]
[168.35258484 147.47196960]
[179.85145569 157.10400391]
[191.35034180 166.73602295]
[196.50141907 167.63748169]
[200.39947510 170.17338562]
[202.63139343 173.59147644]
[203.14306641 177.08464050]
[214.18711853 187.23495483]
[227.08619690 187.47297668]
[236.07623291 196.15855408]
[236.71493530 208.24121094]
[247.60214233 218.55958557]
[258.48934937 228.87796021]
[269.37655640 239.19631958]
[280.26376343 249.51469421]
[291.15097046 259.83306885]
[302.03817749 270.15142822]
[313.38809204 279.95852661]
[325.17672729 289.23367310]
[336.96539307 298.50878906]
[348.75402832 307.78390503]
[360.61340332 316.96841431]
[372.54278564 326.06179810]
[384.47216797 335.15518188]
[396.40158081 344.24856567]
[405.12811279 346.96411133]
[408.44268799 353.57385254]
[420.23132324 362.84896851]
[432.01995850 372.12408447]
[443.80862427 381.39920044]
[443.14300537 366.41397095]
[453.16336060 355.25186157]
[468.13330078 354.30285645]
[479.48303223 364.11019897]
[480.71511841 379.05950928]
[471.12429810 390.59277344]
[456.20178223 392.10775757]
[467.08898926 402.42611694]
[477.97619629 412.74447632]
[488.86340332 423.06286621]
[499.75061035 433.38122559]
[510.63781738 443.69958496]
[526.42767334 443.02529907]
[538.01300049 453.77505493]
[538.52026367 469.57119751]
[527.64862061 481.04217529]
[511.84802246 481.38244629]
[500.49264526 470.39013672]
[500.31942749 454.58679199]
[489.43222046 444.26843262]
[478.54501343 433.95007324]
[467.65780640 423.63168335]
[456.77059937 413.31332397]
[445.88339233 402.99496460]
[434.53347778 393.18786621]
[422.74484253 383.91271973]
[410.95620728 374.63760376]
[399.16757202 365.36248779]
[387.30819702 356.17794800]
[375.37878418 347.08459473]
[363.44940186 337.99121094]
[351.52001953 328.89782715]
[344.29125977 327.34225464]
[339.47891235 319.57254028]
[327.69024658 310.29742432]
[315.90161133 301.02230835]
[304.11297607 291.74719238]
[304.77856445 306.73242188]
[294.75820923 317.89450073]
[279.78826904 318.84353638]
[268.43856812 309.03619385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[10 141]
[11 140]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[21 124]
[22 123]
[23 122]
[24 121]
[28 118]
[29 117]
[30 116]
[31 113]
[32 112]
[33 111]
[34 110]
[35 109]
[36 108]
[42 100]
[43 99]
[44 98]
[45 97]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[62 76]
[63 75]
[64 74]
[65 73]
[151 200]
[152 199]
[153 198]
[154 197]
[155 195]
[156 194]
[157 193]
[158 192]
[160 191]
[161 190]
[162 189]
[163 188]
[170 187]
[171 186]
[172 185]
[173 184]
[174 183]
[175 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
