%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUAAGAGGCAGACAGAUACAUUGUUCUUCACUGGUCAGCUGAAAGUCAAUUCAUCAUCAGUGAUAUUCAAAAAUCACAAGUCUUUGCUGGC\
) } def
/len { sequence length } bind def

/coor [
[96.71511841 356.60113525]
[96.71511841 341.60113525]
[96.71511841 326.60113525]
[84.35318756 315.33462524]
[83.85700226 298.28106689]
[96.01091766 285.83526611]
[95.50968933 270.84365845]
[95.00846863 255.85203552]
[94.50724030 240.86041260]
[94.00601959 225.86878967]
[93.50479126 210.87716675]
[80.96834564 205.19338989]
[72.09463501 194.58384705]
[68.68392181 181.11100769]
[71.46710205 167.42672729]
[79.95001221 156.25044250]
[92.50000000 149.82864380]
[92.50000000 134.82864380]
[92.50000000 119.82864380]
[82.45826721 111.90432739]
[78.80330658 99.64575958]
[82.86585236 87.51616669]
[93.16676331 79.93181610]
[93.66798401 64.94019318]
[94.16921234 49.94856644]
[81.24058533 41.77557373]
[74.18530273 28.31749916]
[74.80945587 13.23516560]
[82.84538269 0.57499552]
[96.05036163 -6.31660271]
[96.55158234 -21.30822563]
[97.05281067 -36.29985046]
[97.55403137 -51.29147339]
[98.05525970 -66.28309631]
[98.55648804 -81.27471924]
[99.05770874 -96.26634216]
[99.55893707 -111.25796509]
[89.72259521 -118.35446930]
[84.67281342 -129.24891663]
[85.59595490 -141.09971619]
[92.13716888 -150.87931824]
[102.52161407 -156.14756775]
[104.02304840 -171.07223511]
[105.52449036 -185.99690247]
[107.02592468 -200.92156982]
[96.83251190 -212.99922180]
[98.24811554 -228.73999023]
[110.43286896 -238.80514526]
[126.15779114 -237.22320557]
[136.09355164 -224.93270874]
[134.34544373 -209.22538757]
[121.95059204 -199.42013550]
[120.44915771 -184.49546814]
[118.94771576 -169.57080078]
[117.44628143 -154.64613342]
[129.86007690 -141.39678955]
[128.83428955 -122.95532227]
[114.55056000 -110.75674438]
[114.04933167 -95.76512146]
[113.54811096 -80.77349854]
[113.04688263 -65.78187561]
[112.54566193 -50.79024887]
[112.04443359 -35.79862595]
[111.54321289 -20.80700111]
[111.04198456 -5.81537819]
[123.75716400 1.94282568]
[130.92953491 15.11146450]
[130.54492188 30.20180702]
[122.60649109 43.15858841]
[109.16083527 50.44979095]
[108.65960693 65.44141388]
[108.15838623 80.43303680]
[119.68121338 92.12123108]
[119.40695190 108.53202057]
[107.50000000 119.82864380]
[107.50000000 134.82864380]
[107.50000000 149.82864380]
[121.83545685 157.87240601]
[130.16194153 171.93733215]
[130.31753540 188.18820190]
[122.35372925 202.24780273]
[108.49641418 210.37593079]
[108.99764252 225.36755371]
[109.49887085 240.35917664]
[110.00009155 255.35079956]
[110.50131989 270.34243774]
[111.00254059 285.33404541]
[121.91625214 293.43188477]
[126.05029297 306.17193604]
[122.08811188 318.76135254]
[111.71511841 326.60113525]
[111.71511841 341.60113525]
[111.71511841 356.60113525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[17 77]
[18 76]
[19 75]
[23 72]
[24 71]
[25 70]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[42 55]
[43 54]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
