%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGAUGCGGAGCGCAACCACCUAGCGGUCGGAAAGUGCAUUUUUCAGAGCCCUAGGAAUCCGAGCUGACGGAUCCCUGACAGGGGCGACUGACUCCUAGUUAUCCCCCUAACCCCUAGGGGCCUUCAGCCCCAACCCCAUC\
) } def
/len { sequence length } bind def

/coor [
[40.54976273 142.98387146]
[27.55937958 150.48387146]
[14.56899929 157.98387146]
[1.57861805 165.48387146]
[-11.41176319 172.98387146]
[-24.40214348 180.48387146]
[-37.39252472 187.98387146]
[-50.38290787 195.48387146]
[-63.37328720 202.98387146]
[-76.36367035 210.48387146]
[-88.83571625 218.81741333]
[-100.73601532 227.94883728]
[-106.97425842 242.48826599]
[-121.78164673 244.09773254]
[-133.68194580 253.22914124]
[-145.58224487 262.36056519]
[-144.19619751 277.72555542]
[-151.35734558 291.39013672]
[-164.78062439 298.99404907]
[-180.18267822 298.11090088]
[-192.64880371 289.02246094]
[-198.20108032 274.62884521]
[-195.06781006 259.52304077]
[-184.24879456 248.52517700]
[-169.19636536 245.14469910]
[-154.71366882 250.46026611]
[-142.81336975 241.32884216]
[-130.91307068 232.19741821]
[-125.52601624 218.31114197]
[-109.86743164 216.04853821]
[-97.96713257 206.91711426]
[-112.54893494 203.39987183]
[-120.54394531 190.70814514]
[-117.41962433 176.03713989]
[-104.94721985 167.70411682]
[-90.19758606 170.43325806]
[-81.53256989 182.67733765]
[-83.86367035 197.49348450]
[-70.87329102 189.99348450]
[-57.88290787 182.49348450]
[-44.89252472 174.99348450]
[-31.90214348 167.49348450]
[-18.91176224 159.99348450]
[-5.92138195 152.49348450]
[7.06899929 144.99348450]
[20.05937958 137.49348450]
[33.04976273 129.99348450]
[28.24284172 115.25954437]
[26.63843346 99.84457397]
[28.30814362 84.43653870]
[33.17745209 69.72309875]
[41.02904510 56.36091232]
[51.51250076 44.94633484]
[64.15995026 35.98879623]
[78.40693665 29.88806725]
[75.48058319 15.17628765]
[72.55422974 0.46450856]
[69.62786865 -14.24727058]
[59.34696198 -26.27280426]
[64.45262146 -40.26499939]
[61.52626801 -54.97677612]
[58.59991455 -69.68855286]
[55.67355728 -84.40033722]
[52.74720383 -99.11211395]
[39.46882629 -107.68300629]
[36.22185516 -123.15016174]
[44.93265533 -136.33717346]
[60.43326950 -139.42044067]
[73.52745819 -130.57070923]
[76.44666290 -115.03836060]
[67.45898438 -102.03846741]
[70.38533783 -87.32669067]
[73.31169128 -72.61491394]
[76.23804474 -57.90313339]
[79.16440582 -43.19135284]
[89.23600006 -32.21810532]
[84.33965302 -17.17362595]
[87.26600647 -2.46184635]
[90.19235992 12.24993324]
[93.11871338 26.96171188]
[119.34491730 29.23476982]
[143.08026123 40.61957932]
[161.26858521 59.65023041]
[174.57374573 52.72399902]
[187.87890625 45.79777145]
[201.18406677 38.87154007]
[214.48924255 31.94531250]
[220.71450806 25.15513802]
[228.16105652 25.01670074]
[241.61415100 18.38237000]
[247.98606873 11.72961426]
[255.43386841 11.75365639]
[269.02847290 5.41438198]
[282.62310791 -0.92489189]
[296.21771240 -7.26416588]
[309.81231689 -13.60343933]
[321.61215210 -25.77719116]
[336.57669067 -17.80852699]
[333.06201172 -1.22288489]
[316.15161133 -0.00882294]
[302.55697632 6.33045101]
[288.96237183 12.66972446]
[275.36776733 19.00899887]
[261.77313232 25.34827232]
[248.24847412 31.83546066]
[234.79537964 38.46979141]
[221.41546631 45.25047302]
[208.11030579 52.17670441]
[194.80514526 59.10293198]
[181.49996948 66.02915955]
[168.19480896 72.95539093]
[170.99189758 81.50424194]
[172.72177124 90.33113098]
[173.35842896 99.30337524]
[172.89227295 108.28609467]
[171.33035278 117.14424896]
[168.69610596 125.74466705]
[165.02917480 133.95806885]
[160.38464355 141.66099548]
[154.83236694 148.73762512]
[164.96621704 159.79678345]
[175.10006714 170.85594177]
[185.23391724 181.91510010]
[195.36778259 192.97425842]
[211.26834106 195.10772705]
[219.39022827 208.94299316]
[213.50302124 223.86682129]
[198.12289429 228.43092346]
[185.04814148 219.13410950]
[184.30860901 203.10810852]
[174.17475891 192.04895020]
[164.04090881 180.98979187]
[153.90705872 169.93063354]
[143.77320862 158.87147522]
[134.87110901 164.54415894]
[125.24705505 168.88055420]
[115.10028839 171.79084778]
[104.64088440 173.21479797]
[94.08539581 173.12292480]
[83.65236664 171.51712036]
[73.55780029 168.43064880]
[64.01068115 163.92739868]
[55.20867920 158.10061646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 31]
[12 30]
[14 28]
[15 27]
[16 26]
[55 80]
[56 79]
[57 78]
[58 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[89 106]
[90 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[120 134]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
