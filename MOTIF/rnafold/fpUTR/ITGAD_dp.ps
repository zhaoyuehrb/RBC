%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:12 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ITGAD)
} def

/sequence { (\
CUGUGCUCUGUCCCCAACCUUCCACUUCCCCUCAACGCGCUGCUCAGGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 47 0.702598417 ubox
1 48 0.056596574 ubox
1 49 0.015827011 ubox
2 10 0.007271495 ubox
2 16 0.045839076 ubox
2 24 0.025151592 ubox
2 37 0.003630203 ubox
2 39 0.014679746 ubox
2 42 0.019158465 ubox
2 46 0.706279144 ubox
2 47 0.046215016 ubox
2 48 0.015874140 ubox
3 9 0.008413110 ubox
3 11 0.004061806 ubox
3 15 0.049397013 ubox
3 18 0.072569222 ubox
3 23 0.028227671 ubox
3 25 0.448078915 ubox
3 36 0.005284700 ubox
3 38 0.019989076 ubox
3 40 0.305848465 ubox
3 43 0.017412986 ubox
3 45 0.704257794 ubox
4 10 0.006878905 ubox
4 16 0.030762824 ubox
4 17 0.071592742 ubox
4 24 0.448899562 ubox
4 35 0.005207375 ubox
4 37 0.019990853 ubox
4 39 0.308100971 ubox
4 42 0.017322694 ubox
4 46 0.009685852 ubox
5 9 0.005567069 ubox
5 11 0.050612419 ubox
5 15 0.035392334 ubox
5 23 0.447287280 ubox
5 36 0.019846103 ubox
5 38 0.308852184 ubox
5 40 0.028532684 ubox
5 41 0.003196019 ubox
5 43 0.704227981 ubox
5 45 0.008005196 ubox
6 10 0.052494601 ubox
6 37 0.308630676 ubox
6 39 0.028755075 ubox
6 42 0.704850559 ubox
6 48 0.009655784 ubox
6 49 0.100310369 ubox
7 48 0.102910581 ubox
8 47 0.104567692 ubox
9 16 0.123891870 ubox
9 24 0.028625305 ubox
9 34 0.272712796 ubox
9 37 0.128335266 ubox
9 39 0.580860035 ubox
9 46 0.104535807 ubox
10 15 0.129854572 ubox
10 18 0.396306773 ubox
10 23 0.031797455 ubox
10 25 0.037218389 ubox
10 33 0.276101676 ubox
10 36 0.143507547 ubox
10 38 0.614347030 ubox
10 40 0.097131257 ubox
10 41 0.003969877 ubox
10 43 0.004082391 ubox
10 45 0.104296956 ubox
11 17 0.383587384 ubox
11 24 0.035595208 ubox
11 35 0.136879955 ubox
11 37 0.589190873 ubox
11 39 0.093862079 ubox
11 42 0.004366267 ubox
11 49 0.003648089 ubox
12 48 0.005915251 ubox
12 49 0.023101071 ubox
13 47 0.005903578 ubox
13 48 0.023572383 ubox
13 49 0.038313349 ubox
14 47 0.023474650 ubox
14 48 0.038967191 ubox
15 42 0.039500213 ubox
15 47 0.038953477 ubox
16 27 0.101660031 ubox
16 41 0.037113779 ubox
17 26 0.106150416 ubox
18 48 0.021741129 ubox
18 49 0.017704343 ubox
19 47 0.021797402 ubox
19 48 0.017905811 ubox
20 35 0.016344455 ubox
20 46 0.020587367 ubox
20 47 0.017678153 ubox
21 34 0.016291919 ubox
21 46 0.015757557 ubox
21 49 0.007512345 ubox
22 48 0.012181277 ubox
22 49 0.006388975 ubox
23 42 0.016675682 ubox
23 47 0.012189411 ubox
23 48 0.006492279 ubox
24 41 0.015120862 ubox
25 47 0.005924849 ubox
25 48 0.004512068 ubox
26 35 0.023708632 ubox
26 46 0.005669397 ubox
26 47 0.004481144 ubox
27 34 0.023577425 ubox
27 46 0.003979271 ubox
27 48 0.003934164 ubox
27 49 0.019050862 ubox
28 47 0.004475835 ubox
28 48 0.030741766 ubox
28 49 0.110270766 ubox
29 47 0.030696331 ubox
29 48 0.110206728 ubox
29 49 0.600126211 ubox
30 47 0.107408605 ubox
30 48 0.610434223 ubox
30 49 0.052029777 ubox
31 47 0.610875947 ubox
31 48 0.052876077 ubox
31 49 0.032809650 ubox
32 46 0.592756670 ubox
32 47 0.048469908 ubox
32 48 0.033524351 ubox
32 49 0.003575124 ubox
33 42 0.285439207 ubox
33 47 0.037902216 ubox
33 48 0.006211202 ubox
34 41 0.267493464 ubox
36 42 0.243382857 ubox
37 41 0.151716598 ubox
37 43 0.438453929 ubox
38 42 0.435807975 ubox
40 47 0.011166817 ubox
40 48 0.015620611 ubox
40 49 0.008851463 ubox
41 46 0.012360770 ubox
41 47 0.017987724 ubox
41 48 0.016372830 ubox
43 49 0.018112486 ubox
44 48 0.016756031 ubox
1 47 0.9500000 lbox
2 46 0.9500000 lbox
3 45 0.9500000 lbox
5 43 0.9500000 lbox
6 42 0.9500000 lbox
9 39 0.9500000 lbox
10 38 0.9500000 lbox
11 37 0.9500000 lbox
showpage
end
%%EOF
