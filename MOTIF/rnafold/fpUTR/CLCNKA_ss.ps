%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCACUGGAGCUGGGAGCAAAGGAGGCUCUGUGAGAGGAGGGCCAGUUCAGCCGCAGCAGGAGGACUGACAGGGGCCUG\
) } def
/len { sequence length } bind def

/coor [
[28.09910965 140.99131775]
[13.19481182 138.98561096]
[0.69094104 130.74165344]
[-6.96190739 117.93933868]
[-21.89144897 119.39150238]
[-36.82099152 120.84366608]
[-45.31345367 124.87969971]
[-52.35587692 122.05113220]
[-67.33049774 122.92330170]
[-82.30512238 123.79547882]
[-97.27973938 124.66764832]
[-112.25436401 125.53982544]
[-127.22898865 126.41199493]
[-132.99295044 140.54492188]
[-144.32389832 150.77098083]
[-158.97206116 155.05979919]
[-174.02905273 152.55979919]
[-186.50527954 143.76739502]
[-193.92358398 130.42829895]
[-194.81105042 115.19100189]
[-188.99148560 101.08088684]
[-177.62034607 90.89952087]
[-162.95541382 86.66842651]
[-147.90838623 89.22769165]
[-135.46687317 98.06916809]
[-128.10116577 111.43737030]
[-113.12654114 110.56520081]
[-98.15191650 109.69303131]
[-83.17729187 108.82085419]
[-68.20266724 107.94868469]
[-53.22805023 107.07650757]
[-38.27315521 105.91412354]
[-23.34361267 104.46195984]
[-8.41407013 103.00979614]
[-3.37183619 88.97265625]
[7.30894327 78.47358704]
[21.54734039 73.63323212]
[36.53648758 75.46234894]
[49.29688263 83.65132141]
[57.26865768 96.62098694]
[72.19819641 95.16882324]
[87.12773895 93.71665955]
[98.61328888 85.74333954]
[111.42009735 91.35379791]
[126.34963989 89.90163422]
[134.26831055 76.68797302]
[148.28538513 70.74028015]
[162.94354248 74.14652252]
[172.66882324 85.39627075]
[187.59837341 83.94410706]
[202.52790833 82.49194336]
[217.45745850 81.03977966]
[232.35603333 79.29838562]
[247.21803284 77.26841736]
[253.63221741 63.23767471]
[266.62609863 54.92126465]
[282.05337524 54.97292709]
[294.99127197 63.37617874]
[301.31130981 77.44956970]
[298.99685669 92.70233154]
[288.78640747 104.26736450]
[273.93804932 108.45431519]
[259.18991089 103.92713165]
[249.24800110 92.13042450]
[234.38600159 94.16039276]
[228.02069092 98.29309845]
[218.90962219 95.96932220]
[203.98007202 97.42148590]
[189.05053711 98.87364960]
[174.12098694 100.32581329]
[166.74597168 113.23886871]
[153.01899719 119.40606689]
[138.11846924 116.27112579]
[127.80180359 104.83117676]
[112.87226105 106.28334045]
[101.38671112 114.25666046]
[88.57990265 108.64620209]
[73.65036011 110.09836578]
[58.72082138 111.55052948]
[53.39788818 125.81333923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[40 79]
[41 78]
[42 77]
[44 75]
[45 74]
[49 70]
[50 69]
[51 68]
[52 67]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
