%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACGCUGGAGCUGCGGGGUUACCAUGGGAACCGAACCGCCGCGCCUCGCCCAGGACAGUUACACUUAGAGGCCUUCAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[115.43579102 236.37484741]
[101.32330322 231.29177856]
[88.93524170 222.83389282]
[79.06242371 211.54107666]
[72.33508301 198.13426208]
[69.18268585 183.46925354]
[69.80644989 168.48222351]
[74.16656494 154.12989807]
[81.98469543 141.32846069]
[92.76176453 130.89511108]
[105.80980682 123.49588013]
[120.29804230 119.60279846]
[107.12682343 112.42512512]
[93.14582825 112.57759094]
[85.69549561 100.74609375]
[72.52428436 93.56842041]
[59.35306168 86.39074707]
[46.18184280 79.21307373]
[32.63313675 72.77626038]
[18.74856949 67.10009766]
[4.86400509 61.42393112]
[-9.02055931 55.74776840]
[-18.39477730 55.36167145]
[-23.30704308 49.59677505]
[-36.97238159 43.41143036]
[-53.89543915 42.38841629]
[-57.59717178 25.84352112]
[-42.72359848 17.70636940]
[-30.78703880 29.74608803]
[-17.12169838 35.93143463]
[-3.34439373 41.86320114]
[10.54017067 47.53936768]
[24.42473602 53.21553421]
[38.30929947 58.89170074]
[41.87200165 57.69662476]
[46.21966171 58.32846832]
[50.40673065 61.14830017]
[53.35951614 66.04185486]
[66.53073883 73.21952820]
[79.70195770 80.39720154]
[92.87317657 87.57487488]
[106.85417175 87.42240906]
[114.30450439 99.25390625]
[127.47571564 106.43157959]
[142.41172791 107.81560516]
[156.67758179 103.18035126]
[170.94342041 98.54509735]
[185.20927429 93.90984344]
[199.47512817 89.27458191]
[202.81399536 77.56658936]
[211.38557434 69.09242249]
[222.89668274 65.95152283]
[234.34892273 68.83847046]
[242.81950378 76.89353943]
[257.38873291 73.32451630]
[261.60571289 58.55587769]
[272.65319824 47.88589096]
[287.55947876 44.18472672]
[302.31481934 48.44798279]
[312.95010376 59.52885818]
[316.60455322 74.44666290]
[312.29504395 89.18856812]
[301.18090820 99.78909302]
[286.25170898 103.39673615]
[271.52337646 99.04106140]
[260.95776367 87.89373016]
[246.38853455 91.46275330]
[238.08213806 107.57418060]
[220.40498352 112.82085419]
[204.11038208 103.54043579]
[189.84452820 108.17568970]
[175.57868958 112.81094360]
[161.31283569 117.44619751]
[147.04698181 122.08145142]
[160.57135010 128.56925964]
[172.03796387 138.23965454]
[180.71487427 150.47532654]
[186.04814148 164.49517822]
[187.69734192 179.40423584]
[185.55717468 194.25077820]
[179.76426697 208.08703613]
[170.68841553 220.02976990]
[158.90899658 229.31660461]
[145.17794800 235.35469055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 44]
[13 43]
[15 41]
[16 40]
[17 39]
[18 38]
[19 34]
[20 33]
[21 32]
[22 31]
[24 30]
[25 29]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[54 67]
[55 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
