%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:02 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (KCNH5)
} def

/sequence { (\
GCAUCCCCCCCUCCCCCGCCGCGGAUCCUGGCCGCUGCUCUCCAGACCCAGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 19 0.050510489 ubox
1 22 0.085450510 ubox
1 35 0.011631731 ubox
1 38 0.036356171 ubox
2 18 0.050650451 ubox
2 21 0.085437845 ubox
2 34 0.011709409 ubox
2 37 0.036416613 ubox
3 26 0.288402564 ubox
3 36 0.035490502 ubox
4 25 0.311551610 ubox
4 46 0.005949964 ubox
4 52 0.024778945 ubox
5 23 0.004469280 ubox
5 24 0.315495133 ubox
5 31 0.010244349 ubox
5 45 0.006416301 ubox
5 51 0.037749860 ubox
5 52 0.094265311 ubox
6 23 0.314533093 ubox
6 24 0.058882455 ubox
6 30 0.010215340 ubox
6 31 0.014615373 ubox
6 51 0.096129688 ubox
6 52 0.091373966 ubox
7 23 0.060895038 ubox
7 24 0.056947434 ubox
7 30 0.014644001 ubox
7 31 0.014815805 ubox
7 51 0.092687718 ubox
7 52 0.065508222 ubox
8 23 0.057017303 ubox
8 24 0.061691018 ubox
8 30 0.014821613 ubox
8 31 0.017142065 ubox
8 51 0.066458734 ubox
8 52 0.044454376 ubox
9 23 0.061736759 ubox
9 24 0.066913233 ubox
9 30 0.017135167 ubox
9 31 0.011671587 ubox
9 51 0.045035054 ubox
9 52 0.041862831 ubox
10 23 0.066915558 ubox
10 24 0.092299748 ubox
10 30 0.011702000 ubox
10 31 0.008310874 ubox
10 51 0.042339462 ubox
10 52 0.070662360 ubox
11 23 0.092529931 ubox
11 24 0.014544943 ubox
11 30 0.008363419 ubox
11 45 0.178668418 ubox
11 51 0.071815960 ubox
11 52 0.005373493 ubox
12 23 0.013236473 ubox
12 24 0.008917857 ubox
12 25 0.468636483 ubox
12 44 0.172949720 ubox
12 46 0.099762719 ubox
12 50 0.064197557 ubox
12 51 0.004333106 ubox
13 23 0.011337394 ubox
13 24 0.500491765 ubox
13 45 0.104479825 ubox
13 51 0.004789042 ubox
13 52 0.018665775 ubox
14 23 0.500128372 ubox
14 24 0.119301929 ubox
14 51 0.018939348 ubox
14 52 0.021958938 ubox
15 23 0.120031024 ubox
15 24 0.195306110 ubox
15 51 0.022157121 ubox
15 52 0.022703705 ubox
16 23 0.193823537 ubox
16 24 0.587417488 ubox
16 51 0.022891107 ubox
16 52 0.036896547 ubox
17 23 0.589458567 ubox
17 34 0.005392168 ubox
17 37 0.006793167 ubox
17 51 0.037492155 ubox
18 22 0.552432406 ubox
18 32 0.016060238 ubox
18 33 0.004080573 ubox
18 35 0.017578169 ubox
18 36 0.005145224 ubox
18 38 0.442570089 ubox
19 31 0.016534270 ubox
19 34 0.017652876 ubox
19 37 0.442774753 ubox
19 52 0.029460892 ubox
20 30 0.016512350 ubox
20 37 0.014071868 ubox
20 51 0.030098369 ubox
21 29 0.013600292 ubox
21 32 0.017952492 ubox
21 35 0.445584499 ubox
21 36 0.003641410 ubox
21 38 0.005042634 ubox
22 31 0.017868626 ubox
22 34 0.445901180 ubox
22 37 0.005045263 ubox
23 29 0.004224171 ubox
23 33 0.445891723 ubox
23 36 0.005013672 ubox
23 43 0.004453998 ubox
23 48 0.022778711 ubox
23 49 0.025766050 ubox
24 28 0.004663935 ubox
24 32 0.445140337 ubox
24 35 0.005000723 ubox
24 42 0.004460062 ubox
24 47 0.022854904 ubox
24 48 0.025736410 ubox
25 41 0.004351338 ubox
26 46 0.025892174 ubox
26 52 0.010098463 ubox
27 45 0.019109664 ubox
27 51 0.011755122 ubox
27 52 0.872887684 ubox
28 45 0.039422399 ubox
28 51 0.892707598 ubox
28 52 0.004562040 ubox
29 44 0.043416709 ubox
29 50 0.892708900 ubox
29 51 0.003225396 ubox
30 39 0.008759921 ubox
30 40 0.003785530 ubox
30 43 0.043372067 ubox
30 48 0.052350875 ubox
30 49 0.891409111 ubox
31 38 0.013417129 ubox
31 42 0.042509625 ubox
31 47 0.073390575 ubox
31 48 0.883490243 ubox
32 37 0.015663332 ubox
35 45 0.883873665 ubox
35 51 0.012467380 ubox
36 44 0.887355928 ubox
36 50 0.014050979 ubox
37 43 0.883136723 ubox
37 49 0.014290542 ubox
38 45 0.041874771 ubox
38 51 0.004216139 ubox
39 44 0.039042553 ubox
39 46 0.087037631 ubox
39 50 0.005134568 ubox
39 52 0.055508666 ubox
40 45 0.093398264 ubox
40 51 0.094807276 ubox
40 52 0.014670535 ubox
41 50 0.093794430 ubox
41 51 0.013103837 ubox
41 52 0.020743757 ubox
42 51 0.035840040 ubox
42 52 0.133660540 ubox
43 51 0.136626860 ubox
16 24 0.9500000 lbox
17 23 0.9500000 lbox
18 22 0.9500000 lbox
27 52 0.9500000 lbox
28 51 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
35 45 0.9500000 lbox
36 44 0.9500000 lbox
37 43 0.9500000 lbox
showpage
end
%%EOF
