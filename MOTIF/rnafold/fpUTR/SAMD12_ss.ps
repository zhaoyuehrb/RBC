%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGGUUGGUCCUGGAGCAGAUAAGCGCAGAAUAUUUAGGCGAAAGCGAGAGGAAGGGGGGAGCGCGGGGCAGGAGGAGUACCUCGGCCAAGAAAAUUAUGCAUGCGUUAGGGAAGCUCUGAGAGA\
) } def
/len { sequence length } bind def

/coor [
[88.44824982 437.97952271]
[80.47705841 424.85110474]
[80.15406036 409.49560547]
[87.56613922 396.04357910]
[100.71949005 388.11358643]
[100.35703278 373.11795044]
[99.99457550 358.12234497]
[99.45095825 343.13220215]
[98.72625732 328.14971924]
[98.00155640 313.16723633]
[89.22503662 304.75070190]
[88.55566406 292.20642090]
[96.90384674 282.28762817]
[96.54138947 267.29202271]
[96.17893219 252.29638672]
[95.81648254 237.30076599]
[95.45402527 222.30514526]
[95.09156799 207.30952454]
[87.04898834 194.77293396]
[94.45056152 180.78982544]
[94.08811188 165.79420471]
[93.72565460 150.79858398]
[76.88376617 145.66731262]
[62.77696991 135.13275146]
[53.07435226 120.44132233]
[48.92391205 103.33129883]
[50.81673431 85.82712555]
[58.52885437 69.99986267]
[47.79486847 59.52219391]
[37.06088638 49.04452133]
[26.32690048 38.56685257]
[9.97311306 46.21476364]
[-8.02582073 47.09280014]
[-24.98340797 41.09524155]
[-38.37818146 29.14072418]
[-46.22863007 13.03161907]
[-47.38629150 -4.81767273]
[-41.70370102 -21.74257660]
[-53.39881516 -31.13535309]
[-65.09393311 -40.52813339]
[-80.59615326 -39.00532532]
[-92.32286072 -48.69754028]
[-93.67908478 -63.48592377]
[-105.37419891 -72.87870026]
[-121.65531158 -74.84271240]
[-127.84526825 -90.02877808]
[-117.57636261 -102.81477356]
[-101.41237640 -100.04756165]
[-95.98142242 -84.57381439]
[-84.28630829 -75.18103790]
[-69.55367279 -77.04785919]
[-57.55935669 -67.68885040]
[-55.70115280 -52.22324753]
[-44.00603867 -42.83047104]
[-32.31092453 -33.43769073]
[-22.25812149 -40.35985565]
[-10.72985458 -44.41313934]
[1.47200680 -45.30754471]
[13.49662209 -42.97307205]
[24.50351143 -37.56514740]
[33.72130585 -29.45428467]
[40.50179672 -19.20071030]
[44.36552811 -7.51568079]
[45.03567123 4.78785706]
[42.45787811 16.85182762]
[36.80457306 27.83286667]
[47.53855515 38.31053925]
[58.27254105 48.78820801]
[69.00652313 59.26588058]
[89.39252472 49.92659760]
[111.81433868 50.19753647]
[131.96871948 60.02669144]
[142.95274353 49.81145477]
[153.93676758 39.59621429]
[155.20333862 26.69388390]
[164.64759827 18.41055107]
[176.80094910 18.81198311]
[188.02861023 8.86514378]
[199.25627136 -1.08169627]
[210.48393250 -11.02853584]
[215.16094971 -26.74659920]
[231.17237854 -30.29151535]
[242.04701233 -18.01657677]
[236.59799194 -2.54918981]
[220.43077087 0.19912505]
[209.20310974 10.14596462]
[197.97544861 20.09280396]
[186.74778748 30.03964424]
[182.15307617 46.93154907]
[164.15200806 50.58024597]
[153.16798401 60.79548264]
[142.18395996 71.01071930]
[145.66589355 76.88096619]
[148.33586121 83.16228485]
[150.14636230 89.74299622]
[151.06521606 96.50608063]
[151.07608032 103.33129883]
[150.17877197 110.09728241]
[148.38923645 116.68372345]
[145.73928833 122.97351074]
[142.27604675 128.85481262]
[138.06109619 134.22303772]
[133.16938782 138.98275757]
[127.68790436 143.04931641]
[121.71409607 146.35043335]
[115.35418701 148.82737732]
[108.72127533 150.43612671]
[109.08372498 165.43174744]
[109.44618225 180.42736816]
[117.51468658 194.03656006]
[110.08718872 206.94706726]
[110.44964600 221.94268799]
[110.81210327 236.93830872]
[111.17455292 251.93392944]
[111.53701019 266.92956543]
[111.89946747 281.92517090]
[121.86241150 297.35537720]
[112.98403931 312.44253540]
[113.70874023 327.42501831]
[114.43344116 342.40750122]
[118.00415802 350.92785645]
[114.99019623 357.75988770]
[115.35265350 372.75549316]
[115.71511078 387.75112915]
[129.23622131 395.03637695]
[137.28956604 408.11459351]
[137.70881653 423.46774292]
[130.38121033 436.96597290]
[117.27783203 444.97827148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[8 120]
[9 119]
[10 118]
[13 116]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[20 109]
[21 108]
[22 107]
[28 69]
[29 68]
[30 67]
[31 66]
[38 55]
[39 54]
[40 53]
[43 50]
[44 49]
[72 92]
[73 91]
[74 90]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
