%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGCGGGGGAUUGUUGACGCCUGCGGUUGCUGCGGUGGUGACGGGGCUGUUGGGGAGGGGCCAUUGGGGGAGGGAAACGGAGCAGUGACAGGUAUCCCAGAGGGUGCUGCUGAGGCGACG\
) } def
/len { sequence length } bind def

/coor [
[76.00539398 131.95616150]
[81.79909515 118.12023163]
[92.92290497 108.06066132]
[77.96620941 109.19965363]
[63.00951767 110.33865356]
[48.05282211 111.47764587]
[33.09613037 112.61664581]
[18.13943481 113.75563812]
[3.18274140 114.89463806]
[-2.73595262 125.36140442]
[-12.89732361 131.56181335]
[-24.67119598 132.02839661]
[-35.07614136 126.76044464]
[-41.53444672 117.19456482]
[-56.52963257 117.57455444]
[-71.52481842 117.95454407]
[-86.52000427 118.33453369]
[-101.51519012 118.71453094]
[-112.36875153 129.88761902]
[-127.58142090 130.05937195]
[-138.16636658 119.64330292]
[-153.16154480 120.02329254]
[-168.15673828 120.40328217]
[-183.15191650 120.78327179]
[-191.76484680 124.16064453]
[-198.53071594 120.97809601]
[-213.53071594 120.97809601]
[-228.53071594 120.97809601]
[-243.53071594 120.97809601]
[-259.36984253 127.02443695]
[-269.56460571 113.47809601]
[-259.36984253 99.93175507]
[-243.53071594 105.97809601]
[-228.53071594 105.97809601]
[-213.53071594 105.97809601]
[-198.53071594 105.97809601]
[-183.53190613 105.78808594]
[-168.53672791 105.40809631]
[-153.54153442 105.02810669]
[-138.54635620 104.64810944]
[-128.50256348 93.70929718]
[-113.30072021 93.11031342]
[-101.89517975 103.71933746]
[-86.89999390 103.33934784]
[-71.90480804 102.95935822]
[-56.90962219 102.57936859]
[-41.91443634 102.19937897]
[-30.23643875 88.21050262]
[-11.73299885 87.06484222]
[2.04374456 99.93794250]
[17.00043869 98.79895020]
[31.95713234 97.65995026]
[46.91382599 96.52095795]
[61.87051773 95.38195801]
[76.82720947 94.24295807]
[91.78390503 93.10396576]
[106.39565277 89.71324158]
[120.32544708 84.14900208]
[130.27087402 71.84456635]
[144.96023560 74.30865479]
[158.89002991 68.74440765]
[168.83544922 56.43997574]
[183.52482605 58.90406418]
[197.45462036 53.33982086]
[211.38441467 47.77557755]
[222.36878967 33.06247330]
[239.60101318 36.11297607]
[253.38539124 30.19763947]
[267.16976929 24.28230095]
[280.95413208 18.36696434]
[294.73849487 12.45162582]
[308.52285767 6.53628778]
[307.53494263 -9.31206608]
[312.00631714 -24.52077675]
[321.38284302 -37.26958847]
[334.52441406 -46.03915024]
[349.84359741 -49.79208755]
[365.49743652 -48.09566879]
[379.60900879 -41.17164612]
[390.49264526 -29.86742973]
[404.12274170 -36.13006592]
[409.37594604 -51.03575516]
[423.66629028 -57.78564835]
[438.51562500 -52.37516022]
[445.11404419 -38.01423264]
[439.54687500 -23.22295189]
[425.11697388 -16.77672005]
[410.38537598 -22.49997330]
[396.75531006 -16.23733902]
[398.33560181 -2.11161828]
[395.45541382 11.82933712]
[388.38540649 24.20971680]
[377.81033325 33.80349731]
[364.76278687 39.65586090]
[350.52249146 41.17820740]
[336.49053955 38.20732498]
[324.05184937 31.02277946]
[314.43820190 20.32065582]
[300.65383911 26.23599243]
[286.86944580 32.15132904]
[273.08508301 38.06666946]
[259.30072021 43.98200607]
[245.51635742 49.89734268]
[240.69273376 61.06837463]
[229.16291809 66.07595825]
[216.94865417 61.70537186]
[203.01885986 67.26961517]
[189.08906555 72.83386230]
[180.13999939 84.74030304]
[164.45426941 82.67420197]
[150.52447510 88.23844910]
[141.57540894 100.14488983]
[125.88968658 98.07879639]
[111.95989227 103.64303589]
[126.37905121 107.77678680]
[137.67327881 117.64797211]
[143.70002747 131.38400269]
[143.31599426 146.37907410]
[136.59402466 159.78860474]
[124.80931854 169.06871033]
[110.19746399 172.45896912]
[95.53039551 169.31619263]
[83.59050751 160.23660278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[6 53]
[7 52]
[8 51]
[9 50]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[21 40]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[29 33]
[57 114]
[58 113]
[60 111]
[61 110]
[63 108]
[64 107]
[65 106]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 98]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
