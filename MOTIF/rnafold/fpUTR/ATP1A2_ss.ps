%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAAAGCUACCCUGUUGCUUUGGCUUUCUCUGUCUGCCAGGGUCUCCGACUGUCCCAGACGGGCUGGUGUGGGCUUGGGAUCCUCCUGGUGACCUCUCCCGCUAAGGUCCCUCAGCCACUCUGCCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[118.55516815 149.04304504]
[105.32189941 141.98042297]
[98.81030273 128.46661377]
[89.59711456 140.30371094]
[80.38392639 152.14082336]
[71.17073059 163.97793579]
[61.95754242 175.81503296]
[52.74435425 187.65214539]
[43.53116226 199.48925781]
[48.74682999 214.00822449]
[45.26272202 229.03700256]
[34.19060135 239.77999878]
[19.06354332 242.80912781]
[4.70853519 237.15780640]
[-4.29379129 224.62937927]
[-5.07082558 209.22158813]
[2.62538028 195.85102844]
[16.33899498 188.78417969]
[31.69405365 190.27606201]
[40.90724564 178.43894958]
[50.12043762 166.60185242]
[59.33362579 154.76473999]
[68.54681396 142.92762756]
[77.76000977 131.09053040]
[86.97319794 119.25341797]
[73.21285248 125.22441864]
[60.56483841 133.28839111]
[45.65514755 131.64489746]
[35.06726074 121.01961517]
[33.47633362 106.10422516]
[41.58485413 93.48471832]
[55.81244659 88.73333740]
[69.87567139 93.94713593]
[84.58607483 96.88040924]
[73.08276367 87.25367737]
[61.57945633 77.62695312]
[50.07614517 68.00022888]
[38.57283401 58.37349701]
[24.17187881 63.52710724]
[9.22357845 60.79854202]
[-2.27549958 51.01909256]
[-7.30199623 36.89144897]
[-4.60031748 22.24336052]
[-16.10362625 12.61663342]
[-27.60693550 2.98990679]
[-39.11024475 -6.63682032]
[-55.13750458 -12.16522598]
[-54.26194000 -29.09654999]
[-37.74991608 -32.94225693]
[-29.48351860 -18.14012909]
[-17.98020935 -8.51340294]
[-6.47690010 1.11332417]
[5.02640963 10.74005127]
[18.96911240 5.49919128]
[33.76147079 7.95726967]
[45.41436386 17.55291748]
[50.73460007 31.78639412]
[48.19956207 46.87018967]
[59.70287323 56.49691391]
[71.20618439 66.12364197]
[82.70948792 75.75036621]
[94.21279907 85.37709808]
[108.75380707 89.05937958]
[123.45247650 86.06789398]
[138.15115356 83.07640839]
[152.84982300 80.08493042]
[160.72360229 75.26441193]
[167.93080139 77.20069122]
[182.69602966 74.55721283]
[194.91665649 64.50897217]
[208.80828857 69.88221741]
[223.57351685 67.23873138]
[238.33874512 64.59525299]
[253.10397339 61.95176697]
[261.08941650 57.31856155]
[268.24887085 59.42453003]
[283.07241821 57.13051987]
[297.09210205 45.26033020]
[313.19830322 52.12532425]
[327.96353149 49.48184204]
[342.72875977 46.83835602]
[357.49398804 44.19487381]
[365.47943115 39.56166840]
[372.63888550 41.66763687]
[387.46243286 39.37362671]
[402.28598022 37.07961655]
[407.79522705 33.15123749]
[413.58383179 32.73257828]
[417.86215210 35.04456711]
[432.77749634 33.45315170]
[447.69284058 31.86173439]
[462.60818481 30.27031898]
[477.52352905 28.67890167]
[485.14385986 15.16187763]
[499.26794434 8.73613071]
[514.46472168 11.87249279]
[524.89080811 23.36496735]
[526.53710938 38.79446793]
[518.77056885 52.22803116]
[504.57760620 58.50017929]
[489.41571045 55.19914627]
[479.11495972 43.59424210]
[464.19961548 45.18566132]
[449.28427124 46.77707672]
[434.36892700 48.36849213]
[419.45358276 49.95990753]
[404.57998657 51.90316391]
[389.75643921 54.19717407]
[374.93289185 56.49118423]
[360.13748169 58.96010208]
[345.37225342 61.60358429]
[330.60702515 64.24707031]
[315.84179688 66.89055634]
[308.62557983 76.67324066]
[296.27560425 78.95145416]
[285.36642456 71.95406342]
[270.54287720 74.24807739]
[255.74746704 76.71699524]
[240.98222351 79.36048126]
[226.21699524 82.00395966]
[211.45176697 84.64744568]
[200.28726196 94.50660706]
[185.33952332 89.32244110]
[170.57429504 91.96591949]
[155.84130859 94.78359985]
[141.14263916 97.77508545]
[126.44396210 100.76657104]
[111.74528503 103.75805664]
[126.56021118 101.40901947]
[139.90464783 108.25928497]
[146.63121033 121.66649628]
[144.14527893 136.45906067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[43 53]
[44 52]
[45 51]
[46 50]
[63 128]
[64 127]
[65 126]
[66 125]
[68 124]
[69 123]
[71 121]
[72 120]
[73 119]
[74 118]
[76 117]
[77 116]
[79 113]
[80 112]
[81 111]
[82 110]
[84 109]
[85 108]
[86 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
