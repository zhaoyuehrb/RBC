%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCUCAUCACGUGGCCCCGUCGCGCGUCACGUGGCCGCCGGCGCGGGUCACGAGAACAAACACGGGGGCAGCCGGCGCUUCCCGGCCGGUGUCGCUCCGCGGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[120.93135071 195.55056763]
[118.81572723 180.70051575]
[116.70011139 165.85044861]
[114.58448792 151.00039673]
[112.46887207 136.15034485]
[94.07022095 136.51275635]
[78.25199127 128.36393738]
[68.55477142 114.17574310]
[66.83686066 97.68772125]
[52.49436188 93.29537964]
[37.03343582 96.65252686]
[27.12970161 85.52754211]
[12.78719997 81.13520050]
[-1.55530131 76.74285889]
[-15.89780235 72.35051727]
[-30.24030304 67.95817566]
[-44.58280563 63.56583405]
[-58.92530441 59.17349243]
[-73.26780701 54.78115082]
[-87.67102814 50.59220886]
[-102.13208008 46.60750198]
[-116.59313965 42.62279510]
[-131.05419922 38.63808823]
[-145.51524353 34.65338516]
[-160.03123474 30.87371254]
[-174.59927368 27.29983330]
[-183.83050537 28.29531479]
[-189.52609253 23.41319084]
[-203.98715210 19.42848587]
[-218.44819641 15.44377995]
[-234.17321777 20.09738159]
[-245.87792969 8.61123371]
[-241.52154541 -7.19869757]
[-225.58552551 -11.06851196]
[-214.46350098 0.98272431]
[-200.00244141 4.96743059]
[-185.54138184 8.95213604]
[-171.02539062 12.73180771]
[-156.45736694 16.30568695]
[-149.10404968 14.82123089]
[-141.53054810 20.19232750]
[-127.06948853 24.17703438]
[-112.60842896 28.16174126]
[-98.14737701 32.14644623]
[-83.68631744 36.13115311]
[-76.29394531 34.85538101]
[-68.87546539 40.43864822]
[-54.53296280 44.83098984]
[-40.19046402 49.22333145]
[-25.84796143 53.61567307]
[-11.50546074 58.00801468]
[2.83704019 62.40035629]
[17.17954063 66.79270172]
[31.52204323 71.18504333]
[45.95709229 67.51372528]
[56.88670349 78.95288086]
[71.22920227 83.34522247]
[76.65853882 75.63224030]
[84.13486481 69.65400696]
[93.11252594 65.94689178]
[102.90763855 64.87784576]
[112.75007629 66.60951996]
[121.84407043 71.08127594]
[129.43246460 78.00788879]
[134.85963440 86.89672852]
[137.62768555 97.08235168]
[137.44131470 107.77613831]
[152.43980408 107.98840332]
[167.43830872 108.20066071]
[182.43679810 108.41292572]
[197.43530273 108.62519073]
[214.41156006 97.93712616]
[230.69569397 108.20172119]
[245.68217468 107.56510162]
[260.66867065 106.92848206]
[275.65515137 106.29186249]
[290.64163208 105.65524292]
[305.62811279 105.01863098]
[314.09527588 92.01529694]
[328.60052490 86.50371552]
[343.56628418 90.60320282]
[353.23791504 102.73741913]
[353.89648438 118.24050903]
[345.28872681 131.15122986]
[330.72454834 136.50512695]
[315.80416870 132.24353027]
[306.26473999 120.00511169]
[291.27822876 120.64173126]
[276.29174805 121.27835083]
[261.30526733 121.91496277]
[246.31878662 122.55158234]
[231.33230591 123.18820190]
[224.99629211 131.43162537]
[214.93356323 134.82188416]
[204.47351074 131.97737122]
[197.22303772 123.62368774]
[182.22453308 123.41142273]
[167.22604370 123.19916534]
[152.22753906 122.98690033]
[137.22904968 122.77463531]
[127.31892395 134.03472900]
[129.43453979 148.88478088]
[131.55017090 163.73483276]
[133.66578674 178.58488464]
[135.78140259 193.43495178]
[148.57006836 202.72073364]
[150.96441650 218.34259033]
[141.54394531 231.03236389]
[125.89763641 233.26141357]
[113.30818176 223.70730591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[9 57]
[10 56]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 39]
[26 38]
[28 37]
[29 36]
[30 35]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
