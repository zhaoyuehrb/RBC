%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGUCUAAUCAUCAGUCGAGCGGCCACAUAAUUACCAAUUAGGCAGUAGCAGAGGCGGGUGCCGAAGCACGGGGUCUGGGUGACUAGGAAGAGCCGAGACUGCGAAGGAGAACGCAGCAAGCCCAGGCGGCGGUGGAAAGGCUGGAGGACACACCUAAAC\
) } def
/len { sequence length } bind def

/coor [
[77.83244324 421.63864136]
[84.27109528 407.69448853]
[96.82844543 398.85095215]
[95.40261078 383.91888428]
[93.97676849 368.98678589]
[90.19337463 362.59814453]
[92.66870117 353.75726318]
[91.52741241 338.80075073]
[90.38611603 323.84423828]
[89.24481964 308.88772583]
[80.51143646 321.08312988]
[66.62178040 326.74682617]
[51.85079956 324.13565063]
[40.74470139 314.05325317]
[36.72170639 299.60278320]
[41.02000809 285.23184204]
[52.31668091 275.36343384]
[67.13484192 273.03491211]
[80.91377258 278.96289062]
[89.41206360 291.32125854]
[90.83789825 276.38919067]
[84.34543610 262.98406982]
[93.35949707 249.98185730]
[94.78533173 235.04977417]
[96.21117401 220.11770630]
[83.72723389 206.77363586]
[84.93626404 188.22154236]
[99.53772736 176.20611572]
[100.39405823 161.23057556]
[101.25038910 146.25503540]
[102.10672760 131.27949524]
[94.17556763 144.01123047]
[90.64417267 158.58959961]
[82.30516052 171.05799866]
[70.18016815 179.88888550]
[55.75465012 184.00038147]
[40.79589462 182.88874817]
[27.13653564 176.69021606]
[16.45000648 166.16413879]
[10.04553127 152.60012817]
[8.70773697 137.65989685]
[12.60051823 123.17382812]
[21.24696350 110.91662598]
[33.58778000 102.38994598]
[48.10857391 98.63860321]
[63.05973434 99.84806824]
[50.51870346 91.61869049]
[37.97767639 83.38932037]
[25.43664551 75.15994263]
[10.98296070 80.48884583]
[-3.66587448 76.33372498]
[-12.94932175 64.48966980]
[-13.47213745 49.62815475]
[-26.01316643 41.39878082]
[-42.40754318 41.00328827]
[-50.02363205 26.47995186]
[-41.02664948 12.76914024]
[-24.67192459 13.97535801]
[-17.78379250 28.85775375]
[-5.24276352 37.08712769]
[8.59892845 31.65154266]
[23.15939140 35.45376968]
[32.80175018 47.23843384]
[33.66601944 62.61891556]
[46.20705032 70.84828949]
[58.74807739 79.07766724]
[71.28910828 87.30703735]
[78.37660980 84.85402679]
[67.04030609 75.03118896]
[69.87889862 60.30222321]
[84.05381775 55.39593887]
[95.39030457 65.21857452]
[92.55162811 79.94800568]
[99.63912964 77.49500275]
[104.40998840 63.27392578]
[101.46370697 47.72946930]
[112.84722137 38.12400818]
[117.61807251 23.90293312]
[122.38893127 9.68185806]
[127.15978241 -4.53921604]
[131.93063354 -18.76029015]
[128.98435974 -34.30474472]
[140.36787415 -43.91020584]
[145.13871765 -58.13128281]
[149.90957642 -72.35235596]
[144.86689758 -84.25611877]
[149.16656494 -96.02143860]
[159.98083496 -101.50468445]
[165.02157593 -115.63234711]
[161.54080200 -131.65783691]
[173.85919189 -142.48324585]
[189.30464172 -136.97232056]
[191.98818970 -120.79422760]
[179.14924622 -110.59160614]
[174.10850525 -96.46394348]
[178.20736694 -79.42021942]
[164.13064575 -67.58150482]
[159.35980225 -53.36042786]
[154.58894348 -39.13935471]
[157.87646484 -24.61208725]
[146.15170288 -13.98943710]
[141.38085938 0.23163739]
[136.61000061 14.45271206]
[131.83914185 28.67378616]
[127.06829834 42.89485931]
[130.35581970 57.42212677]
[118.63105774 68.04477692]
[113.86020660 82.26585388]
[117.91500854 88.57525635]
[128.91976929 78.38235474]
[137.49412537 66.07461548]
[152.49151611 66.35417938]
[160.60121155 78.97293854]
[154.62553406 92.73125458]
[139.86795044 95.41805267]
[126.02462769 101.19405365]
[130.07943726 107.50345612]
[144.99725342 109.07138824]
[159.91508484 110.63931274]
[174.44842529 104.38690948]
[186.29721069 113.41218567]
[201.21504211 114.98011017]
[211.49752808 103.35900116]
[226.65419006 100.03409576]
[240.85699463 106.28388977]
[248.64466858 119.70520782]
[247.02270508 135.13728333]
[236.61476135 146.64616394]
[221.42291260 149.80644226]
[207.28874207 143.40295410]
[199.64710999 129.89793396]
[184.72927856 128.33001709]
[171.26296997 134.69456482]
[158.34715271 125.55714417]
[143.42933655 123.98921204]
[128.51150513 122.42128754]
[117.08226013 132.13583374]
[116.22592926 147.11137390]
[115.36959839 162.08691406]
[114.51326752 177.06243896]
[124.04161072 184.26208496]
[128.84269714 195.06570435]
[127.82176208 206.72329712]
[121.35009003 216.32859802]
[111.14325714 221.54353333]
[109.71741486 236.47561646]
[108.29157257 251.40769958]
[114.68205261 265.88085938]
[105.76998138 277.81503296]
[104.34413910 292.74710083]
[104.20133972 307.74642944]
[105.34263611 322.70294189]
[106.48392487 337.65945435]
[107.62522125 352.61596680]
[108.90884399 367.56094360]
[110.33468628 382.49304199]
[111.76052856 397.42510986]
[125.76461029 403.73236084]
[134.72584534 416.20599365]
[136.23371887 431.49069214]
[129.88261414 445.47494507]
[117.38095093 454.39703369]
[102.09160614 455.85699463]
[88.12733459 449.46206665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 157]
[4 156]
[5 155]
[7 154]
[8 153]
[9 152]
[10 151]
[20 150]
[21 149]
[23 147]
[24 146]
[25 145]
[28 140]
[29 139]
[30 138]
[31 137]
[46 67]
[47 66]
[48 65]
[49 64]
[53 60]
[54 59]
[74 108]
[75 107]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[83 99]
[84 98]
[85 97]
[88 95]
[89 94]
[117 136]
[118 135]
[119 134]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
