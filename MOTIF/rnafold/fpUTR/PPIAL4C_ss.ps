%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUAAAGACAGUAAAAAGAUCAGUGGUUAUCUUUGCAGAUGCCACCAUCACUGUGAGCCCUGUACUAUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[126.54884338 244.58592224]
[116.92259216 238.92910767]
[108.90278625 231.14497375]
[102.94976044 221.67301941]
[99.40693665 211.04986572]
[98.48101044 199.87881470]
[100.22991943 188.79557800]
[104.55921173 178.43212891]
[111.22717285 169.38061523]
[119.85829163 162.15960693]
[113.83285522 148.42300415]
[107.80742645 134.68640137]
[101.78199768 120.94980621]
[95.75656128 107.21321106]
[93.08317566 106.22512054]
[90.67549133 104.23802185]
[88.90165710 101.34242249]
[88.09259796 97.76119232]
[88.49578094 93.83317566]
[90.23616791 89.98111725]
[87.15793610 75.30036926]
[84.07970428 60.61961365]
[73.60120392 52.78043747]
[71.46409607 40.28023148]
[78.29369354 30.07837677]
[75.82477570 15.28295708]
[73.35585022 0.48753718]
[70.88693237 -14.30788231]
[68.41801453 -29.10330200]
[63.79962540 -37.32668686]
[66.16600800 -44.56011581]
[64.31062317 -59.44492340]
[62.45523071 -74.32973480]
[60.59984207 -89.21453857]
[50.28039932 -101.95978546]
[56.41018295 -117.17023468]
[72.68339539 -119.19868469]
[82.35955048 -105.95844269]
[75.48464966 -91.06993103]
[77.34004211 -76.18511963]
[79.19542694 -61.30031204]
[81.05081940 -46.41550446]
[83.21343231 -31.57221985]
[85.68235779 -16.77680206]
[88.15127563 -1.98138165]
[90.62019348 12.81403828]
[93.08911133 27.60945702]
[104.97373199 40.35116959]
[98.76045990 57.54138565]
[101.83869171 72.22213745]
[104.91691589 86.90289307]
[109.49316406 101.18777466]
[115.51859283 114.92437744]
[121.54402924 128.66098022]
[127.56945801 142.39758301]
[133.59489441 156.13417053]
[153.31446838 155.38710022]
[171.57255554 162.76353455]
[185.18112183 176.93850708]
[191.77911377 195.40321350]
[190.24211121 214.90902710]
[180.87374878 232.03901672]
[190.56823730 243.48527527]
[200.26272583 254.93153381]
[216.03173828 255.98669434]
[226.37298584 267.93804932]
[225.15115356 283.69503784]
[213.09115601 293.90933228]
[197.34796143 292.52096558]
[187.26173401 280.35366821]
[188.81645203 264.62603760]
[179.12196350 253.17976379]
[169.42747498 241.73350525]
[159.29801941 246.32441711]
[148.35842896 248.38667297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[20 51]
[21 50]
[22 49]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[31 42]
[32 41]
[33 40]
[34 39]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
