%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCGUCUGGGCUGUGGAAGCGGAGGGGGUGGGGACACUCUGGCCCGGUUCUCGGUGGUGCGGGAGCGGGCGGGAGCAGCGGCCGCUCUGGUCGGCGGACGUGCUGCCGAGUAGUCCCGGAAGCGAAGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[49.67618942 255.35643005]
[53.61433792 240.88314819]
[46.37742233 238.91412354]
[35.29228592 249.01956177]
[24.20715332 259.12500000]
[13.12201977 269.23043823]
[8.13615417 284.24548340]
[-6.48199844 287.10186768]
[-17.56713295 297.20730591]
[-28.65226555 307.31271362]
[-29.54013252 322.86422729]
[-40.92599106 332.95468140]
[-55.74650574 332.01239014]
[-66.83164215 342.11782837]
[-77.91677094 352.22326660]
[-80.09104919 368.11828613]
[-93.94711304 376.20465088]
[-108.85577393 370.27914429]
[-113.38038635 354.88735962]
[-104.05004883 341.83651733]
[-88.02220917 341.13812256]
[-76.93707275 331.03268433]
[-65.85193634 320.92724609]
[-65.42273712 306.08300781]
[-54.32479095 295.67675781]
[-38.75770187 296.22760010]
[-27.67256737 286.12216187]
[-16.58743286 276.01672363]
[-12.39445114 261.72448730]
[3.01658463 258.14529419]
[14.10171795 248.03987122]
[25.18685150 237.93443298]
[36.27198410 227.82899475]
[45.03260422 215.65313721]
[51.09142303 201.93122864]
[57.15023804 188.20932007]
[63.20905304 174.48741150]
[69.26786804 160.76550293]
[75.16779327 146.97453308]
[80.90804291 133.11634827]
[86.64829254 119.25814819]
[92.38854980 105.39995575]
[86.80513763 102.83978271]
[82.66658020 96.61121368]
[81.96303558 87.70978546]
[75.90422058 73.98787689]
[69.84540558 60.26597214]
[63.78659058 46.54406357]
[57.72777557 32.82215500]
[51.34186935 26.16287613]
[51.69156647 18.71261978]
[45.95131302 4.85442734]
[40.21106339 -9.00376511]
[34.47080994 -22.86195755]
[28.73056030 -36.72014999]
[22.99030876 -50.57834625]
[8.29497242 -56.39406967]
[2.09289718 -70.93056488]
[8.06366444 -85.56359863]
[22.66492271 -91.61163330]
[37.23400497 -85.48649597]
[43.12733459 -70.82210541]
[36.84849930 -56.31859589]
[42.58875275 -42.46040344]
[48.32900238 -28.60220909]
[54.06925583 -14.74401665]
[59.80950546 -0.88582397]
[65.54975891 12.97236919]
[71.44968414 26.76334000]
[77.50849915 40.48524857]
[83.56731415 54.20715714]
[89.62612915 67.92906189]
[95.68494415 81.65097046]
[109.79345703 86.74507904]
[123.22090912 80.05900574]
[132.12550354 66.98159027]
[146.96730042 68.23470306]
[160.39474487 61.54862976]
[173.82220459 54.86255264]
[187.24964905 48.17647934]
[193.60690308 41.48983383]
[201.06535339 41.49507904]
[214.64366150 35.12093353]
[223.84793091 22.25268745]
[238.65682983 23.84828186]
[252.23513794 17.47413445]
[265.81344604 11.09998989]
[279.39172363 4.72584391]
[292.97003174 -1.64830208]
[298.10086060 -16.59654808]
[312.33541870 -23.46335030]
[327.22860718 -18.17475891]
[333.94451904 -3.86839867]
[328.49874878 10.96801853]
[314.12219238 17.53231049]
[299.34417725 11.92999935]
[285.76586914 18.30414581]
[272.18759155 24.67829132]
[258.60928345 31.05243683]
[245.03097534 37.42658234]
[236.79791260 49.83890915]
[221.01780701 48.69923401]
[207.43949890 55.07337952]
[193.93572998 61.60392761]
[180.50827026 68.29000092]
[167.08082581 74.97607422]
[153.65338135 81.66215515]
[145.70919800 94.26133728]
[129.90698242 93.48645020]
[116.47953033 100.17253113]
[106.24674225 111.14020538]
[100.50649261 124.99839783]
[94.76623535 138.85659790]
[89.02598572 152.71478271]
[88.61967468 161.93220520]
[82.98977661 166.82432556]
[76.93096161 180.54623413]
[70.87214661 194.26814270]
[64.81333160 207.99005127]
[58.75451279 221.71195984]
[65.37481689 221.56686401]
[72.34379578 223.53494263]
[79.09748840 227.70841980]
[85.05578613 234.04238892]
[89.65380859 242.35311890]
[94.09089661 256.68182373]
[108.18694305 263.82867432]
[113.02130127 278.87539673]
[105.72583771 292.89511108]
[90.62882233 297.57009888]
[76.68704224 290.12683105]
[72.17191315 274.98123169]
[79.76217651 261.11892700]
[75.32508850 246.79020691]
[68.08817291 244.82118225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[8 28]
[9 27]
[10 26]
[13 23]
[14 22]
[15 21]
[34 120]
[35 119]
[36 118]
[37 117]
[38 116]
[39 114]
[40 113]
[41 112]
[42 111]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[74 110]
[75 109]
[77 107]
[78 106]
[79 105]
[80 104]
[82 103]
[83 102]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
