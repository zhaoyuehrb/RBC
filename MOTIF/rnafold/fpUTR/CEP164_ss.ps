%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCGCGCUGCAGGGCAACACCCCGGCGUCCCUGGAAGCUGGGGGAGCGGGAGAAAUAACUUUAUUUGGACUGAGAGCUGGAGAAUGAGAAUAGGACCUGAGAGUAUAUUGGGCUAAGGAGGAGAGGUGUUUGAGCCCAGAUGAGUC\
) } def
/len { sequence length } bind def

/coor [
[89.27103424 302.93753052]
[84.11450958 288.85162354]
[79.72216797 303.19412231]
[75.32982635 317.53662109]
[81.55473328 332.32275391]
[73.74942780 346.33905029]
[57.90146637 348.83340454]
[46.16805649 337.89236450]
[47.55006027 321.90893555]
[60.98732376 313.14428711]
[65.37966156 298.80175781]
[69.77200317 284.45925903]
[72.46378326 269.70275879]
[73.41835022 254.73316956]
[74.37292480 239.76358032]
[75.32749176 224.79397583]
[75.80501556 209.80158997]
[75.80501556 194.80158997]
[75.80501556 179.80158997]
[75.80501556 164.80158997]
[75.80501556 149.80158997]
[75.80501556 134.80158997]
[65.19841766 124.19498444]
[50.19841385 124.19498444]
[36.39824295 131.93228149]
[23.67097092 124.19498444]
[8.67097092 124.19498444]
[-5.12920141 131.93228149]
[-17.85647392 124.19498444]
[-32.85647202 124.19498444]
[-47.85647202 124.19498444]
[-62.85647202 124.19498444]
[-77.85647583 124.19498444]
[-92.85647583 124.19498444]
[-107.85647583 124.19498444]
[-123.69560242 130.24131775]
[-133.89036560 116.69498444]
[-123.69560242 103.14864349]
[-107.85647583 109.19498444]
[-92.85647583 109.19498444]
[-77.85647583 109.19498444]
[-62.85647202 109.19498444]
[-47.85647202 109.19498444]
[-32.85647202 109.19498444]
[-17.85647392 109.19498444]
[-5.12920141 101.45767975]
[8.67097092 109.19498444]
[23.67097092 109.19498444]
[36.39824295 101.45767975]
[50.19841385 109.19498444]
[65.19841766 109.19498444]
[65.74040985 97.28125763]
[70.06257629 86.74939728]
[77.32604980 78.69880676]
[69.19210052 66.09568024]
[61.05815125 53.49254608]
[52.92420197 40.88941574]
[44.79025269 28.28628731]
[29.96056938 21.28539276]
[28.87852097 4.92198277]
[42.65722656 -3.97067142]
[57.12233734 3.75543118]
[57.39338303 20.15233803]
[65.52733612 32.75547028]
[73.66127777 45.35860062]
[81.79522705 57.96173096]
[89.92917633 70.56485748]
[97.68097687 68.97628021]
[105.58280182 69.39475250]
[113.12345123 71.79319000]
[119.81509399 76.01644135]
[131.87504578 67.09694672]
[131.48789978 50.22010422]
[141.11978149 36.55863953]
[156.83119202 31.35802841]
[172.39689636 36.47121048]
[184.26481628 27.29774666]
[196.13273621 18.12428093]
[208.00065613 8.95081615]
[214.18742371 -5.61058855]
[228.98902893 -7.27242374]
[240.85694885 -16.44588852]
[243.28399658 -29.15970612]
[253.41578674 -36.55155182]
[265.46597290 -35.07826614]
[277.52590942 -43.99776459]
[289.58587646 -52.91726303]
[287.96005249 -68.12593842]
[294.12432861 -82.01472473]
[306.33175659 -90.89422607]
[321.24490356 -92.46071625]
[334.84820557 -86.39308929]
[346.90814209 -95.31259155]
[358.96810913 -104.23208618]
[368.10736084 -118.51180267]
[384.35903931 -113.68272400]
[384.21755981 -96.72936249]
[367.88760376 -92.17213440]
[355.82763672 -83.25263214]
[343.76770020 -74.33313751]
[345.58599854 -59.54938507]
[339.72125244 -45.74863052]
[327.65637207 -36.67643356]
[312.57131958 -34.84928513]
[298.50537109 -40.85730362]
[286.44543457 -31.93780708]
[274.38546753 -23.01831055]
[268.30218506 -6.58893681]
[250.03041077 -4.57796860]
[238.16249084 4.59549665]
[232.82460022 18.50075340]
[217.17411804 20.81873703]
[205.30619812 29.99220085]
[193.43827820 39.16566849]
[181.57035828 48.33913422]
[183.20042419 61.62848282]
[177.99311829 74.08097076]
[167.21626282 82.38637543]
[153.63317871 84.27945709]
[140.79455566 79.15689850]
[128.73458862 88.07640076]
[132.04541016 101.64070129]
[129.08561707 115.72536469]
[120.07375336 127.49317169]
[106.48213959 134.41352844]
[90.80501556 134.80158997]
[90.80501556 149.80158997]
[90.80501556 164.80158997]
[90.80501556 179.80158997]
[90.80501556 194.80158997]
[90.80501556 209.80158997]
[93.49252319 214.43806458]
[94.03013611 219.16415405]
[92.75477600 223.12963867]
[90.29708862 225.74855042]
[89.34252167 240.71813965]
[88.38794708 255.68774414]
[87.43338013 270.65734863]
[97.23113251 259.29934692]
[111.13634491 253.67393494]
[126.07541656 255.02455139]
[138.74623108 263.05264282]
[146.34806824 275.98370361]
[147.20060730 290.95944214]
[141.11541748 304.66967773]
[129.43756104 314.08389282]
[114.74828339 317.12118530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[13 138]
[14 137]
[15 136]
[16 135]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 51]
[24 50]
[26 48]
[27 47]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[71 121]
[72 120]
[76 115]
[77 114]
[78 113]
[79 112]
[81 110]
[82 109]
[85 107]
[86 106]
[87 105]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
