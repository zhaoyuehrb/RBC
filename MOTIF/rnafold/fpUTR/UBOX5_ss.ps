%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCGCAGCAGGCGGAAGUAGCGGGCAGUUGGCCGGAAGUGGGGCUGUGAGGCUCGGAGUCGCCGGAGGAGCCAGUAUCUGUGUCGCCGCCGCCCGCGGCGUCCCCGGUUUGGUGUUGCGGCGCCCACCUUCGGGAGGAUCAGGCUGCUUCUGAUGCUUGGAAGAUAUCCUCUCAGCCACAAAG\
) } def
/len { sequence length } bind def

/coor [
[313.99926758 947.67425537]
[326.61782837 939.40173340]
[321.91073608 925.15942383]
[308.53161621 918.71466064]
[303.55505371 904.33801270]
[310.40567017 890.34844971]
[305.69857788 876.10614014]
[300.60369873 870.73052979]
[301.03421021 861.58489990]
[296.56701660 847.26550293]
[292.09985352 832.94616699]
[287.63269043 818.62677002]
[277.05950928 812.72332764]
[273.22842407 800.81359863]
[278.71682739 789.12634277]
[274.49084473 774.73394775]
[270.26483154 760.34155273]
[266.03884888 745.94915771]
[261.81286621 731.55676270]
[257.58688354 717.16436768]
[253.36088562 702.77197266]
[249.13490295 688.37957764]
[244.90892029 673.98718262]
[240.68292236 659.59478760]
[226.34226990 659.88769531]
[212.40435791 656.44921875]
[199.82409668 649.50842285]
[189.46507263 639.53460693]
[182.04023743 627.20544434]
[178.06288147 613.36114502]
[177.81109619 598.94683838]
[181.30842590 584.94848633]
[188.32174683 572.32507324]
[198.37681580 561.94323730]
[210.79035950 554.51751709]
[206.80674744 540.05615234]
[202.82313538 525.59478760]
[198.83952332 511.13345337]
[194.85591125 496.67208862]
[184.01643372 486.45666504]
[187.81091309 471.09722900]
[183.82730103 456.63586426]
[179.84368896 442.17453003]
[175.86007690 427.71316528]
[171.87646484 413.25180054]
[167.77153015 398.82440186]
[163.54553223 384.43203735]
[159.31954956 370.03964233]
[155.09356689 355.64724731]
[150.86756897 341.25485229]
[146.64158630 326.86245728]
[142.41558838 312.47006226]
[131.40602112 302.43817139]
[134.94195557 287.01715088]
[130.71595764 272.62475586]
[125.80455017 267.08105469]
[126.54205322 257.95498657]
[122.55844116 243.49363708]
[118.57482910 229.03228760]
[116.18376923 227.53144836]
[114.24965668 224.98316956]
[113.17813110 221.55909729]
[113.30435181 217.57568359]
[114.84442139 213.46520996]
[111.84086609 198.76899719]
[108.83731842 184.07278442]
[105.83377075 169.37657166]
[102.83021545 154.68035889]
[98.40124512 148.74411011]
[99.90183258 139.71211243]
[97.14559174 124.96752167]
[94.38935089 110.22292328]
[89.56278992 96.02066040]
[82.76416016 82.64984894]
[75.85345459 69.33661652]
[68.83116913 56.08190155]
[61.80887985 42.82718658]
[49.05091858 31.66158104]
[56.24840927 16.31125832]
[72.99130249 18.97807503]
[75.06359863 35.80489731]
[82.08588409 49.05961227]
[89.10816956 62.31432724]
[95.03016663 66.76232147]
[96.13497162 75.85121918]
[102.93360138 89.22203827]
[117.60406494 86.09514618]
[118.35974121 71.11418915]
[119.11542511 56.13323593]
[119.87110138 41.15228271]
[120.62677765 26.17133141]
[121.38245392 11.19037914]
[111.73416901 -1.62718940]
[115.87909698 -17.12554741]
[130.63761902 -23.41568184]
[144.68824768 -15.67233944]
[147.25254822 0.16445006]
[136.36340332 11.94605732]
[135.60772705 26.92700958]
[134.85205078 41.90796280]
[134.09637451 56.88891602]
[133.34069824 71.86986542]
[132.58502197 86.85082245]
[109.13394928 107.46668243]
[111.89019012 122.21128082]
[114.64643097 136.95587158]
[117.52642822 151.67680359]
[120.52998352 166.37301636]
[123.53353119 181.06922913]
[126.53707886 195.76544189]
[129.54063416 210.46165466]
[133.03619385 225.04867554]
[137.01980591 239.51002502]
[141.00341797 253.97138977]
[145.10835266 268.39877319]
[149.33435059 282.79116821]
[160.64619446 293.85247803]
[156.80798340 308.24404907]
[161.03398132 322.63644409]
[165.25996399 337.02883911]
[169.48594666 351.42123413]
[173.71194458 365.81362915]
[177.93792725 380.20602417]
[182.16392517 394.59841919]
[187.59519958 401.96929932]
[186.33782959 409.26818848]
[190.32144165 423.72955322]
[194.30505371 438.19091797]
[198.28866577 452.65225220]
[202.27227783 467.11361694]
[213.39669800 478.36340332]
[209.31727600 492.68847656]
[213.30088806 507.14984131]
[217.28450012 521.61120605]
[221.26811218 536.07257080]
[225.25172424 550.53387451]
[240.96778870 550.73767090]
[255.97801208 555.35003662]
[269.07241821 563.99072266]
[279.19793701 575.95495605]
[285.54296875 590.27124023]
[287.60247803 605.77990723]
[285.21829224 621.22735596]
[278.59097290 635.36706543]
[268.26324463 647.06054688]
[255.07531738 655.36877441]
[259.30130005 669.76116943]
[263.52728271 684.15356445]
[267.75329590 698.54595947]
[271.97927856 712.93835449]
[276.20526123 727.33074951]
[280.43124390 741.72314453]
[284.65722656 756.11553955]
[288.88323975 770.50793457]
[293.10922241 784.90032959]
[306.72634888 797.28173828]
[301.95205688 814.15960693]
[306.41921997 828.47894287]
[310.88641357 842.79833984]
[315.35357666 857.11773682]
[319.94085693 871.39904785]
[324.64797974 885.64135742]
[338.48583984 892.79333496]
[343.05661011 907.30413818]
[336.15301514 920.45233154]
[340.86013794 934.69464111]
[355.92315674 933.81835938]
[370.69949341 936.87152100]
[384.18173218 943.64587402]
[395.45056152 953.67962646]
[403.73770142 966.28857422]
[408.47808838 980.61309814]
[409.34854126 995.67645264]
[406.28970337 1010.45159912]
[399.51010132 1023.93121338]
[389.47201538 1035.19616699]
[376.85986328 1043.47839355]
[362.53353882 1048.21325684]
[347.46984863 1049.07788086]
[332.69586182 1046.01342773]
[319.21887207 1039.22863770]
[307.95779419 1029.18615723]
[299.68038940 1016.57080078]
[294.95108032 1002.24267578]
[294.09225464 987.17864990]
[297.16250610 972.40582275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 166]
[3 165]
[6 162]
[7 161]
[9 160]
[10 159]
[11 158]
[12 157]
[15 155]
[16 154]
[17 153]
[18 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 147]
[24 146]
[35 136]
[36 135]
[37 134]
[38 133]
[39 132]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[46 124]
[47 123]
[48 122]
[49 121]
[50 120]
[51 119]
[52 118]
[54 116]
[55 115]
[57 114]
[58 113]
[59 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[70 106]
[71 105]
[72 104]
[73 86]
[74 85]
[75 83]
[76 82]
[77 81]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
