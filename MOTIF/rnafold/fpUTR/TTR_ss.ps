%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGACUAAGUCAAUAAUCAGAAUCAGCAGGUUUGCAGUCAGAUUGGCAGGGAUAAGCAGCCUAGCUCAGGAGAAGUGAGUAUAAAAGCCCCAGGCUGGGAGCAGCCAUCACAGAAGUCCACUCAUUCUUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[87.22126007 137.30215454]
[81.84038544 151.30381775]
[76.45951843 165.30546570]
[71.07864380 179.30711365]
[65.69777679 193.30876160]
[60.31690598 207.31040955]
[60.27893066 224.26432800]
[43.97708130 228.92114258]
[34.98944855 214.54550171]
[46.31525421 201.92955017]
[51.69612503 187.92790222]
[57.07699585 173.92623901]
[62.45786667 159.92459106]
[67.83873749 145.92294312]
[73.21961212 131.92129517]
[69.59440613 125.35562897]
[63.84864044 139.21153259]
[49.43327713 143.35850525]
[37.20311737 134.67385864]
[36.36749649 119.69715118]
[47.55563736 109.70587921]
[62.34399796 112.22431183]
[58.71879578 105.65864563]
[44.00283813 102.75337982]
[29.28687859 99.84811401]
[10.60707474 107.27031708]
[-3.49394631 94.11512756]
[-18.32762718 91.88758850]
[-33.12379074 97.48974609]
[-44.56093597 87.94820404]
[-59.39461899 85.72066498]
[-74.22829437 83.49313354]
[-89.06198120 81.26559448]
[-103.89566040 79.03806305]
[-118.72933960 76.81052399]
[-133.78533936 83.31044769]
[-146.77912903 73.30577850]
[-144.34381104 57.08846664]
[-128.98463440 51.34148788]
[-116.50180817 61.97684479]
[-101.66812134 64.20438385]
[-86.83444214 66.43191528]
[-72.00076294 68.65945435]
[-57.16708374 70.88698578]
[-42.33340073 73.11452484]
[-28.59824181 67.35304260]
[-16.10009193 77.05390930]
[-1.26641083 79.28144836]
[6.46252584 72.43456268]
[16.90917969 70.98897552]
[26.60456848 75.67140961]
[32.19214630 85.13215637]
[46.90810394 88.03742218]
[61.62406158 90.94268799]
[68.29121399 79.11051941]
[78.26807404 70.65944672]
[90.08560181 66.37806702]
[102.14872742 66.47456360]
[112.94958496 70.58946228]
[121.25586700 77.88175964]
[126.25079346 87.17272949]
[140.96675110 84.26746368]
[155.68270874 81.36219788]
[163.57757568 76.59123230]
[170.76921082 78.56309509]
[185.54791260 75.99602509]
[193.55009460 71.40734100]
[200.69461060 73.54358673]
[215.52830505 71.31604767]
[230.36198425 69.08851624]
[245.19566345 66.86097717]
[260.02932739 64.63343811]
[264.24359131 61.26197052]
[268.86999512 60.03017044]
[273.00161743 60.72573471]
[275.95578003 62.79932404]
[290.90750122 61.59672165]
[305.85922241 60.39411926]
[320.81091309 59.19151688]
[335.76263428 57.98891449]
[350.71435547 56.78630829]
[352.89767456 41.44358063]
[358.42095947 26.97139549]
[367.00726318 14.08687115]
[378.22793579 3.42771983]
[391.52395630 -4.47930861]
[406.23397827 -9.24445629]
[421.62698364 -10.63416862]
[436.93881226 -8.58254337]
[451.41000366 -3.19444418]
[464.32345581 5.25985193]
[475.04000854 16.35821152]
[483.03002930 29.54771996]
[487.89962769 44.17222977]
[502.81985474 42.62710953]
[517.74005127 41.08198929]
[532.66027832 39.53687286]
[547.58044434 37.99175262]
[560.53778076 27.93987274]
[575.61730957 34.38497162]
[577.30657959 50.69688416]
[563.86773682 60.09531403]
[549.12561035 52.91196060]
[534.20538330 54.45708084]
[519.28515625 56.00219727]
[504.36495972 57.54731750]
[489.44476318 59.09243774]
[487.86651611 73.54877472]
[483.29965210 87.36172485]
[475.94351196 99.92030334]
[466.12084961 110.66847992]
[454.26370239 119.12973785]
[440.89431763 124.92823792]
[426.60232544 127.80550385]
[412.01852417 127.63195038]
[397.78717041 124.41269684]
[384.53750610 118.28746033]
[372.85583496 109.52451324]
[363.25976562 98.50891876]
[356.17507935 85.72560120]
[351.91696167 71.73802185]
[336.96524048 72.94062805]
[322.01351929 74.14322662]
[307.06182861 75.34583282]
[292.11010742 76.54843903]
[277.15838623 77.75103760]
[262.25686646 79.46712494]
[247.42318726 81.69465637]
[232.58950806 83.92219543]
[217.75582886 86.14972687]
[202.92214966 88.37726593]
[188.11499023 90.77472687]
[173.33628845 93.34180450]
[158.58798218 96.07815552]
[143.87202454 98.98342133]
[129.15606689 101.88868713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[23 54]
[24 53]
[25 52]
[27 48]
[28 47]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[61 136]
[62 135]
[63 134]
[65 133]
[66 132]
[68 131]
[69 130]
[70 129]
[71 128]
[72 127]
[76 126]
[77 125]
[78 124]
[79 123]
[80 122]
[81 121]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
