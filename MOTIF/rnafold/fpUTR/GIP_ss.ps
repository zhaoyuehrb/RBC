%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCAGAAGGUCCAGAAAUCAGGGGAAGGAGACCCCUAUCUGUCCUUCUUCUGGAAGAGCUGGAAAGGAAGUCUGCUCAGGAAAUAACCUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[83.15515900 91.59303284]
[73.51335144 80.10236359]
[63.87153244 68.61170197]
[54.22972107 57.12103271]
[44.58790588 45.63036728]
[31.85606003 49.84202957]
[18.48462105 49.41928101]
[6.10408115 44.43585968]
[-3.78352761 35.52027130]
[-9.98685837 23.77661133]
[-11.76877308 10.64786243]
[-8.93387318 -2.26140189]
[-1.84965467 -13.38112164]
[-10.74327374 -25.46017647]
[-19.63689232 -37.53923035]
[-28.53051186 -49.61828232]
[-37.42412949 -61.69733810]
[-55.38587189 -60.96112061]
[-70.14583588 -70.94943237]
[-76.03714752 -87.60536194]
[-70.93014526 -104.35643768]
[-80.57196045 -115.84710693]
[-90.21377563 -127.33776855]
[-99.85559082 -138.82844543]
[-109.49740601 -150.31910706]
[-119.13922119 -161.80976868]
[-128.78103638 -173.30044556]
[-138.42285156 -184.79110718]
[-148.06466675 -196.28176880]
[-157.70648193 -207.77243042]
[-167.34828186 -219.26310730]
[-176.99009705 -230.75376892]
[-191.76844788 -226.93757629]
[-206.73738098 -229.91981506]
[-218.92481995 -239.10835266]
[-225.91091919 -252.67880249]
[-226.30860901 -267.93673706]
[-220.03892517 -281.85269165]
[-208.34669495 -291.66363525]
[-193.55343628 -295.42160034]
[-178.59635925 -292.38043213]
[-166.44520569 -283.14398193]
[-159.51258850 -269.54611206]
[-159.17498779 -254.28674316]
[-165.49943542 -240.39558411]
[-155.85762024 -228.90492249]
[-146.21580505 -217.41424561]
[-136.57398987 -205.92358398]
[-126.93218231 -194.43292236]
[-117.29036713 -182.94224548]
[-107.64855194 -171.45158386]
[-98.00673676 -159.96092224]
[-88.36492157 -148.47024536]
[-78.72310638 -136.97958374]
[-69.08129120 -125.48892212]
[-59.43947983 -113.99825287]
[-47.38180161 -116.64888000]
[-35.28668594 -113.83348846]
[-25.52510452 -106.03956604]
[-20.03826141 -94.73670959]
[-19.95171547 -82.09989166]
[-25.34507751 -70.59095764]
[-16.45145798 -58.51190186]
[-7.55783892 -46.43284988]
[1.33578026 -34.35379410]
[10.22939873 -22.27474022]
[26.57105064 -25.89684868]
[42.92616272 -22.08776474]
[56.07101440 -11.54986191]
[63.39374161 3.68344736]
[63.41326141 20.63995552]
[56.07857132 35.98855209]
[65.72038269 47.47921753]
[75.36219788 58.96988297]
[85.00401306 70.46054840]
[94.64582825 81.95121765]
[113.82956696 87.22624969]
[117.56769562 106.76770020]
[128.25810242 117.28981781]
[143.52093506 121.45596313]
[147.16406250 135.89816284]
[157.85447693 146.42027283]
[168.54489136 156.94239807]
[184.34471130 156.56642151]
[195.72491455 167.53302002]
[195.93383789 183.33592224]
[184.84751892 194.59954834]
[169.04328918 194.64138794]
[157.89750671 183.43661499]
[158.02276611 167.63281250]
[147.33235168 157.11068726]
[136.64193726 146.58856201]
[122.14376831 143.17503357]
[117.73598480 127.98023224]
[107.04557037 117.45810699]
[98.12281036 118.73237610]
[89.63032532 115.71290588]
[83.51471710 109.09181213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[78 95]
[79 94]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
