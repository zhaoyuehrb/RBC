%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUGCUGUGGUUGGUCAGUCCAGUAAGAAGCCAGCAGGGCUGGUGCUGGGGCUUCUUCUCCUGAAGGGGCUGCAAGAGGGAAGGCUUAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.93912506 110.15884399]
[92.60794067 104.15984344]
[77.70830536 102.42757416]
[62.80866623 100.69530487]
[47.90902710 98.96303558]
[33.00938797 97.23076630]
[18.08314323 95.74508667]
[3.13437581 94.50639343]
[-11.81439209 93.26770020]
[-26.20637131 99.83896637]
[-38.25123215 91.07708740]
[-53.19999695 89.83839417]
[-62.21304321 92.28173065]
[-68.61981964 88.30358124]
[-83.51946259 86.57131195]
[-98.41909790 84.83904266]
[-113.31874084 83.10677338]
[-128.21838379 81.37450409]
[-136.54251099 88.75784302]
[-147.35176086 90.19737244]
[-156.92007446 85.44710541]
[-162.08818054 76.35242462]
[-176.84075928 73.63921356]
[-189.70925903 82.81403351]
[-205.28221130 80.11984253]
[-214.32046509 67.15505219]
[-211.46177673 51.61145782]
[-198.40216064 42.71078491]
[-182.88964844 45.73365021]
[-174.12754822 58.88663864]
[-159.37496948 61.59984589]
[-141.87420654 53.66099548]
[-126.48610687 66.47486115]
[-111.58647156 68.20713806]
[-96.68682861 69.93940735]
[-81.78719330 71.67167664]
[-66.88755035 73.40394592]
[-51.96130753 74.88962555]
[-37.01254272 76.12831879]
[-23.68979836 69.46845245]
[-10.57570171 78.31893158]
[4.37306595 79.55762482]
[19.32183266 80.79631805]
[26.38707161 78.15910339]
[34.74165726 82.33112335]
[49.64129639 84.06340027]
[64.54093170 85.79566956]
[79.44057465 87.52793884]
[94.34020996 89.26020813]
[109.04591370 86.30345154]
[122.11817169 78.94709778]
[130.35025024 65.43623352]
[145.23641968 65.93741608]
[158.30868530 58.58106232]
[171.38095093 51.22470856]
[184.45321655 43.86835861]
[197.52548218 36.51200485]
[210.59774780 29.15565300]
[223.67001343 21.79929924]
[236.74226379 14.44294739]
[249.81452942 7.08659458]
[257.70001221 -7.29224586]
[274.09893799 -7.38206720]
[282.14144897 6.90953112]
[273.55413818 20.88057899]
[257.17089844 20.15885735]
[244.09861755 27.51521111]
[231.02635193 34.87156296]
[217.95410156 42.22791672]
[204.88183594 49.58426666]
[191.80957031 56.94062042]
[178.73730469 64.29697418]
[165.66503906 71.65332794]
[152.59277344 79.00968170]
[145.29571533 91.99436951]
[129.47453308 92.01936340]
[116.40226746 99.37571716]
[129.89517212 92.82275391]
[144.73872375 94.98355103]
[155.80339050 105.11138916]
[159.26553345 119.70637512]
[153.92871094 133.72488403]
[141.63720703 142.32249451]
[126.63861847 142.52812195]
[114.11604309 134.27069092]
[108.39690399 120.40341187]
[113.26739502 134.59066772]
[118.13788605 148.77792358]
[128.99957275 161.79560852]
[119.49744415 175.83647156]
[103.37485504 170.59259033]
[103.95063019 153.64842224]
[99.08013916 139.46116638]
[94.20964050 125.27390289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 43]
[8 42]
[9 41]
[11 39]
[12 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[22 31]
[23 30]
[50 77]
[51 76]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
