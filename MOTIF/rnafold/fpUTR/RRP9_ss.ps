%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCUGGGGAGCUGGGAGGGUUCAGCUGCCACGUGAGUUCUGCGGCCGCUGCUACACGCCUGGUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[87.06225586 101.81246185]
[86.19297028 97.66033936]
[75.04579926 87.62338257]
[63.89862823 77.58642578]
[52.75145721 67.54946136]
[41.60428238 57.51250458]
[30.45711136 47.47554779]
[19.30993843 37.43858719]
[8.16276550 27.40162849]
[-7.27002525 23.91744614]
[-11.55096722 9.65130329]
[-22.69813919 -0.38565543]
[-33.84531021 -10.42261410]
[-44.99248505 -20.45957375]
[-56.13965607 -30.49653244]
[-67.28682709 -40.53349304]
[-81.40412903 -34.83583832]
[-96.53361511 -35.82858658]
[-109.67796326 -43.26137924]
[-118.25641632 -55.61334610]
[-120.61149597 -70.40398407]
[-116.32897186 -84.69123077]
[-127.47614288 -94.72819519]
[-138.62332153 -104.76515198]
[-154.39083862 -103.68783569]
[-166.24687195 -114.13819885]
[-167.15742493 -129.91624451]
[-156.58229065 -141.66111755]
[-140.79550171 -142.40480042]
[-129.16310120 -131.70608521]
[-128.58634949 -115.91232300]
[-117.43918610 -105.87536621]
[-106.29200745 -95.83840942]
[-92.53067780 -101.59089661]
[-77.57489014 -100.79476166]
[-64.39389038 -93.55442810]
[-55.62786102 -81.25903320]
[-53.05908966 -66.31619263]
[-57.24987030 -51.68066406]
[-46.10269928 -41.64370346]
[-34.95552444 -31.60674667]
[-23.80835342 -21.56978607]
[-12.66118050 -11.53282738]
[-1.51400781 -1.49586868]
[13.12146282 1.27040374]
[18.19972420 16.25445557]
[29.34689713 26.29141617]
[40.49406815 36.32837296]
[51.64124298 46.36533356]
[62.78841400 56.40229416]
[73.93558502 66.43925476]
[85.08275604 76.47621155]
[96.22993469 86.51316833]
[108.36518860 95.32994843]
[121.35556793 102.82994843]
[134.34594727 110.32994843]
[143.63574219 111.99446869]
[147.71382141 118.42581940]
[160.37873840 126.46321869]
[173.04365540 134.50062561]
[188.95098877 132.41825867]
[200.39659119 143.66003418]
[198.60038757 159.60221863]
[184.94026184 168.01533508]
[169.89509583 162.44555664]
[165.00625610 147.16554260]
[152.34133911 139.12814331]
[139.67640686 131.09072876]
[126.84594727 123.32032776]
[113.85556793 115.82032776]
[100.86518860 108.32032776]
[98.12009430 109.11309052]
[94.99448395 108.93865967]
[91.84141541 107.65055847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[22 33]
[23 32]
[24 31]
[54 71]
[55 70]
[56 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
