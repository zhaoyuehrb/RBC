%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGGCUCUGGGAGCCGCGCGCGGCGCGUCCCAGUGGCCCGACUCGCCGUGCGCCCGGCGCCCACCGCAGCCUGCAUGCCCCGCGCUGCGCCUUGCCCGGCCCCCGCCGCCUCCUGCUCGCACCGCUGCAGCCGGGCGCCGGAGUAAU\
) } def
/len { sequence length } bind def

/coor [
[128.23532104 158.73774719]
[114.06786346 153.80993652]
[103.61237335 143.05433655]
[99.08734131 128.75314331]
[101.45284271 113.94103241]
[94.78330994 127.37670898]
[88.11378479 140.81239319]
[81.44425964 154.24806213]
[74.77472687 167.68374634]
[73.14787292 184.55944824]
[56.48130798 187.66783142]
[48.88063812 172.51309204]
[61.33905029 161.01422119]
[68.00858307 147.57853699]
[74.67810822 134.14286804]
[81.34763336 120.70718384]
[88.01716614 107.27150726]
[79.84757996 94.69145203]
[64.86073303 95.31958771]
[49.87389374 95.94771576]
[34.88705063 96.57585144]
[19.90020752 97.20398712]
[4.91336489 97.83212280]
[-10.07347775 98.46025848]
[-25.06031990 99.08839417]
[-40.04716110 99.71652985]
[-55.03400421 100.34466553]
[-68.49806976 108.65306854]
[-81.53817749 101.45552063]
[-96.52502441 102.08364868]
[-111.51186371 102.71178436]
[-126.47158051 103.81035614]
[-141.38940430 105.37828827]
[-156.50976562 113.04714203]
[-168.06465149 100.64065552]
[-159.34172058 86.10288239]
[-142.95733643 90.46045685]
[-128.03950500 88.89253235]
[-125.52471924 86.33251953]
[-121.61878204 84.89664459]
[-116.87955475 85.23715973]
[-112.13999939 87.72494507]
[-97.15316010 87.09680939]
[-82.16631317 86.46867371]
[-69.77420807 78.20520020]
[-55.66213989 85.35781860]
[-40.67529678 84.72968292]
[-25.68845558 84.10154724]
[-10.70161247 83.47341919]
[4.28523016 82.84528351]
[19.27207184 82.21714783]
[34.25891495 81.58901215]
[49.24575806 80.96087646]
[64.23259735 80.33274078]
[79.21944427 79.70460510]
[108.91213989 84.54838562]
[121.74260712 76.77798462]
[134.57307434 69.00757599]
[147.40353394 61.23717117]
[160.23399353 53.46676636]
[173.06446838 45.69636154]
[185.89492798 37.92595673]
[198.72538757 30.15555191]
[211.55584717 22.38514709]
[212.72604370 5.54298878]
[223.57795715 -7.17289162]
[239.70375061 -10.90131569]
[254.73187256 -4.37151241]
[267.39678955 -12.40891457]
[280.06170654 -20.44631577]
[292.72662354 -28.48371887]
[305.39154053 -36.52112198]
[313.50280762 -53.01843262]
[331.02313232 -53.14359283]
[343.51693726 -61.44446564]
[356.01077271 -69.74533844]
[359.25482178 -84.98062134]
[372.04357910 -93.22090912]
[386.54809570 -90.03430176]
[399.04193115 -98.33517456]
[399.22875977 -116.41091156]
[410.09271240 -130.66265869]
[427.17221069 -135.54605103]
[443.63552856 -129.30226135]
[455.77078247 -138.11904907]
[467.90603638 -146.93582153]
[474.52273560 -161.30697632]
[489.36718750 -162.52825928]
[501.50244141 -171.34504700]
[508.78439331 -190.09553528]
[528.03503418 -191.44036865]
[539.79040527 -200.75758362]
[551.54583740 -210.07479858]
[553.11309814 -225.80117798]
[565.39434814 -235.74838257]
[581.10327148 -234.01489258]
[590.92010498 -221.62918091]
[589.02062988 -205.93945312]
[576.53179932 -196.25415039]
[560.86303711 -198.31939697]
[549.10766602 -189.00218201]
[537.35223389 -179.68496704]
[537.08227539 -169.38948059]
[531.03417969 -160.78254700]
[521.02880859 -156.87910461]
[510.31921387 -159.20979309]
[498.18395996 -150.39300537]
[492.43524170 -136.65249634]
[476.72280884 -134.80056763]
[464.58755493 -125.98379517]
[452.45230103 -117.16701508]
[454.25347900 -105.08654022]
[450.70153809 -93.32472229]
[442.41781616 -84.15293121]
[430.94351196 -79.36988831]
[418.45318604 -79.94908905]
[407.34280396 -85.84135437]
[394.84896851 -77.54048157]
[392.16586304 -62.93443680]
[379.61361694 -54.33819199]
[364.31164551 -57.25152206]
[351.81781006 -48.95064545]
[339.32400513 -40.64977264]
[336.60583496 -28.82006454]
[326.20773315 -21.81130409]
[313.42895508 -23.85620117]
[300.76403809 -15.81879902]
[288.09909058 -7.78139734]
[275.43417358 0.25600436]
[262.76925659 8.29340649]
[263.16448975 21.67481613]
[256.83047485 33.59178925]
[245.33465576 40.86640549]
[231.63661194 41.49876022]
[219.32626343 35.21561050]
[206.49578857 42.98601532]
[193.66532898 50.75642014]
[180.83486938 58.52682495]
[168.00440979 66.29723358]
[155.17393494 74.06763458]
[142.34347534 81.83804321]
[129.51301575 89.60844421]
[116.68254852 97.37885284]
[131.24496460 93.78220367]
[145.87463379 97.09476471]
[157.46733093 106.61364746]
[163.56329346 120.31909943]
[162.86901855 135.30302429]
[155.53184509 148.38606262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[29 44]
[30 43]
[31 42]
[32 38]
[33 37]
[56 143]
[57 142]
[58 141]
[59 140]
[60 139]
[61 138]
[62 137]
[63 136]
[64 135]
[68 130]
[69 129]
[70 128]
[71 127]
[72 126]
[74 123]
[75 122]
[76 121]
[79 118]
[80 117]
[84 111]
[85 110]
[86 109]
[88 107]
[89 106]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
