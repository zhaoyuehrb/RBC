%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGGCGCGGGGCGGCGCGGCCGGAGCCCGGGGCGCGCACUCGGCUCGGCCCGGCCCGGGCCGCAGC\
) } def
/len { sequence length } bind def

/coor [
[169.47360229 270.84478760]
[163.05090332 257.28939819]
[156.62820435 243.73397827]
[142.55815125 238.98329163]
[135.85151672 225.32768250]
[140.92987061 210.60192871]
[134.50717163 197.04652405]
[128.08447266 183.49111938]
[121.66177368 169.93571472]
[115.76369476 165.08714294]
[115.26968384 155.63566589]
[109.45287323 141.80943298]
[103.63606262 127.98320007]
[97.81925201 114.15696716]
[86.79692078 105.55464935]
[88.35452271 91.65984344]
[82.53770447 77.83361053]
[75.81670380 64.42361450]
[68.22110748 51.48889160]
[60.62551498 38.55417633]
[53.02992249 25.61945724]
[45.43432617 12.68473816]
[31.77430725 4.70260763]
[32.00154495 -10.19026375]
[24.40595245 -23.12498283]
[8.94983292 -24.49902534]
[-2.72463822 -34.72088242]
[-6.12838840 -49.86003876]
[0.04739361 -64.09518433]
[13.42799377 -71.95261383]
[28.86829758 -70.41098022]
[40.43119431 -60.06307983]
[43.67051315 -44.88788986]
[37.34067154 -30.72057724]
[44.93626404 -17.78585815]
[58.05299759 -10.72890568]
[58.36904526 5.08914328]
[65.96463776 18.02386093]
[73.56023407 30.95858002]
[81.15583038 43.89329910]
[88.75142670 56.82801819]
[92.39624023 58.02652740]
[95.54070282 61.24836349]
[97.14113617 66.18260193]
[96.36393738 72.01679993]
[102.18074799 85.84303284]
[113.20307922 94.44535065]
[111.64547729 108.34015656]
[117.46229553 122.16638947]
[123.27910614 135.99261475]
[129.09591675 149.81884766]
[135.21717834 163.51301575]
[141.63987732 177.06842041]
[148.06257629 190.62382507]
[154.48527527 204.17922974]
[169.09759521 209.57533264]
[175.41801453 223.41392517]
[170.18360901 237.31127930]
[176.60630798 250.86668396]
[183.02900696 264.42208862]
[198.32421875 264.98330688]
[211.60087585 272.59835815]
[219.80810547 285.51736450]
[221.05992126 300.77157593]
[215.06869507 314.85574341]
[203.21115112 324.53341675]
[188.21206665 327.58071899]
[173.51812744 323.29742432]
[162.50587463 312.66778564]
[157.70587158 298.13442993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[6 55]
[7 54]
[8 53]
[9 52]
[11 51]
[12 50]
[13 49]
[14 48]
[16 46]
[17 45]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[24 35]
[25 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
