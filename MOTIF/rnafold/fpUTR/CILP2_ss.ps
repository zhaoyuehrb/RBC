%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCAGCGGCCGCCAGACCCGCCGGAGUUGGACCCGAGCACGCCGCGGAGCCCGGACCCUCCCUCGGACGCUCUGCCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[41.91634750 132.70442200]
[30.07914543 121.48908997]
[15.43800640 124.75054169]
[0.79686850 128.01199341]
[-13.84426975 131.27345276]
[-20.38145638 147.97100830]
[-35.40553284 157.47444153]
[-52.98613358 156.24848938]
[-66.31061554 144.95120239]
[-80.67462158 149.27268982]
[-95.03862762 153.59417725]
[-109.40264130 157.91566467]
[-112.84627533 172.88352966]
[-123.32421875 184.11331177]
[-138.01795959 188.58427429]
[-152.97496033 185.09375000]
[-164.17184448 174.58065796]
[-168.59674072 159.87297058]
[-165.05934143 144.92698669]
[-154.51119995 133.76310730]
[-139.78971863 129.38433838]
[-124.85489655 132.96856689]
[-113.72412872 143.55165100]
[-99.36011505 139.23016357]
[-84.99610901 134.90867615]
[-70.63210297 130.58718872]
[-68.28775024 118.40693665]
[-60.86748886 108.37635040]
[-49.77719879 102.50203705]
[-37.16440201 101.99296570]
[-25.50249863 107.01214600]
[-17.10572243 116.63230896]
[-2.46458411 113.37085724]
[12.17655373 110.10940552]
[26.81769180 106.84795380]
[31.03577423 94.04408264]
[41.15102768 84.96860504]
[54.54894257 82.11312866]
[67.69316101 86.34235382]
[77.05886078 96.63620758]
[91.80934143 93.91165924]
[98.71822357 89.37033844]
[107.14766693 91.36729431]
[121.98781586 89.18328094]
[131.41603088 76.78382874]
[146.49717712 74.78032684]
[158.26005554 83.84511566]
[173.10020447 81.66109467]
[187.94035339 79.47707367]
[202.78050232 77.29306030]
[217.62065125 75.10903931]
[232.46080017 72.92502594]
[247.30094910 70.74100494]
[262.05145264 68.01645660]
[276.69256592 64.75500488]
[291.33370972 61.49354935]
[305.97485352 58.23209763]
[312.02404785 43.94269943]
[325.33438110 35.96681976]
[340.78775024 37.37134933]
[352.44204712 47.61621475]
[355.81591797 62.76205444]
[349.61206055 76.98499298]
[336.21600342 84.81600952]
[320.77877808 83.24392700]
[309.23629761 72.87323761]
[294.59515381 76.13468933]
[279.95404053 79.39614105]
[265.31289673 82.65759277]
[261.93679810 86.33768463]
[256.12869263 87.78233337]
[249.48497009 85.58115387]
[234.64482117 87.76517487]
[219.80467224 89.94919586]
[204.96452332 92.13320923]
[190.12437439 94.31723022]
[175.28422546 96.50124359]
[160.44406128 98.68526459]
[151.79148865 110.75457764]
[136.77256775 113.18088531]
[124.17182922 104.02342987]
[109.33168030 106.20744324]
[94.53389740 108.66213989]
[79.78340912 111.38669586]
[72.79190826 126.66342926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[9 26]
[10 25]
[11 24]
[12 23]
[40 84]
[41 83]
[43 82]
[44 81]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
