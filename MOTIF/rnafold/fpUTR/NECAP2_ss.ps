%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACCUGGUCAGAGAGUCGCACCGCUUCCGUCCGUCGGACAGAGGAACGGUGGAAGUCGCCGGAAGUUCGGUGGGCUCCAGGCGUCGCG\
) } def
/len { sequence length } bind def

/coor [
[82.45107269 433.35180664]
[80.90031433 418.43218994]
[69.20999146 409.27404785]
[67.42476654 394.16549683]
[77.10995483 381.96572876]
[75.55919647 367.04608154]
[74.00843811 352.12646484]
[72.45767975 337.20684814]
[70.90691376 322.28723145]
[59.64888382 332.19967651]
[44.66231155 331.56515503]
[34.28244019 320.73657227]
[34.28235626 305.73657227]
[44.66210556 294.90786743]
[59.64867020 294.27316284]
[70.90691376 304.18569946]
[72.45767975 289.26608276]
[74.00843811 274.34646606]
[75.55919647 259.42684937]
[73.06584167 252.29669189]
[77.42965698 244.02215576]
[79.49446106 229.16494751]
[81.55926514 214.30773926]
[83.62406921 199.45054626]
[85.68887329 184.59333801]
[87.23963165 169.67370605]
[88.27449799 154.70945740]
[89.30936432 139.74519348]
[90.34423065 124.78092957]
[91.37909698 109.81667328]
[87.04031372 95.45787811]
[77.89178467 83.57072449]
[68.74325562 71.68357086]
[59.59472656 59.79642105]
[45.14282608 50.93194962]
[49.66018295 34.59090424]
[66.61314392 34.40806961]
[71.48188019 50.64789200]
[80.63040924 62.53504562]
[89.77893829 74.42219543]
[98.92746735 86.30934906]
[106.42300415 86.56822205]
[104.09341431 71.75022125]
[99.00714874 57.63888550]
[107.84031677 45.51555634]
[122.83139801 46.03276062]
[130.80802917 58.73604202]
[124.76040649 72.46399689]
[121.41406250 87.08596039]
[128.90959167 87.34483337]
[138.85643005 76.11717224]
[148.80326843 64.88951111]
[158.75010681 53.66184998]
[159.22061157 37.62569809]
[172.13749695 28.11079025]
[187.59205627 32.41615295]
[193.72886658 47.23907471]
[185.84030151 61.20868683]
[169.97776794 63.60868835]
[160.03092957 74.83634949]
[150.08409119 86.06401062]
[140.13725281 97.29167175]
[106.34336090 110.85153961]
[105.30849457 125.81580353]
[104.27362061 140.78005981]
[103.23875427 155.74432373]
[102.20388794 170.70857239]
[104.89582825 177.12957764]
[103.92234039 183.00614929]
[100.54608154 186.65814209]
[98.48127747 201.51533508]
[96.41647339 216.37254333]
[94.35166931 231.22975159]
[92.28686523 246.08695984]
[90.47882080 260.97760010]
[88.92805481 275.89721680]
[87.37729645 290.81683350]
[85.82653809 305.73645020]
[85.82653809 320.73645020]
[87.37729645 335.65609741]
[88.92805481 350.57571411]
[90.47882080 365.49533081]
[92.02957916 380.41494751]
[104.01673889 390.36209106]
[105.37689209 405.51480103]
[95.81993866 416.88143921]
[97.37069702 431.80105591]
[107.42746735 444.75457764]
[100.98806763 459.83654785]
[84.67679596 461.53195190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[16 78]
[17 77]
[18 76]
[19 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 41]
[32 40]
[33 39]
[34 38]
[50 62]
[51 61]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
