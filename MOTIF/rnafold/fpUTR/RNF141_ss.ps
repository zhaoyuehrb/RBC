%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGCGACCGGGUCCCGGCCUGAGUCGCGGCCACCCGCAGGUCUGAGCUGUGGGCUGAGGCAGCGCAGCCGCUGCCGCAGGGUGCGCGAUGCCUUGAACCUGGGAAACUAUGUGAAGCAACACUCUGGAUUUUGAAAGACAUCUUUUCAUC\
) } def
/len { sequence length } bind def

/coor [
[364.49179077 409.26782227]
[356.90362549 396.32873535]
[349.31546021 383.38964844]
[341.59573364 370.52865601]
[333.74520874 357.74703979]
[325.76470947 345.04617310]
[317.65512085 332.42739868]
[311.64184570 330.59863281]
[306.96105957 325.30770874]
[305.56881714 317.58480835]
[294.85458374 307.08694458]
[284.14035034 296.58908081]
[273.42611694 286.09121704]
[262.71188354 275.59335327]
[251.89114380 265.20532227]
[240.96499634 254.92817688]
[226.13157654 255.63916016]
[214.90451050 245.37234497]
[214.25933838 229.80886841]
[203.33320618 219.53175354]
[192.40705872 209.25462341]
[189.54649353 209.23947144]
[186.52067566 208.05558777]
[183.78791809 205.63452148]
[181.82246399 202.07963562]
[181.05279541 197.66635132]
[171.00068665 186.53283691]
[160.94857788 175.39932251]
[150.89646912 164.26580811]
[140.84436035 153.13229370]
[130.79225159 141.99879456]
[120.62710571 130.96838379]
[110.34997559 120.04223633]
[100.07285309 109.11608887]
[90.31490326 117.10527802]
[73.98235321 115.32837677]
[59.67915344 110.80968475]
[45.37595749 106.29099274]
[31.07276154 101.77230072]
[16.76956558 97.25360107]
[2.46636963 92.73490906]
[-11.83682632 88.21621704]
[-24.93217850 96.76290131]
[-40.45123291 94.84119415]
[-51.06636810 83.35846710]
[-51.76543808 67.73651886]
[-42.21836853 55.35155106]
[-26.93298912 52.05136871]
[-13.12659168 59.39421463]
[-7.31813335 73.91302490]
[6.98506260 78.43171692]
[21.28825760 82.95040894]
[35.59145355 87.46910095]
[49.89464951 91.98779297]
[64.19784546 96.50648499]
[78.50104523 101.02517700]
[89.10764313 90.41857910]
[84.58895111 76.11537933]
[80.07025909 61.81218719]
[68.53513336 50.98391342]
[72.07896423 36.51703644]
[67.56027222 22.21384239]
[63.04158020 7.91064548]
[58.52288818 -6.39255047]
[54.00419617 -20.69574738]
[49.48550415 -34.99894333]
[44.96680832 -49.30213928]
[32.51107407 -59.96922302]
[35.78674698 -76.03788757]
[51.42409515 -80.97807312]
[63.33675385 -69.70773315]
[59.27000427 -53.82083130]
[63.78870010 -39.51763535]
[68.30738831 -25.21443939]
[72.82608795 -10.91124344]
[77.34477997 3.39195275]
[81.86347198 17.69514847]
[86.38216400 31.99834442]
[97.59407806 41.80355835]
[94.37345123 57.29349518]
[98.89215088 71.59668732]
[103.41084290 85.89988708]
[110.99900055 98.83896637]
[121.27612305 109.76511383]
[131.55325317 120.69126129]
[139.76460266 124.83154297]
[141.92576599 131.94668579]
[151.97787476 143.08018494]
[162.02998352 154.21369934]
[172.08209229 165.34721375]
[182.13420105 176.48072815]
[192.18630981 187.61424255]
[202.68417358 198.32847595]
[213.61032104 208.60560608]
[224.53646851 218.88272095]
[240.11026001 218.57479858]
[251.04452515 229.15290833]
[251.24211121 244.00202942]
[262.16827393 254.27915955]
[270.61746216 257.90945435]
[273.20974731 264.87911987]
[283.92398071 275.37698364]
[294.63821411 285.87484741]
[305.35244751 296.37271118]
[316.06671143 306.87057495]
[313.46350098 292.09817505]
[316.89172363 277.49517822]
[325.79660034 265.42443848]
[338.73730469 257.83905029]
[353.61996460 255.96638489]
[368.03643799 260.10946655]
[379.65408325 269.59786987]
[386.59310913 282.89639282]
[387.73071289 297.85317993]
[382.88281250 312.04818726]
[372.83386230 323.18453979]
[359.20983887 329.46035767]
[344.21517944 329.86013794]
[330.27392578 324.31777954]
[338.38351440 336.93658447]
[345.70098877 342.50640869]
[346.52679443 349.89654541]
[354.37731934 362.67813110]
[361.57965088 368.39608765]
[362.25454712 375.80151367]
[369.84271240 388.74057007]
[377.43087769 401.67965698]
[388.11016846 400.50607300]
[398.52682495 402.97476196]
[407.47915649 408.77441406]
[413.94332886 417.21105957]
[417.19036865 427.29092407]
[416.86837769 437.83758545]
[413.04043579 447.62905884]
[406.17437744 455.53964233]
[412.68261719 469.05416870]
[419.19088745 482.56869507]
[425.69912720 496.08322144]
[432.20739746 509.59777832]
[438.71563721 523.11230469]
[453.32257080 529.74682617]
[457.10287476 545.33813477]
[447.15661621 557.92590332]
[431.11373901 557.85388184]
[421.28094482 545.17730713]
[425.20111084 529.62054443]
[418.69287109 516.10601807]
[412.18460083 502.59149170]
[405.67636108 489.07696533]
[399.16809082 475.56240845]
[392.65982056 462.04788208]
[373.28207397 459.93402100]
[358.94415283 446.51861572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 123]
[5 122]
[6 120]
[7 119]
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[15 99]
[16 98]
[19 95]
[20 94]
[21 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[32 85]
[33 84]
[34 83]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[57 82]
[58 81]
[59 80]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
