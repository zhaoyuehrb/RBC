%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGGCUGGGCGCGCGCGGCGCAGAGCAGGUGCCGGGGAGCCCUUCGCAUGCGGCUGCCGGGCCGGAGGUGGUAGCGGCGCCGGGCGCGCUCCGCCCGCCCCUCCUCCGGGCCGCACUGAGGCUCGGGCGCGCGGGGAC\
) } def
/len { sequence length } bind def

/coor [
[350.29809570 349.43734741]
[350.56036377 338.46398926]
[339.60769653 328.21514893]
[328.65499878 317.96630859]
[317.70230103 307.71746826]
[306.74963379 297.46865845]
[295.79693604 287.21981812]
[281.21719360 284.17343140]
[276.42715454 269.09478760]
[265.47445679 258.84594727]
[254.52178955 248.59710693]
[243.45640564 238.47004700]
[232.27966309 228.46601868]
[221.10293579 218.46197510]
[209.92620850 208.45794678]
[198.74946594 198.45391846]
[187.57273865 188.44989014]
[172.92916870 185.72679138]
[167.80673218 170.75778198]
[156.63000488 160.75375366]
[145.45327759 150.74972534]
[134.27653503 140.74569702]
[123.09980774 130.74165344]
[111.92307281 120.73762512]
[100.41943359 123.91720581]
[88.81137848 121.14292908]
[79.98857880 113.10541534]
[76.14734650 101.80548096]
[61.58935165 98.19097137]
[47.03135300 94.57645416]
[31.77338982 98.76036072]
[21.28559113 88.18419647]
[6.72759342 84.56967926]
[-7.83040380 80.95516205]
[-21.26070595 88.84596252]
[-35.97309494 84.97294617]
[-43.41300201 72.12058258]
[-57.97099686 68.50606537]
[-72.52899170 64.89154816]
[-89.35836792 66.94300079]
[-95.98848724 51.33922577]
[-82.82991028 40.64865875]
[-68.91448212 50.33354950]
[-54.35648346 53.94806671]
[-39.79848480 57.56258392]
[-27.21108818 49.68267059]
[-12.39571953 53.14091873]
[-4.21588850 66.39716339]
[10.34210873 70.01168060]
[24.90010643 73.62619781]
[39.11678314 69.18375397]
[50.64587021 80.01845551]
[65.20386505 83.63297272]
[79.76186371 87.24748993]
[83.65591431 82.53347015]
[88.61782074 78.96063995]
[85.97679138 64.19496918]
[83.33576202 49.42930222]
[80.69473267 34.66363144]
[78.05370331 19.89796448]
[75.41268158 5.13229561]
[71.37226105 -0.26198757]
[70.80907440 -6.01744556]
[72.99657440 -10.34390450]
[71.01126862 -25.21194267]
[69.02596283 -40.07997894]
[60.93644333 -54.97951126]
[73.01429749 -66.87748718]
[87.79077148 -58.56533432]
[83.89399719 -42.06528854]
[85.87930298 -27.19725037]
[87.86461639 -12.32921219]
[90.17834473 2.49126792]
[92.81937408 17.25693703]
[95.46040344 32.02260590]
[98.10143280 46.78827286]
[100.74246216 61.55394363]
[103.38348389 76.31961060]
[120.89024353 88.34639740]
[121.92710876 109.56089020]
[133.10383606 119.56492615]
[144.28057861 129.56895447]
[155.45730591 139.57299805]
[166.63403320 149.57702637]
[177.81076050 159.58105469]
[193.25376892 163.01969910]
[197.57676697 177.27314758]
[208.75350952 187.27719116]
[219.93023682 197.28121948]
[231.10696411 207.28524780]
[242.28370667 217.28929138]
[253.46043396 227.29331970]
[262.01394653 230.72279358]
[264.77062988 237.64442444]
[275.72329712 247.89324951]
[286.67599487 258.14208984]
[302.03915405 261.92153931]
[306.04577637 276.26712036]
[316.99847412 286.51596069]
[327.95114136 296.76480103]
[338.90383911 307.01364136]
[349.85653687 317.26248169]
[360.80920410 327.51132202]
[380.59234619 331.10153198]
[385.58233643 349.73483276]
[396.97766113 359.48916626]
[408.37295532 369.24349976]
[417.00024414 372.48291016]
[419.90936279 379.34185791]
[431.08609009 389.34588623]
[442.26281738 399.34994507]
[457.70584106 402.78857422]
[462.02883911 417.04202271]
[473.20556641 427.04605103]
[481.75909424 430.47552490]
[484.51574707 437.39715576]
[495.46844482 447.64599609]
[503.94400024 451.26385498]
[506.54687500 458.24478149]
[517.27014160 468.73339844]
[527.99346924 479.22201538]
[538.71673584 489.71063232]
[554.26776123 496.46359253]
[552.08367920 513.27624512]
[535.32342529 515.83172607]
[528.22808838 500.43392944]
[517.50482178 489.94531250]
[506.78152466 479.45666504]
[496.05825806 468.96804810]
[485.21960449 458.59869385]
[474.26690674 448.34985352]
[463.20153809 438.22277832]
[452.02481079 428.21875000]
[437.38122559 425.49566650]
[432.25878906 410.52667236]
[421.08206177 400.52264404]
[409.90533447 390.51858521]
[398.61862183 380.63882446]
[387.22332764 370.88449097]
[375.82800293 361.13015747]
[365.65536499 362.83651733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[9 96]
[10 95]
[11 94]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[19 85]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[28 54]
[29 53]
[30 52]
[32 50]
[33 49]
[34 48]
[37 45]
[38 44]
[39 43]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[64 72]
[65 71]
[66 70]
[105 140]
[106 139]
[107 138]
[109 137]
[110 136]
[111 135]
[113 133]
[114 132]
[116 131]
[117 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
