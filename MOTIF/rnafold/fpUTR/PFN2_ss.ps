%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCUCCCCCCGCGCCGCCGCCGCCCGCUACCGCCGCCGCCGCCGCUGCGCCUGCUGCUCCUCGCCGUCCGCGCUGCAGUGCGAAGGGCUCGAAG\
) } def
/len { sequence length } bind def

/coor [
[79.98655701 341.53271484]
[72.23501587 327.95156860]
[75.07763672 312.57452393]
[87.17221832 302.66213989]
[87.17221832 287.66213989]
[76.80615234 279.83081055]
[72.83911896 267.25421143]
[76.95600128 254.52000427]
[87.84853363 246.41204834]
[88.32444763 231.41960144]
[88.80036926 216.42715454]
[78.45223236 205.77578735]
[78.72130585 190.56452942]
[89.96360779 179.78268433]
[90.43952942 164.79022217]
[90.91544342 149.79777527]
[91.39136505 134.80532837]
[91.86728668 119.81288147]
[81.28469849 110.41291809]
[78.87671661 96.46472168]
[65.88632965 88.96472168]
[50.06638336 88.76532745]
[42.91289139 75.70099640]
[29.92251015 68.20099640]
[14.10256004 68.00160980]
[6.94906950 54.93727493]
[-6.04131174 47.43727493]
[-18.80173492 50.01500702]
[-29.51406097 43.35310364]
[-32.63766098 31.54778481]
[-45.38354492 23.63940239]
[-61.78267670 23.66018867]
[-69.76496887 9.33485889]
[-61.11892319 -4.59991360]
[-44.73884583 -3.80923033]
[-37.47516251 10.89352131]
[-24.72928047 18.80190277]
[-7.26580811 18.32822037]
[1.45868850 34.44689178]
[14.44906998 41.94689178]
[29.33986092 41.60982895]
[37.42250824 55.21061707]
[50.41289139 62.71061707]
[65.30368042 62.37355423]
[73.38632965 75.97433472]
[86.37671661 83.47433472]
[98.64164734 78.62603760]
[111.42166138 81.88268280]
[123.35808563 72.79853821]
[129.65396118 58.28397369]
[144.46762085 56.73326111]
[156.40403748 47.64911652]
[168.34046936 38.56497192]
[180.27690125 29.48082542]
[182.53837585 14.06902790]
[194.77301025 5.02645159]
[209.45187378 7.27739429]
[221.38829041 -1.80675089]
[227.68415833 -16.32131767]
[242.49781799 -17.87202835]
[254.43424988 -26.95617294]
[258.00750732 -42.59623337]
[272.52517700 -49.42386246]
[286.85055542 -42.20148468]
[289.99444580 -26.46949387]
[279.54513550 -14.29612637]
[263.51840210 -15.01974583]
[251.58197021 -5.93560028]
[246.13987732 7.92920685]
[230.47244263 10.12967682]
[218.53601074 19.21382141]
[216.79403687 33.96174240]
[204.81820679 43.34439468]
[189.36103821 41.41725159]
[177.42462158 50.50139999]
[165.48818970 59.58554459]
[153.55175781 68.66969299]
[148.10966492 82.53450012]
[132.44223022 84.73497009]
[120.50580597 93.81911469]
[119.03626251 109.81387329]
[106.85973358 120.28880310]
[106.38381195 135.28125000]
[105.90789032 150.27369690]
[105.43197632 165.26614380]
[104.95605469 180.25859070]
[115.49188995 191.73178101]
[114.79566956 206.92947388]
[103.79281616 216.90307617]
[103.31689453 231.89552307]
[102.84098053 246.88796997]
[115.01849365 259.32321167]
[114.53672028 276.38592529]
[102.17221832 287.66213989]
[102.17221832 302.66213989]
[114.26679993 312.57452393]
[117.10942078 327.95156860]
[109.35787964 341.53271484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[9 91]
[10 90]
[11 89]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[20 46]
[21 45]
[23 43]
[24 42]
[26 40]
[27 39]
[30 37]
[31 36]
[48 80]
[49 79]
[51 77]
[52 76]
[53 75]
[54 74]
[57 71]
[58 70]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
