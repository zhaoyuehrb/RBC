%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACGCCUUGCGGGGCAGUGUGGGAGGGAGAAGUCCAGGGCGGACAGGCUGGGCGCACCCGUGCUCGCGCACCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[86.74330139 231.41911316]
[78.17854309 244.35838318]
[63.63224411 249.76068115]
[48.69775391 245.54872131]
[39.11768723 233.34208679]
[38.57577896 217.83447266]
[47.28039932 204.98887634]
[61.88444519 199.74470520]
[65.95605469 185.30787659]
[70.02765656 170.87104797]
[74.09926605 156.43421936]
[72.85034180 148.94432068]
[78.62451935 141.51646423]
[83.25977325 127.25061035]
[87.89502716 112.98476410]
[82.72975922 104.10771179]
[83.34519958 93.85572052]
[89.53535461 85.66034698]
[99.22823334 82.26475525]
[104.96849060 68.40656281]
[110.70874023 54.54837036]
[116.44898987 40.69017792]
[122.18923950 26.83198547]
[127.92949677 12.97379208]
[133.66973877 -0.88440102]
[129.91087341 -20.50467300]
[145.23136902 -32.03503036]
[149.86662292 -46.30087662]
[154.50187683 -60.56672287]
[145.51657104 -71.21617126]
[143.05516052 -84.81981659]
[147.66586304 -97.73699951]
[158.01882935 -106.56572723]
[171.28752136 -109.03853607]
[176.47927856 -123.11140442]
[181.67103577 -137.18428040]
[186.86279297 -151.25714111]
[192.05455017 -165.33001709]
[197.24630737 -179.40289307]
[187.36367798 -191.15997314]
[184.69941711 -206.28602600]
[189.97019958 -220.71220398]
[201.75820923 -230.55792236]
[216.89253235 -233.17475891]
[231.30210876 -227.85877991]
[241.11083984 -216.03997803]
[243.68022156 -200.89752197]
[238.31910706 -186.50466919]
[226.46960449 -176.73303223]
[211.31918335 -174.21113586]
[206.12742615 -160.13825989]
[200.93566895 -146.06538391]
[195.74391174 -131.99252319]
[190.55215454 -117.91965485]
[185.36039734 -103.84677887]
[194.88745117 -90.63004303]
[194.75399780 -74.17354584]
[184.81719971 -60.84930801]
[168.76773071 -55.93146896]
[164.13247681 -41.66562271]
[159.49722290 -27.39977455]
[165.06950378 -18.44970894]
[164.64010620 -7.69238281]
[158.10736084 1.14376664]
[147.52793884 4.85585070]
[141.78768921 18.71404266]
[136.04743958 32.57223511]
[130.30718994 46.43042755]
[124.56693268 60.28862381]
[118.82668304 74.14681244]
[113.08643341 88.00500488]
[116.65480042 106.14427948]
[102.16087341 117.62001801]
[97.52561951 131.88586426]
[92.89036560 146.15171814]
[88.53609467 160.50581360]
[84.46448517 174.94264221]
[80.39288330 189.37947083]
[76.32127380 203.81629944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[10 77]
[11 76]
[13 75]
[14 74]
[15 73]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[27 61]
[28 60]
[29 59]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
