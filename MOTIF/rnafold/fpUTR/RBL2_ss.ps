%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGUUUGCGGCGGCGCAGGCGCGGUGCGGGCGGCGGACGGGCGGGCGCUUCGCCGUUUGAAUGGCUGCGGGCCCGGGCCCUCACCUCACCUGAGGUCCGGCCGCCCAGGGGUGCGCU\
) } def
/len { sequence length } bind def

/coor [
[84.35820770 104.51126862]
[69.65127563 101.56064606]
[54.94434357 98.61001587]
[40.23741531 95.65939331]
[25.53048325 92.70877075]
[10.82355309 89.75814056]
[-3.88337755 86.80751801]
[-18.66307068 84.24613953]
[-33.50522614 82.07579041]
[-48.34738159 79.90544128]
[-63.18953705 77.73509216]
[-78.03169250 75.56473541]
[-92.87384796 73.39438629]
[-107.76811981 71.61658478]
[-122.70413208 70.23255920]
[-137.64015198 68.84853363]
[-152.57615662 67.46450806]
[-164.66702271 77.28534698]
[-179.79454041 75.66898346]
[-189.08270264 64.08167267]
[-204.01872253 62.69765091]
[-218.47392273 69.12862396]
[-230.43299866 60.25000763]
[-245.36900330 58.86598206]
[-261.83837891 66.97105408]
[-275.79885864 56.42665100]
[-290.76620483 55.43737411]
[-305.73355103 54.44809341]
[-318.70007324 63.89526367]
[-334.13186646 59.50907516]
[-340.19104004 44.65423203]
[-332.22943115 30.72610474]
[-316.35458374 28.40915489]
[-304.74426270 39.48075104]
[-289.77691650 40.47003174]
[-274.80960083 41.45930862]
[-265.43228149 33.69387436]
[-252.87886047 34.47554779]
[-243.98498535 43.92996979]
[-229.04896545 45.31399536]
[-215.66207886 38.78402328]
[-202.63468933 47.76163864]
[-187.69868469 49.14566422]
[-176.43949890 39.46234894]
[-161.27255249 40.65317917]
[-151.19213867 52.52849197]
[-136.25611877 53.91251755]
[-121.32010651 55.29654312]
[-106.38409424 56.68056870]
[-102.11773682 54.28882599]
[-96.28588104 54.64123535]
[-90.70349884 58.55223465]
[-75.86134338 60.72258377]
[-61.01918793 62.89293289]
[-46.17703247 65.06328583]
[-31.33487701 67.23363495]
[-16.49272156 69.40398407]
[-12.10607719 67.24073029]
[-6.30094910 67.90042877]
[-0.93275237 72.10058594]
[13.77417850 75.05121613]
[28.48110962 78.00183868]
[43.18803787 80.95246124]
[57.89496994 83.90309143]
[72.60189819 86.85371399]
[87.30883026 89.80433655]
[102.99132538 83.99783325]
[115.51725769 95.07740784]
[130.29695129 97.63878632]
[145.07664490 100.20016479]
[159.99534607 94.93300629]
[171.21447754 104.72995758]
[185.99417114 107.29133606]
[200.77386475 109.85272217]
[215.55355835 112.41410065]
[230.39570618 114.58444977]
[245.28999329 116.36225891]
[260.18426514 118.14006042]
[275.07852173 119.91786957]
[290.01455688 121.30189514]
[304.98190308 122.29117584]
[316.80929565 112.15459442]
[331.97421265 113.37107849]
[341.56500244 124.70916748]
[356.53234863 125.69844818]
[371.49969482 126.68772888]
[386.46704102 127.67700195]
[401.43438721 128.66629028]
[415.89926147 120.93974304]
[429.67822266 129.83198547]
[428.59667969 146.19543457]
[413.76721191 153.19676208]
[400.44509888 143.63362122]
[385.47775269 142.64434814]
[370.51040649 141.65507507]
[355.54306030 140.66578674]
[340.57571411 139.67651367]
[329.57608032 149.65365601]
[314.38299561 148.86360168]
[303.99261475 137.25851440]
[289.02526855 136.26924133]
[284.82351685 138.77276611]
[278.98440552 138.57441711]
[273.30072021 134.81214905]
[258.40646362 133.03433228]
[243.51217651 131.25653076]
[228.61790466 129.47872925]
[224.28990173 131.75701904]
[218.46937561 131.25077820]
[212.99217224 127.19379425]
[198.21247864 124.63241577]
[183.43278503 122.07102966]
[168.65309143 119.50965118]
[154.79154968 124.96002197]
[142.51525879 114.97985840]
[127.73557281 112.41847992]
[112.95587921 109.85710144]
[102.97216034 116.00573730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[6 61]
[7 60]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 49]
[15 48]
[16 47]
[17 46]
[20 43]
[21 42]
[23 40]
[24 39]
[26 36]
[27 35]
[28 34]
[68 117]
[69 116]
[70 115]
[72 113]
[73 112]
[74 111]
[75 110]
[76 107]
[77 106]
[78 105]
[79 104]
[80 101]
[81 100]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
