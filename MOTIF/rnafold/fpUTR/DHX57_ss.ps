%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCGCCGGGACUGUGCCGCUGCAGCUGGGCCACCGCAGGCUGCUCCAAGUGAGAAUCGUGAGGGUGGCCAAGUCCAGUUUGGACCUCUGACCCUUGGGCAGCACCUCCCGACAGCCGGCUCGGGACCCAACUCUGCGAGCCAGGUGAAA\
) } def
/len { sequence length } bind def

/coor [
[194.93737793 345.46859741]
[204.78269958 334.15179443]
[218.33253479 327.71737671]
[233.32492065 327.23944092]
[247.25646973 332.79742432]
[238.89114380 320.34664917]
[230.52580261 307.89590454]
[213.92369080 305.38690186]
[204.05500793 291.38821411]
[207.39927673 274.24679565]
[198.78172302 261.96929932]
[190.16415405 249.69177246]
[181.54658508 237.41424561]
[172.92901611 225.13671875]
[161.03712463 222.72366333]
[153.76412964 212.51329041]
[155.47496033 199.68940735]
[147.10963440 187.23864746]
[138.74430847 174.78790283]
[130.37898254 162.33714294]
[116.85877228 156.08787537]
[115.58492279 140.31803894]
[107.21958923 127.86728668]
[98.85426331 115.41653442]
[85.27404785 109.04645538]
[70.35201263 110.57380676]
[55.42996979 112.10115051]
[40.50793457 113.62849426]
[25.58589554 115.15583801]
[10.66385746 116.68318176]
[1.89667809 126.19715118]
[-10.60427284 127.13214874]
[-20.06238747 119.53056335]
[-35.01247787 120.75319672]
[-48.18377686 130.52299500]
[-63.12066269 123.75383759]
[-64.45734406 107.40925598]
[-50.81875992 98.30315399]
[-36.23511505 105.80310822]
[-21.28502655 104.58046722]
[-7.44956636 93.82656860]
[9.13651276 101.76114655]
[24.05854988 100.23380280]
[38.98058701 98.70645905]
[53.90262604 97.17910767]
[68.82466125 95.65176392]
[83.74670410 94.12442017]
[69.91913605 88.31078339]
[56.09156418 82.49715424]
[41.15825653 81.08425903]
[27.84025955 74.18273926]
[18.07515335 62.79666138]
[13.28361893 48.58254242]
[14.16275406 33.60832596]
[20.58465958 20.05254745]
[31.61503792 9.88737583]
[45.64913177 4.59169531]
[60.64517975 4.93595219]
[74.42147827 10.87006187]
[84.97377014 21.53069687]
[90.76684570 35.36688995]
[90.95787811 50.36585236]
[95.62509155 64.62127686]
[100.29230499 78.87670135]
[103.03085327 64.12880707]
[105.76940155 49.38091278]
[108.50794983 34.63302231]
[111.24649811 19.88512802]
[113.98504639 5.13723421]
[102.25073242 -2.79692578]
[94.45979309 -14.57482052]
[91.76561737 -28.39275551]
[94.54409027 -42.14972305]
[102.34152222 -53.76685715]
[113.94839478 -61.50159073]
[127.58683777 -64.20897675]
[130.62565613 -78.89794159]
[133.66445923 -93.58690643]
[136.70327759 -108.27586365]
[139.74208069 -122.96482849]
[137.02993774 -139.70043945]
[152.36070251 -146.93946838]
[163.56082153 -134.21179199]
[154.43104553 -119.92601776]
[151.39224243 -105.23705292]
[148.35342407 -90.54808807]
[145.31460571 -75.85913086]
[142.27580261 -61.17016602]
[155.13594055 -51.73182297]
[162.63261414 -37.58540344]
[163.22621155 -21.52827454]
[156.74783325 -6.76061249]
[144.44309998 3.75236702]
[128.73294067 7.87578154]
[125.99439240 22.62367439]
[123.25584412 37.37156677]
[120.51729584 52.11946106]
[117.77874756 66.86735535]
[115.04019928 81.61524963]
[118.29048920 96.97837067]
[111.30501556 107.05120087]
[119.67034149 119.50195312]
[128.03567505 131.95271301]
[142.15422058 139.09254456]
[142.82972717 153.97181702]
[151.19505310 166.42257690]
[159.56039429 178.87332153]
[167.92572021 191.32408142]
[184.63063049 199.00531006]
[185.20654297 216.51914978]
[193.82411194 228.79667664]
[202.44166565 241.07420349]
[211.05923462 253.35171509]
[219.67680359 265.62924194]
[233.15870667 266.41946411]
[243.55998230 274.72439575]
[247.20635986 287.32241821]
[242.97656250 299.53057861]
[251.34188843 311.98132324]
[259.70721436 324.43209839]
[269.64526367 335.66754150]
[280.98150635 345.49044800]
[292.31774902 355.31335449]
[303.65399170 365.13629150]
[314.99023438 374.95919800]
[326.32647705 384.78210449]
[337.76229858 394.48886108]
[349.29656982 404.07849121]
[360.83084106 413.66812134]
[376.54360962 411.96994019]
[388.80249023 421.94470215]
[390.33444214 437.67456055]
[380.23062134 449.82727051]
[364.48544312 451.19284058]
[352.44024658 440.96112061]
[351.24121094 425.20239258]
[339.70693970 415.61276245]
[328.17269897 406.02313232]
[320.97531128 404.15399170]
[316.50357056 396.11834717]
[305.16732788 386.29544067]
[293.83105469 376.47253418]
[282.49481201 366.64959717]
[271.15856934 356.82669067]
[259.82232666 347.00378418]
[263.63778687 361.51040649]
[261.33267212 376.33224487]
[253.29176331 388.99493408]
[240.85743713 397.38464355]
[226.10539246 400.10083008]
[211.49833679 396.69000244]
[199.47470093 387.72161865]
[192.04167175 374.69277954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 120]
[6 119]
[7 118]
[10 114]
[11 113]
[12 112]
[13 111]
[14 110]
[17 108]
[18 107]
[19 106]
[20 105]
[22 103]
[23 102]
[24 101]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[33 40]
[34 39]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[121 145]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
