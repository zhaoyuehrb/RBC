%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGUCUGUCAGGCCGCCUCCUCUCCGGCCGUCUGAUUUUCUACCCUUCGGCGCCCUGCUCUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[58.98526382 163.98719788]
[47.97669601 155.40888977]
[38.72225952 144.96229553]
[31.53400421 132.99964905]
[26.65430450 119.92430878]
[24.24769402 106.17715454]
[24.39532089 92.22171783]
[27.09220886 78.52855682]
[32.24742126 65.55937195]
[19.61186028 57.47589111]
[6.97630072 49.39241409]
[-5.65925837 41.30893326]
[-18.29481697 33.22545242]
[-30.93037796 25.14197350]
[-43.56593704 17.05849457]
[-59.36041641 16.13927460]
[-65.91187286 2.76289105]
[-78.54743195 -5.32058859]
[-91.18299103 -13.40406799]
[-105.58145905 -7.61926460]
[-120.62203217 -11.43510532]
[-130.52131653 -23.38432121]
[-131.47283936 -38.87219620]
[-123.11070251 -51.94332504]
[-108.65033722 -57.57159042]
[-93.65203857 -53.59281158]
[-83.88296509 -41.53691101]
[-83.09951782 -26.03962708]
[-70.46395874 -17.95614815]
[-57.82839584 -9.87266827]
[-42.93769455 -9.53163338]
[-35.48245621 4.42293549]
[-22.84689713 12.50641441]
[-10.21133804 20.58989525]
[2.42422104 28.67337418]
[15.05978012 36.75685501]
[27.69533920 44.84033203]
[40.33089828 52.92381287]
[51.59842682 41.40087891]
[65.04226685 32.51277161]
[80.05792999 26.65913200]
[95.97026062 24.10316086]
[112.06378174 24.95978165]
[127.61486816 29.19047928]
[141.92430115 36.60502625]
[154.34864807 46.87004089]
[164.32929993 59.52396393]
[171.41748047 73.99784088]
[175.29446411 89.64086151]
[175.78594971 105.74966431]
[172.86982727 121.59994507]
[186.76046753 127.26123810]
[200.65109253 132.92253113]
[215.93606567 128.04916382]
[229.19563293 137.08039856]
[230.25822449 153.08822632]
[218.30868530 163.79281616]
[202.51370239 160.98251343]
[194.98980713 146.81315613]
[181.09916687 141.15187073]
[167.20854187 135.49058533]
[159.58601379 147.18130493]
[149.95434570 157.28115845]
[138.63832092 165.44960022]
[126.01946259 171.41117859]
[112.52327728 174.96490479]
[98.60482788 175.99093628]
[84.73342133 174.45469666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[17 30]
[18 29]
[19 28]
[51 61]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
