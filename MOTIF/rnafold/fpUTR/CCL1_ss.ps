%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGGUGAGCUCUUAGCUUCACCAGGCUCAUCAAAGCUGCUCCAGGAAGGCCCAAGCCAGACCAGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[73.97723389 128.17897034]
[68.13906097 121.96249390]
[63.77460480 114.54836273]
[61.12654877 106.28362274]
[60.35632706 97.56372833]
[45.77455521 101.08110046]
[31.19278145 104.59846497]
[16.61100769 108.11583710]
[2.02923489 111.63320923]
[-12.55253792 115.15058136]
[-27.05525589 118.98088074]
[-41.47220230 123.12233734]
[-55.88914871 127.26378632]
[-69.44323730 137.44824219]
[-82.98181915 127.24319458]
[-76.92343903 111.40866089]
[-60.03060150 112.84683990]
[-45.61365509 108.70539093]
[-31.19671059 104.56393433]
[-25.46404076 99.53635406]
[-16.06990814 100.56880951]
[-1.48813593 97.05143738]
[13.09363747 93.53406525]
[27.67540932 90.01669312]
[42.25718307 86.49932098]
[56.83895493 82.98195648]
[64.52452850 70.10049438]
[60.69422913 55.59777832]
[56.86392975 41.09505844]
[53.03363037 26.59234238]
[39.25076294 18.85876656]
[35.05376053 3.62194657]
[42.93262482 -10.07838345]
[58.21296692 -14.11406136]
[71.82923126 -6.09078932]
[75.70312500 9.23136616]
[67.53634644 22.76204300]
[71.36664581 37.26475906]
[75.19694519 51.76747894]
[79.02724457 66.27019501]
[89.66346741 62.30531311]
[100.80781555 61.55448914]
[111.52545929 63.97709656]
[120.94667053 69.27056885]
[128.33734131 76.90386963]
[133.15596008 86.16914368]
[135.09268188 96.24659729]
[150.00595093 97.85731506]
[163.26010132 86.66986084]
[180.18847656 88.34336090]
[190.57958984 101.38776398]
[205.54833984 102.35539246]
[220.51710510 103.32302094]
[234.97077942 95.57556915]
[248.76260376 104.44786072]
[247.70472717 120.81285095]
[232.88539124 127.83563995]
[219.54946899 118.29177856]
[204.58071899 117.32415009]
[189.61195374 116.35652161]
[181.06872559 126.23826599]
[168.17921448 129.34753418]
[155.70596313 124.30033875]
[148.39523315 112.77058411]
[133.48196411 111.15986633]
[130.50117493 118.42303467]
[125.95086670 124.91304779]
[120.02736664 130.29225159]
[112.99925995 134.27209473]
[105.19527435 136.62838745]
[96.98895264 137.21382141]
[88.78073883 135.96664429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 19]
[12 18]
[13 17]
[27 40]
[28 39]
[29 38]
[30 37]
[47 65]
[48 64]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
