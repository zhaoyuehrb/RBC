%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCGCGGGAAGAGGCGGUGCUGAGAGGCGCGUACUGUGCUUGCUUUUUGCAGUACCUGCUGCGGCCGCUUUCGGC\
) } def
/len { sequence length } bind def

/coor [
[80.12689972 292.42382812]
[66.98831940 301.20755005]
[51.50342941 298.04626465]
[42.85912704 284.81558228]
[46.18392944 269.36495972]
[59.50529099 260.86102295]
[62.50567627 246.16416931]
[57.47052383 232.14645386]
[67.81184387 220.17282104]
[70.81223297 205.47596741]
[73.81261444 190.77909851]
[76.81300354 176.08224487]
[79.81338501 161.38539124]
[74.77823639 147.36766052]
[85.11956024 135.39404297]
[88.11994171 120.69718170]
[91.12033081 106.00032806]
[92.02600861 91.02769470]
[90.81900787 76.07633209]
[89.61200714 61.12497330]
[88.40501404 46.17361450]
[87.19801331 31.22225380]
[85.99101257 16.27089310]
[84.78401184 1.31953406]
[82.97596741 -13.57109928]
[80.56979370 -28.37685394]
[78.16362762 -43.18260574]
[75.75745392 -57.98836136]
[73.35128784 -72.79411316]
[70.94512177 -87.59986877]
[68.53894806 -102.40562439]
[58.68814087 -114.78593445]
[64.28364563 -128.58953857]
[61.87747955 -143.39529419]
[59.47130966 -158.20104980]
[50.96249390 -172.86517334]
[62.69805908 -185.10089111]
[77.70433044 -177.21113586]
[74.27706146 -160.60722351]
[76.68323517 -145.80146790]
[79.08940125 -130.99571228]
[88.76810455 -119.67440796]
[83.34470367 -104.81179047]
[85.75086975 -90.00603485]
[88.15704346 -75.20028687]
[90.56320953 -60.39453125]
[92.96938324 -45.58877563]
[95.37554932 -30.78302193]
[97.78171539 -15.97726822]
[101.29447937 -12.37336159]
[102.39313507 -6.43579960]
[99.73537445 0.11253550]
[100.94237518 15.06389523]
[102.14936829 30.01525497]
[103.35636902 44.96661377]
[104.56336975 59.91797256]
[105.77037048 74.86933136]
[106.97736359 89.82069397]
[118.11544037 79.77363586]
[133.09005737 78.90131378]
[145.31939697 87.58712006]
[149.42826843 102.01338959]
[143.61070251 115.83930206]
[130.42370605 122.98794556]
[115.66337585 120.31726074]
[105.81718445 109.00070953]
[102.81680298 123.69757080]
[99.81641388 138.39442444]
[104.63696289 153.46336365]
[94.51024628 164.38577271]
[91.50986481 179.08262634]
[88.50947571 193.77949524]
[85.50909424 208.47634888]
[82.50870514 223.17321777]
[87.32925415 238.24215698]
[77.20253754 249.16455078]
[74.20214844 263.86141968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[15 68]
[16 67]
[17 66]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[33 41]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
