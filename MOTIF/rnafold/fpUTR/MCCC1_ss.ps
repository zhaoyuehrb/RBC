%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUCUUGGAUCAGCCCAAAGGUAGGCUCAGGCUCCGACGGUGGCCGGCGGGGGUCACGAGGCUUCGUAGUGGAGGAACGGGUUUGGCGUGUGGGACGCAGCUGCCUCUGUACUGGGGAGUCACGGAGUGGCCGGGCUCCAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[38.99232483 466.99224854]
[24.88060951 459.36080933]
[22.19054985 443.54489136]
[32.98572922 431.67712402]
[33.62234497 416.69064331]
[34.25896454 401.70416260]
[34.89558029 386.71768188]
[35.53219986 371.73120117]
[36.16881943 356.74468994]
[36.80543518 341.75820923]
[37.44205475 326.77172852]
[35.27562714 323.90719604]
[34.42753220 319.82891846]
[35.46278000 315.18637085]
[38.62633514 310.86068726]
[40.21537018 295.94509888]
[41.80440903 281.02951050]
[43.39344406 266.11392212]
[31.45743752 275.19860840]
[16.46696281 274.66412354]
[5.20826721 264.75244141]
[2.77820587 249.95057678]
[10.27687836 236.95944214]
[24.30960464 231.66014099]
[38.52371597 236.45169067]
[46.48482132 249.16677856]
[50.26449203 234.65078735]
[54.04416656 220.13478088]
[57.82383728 205.61878967]
[56.30953217 202.36213684]
[56.33967972 198.19671631]
[58.32978058 193.87648010]
[62.33366394 190.31437683]
[67.02944183 176.06832886]
[71.72521973 161.82229614]
[76.42098999 147.57624817]
[81.11676788 133.33021545]
[85.81254578 119.08417511]
[80.86352539 114.11682892]
[77.57835388 107.92207336]
[76.24266815 101.03852081]
[76.97259521 94.06467438]
[64.36946869 85.93072510]
[51.76633453 77.79677582]
[39.16320419 69.66282654]
[26.56007576 61.52888107]
[13.95694542 53.39493179]
[-1.43787420 56.96915817]
[-14.80664062 48.53994370]
[-18.21790314 33.10819626]
[-9.64781857 19.82929611]
[5.81913280 16.58137894]
[19.00668335 25.29137611]
[22.09089279 40.79180145]
[34.69402313 48.92575073]
[47.29715347 57.05970001]
[59.90028381 65.19364929]
[72.50341034 73.32759094]
[85.10654449 81.46154022]
[93.05534363 77.25662231]
[101.99723053 76.30400085]
[110.65350342 78.73989105]
[121.26010895 68.13329315]
[131.86671448 57.52668762]
[142.47331238 46.92008591]
[153.07991028 36.31348419]
[163.68650818 25.70688248]
[167.97361755 10.47758961]
[182.44424438 6.94914675]
[193.05085754 -3.65745497]
[203.65745544 -14.26405621]
[214.26405334 -24.87065887]
[224.87065125 -35.47726059]
[229.15776062 -50.70655441]
[243.62838745 -54.23499680]
[254.23500061 -64.84159851]
[255.23159790 -69.23072815]
[257.38821411 -72.69394684]
[260.25741577 -74.97525024]
[263.35437012 -75.99570465]
[266.21990967 -75.84977722]
[277.68780518 -85.51866913]
[289.15570068 -95.18755341]
[300.62359619 -104.85644531]
[299.16320801 -121.67443848]
[307.90618896 -135.92115784]
[323.25479126 -142.11106873]
[339.11434937 -137.99882507]
[350.37442017 -147.90895081]
[361.63452148 -157.81906128]
[372.89459229 -167.72918701]
[375.34640503 -183.58378601]
[389.34167480 -191.42669678]
[404.14450073 -185.24151611]
[408.39935303 -169.77296448]
[398.84231567 -156.88722229]
[382.80471802 -156.46910095]
[371.54464722 -146.55897522]
[360.28454590 -136.64886475]
[349.02447510 -126.73873901]
[351.49694824 -113.58005524]
[347.09265137 -100.82143402]
[336.86614990 -91.84704590]
[323.43109131 -89.09339905]
[310.29248047 -93.38854980]
[298.82458496 -83.71965790]
[287.35668945 -74.05077362]
[275.88879395 -64.38188171]
[264.84158325 -54.23499680]
[254.23500061 -43.62839508]
[250.70655823 -29.15775681]
[235.47726440 -24.87065887]
[224.87065125 -14.26405621]
[214.26405334 -3.65745497]
[203.65745544 6.94914675]
[193.05085754 17.55574799]
[189.52241516 32.02638626]
[174.29312134 36.31348419]
[163.68650818 46.92008591]
[153.07991028 57.52668762]
[142.47331238 68.13329315]
[131.86671448 78.73989105]
[121.26010895 89.34649658]
[120.24938202 112.46804047]
[100.05858612 123.77995300]
[95.36280823 138.02598572]
[90.66703796 152.27203369]
[85.97126007 166.51806641]
[81.27548218 180.76411438]
[76.57970428 195.01014709]
[72.33982849 209.39846802]
[68.56015778 223.91445923]
[64.78048706 238.43045044]
[61.00081635 252.94644165]
[58.30904007 267.70294189]
[56.72000122 282.61853027]
[55.13096619 297.53414917]
[53.54193115 312.44973755]
[52.42853928 327.40835571]
[51.79191971 342.39483643]
[51.15530396 357.38131714]
[50.51868439 372.36779785]
[49.88206482 387.35427856]
[49.24544907 402.34078979]
[48.60882950 417.32727051]
[47.97221375 432.31375122]
[57.72204590 445.05422974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[15 138]
[16 137]
[17 136]
[18 135]
[26 134]
[27 133]
[28 132]
[29 131]
[33 130]
[34 129]
[35 128]
[36 127]
[37 126]
[38 125]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[62 123]
[63 122]
[64 121]
[65 120]
[66 119]
[67 118]
[69 116]
[70 115]
[71 114]
[72 113]
[73 112]
[75 110]
[76 109]
[81 108]
[82 107]
[83 106]
[84 105]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
