%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:09 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ACAD8)
} def

/sequence { (\
GCGAGCGCAACGGAGGUCGAAGGCGUUCAGACUCUUAGCUGAACGCGGAGCUGCGGCGGCU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.090737202 ubox
1 17 0.003198536 ubox
1 54 0.007776181 ubox
1 57 0.021322376 ubox
1 60 0.398629329 ubox
2 7 0.090680312 ubox
2 12 0.005316734 ubox
2 16 0.003501944 ubox
2 19 0.014151461 ubox
2 53 0.007773773 ubox
2 55 0.004063277 ubox
2 56 0.021142583 ubox
2 58 0.025936362 ubox
2 59 0.398769035 ubox
3 11 0.005422826 ubox
3 18 0.014369403 ubox
3 28 0.039958534 ubox
3 52 0.003885953 ubox
3 54 0.004909549 ubox
3 57 0.028929097 ubox
4 17 0.013021248 ubox
4 27 0.039987748 ubox
4 52 0.008918588 ubox
4 61 0.734471010 ubox
5 17 0.005991319 ubox
5 26 0.040017391 ubox
5 51 0.009767590 ubox
5 54 0.014367604 ubox
5 57 0.149212614 ubox
5 60 0.803300866 ubox
6 12 0.005842264 ubox
6 16 0.010866452 ubox
6 19 0.005017135 ubox
6 25 0.040041432 ubox
6 50 0.009752181 ubox
6 53 0.014366834 ubox
6 55 0.107349675 ubox
6 56 0.146239139 ubox
6 58 0.678688477 ubox
6 59 0.661188075 ubox
7 11 0.005706856 ubox
7 18 0.005156159 ubox
7 24 0.040045255 ubox
7 51 0.013034277 ubox
7 52 0.004432931 ubox
7 54 0.111478708 ubox
7 57 0.820347740 ubox
7 60 0.228098717 ubox
8 16 0.003764141 ubox
8 23 0.040015427 ubox
8 50 0.013313907 ubox
8 53 0.111472680 ubox
8 56 0.817739867 ubox
8 59 0.228273010 ubox
9 52 0.087319831 ubox
10 17 0.035447123 ubox
11 16 0.037598848 ubox
11 19 0.062514754 ubox
11 47 0.006028426 ubox
11 53 0.112497649 ubox
11 55 0.968412433 ubox
11 58 0.005602504 ubox
12 18 0.063416695 ubox
12 35 0.005738850 ubox
12 52 0.101304469 ubox
12 54 0.983326065 ubox
12 57 0.005357686 ubox
12 61 0.030778698 ubox
13 17 0.041092467 ubox
13 34 0.006138682 ubox
13 36 0.005414919 ubox
13 51 0.097785654 ubox
13 60 0.034278207 ubox
14 33 0.005872187 ubox
14 35 0.005590346 ubox
14 52 0.983676178 ubox
15 32 0.004576560 ubox
15 34 0.005578494 ubox
15 51 0.988426228 ubox
15 52 0.051743179 ubox
15 61 0.010075698 ubox
16 32 0.007332474 ubox
16 51 0.064006766 ubox
16 57 0.039608002 ubox
16 60 0.011192913 ubox
17 31 0.008232065 ubox
17 48 0.048825638 ubox
17 49 0.977551196 ubox
17 50 0.067220118 ubox
17 56 0.039621530 ubox
17 59 0.011203583 ubox
18 22 0.007422980 ubox
18 30 0.008264724 ubox
18 47 0.079129344 ubox
18 48 0.965056145 ubox
18 55 0.039712746 ubox
18 58 0.011177833 ubox
19 28 0.008366835 ubox
19 46 0.039580840 ubox
19 54 0.039500704 ubox
19 57 0.008084142 ubox
20 27 0.008359031 ubox
21 26 0.007900901 ubox
21 52 0.029925418 ubox
22 51 0.033694184 ubox
23 46 0.990272717 ubox
24 45 0.999024810 ubox
25 44 0.999110243 ubox
26 43 0.998670708 ubox
27 42 0.998801198 ubox
28 41 0.999137357 ubox
29 35 0.003274546 ubox
29 40 0.998853354 ubox
30 34 0.003603405 ubox
30 36 0.003839560 ubox
30 39 0.998555959 ubox
31 35 0.009001070 ubox
32 38 0.741983325 ubox
33 37 0.668598079 ubox
37 61 0.036106280 ubox
38 51 0.003233710 ubox
38 60 0.040739269 ubox
39 50 0.003235117 ubox
39 59 0.040760127 ubox
40 49 0.003228190 ubox
40 58 0.040704223 ubox
41 57 0.040326244 ubox
44 55 0.040735925 ubox
45 54 0.040775936 ubox
46 53 0.040761364 ubox
47 52 0.031075918 ubox
47 54 0.003303197 ubox
47 61 0.003843010 ubox
48 60 0.004245414 ubox
49 61 0.022174538 ubox
50 57 0.012522518 ubox
50 60 0.024275520 ubox
51 56 0.012739746 ubox
51 59 0.024285555 ubox
52 58 0.024197901 ubox
53 57 0.023056870 ubox
53 60 0.008271605 ubox
54 59 0.008284390 ubox
4 61 0.9500000 lbox
5 60 0.9500000 lbox
6 59 0.9500000 lbox
11 55 0.9500000 lbox
12 54 0.9500000 lbox
14 52 0.9500000 lbox
15 51 0.9500000 lbox
17 49 0.9500000 lbox
18 48 0.9500000 lbox
23 46 0.9500000 lbox
24 45 0.9500000 lbox
25 44 0.9500000 lbox
26 43 0.9500000 lbox
27 42 0.9500000 lbox
28 41 0.9500000 lbox
29 40 0.9500000 lbox
30 39 0.9500000 lbox
showpage
end
%%EOF
