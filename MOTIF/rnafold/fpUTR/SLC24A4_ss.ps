%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGAAAGUUCCCGGGGAGAGCUCGCCCCUGGGAGGGCCGACGUCGAGCCUGCUCGCCGCGAGGGUCUCAGAGACGGCACCCAGGCGCUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[-43.61813354 387.32672119]
[-44.72237015 402.51556396]
[-51.91471863 415.93902588]
[-63.94906235 425.27148438]
[-78.74037170 428.89599609]
[-93.72596741 426.18457031]
[-106.30950928 417.60702515]
[-114.31081390 404.64944458]
[-116.34361267 389.55679321]
[-112.05570984 374.94400024]
[-102.19000244 363.34280396]
[-88.45580292 356.76318359]
[-73.23262024 356.34509277]
[-67.54852295 342.46377563]
[-61.86442184 328.58245850]
[-56.18032074 314.70114136]
[-50.49622345 300.81982422]
[-44.81212234 286.93850708]
[-39.12802124 273.05715942]
[-53.69812775 276.62255859]
[-66.67396545 269.09741211]
[-70.81552887 254.68051147]
[-63.81198502 241.41587830]
[-49.57103729 236.70468140]
[-36.03857422 243.17556763]
[-30.76520729 257.21917725]
[-22.50754547 244.69676208]
[-14.24988365 232.17434692]
[-5.99222231 219.65191650]
[-6.11039495 214.70156860]
[-2.98576927 209.66567993]
[3.22738719 206.61021423]
[12.27830505 194.64855957]
[21.32922363 182.68692017]
[30.38014030 170.72528076]
[28.05306816 160.53619385]
[31.89592171 150.57855225]
[40.82839966 144.33988953]
[51.94422913 144.15225220]
[61.75043869 132.80155945]
[71.55665588 121.45085907]
[81.36286163 110.10016632]
[78.94454193 97.54561615]
[84.18569183 85.88391113]
[95.17971039 79.35729980]
[107.92723083 80.34000397]
[118.09585571 69.31281281]
[128.08457947 58.12239838]
[137.89079285 46.77170944]
[147.69700623 35.42101669]
[157.31813049 23.91301918]
[166.75164795 12.25073624]
[168.22300720 5.48506069]
[172.35949707 1.24090731]
[177.19294739 0.16492981]
[187.36157227 -10.86226654]
[197.53019714 -21.88946152]
[207.69882202 -32.91665649]
[213.99134827 -48.65960312]
[230.86100769 -46.97106171]
[233.90843201 -30.29324913]
[218.72601318 -22.74803162]
[208.55738831 -11.72083664]
[198.38876343 -0.69364029]
[188.22013855 10.33355522]
[178.41392517 21.68424797]
[168.98040771 33.34653091]
[167.18742371 40.66580963]
[159.04769897 45.22722626]
[149.24148560 56.57791901]
[139.43527222 67.92861176]
[137.40621948 75.18598938]
[129.12304688 79.48143768]
[118.95442200 90.50863647]
[120.04690552 106.89042664]
[109.11378479 119.13883972]
[92.71355438 119.90637970]
[82.90734100 131.25708008]
[73.10113525 142.60777283]
[63.29492188 153.95845032]
[60.61365128 173.80805969]
[42.34178162 179.77619934]
[33.29086685 191.73783875]
[24.23994637 203.69947815]
[15.18902969 215.66113281]
[6.53019857 227.90957642]
[-1.72746325 240.43200684]
[-9.98512459 252.95442200]
[-18.24278641 265.47683716]
[-25.24670219 278.74127197]
[-30.93080330 292.62258911]
[-36.61490250 306.50390625]
[-42.29900360 320.38522339]
[-47.98310471 334.26654053]
[-53.66720581 348.14785767]
[-59.35130692 362.02917480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[26 89]
[27 88]
[28 87]
[29 86]
[32 85]
[33 84]
[34 83]
[35 82]
[39 80]
[40 79]
[41 78]
[42 77]
[46 74]
[47 73]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
