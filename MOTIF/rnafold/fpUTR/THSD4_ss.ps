%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUGAACGCAACUCCCAAUUGCAGAAAAUUGGCAACGUCUCUGAAGAGCCCUUGCUUUUGCCUGGACCCCCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[68.86573029 105.07286835]
[53.91197205 103.89598846]
[38.95821381 102.71910095]
[23.98422813 101.83603668]
[8.99579334 101.24713898]
[-5.99264193 100.65824127]
[3.96729660 111.87428284]
[7.23553562 126.51390839]
[2.99138832 140.90095520]
[-7.69939804 151.42269897]
[-22.15225983 155.43702698]
[-36.73793793 151.93588257]
[-47.79382706 141.79846191]
[-52.54367828 127.57035828]
[-49.79475784 112.82440186]
[-40.23734665 101.26343536]
[-26.26918983 95.79027557]
[-39.89133835 89.51037598]
[-53.51348495 83.23048401]
[-67.13563538 76.95058441]
[-80.75778198 70.67069244]
[-94.37992859 64.39079285]
[-109.11875916 70.09538269]
[-123.54047394 63.63087463]
[-129.08891296 48.83255386]
[-122.47229004 34.47999573]
[-107.61613464 29.08832169]
[-93.33433533 35.85631561]
[-88.10002899 50.76864624]
[-74.47788239 57.04854202]
[-60.85573578 63.32843781]
[-47.23358917 69.60833740]
[-33.61144257 75.88822937]
[-19.98929405 82.16812897]
[-5.40374470 85.66980743]
[9.58469105 86.25870514]
[24.57312584 86.84760284]
[31.56451225 83.88470459]
[40.13510132 87.76533508]
[55.08885956 88.94222260]
[70.04261780 90.11911011]
[77.01081085 76.76583099]
[89.74573517 67.76595306]
[105.71247101 65.50351715]
[121.45283508 70.95739746]
[133.33427429 83.38128662]
[146.42170715 76.05196381]
[159.50914001 68.72264862]
[172.59658813 61.39332962]
[185.68402100 54.06401062]
[198.77146912 46.73469162]
[206.68666077 32.37218094]
[223.08570862 32.31625366]
[231.09867859 46.62444305]
[222.48251343 60.57771301]
[206.10078430 59.82213211]
[193.01335144 67.15145111]
[179.92590332 74.48076630]
[166.83847046 81.81008911]
[153.75102234 89.13940430]
[140.66358948 96.46872711]
[139.19332886 111.39649200]
[150.59941101 121.13821411]
[159.40376282 124.45451355]
[162.25233459 131.49325562]
[173.26716614 141.67526245]
[184.28201294 151.85726929]
[200.38749695 154.94680786]
[205.50827026 170.52595520]
[194.37652588 182.56822205]
[178.44363403 178.68554688]
[174.09999084 162.87211609]
[163.08515930 152.69010925]
[152.07032776 142.50808716]
[140.85769653 132.54431152]
[129.45161438 122.80258179]
[115.63080597 132.54803467]
[99.42185974 134.96148682]
[84.35645294 129.99105835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 37]
[5 36]
[6 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[62 76]
[63 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
