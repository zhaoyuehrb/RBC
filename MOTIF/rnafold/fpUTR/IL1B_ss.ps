%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCUCUUCGAGGCACAAGGCACAACAGGCUGCUCUGGGAUUCUCUUCAGCCAAUCUUCAUUGCUCAAGUGUCUGAAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-69.64458466 227.02679443]
[-78.47789001 243.52352905]
[-92.14693451 256.27395630]
[-109.18064117 263.92364502]
[-127.75150299 265.66607666]
[-145.87171936 261.32781982]
[-161.60589600 251.38555908]
[-172.94213867 261.20846558]
[-184.27838135 271.03137207]
[-195.61463928 280.85427856]
[-203.62553406 295.79623413]
[-220.20118713 292.23474121]
[-221.36747742 275.32095337]
[-205.43754578 269.51803589]
[-194.10130310 259.69512939]
[-182.76506042 249.87222290]
[-171.42881775 240.04931641]
[-176.90005493 229.54598999]
[-180.08001709 218.13092041]
[-180.82820129 206.29798889]
[-179.10934448 194.55976868]
[-174.99514771 183.42533875]
[-168.66120911 173.37815857]
[-160.37963867 164.85510254]
[-150.50724792 158.22747803]
[-139.47027588 153.78483582]
[-127.74591827 151.72232056]
[-115.84174347 152.13206482]
[-104.27368927 154.99916077]
[-93.54371643 160.20211792]
[-84.11802673 167.51802063]
[-76.40679169 176.63206482]
[-62.99341202 169.91781616]
[-49.58003235 163.20355225]
[-36.16665268 156.48930359]
[-22.75327301 149.77503967]
[-9.33989429 143.06077576]
[4.07348490 136.34652710]
[6.44691849 123.54804230]
[15.94950390 114.36787415]
[29.20986557 112.37918854]
[41.33682251 118.54547882]
[54.98130417 112.31425476]
[68.62578583 106.08303070]
[82.27026367 99.85180664]
[85.29904175 90.08802032]
[93.21488953 83.61928558]
[103.38631439 82.59602356]
[112.43202972 87.35839844]
[126.48627472 82.11643219]
[140.54052734 76.87446594]
[150.76667786 64.80234528]
[165.39540100 67.60408020]
[179.44964600 62.36211395]
[193.50389099 57.12015152]
[200.64428711 51.05601883]
[208.15443420 51.95173645]
[222.38682556 47.21474075]
[236.61921692 42.47774887]
[247.09448242 29.86027145]
[263.21139526 32.88972092]
[268.39022827 48.44965363]
[257.30346680 60.53335190]
[241.35620117 56.71013641]
[227.12380981 61.44713211]
[212.89143372 66.18412781]
[198.74584961 71.17440033]
[184.69160461 76.41635895]
[170.63735962 81.65832520]
[161.41645813 93.35550690]
[145.78248596 90.92871857]
[131.72824097 96.17067719]
[117.67398834 101.41264343]
[106.78511047 116.38071442]
[88.50148773 113.49628448]
[74.85700989 119.72750854]
[61.21252823 125.95874023]
[47.56805038 132.18995667]
[41.85208893 148.60707092]
[26.38260460 155.77392578]
[10.78774357 149.75990295]
[-2.62563586 156.47416687]
[-16.03901482 163.18841553]
[-29.45239449 169.90267944]
[-42.86577225 176.61692810]
[-56.27915192 183.33119202]
[-69.69252777 190.04545593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 17]
[8 16]
[9 15]
[10 14]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[42 78]
[43 77]
[44 76]
[45 75]
[49 73]
[50 72]
[51 71]
[53 69]
[54 68]
[55 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
