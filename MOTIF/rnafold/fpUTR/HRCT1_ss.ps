%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAGUUCAGUGACUGAGAGGGCUGAGCGGAGGCUGCUGAAGGGGAGAAAGGAGUGAGGAGCUGCUGGGCAGAGAGGGACUGUCCGGCUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[97.96700287 183.16319275]
[85.05848694 190.80323792]
[70.06317139 191.17796326]
[56.78915787 184.19223022]
[48.60743332 171.62005615]
[47.59577179 156.65422058]
[54.01181793 143.09445190]
[40.04027557 148.55302429]
[26.06873322 154.01159668]
[12.09719181 159.47016907]
[-1.87434959 164.92874146]
[-15.84589100 170.38732910]
[-29.81743240 175.84590149]
[-32.05062103 191.04156494]
[-41.59503555 203.07484436]
[-55.88327408 208.70883179]
[-71.07186890 206.42802429]
[-83.07517242 196.84594727]
[-88.66434479 182.54011536]
[-86.33593750 167.35873413]
[-76.71627808 155.38552856]
[-62.39300156 149.84123230]
[-47.21900177 152.21720886]
[-35.27600479 161.87435913]
[-21.30446434 156.41578674]
[-7.33292341 150.95719910]
[6.63861799 145.49862671]
[20.61015892 140.04005432]
[34.58169937 134.58148193]
[48.55324173 129.12290955]
[61.46189880 121.48310852]
[72.96989441 111.86198425]
[84.47789001 102.24085999]
[90.63874817 83.45664978]
[91.60969543 68.48810577]
[92.58064270 53.51956558]
[93.55158997 38.55102539]
[86.72379303 24.27895927]
[95.26869965 12.07921314]
[96.23964691 -2.88932943]
[82.17813873 -8.46866989]
[70.53025055 -18.12174606]
[62.43712616 -30.90284538]
[58.69165039 -45.55981064]
[59.66076279 -60.65669632]
[65.24952698 -74.71446991]
[74.91040039 -86.35588837]
[87.69692230 -94.44044495]
[102.35639191 -98.17610168]
[117.45262909 -97.19686890]
[131.50665283 -91.59868622]
[143.14158630 -81.93001556]
[151.21757507 -69.13807678]
[154.94340515 -54.47610855]
[153.95407104 -39.38053131]
[148.34646606 -25.33026314]
[138.66999817 -13.70180225]
[125.87265778 -5.63438749]
[111.20819092 -1.91838217]
[110.23724365 13.05016041]
[117.13448334 26.25157547]
[108.52012634 39.52197266]
[107.54917908 54.49051285]
[106.57823181 69.45905304]
[105.60728455 84.42759705]
[113.86495209 96.95001984]
[128.00592041 101.95330811]
[142.14689636 106.95659637]
[156.28787231 111.95987701]
[170.42884827 116.96316528]
[184.56980896 121.96645355]
[198.71078491 126.96974182]
[212.85176086 131.97302246]
[226.99273682 136.97631836]
[240.37161255 128.88066101]
[255.81620789 131.32987976]
[266.03402710 143.16752625]
[266.20056152 158.80422974]
[256.23715210 170.85681152]
[240.84823608 173.63439941]
[227.29997253 165.82553101]
[221.98944092 151.11727905]
[207.84848022 146.11399841]
[193.70750427 141.11071777]
[179.56652832 136.10742188]
[165.42555237 131.10414124]
[151.28457642 126.10085297]
[137.14361572 121.09756470]
[123.00263214 116.09427643]
[108.86166382 111.09099579]
[94.09901428 113.74885559]
[82.59101868 123.36997986]
[71.08302307 132.99110413]
[86.05599976 133.89109802]
[98.68884277 141.97882080]
[105.77341461 155.20034790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[31 93]
[32 92]
[33 91]
[34 65]
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
