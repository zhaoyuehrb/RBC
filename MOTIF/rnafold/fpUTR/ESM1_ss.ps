%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGGACGGCUGCUUCCCACCAGCAAAGACCACGACUGGAGAGCCGAGCCGGAGGCAGCUGGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[68.06975555 388.86853027]
[71.12237549 369.72872925]
[71.79534912 354.74383545]
[72.46832275 339.75894165]
[73.14129639 324.77404785]
[63.08632660 316.41729736]
[59.73012924 303.57778931]
[64.55009460 291.00231934]
[75.95631409 283.47860718]
[77.30090332 268.53900146]
[78.64549255 253.59939575]
[79.99008179 238.65977478]
[81.33467102 223.72016907]
[82.67926025 208.78054810]
[84.02384949 193.84094238]
[85.36843872 178.90132141]
[86.71302795 163.96170044]
[88.05761719 149.02209473]
[89.40220642 134.08247375]
[75.74885559 126.18798828]
[66.83058929 113.18023682]
[64.38871002 97.59902191]
[68.90000916 82.48661041]
[79.48363495 70.79370880]
[94.07312012 64.80339813]
[94.74609375 49.81850433]
[83.73372650 43.15406036]
[76.75326538 32.42674637]
[75.13924408 19.80444336]
[79.14927673 7.80512333]
[87.92543793 -1.20543790]
[99.67690277 -5.48006439]
[101.69039917 -20.34431076]
[103.70390320 -35.20855713]
[96.98764038 -50.16930389]
[106.80398560 -63.30594635]
[123.05471802 -61.10463715]
[129.02247620 -45.82989120]
[118.56814575 -33.19505692]
[116.55464935 -18.33081245]
[114.54114532 -3.46656513]
[127.76004028 7.83704281]
[131.82267761 24.90604591]
[124.99552155 41.23508835]
[109.73098755 50.49147797]
[109.05801392 65.47637177]
[121.63761139 71.61440277]
[130.88948059 82.11794281]
[135.39077759 95.37162018]
[134.44918823 109.33711243]
[128.20956421 121.86662292]
[117.63149261 131.03318787]
[104.34181976 135.42706299]
[102.99723053 150.36668396]
[101.65264130 165.30628967]
[100.30805206 180.24591064]
[98.96346283 195.18553162]
[97.61887360 210.12513733]
[96.27428436 225.06475830]
[94.92969513 240.00436401]
[93.58510590 254.94398499]
[92.24051666 269.88360596]
[90.89592743 284.82321167]
[102.31555939 297.86468506]
[100.96023560 314.81185913]
[88.12619019 325.44702148]
[87.45321655 340.43191528]
[86.78025055 355.41680908]
[86.10727692 370.40170288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[25 46]
[26 45]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
