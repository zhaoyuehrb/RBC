%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGGCUGUCCCCGCACGGUUCCCAGCUAAUUCCCCGCUACCGGGUUGCGGCCGGAAGCCGGGCGCCGCGGCUCUGCUUCCCUCGGGGAUCUGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[-35.76837540 273.07336426]
[-43.72880173 270.81488037]
[-54.98046494 280.73455811]
[-60.21535873 295.66461182]
[-74.87899780 298.27746582]
[-86.13066101 308.19714355]
[-97.38232422 318.11682129]
[-108.63399506 328.03649902]
[-119.88565826 337.95617676]
[-131.13732910 347.87585449]
[-131.87942505 363.66271973]
[-143.62322998 374.23901367]
[-159.40136719 373.33004761]
[-169.85292053 361.47509766]
[-168.77719116 345.70745850]
[-156.81239319 335.38180542]
[-141.05700684 336.62417603]
[-129.80534363 326.70449829]
[-118.55367279 316.78482056]
[-107.30200958 306.86514282]
[-96.05033875 296.94546509]
[-84.79867554 287.02578735]
[-80.36857605 272.80526733]
[-64.90014648 269.48287964]
[-53.64847946 259.56320190]
[-49.24085999 238.44721985]
[-27.53102493 233.31445312]
[-17.61134720 222.06278992]
[-7.69166946 210.81112671]
[2.22800851 199.55946350]
[1.03937316 184.75666809]
[10.93905258 173.20457458]
[26.47364616 172.05818176]
[36.39332199 160.80651855]
[46.31299973 149.55485535]
[56.23267746 138.30319214]
[66.15235901 127.05152130]
[76.07203674 115.79985809]
[71.68467712 104.51945496]
[72.34253693 92.43377686]
[77.92839813 81.69624329]
[87.44697571 74.22007751]
[84.63625336 59.48576736]
[81.82553864 44.75145721]
[69.41824341 34.58098221]
[69.77808380 18.54196358]
[82.62902832 8.93816853]
[98.11292267 13.13680553]
[104.35185242 27.91703796]
[96.55984497 41.94073868]
[99.37056732 56.67504883]
[102.18128204 71.40935516]
[109.83251953 73.06481171]
[116.75087738 76.72789001]
[122.42070007 82.12557983]
[136.18702698 76.16835785]
[149.95333862 70.21114349]
[163.71966553 64.25392151]
[177.48597717 58.29670334]
[191.25230408 52.33948517]
[200.84461975 39.75783157]
[215.59797668 41.80416489]
[229.36430359 35.84694672]
[243.13061523 29.88973045]
[256.89694214 23.93251228]
[262.48110962 9.14763927]
[276.91842651 2.71799994]
[291.64343262 8.45818520]
[297.92007446 22.96264458]
[292.02450562 37.62614059]
[277.45449829 43.74907684]
[262.85415649 37.69882965]
[249.08784485 43.65604782]
[235.32151794 49.61326599]
[221.55520630 55.57048416]
[212.94754028 67.72603607]
[197.20951843 66.10580444]
[183.44319153 72.06302643]
[169.67687988 78.02024078]
[155.91055298 83.97746277]
[142.14424133 89.93467712]
[128.37791443 95.89189911]
[123.97827148 115.72340393]
[107.54415131 127.66349030]
[87.32369995 125.71953583]
[77.40402222 136.97119141]
[67.48434448 148.22286987]
[57.56466675 159.47453308]
[47.64498901 170.72619629]
[37.72531128 181.97785950]
[38.53496933 197.53364563]
[28.31472015 208.80311584]
[13.47967434 209.47914124]
[3.55999660 220.73080444]
[-6.35968161 231.98246765]
[-16.27935982 243.23413086]
[-14.11187172 251.71286011]
[-15.56961060 260.24526978]
[-20.32326889 267.36480713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[27 96]
[28 95]
[29 94]
[30 93]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[38 85]
[42 52]
[43 51]
[44 50]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
