%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAUCUGGAUGUCUUGGAUUUUCUUCCCAUUCUGUUCUGUUCUGUUCUCCUAAUACCAUCUCGUUACUAGACGUAGGCAUUGGACGUGACAAUCAACUGCAUUUGAACUGAGAAGAAGAAAUAUUAAAGACACAGUCUUCAGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[125.07965088 635.63214111]
[111.95052338 627.66204834]
[104.57946014 614.18756104]
[104.94924164 598.83306885]
[112.96039581 585.72900391]
[126.45796967 578.40020752]
[126.77210999 563.40350342]
[127.08624268 548.40679932]
[127.40037537 533.41009521]
[127.71451569 518.41339111]
[128.02865601 503.41668701]
[127.55748749 488.42407227]
[126.30232239 473.47668457]
[125.04715729 458.52929688]
[123.79198456 443.58190918]
[122.53681946 428.63452148]
[121.28165436 413.68710327]
[112.50650024 401.65191650]
[119.06188965 387.25271606]
[117.80672455 372.30532837]
[116.55155945 357.35791016]
[115.13993073 342.42449951]
[113.57200623 327.50665283]
[112.00408173 312.58883667]
[110.43614960 297.67102051]
[108.86822510 282.75317383]
[107.30030060 267.83535767]
[105.73236847 252.91752625]
[94.65441895 246.26181030]
[89.37268829 234.25344849]
[92.03115082 221.20797729]
[101.87488556 211.95686340]
[100.61972046 197.00947571]
[99.36454773 182.06207275]
[90.58939362 170.02688599]
[97.14479065 155.62767029]
[95.88962555 140.68028259]
[94.63445282 125.73287964]
[93.37928772 110.78549194]
[91.65522766 95.88489532]
[89.46398163 81.04581451]
[87.27273560 66.20672607]
[68.81415558 54.69759369]
[64.76416779 33.60989761]
[77.31492615 16.53237915]
[73.58457947 2.00363255]
[69.85423279 -12.52511501]
[66.12387848 -27.05386162]
[51.37078857 -40.72697067]
[57.20702362 -59.12081146]
[52.87154770 -73.48060608]
[48.53606796 -87.84040070]
[43.02483368 -95.20970917]
[44.26355743 -102.54648590]
[40.22975922 -116.99391937]
[36.19596100 -131.44136047]
[25.03254318 -142.65245056]
[29.06220627 -156.99160767]
[25.02840805 -171.43904114]
[13.66073227 -175.17962646]
[5.61540699 -183.87583923]
[2.82596993 -195.26596069]
[5.87921047 -206.46356201]
[13.89629173 -214.68898010]
[10.47102833 -229.29266357]
[7.04576540 -243.89634705]
[3.62050223 -258.50003052]
[-7.99380875 -270.07757568]
[-3.51360965 -285.85287476]
[12.45225430 -289.59762573]
[23.47947121 -277.45956421]
[18.22418594 -261.92529297]
[21.64944839 -247.32160950]
[25.07471275 -232.71792603]
[28.49997520 -218.11424255]
[44.58956528 -209.48394775]
[49.40870285 -191.54431152]
[39.47584915 -175.47283936]
[43.50964355 -161.02539062]
[54.38453674 -150.84768677]
[50.64340210 -135.47515869]
[54.67719650 -121.02771759]
[58.71099472 -106.58027649]
[62.89586258 -92.17587280]
[67.23133850 -77.81608582]
[71.56681824 -63.45629120]
[81.03992462 -59.41523743]
[86.81599426 -50.62345123]
[86.76210022 -39.88374329]
[80.65262604 -30.78421021]
[84.38298035 -16.25546265]
[88.11332703 -1.72671568]
[91.84367371 12.80203152]
[100.47650909 14.46739483]
[108.11970520 18.90032387]
[113.90907288 25.63280106]
[117.17918396 33.93503189]
[117.53974152 42.89449692]
[114.92198181 51.51624680]
[109.58945465 58.83338165]
[102.11182404 64.01548004]
[104.30307007 78.85456848]
[106.49431610 93.69364929]
[109.29798889 96.44851685]
[110.84481812 100.44480896]
[110.60054779 105.07949066]
[108.32668304 109.53031921]
[109.58184814 124.47771454]
[110.83701324 139.42510986]
[112.09218597 154.37249756]
[120.95711517 167.47683716]
[114.31194305 180.80691528]
[115.56710815 195.75430298]
[116.82228088 210.70169067]
[130.37533569 221.71199036]
[131.77777100 238.77931213]
[120.65019989 251.34959412]
[122.21812439 266.26742554]
[123.78605652 281.18524170]
[125.35398102 296.10308838]
[126.92190552 311.02090454]
[128.48983765 325.93875122]
[130.05775452 340.85656738]
[134.09051514 349.12805176]
[131.49894714 356.10275269]
[132.75411987 371.05014038]
[134.00929260 385.99752808]
[142.87422180 399.10186768]
[136.22904968 412.43194580]
[137.48420715 427.37933350]
[138.73937988 442.32672119]
[139.99455261 457.27413940]
[141.24971008 472.22152710]
[142.50488281 487.16891479]
[154.27307129 477.86782837]
[168.92948914 481.05990601]
[175.76388550 494.41247559]
[169.78196716 508.16806030]
[155.35507202 512.27471924]
[143.02536011 503.73080444]
[142.71122742 518.72753906]
[142.39709473 533.72424316]
[142.08294678 548.72094727]
[141.76881409 563.71765137]
[141.45468140 578.71435547]
[154.63351440 586.60192871]
[162.08889771 600.03002930]
[161.81538391 615.38647461]
[153.88653564 628.54052734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 140]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[19 127]
[20 126]
[21 125]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[28 117]
[32 114]
[33 113]
[34 112]
[36 110]
[37 109]
[38 108]
[39 107]
[40 103]
[41 102]
[42 101]
[45 93]
[46 92]
[47 91]
[48 90]
[50 86]
[51 85]
[52 84]
[54 83]
[55 82]
[56 81]
[58 79]
[59 78]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
