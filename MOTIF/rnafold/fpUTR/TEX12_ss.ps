%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCUCGCGUUCGCUGACGAGGAAGGUCCCCAUACCGCGAAGUACAUUGGCCUUGGGGUGGGGCUGGAGGGAUGGGCGCCUGUGAGAAUGUGACGGACUGUGACACAAGGAAGGCUGGUGCCUUCGGAAU\
) } def
/len { sequence length } bind def

/coor [
[102.70912933 120.07855225]
[94.35923767 118.75874329]
[84.86904144 130.37493896]
[82.12982178 145.95721436]
[68.08566284 150.91815186]
[58.59546280 162.53434753]
[49.10526276 174.15055847]
[39.61506271 185.76675415]
[30.12486458 197.38294983]
[20.77251816 209.11042786]
[11.55932713 220.94754028]
[12.10891914 236.98117065]
[-0.17716870 247.29774475]
[-15.87410259 243.98324585]
[-22.94053650 229.58030701]
[-15.95570946 215.13758850]
[-0.27778053 211.73434448]
[8.93541050 199.89723206]
[10.57688713 192.61721802]
[18.50866318 187.89276123]
[27.99886322 176.27655029]
[37.48906326 164.66035461]
[46.97925949 153.04415894]
[56.46945953 141.42794800]
[58.52988052 126.67655182]
[73.25283813 120.88474274]
[82.74304199 109.26854706]
[79.15573120 98.08007050]
[82.63052368 86.05207062]
[92.80574036 77.50170898]
[81.07826996 68.14936829]
[69.35079956 58.79701614]
[57.62332535 49.44467163]
[45.89585114 40.09232330]
[34.16838074 30.73997688]
[18.55484200 28.18497467]
[13.42838860 14.20038605]
[1.70091605 4.84803867]
[-10.35049438 -4.08300352]
[-22.71071434 -12.58153057]
[-38.46596909 -14.02462387]
[-44.56971741 -27.61114311]
[-56.92993927 -36.10966873]
[-72.90319061 -34.61475754]
[-83.92687988 -46.27056503]
[-81.54457092 -62.13575363]
[-67.58377075 -70.03990936]
[-52.75401306 -63.91963577]
[-48.43141174 -48.46989059]
[-36.07118988 -39.97136307]
[-21.20002174 -39.13614273]
[-14.21218777 -24.94174957]
[-1.85196722 -16.44322395]
[1.74958563 -16.77141953]
[5.68666553 -15.30984497]
[9.08728313 -11.92203331]
[11.05326271 -6.87943363]
[22.78073502 2.47291350]
[37.55544662 4.35897303]
[43.52072525 19.01250458]
[55.24819946 28.36485100]
[66.97566986 37.71719742]
[78.70314026 47.06954575]
[90.43061829 56.42189407]
[102.15808868 65.77423859]
[116.55952454 69.96931458]
[131.47486877 68.37789917]
[146.39021301 66.78647614]
[161.30554199 65.19506073]
[176.22088623 63.60364532]
[191.13623047 62.01222992]
[206.05157471 60.42081451]
[218.95297241 51.26306152]
[232.42929077 57.60639954]
[247.34463501 56.01498032]
[260.24603271 46.85722733]
[273.72235107 53.20056915]
[288.63769531 51.60914993]
[303.55303955 50.01773453]
[319.18118286 37.38515472]
[336.55419922 45.74591827]
[351.37774658 43.45190811]
[366.20129395 41.15789795]
[380.99670410 38.68898010]
[395.76193237 36.04549408]
[410.52716064 33.40201187]
[414.69042969 18.75862503]
[424.75762939 7.42116117]
[438.69198608 1.60277033]
[453.70907593 2.40807176]
[466.83316040 9.62385368]
[475.48699951 21.77196693]
[490.25222778 19.12848282]
[500.56271362 6.83729839]
[516.59661865 7.37896729]
[526.05413818 20.33796883]
[521.68017578 35.77326584]
[506.83016968 41.84421921]
[492.89572144 33.89371109]
[478.13049316 36.53719711]
[474.22894287 50.93315125]
[464.42358398 62.25410080]
[450.61868286 68.21952057]
[435.53118896 67.59704590]
[422.15579224 60.45661545]
[413.17065430 48.16724014]
[398.40542603 50.81072617]
[383.64019775 53.45420837]
[377.55245972 57.77074432]
[368.49530029 55.98144531]
[353.67175293 58.27545547]
[338.84820557 60.56946182]
[333.50488281 69.41565704]
[323.95288086 73.90759277]
[313.29479980 72.31594849]
[305.14447021 64.93307495]
[290.22912598 66.52449036]
[275.31378174 68.11590576]
[263.47921753 77.15983582]
[248.93605042 70.93032074]
[234.02070618 72.52173615]
[222.18615723 81.56566620]
[207.64299011 75.33615112]
[192.72764587 76.92757416]
[177.81230164 78.51898956]
[162.89695740 80.11040497]
[147.98162842 81.70182037]
[133.06628418 83.29323578]
[118.15093994 84.88465118]
[122.12821960 93.91909790]
[121.99893188 103.50578308]
[118.02090454 111.91645813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 18]
[11 17]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[37 58]
[38 57]
[39 53]
[40 52]
[42 50]
[43 49]
[66 129]
[67 128]
[68 127]
[69 126]
[70 125]
[71 124]
[72 123]
[74 121]
[75 120]
[77 118]
[78 117]
[79 116]
[81 112]
[82 111]
[83 110]
[84 108]
[85 107]
[86 106]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
