%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCGGCUCCCUCCGGCCGCGAACUGCCCCUCCCCGCCCCGCCUCCCGGCGCGGGUGGCCGAGGCGUAGCGCUGCGACCCCCGCACCCCUGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[94.59647369 131.26686096]
[102.50907898 118.52304077]
[95.01293182 118.28265381]
[85.66058350 130.01013184]
[76.30823517 141.73759460]
[66.95588684 153.46507263]
[57.60354233 165.19253540]
[59.62189865 180.86741638]
[49.89927292 193.32719421]
[34.20392990 195.17971802]
[21.84764099 185.32589722]
[20.16116905 169.61184692]
[30.14506912 157.36042786]
[45.87607193 155.84019470]
[55.22841644 144.11271667]
[64.58076477 132.38525391]
[73.93311310 120.65777588]
[83.28546143 108.93030548]
[87.78330231 94.62053680]
[86.82225037 79.65135956]
[85.86119843 64.68217468]
[84.90014648 49.71299744]
[71.58914948 38.50208664]
[70.43319702 21.47344017]
[81.65747833 9.06395626]
[80.21713257 -5.86673021]
[78.77678680 -20.79741669]
[77.33644104 -35.72810364]
[68.30976105 -48.72154617]
[74.78919983 -62.13296890]
[73.34885406 -77.06365204]
[71.90850830 -91.99433899]
[70.46816254 -106.92502594]
[59.41598129 -121.54408264]
[67.08193970 -137.24047852]
[65.16378021 -152.11732483]
[63.24562073 -166.99417114]
[61.32746506 -181.87101746]
[59.40930557 -196.74787903]
[57.49114990 -211.62472534]
[55.33479309 -226.46891785]
[52.94079590 -241.27664185]
[50.54679871 -256.08438110]
[48.15279770 -270.89208984]
[37.37791061 -283.25469971]
[42.95202255 -298.67745972]
[59.14096069 -301.29473877]
[69.29093933 -288.41415405]
[62.96052551 -273.28610229]
[65.35452271 -258.47836304]
[67.74851990 -243.67063904]
[70.14252472 -228.86291504]
[74.39703369 -222.64646912]
[72.36799622 -213.54287720]
[74.28615570 -198.66603088]
[76.20431519 -183.78918457]
[78.12247467 -168.91232300]
[80.04062653 -154.03547668]
[81.95878601 -139.15863037]
[91.41102600 -131.42355347]
[93.03522491 -118.91140747]
[85.39884949 -108.36537170]
[86.83919525 -93.43468475]
[88.27954102 -78.50399780]
[89.71988678 -63.57331467]
[98.64353943 -51.64781189]
[92.26712799 -37.16844940]
[93.70747375 -22.23776245]
[95.14781952 -7.30707550]
[96.58816528 7.62361097]
[107.65979767 14.42484570]
[112.81545258 26.56494904]
[109.93720245 39.63706970]
[99.86932373 48.75194550]
[100.83038330 63.72112656]
[101.79143524 78.69030762]
[102.75248718 93.65948486]
[107.39411163 90.26354980]
[113.62338257 88.95293427]
[120.66277313 90.23696136]
[127.59717560 94.36388397]
[133.45568848 101.28822327]
[137.30009460 110.66245270]
[145.88185120 122.96503448]
[154.46360779 135.26762390]
[163.04534912 147.57020569]
[178.11712646 154.03346252]
[179.78669739 170.34741211]
[166.33657837 179.72962952]
[151.60307312 172.52851868]
[150.74276733 156.15194702]
[142.16101074 143.84936523]
[133.57926941 131.54678345]
[124.99752045 119.24420166]
[117.50137329 119.00381470]
[124.58123779 132.22785950]
[116.66888428 144.97128296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[19 77]
[20 76]
[21 75]
[22 74]
[25 70]
[26 69]
[27 68]
[28 67]
[30 65]
[31 64]
[32 63]
[33 62]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 52]
[42 51]
[43 50]
[44 49]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
