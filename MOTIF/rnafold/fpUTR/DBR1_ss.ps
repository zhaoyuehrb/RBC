%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCUGGAAACCGGAAGUGAAUUAUUUUGCAGGAGUCUACACCCAGGCGGUGGCUAUACUUAUUAAAGUUGGCGGGAGCUGAGCGAUCAGUCGGUCCUGGGCUGGCUGUGGUGUAGGGCGUUGCAGGCAGCGCUCACCUCCUCAGGCCGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[32.68532562 621.17633057]
[19.56326294 610.44097900]
[26.24652481 594.85992432]
[26.85440826 579.87219238]
[27.46229362 564.88452148]
[28.07017708 549.89685059]
[26.20932388 547.72607422]
[25.12252998 544.66601562]
[25.16106415 541.01757812]
[26.55714607 537.20593262]
[29.38340378 533.73437500]
[31.20306015 518.84515381]
[33.02272034 503.95593262]
[34.84237671 489.06671143]
[24.48350906 499.91537476]
[10.31001377 504.82577515]
[-4.54012585 502.71075439]
[-16.77911758 494.03854370]
[-23.69727516 480.72918701]
[-23.76292992 465.72933960]
[-16.96154785 452.35992432]
[-4.79894066 443.58090210]
[10.03211498 441.33596802]
[24.24805260 446.12210083]
[34.70149231 456.87969971]
[39.07795715 471.22521973]
[44.14472198 457.10687256]
[49.21148682 442.98852539]
[54.27824783 428.87014771]
[53.57337189 421.46862793]
[59.59341431 414.51879883]
[64.94527435 400.50601196]
[70.29713440 386.49325562]
[75.64899445 372.48049927]
[81.00085449 358.46771240]
[87.02148438 334.37371826]
[104.27360535 326.13623047]
[103.66572571 311.14855957]
[103.05783844 296.16085815]
[102.44995880 281.17318726]
[101.84207153 266.18551636]
[101.23419189 251.19783020]
[100.62630463 236.21015930]
[99.86656952 221.22941589]
[98.95505524 206.25712585]
[98.04354095 191.28485107]
[89.54713440 179.05128479]
[96.43153381 164.80642700]
[95.52001953 149.83415222]
[94.60850525 134.86187744]
[93.69699097 119.88959503]
[75.93103790 107.45804596]
[76.72384644 81.82499695]
[68.40609741 69.34240723]
[60.08834839 56.85981369]
[51.77060318 44.37722397]
[44.36288452 38.93048859]
[43.41376877 31.55628967]
[35.35071564 18.90768623]
[27.28765869 6.25908470]
[19.22460365 -6.38951778]
[4.43446207 -13.47356701]
[3.44430900 -29.84279442]
[17.27272797 -38.65794373]
[31.69422913 -30.85074425]
[31.87320709 -14.45257282]
[39.93626022 -1.80397058]
[47.99931717 10.84463215]
[56.06237030 23.49323463]
[64.25319672 36.05947495]
[72.57093811 48.54206848]
[80.88868713 61.02465820]
[89.20643616 73.50724792]
[104.09565735 71.68759155]
[109.16242218 57.56923676]
[114.22917938 43.45088577]
[119.29594421 29.33253098]
[123.93119812 15.06668282]
[128.13066101 0.66652590]
[132.33012390 -13.73363113]
[136.52958679 -28.13378716]
[140.72904968 -42.53394318]
[136.30996704 -58.32646561]
[147.96902466 -69.85896301]
[163.71237183 -65.26779175]
[167.34461975 -49.27595139]
[155.12921143 -38.33448410]
[150.92974854 -23.93432617]
[146.73028564 -9.53416920]
[142.53082275 4.86598778]
[138.33135986 19.26614571]
[139.74230957 22.55806351]
[139.59278870 26.70728493]
[137.49302673 30.95595169]
[133.41430664 34.39929581]
[128.34753418 48.51764679]
[123.28076935 62.63600159]
[118.21401215 76.75435638]
[125.98072052 94.09883118]
[121.28986359 110.53413391]
[108.66927338 118.97808075]
[109.58078766 133.95036316]
[110.49230194 148.92263794]
[111.40381622 163.89491272]
[119.96541595 177.19941711]
[113.01582336 190.37333679]
[113.92733765 205.34561157]
[114.83884430 220.31790161]
[118.50228119 228.75119019]
[115.61398315 235.60227966]
[116.22187042 250.58995056]
[116.82975006 265.57763672]
[117.43763733 280.56530762]
[118.04551697 295.55297852]
[118.65340424 310.54064941]
[119.26128387 325.52835083]
[127.95463562 337.75231934]
[141.91244507 343.24591064]
[155.87025452 348.73950195]
[169.82806396 354.23309326]
[183.78587341 359.72668457]
[197.74368286 365.22027588]
[211.70149231 370.71386719]
[227.83087158 367.75155640]
[238.25350952 380.41253662]
[232.24749756 395.67227173]
[215.99130249 397.83285522]
[206.20790100 384.67166138]
[192.25009155 379.17807007]
[178.29228210 373.68447876]
[164.33447266 368.19088745]
[150.37666321 362.69729614]
[136.41885376 357.20373535]
[122.46104431 351.71014404]
[115.59918976 354.73748779]
[113.98118591 369.64996338]
[101.87547302 360.79220581]
[95.01361847 363.81958008]
[89.66175842 377.83233643]
[84.30989838 391.84512329]
[78.95803833 405.85787964]
[73.60617828 419.87063599]
[68.39659882 433.93692017]
[63.32983780 448.05526733]
[58.26307678 462.17364502]
[53.19631195 476.29199219]
[49.73159409 490.88635254]
[47.91193771 505.77557373]
[46.09228134 520.66479492]
[44.27262115 535.55401611]
[43.05785370 550.50476074]
[42.44997025 565.49243164]
[41.84208679 580.48010254]
[41.23420334 595.46777344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 154]
[4 153]
[5 152]
[6 151]
[11 150]
[12 149]
[13 148]
[14 147]
[26 146]
[27 145]
[28 144]
[29 143]
[31 142]
[32 141]
[33 140]
[34 139]
[35 138]
[37 116]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 108]
[45 107]
[46 106]
[48 104]
[49 103]
[50 102]
[51 101]
[53 73]
[54 72]
[55 71]
[56 70]
[58 69]
[59 68]
[60 67]
[61 66]
[74 98]
[75 97]
[76 96]
[77 95]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
