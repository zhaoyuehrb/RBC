%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCGCGCCCGGCCCGCGCCCUGCCCAGUGCGGCCUCCUUUCCACCCGCCGCUGCCUGCCCGCGCCGUCCGGCGCCCGAGCUGCCCGCGGGCUGGGUCCCCGCGGCCCGAGCCGCCCCGGCCGGGACCCCGAACAAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[96.10540771 156.01617432]
[95.13777924 141.04740906]
[94.17015076 126.07865143]
[93.20252228 111.10989380]
[87.38780975 97.28278351]
[77.36685181 86.12122345]
[67.34589386 74.95966339]
[57.32493210 63.79810333]
[47.30397415 52.63654709]
[36.81209946 41.91644669]
[25.86873627 31.65765381]
[14.92537308 21.39886284]
[3.98201013 11.14007092]
[-6.96135330 0.88128006]
[-17.90471649 -9.37751102]
[-28.84807968 -19.63630295]
[-39.79144287 -29.89509392]
[-50.73480606 -40.15388489]
[-61.67816925 -50.41267776]
[-72.62153625 -60.67146683]
[-87.28967285 -56.33639908]
[-102.06074524 -59.90182114]
[-112.99129486 -70.31285095]
[-117.21482849 -84.70096588]
[-113.69314575 -99.17381287]
[-124.63651276 -109.43260193]
[-152.66131592 -104.92678833]
[-173.15150452 -132.21975708]
[-187.37692261 -136.97763062]
[-201.60235596 -141.73550415]
[-221.08987427 -136.76800537]
[-233.37496948 -151.64511108]
[-247.79191589 -155.78656006]
[-262.20886230 -159.92802429]
[-276.62582397 -164.06947327]
[-291.04275513 -168.21092224]
[-300.80493164 -156.52249146]
[-314.48013306 -149.82102966]
[-329.69897461 -149.26763916]
[-343.82476807 -154.95816040]
[-354.41009521 -165.90670776]
[-359.62100220 -180.21636963]
[-358.55465698 -195.40791321]
[-351.39581299 -208.84930420]
[-339.38479614 -218.21174622]
[-324.60256958 -221.87312317]
[-309.61026001 -219.19911194]
[-297.00537109 -210.65296936]
[-288.97174072 -197.71539307]
[-286.90130615 -182.62788391]
[-272.48434448 -178.48641968]
[-258.06741333 -174.34497070]
[-243.65046692 -170.20350647]
[-229.23352051 -166.06205750]
[-220.69538879 -171.83508301]
[-210.16854858 -171.91815186]
[-201.17103577 -166.03967285]
[-196.84448242 -155.96092224]
[-182.61904907 -151.20304871]
[-168.39363098 -146.44517517]
[-162.55151367 -151.14834595]
[-164.85554504 -165.97033691]
[-150.86729431 -160.55467224]
[-145.02517700 -165.25782776]
[-146.63591003 -180.17109680]
[-148.24662781 -195.08436584]
[-149.85734558 -209.99763489]
[-151.46806335 -224.91090393]
[-161.57682800 -237.82388306]
[-155.19810486 -252.93162537]
[-138.89378357 -254.69258118]
[-129.43634033 -241.29524231]
[-136.55479431 -226.52162170]
[-134.94407654 -211.60835266]
[-133.33335876 -196.69508362]
[-131.72264099 -181.78181458]
[-130.11190796 -166.86854553]
[-118.94400787 -160.13362122]
[-111.55682373 -150.40750122]
[-108.52759552 -139.43045044]
[-109.72080994 -128.93429565]
[-114.37772369 -120.37596893]
[-103.43435669 -110.11717224]
[-89.21883392 -114.56513977]
[-74.58823395 -111.27855682]
[-63.49377441 -101.04238129]
[-58.98292160 -86.53207397]
[-62.36274338 -71.61483002]
[-51.41938019 -61.35604095]
[-40.47601700 -51.09724808]
[-29.53265190 -40.83845901]
[-18.58928871 -30.57966614]
[-7.64592505 -20.32087517]
[3.29743814 -10.06208324]
[14.24080181 0.19670805]
[25.18416405 10.45549965]
[36.12752914 20.71429062]
[47.07089233 30.97308159]
[49.94320297 30.97621346]
[52.98612595 32.15928268]
[55.73426819 34.59281158]
[57.70573425 38.17183304]
[58.46553421 42.61558914]
[68.48648834 53.77714539]
[78.50744629 64.93870544]
[88.52840424 76.10026550]
[98.54936218 87.26182556]
[137.19750977 77.97378540]
[151.31726074 83.03662872]
[165.43702698 88.09947205]
[179.55677795 93.16231537]
[188.76531982 93.12031555]
[193.92388916 98.48898315]
[207.93144226 103.85445404]
[221.93901062 109.21992493]
[235.94656372 114.58540344]
[252.90049744 114.60473633]
[257.57522583 130.90145874]
[243.20950317 139.90489197]
[230.58108521 128.59295654]
[216.57353210 123.22748566]
[202.56597900 117.86201477]
[188.55841064 112.49653625]
[174.49394226 107.28207397]
[160.37417603 102.21923065]
[146.25442505 97.15638733]
[132.13465881 92.09354401]
[126.14381409 96.60572815]
[136.10781860 107.81816101]
[146.07180786 119.03060150]
[160.10266113 124.33488464]
[165.32356262 138.39697266]
[158.15380859 151.57250977]
[143.51071167 154.82516479]
[131.43710327 145.92416382]
[130.21328735 130.97491455]
[122.18770599 118.30250549]
[114.16212463 105.63008881]
[108.17127991 110.14226532]
[109.13890839 125.11102295]
[110.10653687 140.07978821]
[111.07416534 155.04853821]
[120.61801910 168.38446045]
[113.59523773 183.20379639]
[97.23024750 184.26167297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[25 83]
[26 82]
[28 60]
[29 59]
[30 58]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
[108 127]
[109 126]
[110 125]
[111 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
