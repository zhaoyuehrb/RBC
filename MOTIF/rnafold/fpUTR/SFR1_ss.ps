%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCGCCUCGCGCGUCAGGCAAUCUGGCCAAUUGCGCAUCUUUUCCGCCUACCGCACGGCCCCGCCCCUGCCACAGGAUCGAUUUACGGCCGCAGAGAAAAACCAAGAUUUCACUUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[170.49246216 211.43328857]
[175.07469177 203.94001770]
[165.59556580 192.31477356]
[156.11642456 180.68954468]
[146.63729858 169.06430054]
[137.15817261 157.43907166]
[119.00157928 165.71846008]
[99.22818756 168.40600586]
[79.52046204 165.27301025]
[61.55530167 156.58605957]
[46.86132812 143.08430481]
[36.68881607 125.91661072]
[22.26756477 130.04304504]
[7.84631443 134.16949463]
[-6.57493687 138.29592896]
[-20.99618721 142.42237854]
[-26.39638329 156.84957886]
[-39.10772324 165.23260498]
[-54.14010620 164.53160095]
[-65.73839569 155.22474670]
[-80.15964508 159.35118103]
[-94.58089447 163.47761536]
[-102.03064728 177.41593933]
[-117.17833710 181.92404175]
[-131.03710938 174.32734680]
[-135.38481140 159.13284302]
[-127.64202118 145.35514832]
[-112.40239716 141.16835022]
[-98.70733643 149.05636597]
[-84.28608704 144.92993164]
[-69.86483765 140.80348206]
[-64.94501495 126.77019501]
[-52.55867004 118.22370148]
[-37.33694458 118.61407471]
[-25.12262917 128.00112915]
[-10.70137882 123.87467957]
[3.71987247 119.74823761]
[18.14112282 115.62179565]
[32.56237411 111.49535370]
[31.64111900 102.65327454]
[31.87424278 93.76638794]
[33.25781250 84.98477173]
[35.76846313 76.45671082]
[39.36379623 68.32623291]
[43.98309708 60.73063278]
[49.54835892 53.79817581]
[55.96560287 47.64593506]
[63.12645721 42.37779617]
[70.90999603 38.08272934]
[66.05842590 23.88899040]
[61.20685577 9.69524956]
[46.33895493 5.25395298]
[36.94787598 -7.09866905]
[36.64468384 -22.61278152]
[45.54595947 -35.32289124]
[60.22898102 -40.34170532]
[75.04782867 -35.73937988]
[84.30435181 -23.28561020]
[84.43923187 -7.76912165]
[75.40059662 4.84367943]
[80.25216675 19.03742027]
[85.10373688 33.23115921]
[101.34947968 31.60295677]
[117.51834869 33.87070084]
[132.68936157 39.90522385]
[141.25839233 27.59377289]
[138.67654419 12.23239899]
[147.54212952 -0.13109447]
[162.20275879 -2.49782753]
[170.77178955 -14.80927944]
[179.34080505 -27.12073135]
[187.90983582 -39.43218231]
[191.99560547 -55.88644409]
[208.93788147 -56.51533508]
[214.23228455 -40.40925980]
[200.22128296 -30.86315918]
[191.65225220 -18.55170822]
[183.08323669 -6.24025583]
[174.51420593 6.07119560]
[177.38652039 20.64121437]
[168.87168884 33.24884796]
[153.56983948 36.16279602]
[145.00080872 48.47424698]
[154.49470520 58.64418030]
[161.73471069 70.52456665]
[166.42141724 83.62403870]
[168.36096191 97.40081787]
[167.47312927 111.28509521]
[163.79464722 124.70262909]
[157.47764587 137.09846497]
[148.78340149 147.95994568]
[158.26254272 159.58517456]
[167.74166870 171.21040344]
[177.22079468 182.83564758]
[186.69992065 194.46087646]
[208.77804565 191.07080078]
[228.51499939 201.26756287]
[238.41656494 221.01837158]
[234.81800842 242.69392395]
[246.44325256 252.17304993]
[258.06848145 261.65219116]
[269.69372559 271.13131714]
[284.66055298 267.03579712]
[299.16433716 272.55123901]
[307.62805176 285.55682373]
[306.79721069 301.05163574]
[296.99133301 313.07763672]
[281.98092651 317.01052856]
[267.53784180 311.33807373]
[259.21572876 298.24142456]
[260.21459961 282.75656128]
[248.58935547 273.27740479]
[236.96411133 263.79827881]
[225.33888245 254.31915283]
[218.04122925 258.88513184]
[209.84283447 261.56170654]
[201.22508240 262.18365479]
[192.69596863 260.70660400]
[184.76010132 257.21020508]
[177.88885498 251.89370728]
[172.49240112 245.06480408]
[168.89518738 237.12170410]
[167.31648254 228.52996826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[20 31]
[21 30]
[22 29]
[49 62]
[50 61]
[51 60]
[65 83]
[66 82]
[69 79]
[70 78]
[71 77]
[72 76]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
