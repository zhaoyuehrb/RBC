%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGUCCGUUGGAACUGUCCGCUGCUCUCUGGUCUCUGGAUAUGAGGCAGGAGGGCUUGGGGACAACUGUGGGGACAUGGCCCAGAUGAUCUGAUCCUGGCAGUAGUGACUGUUGGGGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[120.26817322 152.59895325]
[113.29163361 154.77938843]
[106.09159851 156.03874207]
[98.78914642 156.35586548]
[91.50704956 155.72538757]
[84.36775208 154.15792847]
[77.49130249 151.67985535]
[69.72512817 164.51287842]
[61.95895767 177.34590149]
[58.93118286 194.02729797]
[42.06353378 195.73571777]
[35.75244522 180.00021362]
[49.12593079 169.57972717]
[56.89210510 156.74670410]
[64.65827942 143.91368103]
[49.55639648 125.15734100]
[43.66019821 101.80992889]
[48.04570770 78.13220978]
[35.11760712 70.52535248]
[22.18951035 62.91849518]
[9.26141262 55.31163406]
[-3.66668487 47.70477676]
[-19.02563477 54.66602707]
[-35.35391617 51.17475128]
[-46.30388641 38.78926468]
[-47.73842621 22.48591423]
[-60.85071945 15.20115185]
[-73.96301270 7.91639042]
[-87.07530975 0.63162875]
[-100.18759918 -6.65313292]
[-113.29989624 -13.93789482]
[-126.41219330 -21.22265625]
[-142.23327637 -21.16113663]
[-149.60122681 -34.10572815]
[-162.71353149 -41.39049149]
[-175.82582092 -48.67525482]
[-188.93811035 -55.96001434]
[-202.05041504 -63.24477768]
[-216.58908081 -57.48621368]
[-231.41148376 -62.46920013]
[-239.51895142 -75.84092712]
[-237.08335876 -91.28767395]
[-225.25474548 -101.51596069]
[-209.61819458 -101.69629669]
[-197.55682373 -91.74353790]
[-194.76564026 -76.35707092]
[-181.65335083 -69.07231140]
[-168.54106140 -61.78754807]
[-155.42877197 -54.50278473]
[-142.31646729 -47.21802521]
[-127.43326569 -47.80059814]
[-119.12742615 -34.33494949]
[-106.01513672 -27.05018806]
[-92.90283966 -19.76542664]
[-79.79055023 -12.48066521]
[-66.67825317 -5.19590330]
[-53.56595993 2.08885813]
[-40.45366669 9.37362003]
[-28.86560249 2.62478995]
[-15.34742737 2.50955677]
[-3.45645976 9.16593075]
[3.62479520 20.93580437]
[3.94017315 34.77667999]
[16.86827087 42.38353729]
[29.79636955 49.99039459]
[42.72446823 57.59725571]
[55.65256500 65.20410919]
[68.27772522 53.40443802]
[83.88425446 45.98396683]
[101.00539398 43.64010239]
[118.03204346 46.59312439]
[133.36398315 54.56549835]
[143.77198792 43.76395416]
[154.17999268 32.96240616]
[164.58799744 22.16086197]
[162.75651550 6.63089991]
[171.37916565 -6.41455841]
[186.38458252 -10.81584740]
[200.68768311 -4.49481201]
[207.53497314 9.56394672]
[203.69335938 24.72231483]
[190.97676086 33.82297134]
[175.38954163 32.56886673]
[164.98153687 43.37041473]
[154.57353210 54.17195892]
[144.16552734 64.97350311]
[149.55993652 73.14367676]
[153.45930481 82.12400055]
[155.74601746 91.64356995]
[156.35108948 101.41522217]
[155.25627136 111.14418793]
[152.49458313 120.53697205]
[148.14933777 129.31022644]
[159.81042480 138.74523926]
[171.47149658 148.18023682]
[189.67846680 150.57827759]
[195.43072510 167.10900879]
[207.32160950 176.25270081]
[219.21247864 185.39637756]
[231.10336304 194.54005432]
[242.99424744 203.68374634]
[254.88513184 212.82742310]
[266.77600098 221.97111511]
[278.66690063 231.11479187]
[290.55776978 240.25846863]
[302.44866943 249.40216064]
[318.76760864 251.02186584]
[325.27691650 266.07382202]
[315.28033447 279.07385254]
[299.06152344 276.64862061]
[293.30496216 261.29302979]
[281.41409302 252.14935303]
[269.52322388 243.00567627]
[257.63232422 233.86198425]
[245.74145508 224.71830750]
[233.85057068 215.57463074]
[221.95968628 206.43093872]
[210.06880188 197.28726196]
[198.17791748 188.14358521]
[186.28703308 178.99989319]
[174.18685913 180.24308777]
[164.18962097 172.62974548]
[162.03649902 159.84130859]
[150.37542725 150.40631104]
[138.71434021 140.97131348]
[133.08729553 145.63638306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[72 86]
[73 85]
[74 84]
[75 83]
[93 125]
[94 124]
[95 123]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
