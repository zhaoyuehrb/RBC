%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUCCGAACCUGAAACCGGGAGCUUCCUGCUCGUGUUCGCUGUUGAGAAGCUACCCGCGGGGUUGUAGACCUCGGACCUC\
) } def
/len { sequence length } bind def

/coor [
[154.61665344 300.97912598]
[150.19532776 286.64553833]
[145.77400208 272.31195068]
[141.35267639 257.97833252]
[136.93135071 243.64476013]
[132.51002502 229.31115723]
[121.36503601 219.42993164]
[124.69091797 203.96226501]
[120.26959229 189.62866211]
[115.84825897 175.29507446]
[104.70327759 165.41384888]
[108.02915955 149.94616699]
[103.60783386 135.61257935]
[99.18650818 121.27898407]
[94.76517487 106.94539642]
[91.90916443 105.23739624]
[89.68556976 102.35051727]
[88.57218170 98.54810333]
[88.92927551 94.28134918]
[90.92848969 90.13578033]
[88.69285583 75.30332184]
[86.45722198 60.47085571]
[84.22158813 45.63839340]
[81.70899963 30.85032845]
[78.92032623 16.11183167]
[76.13165283 1.37333477]
[73.34297943 -13.36516285]
[70.55429840 -28.10365868]
[67.76562500 -42.84215546]
[53.19580460 -52.30782318]
[49.92264557 -69.03070831]
[59.46672821 -82.74175262]
[56.12891388 -97.36567688]
[43.29969025 -110.41432953]
[48.82486343 -126.95900726]
[44.94257736 -141.44789124]
[32.97033691 -152.65492249]
[36.95281219 -168.56315613]
[52.79317474 -172.80757141]
[64.19621277 -161.02188110]
[59.43146515 -145.33018494]
[63.31375122 -130.84129333]
[73.73738861 -124.40598297]
[76.98897552 -112.17661285]
[70.75283051 -100.70349121]
[74.09064484 -86.07956696]
[85.96840668 -80.72873688]
[92.62816620 -69.30473328]
[91.39625549 -55.94182205]
[82.50412750 -45.63082886]
[85.29280090 -30.89233398]
[88.08147430 -16.15383720]
[90.87014771 -1.41533935]
[93.65882111 13.32315731]
[96.44749451 28.06165504]
[100.89378357 34.19768143]
[99.05405426 43.40275955]
[101.28968811 58.23522186]
[103.52532196 73.06768799]
[105.76095581 87.90014648]
[109.09877014 102.52406311]
[113.52009583 116.85765839]
[117.94142151 131.19125366]
[122.36275482 145.52484131]
[133.82397461 156.43130493]
[130.18185425 170.87374878]
[134.60317993 185.20733643]
[139.02450562 199.54092407]
[150.48573303 210.44738770]
[146.84361267 224.88983154]
[151.26493835 239.22343445]
[155.68626404 253.55702209]
[160.10758972 267.89062500]
[164.52891541 282.22421265]
[168.95025635 296.55780029]
[183.83773804 300.60333252]
[194.15771484 312.07073975]
[196.61714172 327.30081177]
[190.43121338 341.43365479]
[177.57382202 349.95959473]
[162.14773560 350.15795898]
[149.07534790 341.96551514]
[142.52801514 327.99639893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[8 68]
[9 67]
[10 66]
[12 64]
[13 63]
[14 62]
[15 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[32 46]
[33 45]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
