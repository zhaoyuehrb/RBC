%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCCUCCCGUCCCUGCGCGGCCUCGGCGGCCUCGGCGGCGGCGGCGGCGGCGGCGGCGGCAGCAGCGCGGCCCCUUUAAACGCCUGCGGCGCCCCCCGCCCCCGCCAUCGCGCCUCCAUUUUCCCGGCCGCCCGCGCCGAGCGCCGCGCCCGCCCCGGGCCCCUCCGCCGCCGCCGGCCCGGAC\
) } def
/len { sequence length } bind def

/coor [
[208.34742737 450.01666260]
[200.91990662 436.98471069]
[193.49238586 423.95275879]
[186.06484985 410.92080688]
[185.32991028 425.90280151]
[178.64634705 439.33148193]
[167.13696289 448.95095825]
[152.73527527 453.14517212]
[137.86068726 451.20950317]
[125.01205444 443.46917725]
[116.34787750 431.22451782]
[113.32368469 416.53253174]
[116.44753265 401.86141968]
[125.19461823 389.67584229]
[138.09548950 382.02291870]
[152.98287964 380.18826294]
[167.35575867 384.48013306]
[178.79925537 394.17706299]
[174.35511780 379.85052490]
[169.91098022 365.52398682]
[165.46685791 351.19744873]
[161.02272034 336.87091064]
[156.57858276 322.54437256]
[152.13444519 308.21783447]
[147.57077026 293.92895508]
[142.88786316 279.67868042]
[138.20495605 265.42837524]
[133.52204895 251.17811584]
[128.83914185 236.92784119]
[124.15623474 222.67756653]
[119.07102203 217.29385376]
[119.51629639 208.14988708]
[115.07215881 193.82334900]
[105.61778259 189.88317871]
[99.77925873 181.20140076]
[99.69202423 170.51954651]
[105.62705994 161.37461853]
[101.66413116 146.90757751]
[97.70120239 132.44053650]
[93.73826599 117.97350311]
[77.42212677 92.30644226]
[69.56328583 79.52995300]
[61.70444870 66.75347137]
[53.84560776 53.97698212]
[40.02501678 46.27621078]
[39.94728088 31.38180923]
[32.08843994 18.60532188]
[24.22960091 5.82883453]
[16.37076187 -6.94765329]
[8.51192188 -19.72414017]
[-5.30866957 -27.42490959]
[-5.38640738 -42.31931305]
[-13.24524689 -55.09579849]
[-21.10408592 -67.87228394]
[-28.96292686 -80.64877319]
[-36.82176590 -93.42526245]
[-43.99807739 -99.10953522]
[-44.70311737 -106.48155975]
[-52.34736633 -119.38758087]
[-59.42769241 -125.19097137]
[-60.00944901 -132.57374573]
[-67.43697357 -145.60569763]
[-74.86450195 -158.63766479]
[-92.70514679 -167.99444580]
[-91.80762482 -187.29823303]
[-99.66646576 -200.07472229]
[-107.52530670 -212.85121155]
[-115.38414764 -225.62770081]
[-122.56045532 -231.31198120]
[-123.26549530 -238.68399048]
[-130.90974426 -251.59002686]
[-138.55400085 -264.49603271]
[-153.83586121 -263.64572144]
[-167.75762939 -270.00521851]
[-177.12017822 -282.11309814]
[-179.77206421 -297.18713379]
[-175.10389709 -311.76336670]
[-164.18838501 -322.49230957]
[-149.53384399 -326.90853882]
[-134.50776672 -323.99722290]
[-122.56305695 -314.42733765]
[-116.44449615 -300.39804077]
[-117.55810547 -285.13308716]
[-125.64797211 -272.14028931]
[-118.00372314 -259.23428345]
[-110.35947418 -246.32824707]
[-102.60765839 -233.48654175]
[-94.74881744 -220.71005249]
[-86.88997650 -207.93356323]
[-79.03113556 -195.15707397]
[-68.89488220 -193.68513489]
[-61.08537292 -186.72286987]
[-58.35131073 -176.39646912]
[-61.83254242 -166.06518555]
[-54.40501785 -153.03323364]
[-46.97749329 -140.00126648]
[-39.44134140 -127.03182983]
[-31.79709435 -114.12580872]
[-24.04527855 -101.28410339]
[-16.18643951 -88.50761414]
[-8.32759857 -75.73112488]
[-0.46875924 -62.95463943]
[7.39008045 -50.17815018]
[20.64855385 -43.39124298]
[21.28841019 -27.58298111]
[29.14724922 -14.80649281]
[37.00608826 -2.03000522]
[44.86492920 10.74648285]
[52.72376633 23.52297020]
[65.98223877 30.30987930]
[66.62209320 46.11814117]
[74.48093414 58.89463043]
[82.33977509 71.67111969]
[90.19861603 84.44760132]
[104.87256622 87.55810547]
[117.23918915 79.06890106]
[129.60580444 70.57969666]
[127.73668671 55.38874435]
[133.15208435 41.07329941]
[144.60760498 30.92294121]
[159.47084045 27.27014923]
[174.32632446 30.95430946]
[185.76039124 41.12882614]
[191.14555359 55.45567322]
[189.24436951 70.64263916]
[180.49369812 83.19988251]
[166.90437317 90.24182892]
[151.59913635 90.15029907]
[138.09501648 82.94631958]
[125.72839355 91.43552399]
[113.36177063 99.92472839]
[108.20530701 114.01056671]
[112.16823578 128.47760010]
[116.13117218 142.94464111]
[120.09410095 157.41168213]
[135.05633545 170.90130615]
[129.39869690 189.37921143]
[133.84283447 203.70574951]
[138.40650940 217.99465942]
[143.08941650 232.24493408]
[147.77232361 246.49520874]
[152.45523071 260.74548340]
[157.13813782 274.99575806]
[161.82104492 289.24603271]
[167.48414612 296.43908691]
[166.46098328 303.77371216]
[170.90512085 318.10025024]
[175.34925842 332.42678833]
[179.79339600 346.75332642]
[184.23751831 361.07986450]
[188.68165588 375.40640259]
[193.12579346 389.73294067]
[199.09681702 403.49328613]
[206.52433777 416.52523804]
[213.95185852 429.55718994]
[221.37937927 442.58914185]
[239.22003174 451.94592285]
[238.32250977 471.24972534]
[246.18135071 484.02621460]
[254.04019165 496.80270386]
[261.89901733 509.57919312]
[269.75787354 522.35565186]
[277.61669922 535.13214111]
[285.47555542 547.90863037]
[293.85809326 548.30633545]
[301.31121826 551.95410156]
[306.64556885 558.18682861]
[309.04309082 565.93408203]
[308.18185425 573.90332031]
[304.27725220 580.79565430]
[311.26516724 594.06854248]
[325.41787720 602.35308838]
[325.04907227 618.74804688]
[310.53814697 626.38775635]
[296.81271362 617.41314697]
[297.99230957 601.05645752]
[291.00439453 587.78356934]
[271.63513184 578.14093018]
[272.69906616 555.76751709]
[264.84020996 542.99102783]
[256.98138428 530.21453857]
[249.12254333 517.43804932]
[241.26370239 504.66152954]
[233.40486145 491.88504028]
[225.54602051 479.10855103]
[215.40977478 477.63662720]
[207.60025024 470.67434692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[18 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 147]
[24 146]
[25 144]
[26 143]
[27 142]
[28 141]
[29 140]
[30 139]
[32 138]
[33 137]
[37 135]
[38 134]
[39 133]
[40 132]
[41 114]
[42 113]
[43 112]
[44 111]
[46 109]
[47 108]
[48 107]
[49 106]
[50 105]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[58 98]
[59 97]
[61 96]
[62 95]
[63 94]
[65 90]
[66 89]
[67 88]
[68 87]
[70 86]
[71 85]
[72 84]
[115 131]
[116 130]
[117 129]
[158 185]
[159 184]
[160 183]
[161 182]
[162 181]
[163 180]
[164 179]
[170 177]
[171 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
