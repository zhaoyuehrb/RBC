%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUCCAGCCAUUGUCGGAGUGUCAGCCGUCACAAGGCACUUCCAGCCAGUCGCAACGGCGGGUCGCCAGCGCCGCAGUAGCUCGCGCGGUGCCUGUCGGUAGUCGCGUGCGGGGCGGCGGGGCGGCGGGGCGGCCGGCGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[109.48838806 180.88642883]
[108.82701111 176.17866516]
[110.26733398 171.02005005]
[106.51248169 156.49761963]
[102.75762939 141.97517395]
[99.00278473 127.45274353]
[95.24793243 112.93031311]
[92.13777161 120.74109650]
[88.86904907 128.48934937]
[85.44271851 136.17263794]
[72.39994812 143.58114624]
[59.35717392 150.98966980]
[53.39052963 157.99742126]
[45.96039963 158.41357422]
[32.76433563 165.54545593]
[19.56826782 172.67735291]
[6.37220287 179.80923462]
[-6.67056799 187.21775818]
[-19.55424690 194.89961243]
[-32.43792725 202.58145142]
[-33.70866394 218.04641724]
[-43.85228729 229.78892517]
[-58.96836472 233.29374695]
[-73.24445343 227.21322632]
[-81.19111633 213.88542175]
[-79.75268555 198.43516541]
[-69.48227692 186.80337524]
[-54.32906342 183.46273804]
[-40.11977386 189.69778442]
[-27.23609734 182.01593018]
[-14.35241795 174.33407593]
[-12.32313251 169.94265747]
[-7.47791862 166.81219482]
[-0.75968707 166.61317444]
[12.43637848 159.48127747]
[25.63244438 152.34939575]
[38.82851028 145.21749878]
[51.94865799 137.94689941]
[64.99142456 130.53837585]
[78.03420258 123.12985992]
[78.82340240 115.67150116]
[63.90670776 114.09284210]
[65.48561096 99.17617035]
[80.40181732 100.75477600]
[81.19101715 93.29641724]
[69.98759460 83.32228851]
[61.43531799 79.92111206]
[58.65594864 73.01783752]
[47.66529465 62.80973053]
[36.67464066 52.60161972]
[28.19597244 49.02088547]
[25.56276321 42.06055450]
[14.78976822 31.62299728]
[-1.23882806 28.15656662]
[-5.99279594 12.46160412]
[5.41833878 0.68374246]
[21.25577927 4.93903494]
[25.22732353 20.85000229]
[36.00032043 31.28755760]
[46.88274765 41.61096573]
[57.87340546 51.81907272]
[68.86405945 62.02718353]
[79.96171570 72.11886597]
[91.16514587 82.09298706]
[106.14431000 82.88329315]
[118.33509064 74.14344788]
[130.52587891 65.40360260]
[142.71665955 56.66376114]
[154.90744019 47.92391968]
[167.09822083 39.18407440]
[169.98139954 26.56691742]
[180.37168884 19.54482460]
[192.36021423 21.44979668]
[204.73254395 12.96891308]
[217.10487366 4.48803043]
[229.47720337 -3.99285221]
[241.84954834 -12.47373486]
[254.22187805 -20.95461845]
[253.57836914 -34.76159668]
[259.80755615 -46.97868729]
[271.17880249 -54.44809341]
[284.64849854 -55.29910278]
[296.67449951 -49.41555405]
[309.22286987 -57.63370514]
[312.59222412 -63.44936371]
[317.64990234 -66.22346497]
[322.47805786 -65.92076874]
[335.36172485 -73.60261536]
[348.24539185 -81.28446960]
[361.12908936 -88.96631622]
[374.01275635 -96.64817047]
[386.89642334 -104.33001709]
[399.69842529 -112.14726257]
[412.41726685 -120.09902954]
[425.13613892 -128.05079651]
[437.85498047 -136.00256348]
[445.06854248 -150.72998047]
[461.44583130 -151.57647705]
[470.13931274 -137.67124939]
[462.20587158 -123.31880951]
[445.80676270 -123.28371429]
[433.08789062 -115.33193970]
[420.36904907 -107.38017273]
[407.65017700 -99.42840576]
[403.61859131 -93.17330933]
[394.57827759 -91.44634247]
[381.69461060 -83.76448822]
[368.81094360 -76.08264160]
[355.92724609 -68.40078735]
[343.04357910 -60.71894073]
[330.15988159 -53.03709030]
[317.44104004 -45.08531952]
[304.89263916 -36.86716843]
[304.63754272 -20.48442459]
[294.58654785 -7.33540869]
[278.52627563 -2.69850349]
[262.70275879 -8.58228493]
[250.33042908 -0.10140210]
[237.95809937 8.37948036]
[225.58575439 16.86036301]
[213.21342468 25.34124565]
[200.84109497 33.82212830]
[194.17109680 50.02290726]
[175.83805847 51.37485504]
[163.64727783 60.11470032]
[151.45649719 68.85454559]
[139.26571655 77.59438324]
[127.07493591 86.33422852]
[114.88415527 95.07407379]
[109.77037048 109.17546082]
[113.52521515 123.69789886]
[117.28006744 138.22033691]
[121.03491974 152.74276733]
[124.78976440 167.26519775]
[129.00195312 181.66163635]
[133.66728210 195.91767883]
[138.33261108 210.17372131]
[142.99792480 224.42976379]
[147.66325378 238.68580627]
[160.22785950 249.22442627]
[157.11735535 265.32589722]
[141.53157043 270.42636108]
[129.50379944 259.27896118]
[133.40721130 243.35113525]
[128.74188232 229.09509277]
[124.07656097 214.83905029]
[119.41123962 200.58300781]
[114.74591827 186.32696533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[5 132]
[6 131]
[7 130]
[10 40]
[11 39]
[12 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 31]
[19 30]
[20 29]
[45 64]
[46 63]
[48 62]
[49 61]
[50 60]
[52 59]
[53 58]
[65 129]
[66 128]
[67 127]
[68 126]
[69 125]
[70 124]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[78 117]
[83 113]
[84 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 104]
[94 103]
[95 102]
[96 101]
[135 148]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
