%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAGCAGCGGGUUAAGUGCCGCCCGCGCGGAGACGGCUGAGUCCGGAGCCGCGGCUCCGAGCUCGCAUUCGGAUCCGCUAGAGCAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[84.42104340 277.82748413]
[69.89538574 274.08511353]
[56.85745621 266.66809082]
[46.21797180 256.09448242]
[38.72011566 243.10284424]
[34.88762283 228.60070801]
[34.98819733 213.60104370]
[39.01481247 199.15161133]
[46.68457794 186.26376343]
[32.45037079 190.99528503]
[18.21616364 195.72682190]
[3.98195815 200.45834351]
[-10.25224781 205.18988037]
[-24.48645401 209.92141724]
[-29.05315208 224.75128174]
[-41.48464203 234.03770447]
[-57.00076294 234.20986938]
[-69.63524628 225.20156860]
[-74.52988434 210.47668457]
[-69.80257416 195.69723511]
[-57.27108002 186.54621887]
[-41.75400543 186.54237366]
[-29.21798325 195.68721008]
[-14.98377800 190.95567322]
[-0.74957192 186.22413635]
[13.48463440 181.49261475]
[27.71883965 176.76107788]
[41.95304489 172.02955627]
[53.65791702 162.64894104]
[61.37624741 149.78707886]
[69.09458160 136.92521667]
[76.81291199 124.06336212]
[84.53124237 111.20150757]
[81.11991119 97.11928558]
[88.57557678 84.69513702]
[102.60690308 81.08016205]
[110.32523346 68.21829987]
[118.04356384 55.35644531]
[117.27249908 35.35200882]
[134.22702026 26.31536674]
[141.05943298 12.96178913]
[147.89186096 -0.39178771]
[154.72427368 -13.74536419]
[161.55670166 -27.09894180]
[160.95457458 -42.90868378]
[173.63981628 -50.71469116]
[180.47224426 -64.06826782]
[187.30465698 -77.42184448]
[194.13708496 -90.77542114]
[200.96949768 -104.12899780]
[207.80192566 -117.48257446]
[206.43138123 -133.82435608]
[220.05107117 -142.95869446]
[234.65022278 -135.48896790]
[235.21047974 -119.09938812]
[221.15550232 -110.65015411]
[214.32307434 -97.29657745]
[207.49066162 -83.94300079]
[200.65823364 -70.58942413]
[193.82582092 -57.23584747]
[186.99339294 -43.88227081]
[188.08422852 -29.02766418]
[174.91027832 -20.26651955]
[168.07785034 -6.91294289]
[161.24543762 6.44063425]
[154.41300964 19.79421043]
[147.58059692 33.14778900]
[151.64916992 42.79491806]
[149.58227539 53.28539276]
[141.84349060 60.98175812]
[130.90542603 63.07477570]
[123.18708801 75.93663788]
[115.46875763 88.79849243]
[118.88008881 102.88071442]
[111.42442322 115.30486298]
[97.39309692 118.91983795]
[89.67476654 131.78169250]
[81.95643616 144.64355469]
[74.23810577 157.50541687]
[66.51977539 170.36726379]
[80.77135468 165.68832397]
[95.75095367 164.90635681]
[110.41223907 168.07600403]
[123.73110199 174.97586060]
[134.77719116 185.12396240]
[142.77893066 197.81144714]
[147.17738342 212.15206909]
[147.66531372 227.14413452]
[144.20864868 241.74041748]
[137.04882812 254.92134094]
[126.68596649 265.76620483]
[113.84394836 273.51751709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[29 80]
[30 79]
[31 78]
[32 77]
[33 76]
[36 73]
[37 72]
[38 71]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
