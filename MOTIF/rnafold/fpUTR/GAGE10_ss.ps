%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUCUGCUCAGCCGCUUUACCCACGUGGAGAACGCCAGGGAGCUGUGAGGGUGUGUGGUCUCGUUCCUGUCGUCUGGAAUAUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[70.85011292 243.89778137]
[57.66965103 236.73709106]
[49.09732819 224.42793274]
[46.95206070 209.58213806]
[51.68904114 195.34973145]
[62.30315399 184.75065613]
[76.54224396 180.03384399]
[91.38498688 182.20013428]
[103.68186188 190.78973389]
[100.09212494 176.22561646]
[96.50238800 161.66148376]
[92.91265106 147.09735107]
[89.32292175 132.53323364]
[75.94869232 125.74131775]
[62.07130814 131.43502808]
[48.19392776 137.12873840]
[34.31654739 142.82243347]
[31.62762070 158.01365662]
[21.13579369 169.32405090]
[6.18896914 173.14453125]
[-8.44337559 168.25596619]
[-18.09211349 156.21829224]
[-19.67836571 140.87269592]
[-12.69596577 127.11589813]
[0.62702739 119.33763123]
[16.03929520 120.01992798]
[28.62284088 128.94505310]
[42.50022125 123.25135040]
[56.37760544 117.55764771]
[70.25498199 111.86393738]
[89.67865753 84.46367645]
[86.08892059 69.89955139]
[82.49918365 55.33542252]
[77.34382629 47.63304901]
[79.01417542 40.33210373]
[75.81674957 25.67685127]
[65.31561279 13.84314251]
[70.16211700 -0.24091271]
[66.96469879 -14.89616680]
[63.76727295 -29.55142212]
[60.56985092 -44.20667648]
[57.37242508 -58.86193085]
[54.17500305 -73.51718140]
[50.90929031 -76.82099915]
[49.13060379 -80.62825012]
[48.80779648 -84.38063812]
[49.72213364 -87.59329224]
[51.51052475 -89.91238403]
[49.90254593 -104.82595062]
[48.29457092 -119.73951721]
[46.68659210 -134.65307617]
[45.07861328 -149.56665039]
[31.55313683 -157.17198181]
[25.11170959 -171.28890991]
[28.23119545 -186.48918152]
[39.71208954 -196.92799377]
[55.13974762 -198.59140015]
[68.58192444 -190.83978271]
[74.86983490 -176.65380859]
[71.58563995 -161.48826599]
[59.99217987 -151.17462158]
[61.60015488 -136.26106262]
[63.20813370 -121.34748840]
[64.81610870 -106.43392944]
[66.42408752 -91.52036285]
[68.83026123 -76.71460724]
[72.02767944 -62.05935287]
[75.22510529 -47.40409851]
[78.42253113 -32.74884415]
[81.61994934 -18.09358978]
[84.81737518 -3.43833613]
[95.08981323 7.34712934]
[90.47200775 22.47942734]
[93.66942596 37.13468170]
[97.06331635 51.74568939]
[100.65305328 66.30981445]
[104.24278259 80.87394714]
[116.92063904 88.89093018]
[131.61749268 85.89054871]
[146.31436157 82.89015961]
[161.01121521 79.88977814]
[171.02093506 67.35243225]
[187.06326294 67.50553131]
[196.83187866 80.23162842]
[192.83316040 95.76834869]
[178.13456726 102.19725800]
[164.01159668 94.58663177]
[149.31474304 97.58702087]
[134.61787415 100.58740234]
[119.92102051 103.58779144]
[115.91252899 109.92671967]
[128.59024048 117.94391632]
[120.57283783 130.62150574]
[107.89553833 122.60456848]
[103.88704681 128.94349670]
[107.47678375 143.50761414]
[111.06651306 158.07174683]
[114.65625000 172.63587952]
[118.24598694 187.19999695]
[125.46956635 194.98141479]
[125.03208923 204.39366150]
[132.35700989 217.48356628]
[139.68194580 230.57347107]
[147.00686646 243.66336060]
[154.33178711 256.75326538]
[168.69165039 264.67327881]
[168.74206543 281.07235718]
[154.43118286 289.08050537]
[140.48080444 280.45965576]
[141.24188232 264.07818604]
[133.91696167 250.98829651]
[126.59204102 237.89839172]
[119.26711273 224.80848694]
[111.94218445 211.71859741]
[108.82653809 226.39144897]
[99.46430206 238.11102295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[14 30]
[15 29]
[16 28]
[17 27]
[31 77]
[32 76]
[33 75]
[35 74]
[36 73]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[78 90]
[79 89]
[80 88]
[81 87]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
