%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGGUGGCGGCGGCCCCCAGCACGGCCGGUGCAAGGCCUCGGGUUAAGCGGCGGCCGAGCGGGGCUCGGCCCGGGGUGCUCGGGGAGCUCGCCGCGGCGGGCAGCAGGAGGAAGCGGCGGCGGCGCGUCCCGAGCGGUGCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[71.68413544 234.93324280]
[74.28050232 215.72624207]
[74.59674835 200.72958374]
[74.91298676 185.73291016]
[75.22923279 170.73625183]
[67.76197815 157.84867859]
[75.78851318 144.21470642]
[76.10475159 129.21803284]
[66.61179352 117.60409546]
[51.85204315 114.93018341]
[37.09229279 112.25627899]
[26.94439697 121.17407227]
[13.70397663 122.57666016]
[2.25337219 116.17316437]
[-3.31527758 104.50985718]
[-18.01537323 101.52536774]
[-32.71546936 98.54087830]
[-47.41556549 95.55638123]
[-62.11565781 92.57189178]
[-76.81575775 89.58739471]
[-83.30131531 91.35142517]
[-88.84766388 89.76589966]
[-92.06671143 86.15476227]
[-106.62792206 82.55321503]
[-121.88215637 86.75071716]
[-132.37937927 76.18389893]
[-146.94058228 72.58235931]
[-161.50180054 68.98081207]
[-176.06300354 65.37926483]
[-190.62422180 61.77772141]
[-205.18542480 58.17617798]
[-220.43966675 62.37368011]
[-230.93687439 51.80686188]
[-245.49809265 48.20531464]
[-260.05929565 44.60377121]
[-273.48257446 52.50653458]
[-288.19839478 48.64662552]
[-295.64974976 35.80089188]
[-310.21096802 32.19934464]
[-324.77218628 28.59780121]
[-339.33337402 24.99625778]
[-356.16091919 27.06270409]
[-362.80493164 11.46483803]
[-349.65588379 0.76255482]
[-335.73184204 10.43504620]
[-321.17062378 14.03659058]
[-306.60943604 17.63813591]
[-292.04821777 21.23967934]
[-279.46783447 13.34855556]
[-264.64938354 16.79360390]
[-256.45776367 30.04256058]
[-241.89654541 33.64410400]
[-227.33532715 37.24564743]
[-213.12261963 32.79053879]
[-201.58387756 43.61496735]
[-187.02267456 47.21651077]
[-172.46145630 50.81805420]
[-157.90025330 54.41960144]
[-143.33903503 58.02114487]
[-128.77783203 61.62268829]
[-114.56510925 57.16757965]
[-103.02638245 67.99200439]
[-88.46516418 71.59355164]
[-73.83126068 74.88729858]
[-59.13116837 77.87179565]
[-44.43107224 80.85628510]
[-29.73097610 83.84078217]
[-15.03087997 86.82527161]
[-0.33078498 89.80976868]
[13.24328327 79.93270874]
[30.09835243 82.95627594]
[39.76620102 97.49652863]
[54.52595139 100.17043304]
[69.28569794 102.84434509]
[72.18333435 88.84965515]
[80.90617371 78.05229187]
[93.22811127 72.61138916]
[106.26371002 73.39138031]
[117.14145660 79.84506989]
[123.63633728 90.21673584]
[138.56887817 88.79566956]
[153.50140381 87.37459564]
[168.43394470 85.95352936]
[183.36647034 84.53245544]
[198.29901123 83.11138916]
[213.23153687 81.69031525]
[228.16407776 80.26924133]
[243.09660339 78.84817505]
[256.10168457 69.83827209]
[269.50473022 76.33501434]
[284.43728638 74.91394806]
[299.35400391 73.33553314]
[314.25323486 71.59996033]
[329.15249634 69.86437988]
[344.05175781 68.12880707]
[358.95101929 66.39322662]
[373.85028076 64.65765381]
[388.74951172 62.92207718]
[401.56176758 53.63999176]
[415.09878540 59.85271835]
[429.99804688 58.11714172]
[433.77810669 43.41762924]
[442.61614990 31.07853508]
[455.31692505 22.76861763]
[470.16275024 19.61172485]
[485.14584351 22.03480148]
[498.23986816 29.71014595]
[507.67398071 41.59973145]
[512.17224121 56.09558868]
[511.12637329 71.23727417]
[504.67776489 84.97698975]
[493.69857788 95.45656586]
[479.67361450 101.25872040]
[464.49966431 101.59875488]
[450.22885132 96.43068695]
[438.79122925 86.45345306]
[431.73361206 73.01639557]
[416.83438110 74.75196838]
[405.08782959 83.90991211]
[390.48510742 77.82133484]
[375.58584595 79.55690765]
[360.68658447 81.29248047]
[345.78732300 83.02806091]
[330.88809204 84.76363373]
[315.98883057 86.49921417]
[301.08956909 88.23478699]
[294.76678467 92.15935516]
[285.85833740 89.84648132]
[270.92581177 91.26754761]
[258.98880005 100.17580414]
[244.51768494 93.78070831]
[229.58514404 95.20177460]
[214.65261841 96.62284851]
[199.72007751 98.04392242]
[184.78755188 99.46498871]
[169.85501099 100.88606262]
[154.92248535 102.30712891]
[139.98994446 103.72820282]
[125.05741119 105.14926910]
[119.88424683 118.75817871]
[107.50517273 128.10601807]
[91.10141754 129.53428650]
[90.78517914 144.53094482]
[98.22980499 158.49118042]
[90.22589874 171.05249023]
[89.90965271 186.04916382]
[89.59341431 201.04582214]
[89.27716827 216.04249573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[7 143]
[8 142]
[9 74]
[10 73]
[11 72]
[15 69]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[23 63]
[24 62]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[38 48]
[39 47]
[40 46]
[41 45]
[80 139]
[81 138]
[82 137]
[83 136]
[84 135]
[85 134]
[86 133]
[87 132]
[88 131]
[90 129]
[91 128]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
