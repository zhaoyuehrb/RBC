%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCAACAGAUUAGUGGUCCUGGUUUAUGUUCUUGACUAGUAUGAUGUUAUCUGGACUGGGCUGUAAAAAUCUGUGAACACUGUUGCUCUGAGUUAGGAACAGA\
) } def
/len { sequence length } bind def

/coor [
[180.88984680 246.21134949]
[170.27429199 238.26467896]
[163.01635742 227.12837219]
[160.01765442 214.14529419]
[161.66462708 200.89012146]
[167.77882385 188.97833252]
[157.90974426 177.68226624]
[148.04066467 166.38619995]
[138.17156982 155.09011841]
[128.30249023 143.79405212]
[118.43341827 132.49798584]
[108.56433105 121.20190430]
[90.66421509 120.87371063]
[78.48699188 107.74978638]
[79.49739075 89.87519073]
[68.97042084 79.18955231]
[58.44345474 68.50391388]
[47.91648483 57.81826782]
[37.38951874 47.13262939]
[26.86254883 36.44698715]
[18.46596146 32.44175339]
[16.18647194 25.28068542]
[5.98388147 14.28490734]
[-4.21870947 3.28912950]
[-14.42130089 -7.70664835]
[-24.62389183 -18.70242691]
[-34.82648087 -29.69820404]
[-44.57083511 -27.15112495]
[-54.50356293 -28.41726303]
[-63.19492340 -33.27025223]
[-69.41034698 -40.97061920]
[-72.28574371 -50.37817383]
[-71.44747162 -60.12070847]
[-67.06026459 -68.79415131]
[-75.87703705 -80.92940521]
[-84.69381714 -93.06465912]
[-93.51059723 -105.19991302]
[-108.90658569 -104.21654510]
[-122.37905121 -111.73294830]
[-129.62896729 -125.35066223]
[-128.34292603 -140.72433472]
[-118.93129730 -152.94827271]
[-104.39728546 -158.12185669]
[-89.37864685 -154.59423828]
[-78.66777802 -143.49104309]
[-75.68247986 -128.35527039]
[-81.37534332 -114.01669312]
[-72.55856323 -101.88143921]
[-63.74178314 -89.74618530]
[-54.92500687 -77.61093140]
[-34.66898727 -76.39061737]
[-21.44440460 -60.62564850]
[-23.83070374 -39.90079498]
[-13.62811375 -28.90501785]
[-3.42552233 -17.90923882]
[6.77706861 -6.91346169]
[16.97966003 4.08231640]
[27.18225098 15.07809448]
[37.54819107 25.92001724]
[48.07516098 36.60565948]
[58.60212708 47.29130173]
[69.12909698 57.97694016]
[79.65606689 68.66258240]
[90.18303680 79.34822845]
[101.43678284 77.17886353]
[112.32958984 80.74253845]
[120.12500763 89.14399719]
[122.86469269 100.27265930]
[119.86040497 111.33282471]
[129.72949219 122.62889862]
[139.59857178 133.92497253]
[149.46765137 145.22103882]
[159.33673096 156.51712036]
[169.20581055 167.81318665]
[179.07489014 179.10925293]
[195.38832092 174.22573853]
[212.15449524 176.87406921]
[226.07850647 186.48593140]
[234.44474792 201.12921143]
[235.64642334 217.89631653]
[229.49406433 233.48133850]
[240.02102661 244.16699219]
[250.54798889 254.85263062]
[261.07495117 265.53826904]
[271.60192871 276.22390747]
[286.79873657 280.62481689]
[290.21884155 295.12142944]
[300.74581909 305.80706787]
[316.31817627 304.38046265]
[329.13476562 313.33975220]
[333.14398193 328.45465088]
[326.45278931 342.58834839]
[312.22055054 349.06738281]
[297.16732788 344.83251953]
[288.40075684 331.88333130]
[290.06015015 316.33404541]
[279.53320312 305.64840698]
[265.08935547 302.01181030]
[260.91629028 286.75088501]
[250.38932800 276.06524658]
[239.86235046 265.37960815]
[229.33538818 254.69395447]
[218.80841064 244.00831604]
[206.73153687 249.24613953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[12 69]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[34 50]
[35 49]
[36 48]
[37 47]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
