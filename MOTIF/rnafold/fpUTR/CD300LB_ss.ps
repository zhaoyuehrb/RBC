%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGGUCUAGAUGUGCAGAAGGUGCAAGCCAGAGCUCAGGCAGAACUUCCAGAGUGCAUCUGGGAUCUGCAUUUGCCACUGGUUGCAGAUCAGGCGGACGAGGAGCCGGGAAGGCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[90.29147339 193.38117981]
[73.93891907 192.14588928]
[67.07725525 177.25126648]
[76.76518250 164.01962280]
[77.89508057 149.06224060]
[79.02498627 134.10485840]
[66.42756653 103.41674805]
[81.20206451 79.99230957]
[74.30836487 66.67026520]
[67.41466522 53.34821701]
[60.52096939 40.02616882]
[53.72127914 33.75629425]
[53.62619019 26.28158569]
[47.06945419 12.79050732]
[40.51271820 -0.70057148]
[27.52147675 -9.73042297]
[28.91715240 -24.55949402]
[22.36041641 -38.05057144]
[15.80368042 -51.54165268]
[9.24694347 -65.03273010]
[5.50490570 -50.50698853]
[-4.87970304 -39.68294525]
[-19.23797798 -35.34244537]
[-33.87975693 -38.60102081]
[-45.04201889 -48.62119675]
[-49.85599136 -62.82773209]
[-47.08446503 -77.56945801]
[-37.43972778 -89.05767822]
[-23.40054131 -94.33983612]
[-8.57505512 -92.05839539]
[3.22604251 -82.80029297]
[0.23039284 -97.49811554]
[-2.76525688 -112.19594574]
[-5.76090670 -126.89376831]
[-8.75655651 -141.59159851]
[-21.27928162 -155.02108765]
[-15.20721436 -171.43507385]
[-18.57127571 -186.05297852]
[-33.16473389 -190.63317871]
[-43.43839645 -201.82910156]
[-46.70692825 -216.56622314]
[-42.19028473 -230.86503601]
[-31.19695854 -240.91552734]
[-34.56101990 -255.53343201]
[-37.92508316 -270.15133667]
[-41.28914261 -284.76922607]
[-44.65320587 -299.38714600]
[-48.98847961 -304.61740112]
[-49.81830215 -310.38278198]
[-47.79941559 -314.82366943]
[-50.42476273 -329.59216309]
[-53.05010605 -344.36062622]
[-55.67545319 -359.12908936]
[-58.30080032 -373.89755249]
[-60.92614365 -388.66601562]
[-63.55149078 -403.43447876]
[-75.83000183 -413.76007080]
[-75.26863861 -429.79327393]
[-62.29803467 -439.23483276]
[-46.86812210 -434.84194946]
[-40.81541061 -419.98449707]
[-48.78302765 -406.05981445]
[-46.15768051 -391.29135132]
[-43.53233337 -376.52288818]
[-40.90699005 -361.75442505]
[-38.28164291 -346.98596191]
[-35.65629578 -332.21749878]
[-33.03095245 -317.44903564]
[-30.03530121 -302.75119019]
[-26.67123985 -288.13330078]
[-23.30717850 -273.51541138]
[-19.94311714 -258.89749146]
[-16.57905579 -244.27958679]
[-2.29837298 -240.04548645]
[8.01415539 -229.15936279]
[11.51625252 -214.47596741]
[7.16998005 -199.91552734]
[-3.95337272 -189.41703796]
[-0.58931124 -174.79913330]
[9.54231358 -168.06297302]
[12.41591740 -155.82698059]
[5.94126940 -144.58724976]
[8.93691921 -129.88941956]
[11.93256855 -115.19158936]
[14.92821884 -100.49376678]
[17.92386818 -85.79594421]
[22.73802185 -71.58946991]
[29.29475975 -58.09838867]
[35.85149384 -44.60731125]
[42.40823364 -31.11623001]
[54.93049240 -23.05135155]
[54.00379562 -7.25730801]
[60.56053162 6.23377085]
[67.11727142 19.72484970]
[73.84301758 33.13246918]
[80.73671722 46.45451736]
[87.63041687 59.77656555]
[94.52410889 73.09860992]
[100.73241425 71.29772949]
[107.46801758 70.97518158]
[114.36972809 72.27375793]
[121.04000854 75.24637604]
[127.06755066 79.84733582]
[132.05184937 85.92919922]
[135.62843323 93.24591827]
[137.49302673 101.46206665]
[137.42332458 110.16804504]
[135.29681396 118.90048218]
[143.80584717 131.25347900]
[152.31488037 143.60646057]
[167.76829529 147.91592407]
[173.90116882 162.74047852]
[166.00889587 176.70799255]
[150.14573669 179.10379028]
[138.48056030 168.09001160]
[139.96188354 152.11549377]
[131.45285034 139.76251221]
[122.94381714 127.40951538]
[115.70345306 129.36582947]
[111.85155487 143.86282349]
[101.22273254 133.27845764]
[93.98236847 135.23475647]
[92.85246277 150.19215393]
[91.72256470 165.14953613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[6 122]
[8 98]
[9 97]
[10 96]
[11 95]
[13 94]
[14 93]
[15 92]
[17 90]
[18 89]
[19 88]
[20 87]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[37 79]
[38 78]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
