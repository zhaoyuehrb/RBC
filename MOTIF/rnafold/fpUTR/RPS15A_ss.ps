%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUCCGCCAUCUUUCCGCGCCGGUGAGUAGCACUCUCUGAGAGCUCCAAUUUCAUCCGUCUGCCAUCGGCGCCAUCCUGCAAUCUAAGCCACA\
) } def
/len { sequence length } bind def

/coor [
[93.64404297 489.58877563]
[79.29038239 485.14013672]
[65.73744965 478.64892578]
[53.27412796 470.25347900]
[42.16606903 460.13275146]
[32.65004730 448.50250244]
[24.92889214 435.61056519]
[19.16718292 421.73178101]
[15.48773098 407.16198730]
[13.96896458 392.21170044]
[14.64325523 377.19958496]
[17.49623108 362.44564819]
[22.46707916 348.26437378]
[29.44984818 334.95803833]
[38.29569626 322.81024170]
[48.81607819 312.07995605]
[60.78675079 302.99584961]
[73.95255280 295.75158691]
[88.03285980 290.50155640]
[102.72754669 287.35766602]
[101.75659943 272.38912964]
[100.78565216 257.42059326]
[99.81470490 242.45204163]
[98.84375763 227.48348999]
[97.87281036 212.51495361]
[96.90186310 197.54641724]
[95.93091583 182.57786560]
[94.95996857 167.60932922]
[91.31627655 161.01310730]
[94.20794678 152.14179993]
[93.72222137 137.14967346]
[93.23648834 122.15753937]
[92.75076294 107.16540527]
[89.30787659 99.69249725]
[92.50000000 91.68164062]
[92.50000000 76.68164062]
[80.69535828 69.35880280]
[74.14656830 57.23141098]
[74.49237823 43.56204987]
[81.53301239 31.96744728]
[93.31165314 25.46152687]
[93.79737854 10.46939468]
[94.28311157 -4.52273941]
[94.76883698 -19.51487350]
[95.25457001 -34.50700760]
[83.48731232 -44.80582428]
[81.14411926 -60.26685333]
[89.33137512 -73.58987427]
[104.18331146 -78.48415375]
[118.68729401 -72.63877106]
[125.99498749 -58.81373596]
[122.65592194 -43.53680420]
[110.24670410 -34.02127838]
[109.76097107 -19.02914429]
[109.27524567 -4.03701067]
[108.78951263 10.95512295]
[108.30378723 25.94725609]
[121.53373718 35.51593018]
[126.56942749 51.22094345]
[121.26539612 67.01150513]
[107.50000000 76.68164062]
[107.50000000 91.68164062]
[107.74289703 106.67967987]
[108.22862244 121.67181396]
[108.71435547 136.66394043]
[109.20008087 151.65608215]
[109.92851257 166.63838196]
[110.89945984 181.60691833]
[111.87040710 196.57546997]
[112.84135437 211.54400635]
[113.81230164 226.51254272]
[114.78324890 241.48109436]
[115.75419617 256.44964600]
[116.72514343 271.41818237]
[117.69609070 286.38671875]
[132.67379761 287.60586548]
[147.31434631 290.99288940]
[161.30569458 296.47558594]
[174.34960938 303.93710327]
[186.16806030 313.21838379]
[196.50914001 324.12161255]
[205.15242004 336.41433716]
[211.91366577 349.83459473]
[216.64875793 364.09631348]
[219.25679016 378.89550781]
[219.68214417 393.91674805]
[217.91577148 408.83978271]
[213.99533081 423.34661865]
[208.00434875 437.12799072]
[200.07057190 449.89016724]
[190.36306763 461.36108398]
[179.08877563 471.29629517]
[166.48800659 479.48397827]
[152.82934570 485.74966431]
[138.40391541 489.95974731]
[123.51920319 492.02453613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[30 66]
[31 65]
[32 64]
[33 63]
[35 62]
[36 61]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
