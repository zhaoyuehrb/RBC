%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCUCCCCCUCCCCCUCCCCCUCUUUCUUCUCCUCCCUCGUCGCCGCCGCCGCCGCCGCCGCCUCAGCCUUCGCCUCAGCCGCCGCCCGCUCCCGCCCGCGCGCGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[-33.07968140 123.71388245]
[-47.97031403 125.52193451]
[-62.86095047 127.32998657]
[-77.75157928 129.13803101]
[-92.64221191 130.94609070]
[-105.40914154 140.29040527]
[-118.97624207 134.14361572]
[-133.86688232 135.95166016]
[-134.46966553 150.97274780]
[-137.47433472 165.70257568]
[-142.80303955 179.75964355]
[-150.31777954 192.77981567]
[-159.82389832 204.42584229]
[-171.07516479 214.39605713]
[-183.78013611 222.43223572]
[-197.60971069 228.32618713]
[-212.20570374 231.92526245]
[-227.19001770 233.13621521]
[-242.17453003 231.92771912]
[-256.77111816 228.33103943]
[-270.60168457 222.43936157]
[-283.30795288 214.40528870]
[-294.56085205 204.43692017]
[-304.06887817 192.79244995]
[-311.58578491 179.77351379]
[-316.91680908 165.71733093]
[-319.92388916 150.98799133]
[-320.52914429 135.96701050]
[-318.71688843 121.04347229]
[-314.53405762 106.60394287]
[-308.08901978 93.02242279]
[-299.54870605 80.65071869]
[-289.13430786 69.80928040]
[-277.11563110 60.77893829]
[-263.80392456 53.79358673]
[-249.54405212 49.03417206]
[-234.70535278 46.62397003]
[-219.67218018 46.62541199]
[-204.83393860 49.03845978]
[-190.57498169 53.80060959]
[-177.26463318 60.78851318]
[-165.24766541 69.82116699]
[-154.83535767 80.66459656]
[-146.29740906 93.03794098]
[-139.85498047 106.62069702]
[-135.67492676 121.06103516]
[-120.78429413 119.25298309]
[-109.08245087 110.03799438]
[-94.45026398 116.05545044]
[-79.55963135 114.24739838]
[-64.66899872 112.43935394]
[-49.77836609 110.63130188]
[-34.88773346 108.82324982]
[-25.93271637 96.97659302]
[-10.85725307 94.93085480]
[1.50789237 104.40402222]
[16.39852524 102.59597015]
[31.28915787 100.78791809]
[46.17979050 98.97987366]
[61.07042313 97.17182159]
[75.96105957 95.36376953]
[90.85169220 93.55571747]
[105.71670532 91.54792023]
[120.55342865 89.34074402]
[135.39015198 87.13356018]
[149.45680237 75.34470367]
[165.52439880 82.26116180]
[180.29650879 79.65644073]
[187.16741943 65.86888123]
[200.68144226 58.85285568]
[215.55947876 61.11295700]
[226.12728882 71.57524109]
[240.89941406 68.97052002]
[255.67152405 66.36579132]
[261.12588501 50.82263947]
[273.57824707 40.18265152]
[289.59817505 37.25350189]
[304.83404541 42.73545456]
[315.19500732 55.05685425]
[329.89187622 52.05646896]
[337.18469238 38.22357941]
[351.68237305 32.36260223]
[366.53955078 37.24091339]
[374.74114990 50.55511856]
[372.41458130 66.01866150]
[360.65841675 76.33012390]
[345.02352905 76.62075806]
[332.89224243 66.75332642]
[318.19540405 69.75371552]
[314.70391846 83.02893829]
[305.76910400 93.53699493]
[293.10656738 99.17145538]
[279.18637085 98.77029419]
[266.75128174 92.35505676]
[258.27624512 81.13790894]
[243.50413513 83.74263000]
[228.73200989 86.34735870]
[222.37982178 99.79309082]
[209.17204285 107.00547791]
[194.07339478 105.03463745]
[182.90124512 94.42855835]
[168.12911987 97.03327942]
[160.86911011 106.81097412]
[148.48727417 109.03991699]
[137.59733582 101.97028351]
[122.76061249 104.17746735]
[107.92388916 106.38464355]
[100.94483185 110.64125061]
[92.65974426 108.44635010]
[77.76911163 110.25440216]
[62.87847519 112.06245422]
[47.98784256 113.87050629]
[33.09720993 115.67855835]
[18.20657539 117.48660278]
[3.31594253 119.29465485]
[-6.42281580 131.45172119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[7 47]
[8 46]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
[63 107]
[64 106]
[65 105]
[67 102]
[68 101]
[72 97]
[73 96]
[74 95]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
