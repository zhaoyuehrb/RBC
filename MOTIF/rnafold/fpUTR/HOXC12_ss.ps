%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAACUAUGUUUAAUGUCAGAUAGCAAUAAAGUAGAAGCUGCCGGUCGGGCCCCGCGGAA\
) } def
/len { sequence length } bind def

/coor [
[94.06335449 133.83966064]
[84.32621765 130.57284546]
[75.98977661 124.57387543]
[69.79901886 116.37885284]
[66.30718231 106.72013092]
[65.82631683 96.46086121]
[68.39939880 86.51786804]
[56.22032547 77.76171875]
[44.04125595 69.00556183]
[31.86218643 60.24940491]
[22.70013046 57.63446426]
[19.30900574 50.74074173]
[7.58153391 41.38839340]
[-4.14593840 32.03604889]
[-15.87341022 22.68370056]
[-31.48694801 20.12869835]
[-36.61340332 6.14411020]
[-48.34087372 -3.20823693]
[-60.06834793 -12.56058407]
[-75.74322510 -10.54223061]
[-88.20300293 -20.26485443]
[-90.05551910 -35.96019745]
[-80.20170593 -48.31648636]
[-64.48765564 -50.00296021]
[-52.23624039 -40.01905823]
[-50.71599960 -24.28805542]
[-38.98852539 -14.93570900]
[-27.26105499 -5.58336210]
[-12.48634529 -3.69730282]
[-6.52106380 10.95622921]
[5.20640850 20.30857658]
[16.93388176 29.66092300]
[28.66135406 39.01327133]
[40.61833954 48.07033539]
[52.79740906 56.82649231]
[64.97647858 65.58264923]
[77.15554810 74.33879852]
[95.65423584 65.91950226]
[115.67378235 69.42716217]
[130.20806885 83.63421631]
[134.17060852 103.56871033]
[148.38951111 108.34601593]
[162.60842896 113.12331390]
[176.82733154 117.90061188]
[192.37312317 114.96138763]
[201.97341919 126.34925079]
[216.19233704 131.12655640]
[230.23158264 123.86879730]
[245.26528931 128.74357605]
[252.37420654 142.85877991]
[247.34074402 157.84008789]
[233.15118408 164.79937744]
[218.22390747 159.60781860]
[211.41503906 145.34545898]
[197.19612122 140.56816101]
[182.66737366 143.84909058]
[172.05003357 132.11952209]
[157.83113098 127.34222412]
[143.61221313 122.56492615]
[129.39331055 117.78762054]
[122.82222748 125.68096161]
[114.21163940 131.27931213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 37]
[8 36]
[9 35]
[10 34]
[12 33]
[13 32]
[14 31]
[15 30]
[17 28]
[18 27]
[19 26]
[41 60]
[42 59]
[43 58]
[44 57]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
