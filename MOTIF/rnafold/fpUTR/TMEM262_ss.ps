%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACUCUGCUGCUUUUCCUGGGCAGGGCCUGCUUGCUCCAGCUCUCAAGUCUGACUUGCAUCUACACUGCGGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[98.49429321 116.23195648]
[87.92407990 110.95060730]
[73.42240906 114.78485107]
[62.05848312 125.79266357]
[47.77624893 121.56571198]
[33.27457809 125.39996338]
[18.77290344 129.23420715]
[4.27123022 133.06846619]
[-10.23044300 136.90270996]
[-24.73211670 140.73695374]
[-39.23379135 144.57121277]
[-43.18061829 159.41432190]
[-54.03158951 170.28410339]
[-68.86785126 174.25660706]
[-83.69852448 170.26327515]
[-94.53423309 159.37828064]
[-98.46022034 144.52964783]
[-94.42041779 129.71156311]
[-83.50151825 118.91002655]
[-68.64064026 115.03060150]
[-53.83529282 119.11682892]
[-43.06803894 130.06953430]
[-28.56636620 126.23528290]
[-14.06469250 122.40103149]
[0.43698058 118.56678772]
[14.93865395 114.73253632]
[29.44032669 110.89828491]
[43.94200134 107.06403351]
[54.26866913 96.33048248]
[69.58815765 100.28318024]
[84.08982849 96.44892883]
[95.52050781 84.32588959]
[111.63101959 88.57795715]
[125.96878815 84.17020416]
[140.30656433 79.76245117]
[154.64433289 75.35469055]
[168.98210144 70.94693756]
[183.31987000 66.53918457]
[197.65765381 62.13143158]
[211.90495300 57.43948364]
[226.05615234 52.46519470]
[240.20735168 47.49090576]
[242.65753174 28.80732918]
[253.93486023 13.80823708]
[271.06039429 6.32821226]
[289.57266235 8.23231888]
[304.68997192 18.95171738]
[317.87460327 11.79870415]
[331.05923462 4.64569139]
[344.24386597 -2.50732088]
[357.42846680 -9.66033363]
[368.46737671 -22.52808380]
[383.88812256 -15.48273373]
[381.38699341 1.28570950]
[364.58148193 3.52429438]
[351.39688110 10.67730713]
[338.21224976 17.83032036]
[325.02761841 24.98333168]
[311.84298706 32.13634491]
[313.42077637 43.66566467]
[311.27450562 55.13047028]
[305.60668945 65.35587311]
[296.98153687 73.28849030]
[286.26895142 78.10497284]
[274.55679321 79.29739380]
[263.04025269 76.72683716]
[252.90016174 70.63925171]
[245.18164062 61.64210510]
[231.03044128 66.61639404]
[216.87924194 71.59068298]
[211.46823120 76.92384338]
[202.06539917 76.46920013]
[187.72763062 80.87696075]
[173.38986206 85.28471375]
[159.05207825 89.69246674]
[144.71430969 94.10021973]
[130.37654114 98.50797272]
[116.03877258 102.91572571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 70]
[41 69]
[42 68]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
