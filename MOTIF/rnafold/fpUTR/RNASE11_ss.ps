%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAUCUCUUCUCUCAAUGGCAUUGGAGCUGGCUGUGCCUGAGGCAGACCUGGACCGUGGACAUGGGGCAAUGCCUUGAGCGGAAGGGGAAGCCACUGAAUUUUGGGUGUCACCAGGUAAACAGAGCCCUCAGCAUCUGAAUAGAAACUGAACAGGAACAGAAGAGAUUACACUACAUCUGAG\
) } def
/len { sequence length } bind def

/coor [
[104.40314484 346.00253296]
[110.88037872 332.33139038]
[121.26669312 321.33230591]
[134.54454041 314.08288574]
[131.75883484 299.34381104]
[128.97314453 284.60476685]
[126.18744659 269.86569214]
[123.40175629 255.12664795]
[120.61605835 240.38758850]
[117.83036804 225.64852905]
[115.04467010 210.90945435]
[112.25897980 196.17039490]
[109.47328186 181.43133545]
[97.32768250 168.77787781]
[103.52678680 151.44976807]
[100.49121094 136.76013184]
[82.45142365 128.88050842]
[72.45403290 113.83396149]
[72.26758575 97.38674164]
[80.23892212 84.87362671]
[71.62948608 72.59040070]
[63.02004242 60.30718231]
[48.76332474 53.44740295]
[47.79427719 38.58435440]
[39.18483353 26.30113220]
[30.57539368 14.01791096]
[12.46426105 14.26130581]
[-2.05074978 3.69128060]
[-7.28572989 -13.32030010]
[-1.33059847 -29.92669868]
[-10.35217190 -41.91048813]
[-19.37374496 -53.89427948]
[-28.39531898 -65.87806702]
[-36.07511139 -70.86672974]
[-37.46628189 -78.14282227]
[-46.28306198 -90.27807617]
[-55.20255661 -102.33802795]
[-64.22412872 -114.32182312]
[-73.24570465 -126.30561066]
[-82.26728058 -138.28939819]
[-91.28884888 -150.27319336]
[-100.31042480 -162.25697327]
[-109.33200073 -174.24076843]
[-119.14615631 -185.58459473]
[-129.70764160 -196.23612976]
[-140.26910400 -206.88766479]
[-155.51374817 -204.67245483]
[-168.98223877 -211.77551270]
[-175.60725403 -225.28747559]
[-173.03630066 -239.93424988]
[-183.59777832 -250.58578491]
[-194.15925598 -261.23733521]
[-207.55909729 -259.74478149]
[-219.19851685 -266.15524292]
[-224.92913818 -277.92779541]
[-222.85690308 -290.65875244]
[-233.23599243 -301.48809814]
[-243.61506653 -312.31744385]
[-253.99415588 -323.14678955]
[-263.38830566 -320.52374268]
[-273.03353882 -321.50958252]
[-281.59967041 -325.92565918]
[-287.92098999 -333.12338257]
[-291.15475464 -342.07888794]
[-290.89337158 -351.53875732]
[-287.21542358 -360.19528198]
[-296.83554077 -371.70413208]
[-306.45565796 -383.21295166]
[-316.07577515 -394.72180176]
[-325.69589233 -406.23065186]
[-340.49325562 -414.50555420]
[-336.63806152 -431.01535034]
[-319.70623779 -431.88119507]
[-314.18704224 -415.85076904]
[-304.56692505 -404.34191895]
[-294.94680786 -392.83306885]
[-285.32669067 -381.32424927]
[-275.70657349 -369.81539917]
[-255.28587341 -369.74929810]
[-241.32145691 -354.45089722]
[-243.16481018 -333.52584839]
[-232.78573608 -322.69650269]
[-222.40664673 -311.86718750]
[-212.02757263 -301.03784180]
[-195.22409058 -301.40621948]
[-183.10694885 -289.27670288]
[-183.50772095 -271.79879761]
[-172.94624329 -261.14727783]
[-162.38476562 -250.49572754]
[-147.71667480 -252.94223022]
[-134.26145935 -246.20272827]
[-127.27301025 -232.67442322]
[-129.61756897 -217.44914246]
[-119.05609894 -206.79760742]
[-108.49462128 -196.14607239]
[-109.24274445 -211.12739563]
[-101.15251160 -223.75863647]
[-87.23130798 -229.34434509]
[-72.65409088 -225.80815125]
[-62.83965683 -214.46456909]
[-61.43634796 -199.53034973]
[-68.96581268 -186.55702209]
[-82.62911224 -180.36718750]
[-97.34821320 -183.26234436]
[-88.32663727 -171.27854919]
[-79.30506134 -159.29476929]
[-70.28349304 -147.31097412]
[-61.26191711 -135.32717896]
[-52.24034119 -123.34339142]
[-43.21876907 -111.35960388]
[-36.66897964 -107.89880371]
[-34.14780426 -99.09485626]
[-25.33102608 -86.95959473]
[-16.41152954 -74.89964294]
[-7.38995600 -62.91585159]
[1.63161755 -50.93206406]
[10.65319061 -38.94827271]
[22.65242958 -40.95261383]
[34.43241119 -37.63680267]
[43.73352814 -29.57294464]
[48.74451828 -18.24991798]
[48.45501328 -5.79873419]
[42.85861588 5.40846968]
[51.46805573 17.69169044]
[60.07749939 29.97491074]
[73.71840668 35.95611572]
[75.30326080 51.69774246]
[83.91270447 63.98096085]
[92.52214813 76.26418304]
[117.00305176 74.28900146]
[136.59053040 96.43886566]
[151.52514648 97.83780670]
[166.45977783 99.23675537]
[181.39439392 100.63569641]
[193.49505615 90.82693481]
[208.62095642 92.45841980]
[217.89753723 104.05499268]
[232.83216858 105.45394135]
[247.76678467 106.85288239]
[262.43789673 99.52551270]
[275.96810913 108.79190063]
[274.43865967 125.11956787]
[259.42294312 131.71202087]
[246.36784363 121.78750610]
[231.43322754 120.38855743]
[216.49859619 118.98961639]
[205.22975159 128.66168213]
[190.06399536 127.45569611]
[179.99545288 115.57032013]
[165.06083679 114.17137909]
[150.12620544 112.77243042]
[135.19158936 111.37348938]
[130.18890381 116.96125793]
[141.36428833 126.96679688]
[131.35856628 138.14202881]
[120.18353271 128.13679504]
[115.18084717 133.72456360]
[118.21642303 148.41418457]
[128.55541992 156.15069580]
[130.77163696 168.46484375]
[124.21234131 178.64564514]
[126.99803925 193.38470459]
[129.78373718 208.12376404]
[132.56942749 222.86282349]
[135.35511780 237.60188293]
[138.14080811 252.34094238]
[140.92651367 267.08001709]
[143.71220398 281.81906128]
[146.49789429 296.55813599]
[149.28359985 311.29718018]
[164.29133606 313.20062256]
[177.97547913 319.65036011]
[188.99542236 330.01452637]
[196.27151489 343.27777100]
[199.09092712 358.14068604]
[197.17745972 373.14715576]
[190.71855164 386.82696533]
[180.34698486 397.83996582]
[167.07887268 405.10717773]
[152.21406555 407.91662598]
[137.20889282 405.99310303]
[123.53340149 399.52502441]
[112.52736664 389.14608765]
[105.26905823 375.87310791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 170]
[5 169]
[6 168]
[7 167]
[8 166]
[9 165]
[10 164]
[11 163]
[12 162]
[13 161]
[15 158]
[16 157]
[20 129]
[21 128]
[22 127]
[24 125]
[25 124]
[26 123]
[30 117]
[31 116]
[32 115]
[33 114]
[35 113]
[36 112]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[42 105]
[43 104]
[44 95]
[45 94]
[46 93]
[50 89]
[51 88]
[52 87]
[56 84]
[57 83]
[58 82]
[59 81]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[131 152]
[132 151]
[133 150]
[134 149]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
