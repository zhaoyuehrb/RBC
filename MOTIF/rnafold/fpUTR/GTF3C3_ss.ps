%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUGAGUGCUGCAGCUGCGGCGCAGACCGGGCGAGUUUCCCAGAAGGACGCCGGUUCCUUGCUCUUGCUGGCCCCGGCGAGGUAGCUUCUGGAAGGCGCUGCUCUUCCGGUUCUCUGUCCCGGUUCCUGGGGUUGCACAGACAGACCCUGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[147.91282654 710.76684570]
[152.46116638 696.28662109]
[161.93629456 684.42968750]
[175.05674744 676.79962158]
[172.68078613 661.98901367]
[170.30480957 647.17834473]
[158.12448120 638.68273926]
[155.50392151 623.69653320]
[164.49748230 610.97827148]
[162.12150574 596.16766357]
[157.93397522 590.02789307]
[159.84858704 581.03918457]
[157.76754761 566.18426514]
[155.68652344 551.32928467]
[153.60548401 536.47436523]
[151.52444458 521.61944580]
[149.44342041 506.76449585]
[147.36238098 491.90954590]
[137.93418884 480.37878418]
[143.68208313 465.63864136]
[141.60105896 450.78369141]
[139.52001953 435.92874146]
[131.57418823 431.75854492]
[126.38578796 424.26821899]
[125.24066162 415.08944702]
[128.52626038 406.29513550]
[135.61473083 399.93106079]
[134.42298889 384.97848511]
[133.23123169 370.02590942]
[132.03947449 355.07330322]
[130.84773254 340.12072754]
[129.65597534 325.16815186]
[128.46421814 310.21557617]
[116.99737549 300.77908325]
[115.57575989 285.63201904]
[125.55134583 273.66851807]
[124.35959625 258.71594238]
[110.85097504 252.44036865]
[102.24000549 240.16409302]
[100.92126465 225.12655640]
[107.34867859 211.35755920]
[119.88681793 202.59729004]
[118.69506836 187.64471436]
[109.97103882 175.57240295]
[116.58745575 161.20112610]
[115.39570618 146.24855042]
[114.20394897 131.29595947]
[113.01219940 116.34337616]
[94.75905609 118.79602051]
[82.99261475 106.29582214]
[86.07352448 90.67966461]
[78.65978241 77.63985443]
[71.24604797 64.60005188]
[63.83230972 51.56024933]
[56.41857147 38.52044678]
[49.00483322 25.48064232]
[34.03144073 21.18701363]
[26.69861221 7.85718727]
[30.88420486 -6.39119530]
[23.47046661 -19.43099976]
[11.23259830 -23.61648941]
[5.33599710 -34.67486572]
[8.47325134 -46.39288712]
[1.32023871 -59.57751846]
[-12.93475056 -67.68475342]
[-12.77058125 -84.08308411]
[1.64386249 -91.90330505]
[15.48023701 -83.10064697]
[14.50486660 -66.73052979]
[21.65787888 -53.54590225]
[37.08219147 -45.22475052]
[36.51027298 -26.84473610]
[43.92400742 -13.80493259]
[58.30861282 -10.11457539]
[66.01295471 3.00402856]
[62.04463577 18.06690407]
[69.45837402 31.10670853]
[76.87211609 44.14651108]
[84.28585052 57.18631744]
[91.69958496 70.22612000]
[99.11332703 83.26592255]
[110.12988281 84.13386536]
[119.38947296 92.22364044]
[127.81578827 79.81407928]
[136.24209595 67.40451813]
[144.66842651 54.99495697]
[153.09474182 42.58539581]
[161.52105713 30.17583466]
[162.87225342 14.41243362]
[176.42295837 8.22957325]
[184.84927368 -4.17998743]
[193.27558899 -16.58954811]
[197.17114258 -33.08988571]
[214.10502625 -33.91432953]
[219.58502197 -17.87045097]
[205.68515015 -8.16323090]
[197.25883484 4.24632931]
[188.83251953 16.65588951]
[188.08401489 31.53167534]
[173.93061829 38.60214996]
[165.50430298 51.01171112]
[157.07797241 63.42127228]
[148.65165710 75.83083344]
[140.22534180 88.24039459]
[131.79902649 100.64995575]
[127.96478271 115.15162659]
[129.15653992 130.10420227]
[130.34828186 145.05679321]
[131.54003906 160.00936890]
[140.34930420 173.15119934]
[133.64764404 186.45295715]
[134.83940125 201.40554810]
[148.60685730 208.06919861]
[157.13410950 220.64627075]
[158.21394348 235.70285034]
[151.65621948 249.18811035]
[139.31217957 257.52420044]
[140.50392151 272.47677612]
[152.24856567 282.70913696]
[153.24417114 297.89013672]
[143.41680908 309.02380371]
[144.60855103 323.97640991]
[145.80030823 338.92898560]
[146.99206543 353.88156128]
[148.18382263 368.83413696]
[149.37556458 383.78671265]
[150.56732178 398.73931885]
[163.82299805 415.53137207]
[154.37495422 433.84771729]
[156.45599365 448.70266724]
[158.53703308 463.55758667]
[168.11407471 476.15087891]
[162.21733093 489.82852173]
[164.29835510 504.68344116]
[166.37939453 519.53839111]
[168.46041870 534.39331055]
[170.54145813 549.24829102]
[172.62249756 564.10321045]
[174.70352173 578.95819092]
[176.93212891 593.79168701]
[179.30810547 608.60229492]
[191.82858276 617.86920166]
[194.02717590 632.92315674]
[185.11544800 644.80236816]
[187.49140930 659.61303711]
[189.86738586 674.42364502]
[204.71612549 677.56677246]
[217.42459106 685.86492920]
[226.27406311 698.19586182]
[230.06771851 712.89184570]
[228.29251099 727.96545410]
[221.18852234 741.37805176]
[209.71649170 751.31567383]
[195.42793274 756.43444824]
[180.25524902 756.04199219]
[166.25041199 750.19140625]
[155.30747986 739.67395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 146]
[5 145]
[6 144]
[9 141]
[10 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[20 131]
[21 130]
[22 129]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[36 118]
[37 117]
[42 112]
[43 111]
[45 109]
[46 108]
[47 107]
[48 106]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[59 73]
[60 72]
[63 70]
[64 69]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
