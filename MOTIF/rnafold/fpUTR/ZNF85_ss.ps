%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGUCUCUCGCUGCAGCCUGAGCUCUAGGUCUUGUUUUCCCUGCUUUGUGUUUUCUGCUCGUGGACGCCCAGCCUCUGUGGCCCUGUGGCCUGCAGGUAUUGGGAGAUCCACAGCUAAGACGCCGGGACCCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[48.08680725 234.69964600]
[46.17696762 240.81465149]
[42.62779617 246.09913635]
[37.75225067 250.12854004]
[31.96862221 252.58717346]
[25.76469040 253.29278564]
[19.65660667 252.20989990]
[10.53564262 264.11822510]
[1.41467929 276.02651978]
[3.29407787 291.48956299]
[-6.12551451 303.43637085]
[-20.87874222 305.13278198]
[-29.99970627 317.04110718]
[-31.58826447 333.36312866]
[-46.62775421 339.90115356]
[-59.64683914 329.92941284]
[-57.25259781 313.70599365]
[-41.90802383 307.92013550]
[-32.78705978 296.01184082]
[-34.99266052 281.32608032]
[-25.91234589 269.11944580]
[-10.49363804 266.90557861]
[-1.37267506 254.99725342]
[7.74828815 243.08892822]
[7.56430244 219.34028625]
[29.81105614 209.21926880]
[37.08166504 196.09912109]
[44.35227203 182.97897339]
[51.62287903 169.85882568]
[58.89348602 156.73867798]
[66.16409302 143.61853027]
[66.65854645 136.19320679]
[73.72881317 130.30076599]
[81.27441406 117.33682251]
[88.82002258 104.37287903]
[76.07350922 112.28025055]
[61.30190277 114.88784027]
[46.61843109 111.82260132]
[34.12373734 103.52304840]
[25.60532188 91.17652893]
[22.28184319 76.54933929]
[24.62876320 61.73408127]
[32.31032562 48.85023117]
[44.22759628 39.74097061]
[58.67567825 35.70948029]
[73.58761597 37.33251190]
[86.83007812 44.37787628]
[96.50859070 55.83764648]
[101.23853302 70.07238007]
[100.34279633 85.04735565]
[108.16004181 72.24537659]
[115.97727966 59.44339752]
[123.79452515 46.64141846]
[131.61177063 33.83943939]
[139.42901611 21.03745842]
[147.24626160 8.23547745]
[144.98077393 -4.50708723]
[151.80995178 -15.02517128]
[163.59217834 -17.94626617]
[171.67759705 -30.58058929]
[179.76300049 -43.21491241]
[181.77497864 -52.19608307]
[188.15443420 -56.02787018]
[196.50440979 -68.48892212]
[204.85438538 -80.94997406]
[213.20437622 -93.41102600]
[221.55435181 -105.87207794]
[217.83880615 -122.93316650]
[227.39566040 -137.14237976]
[243.93469238 -140.01844788]
[252.02011108 -152.65277100]
[260.10552979 -165.28709412]
[268.19091797 -177.92141724]
[276.27633667 -190.55575562]
[273.10104370 -205.80551147]
[281.48077393 -218.50332642]
[296.03866577 -221.43650818]
[304.12408447 -234.07083130]
[312.20947266 -246.70515442]
[320.29489136 -259.33947754]
[328.38031006 -271.97381592]
[336.33206177 -284.69265747]
[344.14932251 -297.49465942]
[351.96655273 -310.29663086]
[359.78381348 -323.09860229]
[359.64602661 -339.49719238]
[373.91403198 -347.58148193]
[387.91012573 -339.03506470]
[387.23632812 -322.64974976]
[372.58578491 -315.28137207]
[364.76855469 -302.47937012]
[356.95129395 -289.67739868]
[349.13406372 -276.87542725]
[348.32699585 -269.47753906]
[341.01461792 -263.88839722]
[332.92922974 -251.25407410]
[324.84381104 -238.61975098]
[316.75839233 -225.98542786]
[308.67297363 -213.35110474]
[312.10784912 -198.90335083]
[304.08807373 -185.97517395]
[288.91067505 -182.47033691]
[280.82525635 -169.83601379]
[272.73983765 -157.20169067]
[264.65441895 -144.56736755]
[256.56903076 -131.93304443]
[261.07073975 -119.81787872]
[257.70196533 -107.13826752]
[247.48144531 -98.60498047]
[234.01541138 -97.52209473]
[225.66542053 -85.06104279]
[217.31544495 -72.59999084]
[208.96546936 -60.13893890]
[200.61547852 -47.67788696]
[192.39732361 -35.12950516]
[184.31192017 -22.49518013]
[176.22650146 -9.86085510]
[176.40252686 7.65836716]
[160.04823303 16.05272102]
[152.23098755 28.85470200]
[144.41375732 41.65668106]
[136.59651184 54.45866394]
[128.77926636 67.26064301]
[120.96202087 80.06262207]
[113.14477539 92.86460114]
[114.56584167 107.79713440]
[124.65752411 118.89479828]
[134.74920654 129.99244690]
[144.84088135 141.09011841]
[160.61830139 145.56280518]
[164.37066650 161.52688599]
[152.23785400 172.55987549]
[136.70106506 167.31198120]
[133.74322510 151.18179321]
[123.65154266 140.08413696]
[113.55986786 128.98648071]
[103.46818542 117.88881683]
[102.56140900 114.91828918]
[101.78396606 111.91847992]
[94.23835754 124.88242340]
[86.69275665 137.84637451]
[79.28424072 150.88914490]
[72.01363373 164.00929260]
[64.74302673 177.12944031]
[57.47241974 190.24958801]
[50.20181274 203.36973572]
[42.93120193 216.48988342]
[46.41751480 222.00907898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[12 19]
[13 18]
[26 147]
[27 146]
[28 145]
[29 144]
[30 143]
[31 142]
[33 141]
[34 140]
[35 139]
[50 125]
[51 124]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[59 117]
[60 116]
[61 115]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[82 93]
[83 92]
[84 91]
[85 90]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
