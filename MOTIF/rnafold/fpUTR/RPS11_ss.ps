%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUUACGUCACUUCCUCUCCAGCCCCUGCGUAAUCGAUAAGGAAACCCGGACGCUGCUGCCCCUUUCUUUUUUUCAGGCGGCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[85.73690796 121.23301697]
[78.83429718 114.36280060]
[74.99993134 105.41049957]
[60.05338669 104.14523315]
[45.10684586 102.87996674]
[30.16030502 101.61470032]
[15.21376324 100.34943390]
[0.26722187 99.08416748]
[-14.69855690 98.07152557]
[-29.67930412 97.31178284]
[-33.65174484 111.83879089]
[-40.65458679 125.17198944]
[-50.36029816 136.68777466]
[-62.31492615 145.84751892]
[-75.95932770 152.22282410]
[-90.65532684 155.51548767]
[-105.71556854 155.57150269]
[-120.43566132 152.38827515]
[-134.12710571 146.11465454]
[-146.14955139 137.04411316]
[-155.94067383 125.60085297]
[-163.04252625 112.32012177]
[-167.12292480 97.82307434]
[-167.99105835 82.78777313]
[-165.60629272 67.91743469]
[-160.08016968 53.90757370]
[-151.67117310 41.41346359]
[-140.77259827 31.01947212]
[-127.89418030 23.21174431]
[-113.63828278 18.35546494]
[-98.67167664 16.67776871]
[-83.69436646 18.25712395]
[-69.40688324 23.01966476]
[-56.47746658 30.74263382]
[-45.51085281 41.06481552]
[-37.01996994 53.50342560]
[-31.40195465 67.47668457]
[-28.91956711 82.33103943]
[-13.93881989 83.09077454]
[-6.95615053 80.22643280]
[1.53248787 84.13762665]
[16.47902870 85.40289307]
[31.42557144 86.66815948]
[46.37211227 87.93342590]
[61.31865311 89.19869232]
[76.26519775 90.46395874]
[90.39378357 76.29351044]
[110.40139771 76.63147736]
[124.04333496 91.27101898]
[139.02407837 90.51128387]
[154.00483704 89.75154877]
[168.98558044 88.99180603]
[183.96632385 88.23207092]
[197.35690308 79.80573273]
[210.45971680 86.88848114]
[225.44047546 86.12873840]
[240.42121887 85.36900330]
[255.40196228 84.60926819]
[258.72161865 69.88233948]
[265.89248657 56.59770966]
[276.38241577 45.74118423]
[289.41296387 38.11839294]
[304.01724243 34.29499054]
[319.11145020 34.55470657]
[333.57550049 38.87826538]
[346.33612061 46.94482803]
[356.44635010 58.15580750]
[363.15594482 71.67926788]
[365.96697998 86.51168060]
[364.67092896 101.55238342]
[359.36389160 115.68525696]
[350.43975830 127.86154938]
[338.56069946 137.17768860]
[324.60824585 142.94238281]
[309.61773682 144.72781372]
[294.70162964 142.40151978]
[280.96673584 136.13612366]
[269.43228149 126.39654541]
[260.95422363 113.90553284]
[256.16171265 99.59001160]
[241.18095398 100.34975433]
[226.20021057 101.10948944]
[211.21946716 101.86922455]
[198.90040588 110.24121857]
[184.72605896 103.21282196]
[169.74531555 103.97255707]
[154.76457214 104.73229218]
[139.78381348 105.49203491]
[124.80307007 106.25177002]
[120.66854095 115.06945801]
[113.53783417 121.70262909]
[104.44464111 125.18972778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 39]
[10 38]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[55 83]
[56 82]
[57 81]
[58 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
