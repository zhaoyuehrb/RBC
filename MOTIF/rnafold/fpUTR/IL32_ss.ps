%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGUGCAGAAGGUGACUGUCUCAGUGGAGCUGGGUCAUCUCAGGCCUUGGCUCCUUGAACUUUUGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[76.84651947 305.19723511]
[63.06210327 296.98934937]
[61.02769852 281.07580566]
[72.30391693 269.66412354]
[73.55908966 254.71673584]
[74.81425476 239.76934814]
[72.15708923 232.63265991]
[76.44785309 224.22668457]
[78.32785034 209.34497070]
[72.24671173 195.74830627]
[81.65262604 183.02670288]
[83.53262329 168.14497375]
[85.41262054 153.26325989]
[87.29261780 138.38153076]
[89.17261505 123.49981689]
[91.05261230 108.61809540]
[78.02802277 116.05852509]
[63.20986176 113.72995758]
[53.09508514 102.65335083]
[52.11845398 87.68518066]
[60.70817184 75.38815308]
[75.09812164 71.15384674]
[88.97910309 76.83876038]
[96.26495361 89.94960785]
[102.36599731 76.24642181]
[108.46704865 62.54324341]
[114.56809998 48.84006119]
[115.25245667 39.42716599]
[121.22229767 34.69917679]
[127.89182281 21.26350021]
[134.56135559 7.82782459]
[141.23088074 -5.60785198]
[147.90040588 -19.04352760]
[154.56993103 -32.47920609]
[161.23945618 -45.91488266]
[167.62614441 -59.48728561]
[173.72720337 -73.19046783]
[179.82824707 -86.89365387]
[185.92930603 -100.59683228]
[180.03227234 -115.25973511]
[186.30744934 -129.76483154]
[201.03187561 -135.50650024]
[215.46981812 -129.07830811]
[221.05549622 -114.29399872]
[214.47502136 -99.92483521]
[199.63247681 -94.49578094]
[193.53143311 -80.79260254]
[187.43038940 -67.08941650]
[181.32933044 -53.38623810]
[181.49166870 -45.77266312]
[174.67514038 -39.24535370]
[168.00561523 -25.80967712]
[161.33607483 -12.37400055]
[154.66654968 1.06167567]
[147.99702454 14.49735165]
[141.32749939 27.93302917]
[134.65797424 41.36870575]
[128.27128601 54.94111252]
[122.17023468 68.64429474]
[116.06918335 82.34747314]
[109.96813202 96.05065918]
[105.93433380 110.49809265]
[104.05433655 125.37981415]
[102.17433929 140.26153564]
[100.29434204 155.14324951]
[98.41434479 170.02497864]
[96.53433990 184.90669250]
[102.48101044 199.56779480]
[93.20957184 211.22496033]
[91.32957458 226.10668945]
[89.76165009 241.02452087]
[88.50647736 255.97190857]
[87.25131226 270.91931152]
[96.46650696 284.05169678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[8 70]
[9 69]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
