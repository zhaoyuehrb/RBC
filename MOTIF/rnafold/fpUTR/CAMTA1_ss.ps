%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCUCCUCCCGGAGAGUAGUGAGACCCCUGGUGCGGGGCGAUUGGCGGCGGGAGCGAUGAGUGGCAGCCGCACGGCCCAACGGGAGCUGUGCGUGGGCCGCGGGGCGGGGCCAGGGCGGGUGCGCGGCGGCGGCGGGGUGGCUGGGCCGGCGGCGGCGGCGGUACGAGGCGCGCGCUCGGGGUCCCGGUCGCGAGGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[63.36236572 312.56417847]
[53.28551865 300.88253784]
[51.14653778 285.60418701]
[57.62796021 271.60437012]
[70.66159058 263.35040283]
[70.66159058 248.35040283]
[70.66159058 233.35040283]
[70.66159058 218.35040283]
[70.66159058 203.35040283]
[70.66159058 188.35040283]
[70.66159058 173.35040283]
[70.54830933 158.35083008]
[70.32176208 143.35253906]
[64.21443939 138.99931335]
[57.22268677 152.27017212]
[50.23094177 165.54101562]
[43.23919296 178.81187439]
[36.24744415 192.08271790]
[31.83949471 206.42042542]
[18.79109573 213.81903076]
[4.22427464 210.24024963]
[-3.91016221 197.63742065]
[-1.17230725 182.88940430]
[10.94296169 174.04602051]
[21.20716667 163.10772705]
[31.47137070 152.16944885]
[41.73557663 141.23115540]
[51.99977875 130.29287720]
[45.89245224 125.93965149]
[31.64067078 130.61798096]
[17.38889122 135.29631042]
[3.13711023 139.97462463]
[-7.56151676 151.63009644]
[-22.06711006 148.24822998]
[-36.31889343 152.92655945]
[-50.57067108 157.60488892]
[-61.26929855 169.26036072]
[-75.77489471 165.87849426]
[-90.02667236 170.55682373]
[-100.55383301 183.13104248]
[-116.65811920 180.03523254]
[-121.77281952 164.45410156]
[-110.63637543 152.41616821]
[-94.70500183 156.30503845]
[-80.45322418 151.62670898]
[-70.77397919 140.30587769]
[-55.24900055 143.35310364]
[-40.99721909 138.67478943]
[-26.74543762 133.99645996]
[-17.06619453 122.67561340]
[-1.54121721 125.72285461]
[12.71056366 121.04452515]
[26.96234322 116.36619568]
[41.21412659 111.68786621]
[43.49940872 104.54451752]
[28.74938393 101.81746674]
[13.85338974 103.58080292]
[4.31127310 92.00720978]
[8.88217068 77.72061157]
[23.37025070 73.83531952]
[34.47601700 83.91712952]
[48.06997681 90.25781250]
[50.35525894 83.11446381]
[41.46532440 71.03269196]
[32.57539368 58.95092773]
[23.68545914 46.86915970]
[14.79552746 34.78739166]
[-0.60917050 34.74900055]
[-12.89386654 25.75235367]
[-17.47129440 11.41669369]
[-12.78565979 -2.69652104]
[-21.67559242 -14.77828789]
[-30.56552505 -26.86005592]
[-39.45545959 -38.94182205]
[-48.34539032 -51.02359009]
[-57.23532486 -63.10535431]
[-66.12525940 -75.18712616]
[-75.01519012 -87.26889038]
[-83.99610901 -99.28318024]
[-93.06750488 -111.22930145]
[-108.38789368 -117.07887268]
[-110.71469116 -133.31211853]
[-97.65427399 -143.22966003]
[-82.64208984 -136.62918091]
[-81.12137604 -120.30068970]
[-72.04998779 -108.35456848]
[-65.49976349 -104.92783356]
[-62.93342209 -96.15882111]
[-54.04349136 -84.07705688]
[-45.15355682 -71.99528503]
[-36.26362610 -59.91352081]
[-27.37369156 -47.83175659]
[-18.48375893 -35.74998856]
[-9.59382629 -23.66822052]
[-0.70389307 -11.58645344]
[14.16427803 -11.86120129]
[26.48903275 -3.22613382]
[31.42358398 11.17885208]
[26.87729454 25.89745903]
[35.76722717 37.97922516]
[44.65716171 50.06099319]
[53.54709244 62.14276123]
[62.43702698 74.22452545]
[101.80557251 63.50443649]
[124.12140656 86.74297333]
[138.73808289 83.37361908]
[150.44761658 72.73419189]
[164.58763123 77.41491699]
[179.20431519 74.04555511]
[193.82099915 70.67619324]
[208.43768311 67.30683899]
[223.05436707 63.93747711]
[237.67105103 60.56811523]
[252.28773499 57.19875717]
[265.46276855 44.33563232]
[282.02999878 50.11999512]
[296.59411621 46.53025818]
[311.15826416 42.94052505]
[325.72238159 39.35078812]
[340.28649902 35.76105499]
[351.83401489 24.94598770]
[366.04312134 29.41262054]
[380.60723877 25.82288551]
[395.17138672 22.23315048]
[409.73550415 18.64341545]
[422.71475220 5.58277369]
[439.36746216 11.11625576]
[453.87570190 7.30696535]
[468.35479736 3.38821888]
[482.80383301 -0.63975912]
[494.01943970 -11.79866028]
[508.35696411 -7.76322317]
[522.80603027 -11.79120159]
[534.02160645 -22.95010185]
[548.35913086 -18.91466522]
[562.80816650 -22.94264412]
[567.59655762 -32.71220016]
[576.78277588 -38.12116241]
[587.21002197 -37.59109879]
[595.44622803 -31.53829384]
[610.01037598 -35.12802887]
[621.55786133 -45.94309616]
[635.76696777 -41.47646332]
[650.33111572 -45.06619644]
[664.89520264 -48.65593338]
[679.45935059 -52.24566650]
[693.39123535 -61.90686417]
[706.53161621 -51.19392014]
[699.87493896 -35.60144806]
[683.04907227 -37.68154144]
[668.48492432 -34.09180450]
[653.92083740 -30.50206947]
[639.35668945 -26.91233444]
[628.85089111 -16.35403061]
[613.60009766 -20.56390190]
[599.03594971 -16.97416687]
[586.11059570 -2.59467387]
[566.83618164 -8.49358177]
[552.38708496 -4.46560335]
[542.20501709 6.40518999]
[526.83398438 2.65786076]
[512.38494873 6.68583870]
[502.20285034 17.55663300]
[486.83181763 13.80930328]
[472.38275146 17.83728027]
[466.78244019 22.66267586]
[457.68499756 21.81521416]
[443.17675781 25.62450600]
[436.80596924 35.90921783]
[424.74826050 39.20058441]
[413.32522583 33.20754242]
[398.76110840 36.79727936]
[384.19699097 40.38701248]
[369.63284302 43.97674942]
[359.12707520 54.53505325]
[343.87625122 50.32518005]
[329.31213379 53.91491699]
[314.74798584 57.50465012]
[300.18386841 61.09438705]
[285.61975098 64.68412018]
[279.09436035 74.87144470]
[266.98831177 77.98031616]
[255.65708923 71.81543732]
[241.04040527 75.18479919]
[226.42372131 78.55416107]
[211.80705261 81.92351532]
[197.19036865 85.29287720]
[182.57368469 88.66223907]
[167.95700073 92.03160095]
[157.29295349 102.43003082]
[142.10745239 97.99030304]
[127.49076843 101.35965729]
[120.53076172 130.22705078]
[85.32005310 143.12599182]
[85.54660034 158.12428284]
[88.80589294 166.66001892]
[85.66159058 173.35040283]
[85.66159058 188.35040283]
[85.66159058 203.35040283]
[85.66159058 218.35040283]
[85.66159058 233.35040283]
[85.66159058 248.35040283]
[85.66159058 263.35040283]
[98.69522095 271.60437012]
[105.17664337 285.60418701]
[103.03765869 300.88253784]
[92.96081543 312.56417847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 203]
[6 202]
[7 201]
[8 200]
[9 199]
[10 198]
[11 197]
[12 195]
[13 194]
[29 54]
[30 53]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 86]
[80 85]
[105 192]
[106 191]
[108 189]
[109 188]
[110 187]
[111 186]
[112 185]
[113 184]
[114 183]
[116 180]
[117 179]
[118 178]
[119 177]
[120 176]
[122 174]
[123 173]
[124 172]
[125 171]
[127 168]
[128 167]
[129 165]
[130 164]
[132 162]
[133 161]
[135 159]
[136 158]
[140 156]
[141 155]
[143 153]
[144 152]
[145 151]
[146 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
