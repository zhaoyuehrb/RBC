%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAUUAGUGCGCAUGUGCCGGUCAUCCGGAAGUUACCGCAGUGGCCGCCGGAAUUAGGCGAAAAGCCGGAAGUAAACAUUACGAGAUUGGCUUGGAUUCUGUCGGAUGGACUUGGGGCUAGCUGCGGCGGGGCUGGAGGAGGCCAGAUAACC\
) } def
/len { sequence length } bind def

/coor [
[75.38820648 519.95526123]
[65.05992889 530.83306885]
[51.93174362 538.08911133]
[37.22640610 541.04766846]
[22.31355095 539.43310547]
[8.58215237 533.39587402]
[-2.68886113 523.49816895]
[-10.44971657 510.66192627]
[-13.97757530 496.08267212]
[-12.94368839 481.11758423]
[-21.71151924 493.28826904]
[-30.47934914 505.45892334]
[-39.24718094 517.62957764]
[-40.35641098 533.99121094]
[-55.19770813 540.96740723]
[-68.50360870 531.38177490]
[-66.58615112 515.09509277]
[-51.41784668 508.86175537]
[-42.65001678 496.69110107]
[-33.88218689 484.52041626]
[-25.11435509 472.34976196]
[-24.59635735 463.58413696]
[-17.50168610 456.71484375]
[-13.32842445 442.30706787]
[-9.15516186 427.89929199]
[-4.98190022 413.49151611]
[-6.14840794 406.14965820]
[-0.57681888 398.83721924]
[3.88572693 384.51641846]
[8.34827232 370.19558716]
[-0.68482578 358.38284302]
[-1.03411746 343.33816528]
[7.64387274 330.82635498]
[22.19340706 325.76501465]
[26.65595245 311.44418335]
[31.11849785 297.12338257]
[35.58104324 282.80255127]
[29.91544151 264.35000610]
[44.80931473 250.82168579]
[48.69160080 236.33279419]
[52.57388687 221.84391785]
[56.45617294 207.35502625]
[60.33845901 192.86613464]
[64.22074127 178.37724304]
[67.95693970 163.85000610]
[71.54667664 149.28587341]
[75.13641357 134.72175598]
[78.72615051 120.15762329]
[82.31587982 105.59349823]
[77.56586456 91.36544800]
[65.94679260 81.87876892]
[54.32771301 72.39208984]
[39.00038147 75.49157715]
[25.29144287 67.96834564]
[19.67384338 53.37462616]
[24.80004120 38.60113144]
[38.24959946 30.62345505]
[53.67205429 33.20840836]
[63.78538513 45.13545609]
[63.81439590 60.77301407]
[75.43347168 70.25969696]
[87.05254364 79.74637604]
[94.01018524 76.94616699]
[96.11769867 62.09495544]
[107.92547607 71.34574127]
[114.88312531 68.54553223]
[116.69116974 53.65489960]
[118.49922180 38.76426315]
[120.30727386 23.87363243]
[122.11532593 8.98299885]
[123.92337036 -5.90763426]
[125.73142242 -20.79826736]
[113.48755646 -35.19632339]
[115.56053162 -53.66267395]
[130.18321228 -64.60659790]
[131.39021301 -79.55796051]
[132.59721375 -94.50931549]
[133.80421448 -109.46067810]
[129.05200195 -125.73497772]
[143.37475586 -134.80664062]
[156.05682373 -123.55492401]
[148.75556946 -108.25367737]
[147.54856873 -93.30232239]
[146.34156799 -78.35095978]
[145.13458252 -63.39960098]
[154.28233337 -56.47035599]
[158.97367859 -45.86558914]
[157.92622375 -34.19615555]
[151.28645325 -24.39727020]
[140.62205505 -18.99021721]
[138.81401062 -4.09958410]
[137.00595093 10.79104900]
[135.19790649 25.68168259]
[133.38986206 40.57231522]
[131.58180237 55.46294785]
[129.77375793 70.35358429]
[135.58329773 75.09692383]
[144.30895996 62.89598846]
[150.50666809 49.23625183]
[165.46464539 50.35834503]
[169.55505371 64.78985596]
[157.41137695 73.59378052]
[147.20236206 84.58360291]
[153.01190186 89.32694244]
[167.23994446 84.57691956]
[181.46800232 79.82690430]
[189.89352417 66.17443085]
[205.83734131 64.39273071]
[217.06869507 75.84855652]
[214.97187805 91.75399780]
[201.15536499 99.90774536]
[186.21801758 94.05494690]
[171.98997498 98.80496979]
[157.76191711 103.55499268]
[143.86889648 120.05744934]
[126.99934387 127.58927155]
[111.47300720 126.59888458]
[100.77032471 119.31790161]
[96.88001251 109.18322754]
[93.29027557 123.74736023]
[89.70053864 138.31147766]
[86.11080933 152.87561035]
[82.52107239 167.43974304]
[83.50612640 176.57998657]
[78.70963287 182.25953674]
[74.82734680 196.74842834]
[70.94506073 211.23730469]
[67.06277466 225.72619629]
[63.18048859 240.21508789]
[59.29820251 254.70396423]
[65.30673981 263.85720825]
[65.25405884 274.58596802]
[59.40106583 283.31365967]
[49.90185547 287.26510620]
[45.43931198 301.58590698]
[40.97676468 315.90673828]
[36.51422119 330.22753906]
[45.61307907 342.65802002]
[45.64739609 357.88473511]
[36.81358719 370.06781006]
[22.66908646 374.65814209]
[18.20653915 388.97897339]
[13.74399376 403.29977417]
[9.42587090 417.66479492]
[5.25260925 432.07257080]
[1.07934737 446.48034668]
[-3.09391451 460.88809204]
[8.04809475 450.84542847]
[21.70023155 444.63098145]
[36.59094620 442.82360840]
[51.33333588 445.59164429]
[64.55429840 452.67727661]
[75.02246094 463.42053223]
[81.76280975 476.82083130]
[84.14756775 491.63003540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[12 19]
[13 18]
[23 147]
[24 146]
[25 145]
[26 144]
[28 143]
[29 142]
[30 141]
[34 137]
[35 136]
[36 135]
[37 134]
[39 130]
[40 129]
[41 128]
[42 127]
[43 126]
[44 125]
[45 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 62]
[51 61]
[52 60]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
[75 85]
[76 84]
[77 83]
[78 82]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
