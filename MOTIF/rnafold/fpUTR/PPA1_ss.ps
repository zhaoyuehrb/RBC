%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGUCCAGUGCUCGCAGUGCGCAGGCGUGGGGCUCUCUCCUUGUCAGUCGGCGCCGCGUGCGGGCUGGUGGCUCUGUGGCAGCGGCGGCGGCAGGACUCCGGCACU\
) } def
/len { sequence length } bind def

/coor [
[109.62876892 215.37855530]
[107.88737488 200.47998047]
[106.14598083 185.58140564]
[104.40458679 170.68283081]
[102.23061371 155.84120178]
[99.62588501 141.06909180]
[97.02116394 126.29697418]
[90.22890472 124.59532166]
[84.12065125 121.17192078]
[72.08879852 130.12930298]
[60.05695343 139.08668518]
[48.02510452 148.04406738]
[47.29654694 163.66465759]
[36.65975571 175.12733459]
[21.13710213 177.01974487]
[8.05790520 168.44834900]
[3.59776425 153.46032715]
[9.86262035 139.13252258]
[23.89439964 132.23011780]
[39.06772614 136.01220703]
[51.09957504 127.05483246]
[63.13142014 118.09745789]
[75.16326904 109.14007568]
[73.60479736 101.92290497]
[74.10081482 94.55606079]
[60.89779663 87.43705750]
[47.69477463 80.31805420]
[34.49175262 73.19904327]
[18.67269707 73.45986176]
[11.14226055 60.60911179]
[-2.06076026 53.49010468]
[-15.26378155 46.37109756]
[-28.46680260 39.25209427]
[-44.83435059 40.26965332]
[-53.67264175 26.45601463]
[-45.88959885 12.02146244]
[-29.49175072 11.81502724]
[-21.34779739 26.04907227]
[-8.14477539 33.16807938]
[5.05824518 40.28708267]
[18.26126671 47.40608978]
[33.13595581 46.63607407]
[41.61075974 59.99602509]
[54.81378174 67.11502838]
[68.01679993 74.23403168]
[81.21982574 81.35304260]
[98.46118927 73.57962799]
[116.48841095 79.29888153]
[128.77569580 70.69523621]
[141.06297302 62.09158707]
[153.35025024 53.48793793]
[160.21676636 39.23445892]
[175.08026123 38.27242279]
[187.36755371 29.66877556]
[199.65483093 21.06513023]
[211.94210815 12.46148300]
[224.22938538 3.85783648]
[236.51666260 -4.74581003]
[241.85614014 -12.35244083]
[249.28878784 -13.41487789]
[261.82110596 -21.65751266]
[274.35342407 -29.90014839]
[286.38528442 -38.85752487]
[297.87594604 -48.49934006]
[309.36660767 -58.14115524]
[320.85726929 -67.78296661]
[332.34793091 -77.42478180]
[340.59490967 -92.23774719]
[357.11196899 -88.41371155]
[358.00973511 -71.48355103]
[341.98974609 -65.93411255]
[330.49908447 -56.29230118]
[319.00842285 -46.65048981]
[307.51776123 -37.00867462]
[296.02709961 -27.36685944]
[295.72323608 -24.43015480]
[294.14535522 -21.44982529]
[291.27560425 -18.94843864]
[287.29940796 -17.44264984]
[282.59606934 -17.36783028]
[270.06375122 -9.12519550]
[257.53143311 -0.88256097]
[245.12031555 7.54147053]
[232.83303833 16.14511681]
[220.54576111 24.74876404]
[208.25846863 33.35240936]
[195.97119141 41.95605850]
[183.68391418 50.55970383]
[177.69627380 64.19779205]
[161.95390320 65.77522278]
[149.66662598 74.37886810]
[137.37933350 82.98251343]
[125.09205627 91.58615875]
[124.45060730 110.12777710]
[111.79328156 123.69224548]
[114.39800262 138.46437073]
[117.00273132 153.23648071]
[121.10478973 158.74034119]
[121.61155701 164.59858704]
[119.30316162 168.94143677]
[121.04455566 183.84001160]
[122.78594971 198.73858643]
[124.52734375 213.63716125]
[136.16929626 224.67547607]
[134.65434265 240.64683533]
[121.14460754 249.29939270]
[106.00360870 243.99562073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 97]
[6 96]
[7 95]
[9 23]
[10 22]
[11 21]
[12 20]
[25 46]
[26 45]
[27 44]
[28 43]
[30 41]
[31 40]
[32 39]
[33 38]
[48 93]
[49 92]
[50 91]
[51 90]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[60 82]
[61 81]
[62 80]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
