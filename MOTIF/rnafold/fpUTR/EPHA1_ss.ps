%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCGCCCGGCCCGCCCGGCUCUCCUAGUCCCUUGCAACCUGGCGCUGCCAUCCGGGCCACUGUCCCAGGUCCCGGCCCGGAGCU\
) } def
/len { sequence length } bind def

/coor [
[182.61622620 153.53424072]
[173.26762390 153.05528259]
[164.59272766 149.42173767]
[157.62818909 143.03532410]
[153.21725464 134.62860107]
[151.90766907 125.18103790]
[137.67527771 120.44403839]
[123.44288635 115.70704651]
[109.21050262 110.97005463]
[95.47650146 113.59092712]
[86.05250549 103.26233673]
[71.82011414 98.52533722]
[60.42179108 105.95262146]
[47.02482605 105.39279175]
[36.59537125 97.28099823]
[32.86744308 84.80956268]
[18.81319618 79.56760406]
[4.57476187 85.88462067]
[-9.60356808 80.36831665]
[-15.53813457 66.75521851]
[-29.59238052 61.51325226]
[-43.83081436 67.83027649]
[-58.00914383 62.31397247]
[-63.94371033 48.70087051]
[-77.99795532 43.45890808]
[-94.95140839 43.58881378]
[-99.76941681 27.33387375]
[-85.48348999 18.20433617]
[-72.75599670 29.40466118]
[-58.70174789 34.64662552]
[-45.30201721 28.24484444]
[-30.97434044 33.36073303]
[-24.35041809 47.45900726]
[-10.29617214 52.70096970]
[3.10355926 46.29919052]
[17.43123627 51.41507721]
[24.05515862 65.51335144]
[38.10940552 70.75531769]
[52.97204208 63.10873413]
[69.11899567 68.58091736]
[76.55711365 84.29295349]
[90.78949738 89.02994537]
[104.52349854 86.40907288]
[113.94749451 96.73766327]
[128.17988586 101.47466278]
[142.41227722 106.21165466]
[156.64465332 110.94864655]
[174.92259216 99.46958160]
[195.61958313 104.56715393]
[206.20593262 122.75842285]
[221.05325317 124.89314270]
[227.67536926 122.67478180]
[233.47830200 124.09122467]
[236.86868286 127.74655914]
[251.52587891 130.93504333]
[266.18307495 134.12351990]
[280.84030151 137.31199646]
[295.49749756 140.50047302]
[310.15469360 143.68896484]
[324.81188965 146.87744141]
[339.46908569 150.06591797]
[354.27593994 152.46530151]
[369.19000244 154.06874084]
[384.10406494 155.67216492]
[396.25112915 145.56155396]
[411.98184204 147.08473206]
[421.96347046 159.33801270]
[420.27404785 175.05174255]
[407.91592407 184.90325928]
[392.22094727 183.04780579]
[382.50064087 170.58621216]
[367.58657837 168.98278809]
[352.67251587 167.37936401]
[349.58828735 169.50231934]
[345.25445557 170.09950256]
[340.46893311 168.56915283]
[336.28060913 164.72311401]
[321.62341309 161.53463745]
[306.96621704 158.34616089]
[292.30902100 155.15768433]
[277.65179443 151.96920776]
[262.99459839 148.78071594]
[248.33740234 145.59223938]
[233.68020630 142.40376282]
[218.91853333 139.74046326]
[204.07121277 137.60574341]
[198.97103882 145.29638672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[11 42]
[12 41]
[16 38]
[17 37]
[20 34]
[21 33]
[24 30]
[25 29]
[50 86]
[51 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
