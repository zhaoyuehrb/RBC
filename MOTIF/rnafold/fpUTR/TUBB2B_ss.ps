%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCUCGGGCUGGGGGCGCGGCCUGUGCCGGCCGCCCCACCCUCCUUGCAUAAAAGCCGGAGCCCGCGGGGCCGGCGCUCUCAGCCCGUCGGUUCCCGAGCGCCUUCCCGGUGACCCCGCAGUGGGUGUGUGAGGGGAGGACGGACAGACCCAGACGCCGCCGGACCAGGAGGACGCUGACGAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[406.83261108 123.18631744]
[391.86474609 122.20526886]
[376.89685059 121.22422028]
[361.92895508 120.24317169]
[346.96109009 119.26212311]
[331.99319458 118.28108215]
[317.02532959 117.30003357]
[302.04339600 116.56401825]
[287.05142212 116.07323456]
[272.05944824 115.58244324]
[257.06747437 115.09165955]
[242.07551575 114.60087585]
[227.08354187 114.11008453]
[212.09156799 113.61930084]
[197.09960938 113.12851715]
[182.10763550 112.63772583]
[167.11566162 112.14694214]
[152.12370300 111.65615845]
[137.13172913 111.16536713]
[122.13975525 110.67458344]
[107.14778900 110.18379211]
[92.82978821 114.65534973]
[80.78167725 123.59084320]
[68.73355865 132.52633667]
[56.68544769 141.46182251]
[54.61468887 157.12986755]
[42.02081299 166.67814636]
[26.37554169 164.44184875]
[16.96093750 151.74772644]
[19.36251831 136.12698364]
[32.15546799 126.84710693]
[47.74995804 129.41371155]
[59.79807281 120.47821808]
[71.84618378 111.54273224]
[83.89430237 102.60723877]
[80.84767914 87.91989136]
[66.23952484 84.51374817]
[51.63137436 81.10760498]
[37.02322006 77.70146179]
[22.41506386 74.29531860]
[9.07984734 86.56101990]
[-8.79083443 88.36318970]
[-24.03751373 79.16912079]
[-30.66531563 62.81379700]
[-45.37709427 59.88744354]
[-60.08887482 56.96109009]
[-74.80065155 54.03473282]
[-85.94920349 60.54197693]
[-98.15055084 57.79088974]
[-104.97492218 47.79095840]
[-119.63685608 44.62428284]
[-132.78205872 53.39805984]
[-148.26455688 50.22510529]
[-156.89886475 36.98787689]
[-153.56240845 21.53978539]
[-140.23461914 13.04591084]
[-124.82266998 16.54551888]
[-116.47018433 29.96235466]
[-101.80825043 33.12902832]
[-85.42317200 26.86358643]
[-71.87429810 39.32295609]
[-57.16251755 42.24930954]
[-42.45074081 45.17566299]
[-27.73896027 48.10202026]
[-20.13149071 38.61830139]
[-9.14599800 33.24287796]
[3.15492010 33.05347061]
[14.43238068 38.14758301]
[22.51593018 47.61227798]
[25.82120705 59.68716431]
[40.42936325 63.09330750]
[55.03751755 66.49945068]
[69.64567566 69.90559387]
[84.25382996 73.31173706]
[99.54975128 76.33753967]
[107.76480865 85.61564636]
[107.63857269 95.19182587]
[122.63054657 95.68260956]
[137.62251282 96.17340088]
[152.61448669 96.66418457]
[167.60644531 97.15496826]
[182.59841919 97.64575958]
[197.59039307 98.13654327]
[212.58235168 98.62733459]
[227.57432556 99.11811829]
[242.56629944 99.60890198]
[257.55825806 100.09969330]
[272.55023193 100.59047699]
[287.54220581 101.08126068]
[302.53417969 101.57205200]
[308.55877686 98.78636169]
[314.23074341 99.38365173]
[318.00637817 102.33214569]
[332.97424316 103.31319427]
[347.94213867 104.29424286]
[362.91000366 105.27529144]
[377.87789917 106.25633240]
[392.84579468 107.23738098]
[407.81365967 108.21842957]
[418.30981445 103.45061493]
[427.61154175 107.73242188]
[442.51324463 106.01811218]
[457.41497803 104.30381012]
[472.31668091 102.58950806]
[487.20388794 100.75334930]
[502.07556152 98.79545593]
[516.94720459 96.83756256]
[531.81890869 94.87966919]
[546.69055176 92.92177582]
[561.49023438 90.47834015]
[576.20202637 87.55198669]
[590.91375732 84.62563324]
[605.62554932 81.69927979]
[620.33734131 78.77292633]
[635.04913330 75.84656525]
[648.55603027 69.32252502]
[659.99395752 59.61817932]
[671.43182373 49.91383743]
[682.86975098 40.20949554]
[683.91137695 24.43956566]
[695.85375977 14.08804321]
[711.61181641 15.29630089]
[721.83648682 27.34749985]
[720.46166992 43.09188080]
[708.30303955 53.18857956]
[692.57409668 51.64740372]
[681.13616943 61.35174561]
[669.69830322 71.05608368]
[658.26037598 80.76042938]
[663.19799805 94.92446136]
[678.19000244 95.41524506]
[693.18194580 95.90602875]
[708.17395020 96.39682007]
[719.65753174 85.87236786]
[734.85455322 86.58365631]
[744.81719971 97.59639740]
[759.80920410 98.08718109]
[774.80114746 98.57797241]
[781.40924072 84.85741425]
[793.03082275 75.01574707]
[807.65246582 70.75811005]
[822.74084473 72.82214355]
[835.68182373 80.85025787]
[844.23333740 93.45153046]
[846.91369629 108.44270325]
[843.25860596 123.22648621]
[833.90124512 135.24147034]
[820.46289062 142.40602112]
[805.27185059 143.47880554]
[790.95996094 138.27398682]
[780.00689697 127.69330597]
[774.31036377 113.56993866]
[759.31842041 113.07915497]
[744.32641602 112.58836365]
[733.66479492 122.92593384]
[718.45385742 122.64176941]
[707.68310547 111.38878632]
[692.69116211 110.89800262]
[677.69921875 110.40721130]
[662.70721436 109.91642761]
[637.97546387 90.55834961]
[623.26367188 93.48470306]
[608.55194092 96.41105652]
[593.84014893 99.33740997]
[579.12835693 102.26376343]
[564.41656494 105.19012451]
[562.74707031 107.46099091]
[560.07031250 109.20183563]
[556.58551025 110.02294922]
[552.63037109 109.61470795]
[548.64843750 107.79344940]
[533.77679443 109.75134277]
[518.90509033 111.70923615]
[504.03344727 113.66712952]
[489.16177368 115.62501526]
[482.93048096 119.62154388]
[474.03100586 117.49122620]
[459.12927246 119.20552826]
[444.22756958 120.91983032]
[429.32583618 122.63413239]
[442.34414673 130.08558655]
[451.03598022 142.31063843]
[453.79794312 157.05416870]
[450.12057495 171.59640503]
[440.68222046 183.25477600]
[427.22396851 189.87864685]
[412.22848511 190.24610901]
[398.46194458 184.28938293]
[388.46389771 173.10729980]
[384.07864380 158.76261902]
[386.11517334 143.90151978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 35]
[23 34]
[24 33]
[25 32]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[44 64]
[45 63]
[46 62]
[47 61]
[50 59]
[51 58]
[101 180]
[102 179]
[103 178]
[104 177]
[105 175]
[106 174]
[107 173]
[108 172]
[109 171]
[110 166]
[111 165]
[112 164]
[113 163]
[114 162]
[115 161]
[116 129]
[117 128]
[118 127]
[119 126]
[130 160]
[131 159]
[132 158]
[133 157]
[136 154]
[137 153]
[138 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
