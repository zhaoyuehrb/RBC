%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAGCUGGGAGGGAGCUUUAAGGGGUGGACGGGCGGGAGGUCGGGGUCCUCCGGGGAUUAGAGCCGGUGGGCUCGUUGUGGGCGCCAUUUCUCGGCGUCUACCGAGGAGCCGCCCCUUUCUCAGCCUUGCUCGGCUCUUCCCCGCUCUGGUCGCCGGGGCUGCGCCGUCCCCAGCUCAGUGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[393.79492188 624.39129639]
[402.28485107 612.02514648]
[416.37918091 606.89190674]
[430.83285522 610.90142822]
[422.70449829 598.29467773]
[414.57611084 585.68792725]
[406.44775391 573.08123779]
[398.31936646 560.47448730]
[390.19097900 547.86779785]
[376.79138184 541.36395264]
[375.81597900 525.57281494]
[367.68762207 512.96612549]
[359.55923462 500.35937500]
[351.43087769 487.75265503]
[343.30249023 475.14593506]
[335.17413330 462.53918457]
[328.89709473 458.61489868]
[327.01785278 449.65902710]
[319.09683228 436.92098999]
[311.17581177 424.18298340]
[303.25479126 411.44494629]
[286.85934448 410.79290771]
[273.95028687 400.39721680]
[269.73373413 384.19635010]
[276.06112671 368.51834106]
[267.93276978 355.91159058]
[259.80438232 343.30487061]
[251.67601013 330.69815063]
[238.27641296 324.19430542]
[237.30101013 308.40319824]
[229.17263794 295.79647827]
[220.94140625 283.25668335]
[212.60784912 270.78463745]
[194.68884277 263.54333496]
[193.63714600 243.42288208]
[184.89997864 231.23017883]
[176.16281128 219.03747559]
[167.42564392 206.84478760]
[158.68847656 194.65208435]
[149.95130920 182.45938110]
[135.14189148 184.05520630]
[121.43087769 177.98362732]
[112.54109955 165.78370667]
[110.94097137 150.67289734]
[117.15979004 136.69886780]
[108.42263031 124.50617218]
[99.68546295 112.31346893]
[59.57252884 119.91975403]
[46.34370804 112.84880829]
[33.11489105 105.77785492]
[19.88607025 98.70690155]
[6.65725231 91.63595581]
[-6.57156658 84.56500244]
[-22.38957024 84.88333130]
[-29.96668434 72.06005096]
[-43.19550323 64.98909760]
[-56.42432022 57.91814804]
[-69.65313721 50.84719849]
[-83.07650757 58.45093536]
[-98.47855377 57.56757736]
[-110.94455719 48.47899246]
[-116.49665833 34.08531952]
[-113.36318970 18.97952843]
[-102.54404449 7.98182011]
[-87.49156189 4.60152340]
[-73.00894165 9.91727924]
[-63.71753311 22.23284912]
[-62.58219147 37.61837769]
[-49.35337067 44.68933105]
[-36.12455368 51.76028061]
[-22.89573288 58.83123016]
[-8.02394295 58.00713730]
[0.49938431 71.33618164]
[13.72820282 78.40713501]
[26.95702171 85.47808838]
[40.18584061 92.54903412]
[53.41466141 99.61998749]
[66.64347839 106.69094086]
[72.94683838 102.62674713]
[72.21080017 87.64482117]
[85.55356598 94.49837494]
[91.85693359 90.43418884]
[90.87588501 75.46630859]
[89.89483643 60.49842453]
[88.91378784 45.53054047]
[87.93274689 30.56265450]
[86.95169830 15.59477139]
[85.97064972 0.62688726]
[84.98960114 -14.34099674]
[84.00855255 -29.30887985]
[71.29156494 -38.40900421]
[67.44932556 -53.56721115]
[74.29602051 -67.62625885]
[88.59885406 -73.94789124]
[103.60446167 -69.54723358]
[112.22765350 -56.50213623]
[110.39682770 -40.97209930]
[98.97644043 -30.28992653]
[99.95748901 -15.32204342]
[100.93852997 -0.35415968]
[101.91957855 14.61372375]
[102.90062714 29.58160782]
[103.88167572 44.54949188]
[104.86272430 59.51737595]
[105.84376526 74.48526001]
[106.82481384 89.45314026]
[111.87816620 103.57630157]
[120.61532593 115.76900482]
[129.35249329 127.96170807]
[144.58389282 126.56472015]
[158.37843323 132.93713379]
[167.07337952 145.27667236]
[168.41548157 160.21168518]
[162.14401245 173.72221375]
[170.88117981 185.91491699]
[179.61834717 198.10762024]
[188.35551453 210.30032349]
[197.09266663 222.49301147]
[205.82983398 234.68571472]
[216.66598511 235.83808899]
[224.90376282 242.63128662]
[227.96968079 252.62945557]
[225.07989502 262.45108032]
[233.41345215 274.92312622]
[240.79545593 280.33099365]
[241.77937317 287.66809082]
[249.90774536 300.27484131]
[263.88873291 307.68038940]
[264.28274536 322.56976318]
[272.41110229 335.17651367]
[280.53948975 347.78323364]
[288.66784668 360.38995361]
[302.45825195 360.13168335]
[314.47811890 366.67303467]
[321.63543701 378.20935059]
[322.14947510 391.66748047]
[315.99282837 403.52392578]
[323.91384888 416.26196289]
[331.83486938 428.99996948]
[339.75588989 441.73800659]
[347.78085327 454.41082764]
[355.90921021 467.01754761]
[364.03759766 479.62426758]
[372.16598511 492.23098755]
[380.29434204 504.83773804]
[388.42272949 517.44445801]
[402.40371704 524.84997559]
[402.79772949 539.73937988]
[410.92608643 552.34613037]
[419.05447388 564.95288086]
[427.18283081 577.55957031]
[435.31121826 590.16632080]
[443.43957520 602.77301025]
[452.37506104 614.82116699]
[462.07940674 626.25903320]
[471.78375244 637.69696045]
[481.48809814 649.13488770]
[491.19244385 660.57275391]
[503.97024536 662.40637207]
[511.81716919 672.14636230]
[510.94604492 684.22161865]
[520.46191406 695.81677246]
[529.97784424 707.41192627]
[539.49371338 719.00708008]
[549.00964355 730.60223389]
[558.52551270 742.19738770]
[573.83691406 740.30932617]
[587.72851562 747.01959229]
[595.76757812 760.18688965]
[595.38879395 775.60955811]
[586.71313477 788.36639404]
[572.50891113 794.38665771]
[557.30865479 791.74926758]
[545.96270752 781.29589844]
[542.09149170 766.36212158]
[546.93035889 751.71325684]
[537.41448975 740.11810303]
[527.89855957 728.52294922]
[518.38269043 716.92779541]
[508.86679077 705.33264160]
[499.35089111 693.73748779]
[482.62170410 688.45916748]
[479.75454712 670.27709961]
[470.05020142 658.83923340]
[460.34585571 647.40130615]
[450.64151001 635.96337891]
[440.93716431 624.52551270]
[440.57815552 639.52117920]
[431.57434082 651.51831055]
[417.27609253 656.05267334]
[403.00390625 651.43701172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[11 146]
[12 145]
[13 144]
[14 143]
[15 142]
[16 141]
[18 140]
[19 139]
[20 138]
[21 137]
[25 132]
[26 131]
[27 130]
[28 129]
[30 127]
[31 126]
[32 124]
[33 123]
[35 119]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[45 109]
[46 108]
[47 107]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[55 71]
[56 70]
[57 69]
[58 68]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[154 187]
[155 186]
[156 185]
[157 184]
[158 183]
[161 181]
[162 180]
[163 179]
[164 178]
[165 177]
[166 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
