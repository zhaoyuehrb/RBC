%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUUACGGAACCGAGUUCCCAGGCCGGACGCGCGGUGGCCUGACGGUCGCAAGGAUUACAUUCGCCUGACCCGGCCCGGCUUGACCCUGCCCGGGCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[26.14746857 197.66949463]
[21.23748779 198.10867310]
[9.71452427 207.71186829]
[-1.80843961 217.31506348]
[-13.33140373 226.91825867]
[-24.85436630 236.52143860]
[-26.83569527 249.37699890]
[-36.77172089 257.13217163]
[-48.92076874 256.00546265]
[-60.72851944 265.25625610]
[-72.53627014 274.50704956]
[-84.34402466 283.75781250]
[-96.15177917 293.00860596]
[-104.89118958 307.53646851]
[-121.27061462 303.16030884]
[-121.59975433 286.20956421]
[-105.40255737 281.20086670]
[-93.59481049 271.95007324]
[-81.78705597 262.69927979]
[-69.97930145 253.44850159]
[-58.17155075 244.19772339]
[-52.60377121 227.63117981]
[-34.45756149 224.99847412]
[-22.93459511 215.39529419]
[-11.41163254 205.79209900]
[0.11133141 196.18890381]
[11.63429546 186.58570862]
[22.86195564 176.63887024]
[33.78406906 166.35745239]
[36.54293823 159.36448669]
[45.19479370 155.93663025]
[56.42245483 145.98979187]
[67.65011597 136.04295349]
[78.87777710 126.09611511]
[90.10543823 116.14926910]
[63.56292725 109.05871582]
[51.65753555 71.43123627]
[45.09101868 57.94491577]
[38.52450562 44.45859146]
[31.95798874 30.97227097]
[25.39147377 17.48594856]
[18.82495880 3.99962783]
[4.94013453 -4.72640896]
[5.82499790 -21.10166550]
[20.56927681 -28.28068352]
[34.00532150 -18.87830353]
[32.31127930 -2.56688786]
[38.87779617 10.91943359]
[45.44430923 24.40575600]
[52.01082611 37.89207840]
[58.57734299 51.37839890]
[65.14385986 64.86472321]
[72.64043427 65.09123993]
[80.52909851 52.33314896]
[87.63359070 65.54428864]
[95.13017273 65.77081299]
[102.49899292 52.70557022]
[98.01414490 37.55097961]
[105.63209534 23.70387459]
[120.83325958 19.37949944]
[134.59904480 27.14342880]
[138.76246643 42.38946152]
[130.85342407 56.07239532]
[115.56423187 60.07439041]
[108.19541168 73.13963318]
[118.14225006 84.36729431]
[132.00044250 78.62703705]
[145.85864258 72.88678741]
[151.67436218 58.19145203]
[166.21086121 51.98937988]
[180.84388733 57.96014404]
[186.89192200 72.56140137]
[180.76678467 87.13048553]
[166.10240173 93.02381897]
[151.59889221 86.74497986]
[137.74069214 92.48523712]
[123.88249969 98.22548676]
[122.75079346 113.18273163]
[135.58750916 120.94280243]
[148.42422485 128.70286560]
[161.37669373 136.26817322]
[174.44192505 143.63699341]
[188.49667358 137.06098938]
[203.72605896 140.03511047]
[214.27407837 151.41575623]
[216.08479309 166.82682800]
[208.46195984 180.34243774]
[194.33671570 186.76559448]
[179.14048767 183.62643433]
[168.71653748 172.13203430]
[167.07310486 156.70222473]
[154.00787354 149.33341980]
[146.51075745 148.77989197]
[140.66416931 141.53958130]
[127.82744598 133.77951050]
[114.99072266 126.01944733]
[100.05227661 127.37693024]
[88.82461548 137.32377625]
[77.59695435 147.27061462]
[66.36929321 157.21745300]
[55.14163208 167.16429138]
[44.06548309 177.27957153]
[33.14336777 187.56098938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[28 103]
[29 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[56 65]
[57 64]
[66 77]
[67 76]
[68 75]
[78 96]
[79 95]
[80 94]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
