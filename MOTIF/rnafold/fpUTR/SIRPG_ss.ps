%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGGGCCUGACAUCUCCCCAGAACAGACGUUUGAACAGAGCAGGCUUCUGAGGUCUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[108.49846649 209.64566040]
[118.16907501 197.14546204]
[116.03435516 182.29814148]
[113.89962769 167.45082092]
[110.36325073 152.87365723]
[105.45722961 138.69863892]
[100.55120850 124.52362823]
[95.64518738 110.34861755]
[90.40322876 96.29436493]
[84.82829285 82.36885071]
[79.25334930 68.44332886]
[73.67841339 54.51781082]
[68.10347748 40.59229279]
[63.84709167 37.58713150]
[61.28372955 33.67216873]
[60.48336792 29.59276772]
[61.22857285 26.02267647]
[63.07407761 23.46372986]
[60.23530960 8.73479939]
[57.39654160 -5.99413157]
[41.86126709 -11.13277721]
[31.02093697 -23.26596260]
[27.69583702 -39.09834671]
[32.68174362 -54.39122772]
[44.56193924 -65.09732819]
[41.02555466 -79.67449951]
[37.48917007 -94.25167847]
[33.95278931 -108.82884979]
[22.25064087 -120.31761932]
[26.61056709 -136.12657166]
[42.54744720 -139.99281311]
[53.66678619 -127.93908691]
[48.52996063 -112.36523438]
[52.06634521 -97.78805542]
[55.60272980 -83.21088409]
[59.13911438 -68.63371277]
[72.64509583 -65.58227539]
[83.52283478 -56.90734863]
[89.56060028 -44.29821396]
[89.49835968 -30.25130844]
[83.29026031 -17.57604408]
[72.12547302 -8.83290005]
[74.96424103 5.89603043]
[77.80300903 20.62495995]
[82.02899933 35.01735687]
[87.60393524 48.94287491]
[93.17887115 62.86839294]
[98.75380707 76.79391479]
[104.32874298 90.71942902]
[110.20870972 96.68319702]
[109.82019806 105.44259644]
[114.72621918 119.61760712]
[119.63224030 133.79261780]
[124.53826141 147.96763611]
[128.64683533 151.17192078]
[131.02101135 155.20440674]
[131.62635803 159.31727600]
[130.71212769 162.84786987]
[128.74694824 165.31610107]
[130.88166809 180.16342163]
[133.01640320 195.01074219]
[145.81698608 204.28007507]
[148.23144531 219.89883423]
[138.82730103 232.60072327]
[123.18387604 234.84989929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[5 54]
[6 53]
[7 52]
[8 51]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[18 44]
[19 43]
[20 42]
[25 36]
[26 35]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
