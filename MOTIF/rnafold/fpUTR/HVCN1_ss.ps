%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACUUCAGAGCUGGGCCUGCGCCUGCGGGGCCGUACGAGUUGGCCCGGAGCAAGGCGGCCCAGGACAGGCAGGGGCUGCACGCGGUGAAGAAACCAAGACGCAGAGAGGCCAAGCCCCUUGCCUUGGGUCACACAGCCAAAGGAGGCAGAGCCAGAACUCACAACCAGAUCCAGAGGCAACAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[305.53021240 301.88281250]
[295.23468018 312.79159546]
[281.72842407 319.31701660]
[266.78363037 320.60287476]
[252.36125183 316.48043823]
[240.35362244 307.49060059]
[232.33630371 294.81295776]
[229.36125183 280.11096191]
[231.81883240 265.31365967]
[239.38658142 252.36260986]
[251.07153320 242.95718384]
[265.34045410 238.33145142]
[280.32232666 239.09263611]
[267.80761719 230.82330322]
[255.29290771 222.55397034]
[240.40887451 221.99290466]
[233.16067505 207.92967224]
[220.64596558 199.66033936]
[208.13125610 191.39100647]
[195.61653137 183.12165833]
[183.10182190 174.85232544]
[172.66496277 179.50976562]
[161.15747070 178.53285217]
[151.45555115 172.04942322]
[146.04020691 161.57800293]
[146.36326599 149.67356873]
[134.12730408 140.99710083]
[121.89134216 132.32061768]
[109.65538025 123.64414215]
[97.41941833 114.96766663]
[82.66426086 112.26850891]
[68.14910889 116.05140686]
[53.63395691 119.83430481]
[39.11880112 123.61720276]
[24.60364914 127.40010071]
[10.08849525 131.18299866]
[3.54669380 145.38647461]
[-10.61642933 152.01519775]
[-25.71348000 147.93928528]
[-34.61609268 135.08325195]
[-33.12072754 119.51733398]
[-21.93344688 108.59127808]
[-6.33654547 107.46402740]
[6.30559778 116.66784668]
[20.82075119 112.88494873]
[35.33590698 109.10205078]
[49.85105896 105.31915283]
[64.36621094 101.53625488]
[78.88136292 97.75335693]
[80.59320068 90.45132446]
[69.65732574 80.18454742]
[84.01686096 75.84726715]
[85.72869110 68.54523468]
[74.40715027 58.70538712]
[61.15824890 61.18654251]
[49.07799149 55.65970612]
[42.48896027 44.34917068]
[43.60601807 31.50251579]
[32.44784546 21.47778511]
[21.28967476 11.45305634]
[10.13150311 1.42832649]
[-1.02666807 -8.59640312]
[-12.18483925 -18.62113380]
[-23.34301186 -28.64586258]
[-37.66900635 -23.25842667]
[-52.85627747 -25.15721703]
[-65.41490173 -33.90590668]
[-72.45899200 -47.49411011]
[-72.36988068 -62.79935837]
[-65.16803741 -76.30461884]
[-52.50839233 -84.90647888]
[-37.30004120 -86.62829590]
[-23.03775215 -81.07440948]
[-12.99889374 -69.52105713]
[-9.49032211 -54.62311935]
[-13.31828117 -39.80403519]
[-2.16011000 -29.77930450]
[8.99806118 -19.75457573]
[20.15623283 -9.72984505]
[31.31440544 0.29488456]
[42.47257614 10.31961441]
[53.63074875 20.34434319]
[70.36267853 18.72467613]
[83.35008240 29.92159462]
[84.24699402 47.38384628]
[95.56854248 57.22369385]
[108.89421082 50.33700943]
[107.41628265 35.40999603]
[105.93835449 20.48298454]
[93.55895996 10.65821362]
[91.83559418 -5.05183268]
[101.79069519 -17.32666206]
[117.51808167 -18.88383865]
[129.68698120 -8.79951382]
[131.07778931 6.94345903]
[120.86536407 19.00505447]
[122.34329987 33.93206787]
[123.82122803 48.85908127]
[131.57818604 65.90865326]
[131.83125305 82.09388733]
[126.03870392 94.68972778]
[116.52672577 101.82624817]
[106.09589386 102.73170471]
[118.33185577 111.40818024]
[130.56781006 120.08465576]
[142.80377197 128.76113892]
[155.03973389 137.43760681]
[173.56600952 133.54025269]
[188.80697632 144.22434998]
[191.37115479 162.33761597]
[203.88587952 170.60694885]
[216.40058899 178.87628174]
[228.91529846 187.14562988]
[241.43002319 195.41496277]
[257.20919800 196.56750488]
[263.56225586 210.03924561]
[276.07696533 218.30859375]
[288.59167480 226.57792664]
[302.02880859 233.24450684]
[316.18414307 238.20701599]
[330.33947754 243.16950989]
[344.49481201 248.13201904]
[358.72985840 252.86102295]
[373.04077148 257.35525513]
[387.35165405 261.84951782]
[401.66256714 266.34375000]
[415.97344971 270.83801270]
[430.32083130 275.21438599]
[444.70370483 279.47265625]
[459.08657837 283.73092651]
[473.46945190 287.98916626]
[487.85235596 292.24743652]
[502.23522949 296.50570679]
[513.68096924 282.34344482]
[529.89910889 274.16549683]
[547.99981689 273.38671875]
[564.77520752 280.10736084]
[577.26788330 293.10192871]
[583.29211426 310.04244995]
[598.27941895 310.65908813]
[613.26678467 311.27572632]
[624.72076416 300.38623047]
[640.51770020 300.86892700]
[651.28546143 312.43743896]
[650.63580322 328.22839355]
[638.95404053 338.87322998]
[623.17089844 338.05664062]
[612.65014648 326.26303101]
[597.66278076 325.64639282]
[582.67547607 325.02975464]
[582.30456543 326.56964111]
[581.87670898 328.09469604]
[595.25854492 334.87155151]
[608.64044189 341.64840698]
[623.57916260 336.48999023]
[637.75329590 343.48077393]
[642.75347900 358.47320557]
[635.61322021 372.57260132]
[620.56872559 377.41400146]
[606.54565430 370.12509155]
[601.86358643 355.03027344]
[588.48168945 348.25341797]
[575.09985352 341.47656250]
[565.12219238 351.11328125]
[552.55828857 357.05520630]
[538.72637939 358.66003418]
[525.08380127 355.74154663]
[513.07342529 348.59097290]
[503.97109985 337.94815063]
[498.75009155 324.92477417]
[497.97695923 310.88858032]
[483.59408569 306.63031006]
[469.21121216 302.37207031]
[454.82833862 298.11380005]
[440.44543457 293.85552979]
[426.06256104 289.59729004]
[418.74392700 290.71493530]
[411.47921753 285.14889526]
[397.16830444 280.65466309]
[382.85742188 276.16040039]
[368.54650879 271.66616821]
[354.23562622 267.17193604]
[349.64889526 268.55722046]
[344.14337158 267.06381226]
[339.53231812 262.28735352]
[325.37698364 257.32485962]
[311.22164917 252.36235046]
[297.06631470 247.39984131]
[306.73507690 258.86782837]
[311.68414307 273.02789307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 118]
[14 117]
[15 116]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[26 107]
[27 106]
[28 105]
[29 104]
[30 103]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[53 86]
[54 85]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[87 98]
[88 97]
[89 96]
[119 188]
[120 187]
[121 186]
[122 185]
[123 182]
[124 181]
[125 180]
[126 179]
[127 178]
[128 176]
[129 175]
[130 174]
[131 173]
[132 172]
[133 171]
[139 150]
[140 149]
[141 148]
[152 163]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
