%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGGGCUCGCGGCGCUGUGAUUGGUCUGCCCGGACUCCGCCUCCAGCGCAUGUCAUUAGCAUCUCAUUAGCUGUCCGCUCGGGCUCCGGAGGCAGCCAACGCCGCCAGUCUGAGGCAGGUGCCCGAC\
) } def
/len { sequence length } bind def

/coor [
[130.47050476 349.66204834]
[145.06208801 346.18560791]
[158.56443787 352.71987915]
[154.27525330 338.34619141]
[149.98606873 323.97250366]
[145.69688416 309.59881592]
[141.40769958 295.22512817]
[137.11851501 280.85144043]
[132.82933044 266.47775269]
[121.77577972 256.49435425]
[125.24391937 241.05795288]
[120.95473480 226.68426514]
[116.66555023 212.31057739]
[112.37636566 197.93688965]
[108.08718109 183.56320190]
[103.79799652 169.18951416]
[95.17398834 181.46252441]
[80.43760681 184.26234436]
[67.91341400 176.00738525]
[64.67630005 161.36083984]
[72.55491638 148.59654236]
[87.09864044 144.92501831]
[100.09232330 152.42105103]
[97.92498779 137.57846069]
[95.75765228 122.73585510]
[93.59031677 107.89326477]
[89.36360168 100.92610931]
[91.55444336 92.66627502]
[89.74639130 77.77564240]
[87.93833923 62.88500977]
[86.13028717 47.99437714]
[84.32223511 33.10374451]
[82.15489960 18.26114845]
[79.62954712 3.47525740]
[77.10419464 -11.31063366]
[74.57883453 -26.09652519]
[64.62862396 -38.39708710]
[70.11275482 -52.24531937]
[67.58740234 -67.03121185]
[65.06204224 -81.81710052]
[62.53668594 -96.60298920]
[45.98720169 -102.25116730]
[34.58876038 -115.39579010]
[31.37335205 -132.40463257]
[37.12785339 -148.63653564]
[50.20381927 -159.70782471]
[46.96705627 -174.35444641]
[43.73029327 -189.00105286]
[40.49353027 -203.64767456]
[27.45328712 -212.16764832]
[24.37939644 -227.06750488]
[32.58224487 -239.44686890]
[29.34548378 -254.09349060]
[26.10872078 -268.74011230]
[11.24036026 -272.18896484]
[-0.65378743 -281.75411987]
[-7.21213007 -295.53637695]
[-7.13250446 -310.79928589]
[-0.43072003 -324.51239014]
[11.56257820 -333.95291138]
[26.46611404 -337.24642944]
[41.32077789 -333.73907471]
[53.17716599 -324.12713623]
[59.68118286 -310.31915283]
[59.54145050 -295.05667114]
[52.78571701 -281.37008667]
[40.75533676 -271.97686768]
[43.99209976 -257.33026123]
[47.22886276 -242.68363953]
[59.88449860 -234.91378784]
[63.37568283 -220.10615540]
[55.14014435 -206.88442993]
[58.37690735 -192.23782349]
[61.61367035 -177.59120178]
[64.85043335 -162.94458008]
[77.34214783 -160.42070007]
[87.97094727 -153.30447388]
[95.11569214 -142.63822937]
[97.67029572 -130.00897217]
[95.21485138 -117.31221008]
[88.08415985 -106.46753693]
[77.32257843 -99.12834930]
[79.84793091 -84.34245300]
[82.37329102 -69.55656433]
[84.89864349 -54.77067566]
[94.66822815 -43.52769852]
[89.36473083 -28.62188148]
[91.89008331 -13.83598900]
[94.41543579 0.94990176]
[96.94079590 15.73579311]
[100.33419037 19.22685242]
[101.50498962 24.91903114]
[99.21287537 31.29569435]
[101.02091980 46.18632889]
[102.82897186 61.07696152]
[104.63702393 75.96759033]
[106.44507599 90.85823059]
[108.43291473 105.72592926]
[110.60025024 120.56851959]
[112.76758575 135.41111755]
[114.93492126 150.25370789]
[118.17168427 164.90032959]
[122.46086884 179.27401733]
[126.75005341 193.64770508]
[131.03923035 208.02139282]
[135.32841492 222.39508057]
[139.61759949 236.76876831]
[150.97793579 247.78027344]
[147.20301819 262.18856812]
[151.49220276 276.56225586]
[155.78138733 290.93594360]
[160.07057190 305.30963135]
[164.35975647 319.68331909]
[168.64894104 334.05700684]
[172.93812561 348.43069458]
[178.42626953 362.39065552]
[185.07414246 375.83706665]
[191.72201538 389.28347778]
[205.65930176 397.92544556]
[204.87339783 414.30575562]
[190.17276001 421.57373047]
[176.68014526 412.25268555]
[178.27561951 395.93133545]
[171.62774658 382.48492432]
[164.97987366 369.03854370]
[159.54270935 383.01843262]
[146.49035645 390.41003418]
[131.70486450 387.88235474]
[121.84931946 376.57446289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[23 101]
[24 100]
[25 99]
[26 98]
[28 97]
[29 96]
[30 95]
[31 94]
[32 93]
[33 90]
[34 89]
[35 88]
[36 87]
[38 85]
[39 84]
[40 83]
[41 82]
[46 75]
[47 74]
[48 73]
[49 72]
[52 69]
[53 68]
[54 67]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
