%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGUUGUCUUCUUUCCUUCACCACCACCCAGGAGCUCAGAGAUCUAAGCUGCUUUCCAUCUUUUCUCCCAGCCCCAGGACACUGACUCUGUACAGG\
) } def
/len { sequence length } bind def

/coor [
[82.31677246 371.20629883]
[85.78582001 356.08197021]
[97.50428772 345.91058350]
[96.07844543 330.97848511]
[94.65260315 316.04641724]
[83.03933716 306.79074097]
[81.38062286 291.66778564]
[91.16757202 279.54949951]
[89.74172974 264.61740112]
[88.31588745 249.68533325]
[75.46092224 244.79156494]
[65.95163727 234.76124573]
[61.70925903 221.53703308]
[63.62714767 207.71490479]
[71.38337708 196.03448486]
[83.49310303 188.83616638]
[82.54174805 173.86636353]
[81.59038544 158.89656067]
[80.63903046 143.92675781]
[71.73209381 155.99600220]
[58.77143097 163.54724121]
[43.87942123 165.34391785]
[29.49471855 161.09182739]
[17.97289658 151.48725891]
[11.20072269 138.10302734]
[10.28717613 123.13087463]
[15.38185787 109.02257538]
[25.65048409 98.08843994]
[39.41150665 92.11899567]
[54.41148376 92.09178162]
[68.19407654 98.01124573]
[78.50231171 108.90805054]
[83.64816284 122.99777985]
[88.77846527 108.90238953]
[86.53989410 95.10092163]
[97.12614441 85.96730804]
[102.25644684 71.87191772]
[107.38674927 57.77653122]
[100.95697021 43.58866119]
[106.36062622 29.36701393]
[119.92621613 23.32463837]
[125.05651855 9.22924900]
[130.18681335 -4.86614037]
[135.31712341 -18.96152878]
[130.06573486 -28.75031281]
[131.15280151 -39.58243561]
[137.96150208 -47.79072952]
[147.98048401 -50.73535919]
[153.99443054 -64.47698212]
[160.00839233 -78.21861267]
[158.45309448 -93.96318817]
[170.64405823 -102.52062988]
[176.65802002 -116.26225281]
[172.17634583 -131.66661072]
[181.54304504 -144.69137573]
[197.57276917 -145.34507751]
[207.96890259 -133.12622070]
[204.75640869 -117.40810394]
[190.39964294 -110.24829865]
[184.38568115 -96.50666809]
[186.37113953 -81.74498749]
[173.75001526 -72.20465088]
[167.73606873 -58.46302795]
[161.72210693 -44.72140121]
[165.43647766 -25.85732460]
[149.41250610 -13.83122730]
[144.28221130 0.26416185]
[139.15190125 14.35955143]
[134.02160645 28.45494080]
[140.52947998 41.80346298]
[135.52742004 56.17127609]
[121.48213959 62.90683365]
[116.35183716 77.00222015]
[111.22153473 91.09761047]
[113.46010590 104.89907837]
[102.87385559 114.03269196]
[97.74355316 128.12808228]
[95.60882568 142.97540283]
[96.56018829 157.94520569]
[97.51154327 172.91499329]
[98.46290588 187.88479614]
[113.28638458 195.00962830]
[122.48625183 208.53007507]
[123.65927887 224.74804688]
[116.58245087 239.28398132]
[103.24797058 248.25949097]
[104.67381287 263.19155884]
[106.09964752 278.12365723]
[118.00314331 288.17077637]
[119.23643494 303.33435059]
[109.58468628 314.62057495]
[111.01052856 329.55267334]
[112.43636322 344.48474121]
[125.86801147 352.25457764]
[132.13667297 366.44906616]
[128.83189392 381.61013794]
[117.22445679 391.90805054]
[101.77764130 393.38305664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[8 88]
[9 87]
[10 86]
[16 81]
[17 80]
[18 79]
[19 78]
[33 77]
[34 76]
[36 74]
[37 73]
[38 72]
[41 69]
[42 68]
[43 67]
[44 66]
[48 64]
[49 63]
[50 62]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
