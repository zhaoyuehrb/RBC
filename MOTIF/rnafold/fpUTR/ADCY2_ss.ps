%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGCCGCGGCGAGCGGCGCUGCCCGGGCCGGGCGCGCACGGCGGGCGCCCUGUGAGCGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[91.90076447 110.10210419]
[77.47338104 114.20704651]
[63.04599380 118.31198883]
[48.61861038 122.41693878]
[34.19122314 126.52188110]
[19.96881485 131.28875732]
[5.98173141 136.70738220]
[-8.00535202 142.12600708]
[-21.99243546 147.54463196]
[-35.97951889 152.96325684]
[-43.74892044 166.99949646]
[-59.59044266 169.53440857]
[-71.35182190 158.62342834]
[-70.01073456 142.63652039]
[-56.59595490 133.83747864]
[-41.39814377 138.97616577]
[-27.41106033 133.55754089]
[-13.42397690 128.13891602]
[0.56310618 122.72029877]
[14.55018997 117.30166626]
[17.36828613 113.05805206]
[23.03833389 110.74632263]
[30.08627892 112.09449768]
[44.51366425 107.98955536]
[58.94104767 103.88460541]
[73.36843109 99.77966309]
[87.79581451 95.67472076]
[101.90432739 90.58061218]
[115.62623596 84.52179718]
[129.34814453 78.46298218]
[143.07005310 72.40416718]
[156.79196167 66.34535217]
[170.51387024 60.28653717]
[172.68135071 48.18527603]
[180.47161865 38.83308029]
[191.75331116 34.60005188]
[203.53169250 36.48094177]
[212.74345398 43.86433411]
[226.96586609 39.09746170]
[241.18827820 34.33058929]
[255.41069031 29.56371880]
[266.03662109 17.84193802]
[280.56295776 21.13352394]
[294.78536987 16.36665344]
[309.00778198 11.59978199]
[319.45654297 -1.03966534]
[335.57977295 1.95593011]
[340.79125977 17.50495720]
[329.72991943 29.61190796]
[313.77465820 25.82219124]
[299.55224609 30.58906174]
[285.32983398 35.35593414]
[275.72119141 46.73675537]
[260.17755127 43.78612900]
[245.95513916 48.55299759]
[231.73274231 53.31987000]
[217.51033020 58.08674240]
[210.66291809 74.78534698]
[193.62167358 81.61258698]
[176.57267761 74.00844574]
[162.85076904 80.06726074]
[149.12886047 86.12607574]
[135.40696716 92.18489075]
[121.68505096 98.24370575]
[107.96314240 104.30252075]
[105.96794891 108.05551910]
[102.18327332 110.78070831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[38 57]
[39 56]
[40 55]
[41 54]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
