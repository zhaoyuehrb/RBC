%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCGCAACAUCCCCUAGUGCCGCCGCUCCCUACUCUGGGGGUUGGGACUACCUCCUUUUCCGCGGGCCCCGCCCAGGCGGCUGCCCGUGACCUGCCUGGGCGCGGGGAACUGAAAGCCGGAAGGGGCAAGACGGGUUCAGUUCGUC\
) } def
/len { sequence length } bind def

/coor [
[95.07500458 130.80569458]
[87.36634064 127.90599060]
[80.82109070 123.15743256]
[75.85977173 116.96253204]
[72.77483368 109.81255341]
[57.82744217 111.06772614]
[42.88004684 112.32289124]
[40.17682648 127.15959930]
[33.73017883 140.78039551]
[23.98497391 152.25936890]
[11.61009026 160.81793213]
[-2.54750109 165.87760925]
[-17.52070427 167.09915161]
[-32.28835678 164.40527344]
[-45.84487915 157.98553467]
[-57.26873779 148.28295898]
[-65.78509521 135.96353149]
[-70.81835938 121.87041473]
[-85.76574707 123.12557983]
[-100.71314240 124.38075256]
[-115.66053772 125.63591766]
[-128.76486206 134.50085449]
[-142.09494019 127.85567474]
[-157.04234314 129.11083984]
[-171.98973083 130.36601257]
[-177.71881104 133.87574768]
[-183.48529053 133.90927124]
[-187.58715820 131.34732056]
[-202.57400513 131.97544861]
[-217.56085205 132.60359192]
[-232.54768372 133.23171997]
[-247.53453064 133.85986328]
[-262.52136230 134.48799133]
[-273.03308105 146.28967285]
[-288.81564331 147.11839294]
[-300.50552368 136.48249817]
[-301.16732788 120.69207001]
[-290.40841675 109.11529541]
[-274.61187744 108.62046051]
[-263.14950562 119.50115204]
[-248.16267395 118.87301636]
[-233.17582703 118.24488068]
[-218.18898010 117.61674500]
[-203.20213318 116.98860931]
[-188.21530151 116.36047363]
[-173.24490356 115.41861725]
[-158.29750061 114.16345215]
[-143.35011292 112.90828705]
[-131.31491089 104.13312531]
[-116.91570282 110.68852234]
[-101.96830750 109.43335724]
[-87.02091980 108.17819214]
[-72.07352448 106.92301941]
[-69.46103668 92.18788147]
[-63.11844254 78.62070465]
[-53.47264862 67.14885712]
[-41.17658615 58.55821609]
[-27.06498909 53.43928909]
[-12.09775543 52.14665985]
[2.70536900 54.77443695]
[16.33425522 61.14939880]
[27.85732269 70.84243011]
[36.48521805 83.19738007]
[41.62488174 97.37549591]
[56.57227325 96.12033081]
[71.51966858 94.86516571]
[77.72277069 79.59590912]
[91.72208405 69.62882233]
[109.58614349 68.68557739]
[125.78584290 77.81087494]
[134.34654236 65.49363708]
[142.90725708 53.17639542]
[151.33850098 40.77018738]
[159.63937378 28.27636909]
[167.94024658 15.78255081]
[176.24111938 3.28873181]
[184.54199219 -9.20508671]
[192.84286499 -21.69890594]
[201.14373779 -34.19272232]
[209.44461060 -46.68654251]
[217.74548340 -59.18036270]
[226.04635620 -71.67417908]
[234.34722900 -84.16799927]
[226.93948364 -97.56142426]
[226.61608887 -112.86351776]
[233.45133972 -126.55796051]
[245.87457275 -135.49787903]
[261.03097534 -137.62893677]
[275.43777466 -132.46144104]
[285.78436279 -121.18284607]
[289.69314575 -106.38488007]
[286.26596069 -91.46800995]
[276.29034424 -79.86002350]
[262.05856323 -74.22836304]
[246.84104919 -75.86712646]
[238.54017639 -63.37330627]
[230.23930359 -50.87948608]
[221.93843079 -38.38566971]
[213.63755798 -25.89185143]
[205.33668518 -13.39803219]
[197.03581238 -0.90421349]
[188.73493958 11.58960533]
[180.43406677 24.08342361]
[172.13319397 36.57724380]
[163.83232117 49.07106018]
[162.74322510 56.43153763]
[155.22448730 61.73709869]
[146.66378784 74.05433655]
[138.10308838 86.37157440]
[140.44960022 101.18690491]
[152.39755249 110.25588989]
[164.34550476 119.32487488]
[176.29344177 128.39385986]
[188.24139404 137.46284485]
[200.18934631 146.53182983]
[212.13729858 155.60081482]
[224.08523560 164.66981506]
[236.99034119 163.70138550]
[246.76550293 171.55566406]
[248.48422241 183.57131958]
[260.23962402 192.88854980]
[271.99502563 202.20576477]
[285.70419312 195.49591064]
[300.96704102 195.40731812]
[314.75317383 201.95755005]
[324.32528687 213.84606934]
[327.78289795 228.71240234]
[324.43945312 243.60482788]
[314.95880127 255.56642151]
[301.22332764 262.22222900]
[285.96023560 262.25073242]
[272.20001221 255.64625549]
[262.67477417 243.72012329]
[259.27575684 228.84030151]
[262.67782593 213.96116638]
[250.92240906 204.64395142]
[239.16700745 195.32672119]
[221.71861267 193.73594666]
[215.01625061 176.61775208]
[203.06829834 167.54876709]
[191.12036133 158.47978210]
[179.17240906 149.41079712]
[167.22445679 140.34181213]
[155.27650452 131.27282715]
[143.32856750 122.20383453]
[131.38061523 113.13484955]
[126.36713409 120.59037018]
[119.67390442 126.35688782]
[111.82904053 130.08351135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 66]
[6 65]
[7 64]
[18 53]
[19 52]
[20 51]
[21 50]
[23 48]
[24 47]
[25 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[70 109]
[71 108]
[72 107]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[110 146]
[111 145]
[112 144]
[113 143]
[114 142]
[115 141]
[116 140]
[117 139]
[120 137]
[121 136]
[122 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
