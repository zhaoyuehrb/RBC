%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGGCCUCUGGGGUGGGAUCGCGGGCCGUAAGUGGCUGUGGAGCUGGGGUCACUGCGCGGUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[98.54211426 201.16435242]
[83.09653473 205.50180054]
[70.15990448 196.01373291]
[69.65611267 179.97859192]
[81.97161865 169.69715881]
[84.64997101 154.93821716]
[86.99649048 140.12289429]
[89.00998688 125.25864410]
[91.02348328 110.39439392]
[81.41035461 98.87972260]
[66.42545319 98.20674896]
[51.44055939 97.53378296]
[37.30715179 104.64414978]
[24.93982697 96.34362793]
[9.95493126 95.67066193]
[-5.02996445 94.99768829]
[-21.12441635 100.32731628]
[-30.70115089 86.33723450]
[-19.90890694 73.26191711]
[-4.35699177 80.01278687]
[10.62790394 80.68576050]
[25.61280060 81.35873413]
[38.67438889 74.20023346]
[52.11353302 82.54888153]
[67.09842682 83.22185516]
[82.08332825 83.89482880]
[103.93801117 87.63430786]
[115.66548157 78.28195953]
[127.39295197 68.92961121]
[139.12042236 59.57726669]
[150.84790039 50.22491837]
[156.99224854 33.02958298]
[174.24821472 30.74232674]
[185.54429626 20.87324524]
[196.84036255 11.00416470]
[208.13644409 1.13508368]
[219.43251038 -8.73399734]
[230.72857666 -18.60307884]
[242.02465820 -28.47215843]
[247.32649231 -43.37856674]
[262.00170898 -45.92559052]
[273.29779053 -55.79467392]
[278.08322144 -71.48007202]
[294.11874390 -74.91435242]
[304.90835571 -62.56461716]
[299.35266113 -47.13522339]
[283.16687012 -44.49860001]
[271.87078857 -34.62952042]
[267.37692261 -20.42901421]
[251.89373779 -17.17608643]
[240.59765625 -7.30700588]
[229.30158997 2.56207490]
[218.00552368 12.43115616]
[206.70944214 22.30023575]
[195.41337585 32.16931915]
[184.11730957 42.03839874]
[182.91360474 54.28025436]
[173.29641724 62.58419037]
[160.20024109 61.95238876]
[148.47277832 71.30474091]
[136.74530029 80.65708160]
[125.01782990 90.00942993]
[113.29035950 99.36177826]
[105.88773346 112.40789795]
[103.87423706 127.27214050]
[101.86073303 142.13638306]
[103.84712982 151.39727783]
[99.40891266 157.61656189]
[96.73056030 172.37551880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 66]
[8 65]
[9 64]
[10 26]
[11 25]
[12 24]
[14 22]
[15 21]
[16 20]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
