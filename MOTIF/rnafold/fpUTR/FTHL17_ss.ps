%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCGCCUUUCACUAUCCGCCAUUCUUGUCACCUCAGCUGCUGCCCUCGCUACCGCACCGACUUCGCCCGUGUGCUCGCCUGCACUUGCGCUGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-2.40648389 310.18420410]
[-11.09265709 322.44519043]
[-21.43539619 333.34512329]
[-33.22413635 342.66210938]
[-46.21887207 350.20648193]
[-60.15504837 355.82464600]
[-74.74893951 359.40222168]
[-89.70343781 360.86636353]
[-104.71408844 360.18725586]
[-119.47529602 357.37875366]
[-133.68652344 352.49804688]
[-147.05847168 345.64443970]
[-159.31889343 336.95751953]
[-170.21818542 326.61410522]
[-179.53445435 314.82476807]
[-187.07803345 301.82958984]
[-192.69532776 287.89306641]
[-196.27198792 273.29895020]
[-197.73521423 258.34436035]
[-197.05519104 243.33374023]
[-194.24578857 228.57270813]
[-189.36416626 214.36178589]
[-182.50975037 200.99024963]
[-173.82205200 188.73037720]
[-163.47796631 177.83172607]
[-151.68807983 168.51618958]
[-138.69241333 160.97341919]
[-124.75553894 155.35697937]
[-110.16120148 151.78121948]
[-95.20652008 150.31892395]
[-80.19595337 150.99986267]
[-65.43509674 153.81019592]
[-51.22446823 158.69268799]
[-37.85337067 165.54792786]
[-25.59402275 174.23638916]
[-14.69601059 184.58114624]
[-2.92709661 175.28100586]
[8.84181786 165.98086548]
[20.61073112 156.68070984]
[23.96613312 149.94523621]
[32.89336777 147.28118896]
[44.94581985 138.35154724]
[56.56867599 128.86950684]
[67.73664093 118.85568237]
[78.90460205 108.84186554]
[77.26540375 97.48358154]
[81.34891510 86.75872040]
[90.12725067 79.36694336]
[101.39073181 77.16887665]
[112.30414581 80.71781921]
[124.07305908 71.41767883]
[123.13685608 59.35486984]
[128.16622925 48.48382187]
[137.77003479 41.52989197]
[149.42732239 40.17241669]
[160.14860535 44.64044571]
[172.47294617 36.08996201]
[184.79728699 27.53947830]
[197.12161255 18.98899460]
[209.31147766 10.24787903]
[221.36393738 1.31824613]
[221.08448792 -14.19631290]
[230.00520325 -26.89278603]
[244.69589233 -31.88911819]
[259.50769043 -27.26412201]
[268.74514771 -14.79619884]
[268.85626221 0.72047842]
[259.79833984 13.31943130]
[245.05432129 18.15610504]
[230.29357910 13.37070084]
[218.24111938 22.30033302]
[214.67787170 28.92820930]
[205.67210388 31.31332970]
[193.34776306 39.86381149]
[181.02343750 48.41429520]
[168.69909668 56.96478271]
[166.66645813 75.02614594]
[151.93460083 86.19968414]
[133.37319946 83.18659210]
[121.60428619 92.48673248]
[120.40293121 110.33995056]
[106.71554565 121.86540222]
[88.91842651 120.00982666]
[77.75045776 130.02365112]
[66.58249664 140.03746033]
[64.86785889 145.34852600]
[61.54251862 148.99922180]
[57.56271744 150.64718628]
[53.87545395 150.40400696]
[41.82299805 159.33363342]
[29.91087532 168.44963074]
[18.14196014 177.74977112]
[6.37304688 187.04991150]
[-5.39586735 196.35006714]
[2.14931250 209.34432983]
[7.76833773 223.28015137]
[11.34681225 237.87382507]
[12.81188202 252.82823181]
[12.13372135 267.83892822]
[9.32613564 282.60031128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 94]
[37 93]
[38 92]
[39 91]
[41 90]
[42 89]
[43 85]
[44 84]
[45 83]
[50 80]
[51 79]
[56 76]
[57 75]
[58 74]
[59 73]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
