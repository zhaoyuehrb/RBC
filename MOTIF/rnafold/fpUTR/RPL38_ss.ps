%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGAAACGGAAGUCUCGUUCUUUUUCGUCCUUUUCCCCGGUUGCUGCUUGCUGUGAGUGUCUCUAGGGUGAUACGUGGGUGAGAAAGGUCCUGGUCCGCGCCAGAGCCCAGCGCGCCUCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[20.93591690 171.74725342]
[26.46462440 157.80386353]
[19.49264717 155.03953552]
[5.98945522 161.57128906]
[-7.51373577 168.10304260]
[-21.01692772 174.63479614]
[-23.43720818 178.52398682]
[-26.67381859 181.11750793]
[-30.19625664 182.31765747]
[-33.49948502 182.21716309]
[-36.16640472 181.07261658]
[-50.24085236 186.26010132]
[-64.31529999 191.44757080]
[-78.38975525 196.63504028]
[-92.46420288 201.82250977]
[-96.80529785 218.11911011]
[-109.85115051 228.54379272]
[-126.37308502 229.17021179]
[-139.89726257 219.94972229]
[-153.84121704 225.47839355]
[-157.56224060 240.54270935]
[-169.44885254 250.51705933]
[-184.93043518 251.56611633]
[-198.05397034 243.28649902]
[-203.77322388 228.86186218]
[-199.88899231 213.83880615]
[-187.89486694 203.99397278]
[-172.40283203 203.11293030]
[-159.36987305 211.53443909]
[-145.42591858 206.00576782]
[-143.30569458 192.76670837]
[-134.83226013 182.23616028]
[-122.15144348 177.25260925]
[-108.56067657 179.22763062]
[-97.65167236 187.74806213]
[-83.57722473 182.56059265]
[-69.50277710 177.37312317]
[-55.42832565 172.18563843]
[-41.35387421 166.99816895]
[-27.54868317 161.13160706]
[-14.04549122 154.59985352]
[-0.54229975 148.06809998]
[12.96089172 141.53633118]
[27.01826286 130.56846619]
[42.37757492 129.22444153]
[53.80275345 135.51679993]
[64.34458160 124.84580994]
[74.88641357 114.17482758]
[85.42823792 103.50384521]
[85.48348999 73.79730988]
[88.02823639 59.01473999]
[90.57297516 44.23217392]
[93.11772156 29.44960594]
[95.66246033 14.66703892]
[98.20720673 -0.11552826]
[87.84703827 -9.29544449]
[83.43628693 -22.30139923]
[86.03363037 -35.67647552]
[94.84992218 -45.92169571]
[107.48365021 -50.41135406]
[110.38761139 -65.12757111]
[113.29156494 -79.84378815]
[116.19552612 -94.56000519]
[119.09948730 -109.27622223]
[108.45079803 -120.56272125]
[106.50326538 -135.95709229]
[114.00575256 -149.53988647]
[128.07341003 -156.08824158]
[143.29690552 -153.08418274]
[153.82254028 -141.68283081]
[155.60295105 -126.26822662]
[147.95355225 -112.76762390]
[133.81570435 -106.37226105]
[130.91174316 -91.65604401]
[128.00778198 -76.93982697]
[125.10382843 -62.22360992]
[122.19986725 -47.50739670]
[133.72344971 -35.88296890]
[136.10845947 -19.52207947]
[128.22679138 -4.79973269]
[112.98977661 2.42921448]
[110.44503021 17.21178055]
[107.90028381 31.99434853]
[105.35554504 46.77691650]
[102.81079865 61.55948257]
[100.26605988 76.34204865]
[111.66059875 66.58681488]
[125.44556427 72.50075531]
[126.22855377 87.48030090]
[113.13409424 94.79912567]
[127.88458252 97.52367401]
[142.63507080 100.24822998]
[157.61106873 95.14625549]
[168.72125244 105.06658936]
[183.47172546 107.79114532]
[198.22221375 110.51569366]
[212.97270203 113.24024963]
[227.72319031 115.96479797]
[242.98902893 109.97428894]
[255.63941956 120.40978241]
[252.66073608 136.53614807]
[237.11717224 141.76394653]
[224.99862671 130.71528625]
[210.24815369 127.99073029]
[195.49766541 125.26618195]
[180.74717712 122.54162598]
[165.99668884 119.81707764]
[152.07574463 125.11392975]
[139.91052246 114.99871063]
[125.16002655 112.27416229]
[110.40954590 109.54960632]
[96.09922028 114.04567719]
[85.55739594 124.71665955]
[75.01556396 135.38763428]
[64.47373199 146.05862427]
[61.39080048 160.73838806]
[66.74926758 174.74862671]
[72.10772705 188.75886536]
[86.63822937 194.97497559]
[92.43976593 209.67591858]
[86.07037354 224.13989258]
[71.30891418 229.78567505]
[56.91309357 223.26371765]
[51.42369843 208.44338989]
[58.09748459 194.11734009]
[52.73902130 180.10708618]
[47.38055801 166.09684753]
[40.40858078 163.33251953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[19 30]
[20 29]
[46 115]
[47 114]
[48 113]
[49 112]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
