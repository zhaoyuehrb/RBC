%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGCGGGGCCUCCUUGAGGACCCCGGGCUGGGCGCCGCCGCCGGUUCGUCUACUCUUUCCUUCAGCCGCCUCCUUUCAACCUUGUCAACCCGUCGGCGCGGCCUCUGGUGCAGCGGCGGCGGCUCCUGUUCCUGCCGCAGCUCUCUCCCUUUCUUACCUCCCCACCAGAUCCCGGAGAUCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 203.48265076]
[92.50000000 187.64352417]
[92.50000000 172.64352417]
[92.50000000 157.64352417]
[92.50000000 142.64352417]
[92.50000000 127.64351654]
[92.50000000 112.64351654]
[78.11711884 108.38526154]
[69.95098114 120.96755981]
[61.78484726 133.54985046]
[53.61870956 146.13215637]
[45.55632782 158.78118896]
[37.59823990 171.49609375]
[29.64015388 184.21099854]
[21.68206787 196.92590332]
[18.40403366 213.55993652]
[1.51262057 215.01475525]
[-4.56136084 199.18620300]
[8.96716118 188.96781921]
[16.92524719 176.25291443]
[24.88333321 163.53800964]
[32.84141922 150.82310486]
[33.72662735 143.47271729]
[41.03641129 137.96601868]
[49.20254898 125.38372040]
[57.36868668 112.80142212]
[65.53482056 100.21912384]
[67.74721527 85.38317871]
[63.60738754 70.96576691]
[59.46755981 56.54835129]
[55.32772827 42.13093948]
[51.18789673 27.71352577]
[47.04806519 13.29611206]
[42.78980637 -1.08676779]
[38.41341019 -15.43414116]
[34.03701019 -29.78151512]
[28.49679375 -43.72088242]
[21.83021355 -57.15802383]
[15.16363239 -70.59516144]
[8.49705219 -84.03230286]
[1.83047080 -97.46943665]
[-4.83611012 -110.90657806]
[-11.50269127 -124.34371948]
[-18.16927147 -137.78085327]
[-24.83585358 -151.21798706]
[-31.50243378 -164.65513611]
[-40.48002625 -162.74569702]
[-49.64942932 -162.54188538]
[-58.68970108 -164.04830933]
[-67.28490448 -167.20977783]
[-75.13510895 -171.91331482]
[-81.96689606 -177.99217224]
[-87.54286194 -185.23171997]
[-91.66986847 -193.37710571]
[-94.20571899 -202.14213562]
[-95.06409454 -211.21939087]
[-94.21746063 -220.29098511]
[-91.69792938 -229.03968811]
[-87.59609222 -237.16004944]
[-82.05773163 -244.36901855]
[-75.27864838 -250.41584778]
[-67.49774170 -255.09080505]
[-71.87413788 -269.43817139]
[-86.75175476 -272.98837280]
[-97.78199005 -283.43972778]
[-102.07141876 -297.91268921]
[-98.56406403 -312.49194336]
[-88.29923248 -323.28540039]
[-92.67563629 -337.63278198]
[-97.05203247 -351.98016357]
[-101.42843628 -366.32754517]
[-105.80483246 -380.67489624]
[-116.80997467 -387.42303467]
[-120.15366364 -399.47607422]
[-114.56700897 -410.21731567]
[-118.70684052 -424.63473511]
[-133.80288696 -424.52545166]
[-148.36830139 -428.49423218]
[-161.32225037 -436.24649048]
[-171.70346069 -447.20703125]
[-178.74156189 -460.56246948]
[-181.91429138 -475.32174683]
[-180.98620605 -490.38964844]
[-176.02618408 -504.64797974]
[-167.40228271 -517.03875732]
[-155.75447083 -526.64245605]
[-141.94706726 -532.74639893]
[-127.00469208 -534.89770508]
[-112.03616333 -532.93664551]
[-98.15224457 -527.00878906]
[-86.38321686 -517.55401611]
[-77.60241699 -505.27395630]
[-72.46143341 -491.07983398]
[-71.34177399 -476.02499390]
[-74.32652283 -461.22653198]
[-81.19418335 -447.78265381]
[-91.43512726 -436.69097900]
[-104.28942108 -428.77456665]
[-100.14959717 -414.35714722]
[-86.88337708 -402.88018799]
[-91.45745850 -385.05130005]
[-87.08106232 -370.70391846]
[-82.70465851 -356.35656738]
[-78.32826233 -342.00918579]
[-73.95185852 -327.66180420]
[-59.41041946 -324.43502808]
[-48.36304092 -314.29544067]
[-43.84437180 -299.89239502]
[-47.16350555 -285.06402588]
[-57.52676773 -273.81457520]
[-53.15036774 -259.46719360]
[-31.79710770 -257.81604004]
[-13.19481087 -247.11747742]
[-0.98103160 -229.42146301]
[2.43783832 -208.15034485]
[-3.63939524 -187.43696594]
[-18.06529617 -171.32171631]
[-11.39871407 -157.88458252]
[-4.73213339 -144.44743347]
[1.93444765 -131.01029968]
[8.60102844 -117.57315826]
[15.26760960 -104.13601685]
[21.93419075 -90.69888306]
[28.60077095 -77.26174164]
[35.26735306 -63.82460403]
[41.93393326 -50.38746643]
[44.64397812 -65.14062500]
[54.28419876 -76.63262939]
[68.34117889 -81.86725616]
[83.14994812 -79.47973633]
[94.84954071 -70.09253693]
[100.38961792 -56.15311432]
[98.32575989 -41.29577637]
[89.19605255 -29.39416313]
[75.38081360 -23.55128098]
[60.48198318 -25.29050255]
[48.38438416 -34.15791321]
[52.76078415 -19.81054115]
[57.13718033 -5.46316719]
[62.10433960 0.02674193]
[61.46548080 9.15628147]
[65.60530853 23.57369423]
[69.74514008 37.99110794]
[73.88497162 52.40851974]
[78.02480316 66.82593536]
[82.16463470 81.24334717]
[144.05209351 88.11511993]
[155.69114685 97.57727814]
[167.33020020 107.03943634]
[178.96925354 116.50159454]
[190.60830688 125.96375275]
[206.88529968 121.39418793]
[222.52568054 127.36171722]
[231.44313049 141.33235168]
[230.29405212 157.70004272]
[242.08715820 166.96949768]
[253.88026428 176.23893738]
[267.56207275 169.47352600]
[282.82446289 169.32299805]
[296.63702393 175.81726074]
[306.25732422 187.66683960]
[309.77520752 202.51902771]
[306.49221802 217.42488098]
[297.06018066 229.42485046]
[283.35180664 236.13633728]
[268.08895874 236.22676086]
[254.30206299 229.67816162]
[244.72851562 217.79078674]
[241.26914978 202.92486572]
[244.61080933 188.03204346]
[232.81770325 178.76260376]
[221.02459717 169.49314880]
[208.56427002 174.31326294]
[195.24311829 172.32681274]
[184.56071472 163.94741821]
[179.37680054 151.28219604]
[181.14614868 137.60279846]
[169.50709534 128.14064026]
[157.86804199 118.67848969]
[146.22898865 109.21633148]
[134.58993530 99.75417328]
[127.81745148 102.97650909]
[114.27248383 109.42118073]
[107.50000000 112.64351654]
[107.50000000 127.64351654]
[107.50000000 142.64352417]
[107.50000000 157.64352417]
[107.50000000 172.64352417]
[107.50000000 187.64352417]
[113.54634094 203.48265076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 189]
[3 188]
[4 187]
[5 186]
[6 185]
[7 184]
[8 27]
[9 26]
[10 25]
[11 24]
[12 22]
[13 21]
[14 20]
[15 19]
[28 146]
[29 145]
[30 144]
[31 143]
[32 142]
[33 141]
[34 139]
[35 138]
[36 137]
[37 126]
[38 125]
[39 124]
[40 123]
[41 122]
[42 121]
[43 120]
[44 119]
[45 118]
[46 117]
[62 111]
[63 110]
[68 105]
[69 104]
[70 103]
[71 102]
[72 101]
[75 99]
[76 98]
[147 181]
[148 180]
[149 179]
[150 178]
[151 177]
[155 172]
[156 171]
[157 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
