%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACACAGAGUUUUCAAAGGGCAGCCUUAUAUACGGAGUCACCUCUCCCCAGAGAGGUCACAGCCAACAUUCAGAGGCCUCCCAGGGCCCCCUCUCC\
) } def
/len { sequence length } bind def

/coor [
[94.39253235 267.78106689]
[80.05078888 273.27740479]
[64.88481903 270.85070801]
[52.97419739 261.15365601]
[47.52281189 246.79475403]
[49.99706268 231.63645935]
[59.73139191 219.75630188]
[74.10730743 214.34994507]
[76.47732544 199.53836060]
[78.84735107 184.72677612]
[81.21736908 169.91519165]
[70.26922607 166.00759888]
[60.08765793 160.39807129]
[50.93518448 153.23124695]
[43.04779053 144.69192505]
[36.62884140 135.00025940]
[31.84384537 124.40616608]
[28.81617928 113.18277740]
[13.86335659 114.37152863]
[-1.08946466 115.56027985]
[-16.04228592 116.74902344]
[-29.23569870 126.48893738]
[-44.15719986 119.68594360]
[-45.45683289 103.33837128]
[-31.79764366 94.26321411]
[-17.23103523 101.79620361]
[-2.27821398 100.60745239]
[12.67460728 99.41870880]
[27.62742996 98.22995758]
[29.75246048 82.50128174]
[35.25396729 67.61368561]
[43.86751938 54.28275299]
[55.17910385 43.14923859]
[68.64501953 34.74827957]
[83.61802673 29.48366928]
[99.37844086 27.60845566]
[100.80428314 12.67637634]
[92.73509979 -3.78013635]
[103.25076294 -17.73069763]
[104.20211792 -32.70049667]
[97.35565948 -46.96361542]
[105.88459015 -59.17453384]
[106.83595276 -74.14433289]
[107.78730774 -89.11413574]
[108.73867035 -104.08393097]
[109.69002533 -119.05373383]
[110.64138794 -134.02352905]
[111.59274292 -148.99333191]
[103.82958984 -163.43858337]
[112.68688965 -177.24005127]
[129.05302429 -176.19995117]
[136.09190369 -161.38825989]
[126.56254578 -148.04197693]
[125.61119080 -133.07217407]
[124.65982819 -118.10237122]
[123.70847321 -103.13257599]
[122.75711060 -88.16277313]
[121.80575562 -73.19297791]
[120.85439301 -58.22317505]
[127.76890564 -45.03079605]
[119.17192078 -31.74913788]
[118.22055817 -16.77933884]
[126.02502441 -7.38717127]
[125.23789215 5.20311403]
[115.73635864 14.10221767]
[114.31051636 29.03429604]
[126.01882935 32.44304276]
[136.98889160 37.76862717]
[146.90943909 44.85994339]
[155.49900818 53.51578140]
[162.51385498 63.49055099]
[167.75495911 74.50122070]
[171.07360840 86.23538971]
[172.37564087 98.36010742]
[171.62409973 110.53136444]
[168.84033203 122.40379333]
[164.10331726 133.64054871]
[176.59185791 141.94935608]
[189.08041382 150.25816345]
[201.56895447 158.56695557]
[214.05751038 166.87576294]
[230.44905090 167.37528992]
[237.97280884 181.94667053]
[228.88899231 195.60011292]
[212.54225159 194.29011536]
[205.74870300 179.36430359]
[193.26016235 171.05551147]
[180.77160645 162.74670410]
[168.28306580 154.43791199]
[155.79450989 146.12910461]
[138.96481323 161.01365662]
[118.38213348 170.02156067]
[96.02895355 172.28521729]
[93.65893555 187.09680176]
[91.28890991 201.90838623]
[88.91889191 216.71997070]
[100.89007568 226.34214783]
[106.43136597 240.66659546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 96]
[9 95]
[10 94]
[11 93]
[18 29]
[19 28]
[20 27]
[21 26]
[36 66]
[37 65]
[39 62]
[40 61]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
