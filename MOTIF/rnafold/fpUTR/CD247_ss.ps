%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUUUCUCAAAGGCCCCACAGUCCUCCACUUCCUGGGGAGGUAGCUGCAGAAUAAAACCAGCAGAGACUCCUUUUCUCCUAACCGUCCCGGCCACCGCUGCCUCAGCCUCUGCCUCCCAGCCUCUUUCUGAGGGAAAGGACAAG\
) } def
/len { sequence length } bind def

/coor [
[-125.67881775 598.14392090]
[-141.59329224 599.15142822]
[-146.95875549 613.15899658]
[-152.32423401 627.16656494]
[-157.68971252 641.17413330]
[-163.05517578 655.18170166]
[-159.94520569 671.28326416]
[-172.51017761 681.82147217]
[-187.82431030 675.95550537]
[-190.13374329 659.71978760]
[-177.06274414 649.81622314]
[-171.69726562 635.80865479]
[-166.33178711 621.80108643]
[-160.96632385 607.79351807]
[-155.60084534 593.78594971]
[-165.62782288 584.14373779]
[-171.22779846 571.36236572]
[-171.52079773 557.36773682]
[-166.42921448 544.28228760]
[-156.69461060 534.10333252]
[-143.76988220 528.39801025]
[-129.60250854 528.06237793]
[-123.93689728 514.17352295]
[-118.27127838 500.28463745]
[-112.60565186 486.39575195]
[-106.94003296 472.50689697]
[-111.72895050 464.88116455]
[-112.44052124 455.76583862]
[-108.78412628 447.23504639]
[-101.47778320 441.28970337]
[-92.11080933 439.38848877]
[-85.56104279 425.89401245]
[-79.01127625 412.39956665]
[-72.46150970 398.90509033]
[-65.91173553 385.41064453]
[-67.31507111 370.58227539]
[-54.32849884 361.54571533]
[-47.77872849 348.05126953]
[-41.22896194 334.55679321]
[-34.67919159 321.06234741]
[-28.12942314 307.56787109]
[-21.57965469 294.07339478]
[-26.68326950 280.12750244]
[-20.23310661 266.34887695]
[-5.57073784 261.09030151]
[0.97903067 247.59584045]
[7.52879906 234.10136414]
[14.07856750 220.60690308]
[11.84962559 203.23121643]
[27.10286522 192.97521973]
[33.36076736 179.34294128]
[19.93219948 186.02677917]
[4.95269299 185.24295044]
[-7.70497561 177.19413757]
[-14.76831245 163.96125793]
[-14.41117573 148.96551514]
[-6.72589731 136.08387756]
[6.30058289 128.64674377]
[21.30042076 128.57691956]
[34.39558029 135.89242554]
[42.20046616 148.70195007]
[42.69691467 163.69503784]
[51.72127533 151.71334839]
[60.74563599 139.73164368]
[69.76999664 127.74996185]
[78.79435730 115.76827240]
[87.81871796 103.78657532]
[74.15476990 109.97499084]
[61.09346008 117.35077667]
[46.39722824 120.35424805]
[31.48933601 118.69452667]
[17.81353378 112.53234100]
[6.69425869 102.46448517]
[-0.79164153 89.46598053]
[-3.91919446 74.79565430]
[-2.38551164 59.87426376]
[3.66087699 46.14687729]
[13.63440800 34.94292068]
[26.56919479 27.34744072]
[41.21256638 24.09602547]
[56.14638138 25.50355721]
[69.92437744 31.43372345]
[81.21035004 41.30998230]
[79.03505707 56.15141678]
[88.05941772 44.16972351]
[97.08377838 32.18803406]
[101.78328705 15.89843845]
[118.73723602 15.90488338]
[123.42436218 32.19804764]
[109.06546783 41.21239471]
[100.04110718 53.19408417]
[91.01674652 65.17577362]
[95.26701355 71.35520172]
[104.39431000 59.45174026]
[118.53560638 64.45412445]
[118.14776611 79.44911194]
[103.76753998 83.71404266]
[108.01779938 89.89346313]
[122.43474579 85.75201416]
[136.85169983 81.61055756]
[151.26864624 77.46910095]
[164.82272339 67.28465271]
[178.36131287 77.48970032]
[172.30293274 93.32423401]
[155.41009521 91.88604736]
[140.99314880 96.02750397]
[126.57620239 100.16896057]
[112.15925598 104.31041718]
[99.80040741 112.81093597]
[90.77604675 124.79263306]
[81.75168610 136.77432251]
[72.72732544 148.75601196]
[63.70296478 160.73770142]
[54.67860413 172.71939087]
[46.99303436 185.60084534]
[40.73513031 199.23312378]
[44.48332596 211.62409973]
[38.93444061 222.87370300]
[27.57303047 227.15667725]
[21.02326202 240.65113831]
[14.47349358 254.14559937]
[7.92372513 267.64007568]
[12.86350918 282.41290283]
[6.02887869 296.00488281]
[-8.08519268 300.62316895]
[-14.63496113 314.11764526]
[-21.18472862 327.61209106]
[-27.73449707 341.10656738]
[-34.28426743 354.60104370]
[-40.83403397 368.09548950]
[-39.89918137 383.88906860]
[-52.41727448 391.96038818]
[-58.96704483 405.45486450]
[-65.51681519 418.94934082]
[-72.06658173 432.44378662]
[-78.61634827 445.93826294]
[-75.67024231 467.11596680]
[-93.05116272 478.17251587]
[-98.71678162 492.06137085]
[-104.38240051 505.95025635]
[-110.04801941 519.83911133]
[-115.71364594 533.72796631]
[-104.72608185 545.68200684]
[-100.05139923 561.17041016]
[-102.57270050 577.09246826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[31 136]
[32 135]
[33 134]
[34 133]
[35 132]
[37 130]
[38 129]
[39 128]
[40 127]
[41 126]
[42 125]
[45 122]
[46 121]
[47 120]
[48 119]
[50 116]
[51 115]
[62 114]
[63 113]
[64 112]
[65 111]
[66 110]
[67 109]
[84 92]
[85 91]
[86 90]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
