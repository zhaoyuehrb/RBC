%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGGCUCCUGGUUGCCUUAGUAACCCCUCGGCUUUCUGUUCCUGGACGGUGGCGGCCGCCGGCUCU\
) } def
/len { sequence length } bind def

/coor [
[58.94104385 106.56707001]
[43.94493103 106.22562408]
[28.94881821 105.88417053]
[13.95270443 105.54272461]
[-1.04340875 105.20127869]
[-16.03952217 104.85982513]
[-21.32763863 112.26528931]
[-29.14081955 116.73873138]
[-38.01199341 117.53301239]
[-46.31365204 114.58329773]
[-52.55641937 108.50426483]
[-55.65618896 100.46403503]
[-70.34245300 97.41220093]
[-85.02870941 94.36035919]
[-99.71497345 91.30851746]
[-114.40123749 88.25667572]
[-129.08749390 85.20483398]
[-144.48275757 90.85444641]
[-156.89799500 80.14026642]
[-153.56149292 64.08412170]
[-137.90554810 59.20320129]
[-126.03565979 70.51857758]
[-111.34939575 73.57041931]
[-96.66313171 76.62225342]
[-81.97687531 79.67409515]
[-67.29061127 82.72593689]
[-52.60435104 85.77777863]
[-33.30250549 76.33733368]
[-15.69807434 89.86371613]
[-0.70196080 90.20516205]
[14.29415226 90.54660797]
[29.29026604 90.88806152]
[44.28638077 91.22950745]
[59.28249359 91.57095337]
[63.51394653 80.05677795]
[70.92098999 70.27836609]
[80.85894012 63.08680344]
[92.46285248 59.10800171]
[104.72275543 58.68825912]
[116.57161713 61.86411285]
[126.97815704 68.35915375]
[135.03663635 77.60807037]
[140.04566956 88.80587769]
[141.56930542 100.97798157]
[156.25556946 104.02982330]
[170.94183350 107.08166504]
[185.62809753 110.13349915]
[195.01295471 108.80174255]
[200.90635681 113.67298126]
[215.43849182 117.39009857]
[229.97064209 121.10721588]
[244.50277710 124.82433319]
[260.13922119 119.88128662]
[272.05395508 131.14944458]
[267.99011230 147.03707886]
[252.12823486 151.20037842]
[240.78565979 139.35647583]
[226.25352478 135.63935852]
[211.72137451 131.92224121]
[197.18923950 128.20512390]
[182.57626343 124.81976318]
[167.88999939 121.76792145]
[153.20373535 118.71608734]
[138.51747131 115.66424561]
[128.39645386 130.37443542]
[113.03906250 139.48350525]
[95.27724457 141.31173706]
[78.38631439 135.52200317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[44 64]
[45 63]
[46 62]
[47 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
