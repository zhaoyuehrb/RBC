%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:25 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (NT5C)
} def

/sequence { (\
GGCGGACUCCGGAAGCAGCGCUCCCUCCGCUUCCGGCCGAGCCCGCGCCCCCCAGACCCCGAGAGCUCGCAGCUCCGGCCCGGCGGCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 31 0.007350550 ubox
1 38 0.006930972 ubox
1 43 0.196362894 ubox
1 44 0.068597613 ubox
1 49 0.012446987 ubox
2 30 0.008481823 ubox
2 37 0.006934848 ubox
2 42 0.197811580 ubox
2 43 0.066017813 ubox
2 46 0.970469763 ubox
2 48 0.012170219 ubox
3 29 0.008498610 ubox
3 35 0.003564981 ubox
3 36 0.005036569 ubox
3 39 0.086764845 ubox
3 41 0.193808352 ubox
3 45 0.976443291 ubox
3 47 0.011845400 ubox
4 28 0.008512983 ubox
4 34 0.005010851 ubox
4 38 0.129799587 ubox
4 43 0.055935324 ubox
4 44 0.975277780 ubox
4 46 0.008631826 ubox
5 27 0.008512966 ubox
5 33 0.005019956 ubox
5 37 0.130062746 ubox
5 42 0.076799697 ubox
5 43 0.972684959 ubox
6 26 0.008385956 ubox
6 32 0.004882985 ubox
7 36 0.010738142 ubox
7 41 0.963998277 ubox
8 35 0.004748585 ubox
8 36 0.003565983 ubox
8 40 0.957394185 ubox
9 35 0.004275576 ubox
9 36 0.826060439 ubox
9 39 0.562208073 ubox
10 29 0.005295023 ubox
10 35 0.998497788 ubox
10 39 0.013635385 ubox
11 24 0.006400019 ubox
11 25 0.006945215 ubox
11 28 0.005432392 ubox
11 34 0.999734635 ubox
11 38 0.018838094 ubox
12 23 0.006425382 ubox
12 24 0.006928729 ubox
12 27 0.005432514 ubox
12 33 0.999754369 ubox
12 37 0.018738206 ubox
13 22 0.004668135 ubox
13 26 0.005378969 ubox
13 32 0.999339064 ubox
14 22 0.010227163 ubox
14 31 0.995106705 ubox
14 32 0.006547843 ubox
15 21 0.011419538 ubox
15 30 0.994359051 ubox
15 31 0.003606856 ubox
16 20 0.011375287 ubox
16 29 0.992686079 ubox
17 26 0.484220449 ubox
17 31 0.091066984 ubox
18 25 0.517823935 ubox
18 30 0.105003740 ubox
19 29 0.108248250 ubox
20 28 0.121012888 ubox
20 30 0.006759828 ubox
21 29 0.007561935 ubox
27 36 0.003436707 ubox
28 35 0.003476037 ubox
29 34 0.003310857 ubox
34 45 0.004355280 ubox
35 43 0.006741975 ubox
35 44 0.004259632 ubox
36 42 0.009927161 ubox
36 43 0.003958589 ubox
37 41 0.010453510 ubox
41 87 0.009782051 ubox
42 86 0.009122060 ubox
43 85 0.007767382 ubox
43 86 0.004640066 ubox
44 85 0.006090349 ubox
44 88 0.036753016 ubox
45 84 0.007012794 ubox
45 87 0.039417501 ubox
46 83 0.006845206 ubox
46 85 0.030762899 ubox
46 86 0.028701703 ubox
46 88 0.219109997 ubox
47 79 0.003191914 ubox
47 84 0.047832298 ubox
47 87 0.994763792 ubox
48 83 0.047814442 ubox
48 86 0.992852236 ubox
49 82 0.047650184 ubox
49 83 0.008856989 ubox
49 85 0.989064716 ubox
49 86 0.092112819 ubox
50 82 0.009541602 ubox
50 83 0.458235987 ubox
50 85 0.119035792 ubox
50 86 0.048474027 ubox
51 78 0.003285201 ubox
51 82 0.455910850 ubox
51 83 0.811335426 ubox
51 85 0.050072957 ubox
51 86 0.010254679 ubox
52 78 0.009340633 ubox
52 82 0.808671920 ubox
52 83 0.350377725 ubox
52 85 0.010417097 ubox
52 86 0.015223534 ubox
53 77 0.008813563 ubox
53 82 0.356450413 ubox
53 85 0.015452875 ubox
55 75 0.003510303 ubox
56 74 0.003402315 ubox
57 78 0.063296705 ubox
57 83 0.040542231 ubox
57 86 0.004703765 ubox
58 77 0.058104365 ubox
58 78 0.128226453 ubox
58 82 0.040852824 ubox
58 85 0.004725009 ubox
59 77 0.100195404 ubox
59 78 0.987753686 ubox
59 83 0.003690402 ubox
60 69 0.003869082 ubox
60 77 0.993120581 ubox
60 82 0.003689174 ubox
61 68 0.003902923 ubox
61 75 0.007567159 ubox
61 76 0.997131914 ubox
61 81 0.003654459 ubox
62 67 0.003651434 ubox
62 74 0.007151109 ubox
63 73 0.006123510 ubox
63 75 0.999763789 ubox
64 74 0.999800662 ubox
65 73 0.999958365 ubox
66 72 0.999688756 ubox
67 71 0.900602965 ubox
78 84 0.005008675 ubox
78 87 0.016666707 ubox
79 83 0.005217657 ubox
79 86 0.017487889 ubox
80 85 0.017445220 ubox
81 88 0.003273629 ubox
82 87 0.003484750 ubox
2 46 0.9500000 lbox
3 45 0.9500000 lbox
4 44 0.9500000 lbox
5 43 0.9500000 lbox
7 41 0.9500000 lbox
8 40 0.9500000 lbox
9 36 0.9500000 lbox
10 35 0.9500000 lbox
11 34 0.9500000 lbox
12 33 0.9500000 lbox
13 32 0.9500000 lbox
14 31 0.9500000 lbox
15 30 0.9500000 lbox
16 29 0.9500000 lbox
47 87 0.9500000 lbox
48 86 0.9500000 lbox
49 85 0.9500000 lbox
51 83 0.9500000 lbox
52 82 0.9500000 lbox
59 78 0.9500000 lbox
60 77 0.9500000 lbox
61 76 0.9500000 lbox
63 75 0.9500000 lbox
64 74 0.9500000 lbox
65 73 0.9500000 lbox
66 72 0.9500000 lbox
67 71 0.9500000 lbox
showpage
end
%%EOF
