%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCUCCGGAGGAGGCGUGAAUCGCGCAGGGAUUGACUAAUUUGGGGUGGGGGGUGCGGUGGGCG\
) } def
/len { sequence length } bind def

/coor [
[173.77392578 261.01736450]
[172.76148987 244.77105713]
[180.03218079 230.10372925]
[171.55514526 217.72875977]
[163.07809448 205.35380554]
[154.60104370 192.97883606]
[146.12400818 180.60388184]
[137.64695740 168.22891235]
[129.16990662 155.85395813]
[120.69286346 143.47898865]
[112.21582031 131.10401917]
[103.73876953 118.72906494]
[89.51561737 115.96352386]
[81.32706451 104.00970459]
[83.88626862 89.74797821]
[75.40921783 77.37301636]
[64.56045532 67.01423645]
[51.80720139 59.11775589]
[39.05394363 51.22127151]
[26.30068779 43.32479095]
[13.54743099 35.42830658]
[-3.10225868 32.23078156]
[-4.63878489 15.34660435]
[11.16019917 9.19612026]
[21.44391251 22.67505074]
[34.19717026 30.57153320]
[46.95042801 38.46801758]
[59.70368576 46.36449814]
[72.45693970 54.26098251]
[70.36046600 39.40821075]
[76.33135223 25.64781189]
[88.61081696 17.03301620]
[103.58185577 16.10137749]
[116.83463287 23.12731934]
[124.46544647 36.04129410]
[124.22657013 51.03939438]
[116.18837738 63.70380783]
[102.71857452 70.30413818]
[87.78417969 68.89597321]
[96.26123047 81.27093506]
[110.48438263 84.03647614]
[118.67293549 95.99029541]
[116.11373138 110.25202179]
[124.59078217 122.62698364]
[133.06782532 135.00193787]
[141.54487610 147.37690735]
[150.02191162 159.75186157]
[158.49896240 172.12683105]
[166.97601318 184.50178528]
[175.45304871 196.87675476]
[183.93009949 209.25170898]
[192.40715027 221.62667847]
[206.46606445 219.83515930]
[219.83779907 224.32620239]
[229.86952209 234.14736938]
[234.59790039 247.29502869]
[233.13311768 261.12289429]
[225.82571411 272.87457275]
[233.72219849 285.62783813]
[248.94706726 290.68579102]
[254.34968567 305.79177856]
[245.78564453 319.35778809]
[229.82452393 320.97714233]
[218.71034241 309.40759277]
[220.96894836 293.52432251]
[213.07246399 280.77105713]
[197.10038757 281.71096802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[15 40]
[16 39]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
