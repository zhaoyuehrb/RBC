%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCUAGACAGCUCCCCCGGACUUGCCUUACUUUUCCAUCUCCUCCCACCCAGCUAUACCCUCCCACUGGCGGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[110.98522186 181.78283691]
[101.62982178 193.73443604]
[88.58674622 201.49606323]
[73.61997986 204.01799011]
[58.75363541 200.95918274]
[45.99827957 192.73329163]
[37.07896042 180.45280457]
[33.20194244 165.77857971]
[34.89156723 150.69515991]
[41.91932297 137.24244690]
[53.33476257 127.23984528]
[67.59403992 122.04010010]
[82.76870728 122.34643555]
[88.44171143 108.46057129]
[86.73998260 94.58268738]
[97.67243195 85.86643219]
[103.34542847 71.98056793]
[101.40204620 56.27917480]
[113.37810516 47.42347717]
[119.05110168 33.53762054]
[124.72409821 19.65176010]
[130.39709473 5.76590014]
[117.35088348 -1.68066001]
[105.38828278 -10.76643372]
[94.71400452 -21.33595276]
[85.51068878 -33.20835876]
[77.93582153 -46.18049622]
[72.11901093 -60.03039932]
[68.15980530 -74.52107239]
[66.12593842 -89.40456390]
[66.05221558 -104.42620087]
[67.93990326 -119.32894135]
[71.75669098 -133.85778809]
[77.43727875 -147.76411438]
[84.88446045 -160.80996704]
[93.97080231 -172.77214050]
[104.54083252 -183.44590759]
[116.41367340 -192.64866638]
[129.38616943 -200.22291565]
[143.23635864 -206.03906250]
[157.72721863 -209.99758911]
[172.61080933 -212.03074646]
[187.63244629 -212.10374451]
[202.53509521 -210.21534729]
[217.06375122 -206.39787292]
[230.96980286 -200.71661377]
[244.01531982 -193.26881409]
[255.97705078 -184.18190002]
[266.65032959 -173.61137390]
[275.85250854 -161.73808289]
[283.42614746 -148.76522827]
[289.24163818 -134.91477966]
[293.19946289 -120.42372131]
[295.23190308 -105.54003143]
[295.30419922 -90.51839447]
[293.41510010 -75.61582947]
[289.59692383 -61.08735657]
[283.91500854 -47.18157196]
[276.46658325 -34.13641739]
[267.37911987 -22.17511749]
[256.80807495 -11.50234509]
[244.93434143 -2.30072522]
[231.96112061 5.27229118]
[218.11039734 11.08711910]
[203.61915588 15.04426003]
[188.73536682 17.07600212]
[173.71371460 17.14757729]
[158.81124878 15.25776386]
[144.28295898 11.43889809]
[138.60995483 25.32475662]
[132.93696594 39.21061707]
[127.26396179 53.09647751]
[129.61311340 67.80466461]
[117.23129272 77.65356445]
[111.55828857 91.53942871]
[113.26001740 105.41731262]
[102.32756805 114.13356781]
[96.65457153 128.01942444]
[107.70272064 138.42630005]
[114.24188995 152.12313843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 78]
[14 77]
[16 75]
[17 74]
[19 72]
[20 71]
[21 70]
[22 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
