%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCGCGGGUCCGGAAGCGCGGCGCGGGCCCAACGAGCGCACGCGUACACGCGUGCGCAGGGGAAGACCGAGUGCCAGGGGCUGAACCGCAGGGAAGGGGGCGCGGCGCACGCAGU\
) } def
/len { sequence length } bind def

/coor [
[156.22351074 547.61163330]
[168.02436829 537.86492920]
[164.87988281 523.19824219]
[161.73538208 508.53155518]
[158.59089661 493.86483765]
[155.44639587 479.19815063]
[152.30189514 464.53143311]
[149.15740967 449.86474609]
[139.98768616 445.01818848]
[134.95436096 435.69750977]
[135.97215271 424.93145752]
[142.94213867 416.37603760]
[140.57606506 401.56381226]
[138.20999146 386.75158691]
[123.66836548 383.36480713]
[111.49829102 374.64501953]
[103.57244110 361.89569092]
[101.12503052 347.04315186]
[104.55973816 332.34564209]
[113.38348389 320.04992676]
[126.27697754 312.04785156]
[123.91091156 297.23562622]
[121.54483795 282.42343140]
[119.17876434 267.61120605]
[107.00411987 259.10748291]
[104.39357758 244.11947632]
[113.39562988 231.40724182]
[111.02955627 216.59503174]
[108.66348267 201.78282166]
[99.01547241 190.43534851]
[104.47909546 175.58747864]
[102.11302185 160.77525330]
[99.74695587 145.96304321]
[81.55754852 142.10156250]
[66.38648987 131.34959412]
[56.71673203 115.46686554]
[54.13084793 97.05277252]
[59.05205536 79.12103271]
[70.67493439 64.60641479]
[63.11785126 51.64915848]
[55.56076813 38.69190216]
[48.00368118 25.73464775]
[40.44659805 12.77739143]
[32.88951492 -0.17986387]
[25.33242798 -13.13711929]
[17.77534294 -26.09437561]
[10.21825886 -39.05163193]
[-4.28048563 -46.71442795]
[-4.62320852 -63.10999298]
[9.54265499 -71.37197876]
[23.64447784 -63.00115585]
[23.17551422 -46.60871506]
[30.73259926 -33.65145874]
[38.28968430 -20.69420433]
[45.84676743 -7.73694849]
[53.40385437 5.22030687]
[60.96093750 18.17756271]
[68.51802063 31.13481712]
[76.07511139 44.09207153]
[83.63219452 57.04932785]
[96.36348724 54.18034363]
[109.38793945 55.00520325]
[114.80656433 41.01811981]
[108.19441223 26.66350555]
[113.74745178 11.86690903]
[128.17117310 5.40688515]
[142.90823364 11.11605263]
[149.21539307 25.60726357]
[143.35073853 40.28313828]
[128.79365540 46.43674469]
[123.37502289 60.42382812]
[132.56886292 67.56646729]
[139.67315674 76.78997040]
[144.23211670 87.50257874]
[145.95323181 99.01699066]
[144.72607422 110.59447479]
[140.62940979 121.49224091]
[133.92604065 131.01110840]
[125.04605865 138.54037476]
[114.55916595 143.59696960]
[116.92523956 158.40917969]
[119.29131317 173.22140503]
[129.10856628 185.62834167]
[123.47570038 199.41674805]
[125.84176636 214.22895813]
[128.20783997 229.04118347]
[140.72212219 238.31643677]
[142.91064453 253.37184143]
[133.99098206 265.24514771]
[136.35705566 280.05734253]
[138.72312927 294.86956787]
[141.08920288 309.68176270]
[155.83393860 313.26898193]
[168.04904175 322.20401001]
[175.89149475 335.10012817]
[178.19282532 349.97598267]
[174.63314819 364.55999756]
[165.78514099 376.63717651]
[153.02221680 384.38552856]
[155.38827515 399.19775391]
[157.75434875 414.00994873]
[171.19255066 428.92343140]
[163.82411194 446.72024536]
[166.96859741 461.38693237]
[170.11309814 476.05364990]
[173.25759888 490.72033691]
[176.40208435 505.38705444]
[179.54658508 520.05377197]
[182.69107056 534.72045898]
[197.45039368 538.77276611]
[208.62800598 549.22833252]
[213.65539551 563.68463135]
[211.37727356 578.81964111]
[202.31716919 591.15545654]
[188.55700684 597.85748291]
[173.25877380 597.38549805]
[159.93789673 589.84808350]
[151.65541077 576.97723389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[12 101]
[13 100]
[14 99]
[21 92]
[22 91]
[23 90]
[24 89]
[27 86]
[28 85]
[29 84]
[31 82]
[32 81]
[33 80]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
