%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGGUUCAAAAGCAGCUAAACCAAAAGAAGCCUCCAGACAGCCCUGAGAUCACCUAAAAAGCUGCUACCAAGACAGCCACGAAGAUCCUACCAAA\
) } def
/len { sequence length } bind def

/coor [
[215.09640503 319.90048218]
[224.37852478 308.02169800]
[215.10612488 296.23089600]
[201.15672302 291.00946045]
[198.70794678 275.37890625]
[189.43556213 263.58810425]
[180.16317749 251.79731750]
[170.89079285 240.00653076]
[168.38479614 239.83290100]
[165.78749084 238.69973755]
[163.44342041 236.56817627]
[161.70489502 233.51661682]
[160.89384460 229.74020386]
[161.26506042 225.53854370]
[153.97210693 212.43080139]
[146.67915344 199.32305908]
[139.38619995 186.21531677]
[132.09324646 173.10757446]
[124.80030060 159.99984741]
[117.50734711 146.89210510]
[103.50465393 149.93089294]
[89.21476746 148.87796021]
[75.80870056 143.81959534]
[64.38505554 135.17033386]
[55.87996674 123.63893127]
[50.99041367 110.17037964]
[50.11707687 95.86839294]
[53.33152771 81.90497589]
[60.37034607 69.42440796]
[70.65672302 59.44943619]
[63.78332520 46.11690140]
[53.02944946 43.33274841]
[45.80984497 35.18450165]
[44.39986801 24.61348534]
[49.03474045 15.25566578]
[43.02078247 1.51403928]
[37.00682449 -12.22758770]
[30.58311462 -18.98482895]
[31.02775383 -26.50192261]
[25.45281792 -40.42744064]
[10.82772732 -46.41762543]
[4.79907179 -61.02689743]
[10.94354439 -75.58783722]
[25.61573982 -81.46170044]
[40.11090469 -75.16362000]
[45.82931137 -60.43014526]
[39.37833786 -46.00238037]
[44.95327377 -32.07685852]
[50.74845123 -18.24154472]
[56.76240921 -4.49991846]
[62.77636719 9.24170780]
[79.15399170 19.31261635]
[77.11585999 39.24350357]
[83.98925781 52.57603836]
[99.32544708 49.95081329]
[114.72682190 52.16176224]
[128.70516968 58.99524689]
[139.90977478 69.79095459]
[147.25796509 83.50572205]
[150.03968811 98.81430054]
[147.98616028 114.23744965]
[141.29579163 128.28486633]
[130.61508179 139.59915161]
[137.90803528 152.70689392]
[145.20098877 165.81463623]
[152.49394226 178.92236328]
[159.78689575 192.03010559]
[167.07984924 205.13784790]
[174.37280273 218.24559021]
[182.68159485 230.73414612]
[191.95397949 242.52493286]
[201.22636414 254.31573486]
[210.49874878 266.10653687]
[225.11137390 272.17132568]
[226.89692688 286.95849609]
[236.16931152 298.74929810]
[249.90161133 292.52938843]
[264.72354126 289.77725220]
[279.77334595 290.65289307]
[294.17605591 295.10543823]
[307.09432983 302.87597656]
[317.77713013 313.51278687]
[325.60333252 326.39739990]
[330.11798096 340.78079224]
[331.05853271 355.82669067]
[328.37039185 370.66033936]
[322.20974731 384.41934204]
[312.93484497 396.30377197]
[301.08489990 405.62268066]
[287.34884644 411.83425903]
[272.52526855 414.57742310]
[257.47598267 413.69265747]
[243.07597351 409.23138428]
[230.16239929 401.45300293]
[219.48606873 390.80972290]
[211.66766357 377.92034912]
[207.16175842 363.53424072]
[206.23030090 348.48779297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[5 73]
[6 72]
[7 71]
[8 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[30 54]
[31 53]
[35 51]
[36 50]
[37 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
