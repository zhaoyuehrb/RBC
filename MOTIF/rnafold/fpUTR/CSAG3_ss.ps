%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAAUGGCUAGUACUAUGUGUCAACUUGUCUAGGCUAUACUGCUCAGCUGUGUGGUCAAACAGUAGUCUAGAUGUUGCUGUGAAGGUAUUUUGUAGAUGUGAUCAACAUUUACAAUCAGUUGAUUUUAAGUAAAGCAGUUUAACUUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[143.05659485 485.92730713]
[140.92187500 471.07998657]
[128.88136292 462.38735962]
[126.50494385 447.36047363]
[135.70419312 434.79022217]
[133.56947327 419.94290161]
[131.43475342 405.09558105]
[121.96492767 393.59896851]
[127.65950012 378.83813477]
[125.52478027 363.99081421]
[123.39006042 349.14349365]
[113.87442780 341.61404419]
[112.00425720 329.21844482]
[119.32881165 318.55401611]
[117.49739838 303.66625977]
[115.66598511 288.77847290]
[113.83457184 273.89068604]
[100.06943512 268.19976807]
[90.94029999 256.30377197]
[88.97837830 241.33656311]
[94.80985260 227.30477905]
[106.96107483 218.01527405]
[105.12966156 203.12748718]
[103.29824066 188.23971558]
[101.46682739 173.35192871]
[99.63541412 158.46415710]
[97.80400085 143.57638550]
[95.97258759 128.68859863]
[75.47047424 115.41292572]
[72.40502930 91.18106079]
[59.78622818 83.07144928]
[47.16742706 74.96183014]
[34.54862213 66.85221863]
[21.92981911 58.74260712]
[9.31101704 50.63299561]
[-3.30778623 42.52338409]
[-15.92658901 34.41377258]
[-28.54539299 26.30415916]
[-41.16419601 18.19454765]
[-53.78299713 10.08493519]
[-66.87417603 2.76229215]
[-80.38871002 -3.74596381]
[-93.90324402 -10.25422001]
[-107.41777039 -16.76247597]
[-120.93230438 -23.27073288]
[-134.53224182 -15.79936790]
[-149.92211914 -17.78214645]
[-161.18420410 -28.45664787]
[-163.98800659 -43.71831131]
[-157.25540161 -57.69871140]
[-143.57521057 -65.02210236]
[-128.20774841 -62.87248993]
[-117.06212616 -52.07644653]
[-114.42404938 -36.78526688]
[-100.90951538 -30.27700996]
[-87.39498138 -23.76875305]
[-73.88045502 -17.26049614]
[-60.36591721 -10.75224113]
[-63.89754868 -25.33056641]
[-56.24805069 -38.23347855]
[-41.76317596 -42.13071060]
[-28.67192268 -34.80820847]
[-24.41155434 -20.42595291]
[-31.40242958 -7.15464258]
[-45.67338562 -2.53386784]
[-33.05458450 5.57574463]
[-20.43577957 13.68535709]
[-7.81697702 21.79496956]
[4.80182600 29.90458107]
[17.42062950 38.01419449]
[30.03943253 46.12380600]
[42.65823364 54.23341751]
[55.27703857 62.34302902]
[67.89584351 70.45264435]
[80.51464081 78.56225586]
[86.52198029 74.35630798]
[93.39295959 71.79356384]
[100.68730927 71.03823853]
[104.91329956 56.64584351]
[109.13928986 42.25344849]
[113.36528015 27.86105537]
[106.96958923 13.14797306]
[114.61209106 -0.95776016]
[130.43011475 -3.63543439]
[142.28941345 7.16903353]
[141.09255981 23.16737938]
[127.75767517 32.08704376]
[123.53168488 46.47943878]
[119.30569458 60.87183380]
[115.07970428 75.26422882]
[117.72734833 77.08718872]
[120.15673065 79.19225311]
[122.33792877 81.55351257]
[135.98240662 75.32228851]
[149.62689209 69.09106445]
[163.27137756 62.85984039]
[176.91584778 56.62861633]
[190.56033325 50.39738846]
[204.20481873 44.16616440]
[217.84928894 37.93494034]
[231.49377441 31.70371437]
[245.13824463 25.47248840]
[252.06936646 11.00393295]
[267.73455811 7.54245949]
[280.11679077 17.74341393]
[279.71752930 33.78149796]
[266.84298706 43.35366440]
[251.36947632 39.11697006]
[237.72499084 45.34819412]
[224.08052063 51.57941818]
[210.43603516 57.81064606]
[196.79154968 64.04187012]
[183.14707947 70.27309418]
[169.50259399 76.50431824]
[155.85812378 82.73554230]
[142.21363831 88.96677399]
[128.56915283 95.19799805]
[127.80546570 108.13093567]
[121.48091125 119.43775177]
[110.86035919 126.85718536]
[112.69178009 141.74496460]
[114.52319336 156.63273621]
[116.35460663 171.52052307]
[118.18601990 186.40829468]
[120.01743317 201.29608154]
[121.84885406 216.18385315]
[135.88922119 222.25141907]
[144.94760132 234.45152283]
[146.67164612 249.44798279]
[140.69783020 263.20187378]
[128.72235107 272.05926514]
[130.55375671 286.94705200]
[132.38517761 301.83483887]
[134.21658325 316.72262573]
[145.64297485 331.12722778]
[138.23738098 347.00878906]
[140.37210083 361.85610962]
[142.50682068 376.70343018]
[152.12933350 389.26199341]
[146.28207397 402.96084595]
[148.41679382 417.80816650]
[150.55151367 432.65548706]
[162.91958618 442.12484741]
[164.87300110 457.21255493]
[155.76919556 468.94525146]
[157.90391541 483.79257202]
[171.69006348 490.91452026]
[178.62701416 504.79464722]
[176.04737854 520.09582520]
[164.94308472 530.93438721]
[149.58395386 533.14263916]
[135.87588501 525.87158203]
[129.08990479 511.91702271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[5 142]
[6 141]
[7 140]
[9 138]
[10 137]
[11 136]
[14 134]
[15 133]
[16 132]
[17 131]
[22 126]
[23 125]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[78 90]
[79 89]
[80 88]
[81 87]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
