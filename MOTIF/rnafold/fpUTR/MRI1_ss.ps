%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCCCCGCCCCGCUCCCAAGUGCGCGCGGACCCCUAGCUCCCUCUGAGUUGCGCUGGGCUUGGCUGCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[121.03285217 266.70184326]
[131.64141846 255.50086975]
[127.95914459 240.95985413]
[124.27686310 226.41885376]
[120.59457397 211.87785339]
[116.91229248 197.33685303]
[104.02541351 189.95687866]
[100.08391571 175.26269531]
[107.91207886 161.79577637]
[104.22978973 147.25477600]
[100.54750824 132.71377563]
[96.86522675 118.17277527]
[82.13442993 112.39855194]
[75.38344574 95.35209656]
[60.39626312 94.73222351]
[50.87051392 106.98129272]
[35.95488358 111.25955200]
[21.38472939 105.92192841]
[12.76257706 93.02083588]
[13.40382004 77.51701355]
[23.06188583 65.37200165]
[38.02305222 61.25579834]
[52.53444672 66.75116730]
[61.01613617 79.74503326]
[76.00332642 80.36490631]
[88.02831268 71.39832306]
[91.71059418 56.85731888]
[95.39287567 42.31631470]
[99.07515717 27.77531242]
[102.75743866 13.23430729]
[89.21860504 19.69184875]
[74.41562653 17.26863480]
[63.64244461 6.83127213]
[60.75182343 -7.88756990]
[66.77752686 -21.62405205]
[79.56459808 -29.46565247]
[94.54006195 -28.60801125]
[106.34829712 -19.35784340]
[110.76638031 -5.02423239]
[118.97060394 -17.58172989]
[127.17481995 -30.13922691]
[135.37904358 -42.69672394]
[133.50727844 -58.63021088]
[144.89947510 -69.92612457]
[160.81649780 -67.91919708]
[169.04818726 -54.14897919]
[163.27989197 -39.17880249]
[147.93653870 -34.49250031]
[139.73231506 -21.93500519]
[131.52809143 -9.37750721]
[123.32387543 3.17998981]
[117.29844666 16.91658974]
[113.61616516 31.45759392]
[109.93387604 45.99859619]
[106.25159454 60.53960037]
[102.56931305 75.08060455]
[120.88701630 93.94728088]
[111.40623474 114.49048615]
[115.08851624 129.03149414]
[118.77079773 143.57249451]
[122.45307922 158.11349487]
[135.74728394 166.23150635]
[139.27450562 181.03060913]
[131.45329285 193.65457153]
[135.13557434 208.19557190]
[138.81787109 222.73657227]
[142.50015259 237.27757263]
[146.18243408 251.81858826]
[160.84346008 256.62042236]
[170.56330872 268.60073853]
[172.24038696 283.93667603]
[165.33956909 297.73458862]
[152.06286621 305.59158325]
[136.64682007 305.00057983]
[124.01065826 296.15011597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[9 61]
[10 60]
[11 59]
[12 58]
[14 25]
[15 24]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
