%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCCGUGACAGCCGCGGGAAGACAUGAGAGGCUGCUAGAAGGACUUCCCGCGGCCAGCGCCAUCACCUGCCCACGCCGCAGGGAGCCCUGACCAGAGCUCCAGACCUCUGGGUCCAACUGCCUUAUGGAUCCCUCUCCCUGAAUGUCACAUAGGAGAGGGGACAGGGGUUGGCCACACACCUGGAA\
) } def
/len { sequence length } bind def

/coor [
[248.08815002 178.32553101]
[235.01588440 170.96917725]
[221.94363403 163.61282349]
[208.87136841 156.25646973]
[195.79910278 148.90011597]
[184.22224426 155.56973267]
[170.75347900 155.64405823]
[158.91482544 148.99659729]
[151.85496521 137.27253723]
[151.51203918 123.48291779]
[138.56318665 115.91143036]
[125.61434174 108.33995056]
[102.29300690 127.63673401]
[74.70238495 113.18086243]
[60.86803818 118.97835541]
[47.03369141 124.77584076]
[33.19934464 130.57333374]
[19.36499977 136.37081909]
[5.53065300 142.16830444]
[-8.30369377 147.96578979]
[-22.13804054 153.76327515]
[-35.97238541 159.56076050]
[-49.80673218 165.35824585]
[-63.64107895 171.15574646]
[-62.97250748 186.28115845]
[-67.51064301 200.69564819]
[-76.68935394 212.66525269]
[-89.38552094 220.75706482]
[-104.05641174 224.01074219]
[-118.92716980 222.05242920]
[-132.20550537 215.13760376]
[-142.29774475 204.11798096]
[-156.13208008 209.91546631]
[-165.62535095 223.28744507]
[-181.92491150 221.48284912]
[-188.26316833 206.35807800]
[-178.11987305 193.47221375]
[-161.92956543 196.08111572]
[-148.09523010 190.28363037]
[-148.87438965 175.36122131]
[-144.49290466 161.04579163]
[-135.46112061 149.07075500]
[-122.85371399 140.89306641]
[-108.18180847 137.51588440]
[-93.21188354 139.36564636]
[-79.75308228 146.23825073]
[-69.43856812 157.32139587]
[-55.60422134 151.52391052]
[-41.76987457 145.72642517]
[-27.93552780 139.92892456]
[-14.10118103 134.13143921]
[-0.26683477 128.33395386]
[13.56751156 122.53646851]
[27.40185738 116.73898315]
[41.23620605 110.94149780]
[55.07054901 105.14400482]
[68.90489960 99.34651947]
[72.82709503 84.86838531]
[63.81087875 72.88056183]
[54.79466248 60.89274597]
[40.31608200 54.51455688]
[38.84951401 39.69232941]
[29.83329773 27.70450974]
[23.88337898 24.75579643]
[20.79268837 19.95971489]
[20.72496605 15.16796780]
[12.11003685 2.88859606]
[4.60553360 -2.35132718]
[3.45615768 -9.66578293]
[-4.95456839 -22.08591461]
[-13.36529446 -34.50604630]
[-21.77602005 -46.92618179]
[-30.18674660 -59.34631348]
[-45.75918198 -60.77222824]
[-56.73503876 -71.91065979]
[-57.93184662 -87.50237274]
[-48.78451538 -100.18544769]
[-33.61213303 -103.97132111]
[-19.57863426 -97.07241058]
[-13.31020737 -82.74618530]
[-17.76661301 -67.75704193]
[-9.35588741 -55.33690643]
[-0.94516158 -42.91677475]
[7.46556425 -30.49664116]
[15.87629032 -18.07650757]
[24.38940811 -5.72633410]
[33.00433731 6.55303812]
[41.82111740 18.68829346]
[50.83733368 30.67611313]
[64.67101288 36.19684982]
[66.78247833 51.87652969]
[75.79869843 63.86434937]
[84.81491852 75.85216522]
[99.54443359 72.27204895]
[113.58306885 76.73738098]
[118.21832275 62.47153091]
[122.85357666 48.20568466]
[127.48883820 33.93983459]
[132.12408447 19.67398834]
[136.75933838 5.40814114]
[127.53003693 -7.06580973]
[127.42903137 -22.58255577]
[136.49517822 -35.17559433]
[151.24235535 -40.00263977]
[165.99996948 -35.20759964]
[175.09342957 -22.63426399]
[175.02609253 -7.11733484]
[165.82386780 5.37661076]
[151.02519226 10.04339600]
[146.38993835 24.30924416]
[141.75468445 38.57509232]
[137.11943054 52.84093857]
[132.48417664 67.10678864]
[127.84891510 81.37263489]
[133.18582153 95.39109802]
[146.13467407 102.96258545]
[159.08352661 110.53406525]
[174.47004700 103.52973175]
[190.83859253 107.03530121]
[201.78747559 119.47743988]
[203.15545654 135.82785034]
[216.22772217 143.18420410]
[229.29998779 150.54055786]
[242.37223816 157.89691162]
[255.44450378 165.25326538]
[264.70257568 156.63496399]
[275.94964600 150.88958740]
[288.32141113 148.44699097]
[300.87026978 149.48364258]
[312.63793945 153.90997314]
[322.72866821 161.37789917]
[330.37741089 171.30831909]
[335.00778198 182.93586731]
[336.27560425 195.36801147]
[350.98129272 198.32475281]
[365.68698120 201.28150940]
[380.39270020 204.23826599]
[395.09838867 207.19502258]
[409.80407715 210.15177917]
[424.50979614 213.10853577]
[439.21548462 216.06529236]
[456.51293945 209.77455139]
[469.22906494 221.85755920]
[483.98162842 224.57077026]
[495.91818237 214.46864319]
[511.55575562 214.45431519]
[523.51080322 224.53456116]
[526.13842773 239.94979858]
[518.19805908 253.42141724]
[503.43884277 258.58853149]
[488.82962036 253.01138306]
[481.26843262 239.32334900]
[466.51583862 236.61013794]
[456.37042236 243.21846008]
[444.04812622 241.06620789]
[436.25872803 230.77099609]
[421.55303955 227.81423950]
[406.84735107 224.85748291]
[392.14163208 221.90072632]
[377.43594360 218.94396973]
[362.73022461 215.98721313]
[348.02453613 213.03045654]
[333.31884766 210.07369995]
[329.46691895 217.82496643]
[324.20721436 224.69915771]
[317.73281860 230.44384766]
[324.43194580 243.86479187]
[331.13107300 257.28573608]
[337.83023071 270.70666504]
[351.02166748 273.47988892]
[360.07098389 283.20629883]
[361.83425903 296.17736816]
[355.88909912 307.62088013]
[362.36541748 321.15075684]
[376.19168091 329.96929932]
[375.19747925 346.33828735]
[360.40560913 353.41870117]
[347.03262329 343.92678833]
[348.83554077 327.62704468]
[342.35925293 314.09719849]
[326.28009033 309.19546509]
[318.56137085 293.88369751]
[324.40927124 277.40579224]
[317.71014404 263.98486328]
[311.01101685 250.56391907]
[304.31188965 237.14297485]
[284.50286865 238.74559021]
[265.86837769 231.68283081]
[252.02262878 217.27474976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 121]
[10 117]
[11 116]
[12 115]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[32 39]
[33 38]
[58 93]
[59 92]
[60 91]
[62 89]
[63 88]
[66 87]
[67 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[134 163]
[135 162]
[136 161]
[137 160]
[138 159]
[139 158]
[140 157]
[141 156]
[143 153]
[144 152]
[166 186]
[167 185]
[168 184]
[169 183]
[173 180]
[174 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
