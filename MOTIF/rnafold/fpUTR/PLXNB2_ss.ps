%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGCGGCGGACGUGCAGAGAAUCUCGAUGCUGGCCUGGAGCAGAAACUGAGCUGGACCACUGGAGCCUCGGUGAGGGGGUGCGGGGGGCA\
) } def
/len { sequence length } bind def

/coor [
[96.56105042 209.89837646]
[95.05961609 194.97370911]
[93.55818176 180.04904175]
[92.05674744 165.12437439]
[83.08435822 153.23548889]
[89.40145874 138.73016357]
[87.90002441 123.80549622]
[76.60866547 113.93102264]
[61.61704254 114.43224335]
[46.62541962 114.93347168]
[31.64426613 115.68512726]
[16.67776108 116.68701935]
[8.12544250 120.44689941]
[1.19594216 117.46380615]
[-13.79568100 117.96502686]
[-28.78730392 118.46625519]
[-39.55017090 129.72673035]
[-54.76094818 130.02148438]
[-65.42977142 119.69134521]
[-80.42139435 120.19256592]
[-95.41301727 120.69379425]
[-111.04126740 127.26602173]
[-121.68297577 114.06790161]
[-111.94656372 100.18846893]
[-95.91424561 105.70217133]
[-80.92261505 105.20094299]
[-65.93099213 104.69972229]
[-55.97597504 93.68004608]
[-40.77947998 92.95817566]
[-29.28852844 103.47463226]
[-14.29690552 102.97340393]
[0.69471753 102.47217560]
[15.67587280 101.72052002]
[30.64237595 100.71862793]
[37.23847961 97.05690002]
[46.12419510 99.94184875]
[61.11581802 99.44062042]
[76.10744476 98.93939972]
[94.11258698 75.62909698]
[97.58988953 61.03771591]
[101.06719208 46.44633865]
[93.05030060 33.09091568]
[96.78464508 18.34271812]
[109.56639862 10.78214550]
[113.04370117 -3.80923486]
[116.52100372 -18.40061569]
[106.32189178 -30.09496117]
[104.97794342 -45.55372620]
[113.00592041 -58.83269882]
[127.31891632 -64.82584381]
[142.41328430 -61.22867203]
[152.48493958 -49.42437363]
[153.66111755 -33.95193863]
[145.48954773 -20.76083565]
[131.11238098 -14.92331219]
[127.63507843 -0.33193260]
[124.15778351 14.25944710]
[132.15583801 26.77210236]
[128.83721924 41.61937332]
[115.65856934 49.92364120]
[112.18126678 64.51502228]
[108.70396423 79.10639954]
[116.72153473 66.42891693]
[131.48895264 63.79766846]
[143.39181519 72.92574310]
[144.68072510 87.87026215]
[134.51651001 98.90153503]
[119.51705933 98.83777618]
[133.68708801 103.75814819]
[147.85713196 108.67852020]
[162.02716064 113.59889221]
[176.19720459 118.51926422]
[190.30888367 111.40338135]
[205.29269409 116.42944336]
[212.25897217 130.61558533]
[207.07478333 145.54539490]
[192.81578064 152.36131287]
[177.94160461 147.01956177]
[171.27682495 132.68930054]
[157.10679626 127.76892853]
[142.93675232 122.84855652]
[128.76672363 117.92818451]
[114.59668732 113.00781250]
[102.82469177 122.30405426]
[104.32612610 137.22872925]
[113.40590668 150.18511963]
[106.98141479 163.62294006]
[108.48284912 178.54760742]
[109.98428345 193.47227478]
[111.48571777 208.39694214]
[121.49961853 221.38362122]
[115.01040649 236.44422913]
[98.69361877 238.08572388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[6 85]
[7 84]
[8 38]
[9 37]
[10 36]
[11 34]
[12 33]
[14 32]
[15 31]
[16 30]
[19 27]
[20 26]
[21 25]
[39 62]
[40 61]
[41 60]
[44 57]
[45 56]
[46 55]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
