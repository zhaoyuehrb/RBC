%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGUGGUGAGCGAGCCGAAGCGCGGGAAGCAGCUCUUGUGGAUCCUCAGUGGCGGAGGCUCGGUCACCCGGAUAGGUAAAGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[154.19734192 350.81927490]
[155.33265686 335.77355957]
[160.32431030 321.53466797]
[168.83198547 309.07345581]
[180.27558899 299.23950195]
[173.76733398 285.72497559]
[167.90356445 280.96347046]
[167.27673340 271.62979126]
[161.23883057 257.89865112]
[155.20091248 244.16754150]
[149.16300964 230.43641663]
[143.12509155 216.70529175]
[130.91923523 208.16912842]
[132.44708252 192.42185974]
[126.40917206 178.69073486]
[120.37126160 164.95962524]
[114.33335114 151.22850037]
[108.29544830 137.49737549]
[102.25753784 123.76625824]
[87.91259003 120.58703613]
[78.14624023 109.60962677]
[76.65790558 94.99217987]
[84.01134491 82.27164459]
[77.97343445 68.54052734]
[71.69941711 54.91567230]
[65.19116211 41.40113831]
[58.22031403 28.11929703]
[50.79518127 15.08597755]
[43.37004852 2.05265808]
[35.94491959 -10.98066139]
[20.96777725 -15.26119995]
[13.62330246 -28.58461380]
[17.79644012 -42.83664703]
[10.37130928 -55.86996841]
[-5.04423857 -58.49578476]
[-15.12592888 -70.44959259]
[-15.11349678 -86.08716583]
[-5.01281166 -98.02493286]
[10.40689182 -100.62622833]
[23.86490059 -92.66281891]
[29.00675583 -77.89476013]
[23.40462875 -63.29510117]
[30.82975960 -50.26177979]
[45.21758652 -46.58399582]
[52.93338776 -33.47212982]
[48.97823715 -18.40579224]
[56.40336990 -5.37247372]
[63.82850266 7.66084576]
[71.25363159 20.69416618]
[75.74311829 22.83442116]
[78.82563782 27.93145561]
[78.70569611 34.89288330]
[85.21395111 48.40741348]
[91.07772827 53.16892624]
[91.70455170 62.50261688]
[97.74246216 76.23374176]
[112.08740997 79.41296387]
[121.85375977 90.39037323]
[123.34209442 105.00782013]
[115.98865509 117.72835541]
[122.02656555 131.45947266]
[128.06446838 145.19059753]
[134.10238647 158.92170715]
[140.14028931 172.65283203]
[146.17820740 186.38395691]
[158.81593323 195.90226746]
[156.85621643 210.66738892]
[162.89413452 224.39851379]
[168.93203735 238.12962341]
[174.96994019 251.86074829]
[181.00785828 265.59185791]
[187.28187561 279.21673584]
[193.79013062 292.73126221]
[208.61357117 289.91564941]
[223.66059875 291.03350830]
[237.90524292 296.00869751]
[250.37631226 304.50192261]
[260.22351074 315.93411255]
[266.77539062 329.52584839]
[269.58529663 344.35037231]
[268.46160889 359.39697266]
[263.48092651 373.63970947]
[254.98289490 386.10748291]
[243.54687500 395.95025635]
[229.95262146 402.49691772]
[215.12699890 405.30108643]
[200.08085632 404.17156982]
[185.84004211 399.18542480]
[173.37554932 390.68255615]
[163.53718567 379.24273682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 73]
[6 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[23 56]
[24 55]
[25 53]
[26 52]
[27 49]
[28 48]
[29 47]
[30 46]
[33 43]
[34 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
