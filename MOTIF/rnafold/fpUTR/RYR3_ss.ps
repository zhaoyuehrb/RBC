%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCAGCAGUCAGCGCACGCCGAGCGGCUGCCGGGGGAAGCAGAGGCGCCGGAGGCUGGGGCACCGCCGACGCCUCGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[93.40906525 110.40155792]
[79.32424164 115.56079865]
[65.23941040 120.72003174]
[51.15458679 125.87926483]
[37.06976318 131.03849792]
[26.77279663 143.05029297]
[12.16080093 140.16258240]
[-1.92402458 145.32182312]
[-6.71856880 150.43122864]
[-12.51914310 151.93037415]
[-17.24416161 150.29963684]
[-31.67154503 154.40457153]
[-42.82749176 165.62310791]
[-57.18632126 161.66415405]
[-71.61370850 165.76910400]
[-82.63504028 177.91250610]
[-98.60272217 174.17547607]
[-103.09056091 158.40235901]
[-91.48185730 146.81916809]
[-75.71865082 151.34172058]
[-61.29126740 147.23677063]
[-51.16726303 136.31185913]
[-35.77648926 139.97718811]
[-21.34910583 135.87225342]
[-7.08325863 131.23698425]
[7.00156689 126.07775879]
[16.29109192 114.43498993]
[31.91052818 116.95367432]
[45.99535370 111.79444122]
[60.08017731 106.63520050]
[74.16500092 101.47596741]
[88.24983215 96.31673431]
[74.31768799 90.75836182]
[63.70287704 80.15998077]
[58.12292862 66.23646545]
[58.48070908 51.24073410]
[64.71833038 37.59917831]
[75.82651520 27.51908302]
[90.00788116 22.63146591]
[104.96780396 23.72717476]
[118.28569031 30.62891388]
[127.80661774 42.21994400]
[131.99003601 56.62476730]
[130.15905762 71.51260376]
[122.60994720 84.47450256]
[110.56183624 93.41425323]
[125.49784851 94.79827881]
[140.43386841 96.18230438]
[154.88906860 89.75132751]
[166.84814453 98.62995148]
[181.78414917 100.01397705]
[196.23936462 93.58300018]
[208.19844055 102.46161652]
[223.13444519 103.84564209]
[238.07046509 105.22966766]
[253.00646973 106.61369324]
[267.94250488 107.99771881]
[278.20684814 96.51081848]
[293.09292603 93.30791473]
[306.84790039 99.41241455]
[314.28176880 112.29168701]
[329.21777344 113.67571259]
[344.15377808 115.05973816]
[360.48324585 110.50064087]
[369.38461304 124.92984772]
[357.98342896 137.47775269]
[342.76974487 129.99574280]
[327.83374023 128.61172485]
[312.89773560 127.22769928]
[303.22387695 138.52169800]
[288.58142090 141.99479675]
[274.53735352 136.11111450]
[266.55847168 122.93373108]
[251.62245178 121.54970551]
[236.68643188 120.16567993]
[221.75042725 118.78165436]
[206.81440735 117.39762878]
[193.42752075 123.92759705]
[180.40013123 114.94998932]
[165.46411133 113.56596375]
[152.07722473 120.09593201]
[139.04983521 111.11831665]
[124.11382294 109.73429108]
[109.17781067 108.35026550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[7 26]
[8 25]
[11 24]
[12 23]
[14 21]
[15 20]
[46 84]
[47 83]
[48 82]
[50 80]
[51 79]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
