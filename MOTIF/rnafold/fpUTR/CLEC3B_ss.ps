%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCUGCCUUAAGACGUGCAGCCUGGGCCGUGGCUGUCACUGCGUUCGGACCCAGACCCGCUGCAGGCAGCAGCAGCCCCCGCCCGCGCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[42.95365906 384.64837646]
[42.95365906 369.64837646]
[42.95365906 354.64837646]
[42.95365906 339.64837646]
[42.95365906 324.64837646]
[42.95365906 309.64837646]
[42.95365906 294.64837646]
[42.95365906 279.64837646]
[31.94475365 289.83679199]
[17.08112144 291.85482788]
[3.75424790 284.97045898]
[-3.20180941 271.68087769]
[-1.26388025 256.80657959]
[8.86509037 245.74296570]
[23.51102066 242.50309753]
[37.36139297 248.26219177]
[45.39216614 260.93090820]
[49.23533249 246.43159485]
[53.07849884 231.93228149]
[47.24762726 221.19766235]
[50.47248077 208.99725342]
[61.53057861 202.11883545]
[65.84123993 187.75157166]
[58.57599258 174.79966736]
[62.74295425 160.16781616]
[76.37735748 152.63516235]
[80.68802643 138.26791382]
[84.99868774 123.90065002]
[89.30935669 109.53338623]
[86.28028107 95.88361359]
[96.32338715 86.15594482]
[100.63404846 71.78868103]
[97.18899536 56.34711075]
[108.25744629 46.38023758]
[112.56811523 32.01297760]
[116.87878418 17.64571762]
[121.18944550 3.27845860]
[125.50011444 -11.08880138]
[124.29795837 -17.90745735]
[126.51768494 -23.40257263]
[130.58291626 -26.22988892]
[135.81452942 -40.28799057]
[141.04614258 -54.34608841]
[146.27777100 -68.40419006]
[151.50938416 -82.46228790]
[146.84158325 -94.61983490]
[151.63160706 -106.29482269]
[162.75860596 -111.33675385]
[168.44271851 -125.21807098]
[174.12681580 -139.09939575]
[165.85144043 -152.22561646]
[166.90551758 -167.70684814]
[176.88372803 -179.59024048]
[191.94924927 -183.30638123]
[206.30908203 -177.42633057]
[214.44157410 -164.21110535]
[213.21961975 -148.74223328]
[203.11308289 -136.96777344]
[188.00813293 -133.41529846]
[182.32403564 -119.53397369]
[176.63992310 -105.65265656]
[180.00711060 -88.51349640]
[165.56748962 -77.23067474]
[160.33586121 -63.17257309]
[155.10424805 -49.11447525]
[149.87263489 -35.05637360]
[144.64102173 -20.99827194]
[139.86737061 -6.77813482]
[135.55670166 7.58912516]
[131.24604797 21.95638466]
[126.93537140 36.32364655]
[122.62471008 50.69090271]
[126.37808990 65.10483551]
[115.00131226 76.09934998]
[110.69064331 90.46661377]
[113.71971893 104.11638641]
[103.67661285 113.84405518]
[99.36595154 128.21131897]
[95.05528259 142.57858276]
[90.74461365 156.94583130]
[97.98019409 170.74018860]
[93.40390015 185.24922180]
[80.20850372 192.06224060]
[75.89783478 206.42948914]
[80.60462189 224.13969421]
[67.57781219 235.77545166]
[63.73464584 250.27476501]
[59.89147949 264.77407837]
[57.95365906 279.64837646]
[57.95365906 294.64837646]
[57.95365906 309.64837646]
[57.95365906 324.64837646]
[57.95365906 339.64837646]
[57.95365906 354.64837646]
[57.95365906 369.64837646]
[57.95365906 384.64837646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[17 88]
[18 87]
[19 86]
[22 84]
[23 83]
[26 80]
[27 79]
[28 78]
[29 77]
[31 75]
[32 74]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
