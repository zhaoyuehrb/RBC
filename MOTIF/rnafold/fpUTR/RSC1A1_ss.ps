%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGAAACCCGAGUUUGAGGACCUUAUUUUAUUCUACGCUGUUUAGAUUUGUAUCCUCUGGUAAUUUAGUGGCAUUAGUCACCUGCUAAUUAAUCUUUUUCCUUUCCCCUGUGUUCCAUAUAGAGAAAAGUGGUAAAGAAUCUACCUCACUGGGA\
) } def
/len { sequence length } bind def

/coor [
[92.17662048 286.97430420]
[84.56260681 300.25155640]
[71.64426422 308.45980835]
[56.39013290 309.71279907]
[42.30550003 303.72268677]
[32.62691116 291.86587524]
[29.57843399 276.86703491]
[33.86058807 262.17276001]
[44.48936462 251.15969849]
[59.02235031 246.35856628]
[61.41332626 231.55033875]
[55.80365753 217.75248718]
[65.64175415 205.36207581]
[68.03273010 190.55384827]
[70.42370605 175.74563599]
[68.36963654 171.37762451]
[69.07735443 165.66767883]
[73.21801758 160.39767456]
[76.19954681 145.69697571]
[79.18107605 130.99627686]
[82.16260529 116.29558563]
[73.44324493 104.09014893]
[58.56994247 102.14465332]
[43.69664001 100.19916534]
[36.06303406 113.31417847]
[24.02223396 122.48272705]
[9.42794037 126.33243561]
[-5.48796749 124.30677795]
[-18.45672989 116.74529266]
[-27.51779556 104.82713318]
[-31.31518745 90.38729095]
[-46.18848801 88.44179535]
[-61.06178665 86.49629974]
[-75.98677063 84.99804688]
[-90.95000458 83.94837189]
[-105.91323090 82.89869690]
[-120.87645721 81.84902191]
[-131.61088562 93.22030640]
[-147.14915466 94.97989655]
[-160.15457153 86.29697418]
[-164.48637390 71.27134705]
[-158.09921265 56.99765396]
[-144.00892639 50.21549988]
[-128.86849976 54.12721252]
[-119.82678223 66.88579559]
[-104.86355591 67.93547058]
[-89.90032959 68.98514557]
[-74.93710327 70.03481293]
[-72.02079773 67.96032715]
[-67.93791962 67.22676849]
[-63.34457016 68.37438202]
[-59.11629486 71.62300110]
[-44.24299240 73.56849670]
[-29.36969376 75.51398468]
[-21.98601723 62.53667450]
[-10.16435719 53.35007095]
[4.31295919 49.37865067]
[19.24805260 51.25763702]
[32.36116409 58.73159409]
[41.63863754 70.68865967]
[45.64213562 85.32586670]
[60.51543427 87.27135468]
[75.38873291 89.21685028]
[80.82301331 84.04784393]
[66.43572998 79.80448914]
[62.91684341 65.22308350]
[73.78520966 54.88487244]
[88.17257690 59.12795639]
[91.69156647 73.70983124]
[97.12584686 68.54082489]
[95.92652130 53.58884811]
[94.72719574 38.63687134]
[93.52786255 23.68489456]
[92.32853699 8.73291683]
[82.57929230 -4.45360088]
[89.37173462 -19.37991333]
[105.71837616 -20.69110870]
[114.80319977 -7.03834295]
[107.28051758 7.53358984]
[108.47984314 22.48556709]
[109.67916870 37.43754196]
[110.87849426 52.38952255]
[112.07781982 67.34149933]
[118.19367218 53.64491653]
[118.17168427 38.64493179]
[125.52652740 25.57181931]
[138.35801697 17.80311394]
[153.35105896 17.34592438]
[166.63204956 24.31836700]
[174.76979065 36.91905594]
[175.66178894 51.89251328]
[169.07762146 65.37022400]
[156.71833801 73.87011719]
[141.77879333 75.19648743]
[128.68766785 82.51921082]
[143.68692017 82.36914062]
[158.68617249 82.21906281]
[173.68542480 82.06899261]
[188.68466187 81.91891479]
[202.40673828 74.04393768]
[215.21078491 81.65351105]
[230.21003723 81.50344086]
[245.20703125 81.20330811]
[260.20028687 80.75314331]
[275.19351196 80.30298615]
[290.18676758 79.85282135]
[298.97164917 67.19850922]
[313.35522461 62.20184326]
[327.75265503 66.58104706]
[336.70358276 78.45619202]
[351.69683838 78.00603485]
[366.69006348 77.55587006]
[381.68331909 77.10571289]
[396.67657471 76.65554810]
[411.66979980 76.20539093]
[427.32034302 69.68643188]
[437.91705322 82.92071533]
[428.13342285 96.76690674]
[412.11996460 91.19863129]
[397.12670898 91.64879608]
[382.13348389 92.09895325]
[367.14022827 92.54911804]
[352.14700317 92.99927521]
[337.15374756 93.44944000]
[328.93139648 105.84019470]
[314.82260132 111.07527924]
[300.16519165 106.95054626]
[290.63693237 94.84606934]
[275.64367676 95.29622650]
[260.65042114 95.74639130]
[245.65719604 96.19654846]
[239.02862549 99.55960083]
[230.36010742 96.50268555]
[215.36085510 96.65276337]
[202.71163940 104.51700592]
[188.83474731 96.91816711]
[173.83549500 97.06823730]
[158.83624268 97.21831512]
[143.83699036 97.36838531]
[128.83773804 97.51846313]
[126.73247528 105.89794159]
[122.39352417 112.82582092]
[116.47978973 117.77278900]
[109.75124359 120.46401215]
[102.97955322 120.88815308]
[96.86330414 119.27711487]
[93.88177490 133.97781372]
[90.90023804 148.67851257]
[87.91870880 163.37921143]
[85.23191833 178.13661194]
[82.84094238 192.94482422]
[80.44996643 207.75305176]
[85.88861847 222.61009216]
[76.22154236 233.94131470]
[73.83056641 248.74952698]
[86.11402893 257.88052368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 155]
[11 154]
[13 152]
[14 151]
[15 150]
[18 149]
[19 148]
[20 147]
[21 146]
[22 63]
[23 62]
[24 61]
[31 54]
[32 53]
[33 52]
[34 48]
[35 47]
[36 46]
[37 45]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[95 140]
[96 139]
[97 138]
[98 137]
[99 136]
[101 134]
[102 133]
[103 131]
[104 130]
[105 129]
[106 128]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
