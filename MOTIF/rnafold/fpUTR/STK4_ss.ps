%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAAAGCGGAAGUGUGGGAGGGUCUGCGGGGCGGGCUCAGGAGGUCCGCGGGAGGAUGGAGCAGUGAGCGGGUCUGGGCGGCUGCUGGCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.21857452 342.44375610]
[95.01322937 323.26458740]
[95.48439026 308.27200317]
[95.95555115 293.27938843]
[96.42671204 278.28680420]
[82.05296326 268.27807617]
[76.38569641 251.54154968]
[81.81565857 234.56382751]
[96.39443970 224.04089355]
[95.92327881 209.04829407]
[95.45211792 194.05569458]
[94.98095703 179.06311035]
[94.50979614 164.07051086]
[83.51010895 154.09341431]
[82.81870270 138.89549255]
[93.35818481 127.42565918]
[92.88702393 112.43305969]
[85.68312073 100.44992828]
[92.12037659 88.03810120]
[91.64921570 73.04550171]
[91.17805481 58.05290604]
[90.70689392 43.06030655]
[78.04028320 34.29314423]
[73.02348328 19.91659927]
[77.38251495 5.51302862]
[89.24510956 -3.45451641]
[88.77394867 -18.44711494]
[87.59706116 -33.40087509]
[85.71706390 -48.28259659]
[83.83706665 -63.16431427]
[81.95706177 -78.04603577]
[61.45078278 -86.66620636]
[49.80211258 -105.47810364]
[51.20957184 -127.44147491]
[65.01528168 -144.42948914]
[59.49340820 -158.37614441]
[53.97154236 -172.32278442]
[48.44967270 -186.26943970]
[42.92780304 -200.21607971]
[37.40593719 -214.16273499]
[31.88406754 -228.10937500]
[17.79078484 -235.77481079]
[15.13884258 -251.59716797]
[25.96258545 -263.43887329]
[41.95896530 -262.21600342]
[50.85692596 -248.86662292]
[45.83071518 -233.63124084]
[51.35258484 -219.68460083]
[56.87445068 -205.73794556]
[62.39632034 -191.79130554]
[67.91819000 -177.84465027]
[73.44005585 -163.89801025]
[78.96192169 -149.95135498]
[87.83317566 -150.39149475]
[96.55667114 -148.63717651]
[104.59696960 -144.78808594]
[111.45858765 -139.07272339]
[116.71654510 -131.83483887]
[120.04268646 -123.51281738]
[121.22616577 -114.61306000]
[120.18675232 -105.67923737]
[116.98027802 -97.25902557]
[111.79563904 -89.87055969]
[104.94372559 -83.97055054]
[96.83878326 -79.92603302]
[98.71878052 -65.04431152]
[100.59878540 -50.16259384]
[102.47878265 -35.28087234]
[105.20708466 -32.78371429]
[106.76901245 -28.76449966]
[106.42699432 -23.83238983]
[103.76654816 -18.91827583]
[104.23770905 -3.92567778]
[116.63996887 4.27931356]
[121.89480591 18.38075447]
[117.79061127 33.04393768]
[105.69949341 42.58914566]
[106.17065430 57.58174515]
[106.64181519 72.57434082]
[107.11297607 87.56694031]
[114.31687927 99.55007172]
[107.87962341 111.96189880]
[108.35078430 126.95449829]
[119.58966064 137.73991394]
[119.85390472 152.95126343]
[109.50239563 163.59934998]
[109.97355652 178.59194946]
[110.44471741 193.58453369]
[110.91587830 208.57713318]
[111.38703918 223.56973267]
[122.73573303 229.28387451]
[130.47515869 239.26881409]
[133.14761353 251.54154968]
[130.29388428 263.69854736]
[122.53084564 273.38656616]
[111.41931152 278.75796509]
[110.94815063 293.75054932]
[110.47698975 308.74316406]
[110.00582886 323.73574829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[16 83]
[17 82]
[19 80]
[20 79]
[21 78]
[22 77]
[26 73]
[27 72]
[28 68]
[29 67]
[30 66]
[31 65]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
