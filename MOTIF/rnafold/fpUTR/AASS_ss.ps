%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUUGAGCAAACACCUCCUACUUCCCGGCCUUCCAUCCCAGUUUCUUCUAGGAAUUCGGAGCCUCCCCUGCAGCGACUCGGAAGAUUCGAGGCGGCGGGGGACAAGUCGGCGCCCCAGAGCGGACGAGUCACCAGGUGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[102.20507050 377.56338501]
[90.19682312 386.78729248]
[75.84341431 391.60998535]
[60.70180130 391.50836182]
[46.41443634 386.49337769]
[34.53109741 377.10910034]
[26.34080696 364.37341309]
[22.73198318 349.66778564]
[24.09608459 334.58740234]
[30.28514481 320.76806641]
[40.62781906 309.70877075]
[54.00221252 302.60916138]
[68.95757294 300.23937988]
[71.52696991 285.46105957]
[74.09636688 270.68276978]
[76.66576385 255.90446472]
[79.23516083 241.12617493]
[81.80455780 226.34786987]
[70.01458740 214.97312927]
[67.27447510 198.65327454]
[74.85325623 183.75628662]
[89.95426178 176.21401978]
[92.20509338 161.38386536]
[94.45592499 146.55369568]
[96.70675659 131.72352600]
[81.17447662 125.50539398]
[71.01146698 112.34351349]
[68.94995880 95.94541931]
[75.45825195 80.86445618]
[61.96379089 74.31468201]
[48.46932602 67.76491547]
[51.87726212 82.37265015]
[44.12744904 95.21556854]
[29.61523438 99.00972748]
[16.57130051 91.60325623]
[12.39358330 77.19677734]
[19.45149803 63.96099854]
[33.74261093 59.40270233]
[21.20372772 51.17005920]
[8.66484451 42.93741226]
[-7.11763334 41.83109283]
[-13.51012135 28.37801170]
[-26.04900360 20.14536858]
[-38.58788681 11.91272354]
[-51.12677002 3.68007946]
[-63.66564941 -4.55256510]
[-76.20452881 -12.78520966]
[-88.74341583 -21.01785278]
[-105.30223846 -24.65676117]
[-106.38948059 -41.57580948]
[-90.43261719 -47.30422211]
[-80.51077271 -33.55673599]
[-67.97188568 -25.32409096]
[-55.43300629 -17.09144783]
[-42.89412308 -8.85880280]
[-30.35524178 -0.62615836]
[-17.81635857 7.60648584]
[-5.27747726 15.83913040]
[9.60813618 16.35659790]
[16.89748955 30.39853096]
[29.43637085 38.63117599]
[41.97525406 46.86381912]
[55.01909637 54.27045441]
[68.51355743 60.82022095]
[82.00801849 67.36998749]
[96.33251953 62.91929626]
[103.73915863 49.87545776]
[111.14579010 36.83161545]
[118.55242157 23.78777504]
[125.95905304 10.74393463]
[133.36569214 -2.29990625]
[140.77232361 -15.34374714]
[148.17895508 -28.38758850]
[148.26486206 -44.20856094]
[161.27755737 -51.45557022]
[168.68418884 -64.49941254]
[169.02420044 -71.21970367]
[172.26141357 -76.00151825]
[176.70048523 -77.93518829]
[184.66143799 -90.64830017]
[192.62239075 -103.36141968]
[200.58334351 -116.07453156]
[208.54429626 -128.78764343]
[216.50524902 -141.50076294]
[219.78703308 -158.13404846]
[236.67877197 -159.58506775]
[242.74917603 -143.75514221]
[229.21835327 -133.53981018]
[221.25740051 -120.82669067]
[213.29646301 -108.11357880]
[205.33551025 -95.40046692]
[197.37455750 -82.68735504]
[189.41360474 -69.97423553]
[181.72802734 -57.09278107]
[174.32139587 -44.04893875]
[174.76525879 -29.16094780]
[161.22279358 -20.98095512]
[153.81616211 -7.93711376]
[146.40953064 5.10672712]
[139.00289917 18.15056801]
[131.59626770 31.19440842]
[124.18962860 44.23825073]
[116.78299713 57.28208923]
[109.37636566 70.32592773]
[120.65019226 76.46036530]
[128.55105591 86.67577362]
[131.69247437 99.28409576]
[129.48121643 112.16902924]
[143.60098267 117.23187256]
[157.72074890 122.29471588]
[173.32260132 119.66933441]
[182.69148254 131.24833679]
[196.81124878 136.31118774]
[209.55752563 127.46177673]
[225.07028198 127.82819366]
[237.38452148 137.26953125]
[241.76519775 152.15541077]
[236.52781677 166.76190186]
[223.68629456 175.47251892]
[208.17843628 174.93783569]
[195.96733093 165.36346436]
[191.74839783 150.43093872]
[177.62864685 145.36810303]
[163.03672791 148.35560608]
[152.65789795 136.41447449]
[138.53814697 131.35163879]
[124.41838074 126.28878784]
[111.53691864 133.97436523]
[109.28608704 148.80451965]
[107.03525543 163.63468933]
[104.78443146 178.46485901]
[115.31348419 187.42362976]
[119.98608398 200.31935120]
[117.67642975 213.72956848]
[109.09681702 224.15158081]
[96.58286285 228.91726685]
[94.01346588 243.69557190]
[91.44406891 258.47387695]
[88.87467194 273.25216675]
[86.30527496 288.03045654]
[83.73587036 302.80877686]
[97.01374817 310.08728027]
[107.20702362 321.28442383]
[113.20999908 335.18560791]
[114.37152100 350.28295898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[22 131]
[23 130]
[24 129]
[25 128]
[29 65]
[30 64]
[31 63]
[38 62]
[39 61]
[40 60]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 98]
[73 97]
[75 95]
[76 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
[84 88]
[108 127]
[109 126]
[110 125]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
