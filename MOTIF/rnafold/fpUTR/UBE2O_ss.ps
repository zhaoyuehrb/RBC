%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCCCGCGCCUCGUUCGCCGCCGCUGUCGCCGCCGCCGCCCGAGACUCGCGCAGAGCAGUU\
) } def
/len { sequence length } bind def

/coor [
[97.58670807 255.96049500]
[107.25731659 243.46029663]
[105.12258911 228.61297607]
[100.90251923 222.21612549]
[103.25704956 213.01017761]
[101.83120728 198.07809448]
[90.21794128 188.82241821]
[88.55921936 173.69947815]
[98.34617615 161.58117676]
[96.92033386 146.64909363]
[95.49449158 131.71701050]
[94.06864929 116.78493500]
[82.37909698 102.53350067]
[89.58004761 85.56602478]
[86.74127960 70.83709717]
[83.90251160 56.10816574]
[81.06374359 41.37923431]
[71.35352325 35.54956818]
[66.73899078 25.45234489]
[68.60930634 14.73671913]
[76.05841064 7.12035418]
[74.63256836 -7.81172466]
[65.61851501 -20.81393242]
[72.11096954 -34.21905136]
[70.68513489 -49.15113068]
[61.67107773 -62.15333557]
[68.16353607 -75.55845642]
[66.73770142 -90.49053192]
[53.75564957 -99.20835876]
[49.46422195 -114.24556732]
[55.88969040 -128.50204468]
[69.99815369 -135.24633789]
[85.12802124 -131.29397583]
[94.13542938 -118.51114655]
[92.76736450 -102.93352509]
[81.66977692 -91.91637421]
[83.09561920 -76.98429871]
[92.00769043 -65.05013275]
[85.61721039 -50.57696915]
[87.04305267 -35.64488983]
[95.95512390 -23.71072578]
[89.56464386 -9.23756504]
[90.99048615 5.69451380]
[103.47475433 20.17053986]
[95.79267120 38.54046631]
[98.63144684 53.26939392]
[101.47021484 67.99832916]
[104.30898285 82.72725677]
[113.21141052 88.06795502]
[117.62090302 97.46649933]
[116.03789520 107.72663116]
[109.00073242 115.35909271]
[110.42657471 130.29116821]
[111.85240936 145.22325134]
[113.27825165 160.15533447]
[125.18174744 170.20245361]
[126.41503906 185.36601257]
[116.76329041 196.65225220]
[118.18912506 211.58433533]
[119.96990967 226.47825623]
[122.10463715 241.32557678]
[134.90522766 250.59490967]
[137.31968689 266.21368408]
[127.91553497 278.91555786]
[112.27210999 281.16473389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[5 59]
[6 58]
[9 55]
[10 54]
[11 53]
[12 52]
[14 48]
[15 47]
[16 46]
[17 45]
[21 43]
[22 42]
[24 40]
[25 39]
[27 37]
[28 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
