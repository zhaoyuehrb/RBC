%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGGAGAGUUCCAGGGAAGAACCCCACCCCCACUCCAACCAUGUCACAAUGGCUGGAGCUCUGAGGGGCCCAGGCUCCCUGAGCCAGGAGGAGAGGAGAAAGUCCAAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[86.26914978 194.20437622]
[81.86631012 208.54365540]
[77.46347046 222.88293457]
[81.65860748 238.73641968]
[69.83750916 250.10275269]
[54.16070557 245.28924561]
[50.75515366 229.24760437]
[63.12419128 218.48010254]
[67.52703094 204.14082336]
[71.92987061 189.80152893]
[75.74671173 175.29527283]
[78.97126770 160.64596558]
[82.19582367 145.99665833]
[85.42038727 131.34735107]
[77.97742462 126.65009308]
[71.96173859 120.22566223]
[58.18254852 126.15304565]
[44.40335464 132.08041382]
[38.78715134 146.85316467]
[24.33596611 153.25151062]
[9.62343121 147.47943115]
[3.37823153 132.96141052]
[9.30553341 118.31071472]
[23.88877487 112.21936035]
[38.47597504 118.30122375]
[52.25516891 112.37384796]
[66.03436279 106.44647217]
[67.54869843 88.07798004]
[78.28604126 73.09785461]
[71.62136078 59.65977478]
[64.95668793 46.22169113]
[58.29201126 32.78360748]
[51.44598389 19.43700027]
[44.41985703 6.18431950]
[36.86129761 -6.77207565]
[28.78277779 -19.41080666]
[20.70425797 -32.04953766]
[12.62573814 -44.68827057]
[4.54721880 -57.32699966]
[-9.40442276 -64.78771973]
[-9.73961258 -79.67855072]
[-17.81813240 -92.31728363]
[-25.89665222 -104.95600891]
[-33.97517014 -117.59474182]
[-49.46190262 -120.74699402]
[-58.11389923 -133.97267151]
[-54.79808426 -149.42521667]
[-41.48167419 -157.93688965]
[-26.06505775 -154.45788574]
[-17.69463921 -141.05223083]
[-21.33644104 -125.67326355]
[-13.25792027 -113.03453064]
[-5.17940140 -100.39579773]
[2.89911819 -87.75706482]
[16.27293015 -81.20036316]
[17.18594933 -65.40551758]
[25.26446915 -52.76678848]
[33.34298706 -40.12805557]
[41.42150879 -27.48932648]
[49.50002670 -14.85059547]
[52.98518372 -13.75676727]
[56.07676315 -10.84154797]
[57.88736725 -6.32748508]
[57.67253494 -0.84180689]
[64.69866180 12.41087341]
[70.69152832 16.90622902]
[71.73009491 26.11893082]
[78.39476776 39.55701447]
[85.05944824 52.99509811]
[91.72412109 66.43318176]
[117.11669159 64.49343109]
[140.22033691 81.52176666]
[154.43513489 76.73223877]
[165.04238892 64.99354553]
[179.57395935 68.26198578]
[193.78875732 63.47246552]
[208.00355530 58.68294144]
[222.21835327 53.89342117]
[236.43315125 49.10389709]
[249.51254272 38.31660461]
[263.49899292 47.89863586]
[258.16326904 63.99106979]
[241.22267151 63.31869507]
[227.00787354 68.10821533]
[212.79307556 72.89774323]
[198.57827759 77.68726349]
[184.36347961 82.47678375]
[174.77296448 93.87290192]
[159.22465515 90.94703674]
[145.00985718 95.73656464]
[143.19982910 103.01486969]
[157.61624146 98.87154388]
[168.41273499 109.28479004]
[164.79293823 123.84147644]
[150.37660217 127.98506927]
[139.57975769 117.57148743]
[137.76972961 124.84980011]
[148.08522034 135.73973083]
[158.40071106 146.62966919]
[174.33439636 148.49969482]
[182.68414307 162.19863892]
[177.04473877 177.21784973]
[161.74224854 182.03587341]
[148.51542664 172.95672607]
[147.51077271 156.94515991]
[137.19528198 146.05522156]
[126.87979126 135.16528320]
[117.31985474 137.19737244]
[108.20861816 136.89996338]
[100.06969452 134.57189941]
[96.84513855 149.22120667]
[93.62057495 163.87051392]
[90.39601898 178.51983643]
[92.07060242 183.74807739]
[91.53363037 188.58200073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 113]
[12 112]
[13 111]
[14 110]
[16 27]
[17 26]
[18 25]
[29 70]
[30 69]
[31 68]
[32 67]
[33 65]
[34 64]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
[72 90]
[73 89]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
