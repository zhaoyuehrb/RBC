%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAUAGAGUUAAGAAGUCUAGGUCUGCUUCCAGAAGAAAACAGUUCCACGUUGCUUGAAAUUGAAAAUCAAGAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[86.53794861 177.54263306]
[75.63735962 167.23841858]
[70.02577972 153.32762146]
[70.72531128 138.34393311]
[77.60853577 125.01647186]
[89.42358398 115.77178192]
[76.15215302 122.76243591]
[62.88072586 129.75309753]
[49.60929871 136.74374390]
[41.00535202 150.02088928]
[26.13883018 149.10668945]
[12.86740398 156.09733582]
[1.67140198 168.82862854]
[-13.66171169 161.59454346]
[-10.95496559 144.85806274]
[5.87675095 142.82591248]
[19.14817810 135.83526611]
[26.80286407 123.05812836]
[42.61864853 123.47231293]
[55.89007568 116.48166656]
[69.16149902 109.49101257]
[82.43292999 102.50035858]
[87.83559418 88.50710297]
[82.70529175 74.41171265]
[68.35477448 63.06904984]
[71.76178741 45.96890640]
[66.08879089 32.08304596]
[60.41579056 18.19718742]
[45.63624573 7.41950035]
[48.37763214 -9.79989052]
[42.17047119 -23.45533562]
[35.96331024 -37.11077881]
[21.50699615 -44.06739807]
[18.07314491 -59.73865128]
[28.29591370 -72.10289764]
[44.33326721 -71.67534637]
[53.88272476 -58.78396988]
[49.61875534 -43.31793976]
[55.82591629 -29.66249657]
[62.03307724 -16.00705147]
[73.37908936 -11.36332893]
[78.58895874 0.17924118]
[74.30165100 12.52418900]
[79.97464752 26.41004944]
[85.64764404 40.29590988]
[96.80506134 45.37608337]
[101.56344604 57.11198807]
[96.80068207 69.28141022]
[101.93098450 83.37680054]
[104.04685974 68.52677917]
[115.57444763 58.92914581]
[130.56204224 59.53917313]
[141.27149963 70.04190826]
[142.17352295 85.01476288]
[132.80236816 96.72721863]
[117.99440002 99.13169098]
[132.18663025 103.98770142]
[146.37884521 108.84371185]
[160.57107544 113.69971466]
[174.76329041 118.55572510]
[186.79220581 108.89607239]
[202.13635254 107.29589844]
[215.89949036 114.26582336]
[223.68983459 127.58174896]
[223.02151489 142.99462891]
[214.10780334 155.58627319]
[199.79302979 161.33871460]
[184.64497375 158.41638184]
[173.49732971 147.75178528]
[169.90728760 132.74795532]
[155.71505737 127.89193726]
[141.52284241 123.03593445]
[127.33061218 118.17992401]
[113.13838959 113.32391357]
[126.59111023 119.95899963]
[136.05223083 131.59890747]
[139.79850769 146.12355042]
[137.14759827 160.88745117]
[128.58236694 173.20153809]
[115.66282654 180.82292175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[12 16]
[23 49]
[24 48]
[26 45]
[27 44]
[28 43]
[30 40]
[31 39]
[32 38]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
