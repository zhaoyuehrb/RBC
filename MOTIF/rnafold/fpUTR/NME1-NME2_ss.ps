%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUCUCCGGCAGCGGAUCUGCGCAGAAGCGUUCCGUGCGUGCAAGUGCUGCGAACCACGUGGGUCCCGGGCGCGUUUCGGGUGCUGGCGGCUGCAGCCGGAGUUCAAACCUAAGCAGCUGGAAGGAACC\
) } def
/len { sequence length } bind def

/coor [
[155.48522949 281.08651733]
[141.32348633 276.14233398]
[132.62246704 263.92379761]
[132.58166504 248.92385864]
[141.21606445 236.65817261]
[155.35070801 231.63702393]
[169.78862000 235.70710754]
[162.28862000 222.71672058]
[154.78862000 209.72633362]
[147.28862000 196.73596191]
[139.78862000 183.74557495]
[132.28862000 170.75520325]
[119.22428894 163.60169983]
[119.02490234 147.78175354]
[111.52490234 134.79138184]
[104.02490234 121.80099487]
[96.52490234 108.81061554]
[91.79952240 106.29991150]
[88.86322021 101.28678131]
[88.99401855 95.01882172]
[82.12062073 81.68629456]
[75.24722290 68.35375977]
[68.37382507 55.02122879]
[61.59362411 48.75229263]
[61.49977112 41.28862000]
[54.94560242 27.79629326]
[48.39143753 14.30396748]
[38.47822571 13.90822029]
[29.46633148 9.90073872]
[22.61414719 2.88829541]
[18.86098480 -6.10614681]
[18.69844055 -15.79253197]
[22.10642815 -24.79870415]
[28.56210899 -31.86478996]
[23.32014656 -45.91903687]
[18.07818222 -59.97328186]
[12.83622074 -74.02752686]
[-1.62176216 -85.35830688]
[1.84484243 -102.51904297]
[-3.73009443 -116.44455719]
[-9.30503082 -130.37007141]
[-14.87996769 -144.29559326]
[-20.45490456 -158.22111511]
[-26.02984238 -172.14663696]
[-43.09821701 -172.95899963]
[-58.06975555 -181.08105469]
[-67.99269867 -194.85717773]
[-70.93431091 -211.52244568]
[-66.35716248 -227.75750732]
[-55.21659851 -240.34977722]
[-61.44782639 -253.99424744]
[-67.67904663 -267.63873291]
[-73.91027832 -281.28320312]
[-80.14150238 -294.92770386]
[-94.61005402 -301.85882568]
[-98.07153320 -317.52398682]
[-87.87057495 -329.90625000]
[-71.83248901 -329.50695801]
[-62.26032257 -316.63244629]
[-66.49701691 -301.15890503]
[-60.26579666 -287.51443481]
[-54.03456879 -273.86996460]
[-47.80334473 -260.22546387]
[-41.57212067 -246.58099365]
[-28.50261879 -247.37069702]
[-15.92031002 -243.63403320]
[-5.34875917 -235.80056763]
[1.92412925 -224.79731750]
[5.00299406 -211.93905640]
[3.49520111 -198.77125549]
[-2.43923640 -186.88433838]
[-12.10432243 -177.72157288]
[-6.52938604 -163.79605103]
[-0.95444912 -149.87052917]
[4.62048769 -135.94500732]
[10.19542408 -122.01949310]
[15.77036095 -108.09397888]
[26.81125259 -103.00447845]
[31.53939819 -91.36883545]
[26.89046669 -79.26949310]
[32.13242722 -65.21524048]
[37.37439346 -51.16099930]
[42.61635590 -37.10675430]
[61.82896423 -30.38226509]
[70.13980103 -11.48532200]
[61.88376236 7.74979973]
[68.43793488 21.24212646]
[74.99209595 34.73445511]
[81.70635986 48.14783096]
[88.57975769 61.48036575]
[95.45315552 74.81289673]
[102.32655334 88.14542389]
[109.51528168 101.31061554]
[117.01528168 114.30099487]
[124.51528168 127.29137421]
[132.01528931 140.28175354]
[145.61607361 148.36441040]
[145.27900696 163.25520325]
[152.77900696 176.24557495]
[160.27900696 189.23596191]
[167.77900696 202.22633362]
[175.27900696 215.21672058]
[182.77900696 228.20710754]
[191.47985840 240.42573547]
[201.30276489 251.76197815]
[211.12568665 263.09823608]
[220.94859314 274.43447876]
[236.30752563 273.24722290]
[249.26899719 281.23806763]
[254.97238159 295.16415405]
[251.42436218 309.60537720]
[261.24728394 320.94161987]
[276.50262451 318.64434814]
[290.56890869 324.98028564]
[298.95755005 337.92761230]
[298.99182129 353.35494995]
[290.66079712 366.33944702]
[276.62283325 372.73782349]
[261.35739136 370.50836182]
[249.73567200 360.36245728]
[245.46607971 345.53768921]
[249.91102600 330.76452637]
[240.08811951 319.42828369]
[225.28892517 320.88500977]
[212.31628418 313.25778198]
[206.25138855 299.29101562]
[209.61235046 284.25738525]
[199.78944397 272.92114258]
[189.96652222 261.58489990]
[180.14361572 250.24865723]
[179.26789856 265.22305298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 103]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[14 96]
[15 95]
[16 94]
[17 93]
[20 92]
[21 91]
[22 90]
[23 89]
[25 88]
[26 87]
[27 86]
[34 83]
[35 82]
[36 81]
[37 80]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[104 130]
[105 129]
[106 128]
[107 127]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
