%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCGUCGGCCCGCCCCUUGGCUUCUGCACUGAUGGUGGGUGGAUGAGUAAUGCAUCCAGGAAGCCUGGAGGCCUGUGGUUUCCGCACCCGCUGCCACCCCCGCCCCUAGCGUGGACAUUUAUCCUCUAGCGCUCAGGCCCUGCCGCCAUCGCCGCAGAUCCAGCGCCCAGAGAGACACCAGAGAACCCACC\
) } def
/len { sequence length } bind def

/coor [
[-34.35482407 234.16139221]
[-42.48162079 221.55523682]
[-53.38601685 231.85543823]
[-64.29041290 242.15563965]
[-75.19480896 252.45584106]
[-86.09920502 262.75604248]
[-97.00360107 273.05624390]
[-101.72272491 288.15725708]
[-116.28798676 291.27212524]
[-127.19238281 301.57232666]
[-138.09678650 311.87252808]
[-149.00117493 322.17269897]
[-159.90557861 332.47290039]
[-170.80996704 342.77310181]
[-181.71437073 353.07330322]
[-176.65600586 368.53018188]
[-178.83323669 384.58862305]
[-187.76034546 398.04367065]
[-201.60964966 406.23233032]
[-217.58541870 407.56042480]
[-232.48823547 401.81289673]
[-243.22352600 412.28924561]
[-247.13769531 428.21441650]
[-262.95968628 432.52676392]
[-274.41320801 420.79013062]
[-269.71585083 405.07812500]
[-253.69985962 401.55392456]
[-242.96455383 391.07760620]
[-248.02952576 378.15347290]
[-247.78244019 364.23114014]
[-242.22760010 351.41534424]
[-232.17420959 341.65612793]
[-219.11865234 336.45211792]
[-205.02180481 336.62051392]
[-192.01457214 342.16891479]
[-181.11016846 331.86871338]
[-170.20578003 321.56851196]
[-159.30137634 311.26831055]
[-148.39698792 300.96810913]
[-137.49258423 290.66790771]
[-126.58818817 280.36770630]
[-122.64902496 266.00344849]
[-107.30380249 262.15185547]
[-96.39940643 251.85165405]
[-85.49501038 241.55145264]
[-74.59061432 231.25125122]
[-63.68621445 220.95104980]
[-52.78181839 210.65084839]
[-53.81621552 203.22251892]
[-68.67289734 205.29107666]
[-70.74122620 190.43437195]
[-55.88500214 188.36587524]
[-56.91939926 180.93754578]
[-70.22299194 174.00830078]
[-86.03669739 174.49559021]
[-93.75035095 161.75398254]
[-107.05394745 154.82473755]
[-120.35754395 147.89550781]
[-133.66114807 140.96626282]
[-146.96473694 134.03703308]
[-160.26834106 127.10778809]
[-177.10926819 125.15345764]
[-179.89334106 108.42966461]
[-164.59382629 101.12478638]
[-153.33909607 113.80419159]
[-140.03550720 120.73342896]
[-126.73190308 127.66266632]
[-113.42830658 134.59190369]
[-100.12471008 141.52114868]
[-86.82111359 148.45037842]
[-71.95897675 147.46746826]
[-63.29375839 160.70471191]
[-49.99016190 167.63394165]
[-34.99214935 167.38978577]
[-21.92114449 160.03120422]
[-14.62630653 147.04525757]
[1.19487560 147.01756287]
[14.26587868 139.65896606]
[27.33688164 132.30036926]
[40.40788651 124.94178009]
[47.70272446 111.95584106]
[63.52390671 111.92813873]
[76.59490967 104.56954193]
[67.19055939 84.59411621]
[76.67841339 57.30906677]
[73.52790070 42.64365387]
[70.37738800 27.97824478]
[57.73834610 18.09724426]
[57.72739410 2.05419493]
[70.35293579 -7.84404898]
[85.92973328 -4.00440216]
[92.50860596 10.62768745]
[85.04280090 24.82773209]
[88.19330597 39.49314499]
[91.34381866 54.15855408]
[98.82370758 54.70743561]
[99.92169952 39.74767685]
[114.88144684 40.84589767]
[113.78348541 55.80519485]
[121.26337433 56.35407639]
[126.52093506 42.30565643]
[131.66398621 28.21491241]
[136.69216919 14.08277798]
[141.72036743 -0.04935765]
[136.16169739 -15.09863567]
[144.58489990 -28.75254822]
[160.52841187 -30.53697968]
[171.76173401 -19.08306885]
[169.66761780 -3.17727494]
[155.85250854 4.97883749]
[150.82431030 19.11097336]
[145.79611206 33.24310684]
[146.51701355 40.61001205]
[140.56935120 47.56321335]
[135.31179810 61.61163330]
[139.14955139 68.05535889]
[150.49865723 58.24732208]
[157.40336609 44.93096924]
[171.96627808 41.33630753]
[184.27429199 49.91025543]
[185.94924927 64.81644440]
[175.85096741 75.90810394]
[160.85484314 75.63568878]
[146.82507324 80.94281769]
[150.66282654 87.38654327]
[165.51948547 89.45532990]
[180.37612915 91.52411652]
[195.23278809 93.59291077]
[212.12315369 86.27589417]
[225.54042053 97.57711792]
[240.42877197 99.40380859]
[255.31713867 101.23050690]
[270.20550537 103.05719757]
[285.09384155 104.88389587]
[291.34161377 102.64746094]
[296.93661499 103.74770355]
[300.43414307 107.02002716]
[315.25515747 109.33036804]
[327.93344116 100.28056335]
[342.93115234 102.83470154]
[351.48062134 114.97727966]
[366.30163574 117.28761292]
[381.12261963 119.59795380]
[395.94363403 121.90828705]
[410.77084351 116.38884735]
[422.15454102 125.99411011]
[436.97555542 128.30444336]
[452.06762695 121.88870239]
[465.00534058 131.96577454]
[462.47949219 148.16923523]
[447.08847046 153.83035278]
[434.66522217 143.12545776]
[419.84420776 140.81512451]
[406.07708740 146.49980164]
[393.63330078 136.72929382]
[378.81228638 134.41896057]
[363.99127197 132.10862732]
[349.17028809 129.79829407]
[337.33062744 138.76255798]
[322.26708984 136.63067627]
[312.94482422 124.15137482]
[298.12380981 121.84104156]
[283.26715088 119.77224731]
[268.37881470 117.94555664]
[253.49044800 116.11886597]
[238.60208130 114.29216766]
[223.71372986 112.46547699]
[213.98309326 119.66765594]
[201.55577087 118.25755310]
[193.16398621 108.44956207]
[178.30734253 106.38076782]
[163.45068359 104.31198120]
[148.59403992 102.24319458]
[113.89022827 133.47927856]
[83.95349884 117.64054871]
[70.88249969 124.99913788]
[62.65273285 138.51141357]
[47.76647568 138.01278687]
[34.69547272 145.37136841]
[21.62447166 152.72996521]
[8.55346775 160.08856201]
[0.32370424 173.60083008]
[-14.56255245 173.10220337]
[-27.63355446 180.46080017]
[-13.32458305 175.96043396]
[1.52921617 178.04960632]
[14.04165649 186.32237244]
[21.78149414 199.17131042]
[23.24482918 214.09976196]
[18.14732552 228.20704651]
[7.47946310 238.75202942]
[-6.68592882 243.68574524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[21 28]
[22 27]
[53 73]
[54 72]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[74 184]
[75 183]
[77 181]
[78 180]
[79 179]
[80 178]
[82 176]
[83 175]
[85 95]
[86 94]
[87 93]
[100 115]
[101 114]
[102 112]
[103 111]
[104 110]
[125 173]
[126 172]
[127 171]
[128 170]
[130 167]
[131 166]
[132 165]
[133 164]
[134 163]
[137 162]
[138 161]
[141 158]
[142 157]
[143 156]
[144 155]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
