%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAGCCGAGCGCCAACCCGCUAGCGCCUGAAUCCGGCGUGCUGCCCGCUCGCCGCCCGCCAUGGCCCGCGCAGCCCCGCUGCUCGCCGCGUUGACCGCGCUCCUCGCCGCCGCCGCUGCUGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[221.20281982 365.28500366]
[214.55494690 351.83862305]
[201.97840881 343.85864258]
[202.79821777 328.05868530]
[196.15034485 314.61227417]
[189.50247192 301.16589355]
[185.25250244 298.79092407]
[182.50294495 293.67120361]
[182.87597656 286.90536499]
[176.88549805 273.15347290]
[170.89503479 259.40161133]
[164.90455627 245.64971924]
[158.91409302 231.89782715]
[152.92362976 218.14595032]
[146.43870544 204.62020874]
[139.46786499 191.33836365]
[132.49700928 178.05651855]
[125.52616119 164.77468872]
[112.76046753 157.10095215]
[113.19824982 141.28579712]
[106.22740173 128.00395203]
[95.65132141 128.35650635]
[85.66693115 124.85086060]
[77.63269043 117.96401215]
[72.64175415 108.63298035]
[71.37317657 98.12734222]
[73.99955750 87.87650299]
[62.53482437 78.20386505]
[51.07008743 68.53123474]
[39.48931885 58.99783325]
[27.79420280 49.60505676]
[12.49511528 55.74831009]
[-3.72591996 53.38101959]
[-16.48476219 43.23804474]
[-22.38084221 28.14289284]
[-19.90325165 12.22228241]
[-31.82191658 3.11484504]
[-43.74058151 -5.99259281]
[-55.65924835 -15.10002995]
[-67.57791138 -24.20746803]
[-83.24102020 -26.43852806]
[-88.65602875 -40.31393814]
[-100.57469177 -49.42137527]
[-116.60279846 -48.72905350]
[-127.02834320 -60.92280579]
[-123.85374451 -76.64862823]
[-109.51427460 -83.84300995]
[-95.00995636 -76.98704529]
[-91.46725464 -61.34004211]
[-79.54859161 -52.23260117]
[-64.73798370 -50.65296555]
[-58.47047424 -36.12613297]
[-46.55180740 -27.01869583]
[-34.63314438 -17.91125870]
[-22.71447945 -8.80382061]
[-10.79581356 0.30361739]
[1.49033356 -5.78285694]
[15.26665878 -5.96110487]
[27.82659531 -0.13872951]
[36.67775345 10.59211445]
[40.03646088 24.15912819]
[37.18698120 37.90993881]
[48.88209534 47.30271912]
[56.14063263 49.05604553]
[60.74272156 57.06649780]
[72.20745850 66.73913574]
[83.67219543 76.41176605]
[96.54204559 71.52115631]
[110.20831299 73.18969727]
[119.02509308 61.05444336]
[120.87702179 45.34199524]
[134.61753845 39.59328842]
[143.43431091 27.45803261]
[152.25109863 15.32277870]
[161.06787109 3.18752360]
[169.88464355 -8.94773102]
[174.30307007 -25.31580734]
[191.25460815 -25.60119820]
[196.22151184 -9.39113045]
[182.01991272 -0.13095243]
[173.20312500 12.00430202]
[164.38635254 24.13955688]
[155.56956482 36.27481079]
[146.75279236 48.41006851]
[145.53149414 63.25451660]
[131.16035461 69.87122345]
[122.34357452 82.00647736]
[128.61265564 102.07801056]
[119.50923920 121.03311157]
[126.48008728 134.31495667]
[139.74438477 142.93869019]
[138.80799866 157.80383301]
[145.77885437 171.08567810]
[152.74969482 184.36752319]
[159.72055054 197.64935303]
[164.31211853 200.53765869]
[167.00010681 204.52662659]
[167.68740845 208.67752075]
[166.67550659 212.15548706]
[172.66596985 225.90736389]
[178.65644836 239.65924072]
[184.64691162 253.41113281]
[190.63739014 267.16302490]
[196.62785339 280.91488647]
[202.94886780 294.51800537]
[209.59674072 307.96441650]
[216.24461365 321.41082764]
[229.29666138 330.35256958]
[228.00135803 345.19073486]
[234.64923096 358.63714600]
[251.90393066 368.92959595]
[250.07710266 388.11944580]
[257.36685181 401.22894287]
[264.65661621 414.33847046]
[271.94635010 427.44799805]
[279.23611450 440.55752563]
[294.50085449 444.65179443]
[302.32708740 458.38226318]
[298.07162476 473.60287476]
[284.25918579 481.28350830]
[269.08441162 476.86737061]
[261.55026245 462.97448730]
[266.12658691 447.84725952]
[258.83685303 434.73773193]
[251.54708862 421.62823486]
[244.25733948 408.51870728]
[236.96759033 395.40917969]
[226.81079102 393.46087646]
[219.28431702 386.04968262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[4 107]
[5 106]
[6 105]
[9 104]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 95]
[16 94]
[17 93]
[18 92]
[20 90]
[21 89]
[27 67]
[28 66]
[29 65]
[30 63]
[31 62]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[42 50]
[43 49]
[69 87]
[70 86]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
