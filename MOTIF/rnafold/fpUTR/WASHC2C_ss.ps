%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGGUCACGUGAGGCCGGUCACGCCCCGGGCAGCUUGGCUGGGGCUAGGCUUCCGGGGCUCUGCGGUCCUCGGCCUGUGCUGGCAGCCUCGGAGCCCACCGAGCCGGGCGGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[167.97695923 173.17677307]
[162.20594788 162.74983215]
[162.24481201 150.71177673]
[149.81416321 142.31658936]
[137.38352966 133.92140198]
[124.95288086 125.52621460]
[112.52224731 117.13102722]
[100.09160614 108.73583984]
[96.92655182 109.12583923]
[93.54676056 108.31156921]
[90.42154694 106.21083832]
[88.04356384 102.92495728]
[86.85787964 98.74218750]
[75.38136292 89.08353424]
[63.90485001 79.42488098]
[52.42833710 69.76622009]
[40.82533264 60.25989151]
[29.09786224 50.90754318]
[17.37038994 41.55519485]
[4.56540489 47.35242081]
[-9.42086315 47.04085541]
[-21.83653641 40.73927307]
[-30.26362801 29.73936272]
[-33.08889008 16.24138069]
[-29.81241989 2.91415381]
[-41.28893280 -6.74450302]
[-52.76544571 -16.40316010]
[-64.24195862 -26.06181717]
[-75.71846771 -35.72047424]
[-87.19498444 -45.37913132]
[-98.67149353 -55.03778458]
[-110.14801025 -64.69644165]
[-118.84544373 -67.88471222]
[-121.79560852 -74.76470184]
[-133.01316833 -84.72293854]
[-144.23072815 -94.68116760]
[-155.44827271 -104.63940430]
[-166.66583252 -114.59764099]
[-177.88339233 -124.55587769]
[-189.10095215 -134.51411438]
[-200.31849670 -144.47235107]
[-216.48291016 -147.23707581]
[-221.91624451 -162.70999146]
[-211.02912903 -174.97387695]
[-195.02131653 -171.41270447]
[-190.36026001 -155.68989563]
[-179.14271545 -145.73167419]
[-167.92515564 -135.77343750]
[-156.70759583 -125.81520081]
[-145.49003601 -115.85696411]
[-134.27249146 -105.89872742]
[-123.05493164 -95.94049072]
[-111.83737946 -85.98225403]
[-100.48935699 -76.17295837]
[-89.01284027 -66.51429749]
[-77.53633118 -56.85564423]
[-66.05981445 -47.19698715]
[-54.58330154 -37.53833008]
[-43.10678864 -27.87967300]
[-31.63027573 -18.22101593]
[-20.15376282 -8.56235886]
[-5.16200733 -14.43494320]
[10.84327602 -11.96734142]
[23.51554871 -1.73468149]
[29.36576653 13.56636047]
[26.72273636 29.82772446]
[38.45020676 39.18007278]
[50.17768097 48.53241730]
[57.46038818 50.26443863]
[62.08699417 58.28970718]
[73.56350708 67.94836426]
[85.04001617 77.60701752]
[96.51653290 87.26567841]
[108.48679352 96.30519867]
[120.91743469 104.70038605]
[133.34806824 113.09557343]
[145.77871704 121.49076080]
[158.20935059 129.88594055]
[170.63999939 138.28112793]
[188.97257996 133.91296387]
[204.48452759 144.04885864]
[207.73306274 161.97079468]
[220.58944702 169.69824219]
[233.44581604 177.42570496]
[246.30218506 185.15316772]
[259.15856934 192.88061523]
[274.97256470 193.35839844]
[281.89501953 206.54660034]
[294.75140381 214.27404785]
[307.60778809 222.00151062]
[316.69924927 223.77795410]
[320.69769287 230.10646057]
[333.34561157 238.17059326]
[345.99353027 246.23472595]
[359.24508667 238.57608032]
[374.53839111 237.96458435]
[388.35913086 244.54074097]
[397.53140259 256.79342651]
[399.94747925 271.90701294]
[395.05218506 286.40856934]
[383.97042847 296.96569824]
[369.24868774 301.15246582]
[354.26992798 298.00677490]
[342.47616577 288.25149536]
[336.57748413 274.12832642]
[337.92941284 258.88262939]
[325.28149414 250.81849670]
[312.63357544 242.75436401]
[299.88031006 234.85789490]
[287.02395630 227.13043213]
[274.16757202 219.40296936]
[259.27316284 219.47792053]
[251.43110657 205.73699951]
[238.57473755 198.00953674]
[225.71835327 190.28208923]
[212.86198425 182.55462646]
[200.00559998 174.82716370]
[189.65609741 179.96675110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[13 73]
[14 72]
[15 71]
[16 70]
[17 68]
[18 67]
[19 66]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[82 117]
[83 116]
[84 115]
[85 114]
[86 113]
[88 111]
[89 110]
[90 109]
[92 108]
[93 107]
[94 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
