%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACGCUAGAAGAGCCGUCUGCUGACUGCACGUGUGUGUGCACACUCGUGUGCAUGGCUGUGAACUGGA\
) } def
/len { sequence length } bind def

/coor [
[83.27365112 305.42260742]
[69.03797913 311.59716797]
[53.89910889 308.19213867]
[43.67824936 296.51678467]
[42.30552673 281.06054688]
[50.30878448 267.76666260]
[64.61060333 261.74688721]
[67.90217590 247.11248779]
[71.19375610 232.47810364]
[74.48533630 217.84370422]
[62.29188538 205.43269348]
[59.72838974 188.06916809]
[67.95741272 172.39294434]
[83.97937775 164.50619507]
[85.96468353 149.63816833]
[87.94999695 134.77012634]
[89.93530273 119.90208435]
[91.92060852 105.03404999]
[89.58609009 99.94530487]
[90.46524048 93.91918945]
[94.79528046 88.96211243]
[98.08686066 74.32771301]
[101.37843323 59.69331741]
[99.64965057 55.42367554]
[99.38443756 51.23377228]
[100.38038635 47.57077408]
[102.31143188 44.77059174]
[104.77485657 43.02739716]
[107.34443665 42.38061905]
[113.76713562 28.82521820]
[120.18983459 15.26981544]
[126.61253357 1.71441305]
[133.03523254 -11.84098911]
[131.95204163 -27.62507248]
[144.39375305 -35.81366730]
[150.81645203 -49.36906815]
[157.23915100 -62.92447281]
[163.66184998 -76.47987366]
[161.79441833 -92.77234650]
[175.12969971 -102.31710815]
[189.94949341 -95.29531860]
[191.00848389 -78.93039703]
[177.21725464 -70.05717468]
[170.79455566 -56.50177383]
[164.37185669 -42.94636917]
[157.94915771 -29.39096832]
[159.49174500 -14.57645798]
[146.59063721 -5.41828918]
[140.16793823 8.13711262]
[133.74523926 21.69251442]
[127.32254028 35.24791718]
[120.89984131 48.80331802]
[116.01283264 62.98489761]
[112.72125244 77.61929321]
[109.42967224 92.25368500]
[106.78865051 107.01935577]
[104.80333710 121.88739014]
[102.81803131 136.75543213]
[100.83272552 151.62347412]
[98.84741974 166.49150085]
[109.22676849 174.09127808]
[115.23863220 185.38116455]
[115.74504089 198.08845520]
[110.70912170 209.68626404]
[101.18978119 217.89607239]
[89.11972809 221.13528442]
[85.82814789 235.76968384]
[82.53657532 250.40406799]
[79.24499512 265.03845215]
[89.59190369 276.60223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 69]
[8 68]
[9 67]
[10 66]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[21 55]
[22 54]
[23 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
