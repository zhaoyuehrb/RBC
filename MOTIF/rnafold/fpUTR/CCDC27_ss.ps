%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCACCACUGCUCCCAGGAGCCCACAGGACCUGGAGCUCUGGAAGCUGAUCUCCUCCCACUGCACCAGCCAGCAGGUUC\
) } def
/len { sequence length } bind def

/coor [
[192.30255127 179.98637390]
[187.77462769 162.28413391]
[189.22991943 144.04911804]
[175.31738281 138.44186401]
[161.75502014 144.49147034]
[147.56585693 139.00311279]
[141.31242371 124.73663330]
[127.39987946 119.12937927]
[113.48734283 113.52211761]
[100.11375427 119.09825134]
[86.67469025 113.68182373]
[80.90539551 100.39041901]
[66.99285889 94.78315735]
[53.08032608 89.17590332]
[39.16778564 83.56864929]
[25.25525093 77.96139526]
[15.86406040 77.61964417]
[10.92389965 71.86368561]
[-2.76365495 65.72766113]
[-16.45121002 59.59162903]
[-28.92973137 63.46171570]
[-40.28918839 57.87125397]
[-44.55279160 46.38043213]
[-57.99527740 39.72463226]
[-74.31756592 41.31047821]
[-83.63064575 27.81238365]
[-76.35401917 13.11603165]
[-59.97325516 12.33977032]
[-51.33947754 26.28215027]
[-37.89699554 32.93794632]
[-20.59374428 30.77019310]
[-10.31517982 45.90407562]
[3.37237453 52.04010391]
[17.05992889 58.17613602]
[30.86250687 64.04885101]
[44.77504349 69.65611267]
[58.68758011 75.26336670]
[72.60012054 80.87062073]
[86.51265717 86.47788239]
[99.88624573 80.90174866]
[113.32530975 86.31817627]
[119.09460449 99.60958099]
[133.00714111 105.21684265]
[146.91967773 110.82409668]
[161.31825256 104.88112640]
[175.34765625 110.76586914]
[180.92463684 124.52932739]
[194.83717346 130.13658142]
[202.10566711 120.20535278]
[211.37190247 112.11830139]
[222.18103027 106.26771545]
[234.00350952 102.93622589]
[246.26103210 102.28314209]
[258.35479736 104.33684540]
[269.69479370 108.99357605]
[279.72851562 116.02266693]
[287.96804810 125.07796478]
[294.01358032 135.71487427]
[297.57290649 147.41220093]
[298.47558594 159.59768677]
[296.68103027 171.67596436]
[292.28036499 183.05769348]
[304.54931641 191.68746948]
[316.81826782 200.31726074]
[329.08718872 208.94703674]
[343.72546387 203.79917908]
[358.58425903 208.27088928]
[367.95004272 220.64270020]
[368.22149658 236.15739441]
[359.29421997 248.84927368]
[344.60098267 253.83802795]
[329.79156494 249.20539856]
[320.56054688 236.73271179]
[320.45742798 221.21597290]
[308.18847656 212.58619690]
[295.91952515 203.95642090]
[283.65060425 195.32662964]
[269.31375122 206.45207214]
[252.12536621 212.33729553]
[233.93652344 212.33421326]
[216.71072388 206.42965698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 48]
[4 47]
[7 44]
[8 43]
[9 42]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[18 34]
[19 33]
[20 32]
[23 30]
[24 29]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
