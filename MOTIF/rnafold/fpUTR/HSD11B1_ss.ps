%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGAAACAGAAGGAAAGGCAGAGGAGGAGGGAGAGAGAGAGAAGAGAAGAAAAAGAAAAAAGAACAUCAAUAAAAAGAAGUCAGAUUUGUUCGAAAUCUUGAGGUUCUCUCUGUGUGUCCUACAGGAGUCUUCAGGCCAGCUCCCUGUCGG\
) } def
/len { sequence length } bind def

/coor [
[33.40711975 429.76333618]
[32.16655731 444.80075073]
[27.07538986 459.00433350]
[18.48073578 471.40573120]
[6.96859598 481.15933228]
[-6.67611361 487.60018921]
[-21.52307320 490.28906250]
[-36.55999374 489.04272461]
[-50.76163483 483.94604492]
[-63.15969849 475.34661865]
[-72.90886688 463.83071899]
[-79.34443665 450.18350220]
[-82.02760315 435.33551025]
[-80.77542877 420.29907227]
[-75.67329407 406.09939575]
[-67.06906128 393.70465088]
[-55.54939651 383.95993042]
[-41.89971542 377.52966309]
[-27.05068398 374.85220337]
[-12.01473045 376.11019897]
[-6.94796658 361.99185181]
[-1.88120294 347.87347412]
[3.18556070 333.75512695]
[8.25232410 319.63677979]
[7.54744625 312.23522949]
[13.56749058 305.28540039]
[18.91934967 291.27264404]
[24.27120781 277.25985718]
[29.62306786 263.24710083]
[23.32641602 249.79765320]
[28.55434418 235.51048279]
[42.70405960 228.99716187]
[48.05591965 214.98439026]
[38.55696487 203.51113892]
[36.05963135 188.72535706]
[41.33335495 174.58131409]
[53.05563354 164.91253662]
[68.14202118 162.39297485]
[73.49388123 148.38021851]
[78.84573364 134.36744690]
[84.19759369 120.35468292]
[74.77559662 109.18541718]
[72.70543671 94.11967468]
[79.25597382 79.73915863]
[92.97546387 70.75906372]
[109.96549988 70.48828125]
[111.18026733 55.53755188]
[112.39504242 40.58682251]
[113.60980988 25.63609123]
[114.82457733 10.68536091]
[116.03934479 -4.26536989]
[103.51470184 -13.04492760]
[97.10849762 -26.82379913]
[98.45037842 -41.85927963]
[107.08023834 -54.12229538]
[120.59850311 -60.37706375]
[121.81327057 -75.32779694]
[123.02803802 -90.27852631]
[124.24280548 -105.22925568]
[112.31348419 -112.59457397]
[104.76816559 -124.33215332]
[103.03718567 -138.11116028]
[107.40294647 -151.22453308]
[116.95570374 -161.12088013]
[129.78248596 -165.90080261]
[131.30001831 -180.82383728]
[132.81753540 -195.74687195]
[134.33506775 -210.66992188]
[135.85258484 -225.59295654]
[121.79817200 -231.10441589]
[109.75260925 -240.20423889]
[100.60974121 -252.21716309]
[95.04804230 -266.25177002]
[93.48022461 -281.26657104]
[96.02262115 -296.14739990]
[102.48658752 -309.78997803]
[112.39244080 -321.18191528]
[125.00510406 -329.47790527]
[139.38864136 -334.06228638]
[154.47567749 -334.59490967]
[169.14668274 -331.03619385]
[182.31294250 -323.65026855]
[192.99746704 -312.98519897]
[200.40734863 -299.83239746]
[203.99276733 -285.16790771]
[203.48764038 -270.07992554]
[198.92945862 -255.68806458]
[190.65646362 -243.06031799]
[179.28256226 -233.13372803]
[165.65179443 -226.64492798]
[150.77561951 -224.07542419]
[149.25810242 -209.15238953]
[147.74057007 -194.22935486]
[146.22305298 -179.30630493]
[144.70552063 -164.38327026]
[158.02084351 -155.27604675]
[164.98178101 -140.61946106]
[163.61064148 -124.35785675]
[154.18618774 -110.92035675]
[139.19354248 -104.01448822]
[137.97877502 -89.06375122]
[136.76400757 -74.11302185]
[135.54924011 -59.16229248]
[147.88043213 -50.80722046]
[154.41737366 -37.31188202]
[153.31437683 -22.25698853]
[144.76777649 -9.69305515]
[130.99008179 -3.05060124]
[129.77531433 11.90012932]
[128.56053162 26.85085869]
[127.34577179 41.80158997]
[126.13100433 56.75231934]
[124.91622925 71.70304871]
[133.97714233 83.65712738]
[148.69993591 86.52754974]
[163.42272949 89.39797211]
[178.14552307 92.26839447]
[192.86831665 95.13882446]
[206.92349243 87.40372467]
[221.67831421 93.70251465]
[225.81414795 109.20330811]
[216.15834045 122.01521301]
[200.11799622 122.31003571]
[189.99789429 109.86161804]
[175.27510071 106.99118805]
[160.55230713 104.12076569]
[145.82951355 101.25034332]
[131.10671997 98.37992096]
[127.77561951 110.80669403]
[119.94686890 120.29844666]
[109.38833618 125.43652344]
[98.21035767 125.70654297]
[92.85850525 139.71931458]
[87.50664520 153.73207092]
[82.15478516 167.74484253]
[91.72061157 179.67976379]
[94.01304626 194.70112610]
[88.51542664 208.75967407]
[76.79747009 218.11624146]
[62.06868362 220.33625793]
[56.71682358 234.34901428]
[62.92215347 248.63648987]
[57.29499054 262.77117920]
[43.63583374 268.59896851]
[38.28397369 282.61172485]
[32.93211746 296.62448120]
[27.58025742 310.63726807]
[22.37067795 324.70355225]
[17.30391502 338.82189941]
[12.23715019 352.94024658]
[7.17038679 367.05859375]
[2.10362339 381.17697144]
[14.50832558 389.76681519]
[24.26638794 401.27520752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 152]
[21 151]
[22 150]
[23 149]
[24 148]
[26 147]
[27 146]
[28 145]
[29 144]
[32 141]
[33 140]
[38 135]
[39 134]
[40 133]
[41 132]
[46 113]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[56 103]
[57 102]
[58 101]
[59 100]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
