%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGUCCGGGGAUCCCGGGGGCCAGUCGCGGCCGGGACAUCGGGCGCUGCGGCCGGGGACCCGCUGCUGAGAUAGACAGAAU\
) } def
/len { sequence length } bind def

/coor [
[106.71231079 268.63183594]
[92.50929260 263.80749512]
[81.35627747 253.77702332]
[75.05789948 240.16340637]
[74.63326263 225.16941833]
[80.15107727 211.22116089]
[90.71852875 200.57556152]
[104.62574768 194.95512390]
[119.62245941 195.26927185]
[133.28421021 201.46871948]
[127.28582001 187.72027588]
[121.28744507 173.97184753]
[115.58724213 168.97904968]
[115.33251953 159.59538269]
[109.85240173 145.63227844]
[104.37229156 131.66917419]
[98.89217377 117.70606995]
[89.28701019 114.14086151]
[83.25485992 105.85937500]
[82.80756378 95.62366486]
[88.09431458 86.84755707]
[83.67298889 72.51396942]
[79.25165558 58.18037415]
[74.83032990 43.84678268]
[69.17885590 36.35152054]
[70.52249908 28.89398003]
[66.64021301 14.40509224]
[55.59481049 3.07771015]
[59.77441025 -11.21845150]
[55.89212418 -25.70733833]
[52.00983810 -40.19622421]
[40.96443176 -51.52360916]
[45.14403152 -65.81977081]
[41.26174545 -80.30865479]
[37.37945938 -94.79754639]
[33.49717331 -109.28643036]
[21.52493286 -120.49346161]
[25.50740814 -136.40170288]
[41.34776688 -140.64610291]
[52.75080872 -128.86041260]
[47.98606110 -113.16871643]
[51.86834717 -98.67983246]
[55.75063324 -84.19094086]
[59.63291550 -69.70205688]
[70.40063477 -59.41101456]
[66.49872589 -44.07851028]
[70.38101196 -29.58962440]
[74.26329803 -15.10073662]
[85.03101349 -4.80969715]
[81.12910461 10.52280617]
[85.01139069 25.01169395]
[89.16392517 39.42545319]
[93.58525085 53.75904465]
[98.00657654 68.09263611]
[102.42790222 82.42623138]
[116.74514008 94.14062500]
[112.85527802 112.22595215]
[118.33539581 126.18905640]
[123.81551361 140.15216064]
[129.29562378 154.11526489]
[135.03587341 167.97346497]
[141.03425598 181.72189331]
[147.03263855 195.47033691]
[154.22698975 200.60586548]
[156.42947388 208.20259094]
[167.79904175 217.98689270]
[179.16862488 227.77120972]
[190.71916199 237.34121704]
[202.44664001 246.69355774]
[214.17410278 256.04589844]
[230.32746887 261.19421387]
[229.85205078 278.14151001]
[213.43545532 282.37612915]
[204.82176208 267.77337646]
[193.09428406 258.42102051]
[181.36682129 249.06867981]
[173.99420166 247.31800842]
[169.38430786 239.14077759]
[158.01473999 229.35647583]
[146.64515686 219.57215881]
[148.54249573 234.45167542]
[144.42333984 248.87501526]
[134.95417786 260.50839233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 63]
[11 62]
[12 61]
[14 60]
[15 59]
[16 58]
[17 57]
[21 55]
[22 54]
[23 53]
[24 52]
[26 51]
[27 50]
[29 48]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[36 41]
[65 80]
[66 79]
[67 78]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
