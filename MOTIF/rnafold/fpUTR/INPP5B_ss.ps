%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUGUAGUCACUGUCCCGGAACCUGGGGCAGCGGAGUCCCGUGCGCCCUGUGGUGACAGCUCAGGAGGGUGUGUGCGCUCAGCAGGGGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[145.50090027 171.09364319]
[135.91316223 182.62947083]
[123.03139496 190.31452942]
[108.32578278 193.27169800]
[93.47467041 191.16349792]
[80.17301941 184.23052979]
[69.93894958 173.26403809]
[63.94046402 159.51565552]
[62.86217499 144.55445862]
[66.82714844 130.08798218]
[75.38285828 117.76727295]
[87.55511475 108.99739075]
[72.65547180 110.72966003]
[57.75583649 112.46192932]
[42.85619736 114.19419861]
[27.95655823 115.92646790]
[13.05691910 117.65873718]
[-1.84272003 119.39100647]
[-16.74235916 121.12327576]
[-31.64199829 122.85554504]
[-46.67689514 130.69061279]
[-58.36783218 118.41224670]
[-49.80568314 103.77919769]
[-33.37426758 107.95590973]
[-18.47462845 106.22364044]
[-3.57498956 104.49137115]
[11.32464981 102.75910187]
[26.22428894 101.02683258]
[41.12392807 99.29456329]
[56.02356720 97.56229401]
[70.92320251 95.83002472]
[85.82284546 94.09775543]
[91.62033081 80.26340485]
[82.40714264 68.42630005]
[73.19394684 56.58919144]
[57.80489349 50.92271042]
[55.28470612 34.71836853]
[68.22593689 24.64580536]
[83.31575775 31.06680679]
[85.03105927 47.37599945]
[94.24424744 59.21310806]
[103.45744324 71.05021667]
[106.20731354 80.77046204]
[105.45262146 90.15095520]
[119.86392212 85.98991394]
[127.41786957 80.49966431]
[134.82081604 81.93801117]
[149.36181641 78.25572968]
[163.90283203 74.57344818]
[178.44383240 70.89116669]
[192.98483276 67.20888519]
[207.52583313 63.52659988]
[221.93714905 59.36555862]
[236.20298767 54.73030090]
[250.46884155 50.09504700]
[264.73468018 45.45979309]
[278.92193604 40.58930206]
[293.02673340 35.48490143]
[307.13153076 30.38050461]
[321.14999390 25.04359818]
[335.07830811 19.47563934]
[349.00662231 13.90768051]
[362.93493652 8.33972168]
[372.64797974 -4.87347221]
[388.91546631 -2.79962206]
[395.00280762 12.42787266]
[384.64782715 25.14426994]
[368.50289917 22.26803207]
[354.57458496 27.83599091]
[340.64627075 33.40394974]
[326.71795654 38.97190857]
[321.57427979 44.48690033]
[312.23593140 44.48529434]
[298.13113403 49.58969498]
[284.02633667 54.69409180]
[278.70312500 60.03599930]
[269.36993408 59.72563934]
[255.10409546 64.36089325]
[240.83824158 68.99614716]
[226.57240295 73.63140869]
[223.57385254 77.58076477]
[217.98011780 79.56764984]
[211.20811462 78.06760406]
[196.66711426 81.74988556]
[182.12611389 85.43216705]
[167.58511353 89.11444855]
[153.04411316 92.79673767]
[138.50309753 96.47901917]
[124.02497101 100.40121460]
[109.61366272 104.56225586]
[124.22723389 107.94509125]
[136.88047791 116.00085449]
[146.12928772 127.81015778]
[150.91809082 142.02519226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[33 42]
[34 41]
[35 40]
[44 90]
[45 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 80]
[54 79]
[55 78]
[56 77]
[57 75]
[58 74]
[59 73]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
