%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUGUCCGGGGGGAAAACUGUUGUAAACUUUGCCUGUAGGAGGACUGAUCUCUUGAUGAAAUACAGAAAAACCAUCUCAGAAAAAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[-31.28981400 303.75454712]
[-43.99650192 313.20541382]
[-58.56201553 319.39907837]
[-74.16751099 321.99160767]
[-89.93669891 320.84140015]
[-104.98500824 316.01684570]
[-118.46923828 307.79244995]
[-128.98588562 318.48825073]
[-139.50254822 329.18405151]
[-143.08697510 345.18667603]
[-158.81654358 349.82485962]
[-170.51000977 338.32723999]
[-166.13813782 322.52160645]
[-150.19833374 318.66738892]
[-139.68168640 307.97158813]
[-129.16503906 297.27578735]
[-136.89912415 285.38342285]
[-141.94448853 272.11801147]
[-144.07020569 258.07916260]
[-143.17735291 243.90199280]
[-139.30364990 230.22846985]
[-132.62188721 217.67829895]
[-123.43212128 206.82090759]
[-112.14832306 198.14956665]
[-99.27964783 192.05892944]
[-85.40750122 188.82720947]
[-71.15925598 188.60330200]
[-57.17988205 191.40005493]
[-44.10274124 197.09352112]
[-32.52091599 205.42843628]
[-21.30618858 195.46701050]
[-10.09146118 185.50559998]
[1.12326741 175.54417419]
[1.74415743 160.70672607]
[12.97558212 150.44467163]
[28.53426170 151.19651794]
[39.74898911 141.23510742]
[50.96371841 131.27368164]
[53.93451309 124.33563232]
[62.72954178 121.17304993]
[74.27430725 111.59608459]
[85.81907654 102.01911926]
[90.85466766 88.97555542]
[104.60395813 86.43611145]
[116.14871979 76.85914612]
[121.86846924 55.31365967]
[143.06982422 51.40607452]
[153.21922302 40.36119080]
[163.36863708 29.31630516]
[173.33006287 18.10157585]
[183.10064697 6.72020483]
[186.21896362 -8.79065228]
[200.37989807 -13.40770912]
[210.15048218 -24.78908157]
[210.37089539 -40.83061981]
[223.13787842 -50.54574966]
[238.65768433 -46.48185349]
[245.02484131 -31.75640678]
[237.35502625 -17.66551018]
[221.53184509 -15.01849365]
[211.76126099 -3.63712192]
[209.34181213 11.05966377]
[194.48200989 16.49079132]
[184.71142578 27.87216377]
[182.70234680 35.14717102]
[174.41352844 39.46571350]
[164.26411438 50.51060104]
[154.11470032 61.55548477]
[156.22175598 69.61640167]
[154.83149719 77.92823792]
[150.11010742 85.02385712]
[142.81861877 89.61855316]
[134.19100952 90.84238434]
[125.72569275 88.40391541]
[114.18092346 97.98088074]
[109.14533234 111.02444458]
[95.39604187 113.56388855]
[83.85128021 123.14085388]
[72.30651093 132.71781921]
[60.92513657 142.48840332]
[49.71040726 152.44982910]
[38.49568176 162.41125488]
[37.40702820 177.94999695]
[25.89179611 187.89253235]
[11.08468628 186.75891113]
[-0.13004182 196.72032166]
[-11.34477043 206.68174744]
[-22.55949783 216.64315796]
[-15.03656292 230.63473511]
[-11.01779556 245.99522400]
[-10.72492027 261.86172485]
[-14.17046547 277.34384155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[30 88]
[31 87]
[32 86]
[33 85]
[36 82]
[37 81]
[38 80]
[40 79]
[41 78]
[42 77]
[44 75]
[45 74]
[47 68]
[48 67]
[49 66]
[50 64]
[51 63]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
