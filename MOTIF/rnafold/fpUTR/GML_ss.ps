%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGCGCGGGAGGCUCAGAUGGCUGGAGGCGGCGGGCACGCACACUGCGGGGCUCCGAGGGGCACAGGUCCAGGCUCCUGCGUGAAGUG\
) } def
/len { sequence length } bind def

/coor [
[106.65757751 343.57165527]
[100.28212738 329.65719604]
[101.11489105 314.37435913]
[108.96450806 301.23501587]
[122.02720642 293.25851440]
[120.99234009 278.29425049]
[119.95747375 263.33001709]
[118.92260742 248.36573792]
[117.88773346 233.40148926]
[116.85286713 218.43722534]
[115.81800079 203.47296143]
[114.78313446 188.50871277]
[113.74826813 173.54444885]
[105.15133667 161.38130188]
[111.91810608 147.08021545]
[110.88323975 132.11595154]
[100.05692291 134.07905579]
[89.11654663 132.47305298]
[79.21356201 127.43162537]
[71.40150452 119.45183563]
[66.52392578 109.34537506]
[65.12342072 98.15599823]
[67.38143921 87.05181122]
[53.54814911 81.25180817]
[39.71485901 75.45181274]
[25.88156509 69.65180969]
[9.69079590 72.25777435]
[-0.45015791 59.37006378]
[5.89084721 44.24644852]
[22.19072914 42.44480896]
[31.68156624 55.81851578]
[45.51485825 61.61851883]
[59.34815216 67.41851807]
[73.18144226 73.21852112]
[85.67144012 64.91189575]
[85.67144012 49.91189575]
[85.67144012 34.91189575]
[85.67144012 19.91189575]
[76.07101440 4.31596088]
[85.17666626 -10.57768726]
[84.65892029 -25.56874847]
[84.14118195 -40.55981064]
[83.62343597 -55.55087280]
[77.03399658 -71.17187500]
[90.22038269 -81.82811737]
[104.11052704 -72.10700989]
[98.61450195 -56.06861496]
[99.13224030 -41.07755280]
[99.64998627 -26.08649063]
[100.16772461 -11.09542942]
[108.86330414 -2.49464536]
[109.29399872 10.13227844]
[100.67144012 19.91189575]
[100.67144012 34.91189575]
[100.67144012 49.91189575]
[100.67144012 64.91189575]
[112.17616272 67.33820343]
[122.15831757 73.39926147]
[129.51675415 82.36474609]
[133.46035767 93.18759918]
[133.59283447 104.62615967]
[148.48345947 102.81810760]
[163.37409973 101.01005554]
[178.26472473 99.20200348]
[191.04272461 88.92314148]
[206.23359680 95.10125732]
[208.21029663 111.38083649]
[194.93936157 121.01484680]
[180.07278442 114.09263611]
[165.18214417 115.90068817]
[150.29151917 117.70874023]
[135.40087891 119.51679230]
[125.84750366 131.08108521]
[126.88237000 146.04534912]
[135.55332947 159.27882385]
[128.71252441 172.50958252]
[129.74739075 187.47384644]
[130.78225708 202.43809509]
[131.81712341 217.40235901]
[132.85198975 232.36662292]
[133.88685608 247.33087158]
[134.92173767 262.29513550]
[135.95660400 277.25939941]
[136.99147034 292.22366333]
[151.02780151 298.32611084]
[160.61137390 310.25982666]
[163.53994751 325.28253174]
[159.14056396 339.94213867]
[148.42414856 350.86996460]
[133.85328674 355.55487061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[15 74]
[16 73]
[23 34]
[24 33]
[25 32]
[26 31]
[35 56]
[36 55]
[37 54]
[38 53]
[40 50]
[41 49]
[42 48]
[43 47]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
