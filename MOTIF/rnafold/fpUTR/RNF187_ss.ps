%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGUCCCCGGCGUUGGCGUCUUCGUCCUGUUGCUGGUCUCCGUCCGGUCGCCGGCCGUCUAGGUCUCCGGCCCUCCCCAGCCGCUCCUGCGCCCUUGCCGGCCCCGCCGCCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[152.30877686 426.20748901]
[149.26509094 411.51953125]
[146.22140503 396.83157349]
[141.73112488 390.85092163]
[143.29260254 381.72985840]
[140.62501526 366.96896362]
[137.95744324 352.20806885]
[124.48478699 345.91317749]
[117.21623993 332.73620605]
[119.12278748 317.62930298]
[129.68121338 306.41210938]
[127.01363373 291.65121460]
[124.34605408 276.89031982]
[121.67846680 262.12942505]
[119.01088715 247.36853027]
[116.34329987 232.60763550]
[103.99780273 224.35389709]
[101.08222198 209.42224121]
[109.82321167 196.52911377]
[107.15562439 181.76821899]
[104.48804474 167.00732422]
[101.82046509 152.24642944]
[99.15287781 137.48553467]
[88.58865356 135.71644592]
[78.95569611 131.03257751]
[71.04014587 123.81616974]
[65.48796844 114.65615082]
[62.75228119 104.30006409]
[63.05633545 93.59305573]
[66.37532043 83.40891266]
[72.43837738 74.57874298]
[80.75070953 67.82317352]
[90.63394928 63.69352341]
[89.86804199 48.71308899]
[81.43618774 35.32598877]
[88.51353455 22.22024918]
[87.74762726 7.23981524]
[86.98171997 -7.74061823]
[86.21581268 -22.72105217]
[85.44989777 -37.70148468]
[74.99890137 -40.89534378]
[65.89759064 -46.90585327]
[58.88418579 -55.23107529]
[54.52347565 -65.18191528]
[53.16131973 -75.93916321]
[54.89726257 -86.62091827]
[59.57735825 -96.35491943]
[66.80774689 -104.34973907]
[75.98775482 -109.95914459]
[86.35981750 -112.73431396]
[87.50805664 -127.69029999]
[88.65629578 -142.64628601]
[89.80453491 -157.60227966]
[90.95277405 -172.55825806]
[80.94242096 -184.49269104]
[82.31995392 -199.64382935]
[93.75929260 -209.11363220]
[94.90753174 -224.06961060]
[96.05577087 -239.02560425]
[97.20401001 -253.98158264]
[87.89513397 -267.04772949]
[92.44502258 -282.43209839]
[107.36340332 -288.33306885]
[121.20616150 -280.22396851]
[123.35431671 -264.32537842]
[112.15999603 -252.83334351]
[111.01175690 -237.87736511]
[109.86351776 -222.92137146]
[108.71527863 -207.96539307]
[118.57500458 -196.86036682]
[117.62358093 -181.67651367]
[105.90876007 -171.41001892]
[104.76052094 -156.45404053]
[103.61228180 -141.49804688]
[102.46404266 -126.54206085]
[101.31580353 -111.58607483]
[118.05636597 -101.72953796]
[127.67307281 -84.76171875]
[127.52771759 -65.18191528]
[117.58242035 -48.22624588]
[100.43033600 -38.46739197]
[101.19624329 -23.48696136]
[101.96215057 -8.50652695]
[102.72805786 6.47390604]
[103.49397278 21.45433998]
[111.87104034 33.76993942]
[104.84848022 47.94718170]
[105.61438751 62.92761230]
[123.35807037 70.66941071]
[134.87507629 86.23001862]
[137.09524536 105.46136475]
[129.42672729 123.23684692]
[113.91377258 134.81796265]
[116.58135986 149.57885742]
[119.24893951 164.33973694]
[121.91651917 179.10063171]
[124.58410645 193.86152649]
[137.28489685 202.87971497]
[139.77992249 217.88735962]
[131.10420227 229.94004822]
[133.77177429 244.70094299]
[136.43936157 259.46185303]
[139.10694885 274.22274780]
[141.77452087 288.98364258]
[144.44210815 303.74453735]
[158.25878906 310.55667114]
[165.33229065 324.04071045]
[163.13552856 338.92822266]
[152.71833801 349.54049683]
[155.38591003 364.30139160]
[158.05349731 379.06225586]
[160.90936279 393.78790283]
[163.95304871 408.47586060]
[166.99673462 423.16378784]
[181.43405151 428.60137939]
[190.62138367 440.99478149]
[191.62705994 456.38934326]
[184.13020325 469.87268066]
[170.52301025 477.14233398]
[155.14749146 475.87857056]
[142.90992737 466.48468018]
[137.71527100 451.95816040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 111]
[6 110]
[7 109]
[11 105]
[12 104]
[13 103]
[14 102]
[15 101]
[16 100]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[33 88]
[34 87]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
