%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGUGCUCCUGCCCUGGAGAGAGGCUCAGCACAGAAGGAGGAAGGACAGCACAGCCUACAGCCGUGCUCAGGAAGUUUCUGGAUCCUAGGCUCAGCUCCACAGAGGAGAACACGCAGGCGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[129.82553101 163.31521606]
[112.42666626 168.87638855]
[94.18137360 169.74613953]
[76.33240509 165.86520386]
[60.09552765 157.49794006]
[46.57669449 145.21427917]
[34.15445709 153.62188721]
[21.73221779 162.02949524]
[9.30997753 170.43711853]
[-3.11226130 178.84472656]
[-4.13753796 192.33305359]
[-12.64452553 202.59825134]
[-25.33090782 206.00889587]
[-37.47220612 201.52832031]
[-50.09101105 209.63793945]
[-62.70981216 217.74754333]
[-75.23122406 226.00674438]
[-87.65345764 234.41435242]
[-94.32837677 249.39360046]
[-110.66420746 250.83322144]
[-119.85605621 237.25228882]
[-112.44813538 222.62167358]
[-96.06107330 221.99212646]
[-83.63883209 213.58450317]
[-79.82572174 207.16770935]
[-70.81942749 205.12873840]
[-58.20062256 197.01913452]
[-45.58181763 188.90951538]
[-42.74842834 172.37677002]
[-28.58230591 162.78086853]
[-11.51987553 166.42248535]
[0.90236396 158.01487732]
[13.32460308 149.60726929]
[25.74684143 141.19964600]
[38.16908264 132.79203796]
[35.01891327 125.99689484]
[32.61292648 118.90402222]
[30.97867203 111.59466553]
[30.13486862 104.15251923]
[30.09117889 96.66281891]
[30.84810448 89.21133423]
[32.39697647 81.88340759]
[34.72005463 74.76295471]
[37.79073334 67.93151855]
[41.57385254 61.46734619]
[46.02608109 55.44445801]
[51.09643555 49.93183136]
[56.72684479 44.99259949]
[62.85282898 40.68332672]
[69.40423584 37.05336380]
[76.30603027 34.14427948]
[72.76964569 19.56710625]
[69.23326111 4.98993349]
[65.69687653 -9.58724022]
[62.16049194 -24.16441345]
[51.38778305 -35.75144196]
[55.90641022 -49.94409180]
[52.37002945 -64.52126312]
[39.47466278 -74.06532288]
[39.04039383 -90.10250092]
[51.40036011 -100.33043671]
[67.07305145 -96.90314484]
[74.03572083 -82.44974518]
[66.94720459 -68.05764771]
[70.48358154 -53.48047638]
[81.00334930 -42.93610382]
[76.73767090 -27.70079803]
[80.27404785 -13.12362385]
[83.81043243 1.45354939]
[87.34681702 16.03072357]
[90.88320160 30.60789680]
[109.14855194 30.61207581]
[126.79080963 35.34218979]
[142.60836792 44.47607040]
[155.52392578 57.39162827]
[164.65780640 73.20919037]
[169.38792419 90.85144806]
[169.39210510 109.11679840]
[183.96928406 112.65318298]
[198.54644775 116.18956757]
[213.12362671 119.72595215]
[227.70079041 123.26232910]
[242.27796936 126.79871368]
[256.85513306 130.33509827]
[267.52551270 122.02069855]
[280.84356689 121.41046143]
[291.90090942 128.50357056]
[296.75247192 140.50143433]
[311.24136353 144.38372803]
[325.73025513 148.26600647]
[332.35931396 146.89392090]
[337.82662964 148.84861755]
[340.80764771 152.69313049]
[355.09539795 157.26043701]
[367.17041016 146.03283691]
[383.16201782 142.41941833]
[398.71279907 147.30834961]
[409.63388062 159.28407288]
[413.03311157 175.03555298]
[427.42550659 179.26153564]
[441.81790161 183.48753357]
[456.21029663 187.71351624]
[470.92337036 181.31784058]
[485.02911377 188.96034241]
[487.70678711 204.77835083]
[476.90231323 216.63764954]
[460.90396118 215.44079590]
[451.98431396 202.10591125]
[437.59191895 197.87992859]
[423.19952393 193.65393066]
[408.80712891 189.42794800]
[399.52362061 199.51522827]
[386.73052979 204.62368774]
[372.91992188 203.69642639]
[360.80892944 196.85841370]
[352.80517578 185.40309143]
[350.52810669 171.54818726]
[336.24035645 166.98088074]
[321.84796143 162.75489807]
[307.35906982 158.87260437]
[292.87017822 154.99032593]
[278.73086548 164.01467896]
[262.10134888 159.98722839]
[253.31875610 144.91227722]
[238.74159241 141.37588501]
[224.16441345 137.83950806]
[209.58723450 134.30311584]
[195.01007080 130.76673889]
[180.43289185 127.23035431]
[165.85571289 123.69396973]
[157.48194885 139.92749023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[14 28]
[15 27]
[16 26]
[17 24]
[18 23]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[57 65]
[58 64]
[78 130]
[79 129]
[80 128]
[81 127]
[82 126]
[83 125]
[84 124]
[88 121]
[89 120]
[90 119]
[93 118]
[94 117]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
