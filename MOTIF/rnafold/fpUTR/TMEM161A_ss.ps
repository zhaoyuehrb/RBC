%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGGUCGAGUUUCCGCAGAGUGCCCGGAGCCCUAGGCCGGUGGGUGAGUGCACCGCGUUCUCGCACGCGUC\
) } def
/len { sequence length } bind def

/coor [
[75.15036011 109.27654266]
[74.68001556 99.00825500]
[60.53685760 94.01116180]
[46.39369583 89.01406097]
[32.25053406 84.01696777]
[18.10737228 79.01986694]
[3.96421051 74.02277374]
[-10.17895126 69.02567291]
[-25.76842499 71.72360992]
[-35.19107819 60.18832779]
[-49.33423996 55.19123077]
[-67.18958282 59.07480621]
[-78.25069427 45.61895752]
[-92.59320068 41.22661591]
[-106.93569946 36.83427429]
[-121.27819824 32.44193268]
[-135.79418945 28.66226196]
[-150.45751953 25.50207329]
[-165.12084961 22.34188461]
[-181.87831116 24.91553879]
[-188.99032593 9.52542019]
[-176.17045593 -1.56905186]
[-161.96066284 7.67855597]
[-147.29733276 10.83874512]
[-132.63400269 13.99893379]
[-127.97887421 12.02802849]
[-122.02095032 13.18622589]
[-116.88585663 18.09943199]
[-102.54335785 22.49177361]
[-88.20085907 26.88411522]
[-73.85835266 31.27645683]
[-62.83951187 25.84576035]
[-50.72348785 29.61682129]
[-44.33714294 41.04806900]
[-30.19398308 46.04516602]
[-15.61612320 42.98979950]
[-5.18185425 54.88251114]
[8.96130753 59.87960815]
[23.10446930 64.87670898]
[37.24763107 69.87380219]
[51.39079285 74.87090302]
[65.53395081 79.86799622]
[79.67711639 84.86509705]
[101.33883667 71.13576508]
[127.70918274 83.10981750]
[141.37760925 76.93129730]
[155.04603577 70.75278473]
[168.71446228 64.57426453]
[177.83363342 50.94441986]
[194.17692566 52.29677582]
[200.93176270 67.24015045]
[191.14933777 80.40206909]
[174.89299011 78.24269104]
[161.22454834 84.42121124]
[147.55612183 90.59973145]
[133.88769531 96.77824402]
[131.98243713 111.65675354]
[143.65296936 121.08005524]
[155.32350159 130.50335693]
[166.99404907 139.92665100]
[182.68087769 138.00340271]
[195.08145142 147.80140686]
[196.83874512 163.50770569]
[186.91018677 175.80400085]
[171.18618774 177.39514160]
[158.99554443 167.33712769]
[157.57073975 151.59718323]
[145.90020752 142.17388916]
[134.22967529 132.75059509]
[122.55913544 123.32729340]
[111.37105560 129.12478638]
[99.27185822 130.07174683]
[88.20069885 126.37637329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[10 35]
[11 34]
[13 31]
[14 30]
[15 29]
[16 28]
[17 25]
[18 24]
[19 23]
[45 56]
[46 55]
[47 54]
[48 53]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
