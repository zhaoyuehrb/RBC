%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGGAUGGAAACCUGACUGCCUGGCCCGGGACGGCGCUUGCAGCCAGGCAGGGCCCAGAGCAGUCCUCCCUCGGC\
) } def
/len { sequence length } bind def

/coor [
[100.50319672 245.24378967]
[99.89920807 230.25596619]
[99.29521942 215.26812744]
[98.38954163 200.29548645]
[97.18254089 185.34413147]
[95.97554016 170.39277649]
[94.76854706 155.44140625]
[90.98674774 148.84712219]
[93.82639313 139.86576843]
[93.22240448 124.87793732]
[92.61841583 109.89009857]
[81.08481598 119.48052216]
[66.08722687 119.74917603]
[54.21754837 110.57798004]
[50.69288635 95.99797058]
[57.06244278 82.41751099]
[70.52659607 75.80565643]
[85.16741943 79.06851196]
[94.54994965 90.77235413]
[98.13968658 76.20822906]
[101.72942352 61.64410019]
[105.31915283 47.07997131]
[108.61488342 32.44651031]
[111.61527252 17.74965286]
[114.61565399 3.05279255]
[117.61604309 -11.64406776]
[120.31987000 -26.39836502]
[122.72603607 -41.20412064]
[125.13220215 -56.00987244]
[112.70021057 -64.79661560]
[105.34603119 -78.05568695]
[104.48148346 -93.13125610]
[110.22457886 -107.03010559]
[121.38669586 -117.01592255]
[135.71818542 -121.14799500]
[138.12434387 -135.95375061]
[140.53051758 -150.75950623]
[130.18261719 -162.48361206]
[129.84346008 -178.11752319]
[139.67318726 -190.27937317]
[155.03050232 -193.22669983]
[168.66415405 -185.56787109]
[174.13674927 -170.91915894]
[168.86428833 -156.19723511]
[155.33627319 -148.35333252]
[152.93009949 -133.54757690]
[150.52394104 -118.74182892]
[162.80937195 -110.28408051]
[170.23486328 -97.27748108]
[171.28106689 -82.27526855]
[165.68707275 -68.24931335]
[154.51263428 -58.00143433]
[139.93795776 -53.60370636]
[137.53178406 -38.79795074]
[135.12562561 -23.99219704]
[137.21940613 -16.68447495]
[132.31289673 -8.64368153]
[129.31251526 6.05317783]
[126.31213379 20.75003815]
[123.31174469 35.44689560]
[125.10958099 42.83300018]
[119.88328552 50.66970825]
[116.29354858 65.23383331]
[112.70381165 79.79796600]
[109.11408234 94.36209106]
[107.60624695 109.28610992]
[108.21023560 124.27394867]
[108.81422424 139.26177979]
[109.71990204 154.23442078]
[110.92690277 169.18577576]
[112.13390350 184.13713074]
[113.34089661 199.08850098]
[117.24242401 207.66207886]
[114.28305054 214.66413879]
[114.88703918 229.65197754]
[115.49102783 244.63980103]
[118.45552063 263.79345703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 72]
[5 71]
[6 70]
[7 69]
[9 68]
[10 67]
[11 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 60]
[24 59]
[25 58]
[26 57]
[27 55]
[28 54]
[29 53]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
