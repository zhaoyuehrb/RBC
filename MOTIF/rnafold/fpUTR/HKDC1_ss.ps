%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAGUCCGCAACACCUCGCUCCCCAGGAGGUCUGCCAGCCUGGACUGGAAGCGUGCAACACUCCAGAGUCGUAGGAGUGAACACUGCACAGGAAUCUCUGCCCAUCUCAGGAGAAACCAAACUUGGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[-3.75920248 454.21905518]
[0.57980716 468.57778931]
[-1.60701442 483.41754150]
[-9.90351200 495.91424561]
[-22.73084831 503.68981934]
[-37.64796448 505.26452637]
[-51.81610489 500.33871460]
[-62.53905487 489.84973145]
[-67.77622223 475.79370117]
[-66.53018951 460.84301758]
[-76.49726105 472.05273438]
[-73.04483032 487.18084717]
[-79.17479706 501.43579102]
[-92.53005219 509.33621216]
[-107.97523499 507.84426880]
[-119.57135773 497.53359985]
[-122.85947418 482.36889648]
[-116.57523346 468.18130493]
[-103.13505554 460.42623901]
[-87.70697021 462.08566284]
[-77.73989868 450.87594604]
[-69.44292450 438.37954712]
[-62.97997284 424.84329224]
[-56.51701355 411.30703735]
[-50.05405807 397.77078247]
[-43.59110260 384.23452759]
[-37.12814713 370.69827271]
[-30.66518974 357.16201782]
[-24.20223427 343.62576294]
[-27.20775986 324.58013916]
[-10.60807896 313.25213623]
[-4.78670120 299.42782593]
[1.03467679 285.60351562]
[-7.41919088 277.18655396]
[-12.51814651 266.36312866]
[-13.63180542 254.41575623]
[-10.60356140 242.76898193]
[-3.77210903 232.81970215]
[6.06626606 225.76948547]
[17.75044632 222.47959900]
[29.89149666 223.36572266]
[36.67000198 209.98469543]
[43.44850540 196.60366821]
[50.22701263 183.22264099]
[56.84819794 169.76307678]
[63.31115341 156.22682190]
[63.35469818 148.76562500]
[70.08756256 142.45170593]
[76.86607361 129.07067871]
[83.64457703 115.68965149]
[77.35055542 100.81703949]
[82.55660248 85.52957916]
[96.61940002 77.58936310]
[99.41630554 62.85242462]
[102.04026031 48.08371353]
[104.49092102 33.28525925]
[106.94158173 18.48680496]
[97.86341095 8.46133995]
[96.27030182 -4.77286196]
[102.52418518 -16.32301903]
[114.12737274 -22.04966927]
[116.92427826 -36.78660965]
[119.72117615 -51.52354813]
[122.51807404 -66.26048279]
[125.31497955 -80.99742126]
[128.11187744 -95.73435974]
[116.84586334 -106.27383423]
[113.08851624 -121.23664856]
[118.03878784 -135.84823608]
[130.11706543 -145.44607544]
[145.46922302 -146.96754456]
[159.19644165 -139.92713928]
[166.91839600 -126.57144165]
[166.17106628 -111.16219330]
[157.19290161 -98.61642456]
[142.84881592 -92.93746185]
[140.05191040 -78.20052338]
[137.25502014 -63.46358490]
[134.45811462 -48.72664642]
[131.66120911 -33.98970795]
[128.86431885 -19.25276947]
[138.91270447 -5.81964636]
[136.12646484 11.06406116]
[121.74003601 20.93746567]
[119.28937531 35.73591995]
[116.83871460 50.53437424]
[118.86840820 57.71431732]
[114.15324402 65.64933014]
[111.35633850 80.38626862]
[116.02599335 83.97400665]
[119.61373138 88.64366150]
[134.35067749 85.84675598]
[149.08761597 83.04985809]
[163.82455444 80.25296021]
[175.88873291 69.14495850]
[191.45774841 74.29643250]
[194.51553345 90.40798187]
[181.91650391 100.90542603]
[166.62144470 94.98989868]
[151.88450623 97.78679657]
[137.14756775 100.58369446]
[122.41063690 103.38059998]
[113.62077332 118.11462402]
[97.02560425 122.46815491]
[90.24710083 135.84918213]
[83.46858978 149.23020935]
[76.84740448 162.68977356]
[70.38445282 176.22602844]
[69.49193573 185.41300964]
[63.60803604 190.00114441]
[56.82953262 203.38217163]
[50.05102921 216.76319885]
[43.27252197 230.14422607]
[53.86823654 245.13088989]
[55.47092819 263.33035278]
[47.72910309 279.78598022]
[32.82471848 290.05880737]
[14.85898685 291.42489624]
[9.03760910 305.24920654]
[3.21623158 319.07351685]
[7.93686676 329.00314331]
[6.39179707 339.66564941]
[-0.65849060 347.51812744]
[-10.66597939 350.08871460]
[-17.12893486 363.62496948]
[-23.59189224 377.16122437]
[-30.05484772 390.69747925]
[-36.51780319 404.23373413]
[-42.98075867 417.76998901]
[-49.44371796 431.30624390]
[-55.90667343 444.84249878]
[-42.61388016 437.89254761]
[-27.62709427 437.26306152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[22 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[29 124]
[31 120]
[32 119]
[33 118]
[41 113]
[42 112]
[43 111]
[44 110]
[45 108]
[46 107]
[48 106]
[49 105]
[50 104]
[53 89]
[54 88]
[55 86]
[56 85]
[57 84]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
