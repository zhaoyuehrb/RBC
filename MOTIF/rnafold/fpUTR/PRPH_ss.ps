%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCAGCGGUCUGCGGCUCCUUCCCAGCCCCCGGCCUAGCUCUGCGAACGGUGACUGCCCAUCCUUGGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[80.98274994 117.81764221]
[74.64434052 106.01787567]
[75.00434875 92.62831879]
[62.44684982 84.42409515]
[49.88935471 76.21987152]
[37.33185577 68.01564789]
[24.77435875 59.81142807]
[12.21686172 51.60720444]
[-9.99162102 52.69246292]
[-20.35867119 33.84093475]
[-34.09527206 27.81550217]
[-47.83187103 21.79007149]
[-61.56847000 15.76463985]
[-74.93258667 23.42665863]
[-90.06889343 21.76966095]
[-101.19552612 11.63743019]
[-104.18653870 -2.92937660]
[-117.92313385 -8.95480824]
[-131.65972900 -14.98023891]
[-145.39633179 -21.00567055]
[-159.33215332 -13.91152859]
[-174.55590820 -17.48522186]
[-183.87940979 -30.03936195]
[-182.90037537 -45.64626694]
[-172.08108521 -56.93683624]
[-156.53007507 -58.58000565]
[-143.59005737 -49.79991913]
[-139.37091064 -34.74227142]
[-125.63430023 -28.71683884]
[-111.89770508 -22.69140816]
[-98.16110229 -16.66597557]
[-85.41819763 -24.33124733]
[-70.42781067 -23.00749397]
[-58.95718002 -12.99360561]
[-55.54303741 2.02803993]
[-41.80643845 8.05347157]
[-28.06983948 14.07890224]
[-14.33323956 20.10433388]
[-7.23373127 15.40306950]
[1.27084172 14.05235481]
[9.66301060 16.37388420]
[16.41182709 22.02683067]
[20.25208092 30.05537987]
[20.42108536 39.04970932]
[32.97858047 47.25392914]
[45.53607941 55.45815277]
[58.09357452 63.66237640]
[70.65106964 71.86660004]
[83.20857239 80.07082367]
[98.14986420 74.00574493]
[113.79955292 77.89351654]
[124.16558075 90.24555969]
[125.27893066 106.33244324]
[138.16474915 114.01071930]
[151.05055237 121.68899536]
[156.86769104 121.73213196]
[161.49014282 123.96008301]
[164.24667358 127.46412659]
[164.97073364 131.19969177]
[176.80783081 140.41287231]
[188.64494324 149.62606812]
[203.89584351 146.17004395]
[217.77645874 153.37159729]
[223.73280334 167.83036804]
[218.95245361 182.71937561]
[205.69256592 191.00846863]
[190.21403503 188.78381348]
[179.82536316 177.09580994]
[179.43174744 161.46318054]
[167.59465027 152.24998474]
[155.75753784 143.03678894]
[143.37228394 134.57479858]
[130.48646545 126.89652252]
[117.60066223 119.21825409]
[105.72971344 125.42232513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[10 38]
[11 37]
[12 36]
[13 35]
[17 31]
[18 30]
[19 29]
[20 28]
[53 74]
[54 73]
[55 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
