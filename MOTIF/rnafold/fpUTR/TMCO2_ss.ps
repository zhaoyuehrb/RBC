%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUACCUAGGCCUCCAGACUACUCCCCCUAACUCAUAUUUAGAUUCCUGAAGCUUCUGCACAUGUAGUUCCUAGAGCUGCUGCUUAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[64.61968231 340.60882568]
[63.92219925 325.62503052]
[68.53224182 311.35104370]
[77.86231995 299.60583496]
[90.72341919 291.88623047]
[105.47653961 289.17602539]
[120.24158478 291.82055664]
[133.13734436 299.48321533]
[128.21697998 285.31320190]
[123.29660034 271.14315796]
[118.37622833 256.97311401]
[113.45585632 242.80308533]
[104.82688904 255.07260132]
[90.10529327 257.94912720]
[77.49250031 249.83016968]
[74.01515198 235.23880005]
[81.61048126 222.30392456]
[96.04710388 218.23159790]
[109.28243256 225.29063416]
[107.28312683 210.42446899]
[105.28382111 195.55830383]
[103.28451538 180.69215393]
[101.28520966 165.82598877]
[99.28591156 150.95982361]
[89.54854584 150.15931702]
[80.09171295 147.50552368]
[71.26670837 143.07649231]
[63.40523148 137.01660156]
[56.80693054 129.53187561]
[51.72800064 120.88306427]
[48.37127304 111.37653351]
[46.87815857 101.35345459]
[47.32282639 91.17755890]
[49.70874405 81.22193909]
[53.96784973 71.85535431]
[59.96234131 63.42859650]
[67.48905945 56.26135254]
[76.28631592 50.63008118]
[86.04298401 46.75740433]
[96.40950775 44.80332184]
[95.90828705 29.81169891]
[95.40705872 14.82007504]
[94.90583038 -0.17154816]
[94.40460968 -15.16317177]
[85.28047943 -28.78970146]
[92.76114655 -43.38325119]
[109.15113068 -43.93122864]
[117.58983612 -29.86992073]
[109.39623260 -15.66439629]
[109.89746094 -0.67277282]
[110.39868164 14.31885052]
[110.89990997 29.31047440]
[111.40113068 44.30209732]
[125.57116699 49.22246933]
[135.25558472 37.76768875]
[137.62911987 21.54121780]
[152.96630859 15.73579407]
[165.48954773 26.32353973]
[162.31602478 42.41268921]
[146.71037292 47.45210648]
[137.02595520 58.90688705]
[149.88682556 78.19599915]
[153.56918335 100.71342468]
[147.71376038 122.38598633]
[133.65945435 139.41902161]
[114.15206909 148.96051025]
[116.15137482 163.82667542]
[118.15068054 178.69284058]
[120.14998627 193.55900574]
[122.14928436 208.42517090]
[124.14859009 223.29133606]
[127.62589264 237.88270569]
[132.54626465 252.05274963]
[137.46664429 266.22277832]
[142.38700867 280.39282227]
[147.30738831 294.56286621]
[155.58876038 307.06961060]
[166.71354675 317.13137817]
[177.83833313 327.19314575]
[193.97642517 330.10757446]
[199.26611328 345.63015747]
[188.26580811 357.79263306]
[172.29168701 354.08325195]
[167.77655029 338.31793213]
[156.65177917 328.25616455]
[145.52699280 318.19439697]
[147.54728699 333.05770874]
[144.21807861 347.68359375]
[135.96362305 360.20812988]
[123.83586884 369.03521729]
[109.38034058 373.03994751]
[94.43924713 371.71197510]
[80.91663361 365.22052002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[54 61]
[55 60]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
