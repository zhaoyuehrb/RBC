%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUAGUCGCCGCGUCGCCGGUGCGGCCGCCAUUGUCCGGCGUUCGGCGAGUCGGGUGGUCCCUUUGGCUGGAGUGCCUCUCUGGUCUGGGGAUCACCUCAGGCGCUGUCCUUCACUGGGCGAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 163.20347595]
[92.50000000 148.20347595]
[92.50000000 133.20347595]
[92.50000000 118.20347595]
[86.79987335 113.32919312]
[72.65726471 118.32785034]
[75.39962769 103.58063507]
[69.69950867 98.70635986]
[54.88137817 101.03511047]
[40.06325150 103.36386108]
[25.24512100 105.69261169]
[10.42699337 108.02136230]
[-4.39113426 110.35011292]
[-11.05436611 122.12377930]
[-23.11986160 127.79813385]
[-36.05353546 125.49002838]
[-45.13740540 116.27050781]
[-60.00711441 118.24325562]
[-74.87682343 120.21601105]
[-89.74652863 122.18875885]
[-104.61624146 124.16151428]
[-119.48594666 126.13426971]
[-127.67660522 130.40293884]
[-134.73538208 127.97161102]
[-149.64811707 129.58723450]
[-164.56085205 131.20285034]
[-179.47358704 132.81846619]
[-189.18370056 145.28800964]
[-204.87718201 147.15628052]
[-217.24334717 137.31488037]
[-218.94560242 121.60252380]
[-208.97399902 109.34108734]
[-193.24453735 107.80505371]
[-181.08921814 117.90573120]
[-166.17646790 116.29010773]
[-151.26373291 114.67449188]
[-136.35099792 113.05886841]
[-121.45870209 111.26455688]
[-106.58899689 109.29180145]
[-91.71928406 107.31905365]
[-76.84957886 105.34629822]
[-61.97986603 103.37355042]
[-47.11015701 101.40079498]
[-37.51532364 87.64330292]
[-20.61424637 84.98204041]
[-6.71988487 95.53198242]
[8.09824371 93.20323181]
[22.91637230 90.87448120]
[37.73450089 88.54573059]
[52.55262756 86.21697998]
[67.37075806 83.88822937]
[80.14624023 76.02776337]
[88.90471649 63.85035706]
[97.66318512 51.67295456]
[106.12713623 39.28902817]
[114.29169464 26.70570755]
[122.45624542 14.12238407]
[130.62080383 1.53906155]
[138.78535461 -11.04426098]
[146.94992065 -23.62758446]
[155.11447144 -36.21090698]
[163.27903748 -48.79423141]
[171.44358826 -61.37755203]
[179.60813904 -73.96087646]
[187.77270508 -86.54419708]
[185.85786438 -99.36502838]
[192.99803162 -109.69911194]
[204.88140869 -112.27205658]
[213.34535217 -124.65598297]
[221.80929565 -137.03990173]
[230.27325439 -149.42382812]
[238.73719788 -161.80775452]
[247.20114136 -174.19168091]
[255.66510010 -186.57560730]
[264.12905884 -198.95951843]
[262.58950806 -214.92854309]
[274.21444702 -225.98475647]
[290.08624268 -223.64680481]
[298.02938843 -209.70814514]
[291.95056152 -194.86134338]
[276.51296997 -190.49557495]
[268.04901123 -178.11164856]
[259.58508301 -165.72772217]
[251.12112427 -153.34379578]
[242.65718079 -140.95988464]
[234.19322205 -128.57595825]
[225.72927856 -116.19203186]
[217.26533508 -103.80810547]
[216.92637634 -86.30487061]
[200.35601807 -78.37963867]
[192.19146729 -65.79631805]
[184.02691650 -53.21299744]
[175.86235046 -40.62967300]
[167.69779968 -28.04635048]
[159.53324890 -15.46302795]
[151.36868286 -2.87970471]
[143.20413208 9.70361805]
[135.03956604 22.28694153]
[126.87501526 34.87026215]
[118.71045685 47.45358658]
[118.83885193 52.31857681]
[115.84374237 57.29563522]
[109.84059143 60.43142700]
[101.08211517 72.60883331]
[92.32364655 84.78623199]
[105.12268066 73.60523987]
[127.61405182 75.77523804]
[146.49343872 97.15479279]
[156.64569092 108.19706726]
[166.79795837 119.23933411]
[176.95021057 130.28160095]
[187.10246277 141.32386780]
[202.90136719 141.73645020]
[213.72039795 153.25704956]
[213.14079285 169.05070496]
[201.50645447 179.74732971]
[185.71980286 179.00077820]
[175.14678955 167.25399780]
[176.06019592 151.47612000]
[165.90794373 140.43385315]
[155.75569153 129.39158630]
[145.60342407 118.34931946]
[135.45117188 107.30705261]
[128.46337891 110.03115845]
[126.19390106 124.85848236]
[114.48779297 115.47937012]
[107.50000000 118.20347595]
[107.50000000 133.20347595]
[107.50000000 148.20347595]
[107.50000000 163.20347595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[24 37]
[25 36]
[26 35]
[27 34]
[52 105]
[53 104]
[54 103]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
