%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUUUCCGGCCGGAAGCUGCGGCGCGACCCGGCUGCGCAUGCGCCUCUCACACGUGCUGUCAGAACGCCGCCUCCUCCGCUUGCGGCCGGUCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[83.38079071 390.29681396]
[71.13183594 380.77090454]
[66.85375977 365.85522461]
[72.19157410 351.28515625]
[85.09276581 342.66314697]
[85.55020905 327.67013550]
[73.67942047 318.71343994]
[69.30720520 304.31387329]
[74.31085205 289.93273926]
[86.96943665 281.15399170]
[87.42687988 266.16098022]
[87.88432312 251.16793823]
[88.34176636 236.17492676]
[88.79920959 221.18190002]
[89.25665283 206.18887329]
[89.71408844 191.19584656]
[82.36852264 178.23854065]
[90.52307892 164.68074036]
[90.98052216 149.68771362]
[91.43796539 134.69470215]
[91.89540863 119.70167542]
[78.73609161 101.29874420]
[89.55792999 81.43111420]
[87.27922058 66.60520935]
[85.00051117 51.77930069]
[82.72180176 36.95339584]
[80.44309235 22.12748909]
[78.16437531 7.30158329]
[65.56381989 3.71235371]
[55.33127594 -4.39434814]
[49.00058746 -15.75733185]
[47.50307846 -28.63088226]
[51.03067398 -41.05292892]
[59.01219177 -51.14407730]
[70.20545197 -57.39196014]
[68.83482361 -72.32920837]
[67.46419525 -87.26645660]
[58.49827194 -100.30190277]
[65.04025269 -113.68292236]
[63.66962433 -128.62017822]
[62.29899597 -143.55741882]
[60.92837143 -158.49467468]
[51.96244812 -171.53010559]
[58.50442505 -184.91113281]
[57.13380051 -199.84838867]
[43.40048981 -206.87687683]
[35.66694641 -220.22587585]
[36.40092087 -235.63577271]
[45.36819839 -248.18931580]
[59.70735550 -253.88072205]
[74.84281921 -250.89387512]
[85.94492340 -240.18188477]
[89.47101593 -225.16288757]
[84.29594421 -210.62940979]
[72.07104492 -201.21900940]
[73.44167328 -186.28176880]
[82.30956268 -174.31472778]
[75.86562347 -159.86529541]
[77.23624420 -144.92805481]
[78.60687256 -129.99079895]
[79.97750092 -115.05355072]
[88.84538269 -103.08651733]
[82.40144348 -88.63708496]
[83.77207184 -73.69983673]
[85.14270020 -58.76258469]
[100.92214966 -52.23817825]
[111.35843658 -38.61281204]
[113.56956482 -21.50431252]
[106.87240601 -5.51130342]
[92.99028778 5.02287292]
[95.26899719 19.84877777]
[97.54770660 34.67468262]
[99.82641602 49.50059128]
[102.10512543 64.32649231]
[104.38383484 79.15240479]
[110.82279205 81.65040588]
[116.12423706 86.07701874]
[119.73097229 91.96698761]
[121.26390839 98.70125580]
[120.56192780 105.57202148]
[117.69882965 111.85714722]
[112.97550964 116.89604950]
[106.88842773 120.15911865]
[106.43098450 135.15214539]
[105.97354126 150.14515686]
[105.51609802 165.13818359]
[112.82894897 179.16789246]
[104.70711517 191.65328979]
[104.24967194 206.64631653]
[103.79222870 221.63934326]
[103.33478546 236.63235474]
[102.87734222 251.62538147]
[102.41989899 266.61840820]
[101.96246338 281.61141968]
[114.06230927 291.14556885]
[118.17991638 305.80499268]
[112.93798828 319.91122437]
[100.54323578 328.12756348]
[100.08579254 343.12060547]
[112.43736267 352.51306152]
[116.87699127 367.38146973]
[111.69755554 382.00860596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[18 86]
[19 85]
[20 84]
[21 83]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[35 65]
[36 64]
[37 63]
[39 61]
[40 60]
[41 59]
[42 58]
[44 56]
[45 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
