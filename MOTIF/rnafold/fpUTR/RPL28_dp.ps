%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:49 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RPL28)
} def

/sequence { (\
CUCUUUCCGUCUCAGGUCGCCGCUGCGAAGGGAGCCGCCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 15 0.008019269 ubox
1 16 0.005022256 ubox
1 32 0.058040857 ubox
1 34 0.205168477 ubox
2 14 0.008198411 ubox
2 15 0.003847160 ubox
2 16 0.012275564 ubox
2 31 0.057154741 ubox
2 32 0.036476880 ubox
2 33 0.211929198 ubox
3 15 0.016850160 ubox
3 16 0.016878827 ubox
3 30 0.057569919 ubox
3 31 0.047043755 ubox
3 32 0.211675457 ubox
3 34 0.115705179 ubox
4 14 0.016363691 ubox
4 15 0.017052451 ubox
4 29 0.056000348 ubox
4 30 0.048885483 ubox
4 31 0.198304387 ubox
4 33 0.099319518 ubox
4 34 0.319500242 ubox
5 14 0.017984905 ubox
5 15 0.003250747 ubox
5 28 0.041154784 ubox
5 29 0.051362435 ubox
5 30 0.192699743 ubox
5 31 0.004652709 ubox
5 32 0.074163184 ubox
5 33 0.470914564 ubox
5 34 0.129405169 ubox
6 14 0.005723083 ubox
6 16 0.005575757 ubox
6 27 0.021505151 ubox
6 28 0.052188166 ubox
6 29 0.180038627 ubox
6 30 0.005321488 ubox
6 31 0.035214145 ubox
6 32 0.490005987 ubox
6 33 0.189205243 ubox
7 15 0.008045975 ubox
7 16 0.186330796 ubox
7 27 0.041177561 ubox
7 30 0.034808748 ubox
7 31 0.506370463 ubox
7 32 0.194020557 ubox
8 15 0.188366438 ubox
8 19 0.019812992 ubox
8 25 0.016922067 ubox
8 27 0.169281410 ubox
8 30 0.506309250 ubox
8 31 0.193320290 ubox
8 37 0.619761351 ubox
8 40 0.064944382 ubox
9 18 0.022999146 ubox
9 20 0.008446800 ubox
9 23 0.009247526 ubox
9 24 0.012808875 ubox
9 26 0.173451917 ubox
9 35 0.143715237 ubox
9 36 0.640263781 ubox
9 38 0.104366615 ubox
9 39 0.061689824 ubox
9 41 0.079668568 ubox
10 16 0.009368111 ubox
10 19 0.008465567 ubox
10 22 0.009122405 ubox
10 25 0.156404365 ubox
10 28 0.516892465 ubox
10 31 0.005667468 ubox
10 32 0.003422991 ubox
10 33 0.114972974 ubox
10 34 0.032331718 ubox
10 37 0.103013955 ubox
10 40 0.078730715 ubox
11 15 0.010494080 ubox
11 27 0.542987412 ubox
11 30 0.021357132 ubox
11 31 0.004458334 ubox
11 32 0.123944543 ubox
11 34 0.672158714 ubox
12 28 0.013078573 ubox
12 29 0.021482817 ubox
12 30 0.003541252 ubox
12 31 0.123719583 ubox
12 32 0.009222836 ubox
12 33 0.674460979 ubox
13 25 0.550985501 ubox
13 27 0.013557988 ubox
13 30 0.122607529 ubox
13 31 0.013719622 ubox
13 32 0.674228450 ubox
14 24 0.551970665 ubox
15 21 0.143254336 ubox
15 23 0.548820414 ubox
15 24 0.080548328 ubox
15 36 0.111410332 ubox
15 39 0.079965297 ubox
15 42 0.359580562 ubox
16 20 0.141839196 ubox
16 23 0.095798552 ubox
16 26 0.003199024 ubox
16 35 0.111494262 ubox
16 38 0.080028850 ubox
16 41 0.362977198 ubox
17 22 0.102390663 ubox
17 28 0.690853480 ubox
17 33 0.027111998 ubox
17 34 0.107751527 ubox
17 37 0.072669752 ubox
17 40 0.350226715 ubox
18 27 0.695733339 ubox
18 32 0.031736983 ubox
18 37 0.031722329 ubox
18 40 0.073851265 ubox
19 26 0.695769899 ubox
19 35 0.071018847 ubox
19 36 0.030660349 ubox
19 38 0.362590502 ubox
19 39 0.060536241 ubox
19 41 0.148110305 ubox
20 25 0.692656857 ubox
20 31 0.108814446 ubox
20 32 0.034022638 ubox
20 34 0.071389471 ubox
20 37 0.365499716 ubox
20 40 0.148228536 ubox
21 30 0.108832705 ubox
21 31 0.034598371 ubox
21 37 0.033429292 ubox
21 40 0.008941606 ubox
22 35 0.367484135 ubox
22 36 0.026695490 ubox
22 38 0.150869832 ubox
22 39 0.009242499 ubox
22 41 0.082070858 ubox
23 30 0.038271229 ubox
23 31 0.067707434 ubox
23 32 0.013332954 ubox
23 34 0.368432572 ubox
23 37 0.150982374 ubox
23 40 0.082183186 ubox
24 29 0.038566792 ubox
24 30 0.066730695 ubox
24 31 0.013692921 ubox
24 33 0.367875996 ubox
25 35 0.151597555 ubox
25 36 0.003619929 ubox
25 38 0.083006348 ubox
25 41 0.017459497 ubox
26 34 0.151718004 ubox
26 37 0.083088432 ubox
26 40 0.017554214 ubox
27 36 0.082823285 ubox
27 39 0.017344924 ubox
30 36 0.020272682 ubox
30 39 0.053649842 ubox
30 42 0.009024635 ubox
31 35 0.020054853 ubox
31 38 0.053691457 ubox
31 39 0.025601331 ubox
31 41 0.009046541 ubox
31 42 0.008310381 ubox
32 38 0.025893824 ubox
32 41 0.009540925 ubox
34 41 0.286262704 ubox
35 40 0.287449940 ubox
8 37 0.9500000 lbox
9 36 0.9500000 lbox
11 34 0.9500000 lbox
12 33 0.9500000 lbox
13 32 0.9500000 lbox
17 28 0.9500000 lbox
18 27 0.9500000 lbox
19 26 0.9500000 lbox
20 25 0.9500000 lbox
showpage
end
%%EOF
