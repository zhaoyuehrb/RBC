%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCCCCGCAGCGCCGGUCGGGAGCGCAGCGCGGCGCACGUCGGCGCGCACGGCGGGACGGGCGCCGGAGUGGUCGGGCCUGGCGGCUGGACGGGCGCCCCUCGCUGCCCCGCGCGCUCCCCGCCGCCCCCCAUGAGCGCAGCCCCGCGCGGCCCGGGUCCGUAGGCGGCGGGGCGCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.57108879 206.60795593]
[5.45416594 199.33154297]
[-0.05015368 185.37796021]
[4.56618690 171.10655212]
[-8.82770061 177.85960388]
[-22.22158813 184.61265564]
[-35.61547852 191.36572266]
[-49.00936508 198.11877441]
[-62.28664780 205.09829712]
[-75.44350433 212.30227661]
[-80.03517151 229.17098999]
[-95.10408783 237.34892273]
[-111.10733032 232.21192932]
[-124.13995361 239.63827515]
[-137.17257690 247.06462097]
[-150.20520020 254.49096680]
[-163.23783875 261.91732788]
[-176.27046204 269.34365845]
[-189.30308533 276.77001953]
[-195.22680664 283.75396729]
[-202.62066650 284.20965576]
[-215.77752686 291.41363525]
[-218.23010254 302.04003906]
[-225.97579956 309.40161133]
[-236.28022766 311.23370361]
[-245.68498230 307.16735840]
[-259.07885742 313.92041016]
[-272.47274780 320.67346191]
[-285.86663818 327.42654419]
[-290.57556152 342.51300049]
[-304.61160278 349.77697754]
[-319.64743042 344.90881348]
[-326.76260376 330.79675293]
[-321.73574829 315.81323242]
[-307.54925537 308.84765625]
[-292.61968994 314.03265381]
[-279.22583008 307.27960205]
[-265.83193970 300.52651978]
[-252.43803406 293.77346802]
[-243.07714844 276.86935425]
[-222.98150635 278.25677490]
[-209.82464600 271.05279541]
[-196.72943115 263.73739624]
[-183.69680786 256.31103516]
[-170.66418457 248.88468933]
[-157.63156128 241.45834351]
[-144.59892273 234.03199768]
[-131.56629944 226.60565186]
[-118.53367615 219.17930603]
[-116.89572906 206.38520813]
[-108.05068207 196.73129272]
[-95.06789398 193.89978027]
[-82.64747620 199.14541626]
[-69.49062347 191.94143677]
[-67.31002045 187.66908264]
[-62.41083145 184.73258972]
[-55.76242065 184.72488403]
[-42.36853409 177.97183228]
[-28.97464561 171.21878052]
[-15.58075714 164.46571350]
[-2.18686938 157.71266174]
[10.78223324 150.17593384]
[23.28074837 141.88212585]
[35.77926254 133.58833313]
[48.27777863 125.29452515]
[60.77629471 117.00072479]
[73.27481079 108.70692444]
[85.77332306 100.41313171]
[90.81988525 82.65805054]
[92.34558868 67.73583984]
[93.87128448 52.81363678]
[95.39698792 37.89142990]
[96.92268372 22.96922302]
[98.44838715 8.04701614]
[97.17629242 -6.89894581]
[93.15067291 -21.34866524]
[89.12506104 -35.79838562]
[77.96798706 -47.01579666]
[82.00576782 -61.35266113]
[77.98014832 -75.80238342]
[73.95452881 -90.25209808]
[69.92890930 -104.70182037]
[57.84624481 -115.78970337]
[61.67094040 -131.73660278]
[77.46847534 -136.13772583]
[88.98770905 -124.46556091]
[84.37863159 -108.72743988]
[88.40425110 -94.27771759]
[92.42986298 -79.82799530]
[96.45548248 -65.37828064]
[107.32461548 -55.19440460]
[103.57477570 -39.82400513]
[107.60039520 -25.37428474]
[111.62601471 -10.92456436]
[126.60655212 -10.16072369]
[132.08102417 -24.12604523]
[137.55549622 -38.09136581]
[143.02996826 -52.05668640]
[148.38565063 -66.06798553]
[153.62219238 -80.12425232]
[148.28659058 -95.25405121]
[156.91069031 -108.78196716]
[172.87882996 -110.33053589]
[183.94161987 -98.71183014]
[181.61262512 -82.83872986]
[167.67846680 -74.88771820]
[162.44192505 -60.83144760]
[163.05450439 -53.44892502]
[156.99528503 -46.58221817]
[151.52081299 -32.61689758]
[146.04634094 -18.65157509]
[140.57186890 -4.68625450]
[136.18167114 1.94154942]
[130.67593384 6.71823692]
[124.65557861 9.52193260]
[118.70989990 10.40345001]
[113.37059021 9.57271576]
[111.84488678 24.49492264]
[110.31919098 39.41712952]
[108.79349518 54.33933640]
[107.26779175 69.26154327]
[105.74209595 84.18374634]
[113.82246399 96.82129669]
[128.00753784 101.69812775]
[142.19262695 106.57495880]
[156.37770081 111.45178986]
[170.56278992 116.32862091]
[184.74786377 121.20545197]
[198.93295288 126.08228302]
[213.11802673 130.95912170]
[227.53305054 135.10728455]
[242.14059448 138.51600647]
[256.74813843 141.92472839]
[266.36102295 130.11988831]
[280.09005737 123.68560791]
[295.18951416 123.84958649]
[308.66503906 130.52574158]
[317.86764526 142.34190369]
[321.01428223 156.92147827]
[335.62182617 160.33021545]
[350.22937012 163.73893738]
[364.83694458 167.14765930]
[378.12545776 158.59248352]
[393.55334473 162.02107239]
[401.96755981 175.39929199]
[398.37606812 190.79008484]
[384.90963745 199.06237793]
[369.55764771 195.30834961]
[361.42819214 181.75521851]
[346.82064819 178.34648132]
[332.21310425 174.93775940]
[317.60556030 171.52903748]
[308.33090210 183.21005249]
[294.84887695 189.73268127]
[279.81024170 189.75494385]
[266.19775391 183.21887207]
[256.73452759 171.37258911]
[253.33941650 156.53228760]
[238.73187256 153.12356567]
[224.12431335 149.71482849]
[230.96777344 163.06275940]
[226.51838684 177.38766479]
[213.31689453 184.50950623]
[198.90184021 180.36148071]
[191.50473022 167.31224060]
[195.34957886 152.81336975]
[208.24119568 145.14419556]
[194.05612183 140.26736450]
[179.87103271 135.39053345]
[165.68595886 130.51370239]
[151.50086975 125.63687134]
[137.31579590 120.76004028]
[123.13071442 115.88320923]
[108.94563293 111.00637817]
[94.06712341 112.91164398]
[81.56861115 121.20544434]
[69.07009125 129.49923706]
[56.57157898 137.79304504]
[44.07306290 146.08683777]
[31.57454872 154.38064575]
[19.07603264 162.67443848]
[33.76162338 165.72950745]
[43.15964127 177.42041016]
[42.98725128 192.41941833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 54]
[10 53]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[21 42]
[22 41]
[26 39]
[27 38]
[28 37]
[29 36]
[62 181]
[63 180]
[64 179]
[65 178]
[66 177]
[67 176]
[68 175]
[69 122]
[70 121]
[71 120]
[72 119]
[73 118]
[74 117]
[75 94]
[76 93]
[77 92]
[79 90]
[80 89]
[81 88]
[82 87]
[95 112]
[96 111]
[97 110]
[98 109]
[99 107]
[100 106]
[123 174]
[124 173]
[125 172]
[126 171]
[127 170]
[128 169]
[129 168]
[130 167]
[131 160]
[132 159]
[133 158]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
