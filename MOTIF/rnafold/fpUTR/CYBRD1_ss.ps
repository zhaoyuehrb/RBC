%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUGGGGCCAGCUCCCCACCCCCAAGAGGCCCCACAUUCCGGGCCAGCAGCCCAGAAAGUCCCUCCCCGCAGGCGGAGACAGCCCCAAGAAGUCGACGCCCCGGUCCCGCCGCCCGGCCACUACCCAGAGGGCUGCCGCCGCCUCUCCAAGUUCUUGUGGCCCCCGCGGUGCGGAGUAUGGGGCGCUG\
) } def
/len { sequence length } bind def

/coor [
[85.22947693 142.76495361]
[71.49578094 135.13571167]
[61.19899750 123.26996613]
[55.58067703 108.59842682]
[40.58524323 108.96847534]
[25.58980751 109.33851624]
[10.59437275 109.70856476]
[-4.40106201 110.07860565]
[-19.39649582 110.44865417]
[-34.39192963 110.81870270]
[-43.24431610 123.42590332]
[-57.65436554 128.34564209]
[-72.02821350 123.88957214]
[-80.91555786 111.96677399]
[-95.91098785 112.33681488]
[-110.90642548 112.70686340]
[-125.90186310 113.07691193]
[-140.89373779 113.57026672]
[-155.88105774 114.18689728]
[-159.80438232 127.06122589]
[-167.49470520 138.07878113]
[-178.19046021 146.17300415]
[-190.83992004 150.56567383]
[-204.20472717 150.84159851]
[-216.98106384 146.98797607]
[-227.92686462 139.39410400]
[-235.98252869 128.81221008]
[-240.37356567 116.28291321]
[-255.37306213 116.40627289]
[-270.37255859 116.52963257]
[-285.37203979 116.65299225]
[-291.04937744 124.21918488]
[-299.45172119 128.25566101]
[-308.63107300 127.96740723]
[-316.52322388 123.54623413]
[-321.41186523 116.09904480]
[-336.39920044 115.48241425]
[-350.50576782 122.64586639]
[-362.90420532 114.39189911]
[-377.89154053 113.77526855]
[-392.87884521 113.15863800]
[-406.98541260 120.32209015]
[-419.38388062 112.06813049]
[-434.37118530 111.45149994]
[-449.35852051 110.83486938]
[-464.34582520 110.21823883]
[-477.07330322 119.98505402]
[-492.60946655 115.98411560]
[-499.03628540 101.28460693]
[-491.42364502 87.16272736]
[-475.61135864 84.45157623]
[-463.72918701 95.23091888]
[-448.74188232 95.84754944]
[-433.75454712 96.46417999]
[-418.76724243 97.08081055]
[-405.73266602 89.87325287]
[-392.26220703 98.17131805]
[-377.27490234 98.78794861]
[-362.28756714 99.40457916]
[-349.25299072 92.19702148]
[-335.78256226 100.49509430]
[-320.79522705 101.11172485]
[-303.43954468 89.95946503]
[-285.49539185 101.65349579]
[-270.49591064 101.53013611]
[-255.49641418 101.40678406]
[-240.49693298 101.28342438]
[-234.62646484 85.71714020]
[-223.20758057 73.56792450]
[-207.96765137 66.71480560]
[-191.22798157 66.23252106]
[-175.55017090 72.22306061]
[-163.34413147 83.79575348]
[-156.49769592 99.19957733]
[-141.51037598 98.58294678]
[-134.94523621 95.16085815]
[-126.27190399 98.08147430]
[-111.27647400 97.71142578]
[-96.28103638 97.34138489]
[-81.28559875 96.97133636]
[-72.99716187 84.62468719]
[-58.86060333 79.46506500]
[-44.22542953 83.66805267]
[-34.76197815 95.82326508]
[-19.76654243 95.45321655]
[-4.77110720 95.08317566]
[10.22432804 94.71312714]
[25.21976280 94.34308624]
[40.21519852 93.97303772]
[55.21063232 93.60298920]
[59.37410355 80.08654022]
[67.50744629 68.51599121]
[78.81587982 60.02197647]
[92.19438171 55.43452454]
[106.33562469 55.20190811]
[119.85776520 59.34685516]
[131.43945312 67.46433258]
[139.94895935 78.76111603]
[144.55473328 92.13331604]
[159.55422974 92.00995636]
[174.55372620 91.88659668]
[189.55320740 91.76323700]
[204.55270386 91.63987732]
[219.55220032 91.51651764]
[234.55169678 91.39315796]
[251.42817688 80.38868713]
[267.83697510 90.59935760]
[282.82427979 89.98272705]
[297.81161499 89.36609650]
[312.79333496 88.62622833]
[327.76849365 87.76318359]
[342.74365234 86.90013123]
[357.71881104 86.03707886]
[372.69393921 85.17403412]
[387.66909790 84.31098175]
[399.05654907 71.04219818]
[416.17965698 70.12398529]
[428.42861938 81.63674927]
[443.38754272 80.52751923]
[458.34646606 79.41828156]
[473.30541992 78.30904388]
[488.26434326 77.19980621]
[503.22326660 76.09057617]
[508.33432007 59.29540634]
[519.47229004 45.77090073]
[534.91363525 37.56735992]
[552.28533936 35.91499710]
[568.92913818 41.03954315]
[582.30877686 52.13182068]
[590.39611816 67.47540283]
[605.28210449 65.62967682]
[620.16809082 63.78395462]
[635.03845215 61.81586838]
[649.89208984 59.72555923]
[664.74572754 57.63524628]
[672.87591553 44.27734756]
[687.70678711 39.31961060]
[702.23565674 45.10292816]
[709.60241699 58.89659500]
[706.32867432 74.18766022]
[693.96026611 83.75615692]
[678.33709717 83.08412933]
[666.83605957 72.48888397]
[651.98236084 74.57920074]
[637.12872314 76.66950989]
[630.93273926 80.72180176]
[622.01385498 78.66996765]
[607.12780762 80.51568604]
[592.24182129 82.36141205]
[589.92944336 94.75847626]
[584.21295166 106.01940918]
[575.54565430 115.22904968]
[564.62103271 121.63577271]
[552.31738281 124.71281433]
[539.62719727 124.20156097]
[527.57702637 120.13329315]
[517.14447021 112.82740784]
[509.17898560 102.86641693]
[504.33248901 91.04950714]
[489.37356567 92.15873718]
[474.41464233 93.26797485]
[459.45571899 94.37721252]
[444.49676514 95.48644257]
[429.53784180 96.59568024]
[422.56631470 107.44381714]
[410.43652344 112.36437988]
[397.49835205 109.35076904]
[388.53216553 99.28613281]
[373.55700684 100.14918518]
[358.58184814 101.01222992]
[343.60668945 101.87528229]
[328.63156128 102.73833466]
[313.65640259 103.60137939]
[307.14843750 107.13098907]
[298.42822266 104.35341644]
[283.44091797 104.97004700]
[268.45358276 105.58667755]
[262.22052002 113.70993042]
[252.33470154 117.12436676]
[241.99110413 114.47046661]
[234.67504883 106.39265442]
[219.67555237 106.51601410]
[204.67607117 106.63937378]
[189.67657471 106.76273346]
[174.67707825 106.88609314]
[159.67758179 107.00945282]
[144.67810059 107.13281250]
[139.54536438 121.98120117]
[129.64442444 134.17919922]
[116.16908264 142.25601196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[14 80]
[15 79]
[16 78]
[17 77]
[18 75]
[19 74]
[28 67]
[29 66]
[30 65]
[31 64]
[36 62]
[37 61]
[39 59]
[40 58]
[41 57]
[43 55]
[44 54]
[45 53]
[46 52]
[99 187]
[100 186]
[101 185]
[102 184]
[103 183]
[104 182]
[105 181]
[107 177]
[108 176]
[109 175]
[110 173]
[111 172]
[112 171]
[113 170]
[114 169]
[115 168]
[118 164]
[119 163]
[120 162]
[121 161]
[122 160]
[123 159]
[130 149]
[131 148]
[132 147]
[133 145]
[134 144]
[135 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
