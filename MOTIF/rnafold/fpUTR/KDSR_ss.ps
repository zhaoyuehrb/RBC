%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCCCCUCCGCCGCGGCCCGCCCCGGCCCGCAAACCCAAACACUCCAGGCGCCCGCCCGCCGCGCGUGAUUCUCGCCUCGCCGCAGCCCAGCCCUGCGCGCCUUGCCCGGCGGCCCCCGCCCGGCCGCUCCGGGCCCCUGGCCCCGCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[122.34291077 158.09420776]
[111.09085083 160.94908142]
[99.55857849 161.65573120]
[88.15061951 160.20974731]
[77.26338196 156.68190002]
[67.27131653 151.21488953]
[58.51412201 144.01777649]
[51.28512955 135.35798645]
[45.82153702 125.55139923]
[42.29665756 114.95089722]
[40.81445694 103.93363953]
[25.84182358 103.02796173]
[10.86919117 102.12228394]
[-4.11180258 101.36741638]
[-19.09963799 100.76342773]
[-34.08747101 100.15943909]
[-49.07530594 99.55545044]
[-64.06314087 98.95146179]
[-79.05097961 98.34747314]
[-90.61375427 108.78490448]
[-105.80494690 107.95886230]
[-115.68418121 96.87120056]
[-130.67201233 96.26721191]
[-138.28143311 104.14003754]
[-148.75958252 106.44591522]
[-158.56001282 102.65354919]
[-164.50201416 94.25465393]
[-179.45336914 93.04765320]
[-194.40473938 91.84066010]
[-209.36749268 90.78426361]
[-224.34011841 89.87858582]
[-229.85810852 103.96429443]
[-239.46029663 115.65415955]
[-252.20599365 123.80292511]
[-266.84649658 127.61227417]
[-281.94744873 126.70898438]
[-296.02947998 121.18156433]
[-307.71289062 111.57153320]
[-315.85311890 98.82038116]
[-319.65264893 84.17733765]
[-318.73925781 69.07698059]
[-313.20239258 54.99868393]
[-303.58453369 43.32169724]
[-290.82794189 35.19001389]
[-276.18234253 31.40029526]
[-261.08261108 32.32381821]
[-247.00802612 37.87010193]
[-235.33747864 47.49578476]
[-227.21435547 60.25783157]
[-223.43444824 74.90595245]
[-208.46180725 75.81163025]
[-201.55564880 73.06050873]
[-193.19773865 76.88929749]
[-178.24636841 78.09629822]
[-163.29501343 79.30329132]
[-146.53819275 69.72183228]
[-130.06802368 81.27938080]
[-115.08019257 81.88336945]
[-104.34080505 71.62660980]
[-89.13240814 72.02563477]
[-78.44699097 83.35963440]
[-63.45915222 83.96362305]
[-48.47131729 84.56761169]
[-33.48348236 85.17160034]
[-18.49564934 85.77558899]
[-3.50781369 86.37957764]
[3.34154201 83.48994446]
[11.77486801 87.14965057]
[26.74750137 88.05532837]
[41.72013474 88.96100616]
[44.09130478 80.18537140]
[47.77556229 71.87509918]
[52.68637848 64.22537994]
[58.70841980 57.41587830]
[65.70024872 51.60652161]
[73.49765015 46.93374634]
[81.91749573 43.50730133]
[90.76203156 41.40766525]
[99.82353210 40.68414307]
[108.88918304 41.35373306]
[117.74605560 43.40071106]
[126.18613434 46.77699661]
[134.45678711 34.26315308]
[142.60102844 21.66666794]
[150.61801147 8.98881721]
[158.63500977 -3.68903446]
[166.65199280 -16.36688614]
[174.66897583 -29.04473686]
[169.74458313 -43.88671494]
[175.56053162 -58.40252304]
[189.37071228 -65.73824310]
[204.65438843 -62.43017197]
[214.19506836 -50.04027557]
[213.48793030 -34.41868973]
[202.86686707 -22.94144630]
[187.34683228 -21.02775002]
[179.32983398 -8.34989834]
[171.31285095 4.32795286]
[163.29586792 17.00580406]
[155.27888489 29.68365479]
[154.35668945 37.06018829]
[146.97064209 42.53380966]
[138.69998169 55.04765320]
[149.48797607 65.73242950]
[157.34274292 78.98571777]
[161.65933228 94.00621796]
[162.05062866 109.85220337]
[177.05062866 109.85220337]
[192.05062866 109.85220337]
[205.85079956 102.11490631]
[218.57807922 109.85220337]
[233.57807922 109.85220337]
[248.57807922 109.85220337]
[263.57806396 109.85220337]
[278.57806396 109.85220337]
[294.41720581 103.80586243]
[304.61196899 117.35220337]
[294.41720581 130.89854431]
[278.57806396 124.85220337]
[263.57806396 124.85220337]
[248.57807922 124.85220337]
[233.57807922 124.85220337]
[218.57807922 124.85220337]
[205.85079956 132.58950806]
[192.05062866 124.85220337]
[177.05062866 124.85220337]
[162.05062866 124.85220337]
[154.94639587 138.06318665]
[163.21705627 150.57702637]
[171.48771667 163.09086609]
[179.75836182 175.60470581]
[188.02902222 188.11854553]
[196.29968262 200.63238525]
[204.94451904 212.89073181]
[213.95565796 224.88237000]
[222.96678162 236.87400818]
[231.97792053 248.86564636]
[240.98905945 260.85729980]
[255.33799744 269.88748169]
[250.63288879 286.17547607]
[233.67895508 286.16320801]
[228.99742126 269.86843872]
[219.98628235 257.87677002]
[210.97514343 245.88514709]
[201.96401978 233.89350891]
[192.95288086 221.90185547]
[189.47348022 221.05827332]
[186.24284363 218.45327759]
[184.10008240 214.22877502]
[183.78584290 208.90304565]
[175.51518250 196.38920593]
[167.24452209 183.87536621]
[158.97387695 171.36152649]
[150.70321655 158.84768677]
[142.43255615 146.33383179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 70]
[12 69]
[13 68]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[22 58]
[23 57]
[27 55]
[28 54]
[29 53]
[30 51]
[31 50]
[82 103]
[83 102]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[107 127]
[108 126]
[109 125]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
[128 155]
[129 154]
[130 153]
[131 152]
[132 151]
[133 150]
[134 146]
[135 145]
[136 144]
[137 143]
[138 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
