%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGGGGCGCGCGGUCGGGGGCAGGUUGGGCCGGAAGAGGGGUCCGGGCCGGCACUGAGGCGGGAAGGGGGUCGGUUGAG\
) } def
/len { sequence length } bind def

/coor [
[91.05404663 336.21322632]
[79.90834045 325.87680054]
[73.57117462 312.05984497]
[73.00891876 296.86929321]
[78.30731964 282.62167358]
[88.65839386 271.48956299]
[102.48369598 265.17056274]
[101.90914917 250.18157959]
[101.33460999 235.19259644]
[86.49173737 229.98942566]
[74.71883392 219.50202942]
[67.80824280 205.28810120]
[66.82684326 189.47550964]
[71.95144653 174.44384766]
[82.43782806 162.46624756]
[96.72859955 155.36569214]
[95.58036804 140.40969849]
[94.43212891 125.45372009]
[82.53630066 119.33680725]
[75.24316406 108.12354279]
[74.47486877 94.76925659]
[80.43391418 82.79357147]
[91.54974365 75.35276794]
[90.97520447 60.36377335]
[90.40065765 45.37478256]
[89.53911591 30.39954376]
[88.39087677 15.44355774]
[87.24263763 0.48757032]
[86.09439850 -14.46841621]
[84.94615936 -29.42440414]
[76.17517090 -42.59180069]
[82.91550446 -55.87401199]
[81.76726532 -70.83000183]
[80.61902618 -85.78598785]
[79.47078705 -100.74197388]
[78.32254791 -115.69795990]
[65.50466919 -124.65541077]
[61.49328613 -139.76974487]
[68.18245697 -153.90441895]
[82.41375732 -160.38548279]
[97.46759796 -156.15277100]
[106.23602295 -143.20483398]
[104.57884216 -127.65531158]
[93.27853394 -116.84619904]
[94.42677307 -101.89021301]
[95.57501221 -86.93422699]
[96.72325134 -71.97823334]
[97.87149048 -57.02225113]
[106.56034851 -44.92460632]
[99.90214539 -30.57264328]
[101.05038452 -15.61665535]
[102.19862366 -0.66066849]
[103.34686279 14.29531860]
[104.49510193 29.25130463]
[108.24240112 35.84630203]
[105.38965607 44.80023956]
[105.96419525 59.78923416]
[106.53873444 74.77822876]
[120.13996887 83.46897888]
[126.01255798 98.50345612]
[121.90292358 114.11222839]
[109.38811493 124.30548096]
[110.53635406 139.26145935]
[111.68459320 154.21745300]
[125.46595764 158.30172729]
[136.97595215 166.86111450]
[144.82095337 178.83345032]
[148.05999756 192.74490356]
[146.31758118 206.89147949]
[139.82711792 219.54762268]
[129.39987183 229.17681885]
[116.32360077 234.61805725]
[116.89814758 249.60704041]
[117.47268677 264.59603882]
[131.74113464 269.83816528]
[142.91398621 280.14523315]
[149.28749084 293.94549561]
[149.88970947 309.13449097]
[144.62881470 323.39602661]
[134.30705261 334.55532837]
[120.49843597 340.91064453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 74]
[8 73]
[9 72]
[16 64]
[17 63]
[18 62]
[23 58]
[24 57]
[25 56]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
