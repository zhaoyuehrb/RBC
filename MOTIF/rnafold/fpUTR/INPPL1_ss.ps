%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUGCUGAGUCCCGAUCCCCGGCUCUGUCCGGCCCACGGAUCCUCAAGCCCGGGCCCCGGGCCCGGCCCCAGCCUCAGCCCUGAGCGUCUCGGGGCGGAUGGCGCGGGGCGGCGGGGGCGGGCGGUGCUGAGCCCUGCGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[136.86970520 356.35205078]
[138.95558167 344.68640137]
[146.51464844 335.40393066]
[142.12231445 321.06143188]
[137.72996521 306.71893311]
[133.33763123 292.37640381]
[128.94528198 278.03390503]
[124.55294037 263.69140625]
[120.16059875 249.34890747]
[117.16363525 247.36973572]
[115.00534821 243.80696106]
[114.43484497 239.08471680]
[115.97663116 233.95222473]
[112.50592041 219.35926819]
[109.03520966 204.76632690]
[105.56449890 190.17337036]
[100.92482758 184.35350037]
[102.17848206 175.23388672]
[99.01828766 160.57055664]
[95.85810089 145.90722656]
[92.69791412 131.24391174]
[89.53771973 116.58057404]
[77.96785736 107.03394318]
[62.97123337 106.71556091]
[47.97461319 106.39717865]
[32.97799301 106.07880402]
[19.32965660 120.73463440]
[-0.39472887 120.74076843]
[-13.63965988 106.53559113]
[-28.62614441 107.17221069]
[-43.61262894 107.80883026]
[-58.59911346 108.44544220]
[-73.58559418 109.08206177]
[-85.45335388 119.87724304]
[-101.26927185 117.18717957]
[-108.90072632 103.07546997]
[-102.49352264 88.36740112]
[-86.96271515 84.34574890]
[-74.22221375 94.09558105]
[-59.23573303 93.45896149]
[-44.24924850 92.82234192]
[-29.26276207 92.18572235]
[-14.27627754 91.54911041]
[-9.56336975 82.29643250]
[-1.34854782 75.81323242]
[8.90383148 73.34163666]
[19.32965660 75.40084076]
[28.00397110 81.67982483]
[33.29637527 91.08218384]
[48.29299545 91.40055847]
[63.28961563 91.71894073]
[78.28623962 92.03732300]
[85.46226501 78.86521149]
[77.06264496 66.43756104]
[68.66302490 54.00991821]
[60.26340103 41.58227539]
[51.86377716 29.15462875]
[43.46415710 16.72698402]
[29.58519173 6.98990822]
[35.09965897 -9.04215240]
[52.03173828 -8.18130875]
[55.89179993 8.32736301]
[64.29141998 20.75500679]
[72.69104767 33.18265152]
[81.09066772 45.61029816]
[89.49028778 58.03794098]
[97.88990784 70.46558380]
[112.87639618 71.10220337]
[122.29969788 59.43166733]
[131.72299194 47.76113129]
[141.14630127 36.09059525]
[150.56959534 24.42005920]
[152.96794128 6.19510221]
[169.52272034 0.46189812]
[178.69619751 -11.40602207]
[187.86965942 -23.27394295]
[196.91664124 -35.23855591]
[205.83615112 -47.29851151]
[207.82142639 -62.99466705]
[221.61024475 -68.62650299]
[230.52973938 -80.68645477]
[239.44923401 -92.74641418]
[248.36874390 -104.80637360]
[257.28823853 -116.86632538]
[266.20773315 -128.92628479]
[275.12722778 -140.98623657]
[284.04672241 -153.04620361]
[288.60397339 -169.37617493]
[305.55731201 -169.51762390]
[310.38641357 -153.26596069]
[296.10668945 -144.12670898]
[287.18719482 -132.06674194]
[278.26770020 -120.00679016]
[269.34820557 -107.94683075]
[260.42868042 -95.88687134]
[251.50920105 -83.82691956]
[242.58970642 -71.76696014]
[233.67019653 -59.70700455]
[232.32290649 -44.87345886]
[217.89610291 -38.37901306]
[208.97660828 -26.31905746]
[207.51785278 -19.02045441]
[199.73757935 -14.10047722]
[190.56411743 -2.23255682]
[181.39064026 9.63536358]
[182.60783386 21.71409416]
[175.00259399 31.68671989]
[162.24012756 33.84336090]
[152.81683350 45.51389694]
[143.39352417 57.18443298]
[133.97023010 68.85496521]
[124.54692841 80.52550507]
[126.54926300 94.99990845]
[121.69528961 106.67248535]
[113.02933502 112.96436310]
[104.20104980 113.42038727]
[107.36123657 128.08370972]
[110.52143097 142.74703979]
[113.68161774 157.41036987]
[116.84180450 172.07369995]
[120.15744781 186.70266724]
[123.62815857 201.29560852]
[127.09886932 215.88856506]
[130.56958008 230.48150635]
[134.50309753 244.95657349]
[138.89544678 259.29907227]
[143.28778076 273.64157104]
[147.68013000 287.98406982]
[152.07246399 302.32656860]
[156.46481323 316.66906738]
[160.85714722 331.01156616]
[177.88648987 339.18859863]
[183.50453186 356.89181519]
[174.61538696 372.83728027]
[179.61248779 386.98043823]
[184.60958862 401.12359619]
[189.60667419 415.26675415]
[203.40382385 423.45324707]
[205.46293640 439.36361694]
[194.20443726 450.79278564]
[178.26490784 448.97326660]
[169.87176514 435.30087280]
[175.46351624 420.26385498]
[170.46641541 406.12069702]
[165.46932983 391.97753906]
[160.47222900 377.83438110]
[149.28050232 375.23452759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[9 125]
[13 124]
[14 123]
[15 122]
[16 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 52]
[24 51]
[25 50]
[26 49]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[68 112]
[69 111]
[70 110]
[71 109]
[72 108]
[74 105]
[75 104]
[76 103]
[77 101]
[78 100]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[134 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
