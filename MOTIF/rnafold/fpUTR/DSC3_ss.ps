%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUUGCUCCCGGGCAGGCAAGCCUGAGAGAGGCCAAAUACACUUAAAAACAAGCAGCGGCGAGAAAAGCACCUCCCGCGCCCUGCACCUCGGCAGGUCUCGCUCUCGGCACCCUCCCGGCGCCCGCGUUCUCCUGGCCCUGCCCGGCAUCCCG\
) } def
/len { sequence length } bind def

/coor [
[71.07010651 504.32760620]
[55.96974564 503.41421509]
[41.89144516 497.87734985]
[30.21446228 488.25949097]
[22.08277893 475.50289917]
[18.29306030 460.85729980]
[19.21658134 445.75756836]
[24.76286697 431.68298340]
[34.38854599 420.01245117]
[47.15059662 411.88931274]
[61.79872131 408.10940552]
[62.70439529 393.13677979]
[63.61007309 378.16412354]
[64.51575470 363.19149780]
[65.42143250 348.21887207]
[66.32711029 333.24624634]
[67.23278809 318.27359009]
[68.13845825 303.30096436]
[69.04413605 288.32833862]
[66.94041443 285.43139648]
[66.16741180 281.35397339]
[67.27236938 276.74777222]
[70.48361969 272.48751831]
[72.29167175 257.59689331]
[74.09972382 242.70625305]
[66.34769440 226.98953247]
[77.45855713 212.33848572]
[78.96639252 197.41445923]
[80.47422028 182.49043274]
[81.98204803 167.56640625]
[83.48987579 152.64239502]
[76.07093811 143.04260254]
[77.24254608 130.56343079]
[86.91876984 121.97847748]
[88.72682190 107.08784485]
[85.23014832 121.67459869]
[77.68054199 134.63621521]
[66.71779633 144.87428284]
[53.27091599 151.52120972]
[38.47944641 154.01368713]
[23.59686852 152.14050293]
[9.88437748 146.06039429]
[-1.49597847 136.28863525]
[-9.57978916 123.65328217]
[-13.68200493 109.22512054]
[-13.45498943 94.22683716]
[-8.91798115 79.92944336]
[-0.45546132 67.54454041]
[11.21542645 58.12167740]
[25.10564995 52.45937347]
[40.03810501 51.03747559]
[54.74736404 53.97648239]
[67.98690796 61.02732468]
[78.63478088 71.59249878]
[85.78997803 84.78034210]
[80.18955994 70.86505127]
[74.04763031 64.02464294]
[74.61958313 56.61272430]
[69.30050659 42.58748245]
[63.98143387 28.56223869]
[58.66236115 14.53699493]
[52.65942383 7.57429647]
[53.38051224 0.17539892]
[48.34494400 -13.95411110]
[43.30937576 -28.08362198]
[28.38502693 -32.33137512]
[18.83425331 -44.56094742]
[18.32952309 -60.06980896]
[27.06491661 -72.89449310]
[41.68149567 -78.10364532]
[56.55888748 -73.69424438]
[65.97643280 -61.36178589]
[66.31288910 -45.84835815]
[57.43888474 -33.11919022]
[62.47445297 -18.98967934]
[67.51002502 -4.86016893]
[72.68760681 9.21792221]
[78.00667572 23.24316597]
[83.32575226 37.26840973]
[88.64482117 51.29365158]
[94.10485077 65.26462555]
[99.70526886 79.17991638]
[114.67790222 80.08559418]
[121.91479492 66.94681549]
[129.15168762 53.80804443]
[136.38858032 40.66926956]
[143.62547302 27.53049469]
[138.98825073 12.42182827]
[146.46640015 -1.50127947]
[161.62324524 -5.97849607]
[175.46650696 1.64643192]
[179.78323364 16.84976959]
[172.01237488 30.61164665]
[156.76423645 34.76738739]
[149.52735901 47.90616226]
[142.29046631 61.04493713]
[135.05357361 74.18370819]
[127.81668091 87.32248688]
[131.63188171 93.77958679]
[144.28192139 85.71878052]
[156.93196106 77.65796661]
[164.96293640 64.98897552]
[179.96110535 65.22357941]
[187.59190369 78.13756561]
[180.56216431 91.38833618]
[165.58978271 92.31102753]
[152.42604065 99.50241089]
[139.26231384 106.69379425]
[143.07751465 113.15089417]
[158.07751465 113.15089417]
[173.07751465 113.15089417]
[186.87768555 105.41359711]
[199.60496521 113.15089417]
[214.60496521 113.15089417]
[226.92019653 102.86912537]
[242.60768127 106.22800446]
[249.63334656 120.65089417]
[242.60768127 135.07377625]
[226.92019653 138.43266296]
[214.60496521 128.15089417]
[199.60496521 128.15089417]
[186.87768555 135.88819885]
[173.07751465 128.15089417]
[158.07751465 128.15089417]
[143.07751465 128.15089417]
[119.41323090 123.56504822]
[103.61745453 108.89589691]
[101.80940247 123.78652954]
[109.42970276 140.52078247]
[98.41390228 154.15022278]
[96.90607452 169.07424927]
[95.39823914 183.99826050]
[93.89041138 198.92228699]
[92.38258362 213.84631348]
[99.93611908 224.34750366]
[98.33723450 236.77914429]
[88.99035645 244.51429749]
[87.18230438 259.40493774]
[85.37425232 274.29556274]
[84.01676941 289.23400879]
[83.11109161 304.20663452]
[82.20542145 319.17929077]
[81.29974365 334.15191650]
[80.39406586 349.12454224]
[79.48838806 364.09716797]
[78.58271027 379.06982422]
[77.67703247 394.04244995]
[76.77135468 409.01507568]
[90.85705566 414.53305054]
[102.54692078 424.13525391]
[110.69569397 436.88095093]
[114.50503540 451.52145386]
[113.60175323 466.62240601]
[108.07433319 480.70443726]
[98.46430206 492.38784790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[23 139]
[24 138]
[25 137]
[27 134]
[28 133]
[29 132]
[30 131]
[31 130]
[34 128]
[35 127]
[55 82]
[56 81]
[58 80]
[59 79]
[60 78]
[61 77]
[63 76]
[64 75]
[65 74]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[109 125]
[110 124]
[111 123]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
