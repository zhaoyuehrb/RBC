%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCCACCAGUCCCUCAGCCAAAGAGCACACUGGAGGCGGAGAGGCAGCAUCCACCAGCCCGCUCCCCGCCUCCAGGACAGAGCCUCGGUCUGC\
) } def
/len { sequence length } bind def

/coor [
[92.27333832 288.32327271]
[83.38406372 300.78277588]
[69.71755981 307.67373657]
[54.41427612 307.41262817]
[40.99080658 300.05944824]
[32.53175735 287.30395508]
[30.98096275 272.07720947]
[36.69478226 257.87823486]
[48.36021805 247.96984863]
[63.29664612 244.62892151]
[67.13980865 230.12960815]
[70.98297882 215.63029480]
[66.76480865 201.34545898]
[77.77960205 189.98831177]
[81.62277222 175.48899841]
[84.51934052 160.77131653]
[86.45716095 145.89701843]
[88.39498138 131.02272034]
[74.93594360 121.65361023]
[67.62079620 106.97659302]
[52.62276459 106.73370361]
[41.44370651 117.90528107]
[25.63966751 117.81644440]
[14.58690357 106.51989746]
[14.84282303 90.71768188]
[26.25559425 79.78497314]
[42.05422211 80.20794678]
[52.86566162 91.73566437]
[67.86369324 91.97856140]
[73.28335571 80.42178345]
[82.67079163 71.77263641]
[94.63185120 67.31562042]
[107.39015198 67.71267700]
[113.96086121 54.22840118]
[120.53157806 40.74412537]
[127.10229492 27.25984764]
[133.67300415 13.77557087]
[140.24372864 0.29129514]
[146.81443787 -13.19298077]
[153.38516235 -26.67725754]
[159.95587158 -40.16153336]
[166.52658081 -53.64580917]
[165.61625671 -69.44080353]
[178.14686584 -77.49269867]
[184.71759033 -90.97697449]
[191.28829956 -104.46125031]
[184.16763306 -118.12149811]
[186.42947388 -133.17930603]
[196.99916077 -143.89123535]
[211.67407227 -146.29647827]
[218.24478149 -159.78076172]
[210.83642578 -173.41511536]
[212.89038086 -188.79565430]
[223.61688232 -200.00822449]
[238.89135742 -202.74139404]
[252.84045410 -195.94416809]
[260.10046387 -182.23023987]
[257.87979126 -166.87289429]
[247.03228760 -155.77734375]
[231.72906494 -153.21003723]
[225.15834045 -139.72576904]
[232.30714417 -126.68610382]
[230.38412476 -111.76075745]
[219.91889954 -100.70036316]
[204.77258301 -97.89054108]
[198.20185852 -84.40626526]
[191.63114929 -70.92198944]
[193.01145935 -56.09147644]
[180.01086426 -47.07509232]
[173.44013977 -33.59081650]
[166.86943054 -20.10654259]
[160.29872131 -6.62226582]
[153.72799683 6.86201048]
[147.15728760 20.34628677]
[140.58656311 33.83056259]
[134.01585388 47.31483841]
[127.44513702 60.79911423]
[120.87442780 74.28339386]
[130.28694153 86.59154510]
[133.07147217 101.83400726]
[128.61863708 116.67511749]
[117.90289307 127.86704254]
[103.26928711 132.96054077]
[101.33146667 147.83483887]
[99.39363861 162.70915222]
[101.42546844 167.04824829]
[101.79934692 171.35763550]
[100.75356293 175.08100891]
[98.69343567 177.81077576]
[96.12208557 179.33216858]
[92.27891541 193.83148193]
[96.22219849 209.15339661]
[85.48229218 219.47344971]
[81.63912201 233.97276306]
[77.79595947 248.47207642]
[89.11658478 258.77267456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 95]
[11 94]
[12 93]
[14 91]
[15 90]
[16 85]
[17 84]
[18 83]
[20 29]
[21 28]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[44 67]
[45 66]
[46 65]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
