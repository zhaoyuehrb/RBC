%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUUUCAAAGAUUUUGAUUCCAGUGGAAUCUUUGCUUUAGAUUUGUGUGUGUGUUUGUGUUCGUGAAUUGUAACUCCAGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[122.79459381 147.00817871]
[107.41333008 151.71464539]
[91.32929993 151.51875305]
[76.06722260 146.43904114]
[63.07389069 136.95706177]
[53.58103561 123.97168732]
[48.48853683 108.71387482]
[48.27915573 92.63002014]
[33.88676071 88.40402985]
[19.42123032 84.43560791]
[4.88717031 80.72600555]
[-9.64688873 77.01641083]
[-24.18094826 73.30681610]
[-33.51750565 83.88739777]
[-46.45980072 89.34095001]
[-60.41995239 88.63976288]
[-72.63366699 81.98056793]
[-80.70759583 70.73414612]
[-83.08829498 57.16348648]
[-97.48069000 52.93750000]
[-111.87308502 48.71150970]
[-126.26548004 44.48552322]
[-140.65786743 40.25953293]
[-155.05026245 36.03354645]
[-171.95124817 37.37256622]
[-177.91661072 21.50275421]
[-164.31835938 11.37733078]
[-150.82427979 21.64115143]
[-136.43188477 25.86713982]
[-122.03948975 30.09312820]
[-107.64709473 34.31911469]
[-93.25469971 38.54510498]
[-78.86230469 42.77109146]
[-67.54478455 31.38549423]
[-51.95705795 27.17373466]
[-36.26560211 31.35816002]
[-24.71309662 42.90387344]
[-20.47135162 58.77275467]
[-5.93729162 62.48234940]
[8.59676838 66.19194794]
[23.13082695 69.90154266]
[30.55794525 68.47234344]
[38.11275101 74.01163483]
[52.50514603 78.23762512]
[59.89288712 66.52191925]
[70.09960938 57.15925980]
[82.40791321 50.80771637]
[95.95270538 47.91370773]
[109.78195953 48.68065262]
[122.92367554 53.05463409]
[134.45417786 60.72822952]
[143.56303406 71.16208649]
[149.61000061 83.62285614]
[152.17005920 97.23471069]
[151.06329346 111.04092407]
[165.11753845 116.28289032]
[179.17178345 121.52484894]
[193.22602844 126.76681519]
[207.28027344 132.00877380]
[222.91426086 129.58198547]
[232.13516235 141.27917480]
[246.18940735 146.52113342]
[257.84558105 139.50541687]
[271.21401978 140.54306030]
[281.34729004 149.02192688]
[284.62771606 161.61848450]
[298.48590088 167.35873413]
[311.64553833 159.13656616]
[327.12237549 160.25331116]
[338.96527100 170.27954102]
[342.62039185 185.35998535]
[336.68225098 199.69589233]
[323.43420410 207.77482605]
[307.97039795 206.49024963]
[296.23696899 196.33613586]
[292.74566650 181.21691895]
[278.88745117 175.47666931]
[263.76138306 182.58790588]
[247.82002258 176.54287720]
[240.94744873 160.57537842]
[226.89320374 155.33341980]
[212.26448059 158.13514709]
[202.03831482 146.06301880]
[187.98406982 140.82106018]
[173.92982483 135.57910156]
[159.87557983 130.33712769]
[145.82133484 125.09516907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 44]
[9 43]
[10 41]
[11 40]
[12 39]
[13 38]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[61 81]
[62 80]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
