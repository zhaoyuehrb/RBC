%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGGUUUUCAGGCAGAGGAACAGUUGGCCAAGGAAGUCAGCUUCUCAGAGCUCAAGAGUAGAUCUGAGUUUAACUCAUUAAAG\
) } def
/len { sequence length } bind def

/coor [
[84.72815704 213.97821045]
[84.38169861 198.67662048]
[91.19631195 184.97189331]
[103.60604858 176.01325989]
[101.42202759 161.17311096]
[99.23801422 146.33296204]
[97.05399323 131.49281311]
[94.86997986 116.65266418]
[90.46159363 130.99023438]
[78.75881195 140.37345886]
[63.80579376 141.55975342]
[50.76988983 134.13916016]
[44.15595245 120.67603302]
[46.24957275 105.82285309]
[56.32725143 94.71248627]
[70.90642548 91.18435669]
[84.94921112 96.45790100]
[74.53809357 85.65934753]
[64.12698364 74.86080170]
[53.71586990 64.06224823]
[48.22454834 62.51379776]
[44.40045547 59.23091507]
[42.63692474 55.21399307]
[42.83790207 51.46620178]
[33.67029572 39.59375381]
[24.50268936 27.72130585]
[15.33508396 15.84885883]
[6.16747856 3.97641134]
[-3.00012708 -7.89603615]
[-12.16773224 -19.76848412]
[-27.79873276 -20.22219849]
[-39.44670105 -30.65574265]
[-41.61182785 -46.14271164]
[-33.27180099 -59.37063599]
[-18.36452866 -64.09368896]
[-3.92876863 -58.08179855]
[3.21935368 -44.17358780]
[-0.29528537 -28.93608856]
[8.87232018 -17.06364250]
[18.03992653 -5.19119453]
[27.20753098 6.68125296]
[36.37513733 18.55369949]
[45.54274368 30.42614746]
[54.71035004 42.29859543]
[64.51441956 53.65113449]
[74.92553711 64.44968414]
[85.33664703 75.24823761]
[95.74776459 86.04679108]
[104.85455322 83.65857697]
[114.95229340 87.47078705]
[129.59342957 84.20933533]
[144.23457336 80.94788361]
[158.87570190 77.68643188]
[173.51684570 74.42498016]
[188.15798950 71.16352844]
[202.79911804 67.90207672]
[210.71331787 62.87220383]
[218.03428650 64.79922485]
[232.78477478 62.07467270]
[243.02758789 49.72703552]
[259.06423950 50.18061829]
[268.59274292 63.08747101]
[264.30368042 78.54656219]
[249.48724365 84.69899750]
[235.50932312 76.82515717]
[220.75883484 79.54971313]
[206.06057739 82.54321289]
[191.41943359 85.80466461]
[176.77830505 89.06611633]
[162.13716125 92.32756805]
[147.49601746 95.58901978]
[132.85488892 98.85047150]
[118.21374512 102.11193085]
[109.71012878 114.46864319]
[111.89414978 129.30879211]
[114.07816315 144.14894104]
[116.26218414 158.98908997]
[118.44619751 173.82925415]
[132.91073608 178.83279419]
[143.38473511 189.99317932]
[147.46134949 204.74580383]
[144.20378113 219.70062256]
[134.36061096 231.42114258]
[120.19372559 237.21406555]
[104.95857239 235.74822998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[17 48]
[18 47]
[19 46]
[20 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
