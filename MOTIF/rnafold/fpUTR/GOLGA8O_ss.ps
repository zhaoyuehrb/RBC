%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACACAGCUGCCUGGUAGGUGACUGGAGGCCUUGAUCGGUUCUUAUUGGGAUUUUGCUGCUGUGGCCCCAACCCUUCCUCCCUCCCCACCCUGCA\
) } def
/len { sequence length } bind def

/coor [
[212.54679871 217.03897095]
[219.65647888 203.77816772]
[208.01428223 194.31988525]
[196.37208557 184.86158752]
[184.72988892 175.40330505]
[173.08769226 165.94500732]
[161.44549561 156.48672485]
[149.65470886 147.21434021]
[137.71827698 138.13018799]
[125.78184509 129.04605103]
[113.84542084 119.96190643]
[95.17798615 123.81011200]
[79.47874451 113.00197601]
[76.41139221 94.19046021]
[63.66550827 86.28207397]
[50.91962814 78.37369537]
[38.17374802 70.46530914]
[25.42786407 62.55693054]
[12.68198299 54.64854813]
[-0.06389805 46.74016571]
[-12.80977917 38.83178329]
[-25.55566025 30.92340279]
[-34.67848206 29.00024796]
[-38.57488251 22.55645561]
[-51.06343079 14.24765491]
[-63.55197906 5.93885422]
[-76.04052734 -2.36994696]
[-88.52907562 -10.67874813]
[-101.01762390 -18.98754883]
[-115.10922241 -12.70818329]
[-130.35522461 -15.06672287]
[-141.89070129 -25.31056404]
[-146.03472900 -40.17093658]
[-141.46493530 -54.90594864]
[-129.63954163 -64.81371307]
[-114.33200073 -66.73269653]
[-100.42687225 -60.05055618]
[-92.36124420 -46.89954376]
[-92.70882416 -31.47609711]
[-80.22027588 -23.16729546]
[-67.73172760 -14.85849476]
[-55.24317932 -6.54969358]
[-42.75463104 1.75910723]
[-30.26608276 10.06790829]
[-17.64727974 18.17752075]
[-4.90139771 26.08590317]
[7.84448385 33.99428558]
[20.59036636 41.90266800]
[33.33624649 49.81104660]
[46.08212662 57.71942902]
[58.82801056 65.62781525]
[71.57389069 73.53619385]
[84.31977081 81.44458008]
[93.59596252 76.56580353]
[104.06414032 76.04888153]
[113.77585602 79.99002838]
[120.92344666 87.65567017]
[124.17652130 97.61898041]
[122.92956543 108.02547455]
[134.86599731 117.10961914]
[146.80241394 126.19376373]
[158.73884583 135.27790833]
[167.63755798 138.05953979]
[170.90379333 144.84452820]
[182.54598999 154.30281067]
[194.18818665 163.76110840]
[205.83038330 173.21939087]
[217.47257996 182.67768860]
[229.11477661 192.13597107]
[240.63836670 182.46109009]
[253.78482056 175.14213562]
[268.07891846 170.44367981]
[283.00390625 168.53558350]
[298.02029419 169.48680115]
[312.58523560 173.26295471]
[326.17218018 179.72755432]
[338.29000854 188.64688110]
[348.50067139 199.69853210]
[356.43505859 212.48298645]
[361.80630493 226.53808594]
[364.42028809 241.35577393]
[364.18252563 256.40036011]
[361.10156250 271.12802124]
[355.28878784 285.00637817]
[346.95434570 297.53369141]
[336.39953613 308.25714111]
[324.00588989 316.78906250]
[310.22140503 322.82104492]
[295.54440308 326.13500977]
[280.50546265 326.61120605]
[265.64822388 324.23236084]
[251.50976562 319.08453369]
[238.60116577 311.35375977]
[227.38908386 301.31951904]
[218.27882385 289.34457397]
[211.59971619 275.86175537]
[207.59321594 261.35852051]
[206.40412903 246.35910034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 62]
[9 61]
[10 60]
[11 59]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
