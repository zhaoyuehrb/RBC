%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCGUCAGGGCGACGAAAAAGGGGAAGGGGUGCUGGGCCUGGCGGGCAAACUAAGGCUGCGGACCGUUGGGCGGUUCCGCGGGGCGUUGUCCGGAGAGCUGCGAGGCCGGGGUUCCCAGGGUUCACGCCACACUCUAGGAAGUGCCUGAGCUAGUGAGCUGGCCAACGAGCUCCGCGGGCUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[-20.79315186 391.67379761]
[-36.47882462 409.19207764]
[-59.40340042 413.86853027]
[-64.03865814 428.13436890]
[-68.67391205 442.40020752]
[-73.30916595 456.66604614]
[-77.94441986 470.93191528]
[-74.00743866 486.85147095]
[-86.01167297 498.02423096]
[-101.60818481 492.95660400]
[-104.75263214 476.86175537]
[-92.21026611 466.29666138]
[-87.57501221 452.03079224]
[-82.93975830 437.76495361]
[-78.30450439 423.49911499]
[-73.66925049 409.23324585]
[-79.59918976 405.10635376]
[-84.62524414 399.90301514]
[-88.55471039 393.81729126]
[-91.23590088 387.07720947]
[-92.56396484 379.93612671]
[-92.48500824 372.66333008]
[-90.99825287 365.53372192]
[-88.15621185 358.81762695]
[-84.06286621 352.77038574]
[-78.86981964 347.62265015]
[-72.77072906 343.57168579]
[-65.99406433 340.77377319]
[-58.79454041 339.33816528]
[-51.44357681 339.32275391]
[-44.21903610 340.73196411]
[-37.07982254 327.53985596]
[-29.94061279 314.34774780]
[-29.52135277 306.95541382]
[-22.57274055 300.99795532]
[-15.21638775 287.92568970]
[-15.71757030 273.03952026]
[-2.20670557 264.80746460]
[5.14964676 251.73518372]
[12.50599957 238.66291809]
[19.86235237 225.59065247]
[27.21870422 212.51840210]
[34.57505798 199.44613647]
[35.11648560 192.06173706]
[42.16264725 186.22000122]
[49.73413086 173.27114868]
[57.30561447 160.32231140]
[64.76978302 147.31130981]
[72.12613678 134.23904419]
[65.94365692 128.76110840]
[60.83703613 122.16828156]
[57.00689697 114.67175293]
[54.61241913 106.51873016]
[53.76489258 97.98427582]
[54.52290344 89.36203766]
[56.88928223 80.95413971]
[60.80999756 73.06059265]
[66.17507935 65.96862793]
[72.82153320 59.94223404]
[62.30297852 49.24831009]
[51.78442764 38.55438232]
[41.26587677 27.86045647]
[30.74732399 17.16652870]
[20.22877121 6.47260189]
[9.71022034 -4.22132444]
[-0.89638174 -14.82792664]
[-11.59030819 -25.34647751]
[-22.28423500 -35.86502838]
[-32.97816086 -46.38358307]
[-48.51024628 -53.17995453]
[-46.27918625 -69.98646545]
[-29.51186180 -72.49510193]
[-22.45960999 -57.07750702]
[-11.76568317 -46.55895615]
[-1.07175672 -36.04040527]
[9.62217045 -25.52185249]
[16.60807419 -23.06839371]
[20.40414619 -14.73987675]
[30.92269897 -4.04594946]
[41.44124985 6.64797688]
[51.95980072 17.34190369]
[62.47835541 28.03582954]
[72.99690247 38.72975540]
[83.51545715 49.42368317]
[98.28996277 46.83253098]
[104.54168701 33.19743347]
[110.79341888 19.56233597]
[117.04514313 5.92723799]
[123.29687500 -7.70785999]
[116.90734863 -23.98338699]
[124.11557770 -39.54198837]
[140.02388000 -44.97267532]
[146.04930115 -58.70927429]
[152.07473755 -72.44587708]
[157.98640442 -86.23181915]
[163.78388977 -100.06616211]
[164.21722412 -109.20873260]
[169.79330444 -114.08005524]
[175.81872559 -127.81665039]
[181.84416199 -141.55325317]
[187.86959839 -155.28985596]
[193.89501953 -169.02645874]
[192.35287476 -184.77232361]
[204.55097961 -193.31958008]
[210.57640076 -207.05618286]
[208.23554993 -223.28739929]
[221.28736877 -233.21624756]
[236.30526733 -226.62878418]
[237.84011841 -210.30162048]
[224.31300354 -201.03074646]
[218.28758240 -187.29414368]
[220.26069641 -172.53080750]
[207.63162231 -163.00102234]
[201.60618591 -149.26441956]
[195.58076477 -135.52781677]
[189.55532837 -121.79122162]
[183.52989197 -108.05461884]
[177.61824036 -94.26867676]
[171.82075500 -80.43433380]
[172.13572693 -73.03682709]
[165.81134033 -66.42044067]
[159.78590393 -52.68384171]
[153.76048279 -38.94724274]
[160.08073425 -27.70656395]
[158.74729919 -14.68427658]
[150.02450562 -4.66398573]
[136.93197632 -1.45613229]
[130.68023682 12.17896557]
[124.42851257 25.81406403]
[118.17678833 39.44916153]
[111.92505646 53.08425903]
[132.37879944 66.93398285]
[142.55200195 88.22753143]
[157.47825623 86.74184418]
[172.40449524 85.25616455]
[187.33073425 83.77047729]
[197.14907837 71.38597870]
[212.85823059 69.65445709]
[225.13822937 79.60317993]
[226.70356750 95.32975769]
[216.62556458 107.50389099]
[200.88331604 108.90287018]
[188.81642151 98.69672394]
[173.89018250 100.18240356]
[158.96392822 101.66809082]
[144.03768921 103.15377045]
[143.57510376 107.10458374]
[142.75878906 110.99772644]
[141.59539795 114.80159760]
[154.66766357 122.15795135]
[163.69902039 123.64421082]
[167.89378357 129.74554443]
[180.84263611 137.31701660]
[193.79148865 144.88850403]
[206.74032593 152.45999146]
[219.68917847 160.03147888]
[236.08213806 159.58073425]
[244.43727112 173.69184875]
[236.15954590 187.84852600]
[219.76437378 187.48757935]
[212.11769104 172.98031616]
[199.16885376 165.40884399]
[186.22000122 157.83735657]
[173.27114868 150.26586914]
[160.32231140 142.69438171]
[147.31130981 135.23020935]
[134.23904419 127.87386322]
[126.42452240 135.36959839]
[117.02050781 140.73777771]
[106.59266663 143.65548706]
[95.76825714 143.94720459]
[85.19840240 141.59539795]
[77.84204865 154.66766357]
[76.35578918 163.69902039]
[70.25446320 167.89378357]
[62.68297577 180.84263611]
[55.11149216 193.79148865]
[47.64731979 206.80249023]
[40.29096985 219.87474060]
[32.93461609 232.94700623]
[25.57826233 246.01927185]
[18.22191048 259.09155273]
[10.86555767 272.16378784]
[10.84056473 287.98498535]
[-2.14412427 295.28204346]
[-9.50047684 308.35430908]
[-16.74850655 321.48693848]
[-23.88771629 334.67904663]
[-31.02692795 347.87115479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[31 189]
[32 188]
[33 187]
[35 186]
[36 185]
[38 183]
[39 182]
[40 181]
[41 180]
[42 179]
[43 178]
[45 177]
[46 176]
[47 175]
[48 173]
[49 172]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 76]
[67 75]
[68 74]
[69 73]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[92 123]
[93 122]
[94 121]
[95 119]
[96 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[104 111]
[105 110]
[133 146]
[134 145]
[135 144]
[136 143]
[149 167]
[150 166]
[152 165]
[153 164]
[154 163]
[155 162]
[156 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
