%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:47 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RNF181)
} def

/sequence { (\
AGGCCGCUAUCGAGCAGGGUCCGAGGGCUGUGUCAGAAGGCUGGGCAGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.008450603 ubox
2 7 0.008939769 ubox
2 21 0.563150295 ubox
2 22 0.345127985 ubox
2 34 0.005587718 ubox
2 42 0.029318803 ubox
2 50 0.126112214 ubox
3 15 0.016497235 ubox
3 20 0.570186862 ubox
3 21 0.343401244 ubox
3 33 0.005605568 ubox
3 41 0.031715748 ubox
3 46 0.711899536 ubox
3 49 0.125569262 ubox
4 14 0.016521978 ubox
4 18 0.178576288 ubox
4 19 0.648187060 ubox
4 26 0.004773509 ubox
4 32 0.005604302 ubox
4 40 0.031767084 ubox
4 44 0.177060327 ubox
4 45 0.705827922 ubox
4 48 0.116953489 ubox
5 12 0.016592652 ubox
5 17 0.199128963 ubox
5 18 0.639250071 ubox
5 23 0.010036781 ubox
5 25 0.005302275 ubox
5 30 0.004585481 ubox
5 39 0.031517632 ubox
5 43 0.208946323 ubox
5 44 0.695214554 ubox
6 11 0.015670835 ubox
6 15 0.641332840 ubox
6 20 0.006256738 ubox
6 22 0.010058109 ubox
6 28 0.006712873 ubox
6 41 0.726568653 ubox
6 42 0.048931470 ubox
6 46 0.097284932 ubox
6 49 0.004412951 ubox
7 14 0.643997480 ubox
7 17 0.149399445 ubox
7 18 0.004993491 ubox
7 19 0.006528862 ubox
7 25 0.004287923 ubox
7 27 0.006791123 ubox
7 36 0.007141577 ubox
7 39 0.018577012 ubox
7 40 0.731028867 ubox
7 44 0.022549945 ubox
7 45 0.095048382 ubox
7 48 0.004423840 ubox
8 13 0.613191683 ubox
8 16 0.145762029 ubox
8 17 0.006938226 ubox
8 18 0.006063440 ubox
8 24 0.003612117 ubox
8 26 0.006143269 ubox
8 35 0.007061923 ubox
8 38 0.024479037 ubox
8 39 0.719334075 ubox
8 43 0.030507311 ubox
8 44 0.089548283 ubox
8 47 0.004376270 ubox
9 20 0.011321675 ubox
9 42 0.036402575 ubox
10 18 0.006131071 ubox
10 19 0.011651864 ubox
10 24 0.014707691 ubox
10 37 0.718992607 ubox
10 40 0.026541033 ubox
10 45 0.004178272 ubox
11 17 0.012174853 ubox
11 18 0.011823279 ubox
11 23 0.015575851 ubox
11 36 0.732645840 ubox
11 39 0.028680558 ubox
11 43 0.004675136 ubox
11 44 0.007095519 ubox
12 21 0.004886480 ubox
12 22 0.015136357 ubox
12 34 0.155188567 ubox
12 42 0.003187212 ubox
13 20 0.005962855 ubox
13 33 0.132732072 ubox
13 42 0.007334381 ubox
14 20 0.012963755 ubox
14 31 0.008396612 ubox
14 33 0.720484713 ubox
14 41 0.007435021 ubox
15 19 0.013081059 ubox
15 30 0.008626568 ubox
15 32 0.738818826 ubox
15 40 0.007018283 ubox
16 29 0.007776175 ubox
16 31 0.738307367 ubox
17 28 0.006871994 ubox
17 29 0.004572368 ubox
18 28 0.004734491 ubox
18 29 0.736241667 ubox
19 28 0.739068515 ubox
19 46 0.006237311 ubox
20 26 0.008702558 ubox
20 27 0.735823805 ubox
20 45 0.006197792 ubox
21 25 0.012383001 ubox
21 26 0.733976865 ubox
21 27 0.064898713 ubox
21 44 0.006217928 ubox
22 26 0.064939104 ubox
22 43 0.006207165 ubox
25 42 0.004323738 ubox
25 50 0.049999899 ubox
26 41 0.005288829 ubox
26 49 0.035720079 ubox
26 50 0.663827944 ubox
27 46 0.004518975 ubox
27 49 0.672481463 ubox
28 39 0.005479991 ubox
28 45 0.004526729 ubox
28 48 0.673455575 ubox
29 38 0.005490133 ubox
29 44 0.004466675 ubox
29 47 0.673247510 ubox
30 46 0.673264951 ubox
31 45 0.644523528 ubox
31 47 0.007474452 ubox
32 41 0.101054604 ubox
32 46 0.010790005 ubox
33 40 0.101058424 ubox
33 44 0.505283219 ubox
33 45 0.009921177 ubox
34 39 0.100494315 ubox
34 43 0.668848184 ubox
34 44 0.010493603 ubox
35 42 0.668702865 ubox
36 41 0.664796737 ubox
39 50 0.017969936 ubox
40 49 0.018278853 ubox
41 48 0.018278328 ubox
42 47 0.017197254 ubox
43 50 0.034715350 ubox
44 49 0.035110780 ubox
44 50 0.007227119 ubox
45 49 0.008201694 ubox
3 46 0.9500000 lbox
4 45 0.9500000 lbox
5 44 0.9500000 lbox
6 41 0.9500000 lbox
7 40 0.9500000 lbox
8 39 0.9500000 lbox
10 37 0.9500000 lbox
11 36 0.9500000 lbox
14 33 0.9500000 lbox
15 32 0.9500000 lbox
16 31 0.9500000 lbox
18 29 0.9500000 lbox
19 28 0.9500000 lbox
20 27 0.9500000 lbox
21 26 0.9500000 lbox
showpage
end
%%EOF
