%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUACUCCUGGCUGCGGGGCGAGCCGGGCGUCUGCUGCAGCGGCCGCGGUGGCUGAGGAGGCCCGAGAGGAGUCGGUGGCAGCGGCGGCGGCGGGACCGGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAACCACUAGCCUCCUGCCCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[74.87466431 404.97769165]
[72.68095398 419.99606323]
[65.20670319 433.20593262]
[53.46275330 442.82070923]
[39.03736496 447.54010010]
[23.88146210 446.72583008]
[10.04475212 440.48806763]
[-0.60146332 429.67037964]
[-6.61737013 415.73574829]
[-7.18936682 400.56878662]
[-2.24009538 386.22064209]
[7.56109571 374.63180542]
[20.88867569 367.36956787]
[35.94020081 365.41610718]
[39.48536682 350.84106445]
[43.03053284 336.26602173]
[46.57569885 321.69097900]
[50.12086487 307.11593628]
[53.66603470 292.54089355]
[57.21120071 277.96585083]
[60.75636673 263.39080811]
[64.30153656 248.81578064]
[67.84670258 234.24073792]
[66.36370087 226.95835876]
[71.60995483 219.41258240]
[75.44420624 204.91090393]
[69.62634277 194.26632690]
[72.74230194 182.12762451]
[83.64424896 175.16835022]
[87.76606750 160.74577332]
[91.88787842 146.32321167]
[96.00969696 131.90063477]
[76.25627136 117.59542847]
[73.43624878 95.41682434]
[86.42011261 79.77666473]
[82.29830170 65.35408783]
[78.17648315 50.93151474]
[74.05466461 36.50894165]
[69.93284607 22.08636856]
[65.81103516 7.66379595]
[61.68921661 -6.75877762]
[43.69193649 -10.58336067]
[30.15474129 -22.91910172]
[24.72906303 -40.32310486]
[28.81992149 -58.00154877]
[41.22328949 -71.13008881]
[36.24899673 -85.28128815]
[31.27470970 -99.43248749]
[26.30042076 -113.58368683]
[21.32613182 -127.73488617]
[9.45025635 -138.18830872]
[12.52911949 -152.76123047]
[7.55483007 -166.91242981]
[-4.32104540 -177.36585999]
[-1.24218190 -191.93876648]
[-6.21647120 -206.08996582]
[-11.19076061 -220.24116516]
[-16.16504860 -234.39236450]
[-32.42232895 -237.26248169]
[-44.95250702 -247.86654663]
[-50.40888977 -263.24874878]
[-47.39651489 -279.19427490]
[-36.82730865 -291.38415527]
[-42.08197021 -305.43365479]
[-47.33663177 -319.48315430]
[-52.73070908 -333.47973633]
[-58.26366806 -347.42196655]
[-71.45242310 -357.16818237]
[-69.33772278 -373.43041992]
[-54.09498978 -379.47949219]
[-41.40464020 -369.09262085]
[-44.32141876 -352.95492554]
[-38.78845978 -339.01269531]
[-33.36849213 -333.92776489]
[-33.28712845 -324.73782349]
[-28.03246689 -310.68832397]
[-22.77780533 -296.63882446]
[-9.16012096 -295.27087402]
[2.58998156 -288.12481689]
[10.14107418 -276.55157471]
[11.96608353 -262.78701782]
[7.65080690 -249.51985168]
[-2.01384997 -239.36665344]
[2.96043921 -225.21545410]
[7.93472815 -211.06425476]
[12.90901756 -196.91305542]
[24.42909813 -187.47181702]
[21.70602989 -171.88671875]
[26.68031883 -157.73551941]
[38.20040131 -148.29428101]
[35.47732925 -132.70916748]
[40.45161819 -118.55797577]
[45.42590714 -104.40677643]
[50.40019989 -90.25557709]
[55.37448883 -76.10437775]
[67.22773743 -75.55673981]
[78.22529602 -71.00936127]
[87.05531311 -62.97917557]
[92.65586853 -52.40007782]
[94.34266663 -40.51432800]
[91.89254761 -28.72668457]
[85.57271576 -18.43838882]
[76.11179352 -10.88059425]
[80.23360443 3.54197907]
[84.35542297 17.96455193]
[88.47724152 32.38712692]
[92.59905243 46.80970001]
[96.72087097 61.23227310]
[100.84268951 75.65484619]
[116.04929352 78.34223938]
[127.95898438 90.42612457]
[130.95661926 108.67527008]
[145.85000610 110.46054840]
[160.47296143 104.42071533]
[172.18888855 113.61779785]
[187.08227539 115.40306854]
[201.70523071 109.36323547]
[213.42115784 118.56031799]
[228.31454468 120.34558868]
[243.17051697 113.40065002]
[256.45617676 123.01435089]
[254.50437927 139.29693604]
[239.32296753 145.49827576]
[226.52926636 135.23896790]
[211.63589478 133.45368958]
[198.07820129 139.62123108]
[185.29699707 130.29644775]
[170.40362549 128.51116943]
[156.84593201 134.67869568]
[144.06472778 125.35392761]
[129.17135620 123.56865692]
[143.95925903 126.08214569]
[154.77972412 136.47047424]
[157.89349365 151.14373779]
[152.22453308 165.03123474]
[139.73187256 173.33386230]
[124.73262787 173.18243408]
[112.41014099 164.62928772]
[107.02271271 150.63015747]
[110.43227386 136.02244568]
[106.31045532 150.44502258]
[102.18863678 164.86759949]
[98.06681824 179.29016113]
[102.96655273 197.01429749]
[89.94587708 208.74514771]
[86.11163330 223.24682617]
[82.42173767 237.78590393]
[78.87657166 252.36094666]
[75.33140564 266.93597412]
[71.78623962 281.51101685]
[68.24107361 296.08605957]
[64.69590759 310.66110229]
[61.15074158 325.23614502]
[57.60557175 339.81118774]
[54.06040573 354.38623047]
[50.51523972 368.96127319]
[62.98802185 377.60961914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 156]
[15 155]
[16 154]
[17 153]
[18 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 147]
[25 146]
[26 145]
[29 143]
[30 142]
[31 141]
[32 140]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[46 95]
[47 94]
[48 93]
[49 92]
[50 91]
[52 89]
[53 88]
[55 86]
[56 85]
[57 84]
[58 83]
[63 77]
[64 76]
[65 75]
[66 73]
[67 72]
[112 131]
[113 130]
[115 128]
[116 127]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
