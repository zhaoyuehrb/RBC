%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACAGAAAGUCCGUUGGAACCGUCGGCUGCUCUCUGGUCUCUGGAGAUGAGGCGGGAGGACUUGGGGACAGCUGUGGGGACACGGCCCAGAUGUUCUGGUCCCAGCAGAAGUGACUGGCGGGGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[206.30598450 227.20877075]
[204.19403076 223.65324402]
[203.29457092 219.17614746]
[192.94337463 208.32012939]
[182.59219360 197.46412659]
[172.24101257 186.60810852]
[158.34436035 192.06817627]
[143.37542725 191.79104614]
[129.61585999 185.78781128]
[119.17481232 174.94473267]
[113.66578674 160.89253235]
[113.95726776 145.76116943]
[120.03596497 131.85704041]
[109.68477631 121.00102234]
[99.33359528 110.14501190]
[91.85944366 106.90674591]
[88.86906433 98.90531921]
[78.77915955 87.80604553]
[63.45283508 89.35845184]
[50.30486298 81.67833710]
[44.27168655 67.89193726]
[47.47503281 53.37034607]
[37.38512802 42.27107620]
[27.29522133 31.17180443]
[19.12352943 26.87131882]
[17.10113525 19.68625832]
[7.27822447 8.35001469]
[-2.54468656 -2.98622870]
[-12.36759758 -14.32247257]
[-22.19050789 -25.65871620]
[-32.01342010 -36.99496078]
[-41.97053146 -48.21351242]
[-52.06044006 -59.31278229]
[-63.03885651 -69.53404999]
[-74.82965088 -78.80643463]
[-86.62045288 -88.07881927]
[-98.41124725 -97.35120392]
[-114.04179382 -99.79998016]
[-119.26322174 -113.74938202]
[-131.05401611 -123.02176666]
[-142.84481812 -132.29415894]
[-154.63562012 -141.56654358]
[-166.42640686 -150.83892822]
[-181.69444275 -147.45936584]
[-195.53880310 -154.73036194]
[-201.42262268 -169.21879578]
[-196.56773376 -184.08366394]
[-183.26647949 -192.30621338]
[-167.79928589 -190.00402832]
[-157.46929932 -178.26412964]
[-157.15402222 -162.62971497]
[-145.36323547 -153.35733032]
[-133.57243347 -144.08494568]
[-121.78163910 -134.81256104]
[-109.99083710 -125.54017639]
[-95.20364380 -123.75463104]
[-89.13886261 -109.14199829]
[-77.34806061 -99.86961365]
[-65.55726624 -90.59722900]
[-53.76647186 -81.32484436]
[-54.90979767 -96.28121185]
[-46.33506393 -108.58868408]
[-31.90880013 -112.69756317]
[-18.13611984 -106.75506592]
[-11.22742176 -93.44079590]
[-14.29798794 -78.75843811]
[-25.96323204 -69.32858276]
[-40.96116638 -69.40268707]
[-30.87126160 -58.30341721]
[-23.97711182 -55.44232178]
[-20.67717552 -46.81787109]
[-10.85426521 -35.48162842]
[-1.03135383 -24.14538383]
[8.79155731 -12.80913925]
[18.61446762 -1.47289610]
[28.43737984 9.86334801]
[38.39449310 21.08189964]
[48.48439789 32.18116760]
[58.57430267 43.28044128]
[73.33463287 41.47196579]
[86.48512268 48.78829956]
[92.88066864 62.60678101]
[89.87842560 77.71614075]
[99.96833801 88.81540680]
[110.18960571 99.79383087]
[120.54078674 110.64984131]
[130.89196777 121.50585175]
[145.06959534 116.09561920]
[160.19769287 116.52445221]
[173.97184753 122.69586945]
[184.30583191 133.64102173]
[189.64755249 147.67065430]
[189.21212769 162.63581848]
[183.09701538 176.25692749]
[193.44821167 187.11293030]
[203.79939270 197.96894836]
[214.15057373 208.82495117]
[225.00659180 219.17614746]
[236.34283447 228.99905396]
[247.67907715 238.82196045]
[259.01531982 248.64488220]
[270.35156250 258.46777344]
[281.68780518 268.29071045]
[293.02404785 278.11361694]
[304.36029053 287.93652344]
[319.85662842 291.12625122]
[324.40838623 305.30828857]
[335.74462891 315.13122559]
[347.19696045 324.81854248]
[358.76376343 334.36889648]
[374.47070312 332.61727905]
[386.76339722 342.55029297]
[388.34884644 358.27487183]
[378.28640747 370.46188354]
[362.54595947 371.88098145]
[350.46603394 361.69024658]
[349.21340942 345.93566895]
[337.64660645 336.38531494]
[330.41546631 334.53448486]
[325.92172241 326.46746826]
[314.58547974 316.64453125]
[299.89999390 314.15740967]
[294.53738403 299.27276611]
[283.20114136 289.44985962]
[271.86489868 279.62695312]
[260.52865601 269.80401611]
[249.19241333 259.98110962]
[237.85617065 250.15820312]
[226.51991272 240.33529663]
[215.18367004 230.51239014]
[212.29008484 230.63758850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[13 87]
[14 86]
[15 85]
[17 84]
[18 83]
[22 79]
[23 78]
[24 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 69]
[33 68]
[34 60]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[107 121]
[108 120]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
