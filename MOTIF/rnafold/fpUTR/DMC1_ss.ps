%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCGUUUGGCGCCAAACCCUGUGGUCAACGGCGCGCGGGUCUCCAGGCUCCGUGUUCUAGGCCCGAGUUAGAAUCCUGUCAGCUGAGGAGGUCGGGCGGGGCAGAGGGGCUUCACCUUGAAAAUCUCGGGGAGACUGUGGGUACGAGGGGGAAGUGAUUAUUUUUCUGUUGCCCACUUUUCAAU\
) } def
/len { sequence length } bind def

/coor [
[83.93593597 184.88464355]
[79.08699036 170.69000244]
[80.81320953 155.78965759]
[88.77935791 143.07934570]
[92.76135254 128.61753845]
[96.74334717 114.15573883]
[86.31546021 124.93809509]
[75.88757324 135.72044373]
[74.61508942 140.82382202]
[71.78625488 144.54598999]
[68.19313812 146.52424622]
[64.65662384 146.76527405]
[53.70152664 157.01153564]
[42.74642944 167.25778198]
[31.79133034 177.50404358]
[20.83623123 187.75030518]
[20.93903351 206.67956543]
[7.41908598 219.46891785]
[-10.83871555 218.35443115]
[-21.44531822 228.96102905]
[-32.05191803 239.56762695]
[-35.77137375 255.53941345]
[-51.53954315 260.04461670]
[-63.13549423 248.44865417]
[-58.63029861 232.68048096]
[-42.65851974 228.96102905]
[-32.05191803 218.35443115]
[-21.44531822 207.74783325]
[-23.92009735 196.58665466]
[-20.65731239 185.50474548]
[-12.35879993 177.29647827]
[-1.01095641 174.08973694]
[10.58997250 176.79521179]
[21.54507065 166.54895020]
[32.50016785 156.30268860]
[43.45526505 146.05642700]
[54.41036606 135.81016541]
[65.10521698 125.29256439]
[75.53310394 114.51020813]
[85.96099091 103.72785187]
[90.64389801 89.47757721]
[88.64459229 74.61141205]
[86.64528656 59.74525070]
[84.64598083 44.87908554]
[82.64668274 30.01292419]
[80.64737701 15.14676285]
[78.64807129 0.28060010]
[50.12269974 -31.16526604]
[44.03692245 -44.87523651]
[37.95114136 -58.58520508]
[31.86536026 -72.29517365]
[25.77958107 -86.00514221]
[19.69380188 -99.71511841]
[13.60802174 -113.42508698]
[-1.52214265 -123.90464783]
[0.98750097 -141.26469421]
[-5.32652044 -154.87106323]
[-11.64054203 -168.47743225]
[-17.95456314 -182.08378601]
[-24.26858521 -195.69015503]
[-30.58260536 -209.29652405]
[-35.78800583 -213.42466736]
[-37.80866623 -218.76313782]
[-36.87176895 -223.46467590]
[-42.72761154 -237.27441406]
[-48.58345032 -251.08416748]
[-54.43928909 -264.89392090]
[-60.29512787 -278.70367432]
[-66.15096283 -292.51342773]
[-75.10783386 -293.03823853]
[-83.36436462 -296.43704224]
[-90.02970123 -302.31243896]
[-94.39471436 -310.00155640]
[-96.00739288 -318.65066528]
[-94.71949005 -327.31011963]
[-90.69970703 -335.03836060]
[-84.41217804 -341.00454712]
[-89.09508514 -355.25482178]
[-93.77799225 -369.50509644]
[-98.46089935 -383.75537109]
[-113.27508545 -388.37268066]
[-122.51902008 -400.83578491]
[-122.63821411 -416.35241699]
[-113.58683777 -428.95605469]
[-98.84532928 -433.80041504]
[-84.08209991 -429.02267456]
[-74.97391510 -416.45999146]
[-75.02305603 -400.94299316]
[-84.21062469 -388.43829346]
[-79.52771759 -374.18798828]
[-74.84481049 -359.93771362]
[-70.16190338 -345.68743896]
[-50.39075089 -337.95602417]
[-42.64294815 -317.88763428]
[-52.34121704 -298.36926270]
[-46.48537827 -284.55950928]
[-40.62953949 -270.74975586]
[-34.77370071 -256.94000244]
[-28.91786194 -243.13026428]
[-23.06202316 -229.32051086]
[-16.97624207 -215.61053467]
[-10.66222095 -202.00418091]
[-4.34819984 -188.39781189]
[1.96582186 -174.79144287]
[8.27984333 -161.18508911]
[14.59386444 -147.57872009]
[25.85190201 -143.11946106]
[31.21829796 -131.81883240]
[27.31799126 -119.51086426]
[33.40377045 -105.80089569]
[39.48955154 -92.09092712]
[45.57533264 -78.38095856]
[51.66110992 -64.67098236]
[57.74689102 -50.96101379]
[63.83267212 -37.25104523]
[70.97712708 -34.96920395]
[85.26602936 -30.40552521]
[92.41048431 -28.12368584]
[105.31650543 -35.76793671]
[109.34342194 -50.81525040]
[122.54085541 -58.38375854]
[136.86135864 -54.45198059]
[149.76737976 -62.09622955]
[160.31408691 -75.37039185]
[175.98910522 -68.91052246]
[174.12095642 -52.05981064]
[157.41163635 -49.19020462]
[144.50559998 -41.54595566]
[141.07141113 -27.09805489]
[128.09176636 -19.16184616]
[112.96075439 -22.86191177]
[100.05473328 -15.21766186]
[93.51422882 -1.71870422]
[95.51353455 13.14745808]
[97.51284027 28.01362038]
[99.51214600 42.87978363]
[101.51145172 57.74594498]
[103.51075745 72.61210632]
[105.51005554 87.47827148]
[127.84304810 99.86766815]
[140.06608582 108.56233215]
[152.28913879 117.25699615]
[164.51217651 125.95166016]
[176.73521423 134.64633179]
[188.95826721 143.34098816]
[201.18130493 152.03565979]
[216.56831360 149.61126709]
[228.84036255 158.60302734]
[231.05682373 173.28712463]
[243.27986145 181.98179626]
[255.50291443 190.67645264]
[267.72595215 199.37112427]
[279.94900513 208.06578064]
[292.17202759 216.76045227]
[304.39508057 225.45510864]
[319.06042480 220.38488770]
[333.89532471 224.93525696]
[343.19540405 237.35652161]
[343.38464355 252.87245178]
[334.39025879 265.51684570]
[319.67077637 270.42767334]
[304.88613892 265.71664429]
[295.72134399 253.19522095]
[295.70040894 237.67816162]
[283.47738647 228.98348999]
[271.25433350 220.28883362]
[259.03128052 211.59416199]
[246.80824280 202.89949036]
[234.58520508 194.20483398]
[222.36215210 185.51016235]
[207.76348877 188.23309326]
[195.24372864 179.58959961]
[192.48664856 164.25869751]
[180.26359558 155.56404114]
[168.04055786 146.86936951]
[155.81750488 138.17471313]
[143.59446716 129.48004150]
[131.37142944 120.78537750]
[119.14838409 112.09071350]
[125.70666504 125.58103943]
[132.26495361 139.07136536]
[142.41992188 150.11112976]
[146.84075928 164.44487000]
[144.66822815 179.28671265]
[136.32456970 191.75199890]
[123.43146515 199.41801453]
[108.49478149 200.79478455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[19 28]
[20 27]
[21 26]
[41 139]
[42 138]
[43 137]
[44 136]
[45 135]
[46 134]
[47 133]
[48 115]
[49 114]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[56 106]
[57 105]
[58 104]
[59 103]
[60 102]
[61 101]
[64 100]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[77 92]
[78 91]
[79 90]
[80 89]
[118 132]
[119 131]
[122 128]
[123 127]
[140 179]
[141 178]
[142 177]
[143 176]
[144 175]
[145 174]
[146 173]
[149 170]
[150 169]
[151 168]
[152 167]
[153 166]
[154 165]
[155 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
