%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGCCUUCCGGUGCGUCGUUUACGCCAGUUUGAACCAAAGACGCCCAAGGUUGAGGCCGAGUUCCAGAGC\
) } def
/len { sequence length } bind def

/coor [
[154.81935120 246.85751343]
[149.15373230 232.96864319]
[143.48811340 219.07977295]
[131.51675415 210.21771240]
[133.46849060 194.51734924]
[127.80286407 180.62847900]
[122.13724518 166.73960876]
[116.47162628 152.85073853]
[110.80600739 138.96186829]
[104.54810333 125.32960510]
[97.70950317 111.97918701]
[90.30286407 98.93534851]
[82.34191895 86.22223663]
[74.90602112 80.38929749]
[74.32561493 72.78646088]
[66.91898346 59.74261475]
[59.51235199 46.69877625]
[52.10572052 33.65493393]
[44.69908524 20.61109352]
[36.19855881 8.25224876]
[26.66707420 -3.33009982]
[17.13558960 -14.91244888]
[7.60410547 -26.49479675]
[-1.92737889 -38.07714462]
[-17.40760612 -37.00842667]
[-30.54165459 -45.27137756]
[-36.27921295 -59.68873215]
[-32.41407776 -74.71671295]
[-20.43246460 -84.57676697]
[-4.94155359 -85.47749329]
[8.10208511 -77.07254791]
[13.68290615 -62.59380341]
[9.65497017 -47.60863113]
[19.18645477 -36.02628326]
[28.71793938 -24.44393349]
[38.24942398 -12.86158466]
[47.78090668 -1.27923548]
[50.87530899 -1.03549576]
[54.03377914 0.64464229]
[56.62508774 3.78101134]
[58.02954483 8.13082504]
[57.74292755 13.20446110]
[65.14955902 26.24830246]
[72.55619049 39.29214096]
[79.96282959 52.33598328]
[87.36946106 65.37982178]
[95.05503082 78.26128387]
[103.01598358 90.97439575]
[108.04700470 93.39668274]
[111.21319580 98.57913208]
[111.05991364 105.14058685]
[117.89851379 118.49100494]
[123.64447021 122.69151306]
[125.82798004 128.36352539]
[124.69487762 133.29624939]
[130.36048889 147.18511963]
[136.02612305 161.07398987]
[141.69174194 174.96286011]
[147.35736084 188.85173035]
[159.73394775 198.70721436]
[157.37698364 213.41415405]
[163.04260254 227.30302429]
[168.70822144 241.19189453]
[183.93540955 243.19898987]
[196.10920715 252.56352234]
[201.95492554 266.76644897]
[199.90010071 281.98724365]
[190.49748230 294.13165283]
[176.27629089 299.93283081]
[161.06199646 297.83029175]
[148.94714355 288.38964844]
[143.19056702 274.15036011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[10 52]
[11 51]
[12 48]
[13 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
