%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCCAGGGCAGCGCGGACUCGCGUCCCGUGGAGCGUUCCAGGCGGGCGCGCGGCUUUCUCCCCAGACCCACCGAGUGGCGGCGGAGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[140.41636658 155.63037109]
[144.02612305 145.08045959]
[132.34297180 135.67280579]
[120.65980530 126.26516724]
[108.97664642 116.85752106]
[94.55985260 118.30740356]
[83.27429199 109.21991730]
[81.61570740 94.82563782]
[69.93254852 85.41799164]
[58.24938965 76.01034546]
[46.56623077 66.60269928]
[34.88307190 57.19505692]
[19.28177834 54.56632233]
[14.22144699 40.55767059]
[2.53828764 31.15002441]
[-9.14487171 21.74237823]
[-20.82803154 12.33473301]
[-32.51118851 2.92708802]
[-30.97294044 17.84800529]
[-37.53635406 31.33583832]
[-50.22684097 39.33280563]
[-65.22650909 39.43304443]
[-78.02273560 31.60639763]
[-84.76583099 18.20748901]
[-83.42713165 3.26734614]
[-74.40939331 -8.71933079]
[-60.42557907 -14.14638138]
[-45.68289948 -11.38120365]
[-54.09362793 -23.80133629]
[-62.50435257 -36.22146988]
[-70.91507721 -48.64160156]
[-79.32580566 -61.06173325]
[-88.14258575 -73.19699097]
[-97.35577393 -85.03409576]
[-106.56896210 -96.87120056]
[-121.95802307 -102.53768158]
[-124.47821045 -118.74202728]
[-111.53697968 -128.81459045]
[-96.44715118 -122.39358521]
[-94.73185730 -106.08439636]
[-85.51866913 -94.24728394]
[-76.30547333 -82.41017914]
[-71.57142639 -80.93452454]
[-67.79961395 -76.35075378]
[-66.90567017 -69.47245789]
[-58.49494553 -57.05232620]
[-50.08422089 -44.63219452]
[-41.67349243 -32.21206284]
[-33.26276779 -19.79192924]
[-23.10354424 -8.75607109]
[-11.42038536 0.65157413]
[0.26277375 10.05921936]
[11.94593334 19.46686554]
[23.62909126 28.87450981]
[38.39472580 30.83034706]
[44.29071426 45.51189804]
[55.97387314 54.91954041]
[67.65703583 64.32718658]
[79.34019470 73.73483276]
[91.02335358 83.14247894]
[105.44014740 81.69259644]
[116.72570801 90.78008270]
[118.38429260 105.17436218]
[130.06745911 114.58200836]
[141.75061035 123.98965454]
[153.43377686 133.39729309]
[171.23692322 125.20167542]
[190.69076538 126.85158539]
[206.73512268 137.84329224]
[215.23350525 155.25283813]
[214.03942871 174.51359558]
[227.11167908 181.86994934]
[242.93287659 181.89494324]
[250.22993469 194.87963867]
[263.30218506 202.23599243]
[276.37445068 209.59234619]
[292.14941406 206.67161560]
[304.17352295 217.29234314]
[303.22296143 233.30720520]
[290.02688599 242.43098450]
[274.70822144 237.66467285]
[269.01809692 222.66459656]
[255.94584656 215.30824280]
[242.87358093 207.95190430]
[227.98741150 208.45307922]
[219.75532532 194.94221497]
[206.68307495 187.58586121]
[198.43989563 194.80543518]
[188.45205688 199.36445618]
[177.55476379 200.86819458]
[166.66319275 199.17796326]
[156.69554138 194.42381287]
[148.49575806 186.99465942]
[142.76193237 177.50643921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[8 60]
[9 59]
[10 58]
[11 57]
[12 56]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 42]
[34 41]
[35 40]
[71 87]
[72 86]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
