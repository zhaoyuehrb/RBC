%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCUCCUGCGUACUACGGCUUCUUCCAGUCACCUCGGCCCGGAUCGGGAAGUGUCAAGCGGGCGCUCCCCCAUCUCCGCCGCUAUUACCACUGAACCCGGACCCCCUACCCAGGUCCAGGGCCAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[87.38745880 242.99639893]
[77.13137817 253.95896912]
[63.49668884 260.14285278]
[48.57395554 260.63412476]
[43.36973953 274.70239258]
[46.66445541 290.76715088]
[34.22137070 301.44900513]
[18.84086800 295.75936890]
[16.34508514 279.55123901]
[29.30147171 269.49816895]
[34.50569153 255.42990112]
[23.49525452 245.34529114]
[17.16749954 231.77676392]
[16.51490402 216.77879333]
[21.66802216 202.63549805]
[31.87085724 191.51274109]
[45.59160995 185.12649536]
[60.75259018 184.47817993]
[65.95681000 170.40991211]
[71.16102600 156.34164429]
[76.36524963 142.27337646]
[81.56946564 128.20512390]
[73.00830078 120.16584015]
[67.72650146 109.67649841]
[66.36580658 98.01150513]
[69.09152222 86.58810425]
[75.57247925 76.79418945]
[85.02128601 69.81968689]
[81.51099396 55.23620987]
[78.00070190 40.65272903]
[74.49040985 26.06925201]
[56.94030380 22.83344841]
[42.57280350 12.33654118]
[34.20480347 -3.30717635]
[33.45250320 -20.97997856]
[40.41940689 -37.18202209]
[53.68485641 -48.72443771]
[49.15081024 -63.02277374]
[44.61676025 -77.32111359]
[40.08271408 -91.61944580]
[26.33257484 -98.93869781]
[21.93809128 -113.50382996]
[29.00061417 -126.56738281]
[24.46656609 -140.86572266]
[19.93251991 -155.16404724]
[15.39847183 -169.46238708]
[3.85172844 -180.27827454]
[7.38002634 -194.74894714]
[2.84597898 -209.04728699]
[-1.68806839 -223.34561157]
[-13.23481178 -234.16149902]
[-9.70651436 -248.63217163]
[-14.24056149 -262.93051147]
[-18.77460861 -277.22885132]
[-23.30865669 -291.52719116]
[-27.84270287 -305.82550049]
[-32.37675095 -320.12384033]
[-45.90008545 -328.75512695]
[-47.44017792 -344.72409058]
[-35.81560516 -355.78070068]
[-19.94374084 -353.44329834]
[-12.00012302 -339.50491333]
[-18.07841492 -324.65789795]
[-13.54436779 -310.35955811]
[-9.01031971 -296.06121826]
[-4.47627258 -281.76287842]
[0.05777456 -267.46456909]
[4.59182167 -253.16621399]
[15.81426048 -243.37304688]
[12.61026764 -227.87966919]
[17.14431572 -213.58132935]
[21.67836189 -199.28298950]
[32.90079880 -189.48982239]
[29.69680786 -173.99644470]
[34.23085403 -159.69810486]
[38.76490402 -145.39976501]
[43.29895020 -131.10142517]
[56.59891891 -124.49488831]
[61.40077591 -110.05892944]
[54.38105011 -96.15349579]
[58.91509628 -81.85515594]
[63.44914627 -67.55682373]
[67.98319244 -53.25848770]
[80.36201477 -52.82156754]
[92.02017212 -48.56438065]
[101.80634308 -40.89113998]
[108.74903870 -30.54420280]
[112.15309143 -18.53227234]
[111.66918182 -6.03207874]
[107.32965851 5.72690630]
[99.54683685 15.58339405]
[89.07388306 22.55895805]
[92.58418274 37.14243698]
[96.09447479 51.72591400]
[99.60476685 66.30939484]
[119.30809021 72.38821411]
[131.77992249 88.80850983]
[132.34918213 109.42037201]
[145.45605469 116.71488953]
[158.56292725 124.00939941]
[171.75503540 131.14860535]
[185.03053284 138.13153076]
[198.30603027 145.11444092]
[211.58154297 152.09735107]
[224.85704041 159.08026123]
[238.22959900 151.38751221]
[253.63717651 152.16853333]
[266.16326904 161.17410278]
[271.81088257 175.53056335]
[268.77783203 190.65684509]
[258.03198242 201.72618103]
[243.00228882 205.20640564]
[228.48468018 199.98698425]
[219.11166382 187.73341370]
[217.87413025 172.35575867]
[204.59863281 165.37284851]
[191.32312012 158.38993835]
[178.04762268 151.40702820]
[164.77212524 144.42411804]
[157.31677246 144.09130859]
[151.26841736 137.11627197]
[138.16154480 129.82176208]
[125.05467224 122.52724457]
[116.61541748 129.31111145]
[106.46016693 133.06779480]
[95.63773346 133.40933228]
[90.43351746 147.47760010]
[85.22929382 161.54586792]
[80.02507782 175.61413574]
[74.82085419 189.68240356]
[85.90997314 200.04132080]
[92.17138672 213.81947327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 11]
[5 10]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[28 95]
[29 94]
[30 93]
[31 92]
[37 83]
[38 82]
[39 81]
[40 80]
[43 77]
[44 76]
[45 75]
[46 74]
[48 72]
[49 71]
[50 70]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[98 123]
[99 122]
[100 121]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
