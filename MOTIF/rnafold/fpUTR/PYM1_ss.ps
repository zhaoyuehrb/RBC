%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCAGCCCGAGGAGGCACUCAGGGUUAGGAGGUCUGGGCGAGAAGCAACUAGGGCCCUCAUCACUUCGCCGCCGAAUCCCCGGCGCCGCCCAGCGGGGCAGAGCCAGGCCAGGGCCGCCCGCCCAACCUGGUCCGCUGCCUCUUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[116.28736877 253.44847107]
[112.62866211 267.99542236]
[108.96995544 282.54235840]
[105.31124878 297.08932495]
[107.31159210 313.92486572]
[91.68775177 320.50756836]
[81.03719330 307.31658936]
[90.76429749 293.43063354]
[94.42300415 278.88366699]
[98.08171082 264.33670044]
[101.74041748 249.78976440]
[104.64788818 235.07423401]
[106.79646301 220.22891235]
[108.94504547 205.38359070]
[111.09362793 190.53826904]
[113.24220276 175.69294739]
[115.39078522 160.84762573]
[117.53936005 146.00230408]
[119.68794250 131.15698242]
[106.83146667 135.85151672]
[93.28314209 135.50732422]
[80.92853546 130.27061462]
[71.45104980 120.96167755]
[66.10265350 108.94796753]
[65.53895569 95.94377899]
[69.74034119 83.76583099]
[56.31288910 77.07975006]
[42.88544083 70.39367676]
[27.08321953 71.16855621]
[19.13904572 58.56937790]
[5.71159554 51.88330078]
[-7.71585369 45.19722748]
[-23.51807213 45.97210693]
[-31.46224785 33.37292862]
[-44.88969803 26.68685150]
[-58.31714630 20.00077629]
[-73.13922882 24.79071999]
[-86.66133118 17.81880951]
[-91.13646698 3.65869832]
[-104.56391144 -3.02737713]
[-117.99136353 -9.71345234]
[-131.41880798 -16.39952850]
[-142.86297607 -6.39455748]
[-157.26635742 -1.53540039]
[-172.43251038 -2.56304312]
[-186.04873657 -9.32077694]
[-196.03863525 -20.77809715]
[-200.87884521 -35.18784714]
[-199.83125305 -50.35264206]
[-193.05561829 -63.95996094]
[-181.58515930 -73.93478394]
[-167.16905212 -78.75603485]
[-152.00564575 -77.68849182]
[-138.40725708 -70.89495850]
[-128.44752502 -59.41139603]
[-123.64524841 -44.98896408]
[-124.73273468 -29.82697678]
[-111.30529022 -23.14090157]
[-97.87783813 -16.45482635]
[-84.45038605 -9.76875114]
[-70.45350647 -14.73088932]
[-56.74091721 -8.14153767]
[-51.63107300 6.57332706]
[-38.20362091 13.25940228]
[-24.77617264 19.94547844]
[-9.93437481 18.69236374]
[-1.02977836 31.76977730]
[12.39767075 38.45585251]
[25.82512093 45.14192963]
[40.66691971 43.88881302]
[49.57151413 56.96622849]
[62.99896240 63.65230179]
[76.42641449 70.33837891]
[89.78451538 63.51480103]
[92.23744202 48.71672440]
[94.69036865 33.91864395]
[97.14329529 19.12056541]
[87.74323273 6.41567087]
[90.16269684 -9.20232296]
[102.96626282 -18.46753693]
[118.55780792 -15.88308525]
[127.68713379 -2.98227620]
[124.93798828 12.58106899]
[111.94137573 21.57349396]
[109.48844910 36.37157440]
[107.03552246 51.16965103]
[104.58258820 65.96772766]
[121.75114441 71.82042694]
[134.08946228 85.98997498]
[143.96516418 74.69969177]
[153.84088135 63.40941620]
[163.71658325 52.11913300]
[169.59376526 36.21646118]
[186.50192261 37.46166229]
[189.98602295 54.05374908]
[175.00686646 61.99483871]
[165.13114929 73.28511810]
[155.25544739 84.57540131]
[145.37974548 95.86568451]
[150.07354736 110.11237335]
[164.72627258 113.32137299]
[179.37899780 116.53036499]
[194.51493835 111.92450714]
[205.29228210 122.20546722]
[219.94500732 125.41445923]
[229.06092834 124.19142151]
[234.86418152 128.84269714]
[249.44793701 132.35186768]
[264.03167725 135.86102295]
[278.61544800 139.37019348]
[293.19918823 142.87936401]
[303.83465576 134.55491638]
[317.12973022 133.90531921]
[328.19699097 140.94413757]
[333.09765625 152.89970398]
[347.60629272 156.70756531]
[362.11492920 160.51542664]
[376.62353516 164.32328796]
[391.14544678 157.50463867]
[405.46636963 164.73587036]
[408.60052490 180.46980286]
[398.14364624 192.63670349]
[382.11737061 191.90316772]
[372.81567383 178.83190918]
[358.30706787 175.02404785]
[343.79843140 171.21618652]
[329.28979492 167.40832520]
[315.17761230 176.50500488]
[298.51803589 172.53140259]
[289.69000244 157.46311951]
[275.10626221 153.95394897]
[260.52252197 150.44477844]
[245.93876648 146.93560791]
[231.35501099 143.42643738]
[216.73600769 140.06718445]
[202.08328247 136.85818481]
[187.99540710 141.69357300]
[176.16999817 131.18309021]
[161.51727295 127.97409058]
[146.86454773 124.76509857]
[134.53326416 133.30555725]
[132.38468933 148.15087891]
[130.23609924 162.99620056]
[128.08752441 177.84152222]
[125.93894958 192.68684387]
[123.79036713 207.53216553]
[121.64179230 222.37748718]
[119.49320984 237.22280884]
[133.04501343 230.79254150]
[146.61289978 237.18882751]
[150.27597046 251.73468018]
[141.35577393 263.79412842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[12 148]
[13 147]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[26 73]
[27 72]
[28 71]
[30 69]
[31 68]
[32 67]
[34 65]
[35 64]
[36 63]
[39 60]
[40 59]
[41 58]
[42 57]
[74 87]
[75 86]
[76 85]
[77 84]
[89 99]
[90 98]
[91 97]
[92 96]
[100 140]
[101 139]
[102 138]
[104 136]
[105 135]
[107 134]
[108 133]
[109 132]
[110 131]
[111 130]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
