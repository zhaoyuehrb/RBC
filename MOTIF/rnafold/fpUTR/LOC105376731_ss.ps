%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUGUAGCGGUGAACGCCUCCCUUGUAUUUGGGGGCCGUGCCCCAGGCCCCUCUCCCUGUGAACUCCUCUGGGCUUUGUAUCGCAAAGUGAAGACCUCAGGGCAC\
) } def
/len { sequence length } bind def

/coor [
[101.74636078 258.97213745]
[100.87419128 243.99751282]
[100.00201416 229.02288818]
[99.12984467 214.04826355]
[98.25767517 199.07365417]
[97.38549805 184.09902954]
[78.16915894 181.25820923]
[60.11641312 174.08630371]
[44.18946457 162.96559143]
[33.27886200 173.25921631]
[22.36825562 183.55284119]
[20.46626282 199.48275757]
[6.75058889 207.80499268]
[-8.25727558 202.13546753]
[-13.04458141 186.82334900]
[-3.93891716 173.61477661]
[12.07463169 172.64224243]
[22.98523521 162.34861755]
[33.89583969 152.05499268]
[28.58807755 144.49516296]
[24.14098740 136.39906311]
[20.60816383 127.86428070]
[18.03218842 118.99366760]
[16.44410515 109.89414215]
[15.86305428 100.67536926]
[16.29603958 91.44845581]
[17.73784256 82.32461548]
[20.17108727 73.41379547]
[23.56644440 64.82339478]
[27.88299561 56.65695572]
[33.06871796 49.01289368]
[39.06110764 41.98333740]
[45.78794479 35.65301132]
[37.18429947 23.36573219]
[28.58065224 11.07845116]
[19.97700500 -1.20882964]
[11.37335873 -13.49610996]
[2.76971197 -25.78339005]
[-5.83393431 -38.07067108]
[-21.35041237 -38.20682526]
[-33.80342102 -47.46437454]
[-38.40452194 -62.28360367]
[-33.38450241 -76.96620941]
[-20.67365837 -85.86643982]
[-5.15956974 -85.56196594]
[7.19227886 -76.16987610]
[11.63234997 -61.30160522]
[6.45334625 -46.67431641]
[15.05699253 -34.38703918]
[23.66063881 -22.09975624]
[32.26428604 -9.81247616]
[40.86793137 2.47480440]
[49.47158051 14.76208496]
[58.07522583 27.04936600]
[68.07800293 22.15099525]
[78.64012146 18.61672401]
[89.57652283 16.50848579]
[100.69557190 15.86321926]
[111.80242920 16.69223022]
[122.70247650 18.98099518]
[133.20472717 22.68940735]
[143.12515259 27.75248718]
[152.28991699 34.08151627]
[160.53843689 41.56559753]
[167.72618103 50.07358932]
[173.72718811 59.45640945]
[178.43632507 69.54965210]
[181.77107239 80.17646027]
[183.67298889 91.15061951]
[184.10876465 102.27984619]
[199.00733948 104.02124023]
[213.90591431 105.76263428]
[226.22854614 96.23422241]
[241.31300354 98.21247864]
[250.32095337 110.01894379]
[265.21951294 111.76033783]
[280.11810303 113.50173187]
[295.01666260 115.24312592]
[309.91525269 116.98451996]
[324.81384277 118.72591400]
[339.71240234 120.46730042]
[356.14636230 116.30065918]
[364.69955444 130.93893433]
[353.00109863 143.21014404]
[337.97100830 135.36587524]
[323.07244873 133.62448120]
[308.17385864 131.88308716]
[293.27529907 130.14169312]
[278.37670898 128.40029907]
[263.47811890 126.65891266]
[248.57955933 124.91751862]
[237.09167480 134.32835388]
[221.95758057 132.77458191]
[212.16452026 120.66120911]
[197.26594543 118.91981506]
[182.36737061 117.17842102]
[173.43040466 141.07867432]
[157.74014282 161.20097351]
[136.73957825 175.69468689]
[112.36012268 183.22685242]
[113.23229218 198.20147705]
[114.10446930 213.17610168]
[114.97663879 228.15072632]
[115.84881592 243.12533569]
[116.72098541 258.09997559]
[123.67805481 273.56072998]
[110.74740601 284.52587891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[9 19]
[10 18]
[11 17]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[70 96]
[71 95]
[72 94]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
