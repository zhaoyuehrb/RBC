%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCUCCGCUUGGAGCCGCCGCACCCGGGACGGUGCGUAGCGCUGGAAGUCCGGCCUUCCGAGAGCUAGCUGUCCGCCGCGGCCCCCGCACGCCGGGCAGCCGUCCCUCGCCGCCUCGGGCGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[8.40558052 380.02713013]
[-0.46960506 379.69354248]
[-7.39140224 393.00100708]
[-8.59877491 402.15798950]
[-14.64207172 406.54162598]
[-21.88098335 419.67929077]
[-29.11989403 432.81695557]
[-36.35880280 445.95462036]
[-35.49029541 462.33074951]
[-49.38382721 471.04290771]
[-63.74692535 463.12878418]
[-63.80406570 446.72973633]
[-49.49646759 438.71569824]
[-42.25755692 425.57803345]
[-35.01864624 412.44036865]
[-27.77973366 399.30270386]
[-20.69887161 386.07919312]
[-13.77707386 372.77172852]
[-22.19000435 353.34927368]
[-13.63437653 333.68658447]
[6.83398342 326.41802979]
[12.11422729 312.37811279]
[17.39447021 298.33819580]
[14.63261127 283.70190430]
[26.73256111 273.50869751]
[32.01280594 259.46878052]
[37.29304886 245.42886353]
[42.57329178 231.38896179]
[47.85353470 217.34904480]
[53.13378143 203.30914307]
[50.37192154 188.67283630]
[62.47187042 178.47961426]
[67.75211334 164.43971252]
[73.03235626 150.39979553]
[78.31259918 136.35989380]
[83.59284210 122.31998444]
[71.20168304 106.54955292]
[72.31983185 85.24788666]
[88.06149292 69.02292633]
[80.20101929 56.24744034]
[72.34055328 43.47195816]
[64.48007965 30.69647217]
[50.65850830 22.99746513]
[50.57886887 8.10307312]
[42.71839905 -4.67241144]
[34.70531082 -17.35272789]
[26.54075432 -29.93605042]
[18.37619781 -42.51937103]
[10.21164131 -55.10269547]
[2.04708457 -67.68601990]
[-13.46079159 -70.73254395]
[-22.20281792 -83.89888763]
[-18.99250221 -99.37368774]
[-5.73447132 -107.97602081]
[9.70552158 -104.60227966]
[18.16720390 -91.25403595]
[14.63040733 -75.85057831]
[22.79496384 -63.26725388]
[30.95952034 -50.68392944]
[39.12407684 -38.10060501]
[47.28863525 -25.51728439]
[53.63140488 -21.57940102]
[55.49388504 -12.53288078]
[63.35435486 0.24260408]
[76.61369324 7.02782154]
[77.25556946 22.83600235]
[85.11603546 35.61148834]
[92.97650146 48.38697052]
[100.83697510 61.16245651]
[115.48894501 64.37490082]
[127.97346497 56.06004715]
[140.45799255 47.74519730]
[152.94250488 39.43034744]
[165.42703247 31.11549759]
[177.91154480 22.80064583]
[190.39607239 14.48579597]
[202.88058472 6.17094564]
[206.23025513 0.28445828]
[211.31181335 -2.52971721]
[216.16903687 -2.22644019]
[229.03785706 -9.93315983]
[241.90667725 -17.63987923]
[254.68215942 -25.50034904]
[267.36248779 -33.51343918]
[274.50482178 -48.27551651]
[290.87783813 -49.20107651]
[299.63833618 -35.33798599]
[291.77432251 -20.94740105]
[275.37554932 -20.83312225]
[262.69525146 -12.82003307]
[258.68161011 -6.52493525]
[249.61338806 -4.77106142]
[236.74456787 2.93565798]
[223.87576294 10.64237785]
[211.19543457 18.65546608]
[198.71092224 26.97031784]
[186.22639465 35.28516769]
[173.74188232 43.60001755]
[161.25735474 51.91486740]
[148.77284241 60.22971725]
[136.28831482 68.54457092]
[123.80379486 76.85942078]
[129.01779175 85.33952332]
[131.39498901 94.79280090]
[130.83613586 104.31683350]
[127.51642609 113.03975677]
[121.85811615 120.20006561]
[114.48110199 125.21293640]
[106.13687134 127.71736145]
[97.63275146 127.60022736]
[92.35250854 141.64013672]
[87.07226562 155.68003845]
[81.79202271 169.71995544]
[76.51177979 183.75985718]
[78.89595795 199.40039062]
[67.17369080 208.58938599]
[61.89344406 222.62928772]
[56.61320114 236.66920471]
[51.33295822 250.70910645]
[46.05271530 264.74902344]
[40.77246857 278.78894043]
[43.15665054 294.42947388]
[31.43437958 303.61843872]
[26.15413475 317.65835571]
[20.87389183 331.69827271]
[27.14865685 338.41000366]
[30.83220100 346.77954102]
[31.53626251 355.85269165]
[29.21044540 364.60562134]
[24.14464951 372.06008911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[5 16]
[6 15]
[7 14]
[8 13]
[21 125]
[22 124]
[23 123]
[25 121]
[26 120]
[27 119]
[28 118]
[29 117]
[30 116]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[39 69]
[40 68]
[41 67]
[42 66]
[44 64]
[45 63]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[80 94]
[81 93]
[82 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
