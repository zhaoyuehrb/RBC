%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUUUGAACUGUAUUCAGCGGCGACAGCGGCGACUGCGGCGGCCGCGGGAGGGCAUCCCGUUGGGGAUCCUUCCGCACACUGAAGAGUACGUCUUCGGGUCUACCCCUAAUCACAUA\
) } def
/len { sequence length } bind def

/coor [
[62.19308853 124.86660004]
[74.59575653 116.43013763]
[88.81494904 111.65150452]
[74.43265533 115.91173553]
[60.05035782 120.17196655]
[45.66806030 124.43218994]
[42.23011017 133.44766235]
[35.08293152 139.72114563]
[25.96784019 141.89660645]
[17.02677536 139.59609985]
[10.29908466 133.47814941]
[-4.37312889 136.59683228]
[-19.04534340 139.71549988]
[-33.71755600 142.83418274]
[-48.38977051 145.95285034]
[-60.27970123 156.39028931]
[-74.33752441 151.46821594]
[-89.00974274 154.58689880]
[-96.86739349 159.48811340]
[-104.10665894 157.58985901]
[-118.85548401 160.32339478]
[-131.01455688 170.44601440]
[-144.93872070 165.15763855]
[-159.68754578 167.89117432]
[-171.79936218 178.94720459]
[-187.34609985 173.72886658]
[-190.33460999 157.60432434]
[-177.69056702 147.16113281]
[-162.42108154 153.14234924]
[-147.67225647 150.40881348]
[-136.56811523 140.48171997]
[-121.58901978 145.57456970]
[-106.84019470 142.84103394]
[-92.12841797 139.91468811]
[-77.45619965 136.79600525]
[-66.61573029 126.58163452]
[-51.50844574 131.28063965]
[-36.83623123 128.16197205]
[-22.16401863 125.04328918]
[-7.49180460 121.92461395]
[7.18040943 118.80593872]
[21.05334282 103.61769104]
[41.40782928 110.04989624]
[55.79012680 105.78966522]
[70.17242432 101.52943420]
[84.55471802 97.26920319]
[94.29644012 85.86311340]
[96.25433350 70.99144745]
[98.21222687 56.11977005]
[100.17012024 41.24809647]
[102.12801361 26.37642479]
[104.08590698 11.50475216]
[106.04379272 -3.36692071]
[108.00168610 -18.23859406]
[105.76190948 -24.67198753]
[107.01039886 -30.37637901]
[110.47105408 -33.82955933]
[113.20458984 -48.57838058]
[115.93811798 -63.32720566]
[118.67165375 -78.07602692]
[121.40518951 -92.82485199]
[115.42397308 -108.09433746]
[125.86716461 -120.73837280]
[141.99169922 -117.74987030]
[147.21005249 -102.20313263]
[136.15400696 -90.09132385]
[133.42047119 -75.34249878]
[130.68695068 -60.59367371]
[127.95341492 -45.84484863]
[125.21987915 -31.09602547]
[122.87335968 -16.28070068]
[120.91546631 -1.40902770]
[118.95757294 13.46264553]
[116.99967957 28.33431816]
[115.04179382 43.20598984]
[113.08390045 58.07766342]
[111.12600708 72.94933319]
[109.16811371 87.82100677]
[118.90983582 99.22709656]
[133.90469360 99.61975098]
[142.68940735 96.68828583]
[149.28550720 100.22406769]
[164.26495361 101.00910950]
[179.24440002 101.79414368]
[194.22384644 102.57918549]
[209.20327759 103.36422729]
[224.18272400 104.14926147]
[239.16217041 104.93430328]
[251.99862671 95.31115723]
[267.48883057 99.48645020]
[273.75003052 114.25727081]
[265.97915649 128.29269409]
[250.13737488 130.82595825]
[238.37713623 119.91374969]
[223.39768982 119.12870789]
[208.41824341 118.34366608]
[193.43879700 117.55863190]
[178.45936584 116.77359009]
[163.47991943 115.98854828]
[148.50047302 115.20351410]
[133.51203918 114.61461639]
[118.51718140 114.22196198]
[131.70346069 121.37192535]
[142.47251892 131.81353760]
[150.02610779 144.77282715]
[153.80432129 159.28919983]
[153.52709961 174.28665161]
[149.21501160 188.65347290]
[141.18765259 201.32476807]
[130.04006958 211.36126709]
[116.59856415 218.01902771]
[101.85946655 220.80456543]
[86.91531372 219.51138306]
[72.87382507 214.23533630]
[60.77581787 205.36752319]
[51.51803970 193.56524658]
[45.78672409 179.70336914]
[44.00669479 164.80935669]
[46.30989456 149.98722839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[20 33]
[21 32]
[23 30]
[24 29]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[79 102]
[80 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
