%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAUCUCAUUUCUCCCCAGGGGGCUCUAGGCUGUGGAUGUGAGAAGGGGAGCAAGGGAGGCAG\
) } def
/len { sequence length } bind def

/coor [
[84.46273804 262.71359253]
[70.14471436 256.96920776]
[61.22391129 244.38259888]
[60.54691696 228.97009277]
[68.32975769 215.64976501]
[82.08895874 208.67210388]
[83.51480103 193.74002075]
[84.94063568 178.80793762]
[86.36647797 163.87585449]
[79.87401581 150.47073364]
[88.88807678 137.46853638]
[90.31391144 122.53645325]
[91.73975372 107.60437775]
[92.80984497 92.64259338]
[93.52357483 77.65958405]
[94.23729706 62.67657471]
[94.95102692 47.69356537]
[95.66475677 32.71055603]
[96.37848663 17.72754478]
[83.03127289 10.40544128]
[74.22264099 -1.93534660]
[71.65614319 -16.81598091]
[75.78804016 -31.27587128]
[85.74729919 -42.46169281]
[99.51854706 -48.19041824]
[100.23227692 -63.17342758]
[100.58924103 -78.16918182]
[100.58924103 -93.16918182]
[100.58924103 -108.16918182]
[100.58924103 -123.16918182]
[90.30747223 -135.48440552]
[93.66635132 -151.17190552]
[108.08924103 -158.19755554]
[122.51213074 -151.17190552]
[125.87100983 -135.48440552]
[115.58924103 -123.16918182]
[115.58924103 -108.16918182]
[115.58924103 -93.16918182]
[115.58924103 -78.16918182]
[118.85599518 -71.23685455]
[115.21528625 -62.45969772]
[114.50155640 -47.47668839]
[127.66589355 -40.46486282]
[136.51676941 -28.38300514]
[139.25546265 -13.59582806]
[135.28608704 0.97346419]
[125.34428406 12.42105865]
[111.36149597 18.44127274]
[110.64776611 33.42428207]
[109.93403625 48.40729523]
[109.22031403 63.39030457]
[108.50658417 78.37331390]
[107.79285431 93.35632324]
[110.66402435 101.22377777]
[106.67183685 109.03022003]
[105.24599457 123.96229553]
[103.82015228 138.89437866]
[110.21062469 153.36753845]
[101.29856110 165.30169678]
[99.87271881 180.23377991]
[98.44687653 195.16586304]
[97.02103424 210.09793091]
[109.21105957 219.55346680]
[114.33236694 234.10597229]
[110.75077057 249.11183167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 62]
[7 61]
[8 60]
[9 59]
[11 57]
[12 56]
[13 55]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[25 42]
[26 41]
[27 39]
[28 38]
[29 37]
[30 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
