%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGAAGCGACGGCCCGGAAGGAAGUCGCGUGCUGAGGGGUGUGACGGUUUUCUUGCUCGUGGGCUCGGACGAGUACGGAGCGCCUGCAGGGACAGCCUGGAUAAAGGCUCACUG\
) } def
/len { sequence length } bind def

/coor [
[75.24224091 184.04808044]
[62.82003403 175.64041138]
[55.59354019 162.49591064]
[55.15043259 147.50245667]
[61.58806610 133.95414734]
[73.49171448 124.82771301]
[80.35148621 111.48816681]
[67.93614960 119.90597534]
[55.52081299 128.32377625]
[43.10548019 136.74159241]
[30.69014359 145.15939331]
[27.58926201 160.42445374]
[14.87843132 168.78445435]
[0.34463218 165.73416138]
[-12.07070255 174.15196228]
[-16.49388313 189.57321167]
[-31.36321068 195.59672546]
[-45.27220917 187.60177612]
[-47.55108643 171.72138977]
[-36.45168304 160.13766479]
[-20.48850822 161.73663330]
[-8.07317352 153.31881714]
[-5.52730989 138.68823242]
[6.94369078 129.97451782]
[22.27233696 132.74404907]
[34.68767166 124.32624817]
[47.10300827 115.90844727]
[59.51834106 107.49063873]
[71.93367767 99.07283020]
[95.38372040 86.47586823]
[98.60827637 71.82656097]
[94.01849365 56.68573761]
[104.31089020 45.91931534]
[107.53544617 31.27000618]
[97.40930176 19.66106987]
[96.07611084 4.49281311]
[103.83836365 -8.39948845]
[117.53969574 -14.17975330]
[120.76425171 -28.82906151]
[123.98880768 -43.47837067]
[127.21336365 -58.12767792]
[130.43792725 -72.77698517]
[133.66247559 -87.42629242]
[125.41592407 -100.64114380]
[128.89477539 -115.45169067]
[141.54393005 -123.23207855]
[144.76847839 -137.88137817]
[131.66418457 -130.58224487]
[116.89271545 -133.19064331]
[107.08078003 -144.53639221]
[106.63016510 -159.52961731]
[115.74302673 -171.44413757]
[130.33119202 -174.93492126]
[143.85018921 -168.43592834]
[150.23519897 -154.86254883]
[156.16258240 -168.64175415]
[162.08995056 -182.42094421]
[168.01733398 -196.20013428]
[173.94471741 -209.97932434]
[179.87208557 -223.75852966]
[185.79946899 -237.53771973]
[177.75625610 -250.80746460]
[179.08245850 -266.26776123]
[189.26814270 -277.97381592]
[204.39669800 -281.42437744]
[218.65087891 -275.29269409]
[226.54968262 -261.93646240]
[225.05583191 -246.49145508]
[214.74375916 -234.89660645]
[199.57865906 -231.61033630]
[193.65129089 -217.83114624]
[187.72390747 -204.05195618]
[181.79652405 -190.27275085]
[175.86915588 -176.49356079]
[169.94177246 -162.71437073]
[164.01438904 -148.93518066]
[159.41778564 -134.65682983]
[156.19323730 -120.00752258]
[164.40640259 -107.63498688]
[161.34492493 -92.73256683]
[148.31178284 -84.20173645]
[145.08723450 -69.55242920]
[141.86267090 -54.90312195]
[138.63812256 -40.25381470]
[135.41355896 -25.60450554]
[132.18901062 -10.95519733]
[142.19692993 0.04386987]
[143.82841492 15.00389099]
[136.24946594 28.21043396]
[122.18475342 34.49456406]
[118.96019745 49.14387131]
[123.78061676 63.23687744]
[113.25758362 75.05111694]
[110.03302765 89.70042419]
[113.84986877 104.20668793]
[123.86669159 115.37196350]
[133.88349915 126.53723907]
[143.90031433 137.70251465]
[153.91714478 148.86779785]
[169.70983887 149.47305298]
[180.38752747 161.12475586]
[179.61534119 176.91017151]
[167.85139465 187.46408081]
[152.07502747 186.52503967]
[141.64607239 174.65016174]
[142.75186157 158.88461304]
[132.73504639 147.71932983]
[122.71823120 136.55406189]
[112.70141602 125.38878632]
[102.68459320 114.22351074]
[106.12226105 128.82427979]
[115.47166443 140.55409241]
[118.44910431 155.25561523]
[114.40042877 169.69889832]
[104.21514130 180.71070862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[14 22]
[15 21]
[30 94]
[31 93]
[33 91]
[34 90]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[46 78]
[47 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
