%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUUUCGGCCGUGGGGGAGGGGGCUCGUGUCCCCCCCAACCCAGCCCGGAGGCCGCGUCCGCCCGCGCCCGCUCUGGCCCCCGCGGAGCCGCGCAACUUCCCGGGAGCCCGGGCCAAAGUGAGCGCAAAGUGCUGCCCAAGUUGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[97.76945496 135.92739868]
[82.26712036 131.32568359]
[70.34349060 120.40206909]
[56.48529434 126.14232635]
[42.62710190 131.88256836]
[28.76890755 137.62283325]
[14.91071510 143.36308289]
[5.12195492 155.79251099]
[-9.59744740 153.51469421]
[-23.45564079 159.25494385]
[-37.31383514 164.99519348]
[-41.70144272 170.07690430]
[-47.18050766 171.86276245]
[-51.86529160 170.67318726]
[-65.94886017 175.83584595]
[-80.03243256 180.99850464]
[-94.11600494 186.16116333]
[-108.08987427 191.61378479]
[-121.94806671 197.35403442]
[-131.73683167 209.78346252]
[-146.45622253 207.50564575]
[-160.31442261 213.24589539]
[-174.17260742 218.98616028]
[-188.03080750 224.72640991]
[-201.88899231 230.46665955]
[-215.74719238 236.20690918]
[-225.29565430 249.53953552]
[-241.58760071 247.66757202]
[-247.86329651 232.51673889]
[-237.66680908 219.67291260]
[-221.48744202 222.34870911]
[-207.62925720 216.60845947]
[-193.77105713 210.86820984]
[-179.91285706 205.12796021]
[-166.05467224 199.38771057]
[-152.19647217 193.64746094]
[-143.39895630 181.62860107]
[-127.68831635 183.49584961]
[-113.83012390 177.75559998]
[-111.18908691 173.70748901]
[-105.94847870 171.31051636]
[-99.27866364 172.07759094]
[-85.19509125 166.91493225]
[-71.11151886 161.75227356]
[-57.02795029 156.58961487]
[-43.05408478 151.13699341]
[-29.19589233 145.39674377]
[-15.33769894 139.65649414]
[-6.54017019 127.63764954]
[9.17046356 129.50488281]
[23.02865601 123.76463318]
[36.88684845 118.02438354]
[50.74504089 112.28412628]
[64.60323334 106.54387665]
[66.04792023 88.04135132]
[76.51757050 72.71760559]
[93.22920990 64.64593506]
[93.53921509 49.64913940]
[93.84922028 34.65234375]
[94.15922546 19.65554810]
[85.78856659 9.78839588]
[86.39191437 -2.73482084]
[95.09691620 -11.19104099]
[95.71678925 -26.17822647]
[96.18175507 -41.17102051]
[96.49175262 -56.16781616]
[96.80175781 -71.16461182]
[97.11176300 -86.16140747]
[97.42176819 -101.15820312]
[85.22875977 -110.57291412]
[80.96720886 -125.19113922]
[86.07019806 -139.34823608]
[98.38356018 -147.68605042]
[98.69356537 -162.68284607]
[90.31947327 -176.78273010]
[98.57817078 -190.95051575]
[114.97381592 -190.61158752]
[122.63996887 -176.11462402]
[113.69036102 -162.37284851]
[113.38035583 -147.37605286]
[125.33863831 -138.53651428]
[129.85221863 -124.18062592]
[124.99021912 -109.75099182]
[112.41856384 -100.84819794]
[112.10855865 -85.85140228]
[111.79855347 -70.85460663]
[111.48855591 -55.85781097]
[111.17855072 -40.86101532]
[114.20382690 -34.06568527]
[110.70397186 -25.55835342]
[110.08409882 -10.57116604]
[119.06078339 4.47680998]
[109.15602112 19.96555138]
[108.84601593 34.96234894]
[108.53601074 49.95914459]
[108.22600555 64.95594025]
[117.41756439 68.49790955]
[125.30484009 74.39886475]
[131.29721069 82.21691132]
[134.94592285 91.36661530]
[135.97778320 101.16281891]
[134.31550598 110.87194061]
[147.35725403 118.28227234]
[160.39900208 125.69259644]
[173.44073486 133.10292053]
[186.48248291 140.51324463]
[202.30343628 140.60363770]
[209.54675293 153.61837769]
[222.58850098 161.02870178]
[235.63024902 168.43904114]
[250.69207764 164.46678162]
[263.81271362 172.16767883]
[267.50680542 186.55133057]
[280.54855347 193.96165466]
[293.59030151 201.37197876]
[306.63204956 208.78230286]
[303.02221680 194.22314453]
[309.45864868 180.67425537]
[323.02496338 174.27465820]
[337.57427979 177.92402649]
[346.51422119 189.96881104]
[345.79415894 204.95152283]
[335.74029541 216.08345032]
[320.90695190 218.32049561]
[332.74407959 227.53367615]
[344.58117676 236.74687195]
[356.41827393 245.96006775]
[368.25540161 255.17324829]
[384.46841431 260.13043213]
[384.19317627 277.08215332]
[367.82775879 281.51037598]
[359.04220581 267.01037598]
[347.20507812 257.79718018]
[335.36798096 248.58398438]
[323.53088379 239.37078857]
[311.69375610 230.15759277]
[299.22171021 221.82405090]
[286.17999268 214.41371155]
[273.13824463 207.00338745]
[260.09649658 199.59306335]
[245.84921265 203.78239441]
[232.51745605 196.45304871]
[228.21990967 181.48077393]
[215.17817688 174.07044983]
[202.13642883 166.66012573]
[187.24832153 167.09976196]
[179.07215881 153.55499268]
[166.03041077 146.14466858]
[152.98866272 138.73434448]
[139.94692993 131.32402039]
[126.90518188 123.91368866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[9 48]
[10 47]
[11 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 39]
[19 38]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[57 96]
[58 95]
[59 94]
[60 93]
[63 91]
[64 90]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[73 80]
[74 79]
[102 151]
[103 150]
[104 149]
[105 148]
[106 147]
[108 145]
[109 144]
[110 143]
[113 140]
[114 139]
[115 138]
[116 137]
[124 136]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
