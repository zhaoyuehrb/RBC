%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGACAAUAAAGAUCUGUGUUCAGAGUCAUACUGAAUAGAGACUUCUGGACUCUAUAGAACCCACUGCCUCCUG\
) } def
/len { sequence length } bind def

/coor [
[86.60285187 352.48193359]
[79.23007202 337.83358765]
[88.45449829 324.27474976]
[89.06632996 309.28723145]
[89.67815399 294.29971313]
[90.28998566 279.31219482]
[75.59027863 274.50466919]
[62.80390930 265.77841187]
[52.95103836 253.81991577]
[46.82048798 239.57397461]
[44.90658951 224.16897583]
[47.36932755 208.82757568]
[54.02101135 194.76962280]
[64.34054565 183.11520386]
[77.51424408 174.79534912]
[92.50000000 170.47769165]
[92.50000000 155.47769165]
[92.50000000 140.47769165]
[92.50000000 125.47769165]
[92.50000000 110.47769165]
[91.58257294 95.50577545]
[89.75115967 80.61799622]
[87.91974640 65.73021698]
[86.08833313 50.84244156]
[84.25691986 35.95466614]
[82.42549896 21.06688690]
[80.59408569 6.17910957]
[78.45936584 -8.66821194]
[76.02222443 -23.46889877]
[73.58508301 -38.26958466]
[58.92579651 -42.52024460]
[47.56826019 -52.71677399]
[41.76752853 -66.83464813]
[42.67533112 -82.07073975]
[50.11143112 -95.39992523]
[62.59938049 -104.17568207]
[77.65969086 -106.65557861]
[92.30212402 -102.34722137]
[103.61941528 -92.10604858]
[109.36450195 -77.96543884]
[108.39670563 -62.73303604]
[100.90818024 -49.43323898]
[88.38576508 -40.70672989]
[90.82290649 -25.90604019]
[93.26004791 -11.10535431]
[97.57590485 -4.84220982]
[95.48186493 4.34769487]
[97.31327820 19.23547173]
[99.14469147 34.12324905]
[100.97610474 49.01102829]
[102.80752563 63.89880371]
[104.63893890 78.78658295]
[106.47035217 93.67436218]
[109.42430115 96.63249969]
[110.92485046 100.96085358]
[110.35786438 105.91173553]
[107.50000000 110.47769165]
[107.50000000 125.47769165]
[107.50000000 140.47769165]
[107.50000000 155.47769165]
[107.50000000 170.47769165]
[121.55968475 174.38830566]
[134.09765625 181.83210754]
[144.24519348 192.28588867]
[151.30116272 205.01815796]
[154.78044128 219.14035034]
[154.44726562 233.66876221]
[150.33120728 247.59313965]
[142.72463989 259.94689941]
[132.16206360 269.87423706]
[119.38240814 276.68939209]
[105.27750397 279.92404175]
[104.66567230 294.91156006]
[104.05384064 309.89907837]
[103.44201660 324.88659668]
[111.53057861 339.15219116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 45]
[29 44]
[30 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
