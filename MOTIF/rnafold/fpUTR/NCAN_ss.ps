%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCUGGACCCGGCGCGGAGCUGGCUGAGUCGGAGCGCAGCGUCCUUUGUGCCCGGCGGCCGCCCCGGGAUGCGUCCGAGCUAGGAGCCAGAUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[152.49700928 142.17248535]
[139.83209229 134.13508606]
[127.16717529 126.09767914]
[114.50225830 118.06027985]
[101.83734131 110.02288055]
[93.73182678 108.66461182]
[88.90637970 101.52882385]
[76.50017548 93.09757233]
[56.46662903 92.71349335]
[48.45140076 75.23526001]
[35.54027176 67.59963989]
[19.72327805 67.23460388]
[12.70698547 54.09607315]
[-0.20414461 46.46045303]
[-13.11527538 38.82483292]
[-26.02640533 31.18921089]
[-38.93753433 23.55358887]
[-51.84866714 15.91796875]
[-64.75979614 8.28234768]
[-77.67092896 0.64672607]
[-90.58205414 -6.98889494]
[-104.77153015 -0.99180341]
[-119.59818268 -4.45931339]
[-129.42382812 -15.85758591]
[-130.63908386 -30.67855644]
[-143.55021667 -38.31417847]
[-156.46134949 -45.94979858]
[-169.37248230 -53.58541870]
[-185.18946838 -53.95045853]
[-192.20576477 -67.08898926]
[-205.11689758 -74.72460938]
[-221.51188660 -74.35518646]
[-229.79692078 -88.50757599]
[-221.44908142 -102.62301636]
[-205.05589294 -102.18074799]
[-197.48127747 -87.63574219]
[-184.57014465 -80.00012207]
[-169.67663574 -80.18122864]
[-161.73686218 -66.49655151]
[-148.82572937 -58.86092758]
[-135.91459656 -51.22530746]
[-123.00346375 -43.58968735]
[-109.43029785 -49.66481018]
[-94.70837402 -46.54568863]
[-84.52697754 -35.22347260]
[-82.94643402 -19.90002632]
[-70.03530884 -12.26440430]
[-57.12417603 -4.62878323]
[-44.21304321 3.00683808]
[-31.30191422 10.64245987]
[-18.39078331 18.27807999]
[-5.47965384 25.91370201]
[7.43147659 33.54932404]
[20.34260750 41.18494415]
[35.23611069 41.00383377]
[43.17589188 54.68851089]
[56.08702469 62.32413483]
[65.93355560 58.85881805]
[76.25215912 61.53648376]
[83.46556091 69.68446350]
[84.93142700 80.69136810]
[97.33763123 89.12261963]
[109.87474060 97.35795593]
[122.53966522 105.39536285]
[135.20457458 113.43276215]
[147.86950684 121.47016144]
[160.53442383 129.50756836]
[181.82859802 128.80441284]
[191.19450378 147.08030701]
[204.55961609 153.89016724]
[217.92471313 160.70002747]
[231.28981018 167.50988770]
[244.96086121 173.68260193]
[258.90750122 179.20446777]
[268.22323608 179.47828674]
[273.20104980 185.12504578]
[286.96737671 191.08226013]
[300.73367310 197.03947449]
[315.33401489 190.98922729]
[329.90402222 197.11216736]
[335.79959106 211.77566528]
[329.52294922 226.28012085]
[314.79794312 232.02030945]
[300.36065674 225.59066772]
[294.77645874 210.80580139]
[281.01013184 204.84858704]
[267.24383545 198.89135742]
[253.38563538 193.15110779]
[239.43898010 187.62924194]
[235.93634033 188.81706238]
[231.66180420 188.24951172]
[227.50453186 185.57374573]
[224.47994995 180.87498474]
[211.11485291 174.06512451]
[197.74975586 167.25526428]
[184.38465881 160.44540405]
[176.21095276 164.65319824]
[166.87931824 164.51879883]
[158.58601379 159.94277954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[7 62]
[8 61]
[10 57]
[11 56]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[25 42]
[26 41]
[27 40]
[28 39]
[30 37]
[31 36]
[69 96]
[70 95]
[71 94]
[72 93]
[73 89]
[74 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
