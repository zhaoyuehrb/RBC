%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGAACCCGGAAGUGAGAUGCAAGGCGGCGAUUUUCCCUUCUGUCAGAUCUUGAUGAACAAAGCAGUCAUAAUUCAUCUCUAGAAAGAUUUAUAUCCUGGCAUUUGAAAUGCUUUUUAUUUAGAAUAGUAGUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[107.10865784 175.35945129]
[98.25546265 187.46817017]
[84.64314270 193.76933289]
[69.68244934 192.68411255]
[57.12200165 184.48440552]
[50.10899734 171.22477722]
[50.40064240 156.22760010]
[57.92386246 143.25065613]
[70.79336548 135.54554749]
[80.84323883 124.41001892]
[66.68498993 129.36421204]
[52.52673721 134.31838989]
[38.36848831 139.27258301]
[24.21023750 144.22676086]
[10.05198669 149.18095398]
[-0.41829765 161.04196167]
[-14.98682594 157.94241333]
[-29.14507484 162.89659119]
[-43.30332565 167.85078430]
[-57.46157455 172.80496216]
[-71.50509644 178.07559204]
[-85.42682648 183.65998840]
[-99.34854889 189.24440002]
[-105.32878113 203.87356567]
[-119.93395233 209.91215515]
[-134.49906921 203.77757263]
[-140.38290405 189.10937500]
[-134.09468079 174.60993958]
[-119.36510468 168.88151550]
[-104.93295288 175.32267761]
[-91.01123047 169.73826599]
[-77.08950043 164.15386963]
[-74.39747620 160.11813354]
[-69.10477448 157.77706909]
[-62.41576004 158.64671326]
[-48.25751114 153.69253540]
[-34.09926224 148.73834229]
[-19.94101143 143.78416443]
[-10.48342037 132.27749634]
[5.09780073 135.02270508]
[19.25605011 130.06851196]
[33.41429901 125.11432648]
[47.57255173 120.16014099]
[61.73080063 115.20595551]
[75.88905334 110.25177002]
[75.53084564 95.52296448]
[82.99398041 83.70784760]
[95.06642914 78.32828522]
[95.40299988 63.33206177]
[95.73957062 48.33583832]
[96.07614136 33.33961487]
[96.41271210 18.34339142]
[96.74928284 3.34716749]
[97.08585358 -11.64905548]
[96.41287994 -26.63395119]
[94.73341370 -41.53963470]
[93.05394745 -56.44532013]
[91.37448120 -71.35099792]
[89.69500732 -86.25668335]
[88.01554108 -101.16236877]
[73.39905548 -105.33689117]
[61.49580383 -114.79104614]
[54.12096024 -128.08316040]
[52.39912415 -143.18626404]
[56.59286880 -157.79724121]
[66.06268311 -169.68804932]
[79.36447906 -177.04539490]
[94.46983337 -178.74736023]
[109.07528687 -174.53440857]
[120.95362091 -165.04896545]
[128.29347229 -151.73750305]
[129.97557068 -136.62991333]
[125.74339294 -122.03001404]
[116.24233246 -110.16416931]
[102.92122650 -102.84183502]
[104.60069275 -87.93614960]
[106.28015900 -73.03047180]
[107.95962524 -58.12478638]
[109.63909149 -43.21910095]
[111.31856537 -28.31341934]
[121.88887787 -38.95618439]
[136.88664246 -39.21477890]
[147.81758118 -28.94274139]
[148.49072266 -13.95785332]
[138.52481079 -2.74711037]
[123.56426239 -1.65994632]
[112.08207703 -11.31248474]
[111.74550629 3.68373847]
[111.40893555 18.67996216]
[111.07236481 33.67618561]
[110.73579407 48.67240906]
[110.39922333 63.66863251]
[110.06265259 78.66485596]
[111.99351501 63.78964996]
[122.62590790 53.20890045]
[137.51033020 51.35047531]
[150.41790771 58.99209976]
[155.94702148 72.93587494]
[151.78382874 87.34656525]
[139.67056274 96.19351196]
[124.67523193 95.77398682]
[139.53947449 97.78749084]
[154.40371704 99.80098724]
[169.26797485 101.81448364]
[184.13221741 103.82798767]
[198.99645996 105.84148407]
[215.50386047 101.97600555]
[223.78799438 116.76821899]
[211.86712646 128.82348633]
[196.98297119 120.70573425]
[182.11871338 118.69223022]
[167.25447083 116.67873383]
[152.39022827 114.66523743]
[137.52597046 112.65173340]
[122.66172791 110.63823700]
[114.68125153 123.33909607]
[122.94470215 135.85769653]
[131.20816040 148.37629700]
[139.47161865 160.89489746]
[147.73507690 173.41349792]
[155.99851990 185.93209839]
[164.26197815 198.45069885]
[179.68658447 198.15905762]
[192.80825806 206.27232361]
[199.43992615 220.20159912]
[197.46543884 235.50207520]
[187.51486206 247.29145813]
[172.76336670 251.80776978]
[157.91812134 247.60989380]
[147.71618652 236.03733826]
[145.41294861 220.78288269]
[151.74337769 206.71414185]
[143.47991943 194.19554138]
[135.21647644 181.67695618]
[126.95301819 169.15835571]
[118.68955994 156.63975525]
[110.42610931 144.12115479]
[102.16265106 131.60255432]
[103.41278076 146.55036926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[17 38]
[18 37]
[19 36]
[20 35]
[21 32]
[22 31]
[23 30]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
[116 138]
[117 137]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
