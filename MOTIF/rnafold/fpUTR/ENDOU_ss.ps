%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCUUCCUGAAAGGAUCUGGAGACACCAGCUCCACAAGUCCUGGUGUCUUUAAAAGGAUCAGCUUGAGGAAUAAGGCUCGUCUGAGAGCUGUGACAUUCAUCUGACUCUAGUGAAAGUCCAACAGCCACUCCCUUUUUGGCCUCCAACUGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[95.06607819 245.31599426]
[81.18699646 239.62643433]
[70.18994904 229.42521667]
[63.47576523 216.01179504]
[61.89972305 201.09481812]
[65.66258240 186.57446289]
[74.28501129 174.30035400]
[86.66867065 165.83602905]
[101.23609161 162.25967407]
[116.13162994 164.02687073]
[129.45785522 170.91249084]
[139.51596069 182.03744507]
[137.16944885 167.22210693]
[134.82292175 152.40678406]
[132.47640991 137.59146118]
[130.12989807 122.77613831]
[127.78337860 107.96081543]
[117.26551056 121.49826050]
[101.61381531 126.19503021]
[86.90067291 121.19509888]
[78.29348755 109.23152924]
[63.33972549 110.40841675]
[48.38596344 111.58530426]
[33.43220520 112.76219177]
[18.47844505 113.93907928]
[3.52468514 115.11596680]
[-11.42907524 116.29284668]
[-26.38283539 117.46973419]
[-41.33659363 118.64662170]
[-56.29035568 119.82350922]
[-71.24411774 121.00039673]
[-86.19787598 122.17728424]
[-92.16678619 136.27091980]
[-104.00898743 145.96736145]
[-119.00322723 149.03842163]
[-133.70393372 144.77839661]
[-144.73300171 134.16622925]
[-149.55601501 119.64048767]
[-147.06469727 104.53909302]
[-137.83154297 92.33224487]
[-123.97823334 85.82497406]
[-108.68817902 86.51261139]
[-95.47491455 94.23714447]
[-87.37476349 107.22351837]
[-72.42099762 106.04663849]
[-57.46724319 104.86975098]
[-42.51348114 103.69286346]
[-27.55972099 102.51597595]
[-12.60596180 101.33908844]
[2.34779859 100.16220093]
[17.30155945 98.98531342]
[32.25531769 97.80843353]
[47.20907974 96.63154602]
[62.16283798 95.45465851]
[77.11660004 94.27777100]
[81.44797516 83.36729431]
[90.90155029 75.38288116]
[103.62472534 72.66624451]
[116.73876190 76.43934631]
[112.38449097 62.08524323]
[108.03022003 47.73113632]
[103.67594910 33.37703323]
[92.26583862 22.41711044]
[95.97544098 7.99185181]
[91.62117004 -6.36225367]
[87.26689911 -20.71635818]
[82.91262817 -35.07046509]
[78.55836487 -49.42456818]
[63.85416794 -54.38100815]
[54.89901733 -67.05321503]
[55.13635254 -82.56848145]
[64.47490692 -94.96085358]
[79.32382202 -99.46522522]
[93.97338867 -94.34956360]
[102.79054260 -81.58095551]
[102.38491058 -66.06917572]
[92.91246796 -53.77883911]
[97.26673889 -39.42473221]
[101.62100983 -25.07062912]
[105.97527313 -10.71652317]
[110.32954407 3.63758135]
[121.42821503 13.57080173]
[118.03005981 29.02276230]
[122.38433075 43.37686920]
[126.73860168 57.73097229]
[131.09286499 72.08507538]
[144.58909607 78.63121796]
[158.55731201 73.16416168]
[172.52554321 67.69709778]
[183.65089417 53.05384827]
[200.87480164 56.29859924]
[214.73300171 50.55834961]
[228.59118652 44.81809616]
[242.44938660 39.07784653]
[256.30758667 33.33759308]
[270.05038452 27.32636070]
[283.67254639 21.04646492]
[297.29470825 14.76656914]
[306.58792114 1.96241641]
[321.38540649 3.66059661]
[335.00756836 -2.61929965]
[348.62969971 -8.89919567]
[362.25186157 -15.17909145]
[368.77661133 -21.64735222]
[376.20367432 -21.44562340]
[389.94647217 -27.45685577]
[403.68930054 -33.46809006]
[412.97415161 -46.98561859]
[429.29971313 -45.43388748]
[435.87167358 -30.40918541]
[425.92932129 -17.36763763]
[409.70053101 -19.72526932]
[395.95770264 -13.71403694]
[382.21490479 -7.70280457]
[368.53173828 -1.55694413]
[354.90960693 4.72295189]
[341.28744507 11.00284767]
[327.66531372 17.28274345]
[319.34640503 29.63771629]
[303.57458496 28.38871765]
[289.95245361 34.66861343]
[276.33029175 40.94850922]
[273.85305786 45.08684540]
[268.72534180 47.68517685]
[262.04782104 47.19578552]
[248.18963623 52.93603897]
[234.33145142 58.67628860]
[220.47325134 64.41654205]
[206.61506653 70.15679169]
[201.67622375 81.23474884]
[190.13507080 86.11486816]
[177.99259949 81.66532898]
[164.02436829 87.13238525]
[150.05615234 92.59944153]
[142.59869385 105.61429596]
[144.94522095 120.42961884]
[147.29173279 135.24494934]
[149.63824463 150.06027222]
[151.98477173 164.87559509]
[154.33128357 179.69091797]
[159.65835571 185.11151123]
[161.32731628 191.76084900]
[159.57849121 197.62045288]
[165.58972168 211.36326599]
[171.60095215 225.10607910]
[177.61218262 238.84890747]
[192.41888428 244.37498474]
[198.90516663 258.78692627]
[193.22283936 273.53433228]
[178.74314880 279.86788940]
[164.05661011 274.02996826]
[157.87651062 259.48413086]
[163.86936951 244.86013794]
[157.85813904 231.11732483]
[151.84690857 217.37449646]
[145.83567810 203.63168335]
[143.36163330 218.42623901]
[135.84963989 231.40969849]
[124.25659180 240.92816162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[59 86]
[60 85]
[61 84]
[62 83]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[87 134]
[88 133]
[89 132]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[96 122]
[97 121]
[98 120]
[100 118]
[101 117]
[102 116]
[103 115]
[105 114]
[106 113]
[107 112]
[143 156]
[144 155]
[145 154]
[146 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
