%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAGUCUUCAAGCCUGGAGUUUCUGCUUGGUUUUUCCUGAGGUCUGAGCACCCUGCAAACUGAGUCCAGAUCUGGUAAGUCCCUAAUCUCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[100.73662567 228.39230347]
[96.49787903 243.15470886]
[85.43468475 253.80841064]
[70.52297211 257.48760986]
[55.77392197 253.20260620]
[45.15496063 242.10606384]
[41.52252579 227.18289185]
[45.85372925 212.44735718]
[56.98350143 201.86322021]
[71.91798401 198.27758789]
[76.10285187 183.87318420]
[80.28771210 169.46878052]
[84.47257996 155.06437683]
[88.65744781 140.65997314]
[69.76244354 125.97454071]
[62.76092911 104.51515198]
[68.62548065 84.12641144]
[83.88611603 71.41822815]
[79.70124817 57.01382065]
[75.51638031 42.60941696]
[71.33152008 28.20501137]
[67.14665222 13.80060673]
[55.86644363 2.70702624]
[59.74572754 -11.67353058]
[55.56086349 -26.07793617]
[38.69908524 -34.39544678]
[33.18435287 -52.04097748]
[42.00403214 -67.93009949]
[36.92296219 -82.04331207]
[31.84189224 -96.15652466]
[17.82020569 -102.94107056]
[12.86832714 -117.32625580]
[19.42276573 -130.65197754]
[14.34169579 -144.76519775]
[9.26062679 -158.87840271]
[3.95850444 -172.91006470]
[-1.56336379 -186.85670471]
[-7.08523226 -200.80335999]
[-23.43869972 -212.38154602]
[-20.24371719 -231.34268188]
[-26.63040733 -244.91508484]
[-38.84527206 -256.67236328]
[-30.92889404 -271.66458130]
[-14.33108425 -268.20785522]
[-13.05800152 -251.30177307]
[-6.67131186 -237.72937012]
[3.42036057 -235.06088257]
[10.44960499 -227.04632568]
[11.83582687 -216.25276184]
[6.86141539 -206.32522583]
[12.38328362 -192.37858582]
[17.90515137 -178.43193054]
[23.39277077 -173.27920532]
[23.37383842 -163.95947266]
[28.45490837 -149.84626770]
[33.53597641 -135.73304749]
[47.08039474 -129.64335632]
[52.43436813 -115.40293884]
[45.95510483 -101.23759460]
[51.03617477 -87.12438202]
[56.11724091 -73.01116943]
[67.44629669 -70.43173218]
[76.15709686 -62.56089783]
[79.94552612 -51.32113266]
[77.73188782 -39.54530716]
[69.96527100 -30.26280212]
[74.15013123 -15.85839748]
[85.13101196 -5.79511642]
[81.55105591 9.61573982]
[85.73592377 24.02014542]
[89.92079163 38.42454910]
[94.10565186 52.82895660]
[98.29051971 67.23336029]
[112.50767517 67.64178467]
[125.97415161 74.25449371]
[135.98695374 86.45417023]
[140.25723267 102.45735168]
[137.40434265 119.56529999]
[150.76945496 126.37515259]
[165.72088623 121.25360870]
[179.87767029 128.27932739]
[184.84086609 143.28407288]
[177.66586304 157.36579895]
[162.60948181 162.17005920]
[148.60440063 154.84658813]
[143.95959473 139.74024963]
[130.59449768 132.93038940]
[123.71133423 135.90901184]
[136.95210266 142.95755005]
[139.69697571 157.70426941]
[129.87902832 169.04481506]
[114.89124298 168.43971252]
[106.01947021 156.34460449]
[109.94501495 141.86622620]
[103.06185150 144.84483337]
[98.87698364 159.24923706]
[94.69212341 173.65364075]
[90.50725555 188.05804443]
[86.32238770 202.46244812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[24 67]
[25 66]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[36 52]
[37 51]
[38 50]
[40 46]
[41 45]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
