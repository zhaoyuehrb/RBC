%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACCGGCCGCGCGGGGCCGCUGCGGGCUAUGGGCUUCUCUGAGAGGUUCCUCCCCAGUCCCUAGUGGCCCAGAUCCCGGACACCUGGGCUCCCGCCCAGGAUCCUGCAGGCCCAGGGCGGUCCUGGAGCGGAAAGA\
) } def
/len { sequence length } bind def

/coor [
[85.87335968 512.53479004]
[70.70735168 511.50488281]
[57.09214020 504.74511719]
[47.10393524 493.28631592]
[42.26587296 478.87585449]
[43.31571960 463.71121216]
[50.09337997 450.10488892]
[61.56531525 440.13177490]
[75.98213196 435.31265259]
[76.99842072 420.34713745]
[78.01470184 405.38159180]
[79.03098297 390.41607666]
[70.45145416 375.14855957]
[80.73519135 359.92065430]
[81.41300201 344.93597412]
[82.09081268 329.95129395]
[82.76862335 314.96661377]
[83.44643402 299.98193359]
[84.12424469 284.99725342]
[84.80205536 270.01257324]
[85.47986603 255.02790833]
[86.15767670 240.04322815]
[86.83548737 225.05854797]
[76.63175201 214.26876831]
[77.10568237 199.06251526]
[88.49218750 188.43305969]
[89.16999817 173.44837952]
[89.84780884 158.46371460]
[90.52561951 143.47903442]
[91.20343018 128.49435425]
[72.10745239 110.55052185]
[74.54740143 84.46060181]
[64.12210846 73.67574310]
[53.69681168 62.89087677]
[43.27151871 52.10601425]
[32.84622574 41.32115173]
[22.42093277 30.53629112]
[7.26649427 25.99166870]
[3.98383904 11.46330261]
[-6.44145489 0.67843997]
[-17.45916939 -9.50045872]
[-29.03413582 -19.04090500]
[-40.60910416 -28.58135223]
[-58.80294037 -31.15592384]
[-64.38307953 -47.75613785]
[-76.17070007 -57.03256226]
[-87.95832062 -66.30898285]
[-104.25810242 -68.11155701]
[-110.59823608 -83.23553467]
[-100.45654297 -96.12266541]
[-84.26592255 -93.51576996]
[-78.68190002 -78.09660339]
[-66.89427948 -68.82018280]
[-55.10665894 -59.54375839]
[-43.00820160 -60.65398026]
[-33.10010147 -52.94923401]
[-31.06865692 -40.15631866]
[-19.49369049 -30.61587334]
[-7.91872168 -21.07542610]
[-6.25330544 -35.98268509]
[6.31521177 -44.17001724]
[20.62381935 -39.66848755]
[26.24090004 -25.75991249]
[19.07135201 -12.58426952]
[4.34340763 -9.74685383]
[14.76870155 1.03800857]
[29.17745209 4.81122494]
[33.20579529 20.11099815]
[43.63108826 30.89585876]
[54.05638123 41.68072128]
[64.48167419 52.46558380]
[74.90696716 63.25044632]
[85.33226013 74.03530884]
[90.46861267 71.74295807]
[95.94404602 70.45584869]
[101.56376648 70.21976471]
[107.12786102 71.04311371]
[112.43837738 72.89659882]
[117.30640411 75.71427917]
[121.55875397 79.39592743]
[134.66065979 72.09250641]
[147.76257324 64.78908539]
[152.06141663 52.57002640]
[163.19352722 46.77262878]
[174.89511108 50.04038620]
[188.15872192 43.03492737]
[201.42233276 36.02946472]
[214.68595886 29.02400398]
[227.94956970 22.01854324]
[241.21319580 15.01308250]
[254.47680664 8.00762177]
[262.74258423 -6.15602398]
[279.13806152 -5.80890226]
[286.79696655 8.69189739]
[277.84048462 22.42919540]
[261.48226929 21.27123833]
[248.21864319 28.27669907]
[234.95503235 35.28216171]
[221.69142151 42.28762054]
[208.42779541 49.29308319]
[195.16418457 56.29854202]
[181.90057373 63.30400467]
[173.42622375 78.63014221]
[155.06599426 77.89099121]
[141.96408081 85.19441223]
[128.86218262 92.49783325]
[129.75048828 102.05340576]
[127.55778503 111.39632416]
[122.51116180 119.55902863]
[115.13324738 125.69615936]
[106.18811035 129.17216492]
[105.51029968 144.15684509]
[104.83248901 159.14152527]
[104.15467834 174.12619019]
[103.47686768 189.11087036]
[113.85721588 200.72492981]
[112.95635223 215.91186523]
[101.82015991 225.73635864]
[101.14234924 240.72103882]
[100.46453857 255.70571899]
[99.78672791 270.69039917]
[99.10891724 285.67507935]
[98.43110657 300.65975952]
[97.75329590 315.64443970]
[97.07548523 330.62911987]
[96.39767456 345.61380005]
[95.71986389 360.59844971]
[103.85237122 370.68051147]
[102.92943573 383.19778442]
[93.99651337 391.43234253]
[92.98023224 406.39788818]
[91.96395111 421.36340332]
[90.94766998 436.32894897]
[104.58061981 443.05285645]
[114.59893799 454.48535156]
[119.47489929 468.88302612]
[118.46495056 484.05038452]
[111.72310638 497.67446899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 133]
[10 132]
[11 131]
[12 130]
[14 127]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[26 115]
[27 114]
[28 113]
[29 112]
[30 111]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[39 66]
[40 65]
[41 59]
[42 58]
[43 57]
[45 54]
[46 53]
[47 52]
[80 106]
[81 105]
[82 104]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
