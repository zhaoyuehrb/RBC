%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGUUGGAAGACAUGAAGAUGCUGGAAGACACAGAGAUGCUGGAAGACGUGGAGAUGUUGGAAGACGAGCAGAUGCUGGAAGCCCUGGAGAUGCUGGAAGACCUGGAGAUAUAGGAAGACAUGGAUUUGUUGGAAGACGUAGCUUAGUUGGAAGACAUAUAUUUUCUGGAAGACGUGGAUUUUCUGGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[93.88678741 136.41688538]
[87.94227600 134.90231323]
[80.26676178 147.78977966]
[72.59124756 160.67723083]
[64.91573334 173.56468201]
[71.79595184 189.00857544]
[68.15682220 205.34928894]
[55.62421417 216.19650269]
[39.26175690 217.42926025]
[31.79702759 230.43994141]
[30.23654556 239.45584106]
[24.10342598 243.60021973]
[16.42791176 256.48767090]
[8.75239563 269.37512207]
[9.07110882 285.77117920]
[-5.10683775 294.01242065]
[-19.19638824 285.62094116]
[-18.70342064 269.22921753]
[-4.13505793 261.69961548]
[3.54045773 248.81216431]
[11.21597290 235.92469788]
[18.78634644 222.97520447]
[26.25107765 209.96452332]
[19.67837906 198.33415222]
[19.71493721 184.86679077]
[26.45823860 173.08427429]
[38.23792648 166.12072754]
[52.02827835 165.88916016]
[59.70379639 153.00170898]
[67.37931061 140.11425781]
[75.05482483 127.22680664]
[66.87571716 116.31999969]
[63.21151733 103.18873596]
[64.56166840 89.62284088]
[70.74214935 77.47138214]
[80.91053772 68.39061737]
[93.68086243 63.61828613]
[94.16910553 48.62623596]
[94.65734863 33.63418198]
[95.02355957 18.63865280]
[95.26771545 3.64064050]
[83.65769196 -3.80481243]
[77.29663086 -15.92045593]
[77.75305939 -29.48848724]
[84.80064392 -40.96466827]
[96.50531006 -47.40414429]
[96.99355316 -62.39619446]
[97.48179626 -77.38824463]
[86.95539856 -88.87008667]
[87.66411591 -104.06720734]
[98.67516327 -114.03176117]
[99.16340637 -129.02381897]
[88.63700867 -140.50564575]
[89.34572601 -155.70277405]
[100.35677338 -165.66732788]
[100.84501648 -180.65937805]
[101.33325958 -195.65142822]
[101.82150269 -210.64347839]
[102.30974579 -225.63552856]
[89.37404633 -233.79733276]
[82.30711365 -247.24928284]
[82.91822052 -262.33215332]
[90.94317627 -274.99926758]
[104.14218140 -281.90231323]
[104.63042450 -296.89434814]
[105.11866760 -311.88641357]
[105.60691833 -326.87847900]
[102.21810913 -341.49066162]
[95.18083191 -354.73742676]
[88.14354706 -367.98416138]
[81.10626221 -381.23092651]
[67.34365082 -382.13537598]
[55.91792679 -389.66561890]
[49.75780869 -401.76327515]
[50.37868881 -415.21636963]
[57.51127243 -426.51202393]
[50.69053650 -439.87158203]
[43.86980438 -453.23114014]
[37.04907227 -466.59069824]
[22.29182625 -472.88378906]
[18.15002441 -488.38299561]
[27.80089951 -501.19860840]
[43.84112930 -501.49960327]
[53.96601868 -489.05508423]
[50.40862274 -473.41140747]
[57.22935486 -460.05187988]
[64.05008698 -446.69232178]
[70.87081909 -433.33276367]
[87.15359497 -431.30276489]
[99.14177704 -419.85671997]
[101.97891998 -403.35784912]
[94.35302734 -388.26821899]
[101.39030457 -375.02145386]
[108.42758942 -361.77468872]
[115.46487427 -348.52792358]
[122.95593262 -348.89404297]
[122.22372437 -363.87615967]
[121.49176788 -378.85827637]
[136.47390747 -379.58999634]
[137.20584106 -364.60836792]
[137.93804932 -349.62625122]
[145.42910767 -349.99234009]
[151.14114380 -363.86218262]
[156.85319519 -377.73202515]
[162.56523132 -391.60186768]
[156.25691223 -406.09259033]
[162.12037659 -420.76892090]
[176.67697144 -426.92370605]
[191.29051208 -420.90539551]
[197.29103088 -406.28454590]
[191.11854553 -391.73544312]
[176.43507385 -385.88983154]
[170.72303772 -372.01998901]
[165.01100159 -358.15014648]
[159.29895020 -344.28030396]
[170.96130371 -353.71374512]
[184.93066406 -348.24960327]
[195.63265991 -337.73925781]
[201.34832764 -323.87091064]
[201.15959167 -308.87210083]
[195.09678650 -295.15194702]
[184.13371277 -284.91421509]
[170.03128052 -279.80331421]
[155.05464172 -280.64013672]
[141.60935974 -287.29028320]
[131.85504150 -298.68560791]
[127.35806274 -312.99938965]
[120.59896851 -326.39022827]
[120.11072540 -311.39816284]
[119.62247467 -296.40612793]
[119.13423157 -281.41406250]
[131.85612488 -273.66687012]
[139.03990173 -260.50445557]
[138.66833496 -245.41377258]
[130.74113464 -232.45013428]
[117.30180359 -225.14729309]
[116.81356049 -210.15524292]
[116.32530975 -195.16317749]
[115.83706665 -180.17112732]
[115.34882355 -165.17907715]
[125.68820190 -154.51921082]
[125.40661621 -139.30818176]
[114.15545654 -128.53556824]
[113.66721344 -113.54351807]
[124.00659180 -102.88364410]
[123.72501373 -87.67261505]
[112.47385406 -76.90000153]
[111.98560333 -61.90795135]
[111.49736023 -46.91590118]
[124.76928711 -37.26677322]
[129.72955322 -21.45145988]
[124.23646545 -5.63728094]
[110.26573181 3.88479495]
[110.02157593 18.88280869]
[113.06079102 25.63218689]
[109.64939880 34.12242508]
[109.16115570 49.11447906]
[108.67291260 64.10652924]
[125.91147614 73.69113922]
[135.75732422 90.78184509]
[135.40136719 110.50254822]
[124.94517517 127.22680664]
[132.62069702 140.11425781]
[140.29620361 153.00170898]
[147.97172546 165.88916016]
[155.64723206 178.77662659]
[163.32275391 191.66407776]
[170.99826050 204.55152893]
[178.67378235 217.43898010]
[186.34930420 230.32643127]
[194.02481079 243.21388245]
[201.70033264 256.10134888]
[209.37583923 268.98880005]
[224.75535583 272.62835693]
[232.98553467 286.12057495]
[229.18356323 301.46072388]
[215.60508728 309.54779053]
[200.30598450 305.58386230]
[192.36293030 291.92065430]
[196.48838806 276.66430664]
[188.81288147 263.77685547]
[181.13735962 250.88940430]
[173.46185303 238.00195312]
[165.78633118 225.11450195]
[158.11080933 212.22703552]
[150.43530273 199.33958435]
[142.75978088 186.45213318]
[135.08427429 173.56468201]
[127.40875244 160.67723083]
[119.73323822 147.78977966]
[112.05772400 134.90231323]
[106.11321259 136.41688538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[9 23]
[10 22]
[12 21]
[13 20]
[14 19]
[37 158]
[38 157]
[39 156]
[40 154]
[41 153]
[46 149]
[47 148]
[48 147]
[51 144]
[52 143]
[55 140]
[56 139]
[57 138]
[58 137]
[59 136]
[64 131]
[65 130]
[66 129]
[67 128]
[68 95]
[69 94]
[70 93]
[71 92]
[76 88]
[77 87]
[78 86]
[79 85]
[102 115]
[103 114]
[104 113]
[105 112]
[162 191]
[163 190]
[164 189]
[165 188]
[166 187]
[167 186]
[168 185]
[169 184]
[170 183]
[171 182]
[172 181]
[173 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
