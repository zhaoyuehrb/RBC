%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUGAGCGCGCGCGGUCCCGGGAUCUCCGACGAGGCCCUGGACCCCCGGGCGGCGAAGCUGCGGCGCGGCGCCCCCUGGAGGCCGCGGGACCCCUGGCCGGUCCGCGCAGGCGCAGCGGGGUCGCAGGGCGCGGCGGGUUCCAGCGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[154.27001953 109.93811798]
[156.12725830 124.82269287]
[149.99647522 138.51260376]
[137.65519714 147.03862000]
[122.68164062 147.92875671]
[109.41716003 140.92492676]
[101.70764160 128.05778503]
[101.78766632 113.06035614]
[95.00508881 126.43932343]
[96.43655396 142.77587891]
[82.85102081 151.96093750]
[68.22412109 144.54570007]
[67.60274506 128.15832520]
[81.62612152 119.65673828]
[88.40869904 106.27777863]
[78.70192719 94.84193420]
[64.39873505 99.36062622]
[50.09553909 103.87931824]
[35.79234314 108.39801025]
[21.48914528 112.91670227]
[10.66087341 124.45182800]
[-3.80600309 120.90799713]
[-18.10919952 125.42668915]
[-32.41239548 129.94538879]
[-39.70543289 135.54716492]
[-47.05364227 134.40715027]
[-61.44603729 138.63313293]
[-75.83843231 142.85913086]
[-90.23082733 147.08511353]
[-101.14977264 159.32066345]
[-117.14826965 155.71789551]
[-121.76844788 139.98303223]
[-110.25745392 128.30274963]
[-94.45681000 132.69271851]
[-80.06442261 128.46673584]
[-65.67202759 124.24074554]
[-51.27962875 120.01475525]
[-36.93108749 115.64218903]
[-22.62789154 111.12349701]
[-8.32469559 106.60479736]
[1.48051608 95.39288330]
[16.97045326 98.61351013]
[31.27364922 94.09481812]
[45.57684326 89.57612610]
[59.88003922 85.05743408]
[74.18323517 80.53873444]
[107.06092072 83.84316254]
[118.97673035 74.73198700]
[130.89253235 65.62081146]
[142.80833435 56.50963211]
[149.07128906 41.98083115]
[163.88140869 40.39654922]
[175.79721069 31.28536987]
[176.03686523 17.78245354]
[183.91061401 7.05108690]
[196.34942627 2.89389277]
[208.71997070 6.62221575]
[220.81915283 -2.24400139]
[232.91833496 -11.11021805]
[239.47634888 -25.50823975]
[254.31568909 -26.79009056]
[266.41485596 -35.65630722]
[278.51403809 -44.52252579]
[290.61322021 -53.38874054]
[297.17123413 -67.78676605]
[312.01058960 -69.06861115]
[324.10977173 -77.93482971]
[336.20895386 -86.80104828]
[348.30813599 -95.66726685]
[355.52050781 -114.44886017]
[374.77005005 -115.85784149]
[386.49752808 -125.21018982]
[398.22500610 -134.56253052]
[409.85647583 -144.03401184]
[421.39074707 -153.62364197]
[432.92498779 -163.21327209]
[444.45925903 -172.80288696]
[455.89508057 -182.50965881]
[467.23132324 -192.33258057]
[478.56756592 -202.15548706]
[478.72244263 -213.10716248]
[484.78317261 -221.96450806]
[494.52682495 -225.90983582]
[504.61083984 -223.85235596]
[516.33831787 -233.20469666]
[528.06579590 -242.55705261]
[539.69726562 -252.02853394]
[551.23150635 -261.61816406]
[562.76574707 -271.20776367]
[574.20159912 -280.91455078]
[585.53784180 -290.73745728]
[596.87408447 -300.56036377]
[608.21032715 -310.38327026]
[619.54656982 -320.20620728]
[619.11761475 -335.83789062]
[628.87725830 -348.05603027]
[644.21740723 -351.09155273]
[657.89483643 -343.51123047]
[663.45153809 -328.89419556]
[658.26373291 -314.14221191]
[644.78100586 -306.22070312]
[629.36950684 -308.86996460]
[618.03326416 -299.04702759]
[606.69702148 -289.22412109]
[595.36077881 -279.40121460]
[584.02453613 -269.57830811]
[581.01080322 -262.78027344]
[572.35540771 -259.67352295]
[560.82110596 -250.08389282]
[549.28686523 -240.49427795]
[546.13513184 -233.75910950]
[537.41815186 -230.82957458]
[525.69067383 -221.47723389]
[513.96319580 -212.12487793]
[508.30609131 -193.67147827]
[488.39050293 -190.81924438]
[477.05426025 -180.99632263]
[465.71801758 -171.17341614]
[462.70431519 -164.37538147]
[454.04885864 -161.26863098]
[442.51461792 -151.67900085]
[430.98034668 -142.08938599]
[419.44610596 -132.49975586]
[416.29434204 -125.76460266]
[407.57736206 -122.83506775]
[395.84988403 -113.48271942]
[384.12240601 -104.13037109]
[383.88439941 -93.84134674]
[377.86981201 -85.21991730]
[367.88589478 -81.28206635]
[357.17434692 -83.56808472]
[345.07516479 -74.70186615]
[332.97598267 -65.83564758]
[320.87680054 -56.96943283]
[315.18420410 -43.20558167]
[299.47946167 -41.28955841]
[287.38027954 -32.42334366]
[275.28109741 -23.55712509]
[263.18191528 -14.69090843]
[257.48931885 -0.92705810]
[241.78454590 0.98896325]
[229.68536377 9.85517979]
[217.58618164 18.72139740]
[215.75645447 35.41203308]
[202.17192078 45.84349823]
[184.90838623 43.20117569]
[172.99258423 52.31235504]
[167.58192444 66.18946075]
[151.91952515 68.42543793]
[140.00370789 77.53661346]
[128.08790588 86.64779663]
[116.17210388 95.75897217]
[130.90528870 92.94241333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 15]
[9 14]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[22 40]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[29 34]
[47 152]
[48 151]
[49 150]
[50 149]
[52 147]
[53 146]
[57 143]
[58 142]
[59 141]
[61 139]
[62 138]
[63 137]
[64 136]
[66 134]
[67 133]
[68 132]
[69 131]
[71 127]
[72 126]
[73 125]
[74 123]
[75 122]
[76 121]
[77 120]
[78 118]
[79 117]
[80 116]
[84 114]
[85 113]
[86 112]
[87 110]
[88 109]
[89 108]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
