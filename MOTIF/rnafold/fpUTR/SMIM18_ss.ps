%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGAUACCAUCGCUUCAGCAGCAUCCUCUCAGACAAGAGCCACUAUUUCUGAUUCAGAUCACCUGUCAUCGAAGUUUAAAGAAGGGGAAACAGGAGACAGAAAUACACUGAACCAAAAAGAUUCAAAAGAGCAAGUGGAAUCUCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[117.32972717 362.96759033]
[115.77214050 348.04867554]
[111.92459869 341.68142700]
[114.34066772 332.80364990]
[113.09378815 317.85559082]
[111.84691620 302.90750122]
[103.07843781 290.86743164]
[109.64182281 276.47186279]
[108.39495087 261.52377319]
[107.14807129 246.57568359]
[105.90119934 231.62759399]
[95.12440491 217.81236267]
[103.02617645 201.21290588]
[101.46859741 186.29399109]
[99.91101837 171.37509155]
[98.35343933 156.45617676]
[92.05584717 155.91870117]
[85.85774231 154.68095398]
[79.83674622 152.75845337]
[74.06825256 150.17524719]
[68.62449646 146.96369934]
[63.57366180 143.16401672]
[58.97899246 138.82379150]
[54.89802551 133.99739075]
[51.38187408 128.74523926]
[48.47456741 123.13310242]
[46.21251297 117.23126984]
[31.44645691 119.87013245]
[16.68040085 122.50899506]
[1.91434550 125.14786530]
[-6.91389608 138.25654602]
[-22.44143105 141.20123291]
[-35.45605087 132.23489380]
[-38.23640823 116.67710114]
[-29.13296890 103.75800323]
[-13.54664230 101.14228821]
[-0.72451884 110.38180542]
[14.04153633 107.74294281]
[28.80759239 105.10408020]
[43.57364655 102.46521759]
[45.31208038 85.88469696]
[51.81529999 70.53400421]
[62.51670074 57.75058746]
[76.48390961 48.64823151]
[92.50000000 44.02000046]
[92.50000000 29.01999855]
[92.50000000 14.01999855]
[92.50000000 -0.98000103]
[92.50000000 -15.98000145]
[92.50000000 -30.98000145]
[92.50000000 -45.97999954]
[92.50000000 -60.97999954]
[84.76270294 -74.78017426]
[92.50000000 -87.50744629]
[92.50000000 -102.50744629]
[92.50000000 -117.50744629]
[77.54708862 -127.66734314]
[71.68988800 -144.60475159]
[77.07730865 -161.53330994]
[91.39194489 -171.78800964]
[90.76796722 -186.77502441]
[87.26535797 -195.28288269]
[90.29019165 -202.07965088]
[89.97813416 -217.07640076]
[89.66607666 -232.07315063]
[81.64335632 -245.70938110]
[89.11420441 -258.59484863]
[88.80215454 -273.59161377]
[74.74768829 -279.45608521]
[64.29831696 -290.53445435]
[59.26444244 -304.90734863]
[60.51822662 -320.08456421]
[67.84243774 -333.43655396]
[79.96810913 -342.65002441]
[94.79440308 -346.12866211]
[109.75257111 -343.26977539]
[122.25101471 -334.56872559]
[130.12431335 -321.53295898]
[132.00836182 -306.42102051]
[127.57673645 -291.85116577]
[117.59725189 -280.34771729]
[103.79890442 -273.90365601]
[104.11096191 -258.90692139]
[112.11135864 -246.34336853]
[104.66283417 -232.38520813]
[104.97488403 -217.38845825]
[105.28694153 -202.39170837]
[105.75498962 -187.39900208]
[106.37895966 -172.41198730]
[117.43491364 -167.22485352]
[125.26290131 -157.75714111]
[128.31578064 -145.78303528]
[125.94885254 -133.58088684]
[118.55476379 -123.49982452]
[107.50000000 -117.50744629]
[107.50000000 -102.50744629]
[107.50000000 -87.50744629]
[115.23729706 -74.78017426]
[107.50000000 -60.97999954]
[107.50000000 -45.97999954]
[107.50000000 -30.98000145]
[107.50000000 -15.98000145]
[107.50000000 -0.98000103]
[107.50000000 14.01999855]
[107.50000000 29.01999855]
[107.50000000 44.02000046]
[127.50839233 50.67152023]
[143.68305969 64.19774628]
[153.76979065 82.71358490]
[156.36285400 103.63855743]
[171.07081604 106.58404541]
[185.77877808 109.52952576]
[200.48674011 112.47500610]
[211.13937378 101.31592560]
[226.13934326 97.70977783]
[240.70022583 102.80725861]
[250.17568970 114.98178101]
[251.54214478 130.34851074]
[244.36357117 144.00396729]
[230.93061829 151.59075928]
[215.52969360 150.68795776]
[203.07518005 141.58363342]
[197.54125977 127.18296814]
[182.83329773 124.23748779]
[168.12533569 121.29200745]
[153.41737366 118.34651947]
[147.19641113 131.02433777]
[138.02490234 141.76263428]
[126.47621918 149.89007568]
[113.27234650 154.89859009]
[114.82992554 169.81750488]
[116.38751221 184.73641968]
[117.94509125 199.65533447]
[127.47853088 208.40560913]
[128.43666077 220.90763855]
[120.84928894 230.38072205]
[122.09616089 245.32881165]
[123.34303284 260.27688599]
[124.58991241 275.22497559]
[133.44757080 288.33422852]
[126.79500580 301.66061401]
[128.04188538 316.60870361]
[129.28875732 331.55679321]
[130.69105530 346.49108887]
[132.24864197 361.41000366]
[144.68029785 371.16857910]
[146.48748779 386.86920166]
[136.59803772 399.19699097]
[120.87918854 400.83807373]
[108.65664673 390.81884766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[4 143]
[5 142]
[6 141]
[8 139]
[9 138]
[10 137]
[11 136]
[13 133]
[14 132]
[15 131]
[16 130]
[27 40]
[28 39]
[29 38]
[30 37]
[45 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[54 97]
[55 96]
[56 95]
[60 89]
[61 88]
[63 87]
[64 86]
[65 85]
[67 83]
[68 82]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
