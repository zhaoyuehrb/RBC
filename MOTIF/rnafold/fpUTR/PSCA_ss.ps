%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGAGGCCAUAUAAAGUCACCUGAGGCCCUCUCCACCACAGCCCACCAGUGACCACGAAGGCUGUGCUGCUUGCCCUGUUG\
) } def
/len { sequence length } bind def

/coor [
[82.76498413 132.71147156]
[77.09981537 129.02873230]
[72.19945526 124.37653351]
[68.22753906 118.91022491]
[65.31673431 112.81237793]
[50.48427200 115.04801178]
[35.65180969 117.28364563]
[20.81934738 119.51927948]
[6.03128290 122.03186798]
[-8.70721436 124.82054901]
[-11.12862396 139.78425598]
[-18.52460480 153.01585388]
[-30.00205421 162.91757202]
[-44.17501450 168.29371643]
[-59.33203506 168.49510193]
[-73.64282990 163.49740601]
[-85.37930298 153.90411377]
[-93.12420654 140.87368774]
[-95.94232178 125.97959137]
[-93.49333954 111.02037048]
[-86.07299042 97.80242157]
[-74.57731628 87.92187500]
[-60.39446640 82.57185364]
[-45.23710251 82.39840698]
[-30.93554306 87.42247009]
[-19.21677208 97.03736115]
[-11.49588871 110.08204651]
[3.24260879 107.29337311]
[9.37863445 102.84708405]
[18.58371353 104.68681335]
[33.41617584 102.45117950]
[48.24863815 100.21554565]
[63.08110046 97.97991180]
[73.68044281 74.03143311]
[97.48447418 63.11154556]
[122.55056763 70.69884491]
[133.92013550 60.91453171]
[139.33334351 46.04819870]
[154.02719116 43.61101151]
[165.39677429 33.82670212]
[176.76634216 24.04239082]
[188.13592529 14.25807953]
[199.50549316 4.47376823]
[210.87507629 -5.31054306]
[222.24464417 -15.09485435]
[219.55450439 -27.58847046]
[222.51306152 -39.94608307]
[230.47731018 -49.75330734]
[241.83264160 -55.12220001]
[254.31993103 -55.05455399]
[265.48489380 -49.62688065]
[277.55386353 -58.53418350]
[283.61224365 -73.77321625]
[299.87576294 -75.87796021]
[309.61392212 -62.68324661]
[302.80889893 -47.76265335]
[286.46115112 -46.46521759]
[274.39221191 -37.55791473]
[275.45239258 -20.12887573]
[265.91006470 -5.32202101]
[249.31204224 1.02262866]
[232.02896118 -3.72527838]
[220.65937805 6.05903292]
[209.28981018 15.84334373]
[197.92022705 25.62765503]
[186.55065918 35.41196442]
[175.18107605 45.19627762]
[163.81150818 54.98058701]
[159.21153259 69.14707947]
[143.70445251 72.28410339]
[132.33486938 82.06842041]
[135.05819702 88.25228119]
[136.61067200 94.82847595]
[136.94046021 101.57738495]
[136.03654480 108.27362061]
[133.92912292 114.69353485]
[130.68856812 120.62273407]
[126.42311096 125.86319733]
[121.27519989 130.23989868]
[115.41676331 133.60668945]
[109.04344177 135.85110474]
[102.36810303 136.89820862]
[95.61367798 136.71302795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[9 28]
[10 27]
[36 71]
[37 70]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
