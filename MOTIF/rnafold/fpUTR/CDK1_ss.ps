%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGCCCUUUCCUCUUUCUUUCGCGCUCUAGCCACCCGGGAAGGCCUGCCCAGCGUAGCUGGGCUCUGAUUGGCUGCUUUGAAAGUCUACGGGCUACCCGAUUGGUGAAUCCGGGGCCCUUUAGCGCGGAUCUACCAUACCCAUUGACUAACU\
) } def
/len { sequence length } bind def

/coor [
[99.34672546 695.88153076]
[85.22856903 690.74426270]
[71.94145966 683.73236084]
[59.73293686 674.97650146]
[48.83043289 664.63970947]
[39.43705750 652.91455078]
[31.72780228 640.01959229]
[25.84628487 626.19488525]
[21.90207672 611.69812012]
[19.96865463 596.79925537]
[20.08203697 581.77593994]
[22.24011230 566.90795898]
[26.40267563 552.47235107]
[32.49218369 538.73803711]
[40.39518738 525.96081543]
[49.96446609 514.37884521]
[61.02174377 504.20779419]
[73.36103058 495.63714600]
[86.75245667 488.82659912]
[100.94654846 483.90304565]
[115.67887115 480.95816040]
[114.76735687 465.98587036]
[113.85584259 451.01358032]
[112.94432831 436.04132080]
[112.03282166 421.06903076]
[111.12130737 406.09677124]
[110.20979309 391.12448120]
[109.29827881 376.15219116]
[98.01016235 366.50262451]
[96.87247467 351.33160400]
[107.07035828 339.55700684]
[106.15884399 324.58474731]
[93.52083588 316.74771118]
[87.85389709 302.80679321]
[91.52544403 288.02932739]
[103.33085632 278.13296509]
[102.41934967 263.16067505]
[101.50783539 248.18840027]
[100.59632111 233.21611023]
[99.68480682 218.24383545]
[98.77329254 203.27156067]
[86.13528442 195.43453979]
[80.46834564 181.49360657]
[84.13989258 166.71615601]
[95.94530487 156.81977844]
[95.03379059 141.84748840]
[94.12227631 126.87521362]
[62.60403824 115.33472443]
[55.31297302 70.90230560]
[44.23386383 60.79026413]
[33.15475464 50.67822266]
[22.07564735 40.56618118]
[10.99654007 30.45414162]
[-0.08256713 20.34210014]
[-11.16167450 10.23005962]
[-26.93662643 4.01819944]
[-25.33447075 -12.85987568]
[-8.67247486 -15.99264812]
[-1.04963374 -0.84904772]
[10.02947426 9.26299286]
[21.10858154 19.37503433]
[32.18769073 29.48707581]
[43.26679611 39.59911728]
[54.34590530 49.71115875]
[65.42501068 59.82320023]
[72.45815277 57.21841049]
[67.24857330 43.15212631]
[57.94739532 31.38402939]
[66.26545715 18.90164757]
[80.70728302 22.95550346]
[81.31485748 37.94254684]
[86.52443695 52.00883102]
[93.55757904 49.40404129]
[95.37723541 34.51482010]
[97.19689178 19.62560272]
[99.01654816 4.73638344]
[87.57076263 -5.74090767]
[84.50231934 -20.95157051]
[90.99109650 -35.04679489]
[104.54203033 -42.60668182]
[119.94450378 -40.72429657]
[131.27595520 -30.12345886]
[134.17921448 -14.88040352]
[127.53791046 -0.85639817]
[113.90576935 6.55604124]
[112.08611298 21.44526100]
[110.26645660 36.33448029]
[108.44679260 51.22369766]
[115.24588776 54.38950729]
[128.84407043 60.72112656]
[135.64315796 63.88693619]
[145.86695862 52.91087341]
[156.09075928 41.93481064]
[166.31455994 30.95874596]
[172.68595886 15.24755478]
[189.54693604 17.02067184]
[192.51069641 33.71355820]
[177.29061890 41.18254471]
[167.06681824 52.15860748]
[156.84301758 63.13467026]
[146.61923218 74.11073303]
[146.75119019 96.64081573]
[137.77738953 114.36943054]
[123.69542694 124.33297729]
[109.09455872 125.96369934]
[110.00607300 140.93597412]
[110.91758728 155.90826416]
[123.83634949 164.29943848]
[129.27343750 178.52235413]
[125.33953094 193.04779053]
[113.74557495 202.36004639]
[114.65708923 217.33232117]
[115.56859589 232.30459595]
[116.48011017 247.27688599]
[117.39162445 262.24914551]
[118.30313873 277.22143555]
[131.22190857 285.61260986]
[136.65899658 299.83554077]
[132.72508240 314.36096191]
[121.13112640 323.67321777]
[122.04264069 338.64550781]
[133.59359741 349.09600830]
[134.30471802 364.29302979]
[124.27056122 375.24069214]
[125.18206787 390.21295166]
[126.09358215 405.18524170]
[127.00509644 420.15753174]
[127.91661072 435.12979126]
[128.82812500 450.10208130]
[129.73963928 465.07437134]
[130.65115356 480.04663086]
[145.63191223 481.18258667]
[160.31846619 484.34790039]
[174.43717957 489.48364258]
[187.72503662 496.49407959]
[199.93450928 505.24865723]
[210.83813477 515.58428955]
[220.23277283 527.30834961]
[227.94343567 540.20251465]
[233.82644653 554.02655029]
[237.77221680 568.52294922]
[239.70726013 583.42156982]
[239.59550476 598.44494629]
[237.43902588 613.31311035]
[233.27803040 627.74920654]
[227.19001770 641.48419189]
[219.28839111 654.26220703]
[209.72036743 665.84521484]
[198.66418457 676.01745605]
[186.32582092 684.58947754]
[172.93513489 691.40142822]
[158.74157715 696.32653809]
[144.00958252 699.27301025]
[129.01356506 700.18597412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 131]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[31 121]
[32 120]
[36 116]
[37 115]
[38 114]
[39 113]
[40 112]
[41 111]
[45 107]
[46 106]
[47 105]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[73 88]
[74 87]
[75 86]
[76 85]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
