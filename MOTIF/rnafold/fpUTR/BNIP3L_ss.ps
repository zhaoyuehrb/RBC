%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCAGGGGCAGGGGAGGGACGGCGCAGGCGCAGAAAAGGGGGCGGCGGACUCGGCUUGUUGUGUUGCUGCCUGAGUGCCGGAGACGGUCCUGCUGCUGCCGCAGUCCUGCCAGCUGUCCGACA\
) } def
/len { sequence length } bind def

/coor [
[77.00122070 578.20849609]
[83.04756165 562.36938477]
[83.04756165 547.36938477]
[83.04756165 532.36938477]
[80.28257751 528.35034180]
[80.09051514 522.52868652]
[83.44345856 516.62042236]
[84.19712067 501.63937378]
[84.95079041 486.65832520]
[85.70445251 471.67727661]
[86.45812225 456.69619751]
[87.21178436 441.71514893]
[78.36061859 426.61727905]
[88.33957672 411.20330811]
[88.71652985 396.20806885]
[81.30150604 383.29037476]
[89.38316345 369.68899536]
[89.76011658 354.69372559]
[90.13706970 339.69845581]
[90.51401520 324.70321655]
[90.89096832 309.70794678]
[83.47595215 296.79025269]
[91.55760956 283.18887329]
[91.93455505 268.19360352]
[92.31150818 253.19834900]
[92.50000000 238.19953918]
[92.50000000 223.19953918]
[92.50000000 208.19953918]
[81.81912994 197.88185120]
[81.60544586 182.66972351]
[92.50000000 171.53659058]
[92.50000000 156.53659058]
[92.50000000 141.53659058]
[92.50000000 126.53659058]
[79.55505371 118.50527191]
[72.84956360 104.82645416]
[74.42993164 89.67468262]
[83.81385040 77.67402649]
[78.64420319 63.59301758]
[73.47455597 49.51200867]
[61.45516205 39.22392654]
[64.33206177 24.60979843]
[59.16241837 10.52879047]
[53.99277496 -3.55221725]
[48.82313156 -17.63322449]
[43.65348816 -31.71423340]
[38.48384476 -45.79524231]
[33.31420135 -59.87624741]
[27.96802330 -73.89118195]
[22.44615364 -87.83782959]
[16.92428589 -101.78447723]
[2.03004050 -106.54845428]
[-6.27362823 -119.79923248]
[-4.06598234 -135.28019714]
[7.61059523 -145.68171692]
[23.24278259 -146.09249878]
[35.44953918 -136.31860352]
[38.46720505 -120.97494507]
[30.87093353 -107.30634308]
[36.39280319 -93.35969543]
[41.91466904 -79.41304779]
[47.36314774 -74.29500580]
[47.39521027 -65.04589081]
[52.56485367 -50.96488571]
[57.73449707 -36.88387680]
[62.90414047 -22.80286980]
[68.07378387 -8.72186089]
[73.24343109 5.35914660]
[78.41307068 19.44015503]
[90.06269836 28.72106934]
[87.55556488 44.34236526]
[92.72521210 58.42337418]
[97.89485168 72.50437927]
[102.61290741 72.54798126]
[107.25447083 73.39524078]
[111.68365479 75.02134705]
[115.77079773 77.37871552]
[119.39625549 80.39831543]
[132.44902039 73.00740814]
[145.50177002 65.61649323]
[158.55451965 58.22558594]
[166.40194702 43.82593536]
[182.80055237 43.69272995]
[190.88085938 57.96300125]
[182.33055115 71.95671844]
[165.94543457 71.27834320]
[152.89268494 78.66925049]
[139.83992004 86.06016541]
[126.78717041 93.45107269]
[123.82363129 113.88796234]
[107.50000000 126.53659058]
[107.50000000 141.53659058]
[107.50000000 156.53659058]
[107.50000000 171.53659058]
[118.39455414 182.66972351]
[118.18087006 197.88185120]
[107.50000000 208.19953918]
[107.50000000 223.19953918]
[107.50000000 238.19953918]
[110.65754700 246.89303589]
[107.30677032 253.57530212]
[106.92981720 268.57055664]
[106.55287170 283.56582642]
[113.94092560 297.55609131]
[105.88623047 310.08489990]
[105.50927734 325.08013916]
[105.13233185 340.07540894]
[104.75537872 355.07067871]
[104.37842560 370.06594849]
[111.76648712 384.05618286]
[103.71179199 396.58502197]
[103.33483887 411.58026123]
[111.67675781 421.51330566]
[110.98908997 434.06338501]
[102.19284058 442.46881104]
[101.43917084 457.44985962]
[100.68550873 472.43093872]
[99.93184662 487.41198730]
[99.17817688 502.39303589]
[98.42451477 517.37408447]
[98.04756165 532.36938477]
[98.04756165 547.36938477]
[98.04756165 562.36938477]
[104.09390259 578.20849609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[14 112]
[15 111]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[23 103]
[24 102]
[25 101]
[26 99]
[27 98]
[28 97]
[31 94]
[32 93]
[33 92]
[34 91]
[38 73]
[39 72]
[40 71]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 61]
[50 60]
[51 59]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
