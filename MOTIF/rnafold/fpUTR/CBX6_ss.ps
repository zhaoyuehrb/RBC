%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACGGCCCGCAGCUGGAACGCGAGCGCGCGCCCCGCCGCGCUCCCGCCCGCCGGGGCCUGGGCGCUGCGGCGCGUGCGCGAGCGGUGCCGCACCGGCCGCGGGCGCAGGGAGUAUUAUGGGCUGUGGGUGCCGCUGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[144.68014526 333.08132935]
[142.09321594 318.30609131]
[139.50627136 303.53085327]
[127.99452209 297.64721680]
[121.90302277 286.02343750]
[123.66763306 272.82260132]
[132.86367798 262.92095947]
[130.59744263 248.09313965]
[128.33120728 233.26533508]
[126.06497192 218.43751526]
[123.79874420 203.60969543]
[121.53250885 188.78187561]
[119.26627350 173.95405579]
[117.00003815 159.12623596]
[114.73380280 144.29841614]
[112.46756744 129.47061157]
[97.49402618 130.46044922]
[84.41977692 124.61020660]
[76.02551270 113.85784912]
[73.76744843 101.09719086]
[77.54980469 89.41711426]
[66.54876709 79.22019196]
[55.54772568 69.02327728]
[39.97660446 69.44513702]
[28.96524620 58.94729614]
[28.65902901 44.10001373]
[17.65798950 33.90309525]
[6.65695000 23.70617676]
[-4.34408951 13.50926018]
[-15.34512901 3.31234288]
[-26.34616852 -6.88457441]
[-37.34720993 -17.08149147]
[-48.34824753 -27.27840996]
[-63.72910690 -30.98513412]
[-67.80354309 -45.31161880]
[-78.80458832 -55.50853729]
[-89.80562592 -65.70545197]
[-100.80666351 -75.90237427]
[-116.18752289 -79.60910034]
[-120.26196289 -93.93558502]
[-131.26300049 -104.13249969]
[-142.26403809 -114.32941437]
[-153.26507568 -124.52633667]
[-164.26612854 -134.72325134]
[-175.26716614 -144.92016602]
[-190.83828735 -144.49830627]
[-201.84963989 -154.99615479]
[-202.15585327 -169.84342957]
[-213.15690613 -180.04034424]
[-224.15794373 -190.23727417]
[-235.15898132 -200.43418884]
[-251.26026917 -203.54553223]
[-256.35995483 -219.13159180]
[-245.21189880 -231.15876770]
[-229.28427124 -227.25453186]
[-224.96206665 -211.43522644]
[-213.96101379 -201.23831177]
[-202.95997620 -191.04139709]
[-191.95893860 -180.84446716]
[-177.13113403 -181.66395569]
[-165.82925415 -171.47953796]
[-165.07025146 -155.92120361]
[-154.06919861 -145.72428894]
[-143.06816101 -135.52737427]
[-132.06712341 -125.33045959]
[-121.06608582 -115.13353729]
[-110.06504822 -104.93662262]
[-95.47105408 -101.95925140]
[-90.60974884 -86.90341187]
[-79.60871124 -76.70649719]
[-68.60766602 -66.50957489]
[-57.60662842 -56.31266022]
[-43.01263809 -53.33528519]
[-38.15133286 -38.27944946]
[-27.15029144 -28.08253098]
[-16.14925194 -17.88561440]
[-5.14821196 -7.68869686]
[5.85282755 2.50822043]
[16.85386658 12.70513821]
[27.85490799 22.90205574]
[38.85594559 33.09897232]
[53.68376160 32.27949524]
[64.98564148 42.46390533]
[65.74464417 58.02223587]
[76.74568176 68.21915436]
[87.74672699 78.41606903]
[111.82836151 74.17007446]
[131.38912964 93.78074646]
[144.93373108 87.33530426]
[158.47833252 80.88986206]
[164.94142151 74.32799530]
[172.38691711 74.45506287]
[186.06797791 68.30457306]
[192.67170715 61.88426590]
[200.11270142 62.17261124]
[213.92379761 56.31995773]
[227.73489380 50.46730042]
[237.17471313 37.05753326]
[253.48135376 38.79706955]
[259.87991333 53.89641571]
[249.78813171 66.82266235]
[233.58755493 64.27839661]
[219.77645874 70.13105011]
[205.96536255 75.98371124]
[192.21847534 81.98563385]
[178.53741455 88.13613129]
[164.92378235 94.43446350]
[151.37918091 100.87990570]
[137.83457947 107.32534790]
[152.81118774 108.16256714]
[167.23507690 104.04537201]
[181.96733093 106.86686707]
[193.84930420 116.02213287]
[200.33345032 129.54824829]
[200.02958679 144.54516602]
[193.00282288 157.79751587]
[180.75975037 166.46394348]
[165.92530823 168.68635559]
[151.68002319 163.98825073]
[141.07815552 153.37692261]
[136.39302063 139.13050842]
[127.29537964 127.20436859]
[129.56161499 142.03218079]
[131.82785034 156.86000061]
[134.09408569 171.68782043]
[136.36032104 186.51564026]
[138.62655640 201.34346008]
[140.89279175 216.17127991]
[143.15902710 230.99909973]
[145.42526245 245.82690430]
[147.69149780 260.65472412]
[161.95838928 270.71630859]
[164.52081299 287.64462280]
[154.28150940 300.94390869]
[156.86845398 315.71914673]
[159.45539856 330.49441528]
[173.71722412 336.37689209]
[182.51597595 349.04913330]
[183.04399109 364.46743774]
[175.13278198 377.71191406]
[161.30679321 384.55630493]
[145.97784424 382.81655884]
[134.03733826 373.04782104]
[129.29545593 358.36730957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[7 131]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[21 86]
[22 85]
[23 84]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[35 72]
[36 71]
[37 70]
[38 69]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[48 59]
[49 58]
[50 57]
[51 56]
[88 109]
[89 108]
[90 107]
[92 106]
[93 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
