%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCGCUCCCCAAGUCUCUCUCGUGCGCAGAGCCCAGGCUGCGCUUCCCUGGUCAGGCACGGCACGUCUGGCCGGCCGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[95.56168365 123.45704651]
[82.66597748 116.41533661]
[76.33624268 103.15564728]
[61.59774399 100.36697388]
[46.85924530 97.57830048]
[32.12074661 94.78962708]
[38.20309067 108.50112152]
[33.13020706 122.61727905]
[19.71141624 129.32070923]
[5.37790346 124.89912415]
[-1.93257296 111.80114746]
[1.82845497 97.28031158]
[14.57744980 89.37823486]
[0.82901615 83.37985229]
[-12.91941738 77.38146973]
[-26.66785240 71.38309479]
[-40.41628647 65.38471222]
[-56.44466019 72.09066010]
[-72.10559082 65.37473297]
[-78.05781555 49.76533890]
[-92.02091980 44.28522491]
[-105.98403168 38.80510712]
[-119.62984467 46.44224167]
[-134.98245239 43.47049713]
[-144.79283142 31.29303932]
[-144.42881775 15.65969372]
[-134.06228638 3.95204663]
[-118.58799744 1.69809175]
[-105.31243134 9.96207714]
[-100.50391388 24.84200287]
[-86.54080963 30.32211685]
[-72.57769775 35.80223465]
[-61.46565628 29.00259972]
[-48.27512360 29.93541908]
[-37.92813110 38.48086548]
[-34.41790390 51.63627625]
[-20.66947174 57.63465881]
[-6.92103720 63.63303757]
[6.82739639 69.63141632]
[20.57583046 75.62979889]
[34.90942383 80.05112457]
[49.64791870 82.83979797]
[64.38641357 85.62847137]
[79.12491608 88.41715240]
[89.86141205 78.38656616]
[104.43831635 76.54295349]
[117.33402252 83.58466339]
[123.66375732 96.84435272]
[138.40225220 99.63302612]
[153.14074707 102.42169952]
[167.87925720 105.21037292]
[182.61775208 107.99904633]
[197.35624695 110.78772736]
[204.09956360 108.85546112]
[209.85375977 110.54607391]
[213.07377625 114.37514496]
[227.56266785 118.25743103]
[242.05154419 122.13971710]
[251.40473938 121.34220123]
[257.00436401 126.44754791]
[271.33795166 130.86888123]
[285.67153931 135.29020691]
[300.00512695 139.71153259]
[313.04205322 131.07600403]
[328.57382202 132.89213562]
[339.26678467 144.30241394]
[340.07208252 159.91925049]
[330.60943604 172.36885071]
[315.34686279 175.77288818]
[301.49084473 168.52409363]
[295.58380127 154.04512024]
[281.25021362 149.62379456]
[266.91662598 145.20246887]
[252.58302307 140.78114319]
[238.16926575 136.62860107]
[223.68037415 132.74632263]
[209.19149780 128.86402893]
[194.56756592 125.52622223]
[179.82907104 122.73754883]
[165.09057617 119.94887543]
[150.35208130 117.16020203]
[135.61358643 114.37152863]
[120.87508392 111.58284760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[5 42]
[6 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[20 32]
[21 31]
[22 30]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[56 77]
[57 76]
[58 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
