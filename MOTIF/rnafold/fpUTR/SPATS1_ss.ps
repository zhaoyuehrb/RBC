%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUGGGAGAAGCAGGCGGCUGCGGUGUCCCUUUUGCCCUAGGCUCUCGGUUCUCAGGCCUCGGCGUGCGGCGUGCGUUCGGCAGUUCAGUUGCCAGUUG\
) } def
/len { sequence length } bind def

/coor [
[13.93736839 393.65505981]
[8.51874352 407.64215088]
[3.10011864 421.62924194]
[8.23881054 436.82705688]
[-0.56023073 450.24182129]
[-16.54713249 451.58291626]
[-27.45811272 439.82153320]
[-24.92320251 423.98001099]
[-10.88696480 416.21060181]
[-5.46833992 402.22354126]
[-0.04971484 388.23645020]
[4.93560696 374.08914185]
[9.48289680 359.79501343]
[14.03018761 345.50088501]
[10.51529503 331.02694702]
[22.07205391 320.22174072]
[26.61934280 305.92761230]
[31.16663361 291.63348389]
[35.71392441 277.33935547]
[40.26121521 263.04522705]
[44.80850220 248.75109863]
[49.35579300 234.45697021]
[53.90308380 220.16284180]
[44.94010925 208.29679871]
[44.67993546 193.25032043]
[53.43188095 180.79011536]
[68.01113892 175.81503296]
[72.55842590 161.52090454]
[77.10572052 147.22677612]
[81.65300751 132.93264771]
[69.22944641 121.77943420]
[62.84101105 106.35455322]
[63.74069214 89.68333435]
[71.75202942 75.03556061]
[85.30374146 65.28414154]
[101.73787689 62.34165955]
[105.39658356 47.79470444]
[109.05529022 33.24774933]
[112.71398926 18.70079613]
[108.57643127 3.43019700]
[119.18440247 -7.02543879]
[122.84310913 -21.57239342]
[118.70555115 -36.84299088]
[129.31350708 -47.29862595]
[132.97221375 -61.84558105]
[136.63092041 -76.39253235]
[128.38584900 -87.17399597]
[127.91925049 -100.54300690]
[135.17723083 -111.54635620]
[147.28575134 -116.23844910]
[151.39068604 -130.66583252]
[155.49563599 -145.09321594]
[159.60058594 -159.52059937]
[155.07803345 -175.28381348]
[166.66122437 -186.89251709]
[182.43434143 -182.40467834]
[186.17137146 -166.43699646]
[174.02796936 -155.41566467]
[169.92301941 -140.98828125]
[165.81806946 -126.56089020]
[161.71313477 -112.13350677]
[170.51963806 -97.89848328]
[166.30453491 -81.35263062]
[151.17788696 -72.73382568]
[147.51918030 -58.18687439]
[143.86047363 -43.63991928]
[148.25971985 -29.40981865]
[137.39006042 -17.91368675]
[133.73135376 -3.36673284]
[138.13061523 10.86336994]
[127.26094818 22.35950089]
[123.60224152 36.90645599]
[119.94353485 51.45341110]
[116.28482819 66.00036621]
[126.96456909 73.65454865]
[134.36866760 84.50917053]
[137.59767151 97.24561310]
[136.25930786 110.31666565]
[130.51617432 122.13444519]
[121.06595612 131.26333618]
[109.05664825 136.59437561]
[95.94713593 137.47993469]
[91.39984894 151.77406311]
[86.85256195 166.06819153]
[82.30526733 180.36231995]
[91.33033752 192.84648132]
[91.27446747 208.07310486]
[82.36865997 220.20367432]
[68.19721222 224.71012878]
[63.64992523 239.00425720]
[59.10263443 253.29840088]
[54.55534363 267.59252930]
[50.00805283 281.88665771]
[45.46076202 296.18078613]
[40.91347504 310.47491455]
[36.36618423 324.76904297]
[39.55582047 340.26538086]
[28.32431793 350.04815674]
[23.77702713 364.34228516]
[19.22973633 378.63641357]
[20.31450653 385.44570923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[12 100]
[13 99]
[14 98]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[27 85]
[28 84]
[29 83]
[30 82]
[36 74]
[37 73]
[38 72]
[39 71]
[41 69]
[42 68]
[44 66]
[45 65]
[46 64]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
