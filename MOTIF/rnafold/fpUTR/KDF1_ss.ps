%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGAGCGGCGAGGGGGCGGGGGAGGGGCUGAGCCGGAGGCGGCUCACCUGGCGGGACAGGUGCCUGGCUGCUACAAACCAUGCAAUGAGCC\
) } def
/len { sequence length } bind def

/coor [
[175.91537476 306.37390137]
[186.95416260 295.92337036]
[181.56304932 281.92565918]
[175.70719910 268.11590576]
[169.39318848 254.50955200]
[162.85269165 241.01058960]
[156.08753967 227.62281799]
[149.32238770 214.23503113]
[142.55723572 200.84724426]
[135.79208374 187.45945740]
[129.02693176 174.07168579]
[116.38111115 166.20195007]
[117.06278229 150.39543152]
[110.29763031 137.00765991]
[103.53247833 123.61987305]
[77.87119293 120.70213318]
[64.12274933 92.16345978]
[49.13112640 91.66223145]
[34.13950348 91.16101074]
[25.45462227 103.91155243]
[11.24605179 109.92155457]
[-3.95230269 107.27323914]
[-15.29070282 96.81167603]
[-19.15110588 81.87512207]
[-14.30167103 67.22975922]
[-2.28983617 57.54888153]
[13.05146694 55.92162323]
[26.82688332 62.86722946]
[34.64072800 76.16938782]
[49.63235092 76.67060852]
[64.62397766 77.17183685]
[72.48281097 64.39534760]
[65.27408600 51.24109650]
[58.06536102 38.08684921]
[50.85663605 24.93260002]
[43.64790726 11.77835083]
[36.43918228 -1.37589812]
[22.15002441 -9.42275906]
[22.24481773 -25.82163239]
[36.62604904 -33.70276260]
[50.49953842 -24.95871925]
[49.59343338 -8.58462429]
[56.80215836 4.56962442]
[64.01088715 17.72387314]
[71.21961212 30.87812233]
[78.42833710 44.03237152]
[85.63706207 57.18661880]
[100.62868500 57.68784332]
[108.69992065 45.04446030]
[116.77115631 32.40107727]
[124.84239197 19.75769234]
[132.91363525 7.11430836]
[129.26296997 -8.26256466]
[137.62565613 -21.67304230]
[153.04026794 -25.16092682]
[166.36158752 -16.65691757]
[169.68629456 -1.20629287]
[161.04193115 12.02436638]
[145.55700684 15.18554401]
[137.48577881 27.82892799]
[129.41453552 40.47231293]
[121.34330750 53.11569595]
[113.27207184 65.75907898]
[129.64480591 93.71923065]
[116.92025757 116.85472107]
[123.68540955 130.24250793]
[130.45056152 143.63027954]
[143.58026123 152.45759583]
[142.41470337 167.30653381]
[149.17985535 180.69430542]
[155.94500732 194.08209229]
[162.71015930 207.46987915]
[169.47531128 220.85766602]
[176.24046326 234.24543762]
[183.04072571 240.65132141]
[182.99954224 248.19552612]
[189.31356812 261.80187988]
[194.75392151 266.11477661]
[196.73941040 271.71426392]
[195.56076050 276.53454590]
[200.95187378 290.53225708]
[216.14886475 290.87826538]
[230.05464172 297.01812744]
[240.54864502 308.01559448]
[246.03063965 322.19360352]
[245.66464233 337.39013672]
[239.50646973 351.28781128]
[228.49522400 361.76736450]
[214.30999756 367.23068237]
[199.11396790 366.84469604]
[185.22439575 360.66827393]
[174.75935364 349.64321899]
[169.31469727 335.45083618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 77]
[5 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[13 67]
[14 66]
[15 65]
[17 31]
[18 30]
[19 29]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
