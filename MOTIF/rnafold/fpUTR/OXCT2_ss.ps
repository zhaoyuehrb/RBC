%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGCGCGGGCGCCCGCCCUGCUCUGUGACGCGCGGCCCGAGGCGCACGCAGGGCUCACACCACCUGUCCUGGCCUCCGACCCGGGCCGACU\
) } def
/len { sequence length } bind def

/coor [
[-35.89682007 193.12094116]
[-47.97286987 202.01864624]
[-60.04891968 210.91633606]
[-72.12496948 219.81404114]
[-84.20101929 228.71173096]
[-96.27707672 237.60942078]
[-108.35312653 246.50712585]
[-113.53868866 254.27815247]
[-120.98465729 255.49235535]
[-133.35128784 263.98156738]
[-145.71791077 272.47076416]
[-158.08453369 280.95999146]
[-164.66069031 295.98281860]
[-180.98669434 297.52996826]
[-190.26774597 284.00982666]
[-182.95629883 269.33078003]
[-166.57373047 268.59335327]
[-154.20710754 260.10415649]
[-141.84048462 251.61494446]
[-129.47386169 243.12573242]
[-117.25081635 234.43107605]
[-105.17476654 225.53337097]
[-93.09871674 216.63568115]
[-81.02266693 207.73797607]
[-68.94661713 198.84028625]
[-56.87056732 189.94259644]
[-44.79451370 181.04489136]
[-47.77849197 169.31147766]
[-46.53950119 157.23286438]
[-41.20481491 146.28649902]
[-32.40417480 137.81970215]
[-21.19554138 132.88381958]
[-8.93794060 132.10371399]
[2.87330747 135.59873962]
[12.78900433 142.96527100]
[25.69502831 135.32101440]
[38.60105133 127.67676544]
[51.50707626 120.03251648]
[64.41310120 112.38826752]
[77.31912231 104.74401855]
[90.22514343 97.09976959]
[95.12381744 90.47672272]
[103.69262695 89.42401886]
[116.84687042 82.21528625]
[129.87882996 74.78776550]
[142.78485107 67.14351654]
[142.40013123 50.71002960]
[150.25830078 36.37818909]
[164.16127014 27.96260262]
[180.31666565 27.64967155]
[194.37203979 35.43029022]
[207.01542664 27.35905457]
[219.65881348 19.28781891]
[232.30220032 11.21658421]
[244.94558716 3.14534855]
[257.58895874 -4.92588663]
[256.22848511 -20.17081070]
[262.11920166 -34.29730606]
[273.90750122 -44.05920792]
[288.88449097 -47.21330643]
[303.60858154 -43.03480911]
[314.69628906 -32.48390198]
[319.59970093 -17.98511314]
[317.19210815 -2.87015224]
[308.02673340 9.38767147]
[294.20968628 15.97159958]
[278.91604614 15.36869335]
[265.66018677 7.71749735]
[253.01681519 15.78873253]
[240.37342834 23.85996819]
[227.73004150 31.93120384]
[215.08666992 40.00243759]
[202.44328308 48.07367325]
[203.94172668 61.75659943]
[199.33546448 74.79834747]
[189.48155212 84.59892273]
[176.28923035 89.17800140]
[162.35009766 87.57492065]
[150.42910767 80.04953766]
[137.52308655 87.69378662]
[133.28741455 93.93685913]
[124.05560303 95.36953735]
[110.90135193 102.57826233]
[97.86939240 110.00579071]
[84.96337128 117.65003967]
[72.05735016 125.29428864]
[59.15132523 132.93853760]
[46.24530029 140.58279419]
[33.33927917 148.22703552]
[20.43325424 155.87129211]
[21.37690353 174.07109070]
[13.15931511 190.24449158]
[-1.95781648 200.12266541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[9 20]
[10 19]
[11 18]
[12 17]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[41 84]
[43 83]
[44 82]
[45 80]
[46 79]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
