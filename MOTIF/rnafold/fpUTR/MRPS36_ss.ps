%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGCACCGCCCACAGCUGCCCGGGACUCCAGUGAUCGCCGCGGCUCGCUCGCGCCCCGGAAACUGCCCCUUCUCGGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[94.46488953 123.18636322]
[86.56840515 135.93962097]
[78.67192078 148.69288635]
[84.66818237 163.00456238]
[81.07430267 178.09971619]
[69.27220154 188.17395020]
[53.80002213 189.35348511]
[40.60713577 181.18479919]
[34.76647949 166.80891418]
[38.52390289 151.75363159]
[50.43460083 141.80802917]
[65.91866302 140.79640198]
[73.81514740 128.04313660]
[81.71163177 115.28988647]
[76.87068939 105.76889038]
[76.67331696 95.08970642]
[81.15913391 85.39633942]
[72.79679108 72.94358063]
[64.43444824 60.49082184]
[47.77655029 52.91096497]
[47.00332642 35.48312378]
[38.18654633 23.34786987]
[29.36976814 11.21261501]
[20.33024788 -0.75764292]
[11.07107449 -12.55881691]
[1.81190121 -24.35999107]
[-7.66376400 -35.98805237]
[-17.35268402 -47.43902588]
[-25.48703957 -52.11420441]
[-27.17854881 -59.49683380]
[-36.43772125 -71.29800415]
[-51.84870911 -76.90457153]
[-54.43192291 -93.09898376]
[-41.52997589 -103.22182465]
[-26.41528511 -96.85957336]
[-24.63654900 -80.55718231]
[-15.37737560 -68.75600433]
[-5.90171051 -57.12794495]
[3.78721046 -45.67697144]
[10.67634296 -42.52986908]
[13.61307526 -33.61916351]
[22.87224770 -21.81799126]
[32.13142014 -10.01681614]
[38.89955902 -6.61729765]
[41.50502396 2.39583659]
[50.32180023 14.53109169]
[59.13858032 26.66634560]
[71.17330933 28.93733597]
[78.59210205 39.18498611]
[76.88721466 52.12847900]
[85.24954987 64.58123779]
[93.61189270 77.03399658]
[114.71460724 81.24565887]
[123.82639313 100.74022675]
[137.91122437 105.89945984]
[147.29330444 105.93889618]
[152.41523743 111.51834106]
[166.29980469 117.19451141]
[180.18437195 122.87067413]
[194.06892395 128.54684448]
[207.95349121 134.22300720]
[221.94058228 139.64163208]
[236.02540588 144.80087280]
[250.11022949 149.96009827]
[262.91668701 141.19802856]
[278.42657471 141.67045593]
[290.67599487 151.19575500]
[294.95483398 166.11122131]
[289.61773682 180.68157959]
[276.71697998 189.30421448]
[261.21313477 188.66354370]
[249.06776428 179.00593567]
[244.95098877 164.04492188]
[230.86616516 158.88569641]
[216.78134155 153.72645569]
[209.23735046 154.39909363]
[202.27732849 148.10757446]
[188.39276123 142.43141174]
[174.50819397 136.75523376]
[160.62364197 131.07907104]
[146.73907471 125.40290833]
[132.75198364 119.98428345]
[118.66716003 114.82505035]
[111.87830353 120.66763306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[17 52]
[18 51]
[19 50]
[21 47]
[22 46]
[23 45]
[24 43]
[25 42]
[26 41]
[27 39]
[28 38]
[30 37]
[31 36]
[54 83]
[55 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
