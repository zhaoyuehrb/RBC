%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGCGCCGGGUAGAGGGAGACAGAGUCGCACGGCUGAGACGCCAGGCAGUCGCCUAGCAACAGCGGGACGCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[73.28099060 246.59852600]
[74.90837860 231.04585266]
[86.18796539 220.21510315]
[85.01107788 205.26135254]
[83.83419037 190.30758667]
[82.65730286 175.35383606]
[81.48041534 160.40007019]
[80.01016235 145.47230530]
[78.24710083 130.57627869]
[79.18852234 145.54670715]
[73.31955719 159.35087585]
[61.88550186 169.05975342]
[47.31249237 172.61326599]
[32.69270325 169.25741577]
[21.12823296 159.70423889]
[15.07288551 145.98080444]
[15.81151390 130.99899292]
[23.18739319 117.93774414]
[35.63547134 109.56843567]
[50.51445770 107.66691589]
[64.66709137 112.63655853]
[50.80889893 106.89630890]
[36.95070267 101.15605164]
[20.00341988 100.68077087]
[15.76865482 84.26422119]
[30.37133980 75.65039825]
[42.69095612 87.29785919]
[56.54914856 93.03810883]
[70.40734100 98.77836609]
[73.51922607 89.48744965]
[79.32935333 82.06858826]
[86.97232056 77.22510529]
[95.43172455 75.30807495]
[103.67204285 76.29853058]
[110.76451111 79.83589172]
[121.77935028 69.65388489]
[132.79418945 59.47187042]
[143.80902100 49.28985977]
[141.93815613 37.22951889]
[146.19929504 25.92280769]
[155.37803650 18.25298119]
[167.02282715 16.11274719]
[178.09906006 19.93826294]
[189.87881470 10.65185452]
[195.92620850 -3.96798182]
[210.71125793 -5.77112579]
[222.49101257 -15.05753517]
[234.27076721 -24.34394455]
[246.05052185 -33.63035202]
[251.62147522 -49.05424881]
[267.80987549 -51.67486191]
[277.96249390 -38.79633713]
[271.63516235 -23.66699028]
[255.33692932 -21.85059929]
[243.55717468 -12.56418991]
[231.77742004 -3.27778125]
[219.99766541 6.00862789]
[214.79284668 19.96423721]
[199.16522217 22.43160820]
[187.38546753 31.71801758]
[186.52136230 49.80454254]
[172.65203857 61.92512131]
[153.99102783 60.30469894]
[142.97619629 70.48670959]
[131.96136475 80.66871643]
[120.94651794 90.85073090]
[120.12999725 116.82852936]
[93.14312744 128.81321716]
[94.90618896 143.70924377]
[99.12031555 152.12086487]
[96.43417358 159.22319031]
[97.61106110 174.17694092]
[98.78794861 189.13070679]
[99.96483612 204.08445740]
[101.14172363 219.03822327]
[113.97673798 227.97109985]
[118.01706696 243.07771301]
[111.35498047 257.22518921]
[97.13612366 263.73348999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 69]
[9 68]
[21 29]
[22 28]
[23 27]
[35 66]
[36 65]
[37 64]
[38 63]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
