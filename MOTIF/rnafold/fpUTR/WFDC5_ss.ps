%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCUCUCCUGACUAAGUUUCUCUGGCUUCCCUGAGGCUGCAGGUGUUAAUCUGGGGGGCCCUGGGCCCUGAGCCGGCAGCAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[174.62144470 196.83818054]
[169.53372192 210.94900513]
[161.78919983 223.79510498]
[151.68589783 234.88218689]
[139.61257935 243.78359985]
[126.03385162 250.15681458]
[111.47219849 253.75660706]
[96.48798370 254.44444275]
[81.65778351 252.19384766]
[67.55226898 247.09144592]
[54.71423340 239.33355713]
[43.63768005 229.21871948]
[34.74883652 217.13615417]
[28.38975143 203.55078125]
[24.80512047 188.98539734]
[24.13288498 174.00047302]
[26.39890862 159.17262268]
[31.51599503 145.07243347]
[39.28723907 132.24247742]
[49.41360092 121.17646027]
[61.50541687 112.30019379]
[75.09738922 105.95525360]
[89.66524506 102.38596344]
[76.94452667 94.43717957]
[64.22380066 86.48838806]
[48.42044830 85.73701477]
[41.72725296 72.43098450]
[29.00653076 64.48219299]
[12.60741425 64.45094299]
[4.67062140 50.10035324]
[13.36084557 36.19308853]
[29.73832893 37.03574753]
[36.95532227 51.76147461]
[49.67604065 59.71026230]
[64.56952667 59.89308548]
[72.17259216 73.76766968]
[84.89331055 81.71645355]
[97.61403656 89.66524506]
[112.59347534 90.45028687]
[126.07538605 83.87471771]
[139.55729675 77.29914856]
[153.03921509 70.72357941]
[166.52111816 64.14801788]
[175.53282166 51.14417648]
[190.36383057 52.51914978]
[203.84573364 45.94358063]
[217.32765198 39.36801529]
[216.80354309 31.25166512]
[218.42321777 23.30411148]
[222.06166077 16.08006287]
[227.45338440 10.08059025]
[234.21174622 5.71837091]
[241.85668945 3.28930950]
[249.84883118 2.95249152]
[257.62750244 4.71981335]
[264.65002441 8.45597076]
[270.42977905 13.88874149]
[274.56958008 20.62879181]
[289.34170532 18.02406883]
[304.11380005 15.41934586]
[318.88592529 12.81462288]
[333.65805054 10.20990086]
[348.43017578 7.60517788]
[362.97872925 -1.09974062]
[375.37091064 10.47049904]
[367.68331909 25.58134079]
[351.03488159 22.37729454]
[336.26275635 24.98201752]
[321.49066162 27.58674049]
[306.71853638 30.19146156]
[291.94641113 32.79618454]
[277.17431641 35.40090942]
[266.94268799 56.01027679]
[244.89469910 63.37887955]
[223.90321350 52.84992599]
[210.42131042 59.42549133]
[196.93939209 66.00106049]
[188.89201355 78.53456879]
[173.09667969 77.62992859]
[159.61477661 84.20549011]
[146.13285828 90.78105927]
[132.65095520 97.35662842]
[119.16904449 103.93219757]
[133.28514099 109.00522614]
[146.13929749 116.73637390]
[157.23689270 126.82813263]
[166.15086365 138.89216614]
[172.53822327 152.46426392]
[176.15316772 167.02215576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 38]
[24 37]
[25 36]
[27 34]
[28 33]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[45 77]
[46 76]
[47 75]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
