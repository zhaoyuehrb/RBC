%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCACGCCGCCCGGGCUUCUGGGGUGUUCCCCAACCACGGCCCAGCCCUGCCACACCCCCCGCCCCCGGCCUCCGCAGCUCGGC\
) } def
/len { sequence length } bind def

/coor [
[128.60957336 234.24359131]
[124.33636475 219.86514282]
[110.75570679 217.52816772]
[99.48171997 209.48866272]
[92.78341675 197.29362488]
[92.03965759 183.33328247]
[97.45566559 170.37261963]
[108.01092529 161.00381470]
[104.25959778 146.48046875]
[100.50826263 131.95712280]
[96.75693512 117.43377686]
[87.66792297 112.74260712]
[82.68173218 103.81204224]
[83.45722961 93.61322784]
[89.73641968 85.53926086]
[87.04283905 70.78308868]
[84.34926605 56.02691269]
[81.65568542 41.27074051]
[70.50639343 36.40745926]
[63.25167465 26.79551697]
[61.66376877 14.98066235]
[66.03339386 4.01982927]
[75.12519836 -3.30978155]
[73.50341034 -18.22185135]
[71.88162994 -33.13391876]
[70.25984192 -48.04598999]
[68.63805389 -62.95805740]
[67.01627350 -77.87012482]
[65.39448547 -92.78219604]
[56.26496506 -80.88043976]
[42.74406433 -74.38542175]
[27.74731445 -74.69768524]
[14.50849056 -81.74988556]
[5.88230038 -94.02134705]
[3.72882271 -108.86595917]
[8.51241589 -123.08275604]
[19.20158577 -133.60614014]
[33.49140930 -138.16694641]
[48.30055237 -135.78170776]
[60.43569183 -126.96476746]
[67.28041077 -113.61611176]
[71.55361938 -127.99456024]
[75.82683563 -142.37300110]
[66.28519440 -154.60969543]
[65.79205322 -170.11894226]
[74.53701782 -182.93708801]
[89.15748596 -188.13533020]
[104.03157806 -183.71481323]
[113.43991089 -171.37532043]
[113.76477814 -155.86164856]
[104.88127136 -143.13911438]
[90.20527649 -138.09979248]
[85.93206787 -123.72134399]
[81.65885162 -109.34290314]
[80.30655670 -94.40398407]
[81.92834473 -79.49191284]
[83.55012512 -64.57984161]
[85.17191315 -49.66777420]
[86.79369354 -34.75570679]
[88.41548157 -19.84363556]
[90.03726959 -4.93156672]
[104.91852570 5.43090677]
[107.78005981 23.65433693]
[96.41185760 38.57716370]
[99.10543823 53.33333588]
[101.79901123 68.08950806]
[104.49259186 82.84568024]
[117.31826782 96.18795776]
[111.28028107 113.68244934]
[115.03160858 128.20579529]
[118.78293610 142.72914124]
[122.53427124 157.25248718]
[138.41336060 161.44738770]
[149.99211121 172.96374512]
[154.22422791 188.64019775]
[150.06224060 204.23908997]
[138.71481323 215.59193420]
[142.98802185 229.97036743]
[157.83297729 234.16929626]
[168.03410339 245.74255371]
[170.33625793 260.99719238]
[164.00485229 275.06546021]
[151.06018066 283.45828247]
[135.63287354 283.49749756]
[122.64570618 275.17062378]
[116.24284363 261.13470459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[8 72]
[9 71]
[10 70]
[11 69]
[15 67]
[16 66]
[17 65]
[18 64]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[41 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
