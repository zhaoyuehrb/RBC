%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAGUUCCUGGUGCGUCACGGGGGAGUUCCUUAAAGGGGAAGCGAGCCGGGCUACGGGGCGAGCGCGGGGUGCGGUGGUCGGCGGGGAGGCCCCCGCGCUUUAAAAUAAUGCCCGCGGCGCCCGCGCGACC\
) } def
/len { sequence length } bind def

/coor [
[-110.20559692 139.84657288]
[-125.20455170 140.02372742]
[-140.20350647 140.20088196]
[-153.91133118 148.10063171]
[-166.72909546 140.51417542]
[-181.72805786 140.69132996]
[-196.72700500 140.86848450]
[-211.72596741 141.04563904]
[-226.72491455 141.22279358]
[-232.73381042 144.33358765]
[-238.52352905 143.93040466]
[-242.43238831 141.03726196]
[-257.42297363 140.50590515]
[-272.41354370 139.97454834]
[-281.19677734 142.81858826]
[-287.75073242 139.24945068]
[-302.72457886 138.36418152]
[-317.69842529 137.47889709]
[-326.54638672 140.11470032]
[-333.01422119 136.39175415]
[-347.96298218 135.15307617]
[-362.91174316 133.91438293]
[-370.69738770 146.99662781]
[-383.33947754 155.36709595]
[-398.30096436 157.41020203]
[-412.60705566 152.77378845]
[-423.43676758 142.42840576]
[-428.67904663 128.46475220]
[-443.62783813 127.22605896]
[-458.57659912 125.98736572]
[-473.52536011 124.74867249]
[-488.47412109 123.50998688]
[-503.42288208 122.27129364]
[-519.70721436 126.98899841]
[-528.74853516 112.64704895]
[-517.46990967 99.98885345]
[-502.18420410 107.32252502]
[-487.23544312 108.56121826]
[-472.28668213 109.79991150]
[-457.33789062 111.03859711]
[-442.38912964 112.27729034]
[-427.44036865 113.51597595]
[-419.97122192 100.60561371]
[-407.58642578 92.18384552]
[-392.71231079 89.96537018]
[-378.29116821 94.44319916]
[-367.19924927 104.78031921]
[-361.67306519 118.96561432]
[-346.72427368 120.20429993]
[-331.77551270 121.44299316]
[-316.81317139 122.50505066]
[-301.83932495 123.39031982]
[-286.86544800 124.27559662]
[-271.88220215 124.98396301]
[-256.89160156 125.51531982]
[-241.90101624 126.04668427]
[-226.90206909 126.22383881]
[-211.90312195 126.04668427]
[-196.90415955 125.86952972]
[-181.90521240 125.69237518]
[-166.90625000 125.51522064]
[-154.27125549 117.62815094]
[-140.38066101 125.20192719]
[-125.38170624 125.02477264]
[-110.38275146 124.84761810]
[-95.42039490 123.78556824]
[-80.54680634 121.84230804]
[-65.67321014 119.89905548]
[-50.82360840 117.78027344]
[-36.00006104 115.48626709]
[-21.17651558 113.19225311]
[-6.35296917 110.89824677]
[8.47057724 108.60424042]
[23.29412270 106.31022644]
[34.68838120 96.71751404]
[49.50951004 102.25328064]
[64.33305359 99.95927429]
[79.15660095 97.66526031]
[93.98014832 95.37125397]
[91.90679169 88.73888397]
[93.45389557 80.95173645]
[98.97343445 73.60425568]
[108.19112396 68.35315704]
[121.78158569 62.00496674]
[135.37203979 55.65677261]
[148.96249390 49.30858231]
[162.55294800 42.96038818]
[176.14340210 36.61219788]
[185.09219360 22.86988831]
[201.45104980 24.01869011]
[208.39138794 38.87681580]
[198.77357483 52.15949631]
[182.49159241 50.20265198]
[168.90113831 56.55084229]
[155.31068420 62.89903641]
[141.72023010 69.24723053]
[128.12977600 75.59542084]
[114.53932190 81.94361115]
[115.60137939 96.90596771]
[129.95225525 101.27083588]
[140.65539551 90.33001709]
[155.22056580 85.62743378]
[170.30081177 88.24370575]
[182.43080139 97.57762909]
[188.82313538 111.48433685]
[188.00892639 126.76817322]
[180.17524719 139.91702271]
[167.12225342 147.90937805]
[151.84939575 148.90864563]
[137.86628723 142.68521118]
[128.38612366 130.66917419]
[125.58739471 115.62171936]
[111.23651123 111.25685120]
[96.27415466 110.19480133]
[81.45060730 112.48880768]
[66.62706757 114.78282166]
[51.80352020 117.07682800]
[39.34898376 126.83362579]
[25.58813286 121.13377380]
[10.76458645 123.42778778]
[-4.05895996 125.72179413]
[-18.88250542 128.01580811]
[-33.70605087 130.30981445]
[-48.52959824 132.60382080]
[-56.62223053 137.04713440]
[-63.72995758 134.77264404]
[-78.60355377 136.71589661]
[-93.47714233 138.65916443]
[-83.77122498 150.09573364]
[-86.42351532 164.85937500]
[-99.50321198 172.20249939]
[-113.48858643 166.77947998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[12 56]
[13 55]
[14 54]
[16 53]
[17 52]
[18 51]
[20 50]
[21 49]
[22 48]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[66 128]
[67 127]
[68 126]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[74 119]
[76 117]
[77 116]
[78 115]
[79 114]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
