%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGCUGGGCGGAACCGGAAGAUGGUGUGAGCCACGGGCUGCCGGGGGCCUGGGGCUCGGCGUCGGUCCCCGGGGG\
) } def
/len { sequence length } bind def

/coor [
[109.22358704 118.70896149]
[101.78231812 120.78276062]
[94.09661102 120.00624847]
[87.22054291 116.48591614]
[82.09715271 110.70456696]
[79.42910004 103.45511627]
[64.73223877 100.45473480]
[50.03537750 97.45434570]
[35.28107834 94.75051880]
[20.47532654 92.34435272]
[5.66957235 89.93817902]
[-6.04173565 101.95632935]
[-22.42984390 104.70028687]
[-37.12347412 97.30031586]
[-44.52625656 82.79245758]
[-59.41688919 80.98440552]
[-74.30752563 79.17635345]
[-89.19815826 77.36830902]
[-102.66291809 86.09067535]
[-117.83116913 80.86536407]
[-123.06711578 65.70078278]
[-114.35419464 52.22990799]
[-98.37620544 50.78643417]
[-87.39010620 62.47767258]
[-72.49947357 64.28572083]
[-57.60884094 66.09377289]
[-42.71820450 67.90182495]
[-34.45408249 57.22289276]
[-21.86461258 52.04597473]
[-8.26235867 53.85091400]
[2.71460962 62.26477051]
[8.07574177 75.13243103]
[22.88149452 77.53859711]
[37.68724823 79.94476318]
[44.99497223 77.85098267]
[53.03576279 82.75748444]
[67.73262024 85.75787354]
[82.42948151 88.75825500]
[102.09679413 79.24660492]
[119.46406555 92.50000000]
[134.46406555 92.50000000]
[148.26423645 84.76270294]
[160.99151611 92.50000000]
[175.99151611 92.50000000]
[190.99151611 92.50000000]
[205.99151611 92.50000000]
[220.99151611 92.50000000]
[235.99151611 92.50000000]
[250.99151611 92.50000000]
[265.99151611 92.50000000]
[280.99151611 92.50000000]
[289.85122681 89.30101776]
[296.59246826 92.81422424]
[311.58029175 93.41821289]
[325.68081665 86.24285889]
[338.08621216 94.48635864]
[353.07406616 95.09035492]
[369.14379883 89.68669128]
[378.78485107 103.63254547]
[368.05288696 116.75740051]
[352.47006226 110.07818604]
[337.48223877 109.47419739]
[324.45373535 116.69274902]
[310.97628784 108.40604401]
[295.98846436 107.80205536]
[280.99151611 107.50000000]
[265.99151611 107.50000000]
[250.99151611 107.50000000]
[235.99151611 107.50000000]
[220.99151611 107.50000000]
[205.99151611 107.50000000]
[190.99151611 107.50000000]
[175.99151611 107.50000000]
[160.99151611 107.50000000]
[148.26423645 115.23729706]
[134.46406555 107.50000000]
[119.46406555 107.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[8 36]
[9 34]
[10 33]
[11 32]
[15 27]
[16 26]
[17 25]
[18 24]
[40 77]
[41 76]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[53 65]
[54 64]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
