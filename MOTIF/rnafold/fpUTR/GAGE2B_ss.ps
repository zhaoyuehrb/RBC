%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUAUUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[94.94867706 205.08226013]
[104.99720764 192.88378906]
[103.31774139 177.97810364]
[101.63827515 163.07241821]
[99.68038177 148.20074463]
[97.44474792 133.36828613]
[95.20911407 118.53582764]
[87.46751404 105.68795776]
[75.39855194 96.78065491]
[63.32958221 87.87335205]
[51.26061630 78.96604919]
[39.02720261 70.28598022]
[26.63362312 61.83617783]
[14.24004078 53.38637924]
[5.14832211 51.04998016]
[1.54912579 44.38169479]
[-10.51984119 35.47439194]
[-22.75325394 26.79432106]
[-35.14683533 18.34452057]
[-47.54041672 9.89471912]
[-59.93399811 1.44491863]
[-72.32758331 -7.00488234]
[-90.60740662 -7.84413195]
[-97.81040955 -23.73031616]
[-110.51126862 -31.71079636]
[-123.21213531 -39.69127655]
[-139.61112976 -39.76342010]
[-147.51211548 -54.13375092]
[-138.78723145 -68.01931000]
[-122.41190338 -67.13581848]
[-115.23165131 -52.39213943]
[-102.53079224 -44.41165924]
[-89.82992554 -36.43117905]
[-77.81173706 -38.80363083]
[-67.11007690 -32.05051422]
[-63.87778091 -19.39846420]
[-51.48419952 -10.94866276]
[-39.09061813 -2.49886227]
[-26.69703484 5.95093870]
[-14.30345345 14.40073967]
[-6.82062817 15.59556484]
[-1.61253810 23.40542412]
[10.45642853 32.31272507]
[22.68984222 40.99279785]
[35.08342361 49.44259644]
[47.47700500 57.89239883]
[54.95983124 59.08722305]
[60.16791916 66.89707947]
[72.23688507 75.80438232]
[84.30585480 84.71168518]
[96.37481689 93.61898804]
[96.64604950 88.56632233]
[99.10950470 83.53204346]
[103.71574402 79.26166534]
[110.18956757 76.46605682]
[118.04628754 75.75780487]
[126.62494659 77.59391022]
[141.53063965 75.91444397]
[156.43630981 74.23497772]
[169.30253601 64.06677246]
[184.43954468 70.37577057]
[186.27566528 86.67179871]
[172.92205811 96.19091034]
[158.11578369 89.14065552]
[143.21009827 90.82012177]
[128.30441284 92.49958801]
[123.73870850 98.44974518]
[138.61036682 100.40774536]
[144.35041809 114.26602173]
[135.21873474 126.16612244]
[120.34711456 124.20779419]
[114.60728455 110.35004425]
[110.04157257 116.30019379]
[112.27720642 131.13265991]
[114.51284027 145.96511841]
[118.98407745 154.21896362]
[116.54395294 161.39295959]
[118.22341919 176.29864502]
[119.90289307 191.20431519]
[132.41389465 200.86094666]
[134.34934998 216.54626465]
[124.56099701 228.95448303]
[108.85608673 230.72399902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 75]
[6 74]
[7 73]
[8 51]
[9 50]
[10 49]
[11 48]
[12 46]
[13 45]
[14 44]
[16 43]
[17 42]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[24 33]
[25 32]
[26 31]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
