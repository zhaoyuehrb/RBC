%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGCAGGUACAUAAGAUCCAUUAGGUUUGAGCUGUGUUGACUACCACUGCUUUUUCCUUGGUCUCACUUACGUCUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[109.71870422 329.70352173]
[108.59774780 314.74545288]
[107.47679901 299.78741455]
[106.35585022 284.82934570]
[105.23489380 269.87127686]
[92.48844910 262.21191406]
[86.62696838 248.35163879]
[90.09135437 233.52424622]
[101.75712585 223.46362305]
[100.63616943 208.50556946]
[99.51522064 193.54751587]
[86.03646088 187.20806885]
[77.48370361 174.89115906]
[76.23617554 159.84754944]
[82.72869873 146.10913086]
[95.30816650 137.40832520]
[94.18721771 122.45027161]
[93.06626892 107.49221039]
[89.29195404 100.12677765]
[92.19375610 91.95572662]
[91.63288879 76.96621704]
[91.07202148 61.97670364]
[87.68767548 55.83242416]
[88.05547333 49.84629822]
[91.07202148 45.85496902]
[91.63288879 30.86545753]
[92.19375610 15.87594700]
[80.15997314 6.25855875]
[76.14359283 -8.42892265]
[81.48271942 -22.49866676]
[93.93386078 -30.62929726]
[94.49472809 -45.61880875]
[95.05559540 -60.60831833]
[95.61646271 -75.59783173]
[88.40058136 -89.67765808]
[96.60835266 -102.10671997]
[97.16922760 -117.09622955]
[97.73009491 -132.08573914]
[85.44361115 -141.56320190]
[81.10666656 -156.46186829]
[86.38689423 -171.05291748]
[99.25393677 -179.72579956]
[114.76016235 -179.14559937]
[126.94310760 -169.53541565]
[131.11817932 -154.59057617]
[125.67997742 -140.05766296]
[112.71960449 -131.52487183]
[112.15873718 -116.53536224]
[111.59786987 -101.54585266]
[118.85386658 -88.53817749]
[110.60597229 -75.03696442]
[110.04510498 -60.04745102]
[109.48423767 -45.05793762]
[108.92337036 -30.06842804]
[120.73209381 -21.03005981]
[125.00485229 -6.60066319]
[119.90211487 7.74560452]
[107.18326569 16.43681526]
[106.62239838 31.42632484]
[106.06153107 46.41583633]
[106.06153107 61.41583633]
[106.62239838 76.40534973]
[107.18326569 91.39485931]
[108.02432251 106.37126160]
[109.14527130 121.32931519]
[110.26622772 136.28736877]
[124.00198364 143.01612854]
[132.46960449 155.63343811]
[133.47813416 170.69494629]
[126.85664368 184.14901733]
[114.47327423 192.42655945]
[115.59423065 207.38462830]
[116.71517944 222.34268188]
[129.75010681 230.55223083]
[135.38571167 244.69767761]
[131.65545654 259.27673340]
[120.19295502 268.75033569]
[121.31390381 283.70840454]
[122.43485260 298.66644287]
[123.55580902 313.62451172]
[124.67675781 328.58255005]
[131.88984680 343.92556763]
[119.14324188 355.10412598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[9 73]
[10 72]
[11 71]
[16 66]
[17 65]
[18 64]
[20 63]
[21 62]
[22 61]
[25 60]
[26 59]
[27 58]
[31 54]
[32 53]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
