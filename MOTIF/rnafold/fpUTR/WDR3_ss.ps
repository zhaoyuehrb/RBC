%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCAAUCGGCUGGGAGCCUCGUGGAGGCUGAGAUUGCUUCACCUGUGGUAUCAGACAUCACAAC\
) } def
/len { sequence length } bind def

/coor [
[135.40278625 132.50819397]
[122.90637970 124.21122742]
[110.40996552 115.91426086]
[90.62068939 116.54265594]
[80.99864960 99.23871613]
[67.46239471 92.77576447]
[53.92613602 86.31280518]
[40.38988113 79.84984589]
[26.85362625 73.38689423]
[19.09215736 79.49033356]
[9.74065113 82.51707458]
[-0.03583241 82.12254333]
[-9.03049088 78.38638306]
[-16.14374161 71.79882812]
[-20.51762772 63.19657898]
[-21.63924408 53.65660477]
[-19.40070724 44.36136627]
[-31.06527138 34.93067169]
[-42.72983170 25.49997902]
[-54.39439774 16.06928635]
[-66.05895996 6.63859272]
[-77.72352600 -2.79210043]
[-93.84204102 -8.04850578]
[-93.25310516 -24.99222183]
[-76.80852509 -29.11679077]
[-68.29283142 -14.45666313]
[-56.62826538 -5.02597046]
[-44.96370316 4.40472269]
[-33.29914093 13.83541584]
[-21.63457680 23.26610947]
[-9.97001457 32.69680023]
[10.37823868 27.86905861]
[28.39453888 38.99106216]
[33.31658173 59.85063934]
[46.85283661 66.31359100]
[60.38909149 72.77655029]
[73.92534637 79.23950958]
[87.46160126 85.70246124]
[95.74521637 81.46549988]
[105.04737854 81.66547394]
[113.14125824 86.25450897]
[118.08927155 94.13406372]
[118.70693207 103.41784668]
[131.20333862 111.71481323]
[143.69975281 120.01177979]
[156.74835205 127.41003418]
[170.28460693 133.87298584]
[183.82086182 140.33595276]
[197.35711670 146.79890442]
[210.89337158 153.26185608]
[224.42962646 159.72480774]
[238.58583069 153.08134460]
[253.68713379 157.14152527]
[262.60311890 169.98826599]
[261.12399292 185.55574036]
[249.94808960 196.49345398]
[234.35237122 197.63694763]
[221.70065308 188.44630432]
[217.96667480 173.26106262]
[204.43041992 166.79811096]
[190.89416504 160.33515930]
[177.35791016 153.87220764]
[163.82165527 147.40924072]
[150.28540039 140.94628906]
[146.57067871 142.01649475]
[142.12268066 141.09777832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
