%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCGGGCGGCUGCUCCGGUCCAGGGGUGGAGGUCGGGGCCCUGACCCGACGCAGCCAGGCGGAAGCGCGGCUGCCAUUGGAGGCUGCUUUUACCUGCGCGGGGCCCGGGGCGCAAAGUCCGAGGCGCCGGGGGGAGGAGGCGGCGGACGGCAGCGCAGGUGGGCCCGCGCUCUCGGCCCUGCAAG\
) } def
/len { sequence length } bind def

/coor [
[379.65933228 177.22595215]
[380.95681763 162.28216553]
[392.34237671 152.51672363]
[377.52511597 150.18238831]
[362.70788574 147.84805298]
[347.89062500 145.51371765]
[333.07336426 143.17938232]
[315.60018921 151.43736267]
[300.09967041 138.56694031]
[285.21365356 136.72122192]
[270.32766724 134.87548828]
[255.44165039 133.02976990]
[240.55563354 131.18405151]
[225.66961670 129.33831787]
[210.78361511 127.49259186]
[206.52102661 129.68063354]
[200.83663940 129.20227051]
[195.44136047 125.33352661]
[180.62411499 122.99919128]
[165.80686951 120.66485596]
[150.98962402 118.33052826]
[136.17236328 115.99619293]
[121.35511780 113.66186523]
[106.53786469 111.32752991]
[91.90614319 114.63097382]
[79.52913666 123.10502625]
[67.15212250 131.57908630]
[60.55755997 146.59387207]
[44.22967529 148.12100220]
[34.96519089 134.58950806]
[42.29462051 119.91941833]
[58.67807007 119.20206451]
[71.05508423 110.72801208]
[83.43209076 102.25395966]
[81.00913239 95.15612793]
[76.16321564 80.96045685]
[73.74024963 73.86262512]
[58.76510239 74.72566986]
[43.78995132 75.58872223]
[28.81479836 76.45177460]
[13.83964825 77.31481934]
[-1.13550305 78.17787170]
[-10.33557129 90.82273865]
[-25.52358818 94.54539490]
[-39.52823639 87.58811188]
[-45.73694992 73.23590088]
[-41.21816254 58.26544571]
[-28.10551071 49.74533081]
[-12.59038448 51.69849777]
[-1.99855292 63.20272064]
[12.97659779 62.33966827]
[27.95174980 61.47661972]
[42.92689896 60.61357117]
[57.90205002 59.75051880]
[72.87720490 58.88747025]
[77.25360107 44.54009628]
[65.30963135 35.46586990]
[53.36566162 26.39164352]
[41.42169189 17.31741714]
[29.47772217 8.24319077]
[17.53375244 -0.83103526]
[2.07819533 1.10894597]
[-9.90542316 -8.26375675]
[-11.65965080 -23.01022339]
[-23.60362053 -32.08444977]
[-39.93174744 -33.60903168]
[-46.52865982 -48.62278366]
[-36.60802078 -61.68084717]
[-20.37533379 -59.35020065]
[-14.52939415 -44.02841949]
[-2.58542466 -34.95419312]
[12.09155750 -37.21732712]
[24.33370781 -28.18491936]
[26.60797882 -12.77500534]
[38.55194855 -3.70077872]
[50.49591827 5.37344790]
[62.43988800 14.44767380]
[74.38385773 23.52190018]
[86.32782745 32.59612656]
[118.70198059 65.59993744]
[108.87220001 96.51028442]
[123.68945312 98.84461212]
[138.50669861 101.17894745]
[153.32394409 103.51327515]
[168.14120483 105.84761047]
[182.95845032 108.18193817]
[197.77569580 110.51627350]
[212.62933350 112.60658264]
[227.51535034 114.45230865]
[242.40135193 116.29803467]
[257.28738403 118.14376068]
[272.17337036 119.98948669]
[287.05938721 121.83520508]
[301.94540405 123.68093109]
[310.14102173 116.49708557]
[320.72100830 115.04906464]
[330.14910889 119.57659912]
[335.40771484 128.36213684]
[350.22494507 130.69647217]
[365.04220581 133.03080750]
[379.85946655 135.36514282]
[394.67669678 137.69946289]
[409.59106445 139.30010986]
[424.56622314 140.16316223]
[439.54135132 141.02619934]
[454.51651001 141.88925171]
[469.49166870 142.75230408]
[484.46682739 143.61535645]
[499.44195557 144.47840881]
[514.41711426 145.34146118]
[528.63958740 138.41099548]
[540.90063477 146.86775208]
[555.87579346 147.73080444]
[570.85089111 148.59385681]
[585.82604980 149.45690918]
[600.80120850 150.31996155]
[615.77636719 151.18299866]
[630.75152588 152.04605103]
[637.58367920 140.32257080]
[650.49414062 133.59941101]
[665.98638916 134.86943054]
[679.21990967 144.77975464]
[693.95239258 141.95933533]
[708.68487549 139.13893127]
[723.41729736 136.31851196]
[738.14978027 133.49810791]
[743.73974609 124.14245605]
[753.36206055 119.51171875]
[763.72552490 120.92127228]
[771.43054199 127.66450500]
[786.24774170 125.33016968]
[801.06500244 122.99584198]
[815.88226318 120.66150665]
[821.32324219 106.29866028]
[833.22680664 96.59297943]
[848.39105225 94.15525055]
[862.73675537 99.64121246]
[872.40509033 111.57516479]
[874.79522705 126.74693298]
[869.26434326 141.07539368]
[857.30017090 150.70625305]
[842.12097168 153.04887390]
[827.80993652 147.47308350]
[818.21661377 135.47875977]
[803.39935303 137.81309509]
[788.58209229 140.14743042]
[773.76483154 142.48175049]
[759.67694092 155.71191406]
[740.97015381 148.23056030]
[726.23773193 151.05096436]
[711.50524902 153.87138367]
[696.77282715 156.69180298]
[682.04034424 159.51220703]
[678.85736084 174.17060852]
[691.09332275 182.84707642]
[703.32928467 191.52355957]
[721.69097900 192.80361938]
[728.40026855 209.01159668]
[740.77728271 217.48565674]
[757.16070557 218.20300293]
[764.49017334 232.87309265]
[755.22564697 246.40458679]
[738.89776611 244.87744141]
[732.30322266 229.86265564]
[719.92620850 221.38861084]
[707.97143555 223.30400085]
[697.58721924 216.33088684]
[694.65277100 203.75952148]
[682.41680908 195.08303833]
[670.18084717 186.40657043]
[643.27783203 186.45233154]
[629.88848877 167.02120972]
[614.91333008 166.15815735]
[599.93817139 165.29510498]
[584.96301270 164.43205261]
[569.98785400 163.56900024]
[555.01269531 162.70596313]
[540.03753662 161.84291077]
[526.88616943 168.83509827]
[513.55407715 160.31660461]
[498.57891846 159.45355225]
[483.60375977 158.59049988]
[468.62860107 157.72746277]
[453.65347290 156.86441040]
[438.67831421 156.00135803]
[423.70315552 155.13830566]
[408.72799683 154.27525330]
[417.78210449 166.23449707]
[415.87884521 181.11326599]
[404.10592651 190.40835571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[9 94]
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 34]
[26 33]
[27 32]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[64 71]
[65 70]
[103 187]
[104 186]
[105 185]
[106 184]
[107 183]
[108 182]
[109 181]
[110 180]
[112 178]
[113 177]
[114 176]
[115 175]
[116 174]
[117 173]
[118 172]
[122 153]
[123 152]
[124 151]
[125 150]
[126 149]
[130 147]
[131 146]
[132 145]
[133 144]
[154 170]
[155 169]
[156 168]
[158 165]
[159 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
