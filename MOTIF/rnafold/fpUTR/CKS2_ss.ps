%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGUCUCCGGCGAGUUGUUGCCUGGGCUGGACGUGGUUUUGUCUGCUGCGCCCGCUCUUCGCGCUCUCGUUUCAUUUUCUGCAGCGCGCCAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[77.67093658 119.43717957]
[64.23103333 126.09817505]
[50.79112625 132.75917053]
[37.45859146 139.63256836]
[24.23679161 146.71664429]
[11.01499176 153.80070496]
[-2.20680833 160.88476562]
[-15.42860889 167.96884155]
[-19.96586418 180.17074585]
[-31.27446365 185.76095581]
[-42.95258331 182.19108582]
[-56.39249039 188.85209656]
[-69.83239746 195.51309204]
[-83.27230835 202.17408752]
[-96.71221161 208.83508301]
[-105.34059143 222.78080750]
[-121.72165680 222.01087952]
[-129.00396729 207.31735229]
[-119.69611359 193.81565857]
[-103.37320709 195.39518738]
[-89.93330383 188.73417664]
[-76.49340057 182.07318115]
[-63.05348969 175.41218567]
[-49.61358261 168.75119019]
[-40.80889893 153.66229248]
[-22.51267433 154.74703979]
[-9.29087448 147.66297913]
[3.93092608 140.57890320]
[17.15272713 133.49484253]
[30.37452698 126.41077423]
[34.86580658 120.36653900]
[44.13012695 119.31926727]
[57.57003403 112.65827179]
[71.00994110 105.99726868]
[70.44607544 98.28062439]
[71.90097809 90.68142700]
[75.27527618 83.71875763]
[80.33847046 77.86823273]
[86.74470520 73.52948761]
[94.05638123 70.99889374]
[101.77406311 70.44930267]
[109.37055206 71.91826630]
[116.32696533 75.30544281]
[122.16810608 80.37945557]
[126.49499512 86.79370880]
[141.17703247 83.72161102]
[155.85906982 80.64950562]
[170.54110718 77.57740784]
[185.22314453 74.50531006]
[199.90518188 71.43320465]
[207.83480835 66.52959442]
[215.10148621 68.50435638]
[229.87359619 65.89963531]
[242.12054443 55.88350677]
[255.99803162 61.29319382]
[270.77014160 58.68847275]
[285.54226685 56.08374786]
[300.31439209 53.47902679]
[303.83425903 50.25411606]
[307.81918335 48.60977173]
[311.67257690 48.48610687]
[314.88836670 49.62170792]
[317.11294556 51.60556030]
[332.09597778 50.89183044]
[347.07897949 50.17810059]
[351.55609131 35.69599915]
[360.71884155 23.62041092]
[373.46078491 15.40952301]
[388.24325562 12.05484009]
[403.28125000 13.96145821]
[416.75878906 20.89914131]
[427.04843140 32.03013229]
[432.90765381 46.01030731]
[433.62890625 61.15149689]
[429.12512207 75.62532806]
[419.94015503 87.68400574]
[407.18307495 95.87139893]
[392.39443970 99.19883728]
[377.36001587 97.26450348]
[363.89526367 90.30199432]
[353.62615967 79.15206146]
[347.79269409 65.16110992]
[332.80969238 65.87483978]
[317.82669067 66.58856964]
[302.91909790 68.25114441]
[288.14700317 70.85586548]
[273.37487793 73.46058655]
[258.60275269 76.06530762]
[247.41241455 85.89513397]
[232.47833252 80.67175293]
[217.70620728 83.27647400]
[202.97727966 86.11524200]
[188.29524231 89.18734741]
[173.61320496 92.25944519]
[158.93116760 95.33154297]
[144.24913025 98.40364075]
[129.56709290 101.47574615]
[119.72225952 122.07766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[52 91]
[53 90]
[55 88]
[56 87]
[57 86]
[58 85]
[63 84]
[64 83]
[65 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
