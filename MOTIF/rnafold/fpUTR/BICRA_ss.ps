%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCCAGAGCGGCCGGGGACAGGCUCCGAGGCAGGCCCGACCCGCCUCCCCGGCGCCGCCGUGGCUCGACGGAGACCAGCUAGGCUGGCCCCCAAGAGGACCCUUUCCAAGUCCCCAGCUGGGGGCCCUGUGUAGACCUGGAGUGGACACGCCCCUCCUUCCCUUCAUGAUUCGUUUGUAGCGCAGUGGCG\
) } def
/len { sequence length } bind def

/coor [
[84.30701447 321.07269287]
[69.30584717 325.48846436]
[54.99666214 319.18124390]
[48.13581467 305.12908936]
[51.96278763 289.96701050]
[64.67060852 280.85409546]
[65.63658142 265.88522339]
[66.60255432 250.91636658]
[67.56853485 235.94750977]
[57.57427216 224.96340942]
[58.34067154 209.76908875]
[69.92956543 199.36067200]
[70.89553833 184.39179993]
[71.86151123 169.42294312]
[59.58579636 160.80279541]
[45.83391190 166.79327393]
[32.08202744 172.78373718]
[18.33014679 178.77421570]
[4.57826328 184.76467896]
[-9.17361927 190.75514221]
[-22.92550278 196.74562073]
[-36.67738724 202.73608398]
[-40.92072296 207.83422852]
[-46.29627609 209.72938538]
[-50.97012711 208.69007874]
[-64.90785980 214.23440552]
[-78.84559631 219.77874756]
[-85.66036224 237.44451904]
[-102.92254639 244.41281128]
[-119.51282501 236.69752502]
[-133.26470947 242.68798828]
[-139.89338684 248.99261475]
[-147.28671265 248.66221619]
[-161.13331604 254.43035889]
[-170.65492249 267.78219604]
[-186.95060730 265.94305420]
[-193.25679016 250.80487061]
[-183.08619690 237.94053650]
[-166.90147400 240.58375549]
[-153.05487061 234.81561279]
[-139.25517273 228.93611145]
[-125.50328827 222.94564819]
[-123.72508240 211.66026306]
[-116.64184570 202.54409790]
[-105.92542267 197.93766785]
[-94.19784546 199.09416199]
[-84.38992310 205.84100342]
[-70.45219421 200.29667664]
[-56.51445770 194.75234985]
[-42.66785431 188.98420715]
[-28.91597176 182.99372864]
[-15.16408825 177.00326538]
[-1.41220534 171.01280212]
[12.33967781 165.02232361]
[26.09156036 159.03186035]
[39.84344482 153.04138184]
[53.59532547 147.05091858]
[56.35855484 132.30763245]
[45.70932007 121.74383545]
[35.06008530 111.18003845]
[20.27534866 115.09907532]
[5.61087561 111.11786652]
[-5.02124596 100.40225220]
[-8.83670235 85.90058899]
[-4.90763807 71.53298187]
[-15.55687332 60.96918488]
[-26.20611000 50.40539169]
[-36.94009399 39.92771912]
[-47.75812912 29.53685379]
[-58.57616806 19.14598846]
[-74.61960602 15.74891472]
[-79.44141388 0.07466114]
[-68.08132172 -11.75244427]
[-52.22562408 -7.56568861]
[-48.18530273 8.32795238]
[-37.36726379 18.71881676]
[-26.54922867 29.10968208]
[-19.53803444 31.47902107]
[-15.64231396 39.75615311]
[-4.99307775 50.31995010]
[5.65615749 60.88374710]
[19.99164581 56.83907318]
[34.52357483 60.53759003]
[45.32448578 71.08305359]
[49.42369080 85.71498108]
[45.62387848 100.53079987]
[56.27311707 111.09459686]
[66.92234802 121.65839386]
[70.37461853 80.80094910]
[104.91739655 69.32415771]
[110.79689789 55.52446747]
[116.67639923 41.72477722]
[122.55589294 27.92508507]
[128.43539429 14.12539291]
[134.31489563 0.32570106]
[140.19439697 -13.47399044]
[146.07389832 -27.27368164]
[136.29724121 -42.53064728]
[137.61421204 -60.44586563]
[149.31048584 -73.87224579]
[166.56883240 -77.56684113]
[172.00071716 -91.54878235]
[177.43260193 -105.53072357]
[182.86447144 -119.51266479]
[173.70442200 -131.92623901]
[172.73257446 -147.32296753]
[180.25906372 -160.78979492]
[193.88220215 -168.02952576]
[209.25489807 -166.73196411]
[221.47178650 -157.31117249]
[226.63449097 -142.77330017]
[223.09562683 -127.75730133]
[211.98442078 -117.05475616]
[196.84642029 -114.08078766]
[191.41453552 -100.09884644]
[185.98266602 -86.11690521]
[180.55078125 -72.13496399]
[188.57072449 -63.00151443]
[191.96139526 -51.25400925]
[190.01901245 -39.10908508]
[183.05223083 -28.88568878]
[172.33491516 -22.56230164]
[159.87358093 -21.39418221]
[153.99407959 -7.59449148]
[148.11457825 6.20520020]
[142.23509216 20.00489235]
[136.35559082 33.80458450]
[130.47608948 47.60427475]
[124.59658813 61.40396500]
[118.71708679 75.20365906]
[133.16905212 93.04280090]
[132.02946472 117.94558716]
[113.28343964 137.23931885]
[128.02673340 140.00254822]
[142.77001953 142.76577759]
[157.75933838 137.70309448]
[168.84346008 147.65254211]
[183.58676147 150.41577148]
[193.62139893 138.87223816]
[207.99185181 133.93394470]
[222.80621338 136.83241272]
[234.10511780 146.69094849]
[238.91989136 160.78646851]
[253.66319275 163.54969788]
[268.40646362 166.31292725]
[283.14978027 169.07615662]
[292.17474365 167.58032227]
[298.10748291 172.00448608]
[312.80432129 175.00486755]
[325.84930420 166.08274841]
[341.36676025 169.08012390]
[350.15045166 182.21868896]
[346.98919678 197.70358276]
[333.75848389 206.34788513]
[318.30789185 203.02308655]
[309.80395508 189.70172119]
[295.10708618 186.70133972]
[280.38653564 183.81944275]
[265.64324951 181.05621338]
[250.89996338 178.29298401]
[236.15667725 175.52975464]
[226.56433105 186.92503357]
[212.46226501 192.02287292]
[197.60375977 189.35997009]
[185.99691772 179.55291748]
[180.82353210 165.15905762]
[166.08023071 162.39582825]
[152.14544678 167.65615845]
[140.00679016 157.50906372]
[125.26349640 154.74583435]
[110.52021027 151.98260498]
[104.59774780 156.58418274]
[116.21144104 166.07745361]
[127.82513428 175.57072449]
[142.24343872 179.70742798]
[151.46791077 191.53575134]
[151.96711731 206.52745056]
[143.54994202 218.94322205]
[129.43875122 224.02990723]
[115.03575897 219.84019470]
[105.85487366 207.97801208]
[105.41030121 192.98638916]
[99.08156586 179.38687134]
[92.75283813 165.78733826]
[86.83037567 170.38891602]
[85.86440277 185.35777283]
[84.89842987 200.32664490]
[95.05341339 212.13824463]
[93.86054230 227.30503845]
[82.53739929 236.91348267]
[81.57141876 251.88233948]
[80.60544586 266.85119629]
[79.63947296 281.82006836]
[91.07061005 292.49072266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 193]
[7 192]
[8 191]
[9 190]
[12 187]
[13 186]
[14 185]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[25 49]
[26 48]
[27 47]
[30 42]
[31 41]
[33 40]
[34 39]
[58 88]
[59 87]
[60 86]
[65 81]
[66 80]
[67 79]
[68 77]
[69 76]
[70 75]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
[97 123]
[101 117]
[102 116]
[103 115]
[104 114]
[133 171]
[134 170]
[135 169]
[137 167]
[138 166]
[143 161]
[144 160]
[145 159]
[146 158]
[148 157]
[149 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
