%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAGAGAGACUCCUGCGGCCCAGAUUCUUCAGGAUUCUCCGUGAAGGGAUAACCAGGGGAAGCACCAAG\
) } def
/len { sequence length } bind def

/coor [
[73.05364227 151.80799866]
[62.46332169 144.73446655]
[53.65826797 135.53335571]
[47.05725098 124.64225006]
[42.97421646 112.57914734]
[41.60335541 99.91777802]
[43.00986481 87.26031494]
[47.12685394 75.20876312]
[34.47598267 67.14926910]
[21.82511330 59.08977127]
[9.17424107 51.03027725]
[-6.62195492 50.14102173]
[-13.19877911 36.77709198]
[-25.84965134 28.71759796]
[-38.50052261 20.65810394]
[-51.15139389 12.59860992]
[-63.80226517 4.53911591]
[-79.59846497 3.64986157]
[-86.17528534 -9.71406937]
[-98.82615662 -17.77356339]
[-113.21361542 -11.96145535]
[-128.26141357 -15.74875641]
[-138.18334961 -27.67917061]
[-139.16424561 -43.16521072]
[-130.82691956 -56.25218201]
[-116.37725830 -61.90787125]
[-101.37143707 -57.95755386]
[-91.57950592 -45.92020416]
[-90.76666260 -30.42443466]
[-78.11579132 -22.36494064]
[-63.22447205 -22.05215645]
[-55.74277115 -8.11175632]
[-43.09189987 -0.05226175]
[-30.44102859 8.00723267]
[-17.79015732 16.06672668]
[-5.13928461 24.12622070]
[9.75203609 24.43900681]
[17.23373413 38.37940598]
[29.88460732 46.43889999]
[42.53547668 54.49839401]
[55.18635178 62.55788803]
[68.54920959 50.79611206]
[84.83477020 43.60681915]
[102.52962494 41.65811157]
[119.98940277 45.13107681]
[135.59158325 53.70297623]
[147.88626099 66.57723236]
[155.73089600 82.55744171]
[170.50300598 79.95272064]
[180.84571838 67.68863678]
[196.87815857 68.27238464]
[206.30158997 81.25616455]
[201.88717651 96.67992401]
[187.02127075 102.71188354]
[173.10772705 94.72483826]
[158.33561707 97.32955933]
[157.19856262 111.76856995]
[152.54292297 125.48364258]
[144.65509033 137.63107300]
[154.78894043 148.69023132]
[170.58714294 149.12913513]
[181.38696289 160.66773987]
[180.78106689 176.46040344]
[169.12892151 187.13763428]
[153.34353638 186.36479187]
[142.79010010 174.60041809]
[143.72978210 158.82408142]
[133.59593201 147.76492310]
[122.44237518 153.91210938]
[110.22144318 157.49519348]
[97.51438141 158.34378052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 41]
[9 40]
[10 39]
[11 38]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 30]
[20 29]
[48 56]
[49 55]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
