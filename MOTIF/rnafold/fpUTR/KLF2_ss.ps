%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGCCGUCCCCGCCCGCCCGCGCCCCGACCAGCCCGGCCUCGGGCAGCCACUCACCGGUGUCCCCGUCCGCGUCCUUUCUCCCCGGGUCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[85.50489044 508.37011719]
[70.25724030 511.84045410]
[56.36986542 504.65194702]
[50.39995575 490.19876099]
[55.16632462 475.30526733]
[68.41843414 467.00372314]
[70.31732178 452.12442017]
[72.21620941 437.24508667]
[74.11509705 422.36578369]
[63.27754974 409.61502075]
[64.95967102 392.62860107]
[78.61341858 381.83499146]
[80.03926086 366.90289307]
[81.46509552 351.97082520]
[82.89093781 337.03875732]
[67.45039368 330.23736572]
[55.17825699 318.62362671]
[47.51477814 303.53814697]
[45.36684036 286.73025513]
[49.00067902 270.15521240]
[58.00899124 255.74662781]
[71.35652924 245.19099426]
[87.49903870 239.73025513]
[87.49903870 224.73025513]
[87.49903870 209.73025513]
[87.49903870 194.73025513]
[79.50115967 188.01573181]
[76.55461121 177.76623535]
[79.90166473 167.40699768]
[88.63713074 160.54484558]
[89.58849335 145.57504272]
[90.53984833 130.60525513]
[73.06100464 117.33396149]
[68.22601318 95.92694855]
[78.30419922 76.43163300]
[71.01124573 63.32389069]
[63.71829605 50.21615219]
[56.42534637 37.10840988]
[49.13239288 24.00067139]
[34.79191589 16.04562759]
[34.78152084 -0.35351634]
[49.11190796 -8.32672787]
[63.04119873 0.32814884]
[62.24013519 16.70771980]
[69.53308868 29.81546021]
[76.82603455 42.92320251]
[84.11898804 56.03094101]
[91.41194153 69.13867950]
[95.66612244 68.26054382]
[100.00000000 67.96601868]
[104.33387756 68.26054382]
[108.58805847 69.13867950]
[115.88101196 56.03094101]
[123.17396545 42.92320251]
[130.46691895 29.81546021]
[129.66584778 13.43588924]
[143.59513855 4.78101254]
[157.92552185 12.75422478]
[157.91513062 29.15336800]
[143.57466125 37.10840988]
[136.28170776 50.21615219]
[128.98875427 63.32389069]
[121.69580078 76.43163300]
[128.76130676 85.89456940]
[131.91783142 97.27458191]
[130.73637390 109.02501678]
[125.37751770 119.54884338]
[116.56957245 127.41577911]
[105.50965118 131.55661011]
[104.55828857 146.52641296]
[103.60693359 161.49621582]
[113.46498871 178.93791199]
[102.49903870 194.73025513]
[102.49903870 209.73025513]
[102.49903870 224.73025513]
[102.49903870 239.73025513]
[115.23459625 243.50077820]
[126.51448822 250.48733521]
[135.54486084 260.18978882]
[141.69245911 271.91708374]
[144.52891541 284.83663940]
[143.86073303 298.03332520]
[139.74234009 310.57431030]
[132.47183228 321.57501221]
[122.56933594 330.26156616]
[110.73984528 336.02511597]
[97.82302094 338.46459961]
[96.39717865 353.39666748]
[94.97133636 368.32873535]
[93.54549408 383.26083374]
[103.32398987 392.68243408]
[105.79569244 405.83538818]
[100.26847076 417.80862427]
[88.99441528 424.26464844]
[87.09552765 439.14398193]
[85.19664764 454.02331543]
[83.29776001 468.90261841]
[94.04020691 480.26632690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 97]
[7 96]
[8 95]
[9 94]
[12 90]
[13 89]
[14 88]
[15 87]
[23 76]
[24 75]
[25 74]
[26 73]
[30 71]
[31 70]
[32 69]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
