%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAGUCCAAGGAGAACUACAUUUCCCAGGAGGCUACGGGAGCCUGCCAUGUUUCUCCCGUGCUCCUCUCGGCCAGCCGCCCGCCACGCUGUCGGCGCUAUAGCAACGGUAGCUAGCUGCAGGGCCAGUGGCACGCUAGGCC\
) } def
/len { sequence length } bind def

/coor [
[104.44103241 260.34899902]
[103.45998383 245.38111877]
[102.47893524 230.41323853]
[101.49788666 215.44535828]
[92.94474792 203.25137329]
[99.76290894 188.97470093]
[98.78186035 174.00682068]
[97.63760376 159.05053711]
[96.33026886 144.10760498]
[95.02293396 129.16468811]
[88.97663879 127.45607758]
[83.42749023 124.50923157]
[72.14989471 134.39941406]
[60.87229538 144.28961182]
[49.59469986 154.17979431]
[38.31710052 164.06997681]
[37.53367615 179.85484314]
[25.76222038 190.40037537]
[9.98652554 189.45010376]
[-0.43396601 177.56781006]
[0.68303806 161.80305481]
[12.67483902 151.50875854]
[28.42691422 152.79238892]
[39.70450974 142.90219116]
[50.98210907 133.01200867]
[62.25970459 123.12181854]
[73.53730011 113.23163605]
[70.95121765 105.61416626]
[70.51268005 97.58164978]
[72.25410461 89.72792053]
[59.96681976 81.12427521]
[47.67953873 72.52062988]
[35.39226151 63.91698074]
[23.10497856 55.31333542]
[4.76154184 54.16911697]
[-2.09532642 38.05026627]
[-14.56737041 29.71671295]
[-27.03941536 21.38315964]
[-39.51145935 13.04960632]
[-51.98350143 4.71605301]
[-64.45554352 -3.61750078]
[-76.92758942 -11.95105457]
[-89.39963531 -20.28460693]
[-102.26533508 -16.14819527]
[-114.97162628 -20.14218903]
[-122.92058563 -30.58527374]
[-123.37261963 -43.50649261]
[-135.65989685 -52.11013794]
[-152.10260010 -56.24221802]
[-152.68379211 -73.18620300]
[-136.56286621 -78.43524170]
[-127.05625153 -64.39741516]
[-114.76897430 -55.79376984]
[-98.38483429 -59.43379593]
[-84.13682556 -49.94160080]
[-81.06608582 -32.75665283]
[-68.59403992 -24.42309761]
[-56.12199402 -16.08954430]
[-43.64994812 -7.75599146]
[-31.17790604 0.57756209]
[-18.70586205 8.91111565]
[-6.23381710 17.24466896]
[6.23822689 25.57822227]
[18.20848465 23.53175163]
[28.68295097 30.43694115]
[31.70862579 43.02605438]
[43.99590683 51.62970352]
[56.28318787 60.23334885]
[68.57046509 68.83699799]
[80.85774994 77.44064331]
[103.54158783 70.62641144]
[123.95571899 82.63698578]
[137.93583679 77.20041656]
[151.91595459 71.76384735]
[165.89607239 66.32727814]
[177.03851318 51.71096039]
[194.25032043 54.96483612]
[208.10852051 49.22458649]
[217.89727783 36.79515457]
[232.61668396 39.07297134]
[246.47486877 33.33272171]
[252.59136963 19.00700378]
[266.72732544 13.38298702]
[280.34701538 19.30242157]
[294.20520020 13.56216908]
[297.81860352 3.20197344]
[306.38790894 -3.29158282]
[316.89907837 -3.94061685]
[325.82037354 1.22853565]
[339.91577148 -3.90176654]
[354.01116943 -9.03206825]
[368.10653687 -14.16237068]
[382.20193481 -19.29267311]
[388.38281250 -30.66972160]
[400.28756714 -34.62863159]
[411.32028198 -29.55376053]
[425.52423096 -34.37535477]
[432.28863525 -48.65885925]
[447.19964600 -53.89692307]
[461.41082764 -46.98189163]
[466.49096680 -32.01633453]
[459.42605591 -17.87904930]
[444.40762329 -12.95743656]
[430.34582520 -20.17140198]
[416.14187622 -15.34980965]
[405.34677124 -1.55488265]
[387.33224487 -5.19728374]
[373.23684692 -0.06698153]
[359.14144897 5.06332064]
[345.04608154 10.19362259]
[330.95068359 15.32392502]
[319.72973633 31.01683235]
[299.94546509 27.42036247]
[286.08728027 33.16061401]
[280.64236450 46.97686005]
[266.66995239 52.99570465]
[252.21513367 47.19091415]
[238.35693359 52.93116379]
[229.55940247 64.95001221]
[213.84877014 63.08277893]
[199.99058533 68.82302856]
[195.04183960 79.91289520]
[183.48107910 84.78577423]
[171.33264160 80.30739594]
[157.35252380 85.74396515]
[143.37240601 91.18053436]
[129.39228821 96.61710358]
[127.96406555 109.66237640]
[121.03411102 120.80664825]
[109.96585083 127.85735321]
[111.27318573 142.80027771]
[112.58052063 157.74319458]
[116.47151947 166.09309387]
[113.74974823 173.02577209]
[114.73079681 187.99366760]
[123.35410309 201.25823975]
[116.46577454 214.46430969]
[117.44681549 229.43218994]
[118.42786407 244.40007019]
[119.40891266 259.36795044]
[128.96472168 272.69531250]
[121.95523071 287.52093506]
[105.59119415 288.59350586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[4 137]
[6 135]
[7 134]
[8 132]
[9 131]
[10 130]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[47 53]
[48 52]
[72 127]
[73 126]
[74 125]
[75 124]
[77 121]
[78 120]
[80 118]
[81 117]
[84 114]
[85 113]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
