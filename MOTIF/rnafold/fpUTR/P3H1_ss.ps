%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCCGCCCGGCUUGGAAGGUGGGGCUUCGCCCGGGGGCGGGCCUUCGCCGGGGGUAGGACUCCGGCCUUGGUGGCGGGUGGCUGGCGGUUCCGUUAGGUCUGAGGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[206.17231750 272.95513916]
[204.51295471 263.56399536]
[207.48460388 254.35603333]
[198.93748474 242.02935791]
[190.05395508 229.94288635]
[180.84075928 218.10577393]
[171.62757874 206.26867676]
[162.41438293 194.43156433]
[153.20118713 182.59445190]
[143.98800659 170.75733948]
[134.77481079 158.92024231]
[125.56162262 147.08312988]
[118.87776184 143.69081116]
[116.26303101 134.79054260]
[107.37950134 122.70406342]
[92.68649292 122.72541046]
[80.76377869 114.13857269]
[76.12756348 100.19617462]
[80.53401947 86.17946625]
[71.65048981 74.09298706]
[62.76696014 62.00651169]
[53.88343048 49.92003250]
[44.99990463 37.83355713]
[30.59250832 31.29616165]
[29.28941536 16.45866776]
[20.40588760 4.37219191]
[11.52235794 -7.71428442]
[-2.88503718 -14.25167942]
[-4.18812943 -29.08917427]
[-13.07165813 -41.17565155]
[-21.95518684 -53.26212692]
[-31.00440598 -65.22505188]
[-40.21759796 -77.06216431]
[-49.43078613 -88.89926910]
[-58.64397812 -100.73637390]
[-72.19503784 -100.86960602]
[-83.01112366 -108.70556641]
[-87.23458862 -121.17031097]
[-83.52140045 -133.59262085]
[-92.40493011 -145.67909241]
[-101.28845978 -157.76556396]
[-110.17198181 -169.85205078]
[-119.05551147 -181.93852234]
[-134.28259277 -188.02688599]
[-136.35531616 -204.29452515]
[-123.14146423 -214.00666809]
[-108.23429108 -207.17231750]
[-106.96903992 -190.82205200]
[-98.08551025 -178.73558044]
[-89.20198059 -166.64909363]
[-80.31845093 -154.56262207]
[-71.43492126 -142.47615051]
[-54.77454376 -140.69720459]
[-44.29669952 -127.19474030]
[-46.80686951 -109.94956970]
[-37.59368134 -98.11245728]
[-28.38048935 -86.27535248]
[-19.16729927 -74.43824768]
[-12.48343754 -71.04592133]
[-9.86871052 -62.14565659]
[-0.98518181 -50.05917740]
[7.89834690 -37.97270203]
[21.67033195 -32.29981232]
[23.60883522 -16.59781265]
[32.49236298 -4.51133680]
[41.37589264 7.57514000]
[55.14787674 13.24802971]
[57.08638000 28.95002937]
[65.96990967 41.03650665]
[74.85343933 53.12298203]
[83.73696899 65.20945740]
[92.62049866 77.29593658]
[107.31350708 77.27458954]
[119.23622131 85.86142731]
[123.87243652 99.80382538]
[119.46598053 113.82053375]
[128.34951782 125.90701294]
[137.39872742 137.86993408]
[146.61192322 149.70704651]
[155.82510376 161.54415894]
[165.03829956 173.38125610]
[174.25149536 185.21836853]
[183.46467590 197.05548096]
[192.67787170 208.89259338]
[201.89106750 220.72969055]
[208.06657410 223.66320801]
[211.25311279 228.57951355]
[211.26414490 233.48223877]
[219.81127930 245.80891418]
[239.70886230 253.51036072]
[241.07510376 274.02642822]
[250.61096191 285.60519409]
[260.14682007 297.18392944]
[269.68267822 308.76269531]
[279.21853638 320.34143066]
[293.96417236 326.07522583]
[296.08264160 340.81842041]
[305.61849976 352.39715576]
[315.15435791 363.97592163]
[330.69372559 369.21621704]
[333.65945435 385.34497070]
[321.00067139 395.77029419]
[305.73965454 389.76751709]
[303.57562256 373.51177979]
[294.03976440 361.93301392]
[284.50390625 350.35427856]
[270.44030762 345.44866943]
[267.63977051 329.87728882]
[258.10391235 318.29855347]
[248.56806946 306.71978760]
[239.03221130 295.14105225]
[229.49635315 283.56228638]
[220.39611816 284.15792847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 85]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[14 77]
[15 76]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[25 66]
[26 65]
[27 64]
[29 62]
[30 61]
[31 60]
[32 58]
[33 57]
[34 56]
[35 55]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
