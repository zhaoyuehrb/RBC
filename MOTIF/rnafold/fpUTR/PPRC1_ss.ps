%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUCCUUUCCCACAAUCGGCUGGGCGAGGCGGCGCCAGCGAUCAGAGCAGCGCUGGGUGUUCAGGGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[69.08559418 163.78230286]
[56.96810532 154.94113159]
[50.58356857 141.36770630]
[51.50004578 126.39573669]
[59.49245071 113.70237732]
[72.59782410 106.40515900]
[87.59761810 106.29637146]
[72.61042786 105.67649841]
[57.62324524 105.05661774]
[42.63605881 104.43674469]
[28.52793121 111.59714508]
[16.13127518 103.34049988]
[1.14408827 102.72062683]
[-13.84309769 102.10075378]
[-28.83028412 101.48087311]
[-38.35603333 113.72994995]
[-53.27166367 118.00820923]
[-67.84181976 112.67057800]
[-76.46396637 99.76949310]
[-75.82272339 84.26567078]
[-66.16465759 72.12065887]
[-51.20349503 68.00445557]
[-36.69210052 73.49982452]
[-28.21040916 86.49369049]
[-13.22322369 87.11356354]
[1.76396286 87.73343658]
[16.75115013 88.35331726]
[29.78729248 81.14857483]
[43.25593185 89.44956207]
[58.24311829 90.06943512]
[73.23030853 90.68930817]
[88.21749115 91.30918121]
[101.69335938 84.72123718]
[110.40950775 72.51350403]
[119.12566376 60.30577469]
[127.84181213 48.09804153]
[136.55796814 35.89031219]
[145.27412415 23.68258095]
[143.94468689 10.66396904]
[151.69396973 0.62548983]
[163.82527161 -1.25934577]
[173.03846741 -13.09645367]
[169.58244324 -28.34735298]
[176.78399658 -42.22797394]
[191.24276733 -48.18431473]
[206.13175964 -43.40397263]
[214.42086792 -30.14407539]
[212.19621277 -14.66554546]
[200.50820923 -4.27686977]
[184.87557983 -3.88326263]
[175.66238403 7.95384502]
[174.33723450 25.32737160]
[157.48184204 32.39873505]
[148.76570129 44.60646439]
[140.04954529 56.81419373]
[131.33338928 69.02192688]
[122.61724091 81.22966003]
[113.90108490 93.43738556]
[115.75647736 108.32219696]
[127.20273590 118.01668549]
[138.64900208 127.71117401]
[153.68968201 123.89576721]
[168.08798218 129.68099976]
[176.30743408 142.84230042]
[175.18751526 158.31890869]
[165.15884399 170.15974426]
[150.07765198 173.81176758]
[135.74296570 167.87068176]
[127.66676331 154.62098694]
[128.95451355 139.15744019]
[117.50824738 129.46295166]
[106.06198883 119.76845551]
[110.53603363 134.08567810]
[107.58654785 148.79284668]
[97.93794250 160.27780151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 32]
[8 31]
[9 30]
[10 29]
[12 27]
[13 26]
[14 25]
[15 24]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[41 51]
[42 50]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
