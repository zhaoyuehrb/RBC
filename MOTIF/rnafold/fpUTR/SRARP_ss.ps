%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCUGGAAGAGUGGCCUAGGACAGCUCCUCUCCUGCCAGAGCUAGGCAGGCGCCGAAGUAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[152.56864929 208.09857178]
[146.86764526 200.25193787]
[144.21311951 190.87684631]
[144.96093750 181.11714172]
[149.04994202 172.17472839]
[139.58363342 160.53906250]
[130.11730957 148.90338135]
[120.65099335 137.26771545]
[111.18466949 125.63204956]
[98.97039795 127.94706726]
[86.95957184 124.73956299]
[77.52562714 116.64335632]
[72.53276825 105.25831604]
[72.96761322 92.83419800]
[78.74423218 81.82608032]
[70.37522125 69.37780762]
[62.00621414 56.92952347]
[53.63720322 44.48124695]
[47.39487839 40.96729660]
[44.55653000 35.55254745]
[45.13398361 30.49829865]
[37.93162918 17.34055901]
[30.72927666 4.18281984]
[23.52692223 -8.97491932]
[10.11364841 -17.36507225]
[10.78958607 -32.24433136]
[3.58723164 -45.40206909]
[-9.32178116 -56.39268875]
[-2.33425021 -71.83972168]
[14.44344521 -69.40142822]
[16.74497032 -52.60442352]
[23.94732475 -39.44668579]
[36.84543610 -31.99766350]
[36.68466187 -16.17727280]
[43.88701630 -3.01953411]
[51.08937073 10.13820457]
[58.29172134 23.29594421]
[66.08547974 36.11223602]
[74.45449066 48.56051254]
[82.82350159 61.00879288]
[91.19251251 73.45706940]
[108.43778992 73.33724213]
[122.47437286 83.35664368]
[127.96447754 99.70511627]
[122.82034302 116.16572571]
[132.28666687 127.80139923]
[141.75297546 139.43707275]
[151.21929932 151.07273865]
[160.68562317 162.70840454]
[182.13726807 162.61431885]
[197.14859009 177.57183838]
[197.13182068 198.50236511]
[208.97996521 207.70137024]
[220.82809448 216.90036011]
[235.34080505 211.66729736]
[250.37376404 215.13340759]
[261.13000488 226.19264221]
[264.17724609 241.31607056]
[258.54315186 255.67782593]
[246.02551270 264.69515991]
[230.61866760 265.49066162]
[217.23889160 257.81048584]
[210.15562439 244.10534668]
[211.62910461 228.74850464]
[199.78096008 219.54949951]
[187.93281555 210.35049438]
[179.43235779 214.63789368]
[169.93013000 215.73294067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 49]
[6 48]
[7 47]
[8 46]
[9 45]
[15 41]
[16 40]
[17 39]
[18 38]
[21 37]
[22 36]
[23 35]
[24 34]
[26 32]
[27 31]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
