%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:08 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (KIR2DL1)
} def

/sequence { (\
GAGCUCGGUCGCGGCUGCCUGUCUGCUCCGGCAGCACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.168882981 ubox
1 23 0.003632517 ubox
1 28 0.012513187 ubox
2 9 0.165948473 ubox
2 16 0.578444573 ubox
2 20 0.024445058 ubox
2 22 0.003609122 ubox
2 27 0.012559137 ubox
3 9 0.024615162 ubox
3 12 0.369508852 ubox
3 15 0.598540182 ubox
3 18 0.056673100 ubox
3 19 0.024194760 ubox
3 22 0.010025366 ubox
3 26 0.012563626 ubox
3 32 0.419215224 ubox
3 35 0.323377921 ubox
4 8 0.031247423 ubox
4 11 0.369576918 ubox
4 14 0.595096943 ubox
4 17 0.057045133 ubox
4 21 0.010502464 ubox
4 25 0.012446142 ubox
4 31 0.417089393 ubox
4 34 0.323472382 ubox
5 13 0.131751811 ubox
5 14 0.084246672 ubox
5 30 0.070103298 ubox
5 31 0.157617161 ubox
5 33 0.268872188 ubox
6 13 0.652682051 ubox
6 17 0.038552283 ubox
6 21 0.010491661 ubox
6 30 0.508527429 ubox
7 12 0.658514521 ubox
7 16 0.042801156 ubox
7 19 0.039677826 ubox
7 20 0.010992418 ubox
7 23 0.003723379 ubox
7 24 0.006097496 ubox
7 27 0.004496671 ubox
7 28 0.010788924 ubox
7 29 0.515174785 ubox
7 38 0.246600779 ubox
8 15 0.043441830 ubox
8 18 0.039693180 ubox
8 19 0.011060165 ubox
8 22 0.003203177 ubox
8 23 0.006484030 ubox
8 26 0.005622450 ubox
8 27 0.009088899 ubox
8 28 0.514908148 ubox
8 32 0.138313098 ubox
8 35 0.003645058 ubox
8 37 0.248384081 ubox
9 14 0.041365278 ubox
9 17 0.031785120 ubox
9 25 0.005111700 ubox
9 31 0.138799313 ubox
9 34 0.003586653 ubox
9 36 0.246252652 ubox
10 17 0.023354073 ubox
10 21 0.005995700 ubox
10 25 0.049933629 ubox
10 30 0.138781934 ubox
11 16 0.015958908 ubox
11 18 0.024911758 ubox
11 20 0.005529445 ubox
11 22 0.020734953 ubox
11 24 0.048538270 ubox
11 26 0.509750483 ubox
11 29 0.137281025 ubox
11 32 0.006392485 ubox
11 35 0.037010109 ubox
12 17 0.024978039 ubox
12 21 0.021626675 ubox
12 25 0.510130069 ubox
12 30 0.007659464 ubox
12 31 0.004765706 ubox
12 34 0.035966184 ubox
13 19 0.017923666 ubox
13 20 0.021420980 ubox
13 23 0.273747350 ubox
13 24 0.435835362 ubox
13 27 0.131613883 ubox
13 28 0.029732300 ubox
13 29 0.009453089 ubox
13 38 0.074112666 ubox
14 18 0.017683128 ubox
14 19 0.021169039 ubox
14 22 0.279492050 ubox
14 23 0.432728721 ubox
14 26 0.137453611 ubox
14 27 0.008522463 ubox
14 28 0.009575513 ubox
14 32 0.028460166 ubox
14 35 0.582378898 ubox
14 37 0.072399299 ubox
15 21 0.484370293 ubox
15 25 0.137438176 ubox
15 31 0.028565632 ubox
15 34 0.583609930 ubox
16 30 0.028388738 ubox
16 33 0.583815458 ubox
16 36 0.104038837 ubox
17 24 0.009552668 ubox
17 26 0.021577016 ubox
17 29 0.022886820 ubox
17 32 0.584330377 ubox
17 35 0.200785098 ubox
18 25 0.022068670 ubox
18 31 0.583429232 ubox
18 34 0.143305335 ubox
19 30 0.582007260 ubox
19 31 0.032606044 ubox
19 34 0.165055810 ubox
20 30 0.045938680 ubox
20 33 0.216960733 ubox
20 36 0.403059905 ubox
21 29 0.196814323 ubox
21 32 0.217615789 ubox
21 35 0.454853264 ubox
21 37 0.314220058 ubox
22 31 0.214751085 ubox
22 34 0.065682031 ubox
22 36 0.314607227 ubox
23 30 0.213706056 ubox
23 31 0.034764814 ubox
23 34 0.564790750 ubox
24 30 0.035035549 ubox
24 33 0.569693530 ubox
24 36 0.010410667 ubox
25 29 0.043365108 ubox
25 32 0.570134828 ubox
25 35 0.011823143 ubox
26 31 0.570057381 ubox
26 34 0.011824729 ubox
27 33 0.011338262 ubox
30 38 0.005841617 ubox
31 37 0.006234922 ubox
2 16 0.9500000 lbox
3 15 0.9500000 lbox
4 14 0.9500000 lbox
6 13 0.9500000 lbox
7 12 0.9500000 lbox
20 36 0.9500000 lbox
21 35 0.9500000 lbox
23 34 0.9500000 lbox
24 33 0.9500000 lbox
25 32 0.9500000 lbox
26 31 0.9500000 lbox
showpage
end
%%EOF
