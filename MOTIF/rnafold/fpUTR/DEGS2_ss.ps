%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGAGCUGGUUCCGCGCCGCGGCCGCCGCGACAGGUGCAGCAGAGCCGAGCCGGCCGCGCUCCGAACGGCGCCUCCCGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[150.13449097 282.35046387]
[150.70500183 267.36132812]
[155.21440125 253.05519104]
[163.34240723 240.44822693]
[174.51170349 230.43588257]
[187.92892456 223.72932434]
[202.64108276 220.80488586]
[217.60072327 221.86979675]
[206.71707153 211.54768372]
[195.83341980 201.22557068]
[184.94976807 190.90344238]
[174.06611633 180.58132935]
[163.18246460 170.25921631]
[152.29881287 159.93708801]
[141.41516113 149.61497498]
[126.85619354 146.47082520]
[122.16746521 131.36035156]
[111.28381348 121.03823090]
[96.82684326 123.66141510]
[83.57183838 117.32186890]
[76.53967285 104.42095184]
[78.39407349 89.84542084]
[67.51042175 79.52330017]
[52.17297745 75.64083862]
[48.26272202 61.26867294]
[37.37906647 50.94655609]
[28.79838943 47.19873047]
[26.30161095 40.06290436]
[15.78902054 29.36311722]
[5.27643108 18.66333008]
[-10.52746677 18.77450371]
[-21.72230530 7.61873674]
[-21.66638565 -8.18545341]
[-10.39288330 -19.26172066]
[5.40983248 -19.03871155]
[16.36629105 -7.64873457]
[15.97621822 8.15073967]
[26.48880768 18.85052681]
[37.00139999 29.55031395]
[47.70118713 40.06290436]
[58.58483887 50.38502121]
[73.14380646 53.52917480]
[77.83253479 68.63964844]
[88.71618652 78.96176910]
[103.17315674 76.33858490]
[116.42816162 82.67813110]
[123.46032715 95.57904816]
[121.60592651 110.15457916]
[132.48957825 120.47669983]
[147.82702637 124.35916138]
[151.73727417 138.73132324]
[162.62092590 149.05343628]
[173.50457764 159.37556458]
[184.38822937 169.69767761]
[195.27189636 180.01979065]
[206.15554810 190.34191895]
[217.03919983 200.66403198]
[227.92285156 210.98614502]
[234.35778809 212.06837463]
[239.06607056 215.77560425]
[254.04505920 216.56945801]
[269.02404785 217.36329651]
[284.00302124 218.15715027]
[298.98199463 218.95100403]
[310.56402588 208.19775391]
[326.35412598 208.86726379]
[336.98431396 220.56233215]
[336.14788818 236.34446716]
[324.34109497 246.85043335]
[308.56866455 245.84719849]
[298.18814087 233.92999268]
[283.20916748 233.13613892]
[268.23019409 232.34228516]
[253.25120544 231.54843140]
[238.27221680 230.75457764]
[249.34086609 240.87808228]
[257.34243774 253.56565857]
[261.70861816 267.91613770]
[262.12927246 282.91024780]
[258.57449341 297.48294067]
[251.29682922 310.59918213]
[240.81315613 321.32730103]
[227.86813354 328.90533447]
[213.38122559 332.79498291]
[198.38142395 332.72003174]
[183.93411255 328.68572998]
[171.06549072 320.97869873]
[160.68959045 310.14630127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[22 44]
[23 43]
[25 41]
[26 40]
[28 39]
[29 38]
[30 37]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
