%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACGCCUGGCAUCCAAGUCCACCCACUCCGGACUUUGGCCUUAGCAGUAGUUAGUGUGGGAGGCUGGGAAGACUGGGAGCAGUCUCUUAAACAAAAGCAAAAGAAUAAGCUUCGGGCGCUGUAGUACCUGCCAGCUUUCGCCACAGGAGCCUAGGCUGCCACCUGUAGGUCACUUGGGCUCCAGCU\
) } def
/len { sequence length } bind def

/coor [
[45.92538071 386.28924561]
[48.05624390 371.44137573]
[58.83119583 361.00411987]
[47.10372543 370.35644531]
[35.37625122 379.70880127]
[23.72691154 389.15829468]
[12.15650940 398.70428467]
[10.81223202 416.13687134]
[-2.45670938 426.99728394]
[-19.14098358 424.95108032]
[-30.55111885 434.68807983]
[-41.96125793 444.42504883]
[-40.57379532 456.25503540]
[-45.03190231 467.17086792]
[-54.11748123 474.49661255]
[-65.49400330 476.49731445]
[-76.30680084 472.78866577]
[-88.03427124 482.14102173]
[-99.76174164 491.49337769]
[-111.48921204 500.84570312]
[-123.21669006 510.19805908]
[-134.94415283 519.55041504]
[-133.27104187 534.88677979]
[-140.17543030 548.68292236]
[-153.45416260 556.53649902]
[-168.87005615 555.94146729]
[-181.50393677 547.08770752]
[-187.32438660 532.80047607]
[-184.47412109 517.63867188]
[-173.86265564 506.44046021]
[-158.87605286 502.77911377]
[-144.29650879 507.82293701]
[-132.56903076 498.47058105]
[-120.84156036 489.11825562]
[-109.11408997 479.76589966]
[-97.38661957 470.41354370]
[-85.65914917 461.06118774]
[-84.72171783 442.79275513]
[-70.49739075 430.79058838]
[-51.69823837 433.01492310]
[-40.28810120 423.27792358]
[-28.87796402 413.54095459]
[-29.66692162 400.66888428]
[-22.79033470 389.52954102]
[-10.57147217 384.31341553]
[2.61052656 387.13388062]
[14.18092918 377.58789062]
[17.34560776 370.89328003]
[26.02390480 367.98132324]
[37.75137711 358.62899780]
[49.47884750 349.27664185]
[42.74053955 336.23983765]
[42.53224182 322.18041992]
[48.35431290 310.05932617]
[58.49231720 302.19113159]
[70.47669220 299.80520630]
[73.69285583 285.15405273]
[76.90901184 270.50289917]
[68.68875885 258.13507080]
[71.74169159 243.23091125]
[84.76993561 234.69261169]
[87.98609924 220.04145813]
[91.20225525 205.39030457]
[94.41841125 190.73915100]
[97.63457489 176.08799744]
[100.85073090 161.43684387]
[104.06689453 146.78569031]
[107.28305054 132.13453674]
[110.49921417 117.48337555]
[93.36244965 127.81414795]
[68.85269928 119.59183502]
[56.02436066 90.46179962]
[48.85055161 77.28847504]
[41.67673874 64.11515045]
[34.50292969 50.94182587]
[27.32912064 37.76850128]
[20.15531158 24.59517860]
[5.88754654 16.51044464]
[6.02583742 0.11188089]
[20.42792320 -7.73107672]
[34.27817154 1.04973507]
[33.32863617 17.42136955]
[40.50244522 30.59469223]
[47.67625427 43.76801682]
[54.85006332 56.94134140]
[62.02387238 70.11466217]
[69.19768524 83.28798676]
[76.68111420 82.78968811]
[75.68451691 67.82283020]
[74.68791962 52.85597610]
[69.11511230 38.92960739]
[80.63779449 29.32608223]
[93.33198547 37.31717682]
[89.65477753 51.85937881]
[90.65137482 66.82623291]
[91.64796448 81.79309082]
[99.13139343 81.29479218]
[104.49527740 67.28662872]
[109.85915375 53.27845764]
[115.22303009 39.27028656]
[105.48526764 27.39293289]
[103.00662994 12.23536301]
[108.45386505 -2.12511253]
[120.36167908 -11.82559872]
[135.52694702 -14.25671196]
[149.87026978 -8.76449585]
[159.53338623 3.17367053]
[161.91696167 18.34648132]
[156.37980652 32.67252731]
[144.41140747 42.29817200]
[129.23120117 44.63416672]
[123.86732483 58.64233398]
[118.50344086 72.65050507]
[113.13956451 86.65867615]
[124.94435883 95.91323090]
[137.26728821 87.36071777]
[149.59020996 78.80820465]
[161.91314697 70.25569153]
[168.83882141 56.03087234]
[183.70619202 55.13060760]
[196.02911377 46.57809830]
[202.52815247 31.52171898]
[218.84600830 29.89087868]
[228.19627380 43.36324692]
[220.96018982 58.07960129]
[204.58163452 58.90102386]
[192.25871277 67.45353699]
[186.21444702 81.06662750]
[170.46565247 82.57862091]
[158.14273071 91.13113403]
[145.81979370 99.68364716]
[133.49687195 108.23616028]
[125.15036774 120.69953918]
[121.93420410 135.35069275]
[118.71804810 150.00184631]
[115.50188446 164.65299988]
[112.28572845 179.30415344]
[109.06957245 193.95530701]
[105.85340881 208.60646057]
[102.63725281 223.25761414]
[99.42108917 237.90876770]
[107.67521667 251.11888123]
[104.20486450 265.93142700]
[91.56016541 273.71905518]
[88.34400940 288.37020874]
[85.12784576 303.02136230]
[101.84198761 323.82879639]
[92.10615540 352.11505127]
[102.49010468 362.93972778]
[112.87405396 373.76440430]
[123.25800323 384.58908081]
[133.64195251 395.41375732]
[144.02589417 406.23843384]
[154.40983582 417.06311035]
[164.79379272 427.88778687]
[175.17773438 438.71246338]
[185.56167603 449.53713989]
[201.13073730 450.02941895]
[211.50733948 461.15512085]
[210.94207764 475.99478149]
[221.32603455 486.81945801]
[231.70997620 497.64413452]
[247.29994202 496.42471313]
[259.99627686 505.55364990]
[263.80413818 520.72052002]
[256.92559814 534.76403809]
[242.60845947 541.05322266]
[227.61286926 536.61853027]
[219.01927185 523.55395508]
[220.88529968 508.02807617]
[210.50135803 497.20339966]
[200.11740112 486.37872314]
[185.26705933 486.32699585]
[174.58206177 475.49716187]
[174.73699951 459.92111206]
[164.35305786 449.09643555]
[153.96911621 438.27175903]
[143.58515930 427.44708252]
[133.20121765 416.62237549]
[122.81726837 405.79769897]
[112.43331909 394.97302246]
[102.04937744 384.14834595]
[91.66542816 373.32366943]
[81.28147888 362.49899292]
[90.57705688 374.27151489]
[90.72130585 389.27084351]
[81.65386200 401.21997070]
[67.16931152 405.11837769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 47]
[7 46]
[10 42]
[11 41]
[12 40]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[56 146]
[57 145]
[58 144]
[61 141]
[62 140]
[63 139]
[64 138]
[65 137]
[66 136]
[67 135]
[68 134]
[69 133]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
[97 114]
[98 113]
[99 112]
[100 111]
[115 132]
[116 131]
[117 130]
[118 129]
[120 127]
[121 126]
[148 184]
[149 183]
[150 182]
[151 181]
[152 180]
[153 179]
[154 178]
[155 177]
[156 176]
[157 175]
[160 172]
[161 171]
[162 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
