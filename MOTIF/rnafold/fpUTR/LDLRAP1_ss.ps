%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUGGCGCUGGGAGGGGAGGAGCGCGCAGCCCGCGCGCCGCAGGGCCGGGCGGAAAGUUUUUCCUGACGGAGUUUUGGCUGCGGCAGCGGCGGCGGCGGCCGGAGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[109.55170441 134.54222107]
[95.22401428 130.10180664]
[99.66407013 115.77449036]
[92.50015259 113.55451202]
[79.79151154 121.52259827]
[67.08287048 129.49067688]
[54.37422562 137.45877075]
[41.77560043 145.59968567]
[29.28934479 153.91194153]
[16.80309105 162.22418213]
[4.31683636 170.53643799]
[-8.16941833 178.84867859]
[-6.51679659 194.06469727]
[-12.13550091 208.30158997]
[-23.73439407 218.28778076]
[-38.64813614 221.72856140]
[-53.44965744 217.83323669]
[-64.73767853 207.49693298]
[-69.91828918 193.09484863]
[-67.80103302 177.93649292]
[-58.87242889 165.50512695]
[-45.18421173 158.65740967]
[-29.88183212 158.96687317]
[-16.48166466 166.36242676]
[-3.99541044 158.05017090]
[8.49084473 149.73793030]
[20.97709846 141.42568970]
[33.46335220 133.11343384]
[37.33987045 126.70058441]
[46.40613937 124.75012207]
[59.11478043 116.78203583]
[71.82342529 108.81394958]
[84.53206635 100.84586334]
[94.77036285 89.88332367]
[101.85260773 76.66054535]
[108.93484497 63.43777084]
[116.01708984 50.21499252]
[117.34430695 41.03675461]
[123.47766113 36.73164749]
[130.91844177 23.70725441]
[138.35920715 10.68286037]
[145.79998779 -2.34153390]
[153.24076843 -15.36592770]
[160.68154907 -28.39032173]
[157.17599487 -38.86723709]
[160.03256226 -49.31012726]
[168.04844666 -56.25396347]
[178.35281372 -57.53725815]
[186.49374390 -70.13587952]
[194.63465881 -82.73450470]
[202.77558899 -95.33312988]
[210.74366760 -108.04177094]
[218.53742981 -120.85806274]
[226.33119202 -133.67436218]
[226.89064026 -149.48567200]
[240.11442566 -156.33992004]
[247.90818787 -169.15620422]
[255.70195007 -181.97250366]
[263.49569702 -194.78878784]
[263.40884399 -199.44557190]
[264.75250244 -203.43807983]
[267.11611938 -206.38114929]
[270.00341797 -208.07386780]
[272.90411377 -208.51155090]
[282.04907227 -220.40144348]
[291.19403076 -232.29135132]
[300.33898926 -244.18124390]
[301.96047974 -260.50003052]
[317.01312256 -267.00772095]
[330.01205444 -257.00973511]
[327.58511353 -240.79118347]
[312.22888184 -235.03628540]
[303.08392334 -223.14639282]
[293.93896484 -211.25648499]
[284.79400635 -199.36659241]
[276.31198120 -186.99502563]
[268.51824951 -174.17874146]
[260.72448730 -161.36245728]
[252.93070984 -148.54615784]
[252.92872620 -133.65155029]
[239.14747620 -125.88059998]
[231.35372925 -113.06430817]
[223.55996704 -100.24801636]
[222.76248169 -92.79710388]
[215.37420654 -87.19220734]
[207.23329163 -74.59358215]
[199.09236145 -61.99495697]
[190.95143127 -49.39633179]
[191.54081726 -30.14953423]
[173.70593262 -20.94954491]
[166.26516724 -7.92515087]
[158.82438660 5.09924316]
[151.38360596 18.12363625]
[143.94282532 31.14803123]
[136.50205994 44.17242432]
[129.23986816 57.29723358]
[122.15762329 70.52001190]
[115.07538605 83.74279022]
[107.99314117 96.96556854]
[123.55648041 100.91543579]
[134.91398621 116.45843506]
[140.88999939 130.21659851]
[146.86601257 143.97477722]
[152.84202576 157.73294067]
[167.63452148 163.29692078]
[174.08386230 177.72541809]
[168.36380005 192.45825195]
[153.86793518 198.75469971]
[139.19639587 192.87918091]
[133.05355835 178.31755066]
[139.08386230 163.70895386]
[133.10784912 149.95079041]
[127.13182831 136.19261169]
[121.15580750 122.43444824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[7 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[34 99]
[35 98]
[36 97]
[37 96]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[48 88]
[49 87]
[50 86]
[51 85]
[52 83]
[53 82]
[54 81]
[56 79]
[57 78]
[58 77]
[59 76]
[64 75]
[65 74]
[66 73]
[67 72]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
