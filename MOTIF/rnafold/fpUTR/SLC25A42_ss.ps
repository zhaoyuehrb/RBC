%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGGGCCGUGGCGGCUGGAGGUAGCGGCGGCGGCGACGCGUCCGGGCCGGUGAGGGGGCGCGGGGGGCGCCGGGGGGGCCCAAGCGUCAGCGGCCCGCGCCUGUCGGGCUGAACUGAGGACCGAGUCUCCUGCCAUUCCGAGCAGGCCUGGU\
) } def
/len { sequence length } bind def

/coor [
[-185.52153015 348.37902832]
[-197.63911438 357.22006226]
[-204.22705078 371.60443115]
[-219.06903076 372.85543823]
[-231.18661499 381.69647217]
[-243.30421448 390.53750610]
[-245.87669373 405.90045166]
[-258.29159546 414.69390869]
[-272.92196655 412.14675903]
[-285.03955078 420.98779297]
[-297.15713501 429.82885742]
[-309.27471924 438.66989136]
[-321.39233398 447.51092529]
[-327.98025513 461.89529419]
[-342.82223511 463.14630127]
[-354.93981934 471.98733521]
[-361.52774048 486.37170410]
[-376.36972046 487.62268066]
[-388.48730469 496.46374512]
[-400.60488892 505.30477905]
[-412.72250366 514.14581299]
[-418.86428833 529.35144043]
[-435.13906860 531.36706543]
[-444.80477905 518.11914062]
[-437.91815186 503.23608398]
[-421.56353760 502.02822876]
[-409.44595337 493.18719482]
[-397.32836914 484.34613037]
[-385.21078491 475.50509644]
[-379.48956299 461.75311279]
[-363.78085327 459.86975098]
[-351.66326904 451.02868652]
[-345.94207764 437.27670288]
[-330.23336792 435.39334106]
[-318.11578369 426.55230713]
[-305.99819946 417.71127319]
[-293.88058472 408.87020874]
[-281.76300049 400.02917480]
[-279.72332764 385.31945801]
[-267.56030273 376.18078613]
[-252.14524841 378.41992188]
[-240.02766418 369.57888794]
[-227.91007996 360.73785400]
[-222.18887329 346.98583984]
[-206.48016357 345.10247803]
[-194.36257935 336.26144409]
[-182.51577759 327.06072998]
[-170.95042419 317.50860596]
[-159.38507080 307.95651245]
[-147.81973267 298.40441895]
[-136.25437927 288.85229492]
[-124.68903351 279.30020142]
[-119.80317688 265.22973633]
[-104.23575592 262.40731812]
[-92.67041016 252.85522461]
[-91.51689148 238.04965210]
[-79.92405701 228.19770813]
[-64.40243530 229.50801086]
[-52.83708572 219.95590210]
[-41.27173996 210.40379333]
[-29.70639038 200.85168457]
[-28.55287361 186.04611206]
[-16.96004105 176.19416809]
[-1.43841434 177.50447083]
[10.12693310 167.95236206]
[21.69228172 158.40025330]
[33.25762939 148.84814453]
[44.82297897 139.29605103]
[56.38832474 129.74394226]
[67.95367432 120.19183350]
[79.51902008 110.63972473]
[91.08436584 101.08762360]
[85.70326996 94.40376282]
[85.95169067 83.42929077]
[94.17861176 72.51419067]
[101.37333679 59.35227203]
[108.56805420 46.19035721]
[115.76277924 33.02844620]
[114.32965088 12.95790005]
[131.17045593 3.52314830]
[137.83282471 -9.91608524]
[144.49517822 -23.35531807]
[151.15753174 -36.79455185]
[157.81988525 -50.23378372]
[157.47451782 -55.55473709]
[159.07781982 -60.00954819]
[161.95980835 -62.99319458]
[165.30648804 -64.26129913]
[172.76312256 -77.27661896]
[172.16737366 -93.66494751]
[186.20402527 -102.14459229]
[200.43336487 -93.99242401]
[200.21748352 -77.59470367]
[185.77844238 -69.81998444]
[178.32180786 -56.80466461]
[171.25912476 -43.57142639]
[164.59677124 -30.13219452]
[157.93441772 -16.69296074]
[151.27204895 -3.25372767]
[144.60969543 10.18550587]
[148.75062561 19.60178947]
[146.95776367 29.95454597]
[139.58918762 37.75040436]
[128.92469788 40.22316742]
[121.72997284 53.38507843]
[114.53524780 66.54699707]
[107.34052277 79.70890808]
[114.92700195 92.64897156]
[129.92625427 92.79904938]
[144.92550659 92.94911957]
[159.92475891 93.09919739]
[175.71441650 83.67504120]
[190.47822571 93.11752319]
[205.47746277 92.96745300]
[216.36004639 81.50685883]
[232.16098022 81.18166351]
[243.50587463 92.18479919]
[243.66400146 107.98829651]
[232.54153442 119.21622467]
[216.73724365 119.20725250]
[205.62754822 107.96669769]
[190.62829590 108.11677551]
[181.90763855 116.55037689]
[169.37634277 116.76535034]
[159.77467346 108.09844208]
[144.77543640 107.94837189]
[129.77618408 107.79830170]
[114.77693176 107.64822388]
[100.63647461 112.65296936]
[89.07112885 122.20507812]
[77.50577545 131.75718689]
[65.94042969 141.30928040]
[54.37508392 150.86138916]
[42.80973434 160.41349792]
[31.24438667 169.96560669]
[19.67903900 179.51771545]
[8.11369133 189.06982422]
[6.46752262 204.55941772]
[-5.39745808 214.08186340]
[-20.15428543 212.41703796]
[-31.71963310 221.96914673]
[-43.28498077 231.52124023]
[-54.85033035 241.07334900]
[-56.49649811 256.56295776]
[-68.36148071 266.08538818]
[-83.11830902 264.42056274]
[-94.68365479 273.97268677]
[-100.39673615 288.72634888]
[-115.13692474 290.86553955]
[-126.70227814 300.41763306]
[-138.26762390 309.96975708]
[-149.83297729 319.52185059]
[-161.39831543 329.07397461]
[-172.96366882 338.62606812]
[-174.81906128 343.62500000]
[-178.10021973 347.03817749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[4 43]
[5 42]
[6 41]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[15 32]
[16 31]
[18 29]
[19 28]
[20 27]
[21 26]
[47 154]
[48 153]
[49 152]
[50 151]
[51 150]
[52 149]
[54 147]
[55 146]
[58 143]
[59 142]
[60 141]
[61 140]
[64 137]
[65 136]
[66 135]
[67 134]
[68 133]
[69 132]
[70 131]
[71 130]
[72 129]
[75 107]
[76 106]
[77 105]
[78 104]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[88 95]
[89 94]
[108 128]
[109 127]
[110 126]
[111 125]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
