%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCGCCUCAGCCCGCCGCGCCGCCCUCAGUACAGCUCCGGCCGCCGCGCCGCCUGGCUUUCGUAUUCGUUGUUCUCGGCGGGCUGUGGGGCCUCCGCGCCGCGGCCGUUAGUC\
) } def
/len { sequence length } bind def

/coor [
[225.13581848 333.03698730]
[217.40251160 320.18414307]
[204.21115112 313.26766968]
[203.72618103 297.45388794]
[195.99287415 284.60104370]
[189.76542664 280.43673706]
[188.22961426 271.29376221]
[180.84718323 258.23620605]
[167.84796143 250.96507263]
[167.79139709 235.14396667]
[160.40898132 222.08641052]
[153.02655029 209.02885437]
[145.64413452 195.97129822]
[138.26170349 182.91372681]
[130.87927246 169.85617065]
[123.49685669 156.79861450]
[116.11442566 143.74105835]
[108.73200226 130.68350220]
[101.34957886 117.62594604]
[84.85287476 109.11372375]
[85.05941772 90.55149078]
[76.98089600 77.91275787]
[63.02925873 70.45204163]
[62.69406891 55.56120682]
[54.61554718 42.92247772]
[44.98296738 42.11536789]
[36.96348953 36.97148514]
[32.34968567 28.79489899]
[32.10017014 19.54869843]
[36.14309311 11.38422012]
[29.11696625 -1.86846042]
[22.09084129 -15.12114143]
[15.06471348 -28.37382126]
[8.03858757 -41.62650299]
[0.48002818 -54.58289719]
[-7.59849119 -67.22162628]
[-15.67701054 -79.86035919]
[-23.75552940 -92.49909210]
[-42.02589417 -100.80491638]
[-42.38692093 -120.05891418]
[-51.13784027 -132.24174500]
[-59.88875961 -144.42457581]
[-68.63967896 -156.60742188]
[-84.27435303 -158.91661072]
[-93.62969208 -171.65447998]
[-91.15531921 -187.26387024]
[-78.31925201 -196.48400879]
[-62.73689651 -193.84474182]
[-53.65298462 -180.91191101]
[-56.45684433 -165.35833740]
[-47.70592499 -153.17550659]
[-38.95500946 -140.99267578]
[-30.20409012 -128.80982971]
[-19.85216331 -128.03575134]
[-11.50568581 -121.49813080]
[-8.13657093 -111.21252441]
[-11.11679935 -100.57761383]
[-3.03827953 -87.93888092]
[5.04023981 -75.30014801]
[13.11875916 -62.66141891]
[16.60391426 -61.56758881]
[19.69549561 -58.65237045]
[21.50610161 -54.13830566]
[21.29126740 -48.65262985]
[28.31739426 -35.39994812]
[35.34352112 -22.14726830]
[42.36964798 -8.89458656]
[49.39577484 4.35809374]
[67.81091309 13.51151848]
[67.25428009 34.84395599]
[75.33280182 47.48268890]
[88.70661163 54.03939819]
[89.61962891 69.83423615]
[97.69815063 82.47296906]
[107.67764282 84.07677460]
[115.14712524 90.88627625]
[117.66463470 100.67528534]
[114.40713501 110.24352264]
[121.78955841 123.30107880]
[129.17198181 136.35864258]
[136.55441284 149.41619873]
[143.93682861 162.47375488]
[151.31925964 175.53131104]
[158.70169067 188.58886719]
[166.08410645 201.64642334]
[173.46653748 214.70397949]
[180.84895325 227.76153564]
[194.37622070 235.96664429]
[193.90475464 250.85377502]
[201.28717041 263.91134644]
[208.84573364 276.86773682]
[216.57904053 289.72058105]
[230.32353210 297.55636597]
[230.25537109 312.45083618]
[237.98867798 325.30368042]
[247.38632202 336.99487305]
[258.27624512 347.31036377]
[269.16619873 357.62585449]
[280.05612183 367.94134521]
[295.71331787 374.44430542]
[293.79885864 391.28982544]
[277.08169556 394.11346436]
[269.74063110 378.83129883]
[258.85070801 368.51580811]
[247.96076965 358.20031738]
[237.07083130 347.88482666]
[238.47880554 362.81860352]
[232.39382935 376.52893066]
[220.37477112 385.50344849]
[205.50070190 387.44308472]
[191.58210754 381.85089111]
[182.18467712 370.15951538]
[179.71586609 355.36407471]
[184.80815125 341.25491333]
[196.15696716 331.44653320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[4 92]
[5 91]
[7 90]
[8 89]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[21 74]
[22 73]
[24 71]
[25 70]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 60]
[36 59]
[37 58]
[38 57]
[40 53]
[41 52]
[42 51]
[43 50]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
