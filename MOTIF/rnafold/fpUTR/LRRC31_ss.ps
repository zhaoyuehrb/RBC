%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUGUAGGGGAGGAUAUUUUGAUUGAACACAGGCUUGACAGAAUCUUCUUUUCUUCUUAGAAAUCCUAGAAAACAGAAAGCAACAGGAAGAUGUCUUAUUGGGAACUACCCCCAUCAACUUCACC\
) } def
/len { sequence length } bind def

/coor [
[156.78863525 474.14724731]
[145.37103271 464.28314209]
[136.89628601 451.79949951]
[131.94224548 437.54748535]
[130.84666443 422.49880981]
[133.68424988 407.67956543]
[140.26153564 394.10009766]
[150.13005066 382.68630981]
[162.61697388 374.21640015]
[176.87089539 369.26785278]
[175.77595520 354.30786133]
[174.68103027 339.34786987]
[173.58610535 324.38787842]
[170.32464600 309.74676514]
[164.96618652 295.73651123]
[159.60772705 281.72625732]
[154.24926758 267.71603394]
[148.89079285 253.70578003]
[143.53233337 239.69554138]
[138.17387390 225.68530273]
[132.81541443 211.67506409]
[127.45693970 197.66482544]
[122.09848022 183.65457153]
[111.13484192 178.39199829]
[106.58956909 166.67956543]
[111.43281555 154.65243530]
[106.41709900 140.51585388]
[101.40139008 126.37928772]
[92.62664795 125.36660004]
[84.67629242 121.51777649]
[78.43921661 115.26313019]
[74.61276245 107.30197906]
[73.62475586 98.52442169]
[75.58566284 89.91184998]
[80.27623749 82.42718506]
[87.17204285 76.90726471]
[83.91059113 62.26612854]
[80.64913940 47.62499237]
[77.38768768 32.98385239]
[62.38217163 30.96895599]
[48.99652863 23.95493126]
[38.83736038 12.80542278]
[33.11654663 -1.12089610]
[32.50669861 -16.13587379]
[37.06214142 -30.42651749]
[46.21466446 -42.27389526]
[58.84434891 -50.25990677]
[55.58289719 -64.90104675]
[52.32144547 -79.54218292]
[36.75053787 -86.02070618]
[28.16142273 -100.34185028]
[29.74702072 -116.79945374]
[40.69097900 -128.97116089]
[37.07396698 -143.52853394]
[33.45695496 -158.08590698]
[29.83994293 -172.64328003]
[26.22293091 -187.20066833]
[14.45737362 -198.62448120]
[18.72973251 -214.45733643]
[34.64496994 -218.41172791]
[45.83085632 -206.41972351]
[40.78030777 -190.81767273]
[44.39731979 -176.26029968]
[48.01433182 -161.70292664]
[51.63134384 -147.14553833]
[55.24835587 -132.58816528]
[68.08569336 -128.71893311]
[77.39034271 -118.91511536]
[80.63581085 -105.68235779]
[76.86351776 -92.47708130]
[66.96258545 -82.80363464]
[70.22403717 -68.16249847]
[73.48548889 -53.52136230]
[88.31072998 -51.65119553]
[101.62656403 -44.80885696]
[111.81703949 -33.80300522]
[117.63806152 -19.94886780]
[118.36928558 -4.91106844]
[113.90316772 9.49636078]
[104.76030731 21.52882385]
[92.02882385 29.72240067]
[95.29027557 44.36354065]
[98.55173492 59.00467682]
[101.81318665 73.64581299]
[120.41707611 83.23773193]
[126.20278931 103.35327148]
[115.53796387 121.36357880]
[120.55367279 135.50015259]
[125.56938171 149.63671875]
[139.84306335 161.19432068]
[136.10871887 178.29611206]
[141.46717834 192.30635071]
[146.82565308 206.31660461]
[152.18411255 220.32684326]
[157.54257202 234.33708191]
[162.90103149 248.34732056]
[168.25950623 262.35757446]
[173.61796570 276.36779785]
[178.97642517 290.37805176]
[184.33488464 304.38827515]
[188.56398010 289.99679565]
[198.51382446 278.77182007]
[212.29380798 272.84625244]
[227.28547668 273.34606934]
[240.64016724 280.17630005]
[249.82026672 292.03909302]
[253.08140564 306.68029785]
[249.80389404 321.31787109]
[240.61053467 333.17037964]
[227.24821472 339.98568726]
[212.25598145 340.46871948]
[198.48265076 334.52777100]
[188.54608154 323.29296875]
[189.64102173 338.25296021]
[190.73594666 353.21292114]
[191.83087158 368.17291260]
[206.65341187 370.99334717]
[220.24049377 377.55487061]
[231.66571045 387.41015625]
[240.15008545 399.88726807]
[245.11512756 414.13543701]
[246.22232056 429.18325806]
[243.39617920 444.00469971]
[236.82939148 457.58923340]
[226.96969604 469.01065063]
[214.48931885 477.49020386]
[200.23922729 482.44976807]
[185.19099426 483.55114746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 116]
[11 115]
[12 114]
[13 113]
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[23 91]
[26 89]
[27 88]
[28 87]
[36 84]
[37 83]
[38 82]
[39 81]
[47 73]
[48 72]
[49 71]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
