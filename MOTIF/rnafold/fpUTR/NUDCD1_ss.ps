%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUUUUCUGGGAUGGGAACCACGCCGCUUCCCAGUCUCUGUGCGAGGCGUGAAGCGCGGACCUUUCAACAAGGGCUUUAUUAAUUCUCACGCUGCGGCCCUGGAAAGCG\
) } def
/len { sequence length } bind def

/coor [
[85.99253845 295.29672241]
[71.98627472 287.47341919]
[69.51228333 271.62228394]
[80.46839905 259.90292358]
[81.30945587 244.92652893]
[82.15051270 229.95011902]
[82.99156952 214.97372437]
[83.83262634 199.99731445]
[84.67368317 185.02091980]
[85.51473999 170.04450989]
[86.35579681 155.06811523]
[87.19685364 140.09170532]
[88.03791046 125.11530304]
[76.98445892 101.67430878]
[89.80358887 84.76267242]
[87.29099274 69.97460938]
[84.77840424 55.18653870]
[82.26580811 40.39847565]
[79.75321198 25.61041069]
[77.24062347 10.82234478]
[56.66747665 4.59063578]
[42.24649811 -11.22527695]
[37.97268295 -32.10298157]
[44.95772171 -52.13811874]
[34.35112000 -62.74472046]
[23.74451828 -73.35132599]
[15.33631992 -77.28276825]
[12.99440861 -84.40727997]
[2.68945456 -95.30718994]
[-7.61549902 -106.20709229]
[-17.92045403 -117.10699463]
[-28.22540665 -128.00689697]
[-41.73013306 -126.84149933]
[-53.24878693 -133.60871887]
[-58.64473724 -145.61596680]
[-56.13272095 -158.33885193]
[-66.12792206 -169.52348328]
[-76.12311554 -180.70811462]
[-86.11831665 -191.89274597]
[-96.11351776 -203.07737732]
[-111.98624420 -205.40890503]
[-119.93502808 -219.34434509]
[-113.86223602 -234.19360352]
[-98.42639923 -238.56562805]
[-85.46856689 -229.10655212]
[-84.92888641 -213.07257080]
[-74.93368530 -201.88793945]
[-64.93848419 -190.70330811]
[-54.94328690 -179.51867676]
[-44.94808960 -168.33404541]
[-28.19643784 -168.15295410]
[-16.47782135 -155.71553040]
[-17.32550240 -138.31185913]
[-7.02054834 -127.41194916]
[3.28440571 -116.51204681]
[13.58935928 -105.61214447]
[23.89431381 -94.71223450]
[34.35112000 -83.95792389]
[44.95772171 -73.35132599]
[55.56432343 -62.74472046]
[69.71716309 -68.76412201]
[85.09538269 -68.97981262]
[99.41147614 -63.35971832]
[109.71642303 -74.25962067]
[120.02137756 -85.15953064]
[130.32633972 -96.05943298]
[140.63128662 -106.95933533]
[143.90133667 -123.02915192]
[159.53694153 -127.97480774]
[171.45355225 -116.70864105]
[167.39237976 -100.82032013]
[151.53118896 -96.65438080]
[141.22624207 -85.75447845]
[130.92127991 -74.85457611]
[120.61633301 -63.95466995]
[110.31137848 -53.05476379]
[114.09425354 -46.76808548]
[116.66685486 -39.88310623]
[117.93782043 -32.63087082]
[117.85957336 -25.25567055]
[116.43004608 -18.00681496]
[113.69293213 -11.13020611]
[109.73638153 -4.85999155]
[104.69011688 0.58940357]
[98.72124481 5.03060913]
[92.02868652 8.30975151]
[94.54128265 23.09781647]
[97.05387115 37.88588333]
[99.56646729 52.67394638]
[102.07905579 67.46201324]
[104.59165192 82.25007629]
[120.22475433 88.88793945]
[126.46821594 108.56175995]
[137.92877197 118.23934174]
[154.15666199 120.60319519]
[159.97123718 135.93690491]
[149.39096069 148.46646118]
[133.29992676 145.30253601]
[128.25119019 129.69990540]
[116.79063416 120.02231598]
[103.01431274 125.95635986]
[102.17325592 140.93276978]
[101.33219910 155.90916443]
[100.49114227 170.88557434]
[99.65008545 185.86196899]
[98.80902863 200.83837891]
[97.96797180 215.81477356]
[97.12691498 230.79116821]
[96.28585815 245.76757812]
[95.44480133 260.74398804]
[105.01987457 273.61633301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[24 60]
[25 59]
[26 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
