%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCACUUCUGACUCGAGUCCCCGCCGCGCUUGUCGUCGCCGCCGCCGGGAUCCGCAGCCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[102.52440643 259.71124268]
[101.11978149 244.77714539]
[99.71515656 229.84306335]
[86.11851501 223.76054382]
[77.33354950 211.60816956]
[75.80075073 196.59094238]
[82.03137970 182.73179626]
[94.44345856 173.79382324]
[93.03884125 158.85972595]
[91.63421631 143.92564392]
[88.80845642 141.28753662]
[87.31288147 136.99896240]
[87.98231506 131.80345154]
[91.23315430 126.82205963]
[91.93624115 111.83854675]
[85.69179535 99.32860565]
[93.08024597 87.45837402]
[93.78333282 72.47486115]
[94.48641968 57.49134445]
[95.18949890 42.50783157]
[95.89258575 27.52431870]
[88.81063080 13.37664890]
[97.13598633 1.02603042]
[97.83907318 -13.95748329]
[90.75711823 -28.10515213]
[99.08247375 -40.45577240]
[99.78555298 -55.43928528]
[100.13719177 -70.43516541]
[100.13719177 -85.43516541]
[87.50493622 -94.44657898]
[82.61393738 -109.17266846]
[87.34489441 -123.95095825]
[99.87865448 -133.09887695]
[115.39572906 -133.09887695]
[127.92948914 -123.95095825]
[132.66044617 -109.17266846]
[127.76945496 -94.44657898]
[115.13719177 -85.43516541]
[115.13719177 -70.43516541]
[118.40123749 -63.50819778]
[114.76906586 -54.73619843]
[114.06598663 -39.75268555]
[121.19822693 -26.67673874]
[112.82258606 -13.25439930]
[112.11949921 1.72911441]
[119.25173950 14.80506229]
[110.87609863 28.22740173]
[110.17301178 43.21091461]
[109.46993256 58.19442749]
[108.76684570 73.17794037]
[108.06375885 88.16145325]
[114.30820465 100.67139435]
[106.91975403 112.54162598]
[106.21666718 127.52513885]
[106.56830597 142.52102661]
[107.97293091 157.45510864]
[109.37754822 172.38920593]
[123.23853302 178.85606384]
[131.94407654 191.31039429]
[133.23826599 206.35006714]
[126.87329102 219.92736816]
[114.64924622 228.43843079]
[116.05387115 243.37252808]
[117.45849609 258.30661011]
[124.96146393 273.50997925]
[112.42929840 284.92843628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[8 57]
[9 56]
[10 55]
[14 54]
[15 53]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[23 45]
[24 44]
[26 42]
[27 41]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
