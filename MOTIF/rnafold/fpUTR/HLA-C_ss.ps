%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCAGUCCCGGUUCUAAAGUCCCCAGUCACCCACCCGGACUCACAUUCUCCCCAGAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[96.03650665 174.41893005]
[95.32277679 159.43592834]
[86.98865509 147.09121704]
[94.06055450 132.93852234]
[93.34682465 117.95551300]
[87.11560059 104.31103516]
[76.25958252 93.95985413]
[65.40357208 83.60866547]
[54.54756546 73.25748444]
[43.69155502 62.90629578]
[28.36455154 58.98283386]
[24.49274063 44.60026169]
[13.63672924 34.24907684]
[2.78071904 23.89789391]
[-10.29413986 31.46259689]
[-24.97092628 35.03592300]
[-40.05985641 34.32819748]
[-54.33773804 29.39679146]
[-66.64713287 20.64147568]
[-75.99016571 8.77200127]
[-81.60943604 -5.24942541]
[-83.04943085 -20.28614998]
[-80.19339752 -35.11921310]
[-73.27288055 -48.54616547]
[-62.84887695 -59.47854233]
[-49.76642227 -67.03010559]
[-35.08605576 -70.58868408]
[-19.99784470 -69.86580658]
[-5.72492409 -64.92005920]
[6.57566547 -56.15238190]
[15.90676975 -44.27352524]
[21.51195717 -30.24646187]
[22.93684196 -15.20829773]
[20.06591225 -0.37811044]
[13.13190460 13.04188251]
[23.98791504 23.39306831]
[34.84392548 33.74425125]
[49.39443207 36.92733002]
[54.04273987 52.05028534]
[64.89875031 62.40147018]
[75.75476074 72.75265503]
[86.61077118 83.10384369]
[97.46678162 93.45502472]
[98.86304474 90.02947235]
[101.84987640 87.07958984]
[106.22739410 85.18653870]
[111.60697174 84.84868622]
[117.44322968 86.42473602]
[123.08226776 90.08850861]
[127.82203674 95.79964447]
[141.15457153 102.67304230]
[154.48709106 109.54644012]
[170.83300781 108.22608948]
[179.92547607 121.87376404]
[172.41094971 136.44990540]
[156.01972961 136.95983887]
[147.61369324 122.87897491]
[134.28117371 116.00557709]
[120.94863892 109.13217926]
[108.32983398 117.24179077]
[109.04356384 132.22479248]
[117.42873383 145.64118958]
[110.30578613 158.72219849]
[111.01951599 173.70520020]
[114.12419128 192.83662415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[4 61]
[5 60]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[12 37]
[13 36]
[14 35]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
