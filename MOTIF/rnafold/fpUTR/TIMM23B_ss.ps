%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGGAAGUGUGGCGCUUAACGGGAACCGGCGCCCGGAAGGUCAGCGUGUGAAGUAGGCGCUGGCAACGCGGGGUUACCCGCUGUUAUUGAGGAGUAACGGCCCAGCGGACCACCCAGGCUUGAGGCAGCGGCGGGAACCACUCGGUUUGCUGCGAUACC\
) } def
/len { sequence length } bind def

/coor [
[226.57356262 351.84417725]
[237.74851990 341.83816528]
[252.35881042 338.44119263]
[266.80075073 342.49020386]
[258.60290527 329.92855835]
[242.03097534 327.19296265]
[232.35549927 313.05307007]
[235.94610596 295.95553589]
[227.50769043 283.55419922]
[219.06925964 271.15286255]
[210.63084412 258.75152588]
[197.07411194 252.58190918]
[195.70751953 236.81982422]
[187.26910400 224.41850281]
[178.83067322 212.01716614]
[169.68969727 200.12420654]
[159.87672424 188.77935791]
[150.06375122 177.43450928]
[140.25077820 166.08967590]
[137.41938782 165.77493286]
[134.54579163 164.29246521]
[132.08563232 161.62176514]
[130.49291992 157.91119385]
[130.16021729 153.47218323]
[121.25014496 141.40525818]
[112.34007263 129.33833313]
[91.61835480 140.32604980]
[63.45835495 134.92559814]
[40.85456085 109.52737427]
[26.35945511 113.38639069]
[11.86435127 117.24539948]
[-2.63075280 121.10440826]
[-16.38121986 131.02212524]
[-29.71785164 120.55451965]
[-23.35128021 104.84136963]
[-6.48976231 106.60930634]
[8.00534153 102.75028992]
[22.50044632 98.89128113]
[36.99554825 95.03227234]
[38.07591629 87.61049652]
[26.30119324 78.31771088]
[40.23665237 72.76693726]
[41.31701660 65.34515381]
[28.52363968 57.51384354]
[15.73026276 49.68252563]
[2.93688560 41.85121155]
[-9.85649204 34.01989746]
[-22.64986992 26.18858147]
[-35.44324493 18.35726738]
[-48.23662567 10.52595139]
[-64.04622650 9.92013168]
[-70.86166382 -3.32369995]
[-83.65504456 -11.15501499]
[-100.32083130 -14.26755714]
[-101.94347382 -31.14367485]
[-86.17607117 -37.37468338]
[-75.82372284 -23.94839287]
[-63.03034973 -16.11707687]
[-48.13581467 -16.07140541]
[-40.40530777 -2.26742601]
[-27.61193085 5.56388903]
[-14.81855392 13.39520454]
[-2.02517676 21.22651863]
[10.76820087 29.05783463]
[23.56157875 36.88914871]
[36.35495377 44.72046280]
[49.14833450 52.55178070]
[55.38936996 48.39251709]
[54.42604446 33.42348099]
[67.87144470 40.07399368]
[74.11248016 35.91473389]
[71.80880737 21.09268570]
[69.50512695 6.27063799]
[67.20145416 -8.55140877]
[64.89778137 -23.37345695]
[54.19846344 -35.80151749]
[59.86649704 -51.18999863]
[76.07109070 -53.70855331]
[86.14234924 -40.76630783]
[79.71982574 -25.67713165]
[82.02349854 -10.85508442]
[84.32717896 3.96696234]
[86.63085175 18.78900909]
[88.93452454 33.61105728]
[103.75657654 35.91473389]
[110.45026398 22.49107552]
[117.14394379 9.06741810]
[123.83763123 -4.35623932]
[130.53131104 -17.77989578]
[137.22500610 -31.20355415]
[143.91868591 -44.62720871]
[142.37889099 -60.95390701]
[155.90319824 -70.22888184]
[170.57896423 -62.91083145]
[171.30902100 -46.52794266]
[157.34234619 -37.93352509]
[150.64866638 -24.50986671]
[143.95497131 -11.08621025]
[137.26129150 2.33744669]
[130.56759644 15.76110363]
[123.87391663 29.18476105]
[117.18022919 42.60841751]
[143.93260193 86.81704712]
[124.40699005 120.42826080]
[133.31706238 132.49517822]
[142.22714233 144.56210327]
[151.59561157 156.27668762]
[161.40859985 167.62153625]
[171.22157288 178.96638489]
[181.03454590 190.31123352]
[183.50946045 175.51681519]
[195.61627197 166.66099548]
[210.46536255 168.78335571]
[219.60659790 180.67611694]
[217.83801270 195.57148743]
[206.16603088 204.99299622]
[191.23200989 203.57875061]
[199.67042542 215.98007202]
[208.10885620 228.38140869]
[222.26914978 235.43806458]
[223.03216553 250.31311035]
[231.47059631 262.71444702]
[239.90901184 275.11578369]
[248.34744263 287.51712036]
[261.80923462 288.50100708]
[272.08660889 296.94729614]
[275.55664062 309.58755493]
[271.16455078 321.73071289]
[279.36242676 334.29235840]
[289.52893066 339.87026978]
[291.64175415 349.95379639]
[301.88464355 360.91204834]
[312.12753296 371.87030029]
[322.37042236 382.82855225]
[332.61331177 393.78680420]
[338.88925171 396.10101318]
[342.48196411 400.58206177]
[343.02969360 405.37033081]
[352.84268188 416.71517944]
[362.65563965 428.06002808]
[372.46862793 439.40487671]
[382.28158569 450.74972534]
[397.94308472 455.61282349]
[401.29785156 471.66516113]
[388.89480591 482.39346313]
[373.49313354 476.76135254]
[370.93676758 460.56268311]
[361.12377930 449.21783447]
[351.31079102 437.87301636]
[341.49783325 426.52816772]
[331.68484497 415.18331909]
[321.65505981 404.02969360]
[311.41217041 393.07144165]
[301.16928101 382.11318970]
[290.92639160 371.15493774]
[280.68350220 360.19668579]
[281.16952515 375.18881226]
[274.38415527 388.56637573]
[262.00048828 397.03070068]
[247.07211304 398.49468994]
[233.28002930 392.59735107]
[224.02511597 380.79284668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 129]
[5 128]
[8 124]
[9 123]
[10 122]
[11 121]
[13 119]
[14 118]
[15 117]
[16 110]
[17 109]
[18 108]
[19 107]
[24 106]
[25 105]
[26 104]
[29 39]
[30 38]
[31 37]
[32 36]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[52 58]
[53 57]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
[131 156]
[132 155]
[133 154]
[134 153]
[135 152]
[138 151]
[139 150]
[140 149]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
