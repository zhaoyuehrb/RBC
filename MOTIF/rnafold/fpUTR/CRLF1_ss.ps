%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCGGGCGGGGCCAGCGGCGCAUUAGCGCCUUGUCAAUUCGGCUGCUCAGACUUGCUCCGGCCUCCGCGUCCGCGCCCAGCGACGUGCGGGCGGCCUGGCCCGCGCCCUCCCGCGCCCGGCCUGCGUCCCGCGCCCUGCGCCACCGCCGCCGAGCCGCAGCCCGCCGCGCGCCCCCGGCAGCGCCGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.17454529 331.70986938]
[175.17454529 316.70986938]
[175.17454529 301.70986938]
[175.17454529 286.70986938]
[175.17454529 271.70986938]
[175.17454529 256.70986938]
[175.17454529 241.70985413]
[175.17454529 226.70985413]
[169.96861267 212.64222717]
[160.20394897 201.25578308]
[150.43928528 189.86932373]
[140.67460632 178.48287964]
[130.90994263 167.09643555]
[121.14526367 155.70999146]
[111.38059235 144.32353210]
[96.41172791 143.35755920]
[85.26455688 153.39451599]
[74.11738586 163.43147278]
[69.82631683 171.51072693]
[62.70883942 173.53857422]
[51.40141678 183.39463806]
[40.09399796 193.25071716]
[28.78657532 203.10679626]
[17.47915459 212.96287537]
[12.67567348 228.64274597]
[-3.36378360 232.05857849]
[-14.13919926 219.69644165]
[-8.56574917 204.27343750]
[7.62307835 201.65544128]
[18.93050003 191.79937744]
[30.23792076 181.94329834]
[41.54534149 172.08721924]
[52.85276413 162.23114014]
[64.08042908 152.28430176]
[75.22760010 142.24734497]
[86.37477112 132.21038818]
[84.40446472 124.97382355]
[69.93133545 128.91442871]
[57.38426590 137.13459778]
[45.68918228 127.74178314]
[51.00832367 113.71656799]
[65.99072266 114.44129944]
[80.46385193 110.50068665]
[78.49354553 103.26412201]
[63.79668808 100.26374054]
[49.09983063 97.26335144]
[34.40296936 94.26296997]
[19.63790131 91.61859131]
[4.81324482 89.33176422]
[-6.01868534 100.44252014]
[-21.31829262 103.03127289]
[-35.20256424 96.10259247]
[-42.33271790 82.32070160]
[-39.96706009 66.98501587]
[-29.01523781 55.99241638]
[-13.68844700 53.56978607]
[0.11984608 60.64867783]
[7.10007143 74.50710297]
[21.92472839 76.79393005]
[24.97764778 75.00482941]
[29.05215454 74.61325836]
[33.47837830 76.08466339]
[37.40335464 79.56610870]
[52.10021591 82.56649017]
[66.79707336 85.56687927]
[81.49393463 88.56726074]
[85.70455933 82.36076355]
[79.16493988 68.86138153]
[94.12581635 69.94776917]
[98.33644104 63.74127197]
[90.11625671 51.19421768]
[81.89606476 38.64716721]
[73.67588043 26.10011482]
[65.45569611 13.55306244]
[58.12508011 8.08043194]
[57.20604324 0.73700136]
[49.18905640 -11.94085026]
[33.91693878 -16.85430145]
[28.37140274 -31.90842438]
[36.80651093 -45.55498123]
[52.75156403 -47.32550430]
[63.97488785 -35.86179733]
[61.86690521 -19.95783806]
[69.88389587 -7.27998590]
[78.00274658 5.33287477]
[86.22293091 17.87992668]
[94.44312286 30.42697906]
[102.66330719 42.97402954]
[110.88349152 55.52108383]
[125.86598206 54.79638290]
[132.83682251 41.51454163]
[139.80767822 28.23270226]
[146.77851868 14.95086098]
[153.74937439 1.66902089]
[149.27653503 -13.25182247]
[156.53517151 -26.62219620]
[170.78749084 -30.79439926]
[177.75833130 -44.07624054]
[174.67286682 -56.60891342]
[180.76286316 -67.53179169]
[192.28306580 -71.24851227]
[199.46697998 -84.41632843]
[206.65089417 -97.58414459]
[213.83480835 -110.75196075]
[212.95733643 -129.13903809]
[228.27154541 -137.69723511]
[235.24240112 -150.97908020]
[242.21324158 -164.26092529]
[249.18409729 -177.54275513]
[244.24357605 -192.55499268]
[251.43983459 -206.62585449]
[266.50344849 -211.40737915]
[280.49746704 -204.06275940]
[285.11944580 -188.94943237]
[277.62728882 -175.03385925]
[262.46594238 -170.57191467]
[255.49508667 -157.29006958]
[248.52423096 -144.00823975]
[241.55339050 -130.72639465]
[244.85160828 -119.07947540]
[239.14176941 -107.95314026]
[227.00262451 -103.56805420]
[219.81871033 -90.40023804]
[212.63479614 -77.23242188]
[205.45088196 -64.06460571]
[206.82550049 -46.57522964]
[191.04017639 -37.10539246]
[184.06932068 -23.82355309]
[188.73190308 -9.72404957]
[181.85168457 3.84492731]
[167.03120422 8.63986874]
[160.06036377 21.92170906]
[153.08950806 35.20354843]
[146.11866760 48.48538971]
[139.14781189 61.76723099]
[122.76704407 134.55886841]
[132.53170776 145.94531250]
[142.29638672 157.33175659]
[152.06105042 168.71821594]
[161.82572937 180.10466003]
[171.59039307 191.49110413]
[181.35507202 202.87754822]
[185.80207825 200.48838806]
[191.01731873 199.20637512]
[196.71139526 199.25721741]
[202.53271484 200.78849792]
[208.08891296 203.85333252]
[212.97232056 208.40011597]
[224.74272156 217.69837952]
[236.51312256 226.99665833]
[252.13825989 229.47975159]
[257.32904053 243.44059753]
[269.09942627 252.73886108]
[280.86981201 262.03713989]
[292.64022827 271.33538818]
[312.69091797 273.33059692]
[319.07968140 291.57266235]
[331.14352417 300.48690796]
[343.27877808 309.30368042]
[355.48468018 318.02243042]
[367.69055176 326.74114990]
[382.36587524 321.69985962]
[397.19174194 326.27944946]
[406.46734619 338.71902466]
[406.62600708 354.23529053]
[397.60671997 366.86193848]
[382.87759399 371.74374390]
[368.10223389 367.00357056]
[358.96212769 354.46411133]
[358.97180176 338.94705200]
[346.76593018 330.22830200]
[334.56005859 321.50955200]
[327.28009033 320.17813110]
[322.22927856 312.55075073]
[310.16543579 303.63650513]
[300.22149658 306.05807495]
[290.38208008 302.52560425]
[283.98541260 293.98056030]
[283.34194946 283.10580444]
[271.57156372 273.80752563]
[259.80114746 264.50927734]
[248.03076172 255.21099854]
[233.24752808 253.39297485]
[227.21485901 238.76704407]
[215.44445801 229.46878052]
[203.67405701 220.17051697]
[190.17454529 226.70985413]
[190.17454529 241.70985413]
[190.17454529 256.70986938]
[190.17454529 271.70986938]
[190.17454529 286.70986938]
[190.17454529 301.70986938]
[190.17454529 316.70986938]
[190.17454529 331.70986938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 194]
[2 193]
[3 192]
[4 191]
[5 190]
[6 189]
[7 188]
[8 187]
[9 142]
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 36]
[17 35]
[18 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[44 66]
[45 65]
[46 64]
[47 63]
[48 59]
[49 58]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[76 84]
[77 83]
[90 135]
[91 134]
[92 133]
[93 132]
[94 131]
[97 128]
[98 127]
[101 125]
[102 124]
[103 123]
[104 122]
[106 119]
[107 118]
[108 117]
[109 116]
[148 186]
[149 185]
[150 184]
[152 182]
[153 181]
[154 180]
[155 179]
[157 175]
[158 174]
[159 172]
[160 171]
[161 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
