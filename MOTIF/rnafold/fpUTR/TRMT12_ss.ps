%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUGCACGUCAUUUCCGGCACCGGCAUGGCCGGGUGAGCUGCAGGCUACCUUAUUUAAGACCGGGAAUUUAGUCAGCCUGGUGAGCCGACUCUGAGGAGAUGGAGUAUCGCUGAGGUG\
) } def
/len { sequence length } bind def

/coor [
[105.05487061 386.88269043]
[113.35719299 372.74041748]
[112.97097778 357.74539185]
[112.58475494 342.75036621]
[112.19853973 327.75534058]
[104.13610077 315.23150635]
[111.51551056 301.23669434]
[111.12929535 286.24166870]
[110.16430664 271.27273560]
[108.62199402 256.35223389]
[99.61706543 244.48799133]
[105.89441681 229.96540833]
[104.35209656 215.04490662]
[102.80978394 200.12440491]
[101.26747131 185.20390320]
[99.72515106 170.28341675]
[98.18283844 155.36291504]
[96.64052582 140.44241333]
[95.09820557 125.52191162]
[86.44787598 123.33034515]
[78.75086212 118.19283295]
[73.01096344 110.51694489]
[70.06023407 101.05081177]
[70.44461060 90.81185913]
[55.44958496 91.19807434]
[40.45455933 91.58428955]
[25.45952988 91.97051239]
[10.46450329 92.35672760]
[-5.21369696 98.80889130]
[-15.75386143 85.52953339]
[-5.91127682 71.72519684]
[10.07828522 77.36170197]
[25.07331276 76.97548676]
[40.06834030 76.58926392]
[55.06336594 76.20304871]
[70.05839539 75.81682587]
[81.57659912 66.20793152]
[84.64488220 51.52509689]
[76.25798798 38.39886856]
[79.57882690 23.55209541]
[92.14436340 15.63736916]
[95.21263885 0.95453387]
[98.28092194 -13.72830105]
[91.04507446 -32.45881653]
[104.28800964 -46.45204926]
[106.59636688 -61.27336884]
[108.90472412 -76.09468842]
[111.21308136 -90.91600800]
[113.52143860 -105.73731995]
[115.82979584 -120.55863953]
[117.94714355 -135.40844727]
[119.87311554 -150.28428650]
[108.76687622 -160.95938110]
[106.10713959 -175.95202637]
[112.70754242 -189.47602844]
[125.84849548 -196.43687439]
[127.77446747 -211.31271362]
[129.70043945 -226.18855286]
[131.62641907 -241.06439209]
[120.25577545 -251.62318420]
[117.29606628 -266.85537720]
[123.88537598 -280.90390015]
[137.48995972 -288.36679077]
[152.87860107 -286.37442017]
[164.13403320 -275.69290161]
[166.92832947 -260.42947388]
[160.18701172 -246.45327759]
[146.50225830 -239.13841248]
[144.57627869 -224.26257324]
[142.65031433 -209.38673401]
[140.72433472 -194.51089478]
[151.65927124 -184.43293762]
[154.59786987 -169.67391968]
[148.20764160 -155.85298157]
[134.74896240 -148.35832214]
[132.82298279 -133.48248291]
[135.11161804 -126.36073303]
[130.65112305 -118.25028229]
[128.34275818 -103.42896271]
[126.03440094 -88.60764313]
[123.72604370 -73.78633118]
[121.41768646 -58.96500778]
[119.10932159 -44.14369202]
[125.93474579 -36.34579468]
[127.30608368 -25.85085487]
[122.51782227 -16.16449738]
[112.96376038 -10.66002083]
[109.89547729 4.02281475]
[106.82719421 18.70565033]
[115.17172241 30.98996544]
[112.26921844 45.92415619]
[99.32771301 54.59337616]
[96.25943756 69.27621460]
[110.51808929 71.77233124]
[121.70780945 80.32617188]
[127.52393341 92.72356415]
[126.97997284 106.01558685]
[120.55772400 117.21763611]
[110.01870728 123.97959900]
[111.56101990 138.90010071]
[113.10334015 153.82060242]
[114.64565277 168.74108887]
[116.18796539 183.66159058]
[117.73027802 198.58209229]
[119.27259827 213.50259399]
[120.81491089 228.42308044]
[129.93014526 241.35455322]
[123.54248810 254.80993652]
[125.08480835 269.73043823]
[128.29855347 274.14434814]
[129.31056213 278.87649536]
[128.38499451 283.00411987]
[126.12432098 285.85546875]
[126.51053619 300.85049438]
[134.60060120 314.44686890]
[127.19356537 327.36914062]
[127.57978058 342.36416626]
[127.96600342 357.35919189]
[128.35221863 372.35421753]
[137.37156677 386.05032349]
[129.77917480 400.58605957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[5 116]
[7 114]
[8 113]
[9 109]
[10 108]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[37 93]
[38 92]
[41 89]
[42 88]
[43 87]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 76]
[52 75]
[56 71]
[57 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
