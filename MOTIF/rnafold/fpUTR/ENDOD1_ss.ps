%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUGCGACUUCCCUUCCCUACCCUGCUCGGCUGCGUAGUGCGCUCCCCGCCCAGCCUGCAGAGCUCGCGCCGCGGCAGCCCAGCCGCUCGGCCCCGCCGCGCUCGCAGAGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[95.67556000 232.23564148]
[105.29306030 219.39494324]
[104.50142670 204.41584778]
[103.70980072 189.43675232]
[102.32577515 174.50074768]
[100.35152435 159.63122559]
[98.37727356 144.76171875]
[96.40302277 129.89221191]
[94.42877197 115.02270508]
[90.59088135 129.52340698]
[82.36030579 142.06364441]
[70.58348083 151.35377502]
[56.47153854 156.43836975]
[41.47576904 156.79455566]
[27.13834000 152.38568115]
[14.93372536 143.66517639]
[6.11705303 131.52983093]
[1.59503555 117.22769165]
[1.83272028 102.22957611]
[6.80566359 88.07790375]
[16.00244522 76.22804260]
[28.47726059 67.89863586]
[42.94719315 63.94629669]
[57.92414856 64.77747345]
[71.86788177 70.30669403]
[83.34441376 79.96532440]
[91.17324829 92.75946808]
[88.80717468 77.94725037]
[86.44110870 63.13504028]
[76.62385559 50.72809982]
[82.25671387 36.93969345]
[79.89064789 22.12747765]
[77.52457428 7.31526279]
[75.15850067 -7.49695206]
[72.79243469 -22.30916595]
[70.42636108 -37.12137985]
[67.86498260 -51.90107346]
[65.10874176 -66.64566803]
[54.96740723 -78.78914642]
[60.23433304 -92.72143555]
[57.47809219 -107.46603394]
[54.72184753 -122.21062469]
[51.96560669 -136.95523071]
[48.82111359 -151.62193298]
[45.29055786 -166.20051575]
[41.76000595 -180.77909851]
[38.22945404 -195.35768127]
[28.49877167 -200.56250000]
[23.40695763 -210.10278320]
[24.45549583 -220.64366150]
[31.04612923 -228.65217590]
[28.28988647 -243.39677429]
[14.57984447 -250.91799927]
[8.96010113 -265.51089478]
[14.08412743 -280.28512573]
[27.53251648 -288.26480103]
[42.95534897 -285.68209839]
[53.07043457 -273.75653076]
[53.10173798 -258.11898804]
[43.03448486 -246.15301514]
[45.79072571 -231.40841675]
[59.45370483 -217.83110046]
[52.80804062 -198.88824463]
[56.33859253 -184.30964661]
[59.86914444 -169.73106384]
[63.39970016 -155.15248108]
[67.04486847 -151.89134216]
[68.60124207 -146.25996399]
[66.71020508 -139.71147156]
[69.46644592 -124.96687317]
[72.22268677 -110.22227478]
[74.97892761 -95.47767639]
[84.92311859 -84.38883972]
[79.85333252 -69.40191650]
[82.60958099 -54.65731812]
[86.98654175 -48.58443069]
[85.23857880 -39.48745346]
[87.60464478 -24.67523766]
[89.97071838 -9.86302280]
[92.33679199 4.94919157]
[94.70285797 19.76140594]
[97.06893158 34.57361984]
[106.71694183 45.92109299]
[101.25331879 60.76896667]
[103.61939240 75.58118439]
[105.98546600 90.39339447]
[115.19126129 87.34137726]
[126.25928497 89.63871765]
[140.31666565 94.87224579]
[155.94918823 92.43607330]
[165.17710876 104.12772369]
[179.23449707 109.36125183]
[193.29188538 114.59477997]
[207.34927368 119.82830811]
[224.30264282 119.68823242]
[229.13041687 135.94027710]
[214.84996033 145.07838440]
[202.11575317 133.88569641]
[188.05836487 128.65217590]
[174.00097656 123.41864014]
[159.94358826 118.18511200]
[145.31654358 120.99562073]
[135.08314514 108.92963409]
[121.02575684 103.69610596]
[109.29828644 113.04845428]
[111.27252960 127.91796112]
[113.24678040 142.78747559]
[115.22103119 157.65698242]
[117.19528198 172.52648926]
[120.54521179 176.85643005]
[121.69303131 181.56976318]
[120.87830353 185.73019409]
[118.68889618 188.64512634]
[119.48052979 203.62422180]
[120.27215576 218.60331726]
[131.18954468 230.35876465]
[128.66325378 246.20166016]
[114.63124084 253.97869873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[27 86]
[28 85]
[29 84]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 75]
[38 74]
[40 72]
[41 71]
[42 70]
[43 69]
[44 66]
[45 65]
[46 64]
[47 63]
[51 61]
[52 60]
[88 104]
[89 103]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
