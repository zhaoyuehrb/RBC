%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGCUUUGUGGAGCGCUGCGGAGGGUGCGUGCGGGCCGCGGCAGCCGAACAAAGGAGCAGGGGCGCCGCCGCAGGGACCCGCCACCCACCUCCCGGGGCCGCGCAGCGGCCUCUCGUCUACUGCCACC\
) } def
/len { sequence length } bind def

/coor [
[82.41761017 325.08724976]
[67.84067535 320.03585815]
[58.32672882 307.89138794]
[56.91164398 292.52905273]
[64.04696655 278.85095215]
[77.45584869 271.22167969]
[78.16421509 256.23843384]
[78.87258148 241.25517273]
[71.26972198 234.25495911]
[68.77299500 223.99900818]
[72.45822906 213.87246704]
[81.31823730 207.35823059]
[82.73339081 192.42512512]
[84.14854431 177.49203491]
[85.56369781 162.55892944]
[86.97884369 147.62583923]
[84.45401001 140.60314941]
[88.60785675 132.35820007]
[90.37531281 117.46268463]
[81.63829041 109.86412811]
[78.32383728 98.23775482]
[82.03897095 86.19760895]
[92.11130524 77.80425262]
[105.63830566 76.19863129]
[101.78454590 61.70212936]
[90.76145935 50.35302734]
[94.96919250 36.06512070]
[91.11543274 21.56862068]
[87.26167297 7.07211971]
[83.40792084 -7.42438173]
[79.55416107 -21.92088318]
[68.53107452 -33.26998520]
[72.73880005 -47.55789185]
[68.88504791 -62.05439377]
[65.03128815 -76.55089569]
[61.00659180 -91.00086975]
[56.81151581 -105.40230560]
[52.61644363 -119.80374146]
[48.42137146 -134.20518494]
[44.05650711 -148.55606079]
[39.52246094 -162.85440063]
[34.65196609 -177.04165649]
[29.44774818 -191.10992432]
[24.24352837 -205.17819214]
[19.03931046 -219.24645996]
[13.83509064 -233.31472778]
[-2.24741745 -245.36352539]
[1.59268415 -264.25738525]
[-4.27009487 -278.06417847]
[-10.13287354 -291.87100220]
[-25.30191994 -291.35671997]
[-39.63112640 -296.36053467]
[-51.18258286 -306.20574951]
[-58.39405441 -319.56085205]
[-60.29024887 -334.61972046]
[-56.61471558 -349.34570312]
[-47.86454391 -361.74728394]
[-35.22312546 -370.14721680]
[-20.40010452 -373.40948486]
[-5.40017319 -371.09292603]
[7.74804974 -363.51080322]
[17.26637650 -351.68853760]
[21.86752892 -337.22500610]
[20.92924118 -322.07626343]
[14.57840919 -308.29107666]
[3.67392993 -297.73376465]
[9.53670883 -283.92697144]
[15.39948750 -270.12017822]
[25.28669548 -267.11196899]
[31.98606110 -258.95495605]
[33.05952454 -248.23228455]
[27.90335655 -238.51893616]
[33.10757446 -224.45068359]
[38.31179428 -210.38241577]
[43.51601410 -196.31414795]
[48.72023392 -182.24588013]
[52.69296265 -179.44110107]
[54.89094543 -174.06965637]
[53.82079697 -167.38844299]
[58.35484314 -153.09011841]
[63.42367172 -147.61288452]
[62.82280731 -138.40025330]
[67.01788330 -123.99881744]
[71.21295166 -109.59738159]
[75.40802765 -95.19594574]
[80.34607697 -89.60052490]
[79.52778625 -80.40465546]
[83.38154602 -65.90814972]
[87.23530579 -51.41164780]
[97.98274231 -41.09943390]
[94.05065918 -25.77464104]
[97.90441895 -11.27814007]
[101.75817871 3.21836162]
[105.61193848 17.71486282]
[109.46569061 32.21136475]
[120.21313477 42.52357864]
[116.28105164 57.84837341]
[120.13480377 72.34487152]
[130.03054810 83.61759949]
[143.90562439 89.31690979]
[157.78070068 95.01622009]
[171.65579224 100.71553040]
[185.53086853 106.41483307]
[199.40594482 112.11414337]
[213.28103638 117.81345367]
[227.15611267 123.51276398]
[244.10472107 123.93800354]
[248.38793945 140.34197998]
[233.81076050 148.99888611]
[221.45680237 137.38784790]
[207.58172607 131.68853760]
[193.70663452 125.98922729]
[179.83155823 120.28991699]
[165.95648193 114.59060669]
[152.08139038 108.89130402]
[138.20631409 103.19199371]
[124.33123779 97.49268341]
[118.31855011 112.54030609]
[105.27082062 119.23014832]
[103.50335693 134.12565613]
[101.91194153 149.04100037]
[100.49678802 163.97409058]
[99.08163452 178.90718079]
[97.66648865 193.84028625]
[96.25133514 208.77337646]
[105.51338959 226.60691833]
[93.85584259 241.96353149]
[93.14747620 256.94680786]
[92.43910980 271.93005371]
[105.06840515 280.79034424]
[110.88146973 295.08059692]
[108.02336121 310.24090576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 129]
[7 128]
[8 127]
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[18 120]
[19 119]
[24 98]
[25 97]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[33 89]
[34 88]
[35 87]
[36 85]
[37 84]
[38 83]
[39 82]
[40 80]
[41 79]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[48 68]
[49 67]
[50 66]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
