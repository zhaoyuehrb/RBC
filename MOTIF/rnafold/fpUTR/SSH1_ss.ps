%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCCCCGGGCCCGGCCCGGGCGGCGGUGGCGGUGGCGGCUCUAGCUCGAGACGUCUGUGGCGCCCUCGCACCGCGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[102.46028900 187.72132874]
[87.18435669 192.62289429]
[73.90812683 183.61614990]
[72.81599426 167.61032104]
[84.74575043 156.88369751]
[86.88047028 142.03636169]
[89.01519775 127.18904877]
[77.00708008 118.19988251]
[63.36259842 124.43110657]
[49.71811676 130.66233826]
[36.07363892 136.89355469]
[22.42915726 143.12478638]
[8.78467751 149.35600281]
[-4.85980272 155.58723450]
[-16.75584412 167.66699219]
[-31.65667152 159.57986450]
[-28.01054955 143.02262878]
[-11.09102821 141.94274902]
[2.55345225 135.71153259]
[16.19793129 129.48030090]
[29.84241295 123.24907684]
[43.48689270 117.01785278]
[57.13137054 110.78662872]
[70.77584839 104.55540466]
[77.33966064 85.74452972]
[93.07604980 77.05619049]
[108.68781281 80.70558167]
[119.29441833 70.09898376]
[129.90101624 59.49237823]
[140.50761414 48.88577652]
[151.11422729 38.27917480]
[161.72082520 27.67257500]
[165.69682312 19.19021797]
[172.90039062 16.88516426]
[183.87879944 6.66389465]
[194.85722351 -3.55737448]
[205.83563232 -13.77864361]
[216.81405640 -23.99991226]
[216.62062073 -42.76231384]
[229.81361389 -55.66029358]
[247.94096375 -55.06306458]
[258.16223145 -66.04148102]
[268.38348389 -77.01989746]
[269.25991821 -81.82073975]
[271.51232910 -85.60136414]
[274.59780884 -88.03390503]
[277.92211914 -89.02285004]
[280.92828369 -88.69952393]
[292.60791016 -98.11155701]
[304.28753662 -107.52359772]
[306.12026978 -122.99223328]
[318.09915161 -132.37100220]
[332.83483887 -130.52845764]
[344.51446533 -139.94049072]
[349.91989136 -155.42315674]
[366.07931519 -158.21699524]
[376.36926270 -145.44793701]
[370.20434570 -130.25169373]
[353.92648315 -128.26086426]
[342.24685669 -118.84883118]
[340.91500854 -104.05823517]
[329.20428467 -94.34671021]
[313.69958496 -95.84397125]
[302.01995850 -86.43193817]
[290.34033203 -77.01989746]
[279.36190796 -66.79862976]
[269.14065552 -55.82021332]
[258.91937256 -44.84179688]
[261.81863403 -33.53438950]
[258.76623535 -22.14170456]
[250.43238831 -13.62500286]
[238.87565613 -10.25818157]
[227.03532410 -13.02149487]
[216.05691528 -2.80022573]
[205.07849121 7.42104340]
[194.10006714 17.64231300]
[183.12165833 27.86358070]
[172.32742310 38.27917480]
[161.72082520 48.88577652]
[151.11422729 59.49237823]
[140.50761414 70.09898376]
[129.90101624 80.70558167]
[119.29441833 91.31218719]
[122.16043091 112.34835052]
[103.86251831 129.32377625]
[101.72779846 144.17109680]
[99.59307098 159.01841736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[41 68]
[42 67]
[43 66]
[48 65]
[49 64]
[50 63]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
