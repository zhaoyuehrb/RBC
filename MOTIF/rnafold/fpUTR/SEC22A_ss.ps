%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCCCCACAAUGCACUUCGGGGCGCGUCACUCGGAGCGGCGGGUCCCGUCUCGACAGGUCUUCUCUGUUGGUUGAA\
) } def
/len { sequence length } bind def

/coor [
[86.67980957 163.41897583]
[87.02243805 148.42288208]
[95.73226166 136.21022034]
[84.32617188 145.95193481]
[73.11354828 155.91572571]
[62.09870911 166.09773254]
[64.05620575 181.49084473]
[56.56251907 195.07849121]
[42.49911499 201.63595581]
[27.27366257 198.64175415]
[16.74065971 187.24722290]
[14.95026112 171.83377075]
[22.59090996 158.32821655]
[36.72462082 151.92370605]
[51.91669846 155.08290100]
[62.93153381 144.90089417]
[65.78010559 137.86215210]
[74.58444977 134.54585266]
[85.99053955 124.80413055]
[75.03417969 101.93527985]
[86.60943604 83.05858612]
[81.97418213 68.79273987]
[77.33892059 54.52688980]
[72.70366669 40.26104355]
[68.06841278 25.99519539]
[63.43315887 11.72934723]
[51.81006241 0.99556077]
[55.23572922 -13.49975109]
[50.60047531 -27.76559830]
[45.96521759 -42.03144836]
[41.32996368 -56.29729462]
[29.70686531 -67.03108215]
[33.13253403 -81.52639008]
[28.49727821 -95.79224396]
[17.85230637 -108.98773193]
[27.58528900 -122.86956787]
[43.61897659 -117.35982513]
[42.76312637 -100.42749786]
[47.39838028 -86.16165161]
[58.68993378 -76.44824982]
[55.59580994 -60.93254852]
[60.23106766 -46.66670227]
[64.86631775 -32.40085220]
[69.50157928 -18.13500595]
[80.79312897 -8.42160892]
[77.69900513 7.09409237]
[82.33425903 21.35993958]
[86.96952057 35.62578964]
[91.60477448 49.89163589]
[96.24002838 64.15748596]
[100.87528229 78.42333221]
[116.66540527 82.88014984]
[126.12993622 98.23500824]
[122.43518066 117.55484009]
[136.70103455 122.19009399]
[150.96687317 126.82534790]
[165.23272705 131.46060181]
[179.49858093 136.09585571]
[193.76441956 140.73110962]
[208.03027344 145.36636353]
[222.29611206 150.00161743]
[237.18583679 144.02868652]
[251.06758118 152.07087708]
[253.29246521 167.95890808]
[242.15374756 179.50483704]
[226.19609070 177.85162354]
[217.66085815 164.26747131]
[203.39501953 159.63221741]
[189.12916565 154.99696350]
[174.86332703 150.36170959]
[160.59747314 145.72645569]
[146.33161926 141.09120178]
[132.06578064 136.45594788]
[117.79992676 131.82069397]
[130.52011108 139.77035522]
[136.57559204 153.49372864]
[133.87379456 168.24839783]
[123.34835815 178.93554688]
[108.63660431 181.86199951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 19]
[4 18]
[5 16]
[6 15]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[28 44]
[29 43]
[30 42]
[31 41]
[33 39]
[34 38]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
