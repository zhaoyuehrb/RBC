%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCGUCUUUGUUUGAGUACUGGGCAGGCAGCAGGGAGAGUCAGGCAGCAGCUGUGAGCGGGUGGCUCUUCCCCACCUUGCCAGCAGGCUCUGUGCUCCUUGAAGCAAGCGCUCCAGAGGCUCCGGAAGCCACGGCUGGAUUGGAGACAAG\
) } def
/len { sequence length } bind def

/coor [
[83.66608429 372.41836548]
[69.05822754 367.45709229]
[59.46947098 355.37158203]
[57.95954514 340.01831055]
[65.01026917 326.29638672]
[78.37177277 318.58447266]
[78.98760223 303.59710693]
[79.60342407 288.60977173]
[80.21924591 273.62240601]
[80.83507538 258.63507080]
[81.45089722 243.64770508]
[82.06672668 228.66035461]
[74.85846710 215.62615967]
[83.15580750 202.15527344]
[83.77163696 187.16792297]
[76.56337738 174.13372803]
[84.86071777 160.66284180]
[85.47654724 145.67549133]
[86.09236908 130.68812561]
[73.70748901 103.43990326]
[87.75331879 85.03068542]
[83.50047302 70.64620972]
[79.24761963 56.26172638]
[74.99477386 41.87724304]
[70.59447479 27.53718376]
[66.04718781 13.24305344]
[48.92703629 5.24378014]
[43.12802505 -12.40708160]
[51.86449814 -28.44301224]
[46.73419571 -42.53840256]
[32.68891144 -49.27396011]
[27.68684959 -63.64177322]
[34.19473267 -76.99029541]
[29.06443024 -91.08568573]
[23.93412781 -105.18107605]
[18.80382538 -119.27646637]
[13.67352390 -133.37185669]
[8.54322147 -147.46723938]
[3.41291952 -161.56263733]
[-9.40101910 -165.83026123]
[-17.28626251 -176.55426025]
[-17.53185081 -189.66792297]
[-10.27262306 -200.35697937]
[-15.11243916 -214.55473328]
[-19.95225525 -228.75248718]
[-24.74043655 -233.45524597]
[-26.17177582 -239.03549194]
[-24.68627357 -243.63359070]
[-28.93912125 -258.01806641]
[-33.19196701 -272.40255737]
[-46.82989502 -284.73291016]
[-42.13633347 -301.61529541]
[-46.68362045 -315.90942383]
[-51.23091125 -330.20355225]
[-55.77820206 -344.49768066]
[-59.73288727 -348.09152222]
[-61.67648315 -352.41912842]
[-61.67121124 -356.57479858]
[-60.13597107 -359.81365967]
[-63.79467773 -374.36059570]
[-67.45338440 -388.90756226]
[-71.26123810 -403.41619873]
[-75.21784973 -417.88494873]
[-79.17446136 -432.35372925]
[-83.13107300 -446.82247925]
[-87.08768463 -461.29125977]
[-101.36855316 -467.66232300]
[-108.16656494 -481.74499512]
[-104.27190399 -496.88980103]
[-91.52350616 -505.94589233]
[-75.94078064 -504.63720703]
[-64.88140869 -493.58169556]
[-63.56729507 -477.99942017]
[-72.61891174 -465.24786377]
[-68.66230774 -450.77908325]
[-64.70569611 -436.31033325]
[-60.74908447 -421.84155273]
[-56.79247284 -407.37280273]
[-51.96469116 -401.71551514]
[-52.90642929 -392.56625366]
[-49.24772263 -378.01931763]
[-45.58901596 -363.47235107]
[-41.48407364 -349.04498291]
[-36.93678284 -334.75085449]
[-32.38949203 -320.45672607]
[-27.84220123 -306.16256714]
[-17.21723366 -300.29980469]
[-13.33462143 -288.37936401]
[-18.80748558 -276.65539551]
[-14.55463982 -262.27090454]
[-10.30179310 -247.88642883]
[-5.75450277 -233.59230042]
[-0.91468662 -219.39454651]
[3.92512989 -205.19680786]
[19.30321121 -198.45753479]
[25.19298935 -182.37518311]
[17.50830841 -166.69293213]
[22.63861084 -152.59754944]
[27.76891327 -138.50215149]
[32.89921570 -124.40676117]
[38.02951813 -110.31137848]
[43.15982056 -96.21598816]
[48.29012299 -82.12059784]
[61.85571289 -76.07822418]
[67.25936127 -61.85657501]
[60.82958603 -47.66870499]
[65.95988464 -33.57331467]
[77.16728973 -31.08227348]
[85.85145569 -23.38992691]
[89.75703430 -12.33830929]
[87.79458618 -0.66036457]
[80.34131622 8.69576263]
[84.88860321 22.98989296]
[89.94457245 28.44419098]
[89.37925720 37.62439728]
[93.63210297 52.00887680]
[97.88494873 66.39335632]
[102.13779449 80.77783966]
[120.42989349 83.09590149]
[133.59120178 102.61056519]
[147.01864624 109.29664612]
[160.44609070 115.98271942]
[173.87355042 122.66879272]
[189.48066711 118.95429993]
[202.02635193 128.95356750]
[201.88662720 144.99601746]
[189.16868591 154.77523804]
[173.62863159 150.78947449]
[167.18746948 136.09623718]
[153.76002502 129.41017151]
[140.33256531 122.72409058]
[126.90512085 116.03801727]
[120.44877625 119.85449982]
[120.60279846 134.85371399]
[107.53607178 127.48747253]
[101.07972717 131.30395508]
[100.46389771 146.29130554]
[99.84807587 161.27867126]
[107.01228333 175.38485718]
[98.75898743 187.78373718]
[98.14316559 202.77110291]
[105.30737305 216.87728882]
[97.05407715 229.27616882]
[96.43825531 244.26353455]
[95.82242584 259.25088501]
[95.20660400 274.23822021]
[94.59077454 289.22558594]
[93.97495270 304.21295166]
[93.35912323 319.20028687]
[106.04290009 327.98239136]
[111.94409180 342.23651123]
[109.17966461 357.41418457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[14 141]
[15 140]
[17 138]
[18 137]
[19 136]
[21 118]
[22 117]
[23 116]
[24 115]
[25 113]
[26 112]
[29 107]
[30 106]
[33 103]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[43 94]
[44 93]
[45 92]
[48 91]
[49 90]
[50 89]
[52 86]
[53 85]
[54 84]
[55 83]
[59 82]
[60 81]
[61 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
