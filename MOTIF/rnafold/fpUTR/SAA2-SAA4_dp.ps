%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:47 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SAA2-SAA4)
} def

/sequence { (\
AGGCUCACUAUAAAUAGCAGCCACCUCUCCCUGGCAGACAGGGACCCGCAGCUCAGCUACAGCACAGAUCAGCACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.120264122 ubox
1 26 0.014394552 ubox
1 58 0.009129802 ubox
2 8 0.127288134 ubox
2 9 0.053865164 ubox
2 22 0.879414729 ubox
2 25 0.012615665 ubox
2 46 0.003493612 ubox
2 47 0.003578301 ubox
2 53 0.009001931 ubox
2 54 0.003862627 ubox
2 57 0.004184974 ubox
2 58 0.075528293 ubox
2 70 0.042702504 ubox
2 76 0.049958487 ubox
3 8 0.055398729 ubox
3 18 0.032756954 ubox
3 21 0.880366625 ubox
3 24 0.011024826 ubox
3 49 0.003173470 ubox
3 52 0.010056742 ubox
3 57 0.078338798 ubox
3 63 0.101398643 ubox
3 69 0.041821033 ubox
3 73 0.344510083 ubox
3 75 0.048246829 ubox
4 17 0.032821435 ubox
4 20 0.880292147 ubox
4 48 0.003172924 ubox
4 51 0.010067461 ubox
4 56 0.078392634 ubox
4 62 0.101512135 ubox
4 67 0.022108585 ubox
4 72 0.345114460 ubox
5 16 0.031046462 ubox
5 19 0.852298139 ubox
5 50 0.009577190 ubox
5 55 0.075272824 ubox
5 61 0.097930704 ubox
5 66 0.021332896 ubox
5 68 0.071645938 ubox
5 71 0.326884183 ubox
6 67 0.084149935 ubox
8 17 0.851938322 ubox
8 20 0.004552636 ubox
8 56 0.004596903 ubox
8 62 0.020640918 ubox
8 67 0.252158724 ubox
8 72 0.005451742 ubox
9 16 0.847626400 ubox
9 19 0.004911432 ubox
9 55 0.004531561 ubox
9 59 0.015162413 ubox
9 61 0.020419870 ubox
9 66 0.244241221 ubox
9 71 0.005354985 ubox
10 15 0.764086521 ubox
10 58 0.013848753 ubox
10 69 0.007793327 ubox
11 59 0.009745609 ubox
11 68 0.008111394 ubox
12 58 0.008569700 ubox
15 59 0.433065539 ubox
16 53 0.085633039 ubox
16 58 0.458425124 ubox
17 27 0.003367810 ubox
17 49 0.003848184 ubox
17 52 0.090140712 ubox
17 57 0.460921174 ubox
17 63 0.006789617 ubox
17 73 0.009979281 ubox
18 48 0.003848356 ubox
18 51 0.090050940 ubox
18 56 0.459622755 ubox
18 62 0.006796529 ubox
18 72 0.009981504 ubox
19 26 0.007092881 ubox
19 53 0.429403454 ubox
19 58 0.004384117 ubox
20 25 0.007366967 ubox
20 27 0.003322340 ubox
20 49 0.091413000 ubox
20 52 0.463747238 ubox
20 57 0.004557422 ubox
20 63 0.003416501 ubox
20 73 0.007422219 ubox
21 48 0.091413718 ubox
21 51 0.463103845 ubox
21 56 0.004550328 ubox
21 62 0.003412052 ubox
21 72 0.007414944 ubox
25 51 0.022607096 ubox
25 56 0.006010006 ubox
25 62 0.012222591 ubox
25 67 0.044424826 ubox
25 72 0.024553269 ubox
26 44 0.011308347 ubox
26 50 0.022800855 ubox
26 55 0.005936048 ubox
26 61 0.012141047 ubox
26 66 0.041707535 ubox
26 68 0.059180076 ubox
26 71 0.022948604 ubox
27 43 0.007659702 ubox
27 51 0.008952773 ubox
27 56 0.003621274 ubox
27 62 0.006221778 ubox
27 67 0.063223558 ubox
27 72 0.010237796 ubox
28 44 0.936073967 ubox
28 50 0.005773753 ubox
28 61 0.004661083 ubox
28 66 0.044807688 ubox
28 71 0.007377061 ubox
29 42 0.004007870 ubox
29 43 0.999655217 ubox
30 42 0.999975413 ubox
31 41 0.999976903 ubox
32 40 0.999734307 ubox
33 39 0.999692005 ubox
48 57 0.428777946 ubox
48 63 0.275662133 ubox
48 73 0.380419844 ubox
49 56 0.428927808 ubox
49 62 0.275788405 ubox
49 72 0.380344375 ubox
50 58 0.393041821 ubox
51 57 0.406222728 ubox
51 63 0.234087879 ubox
51 73 0.364013385 ubox
52 56 0.403328219 ubox
52 62 0.234313130 ubox
52 67 0.304281184 ubox
52 72 0.364318229 ubox
53 61 0.226063837 ubox
53 66 0.299867878 ubox
53 68 0.251940394 ubox
53 71 0.339133035 ubox
54 67 0.268464868 ubox
56 63 0.429950495 ubox
56 73 0.153909269 ubox
57 62 0.428839506 ubox
57 67 0.319820491 ubox
57 72 0.154048720 ubox
58 66 0.311841916 ubox
58 71 0.148617159 ubox
62 73 0.573120624 ubox
63 72 0.573609087 ubox
2 22 0.9500000 lbox
3 21 0.9500000 lbox
4 20 0.9500000 lbox
5 19 0.9500000 lbox
8 17 0.9500000 lbox
9 16 0.9500000 lbox
10 15 0.9500000 lbox
28 44 0.9500000 lbox
29 43 0.9500000 lbox
30 42 0.9500000 lbox
31 41 0.9500000 lbox
32 40 0.9500000 lbox
33 39 0.9500000 lbox
48 57 0.9500000 lbox
49 56 0.9500000 lbox
62 73 0.9500000 lbox
63 72 0.9500000 lbox
showpage
end
%%EOF
