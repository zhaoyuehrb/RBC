%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCGCGCGCCGGAAGUACCUACCUGGGAUAACGGCGGCGAGCGGACGGCUGCAUUUACGGGGUCUCCCGGAGGGCCAGAGUCGUGGCUUACAGAAGAGACGAA\
) } def
/len { sequence length } bind def

/coor [
[62.04367447 142.19601440]
[57.09532166 137.15339661]
[52.81180573 131.53506470]
[49.25949478 125.42807770]
[46.49343872 118.92707062]
[31.81509018 122.01674652]
[17.13674355 125.10643005]
[9.23430443 130.00918579]
[1.97789824 128.06336975]
[-12.78556061 130.71672058]
[-27.54901886 133.37008667]
[-42.31247711 136.02343750]
[-57.07593536 138.67678833]
[-60.36818314 152.50830078]
[-68.68303680 163.98773193]
[-80.72449493 171.38267517]
[-94.63739014 173.59297180]
[-108.29313660 170.31422424]
[-119.61541748 162.07923889]
[-126.89588928 150.17179871]
[-141.73149109 152.38650513]
[-152.39367676 164.37388611]
[-168.40516663 163.36802673]
[-177.48330688 150.14051819]
[-172.66413879 134.83839417]
[-157.64450073 129.20011902]
[-143.94618225 137.55090332]
[-129.11058044 135.33619690]
[-124.71379089 120.05077362]
[-114.08126068 108.14409637]
[-99.28186035 102.00833130]
[-83.22813416 102.90534973]
[-69.10313416 110.70758057]
[-59.72929001 123.91333008]
[-44.96583176 121.25997925]
[-30.20237350 118.60662079]
[-15.43891430 115.95326996]
[-0.67545587 113.29991150]
[14.04706383 110.42808533]
[28.72541046 107.33840179]
[43.40375900 104.24872589]
[51.56409454 70.41707611]
[77.93640900 47.70866013]
[73.98259735 33.23912811]
[70.02879333 18.76959419]
[66.07498932 4.30005980]
[54.04753494 -6.84769535]
[57.95137787 -22.77540779]
[73.77058411 -27.09801292]
[85.23169708 -15.36878395]
[80.54451752 0.34625244]
[84.49832916 14.81578636]
[88.45213318 29.28532028]
[92.40594482 43.75485229]
[99.40767670 43.24759674]
[106.41847229 43.60860443]
[113.33107758 44.83235931]
[120.03971863 46.90013123]
[126.44177246 49.78029251]
[132.43928528 53.42877579]
[142.56402588 42.36127472]
[152.68878174 31.29377747]
[162.81352234 20.22627831]
[165.81948853 4.10498095]
[181.37185669 -1.09652829]
[193.47169495 9.97261715]
[189.67172241 25.92543030]
[173.88102722 30.35102272]
[163.75627136 41.41852188]
[153.63153076 52.48602295]
[143.50679016 63.55352020]
[151.11067200 75.32439423]
[155.59870911 88.59955597]
[156.69729614 102.56972504]
[171.46075439 105.22307587]
[186.22421265 107.87643433]
[200.98767090 110.52978516]
[215.75112915 113.18313599]
[230.51458740 115.83649445]
[243.34576416 106.60956573]
[258.92953491 109.24057770]
[268.02026367 122.16859436]
[265.22463989 137.72366333]
[252.20123291 146.67723083]
[236.67660522 143.71730042]
[227.86123657 130.59994507]
[213.09777832 127.94659424]
[198.33430481 125.29324341]
[183.57084656 122.63989258]
[168.80738831 119.98653412]
[154.04393005 117.33318329]
[151.47174072 123.91329956]
[148.10195923 130.12287903]
[143.98681641 135.86567688]
[139.19006348 141.05271912]
[133.78604126 145.60362244]
[127.85848236 149.44786072]
[121.49923706 152.52589417]
[114.80685425 154.78999329]
[107.88502502 156.20509338]
[100.84101868 156.74926758]
[93.78398132 156.41406250]
[86.82325745 155.20471191]
[80.06671906 153.13990784]
[73.61905670 150.25169373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 41]
[6 40]
[7 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[20 28]
[21 27]
[43 54]
[44 53]
[45 52]
[46 51]
[60 71]
[61 70]
[62 69]
[63 68]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
