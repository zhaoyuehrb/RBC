%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGAGGAAGAUUAGAAGAUUUUUUUUUUCUUUGAGAGAAAGCCCAGCGGAGAUAAACGAAUGUCCCCUCAUCUCCAAAGAAAAGUUCAUCGGAUUUUUAUUCUAGAGAGCUCAUCUUCAGG\
) } def
/len { sequence length } bind def

/coor [
[90.17226410 200.11990356]
[99.81707764 187.29971313]
[99.05734253 172.31896973]
[98.29760742 157.33822632]
[97.53786469 142.35748291]
[96.77812958 127.37673187]
[82.91993713 121.63647461]
[71.78973389 131.69224548]
[60.65952682 141.74801636]
[49.52932358 151.80380249]
[38.39912033 161.85957336]
[27.26891708 171.91534424]
[16.13871384 181.97111511]
[5.00850964 192.02688599]
[0.48487368 207.78977966]
[-15.49124527 211.49053955]
[-26.48498535 199.32215881]
[-21.18692970 183.80239868]
[-5.04726267 180.89668274]
[6.08294106 170.84091187]
[17.21314430 160.78514099]
[28.34334755 150.72937012]
[39.47355270 140.67358398]
[50.60375595 130.61781311]
[61.73395920 120.56204224]
[72.86416626 110.50627136]
[79.09558105 83.03576660]
[103.99234009 75.57942200]
[99.50189209 61.26733017]
[95.01144409 46.95524216]
[90.52099609 32.64315414]
[86.03054810 18.33106422]
[81.54010010 4.01897573]
[77.04965210 -10.29311275]
[72.55921173 -24.60520172]
[66.94276428 -31.95671272]
[68.14125824 -39.33702850]
[64.01481628 -53.75828171]
[59.88837433 -68.17953491]
[55.76193237 -82.60078430]
[46.02907944 -84.71053314]
[37.81881332 -90.24324036]
[32.27536774 -98.37566376]
[30.15187836 -107.92607880]
[31.70830727 -117.52594757]
[36.68043900 -125.81600952]
[44.32355881 -131.63871765]
[41.67726135 -146.40344238]
[31.62669754 -158.62214661]
[36.99729538 -172.51480103]
[34.35100174 -187.27952576]
[31.70470428 -202.04425049]
[21.65413857 -214.26295471]
[27.02473831 -228.15562439]
[24.37844086 -242.92034912]
[11.26531124 -251.74198914]
[8.31280708 -267.26803589]
[17.27259636 -280.28717041]
[32.82899475 -283.07534790]
[45.75266647 -273.97842407]
[48.37622833 -258.39340210]
[39.14316559 -245.56663513]
[41.78946304 -230.80191040]
[51.65074539 -219.63928223]
[46.46942902 -204.69055176]
[49.11572647 -189.92582703]
[51.76202011 -175.16110229]
[61.62330627 -163.99847412]
[56.44198608 -149.04974365]
[59.08828354 -134.28501892]
[76.78981781 -124.26637268]
[81.64853668 -104.21934509]
[70.18318176 -86.72722626]
[74.30962372 -72.30597687]
[78.43606567 -57.88472366]
[82.56250763 -43.46347046]
[86.87129974 -29.09564972]
[91.36174774 -14.78355980]
[95.85218811 -0.47147110]
[100.34263611 13.84061813]
[104.83308411 28.15270615]
[109.32353210 42.46479416]
[113.81398010 56.77688599]
[118.30442810 71.08897400]
[128.91102600 81.69557190]
[143.22311401 86.18601990]
[157.53520203 90.67646790]
[171.84729004 95.16691589]
[186.15937805 99.65736389]
[195.40173340 99.24727631]
[200.77456665 104.44709015]
[214.96830750 109.29866028]
[229.22236633 113.97004700]
[243.53445435 118.46049500]
[257.84652710 122.95094299]
[270.92498779 114.37842560]
[286.44781494 116.26948547]
[297.08560181 127.73123169]
[297.81549072 143.35177612]
[288.29290771 155.75556946]
[273.01406860 159.08592224]
[259.19320679 151.77033997]
[253.35609436 137.26303101]
[239.04400635 132.77258301]
[224.73191833 128.28213501]
[217.32360840 129.29328918]
[210.11672974 123.49240112]
[195.92298889 118.64083099]
[181.66893005 113.96945190]
[167.35684204 109.47900391]
[153.04475403 104.98855591]
[138.73266602 100.49810791]
[124.42057800 96.00765991]
[125.19821167 107.16136169]
[120.86096191 118.14384460]
[111.75888062 126.61698914]
[112.51861572 141.59773254]
[113.27835083 156.57849121]
[114.03808594 171.55923462]
[114.79782867 186.53997803]
[125.69015503 198.31863403]
[123.13014221 214.15612793]
[109.08161163 221.90327454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[35 77]
[37 76]
[38 75]
[39 74]
[40 73]
[47 70]
[48 69]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[91 108]
[92 107]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
