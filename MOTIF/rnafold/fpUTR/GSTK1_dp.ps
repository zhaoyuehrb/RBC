%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:51 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (GSTK1)
} def

/sequence { (\
CCAGGCAGGCCCAGAAGCUGGGCAGCCUCUGCCGGGUUCCGGGAAAAGGAGCUCCUGCUGCCACUGCUCUUCCGGAGCCUGCAGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 31 0.006682770 ubox
3 28 0.935049287 ubox
3 30 0.005283874 ubox
4 27 0.999537599 ubox
4 28 0.006095556 ubox
4 29 0.003203967 ubox
4 33 0.014150630 ubox
5 26 0.999843883 ubox
5 27 0.005613327 ubox
5 32 0.014407108 ubox
5 82 0.004853986 ubox
6 25 0.999458703 ubox
6 31 0.014408167 ubox
6 81 0.004859912 ubox
7 30 0.014388246 ubox
7 80 0.004858321 ubox
8 29 0.014366102 ubox
8 79 0.004859147 ubox
9 23 0.999807339 ubox
9 78 0.004857164 ubox
10 22 0.999982565 ubox
10 77 0.004855548 ubox
11 21 0.999982893 ubox
11 75 0.004789512 ubox
12 20 0.999973923 ubox
12 74 0.004785765 ubox
13 19 0.997501202 ubox
14 18 0.975638357 ubox
14 72 0.004570127 ubox
15 71 0.004525602 ubox
16 70 0.003878520 ubox
17 69 0.003290056 ubox
21 62 0.003496434 ubox
22 61 0.003513664 ubox
22 67 0.003189151 ubox
23 60 0.003524071 ubox
23 66 0.003194530 ubox
24 59 0.003522768 ubox
24 65 0.003192855 ubox
25 58 0.003510558 ubox
25 64 0.003179864 ubox
26 57 0.003499453 ubox
29 84 0.979700403 ubox
30 83 0.995546707 ubox
31 58 0.003220428 ubox
31 82 0.998331018 ubox
31 85 0.035981281 ubox
32 57 0.003227568 ubox
32 81 0.712686881 ubox
32 84 0.036257000 ubox
33 81 0.700617579 ubox
34 54 0.006519251 ubox
34 55 0.005077942 ubox
34 79 0.040468911 ubox
34 80 0.989152999 ubox
35 53 0.006601293 ubox
35 54 0.005064235 ubox
35 78 0.029960297 ubox
35 79 0.999102726 ubox
36 52 0.008392337 ubox
36 78 0.999507127 ubox
37 51 0.008392489 ubox
37 76 0.007012708 ubox
37 77 0.999403507 ubox
38 50 0.008395347 ubox
38 76 0.999374283 ubox
39 49 0.008400320 ubox
39 75 0.999955623 ubox
40 48 0.008399131 ubox
40 74 0.999905224 ubox
41 69 0.006297711 ubox
41 71 0.007208403 ubox
41 72 0.005427582 ubox
41 73 0.994996038 ubox
42 68 0.010759761 ubox
42 69 0.003630238 ubox
42 70 0.034966799 ubox
42 71 0.005599461 ubox
42 72 0.989314689 ubox
42 73 0.098450535 ubox
43 67 0.036234930 ubox
43 68 0.006539524 ubox
43 69 0.138294034 ubox
43 70 0.011765496 ubox
43 71 0.865465947 ubox
43 72 0.138990245 ubox
44 68 0.140621662 ubox
44 70 0.618834772 ubox
44 71 0.162302454 ubox
45 70 0.093427406 ubox
45 71 0.029460401 ubox
46 70 0.023194684 ubox
46 71 0.060442144 ubox
47 56 0.064483253 ubox
47 59 0.014041555 ubox
47 65 0.357534422 ubox
47 68 0.080263426 ubox
47 70 0.081478153 ubox
47 71 0.425272962 ubox
48 55 0.066414482 ubox
48 58 0.014357551 ubox
48 62 0.258912989 ubox
48 64 0.348862249 ubox
48 65 0.086342383 ubox
48 67 0.075433734 ubox
48 68 0.021870426 ubox
48 69 0.072330938 ubox
48 70 0.745387437 ubox
48 71 0.008713280 ubox
49 54 0.066209224 ubox
49 61 0.264490651 ubox
49 64 0.086830080 ubox
49 67 0.022551929 ubox
49 68 0.037205050 ubox
49 69 0.884831879 ubox
50 56 0.014331795 ubox
50 59 0.285537295 ubox
50 65 0.069127784 ubox
50 68 0.886904021 ubox
51 55 0.014068070 ubox
51 58 0.288769174 ubox
51 61 0.346996227 ubox
51 64 0.059954196 ubox
51 67 0.887465646 ubox
52 57 0.288764865 ubox
52 60 0.347348720 ubox
52 66 0.887068423 ubox
56 63 0.337138822 ubox
57 62 0.356070669 ubox
57 65 0.011964848 ubox
57 67 0.058484034 ubox
57 85 0.006867332 ubox
58 66 0.058635685 ubox
58 84 0.006951151 ubox
59 83 0.006959773 ubox
60 65 0.007912454 ubox
60 67 0.065346013 ubox
60 82 0.006962963 ubox
61 66 0.065220195 ubox
61 81 0.006675339 ubox
66 78 0.006958701 ubox
67 77 0.006967711 ubox
68 76 0.006965985 ubox
69 75 0.006961609 ubox
70 74 0.006271638 ubox
3 28 0.9500000 lbox
4 27 0.9500000 lbox
5 26 0.9500000 lbox
6 25 0.9500000 lbox
9 23 0.9500000 lbox
10 22 0.9500000 lbox
11 21 0.9500000 lbox
12 20 0.9500000 lbox
13 19 0.9500000 lbox
14 18 0.9500000 lbox
29 84 0.9500000 lbox
30 83 0.9500000 lbox
31 82 0.9500000 lbox
32 81 0.9500000 lbox
34 80 0.9500000 lbox
35 79 0.9500000 lbox
36 78 0.9500000 lbox
37 77 0.9500000 lbox
38 76 0.9500000 lbox
39 75 0.9500000 lbox
40 74 0.9500000 lbox
41 73 0.9500000 lbox
42 72 0.9500000 lbox
43 71 0.9500000 lbox
48 70 0.9500000 lbox
49 69 0.9500000 lbox
50 68 0.9500000 lbox
51 67 0.9500000 lbox
52 66 0.9500000 lbox
showpage
end
%%EOF
