%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGCACCCCCGUCCUCCGGCCGCGACCCCCGCCCGGGAACCCUAGCCCCUGGCCGCGGUCGCUUCCCGGACCUCGCCCCGCGCCUCCCCCUGCAGCCCGCCCCGGCCGCACCCCCUAGCGUCCCCGCCCCCGGCCGCGCCCCCUCAUGGGGGCCCCCUCGGCGGUCCGGGAGGCGGCGGGCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[73.50977325 157.81613159]
[57.37202454 147.19419861]
[45.16831970 132.21681213]
[38.02490997 114.26621246]
[23.11237717 115.88372803]
[8.19984436 117.50123596]
[3.21944857 130.58354187]
[-6.86640024 140.19485474]
[-20.04748535 144.49839783]
[-33.73041534 142.70747375]
[-45.24884796 135.22865295]
[-52.38307571 123.57120514]
[-67.32043457 124.94062805]
[-75.31220245 138.11021423]
[-89.36201477 143.98014832]
[-104.00106812 140.49273682]
[-113.66387939 129.18928528]
[-128.60124207 130.55870056]
[-143.53858948 131.92811584]
[-158.47595215 133.29754639]
[-173.41331482 134.66696167]
[-184.34414673 148.31320190]
[-201.42533875 149.81182861]
[-214.05787659 138.72259521]
[-228.97041321 140.34010315]
[-243.88293457 141.95762634]
[-258.79547119 143.57513428]
[-273.70800781 145.19264221]
[-288.62054443 146.81015015]
[-296.39230347 160.11074829]
[-310.34262085 166.21340942]
[-325.03759766 162.96980286]
[-334.88696289 151.82852173]
[-349.79949951 153.44602966]
[-364.71203613 155.06353760]
[-377.59738159 164.24385071]
[-391.08477783 157.92410278]
[-405.99731445 159.54161072]
[-420.90985107 161.15913391]
[-427.71023560 175.00682068]
[-440.92947388 182.96009827]
[-456.34942627 182.48112488]
[-469.04956055 173.72271729]
[-474.97735596 159.47966003]
[-472.24127197 144.29685974]
[-461.71438599 133.01908875]
[-446.75576782 129.24505615]
[-432.13867188 134.17903137]
[-422.52737427 146.24659729]
[-407.61483765 144.62907410]
[-392.70230103 143.01156616]
[-380.88357544 133.94694519]
[-366.32952881 140.15100098]
[-351.41699219 138.53349304]
[-336.50448608 136.91598511]
[-329.27297974 123.92199707]
[-315.61520386 117.60306549]
[-300.68087769 120.57270050]
[-290.23803711 131.89762878]
[-275.32553101 130.28010559]
[-260.41299438 128.66259766]
[-245.50045776 127.04508972]
[-230.58792114 125.42757416]
[-215.67538452 123.81006622]
[-209.07615662 112.73021698]
[-197.11943054 107.40016937]
[-184.08538818 109.97354889]
[-174.78273010 119.72960663]
[-159.84536743 118.36018372]
[-144.90802002 116.99076080]
[-129.97065735 115.62134552]
[-115.03329468 114.25192261]
[-107.58683777 101.37992859]
[-93.82591248 95.28887939]
[-78.94298553 98.50633240]
[-68.68985748 110.00326538]
[-53.75249481 108.63385010]
[-47.35140991 93.80625916]
[-34.27408600 84.17015839]
[-18.02925110 82.42844391]
[-3.03510690 89.14994812]
[6.58233261 102.58870697]
[21.49486542 100.97119141]
[36.40739822 99.35368347]
[37.67158508 87.36650085]
[41.17483521 75.83315277]
[46.79129410 65.16796875]
[54.31920624 55.75407791]
[63.48813248 47.92966080]
[73.96870422 41.97579956]
[85.38440704 38.10637283]
[97.32515717 36.46039200]
[109.36199951 37.09698105]
[113.30445862 22.62435341]
[117.24691772 8.15172386]
[113.40876007 -7.19686127]
[124.21914673 -17.44306755]
[128.16160583 -31.91569710]
[132.10406494 -46.38832474]
[124.04228210 -59.98182297]
[128.03468323 -75.27352905]
[141.71266174 -83.19114685]
[156.96130371 -79.03729248]
[164.73385620 -65.27637482]
[160.41902161 -50.07250595]
[146.57670593 -42.44586563]
[142.63423157 -27.97323418]
[138.69177246 -13.50060558]
[142.81193542 0.81280059]
[131.71954346 12.09418583]
[127.77708435 26.56681442]
[123.83462524 41.03944397]
[133.90980530 46.19887161]
[142.91072083 53.06274033]
[150.55221558 61.41359329]
[156.59217834 70.98687744]
[160.83929443 81.47930908]
[163.15901184 92.55847931]
[163.47781372 103.87340546]
[161.78562927 115.06561279]
[175.83789062 120.31288147]
[189.89015198 125.56015778]
[203.94242859 130.80743408]
[217.99468994 136.05470276]
[232.04695129 141.30197144]
[246.14233398 146.43226624]
[260.27987671 151.44525146]
[274.41741943 156.45823669]
[288.55496216 161.47120667]
[302.69250488 166.48419189]
[316.87121582 171.37950134]
[331.09011841 176.15679932]
[345.30905151 180.93409729]
[359.52795410 185.71139526]
[373.74685669 190.48869324]
[388.00497437 195.14765930]
[402.30133057 199.68795776]
[416.59768677 204.22825623]
[430.89404297 208.76855469]
[445.43020630 212.46992493]
[460.15698242 215.31980896]
[474.88375854 218.16970825]
[489.61053467 221.01960754]
[504.33731079 223.86950684]
[519.06408691 226.71940613]
[534.38031006 220.85893250]
[546.94152832 231.40162659]
[543.82580566 247.50207520]
[528.23834229 252.59750366]
[516.21423340 241.44618225]
[501.48742676 238.59628296]
[486.76065063 235.74638367]
[472.03387451 232.89649963]
[457.30706787 230.04660034]
[442.58029175 227.19670105]
[450.93374634 239.65542603]
[449.46411133 254.58326721]
[438.84146118 265.17379761]
[423.90924072 266.59820557]
[411.47586060 258.20706177]
[407.21038818 243.82633972]
[413.05764771 230.01295471]
[426.35372925 223.06491089]
[412.05737305 218.52461243]
[397.76101685 213.98431396]
[383.46469116 209.44400024]
[376.12405396 210.41772461]
[368.96954346 204.70761108]
[354.75064087 199.93029785]
[340.53173828 195.15299988]
[326.31283569 190.37570190]
[312.09390259 185.59840393]
[304.73812866 186.44998169]
[297.67953491 180.62171936]
[283.54199219 175.60874939]
[269.40444946 170.59576416]
[255.26690674 165.58279419]
[241.12936401 160.56980896]
[233.76042175 161.29901123]
[226.79968262 155.35423279]
[212.74742126 150.10696411]
[198.69514465 144.85969543]
[184.64288330 139.61242676]
[170.59062195 134.36514282]
[156.53836060 129.11787415]
[145.18640137 144.75070190]
[129.66429138 156.25358582]
[111.40451813 162.56495667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[12 77]
[13 76]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[33 55]
[34 54]
[35 53]
[37 51]
[38 50]
[39 49]
[93 112]
[94 111]
[95 110]
[97 108]
[98 107]
[99 106]
[120 185]
[121 184]
[122 183]
[123 182]
[124 181]
[125 180]
[126 178]
[127 177]
[128 176]
[129 175]
[130 174]
[131 172]
[132 171]
[133 170]
[134 169]
[135 168]
[136 166]
[137 165]
[138 164]
[139 163]
[140 155]
[141 154]
[142 153]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
