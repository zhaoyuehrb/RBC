%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGGUUUCCUCUGGCUGGGGAGAGCCCCGGGAGGGCGAGACUCAGACACCUCUGGGGCGGAGGACAAGGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[102.08724976 159.59819031]
[99.68108368 144.79243469]
[97.27490997 129.98667908]
[75.56920624 117.60010529]
[70.69358826 93.08901978]
[57.41175079 86.11817169]
[44.12990952 79.14732361]
[30.84807014 72.17647552]
[17.56622887 65.20562744]
[4.28438854 58.23478317]
[-8.99745178 51.26393509]
[-22.41697121 44.56195831]
[-35.96872711 38.13156891]
[-49.52048492 31.70118141]
[-63.07224274 25.27079391]
[-75.64569092 28.87128639]
[-86.88829041 23.01979446]
[-90.88779449 11.42028809]
[-104.16963196 4.44944048]
[-117.45146942 -2.52140689]
[-130.73330688 -9.49225426]
[-144.01515198 -16.46310234]
[-157.29699707 -23.43395042]
[-173.65213013 -22.23333549]
[-182.64440918 -35.94723129]
[-175.02334595 -50.46795273]
[-158.62884521 -50.85783005]
[-150.32614136 -36.71578979]
[-137.04431152 -29.74494171]
[-123.76246643 -22.77409554]
[-110.48062134 -15.80324745]
[-97.19878387 -8.83239937]
[-83.91694641 -1.86155224]
[-66.57778931 -3.62980914]
[-56.64185333 11.71903706]
[-43.09009552 18.14942551]
[-29.53833961 24.57981491]
[-15.98658276 31.01020241]
[-8.38485622 31.03221893]
[-2.02660441 37.98209381]
[11.25523567 44.95294189]
[24.53707695 51.92378998]
[37.81891632 58.89463806]
[51.10075760 65.86548615]
[64.38259888 72.83633423]
[77.66443634 79.80718231]
[86.36634827 73.15319824]
[96.87277222 70.05258179]
[107.79310608 70.91573334]
[117.68196869 75.62839508]
[125.23049164 83.56681061]
[129.43957520 93.68029022]
[144.42741394 94.28427887]
[159.41523743 94.88826752]
[174.40307617 95.49225616]
[189.39091492 96.09624481]
[204.37875366 96.70023346]
[220.44850159 91.29657745]
[230.08952332 105.24243164]
[219.35758972 118.36727905]
[203.77476501 111.68806458]
[188.78692627 111.08407593]
[173.79908752 110.48008728]
[158.81124878 109.87609863]
[143.82342529 109.27210999]
[128.83558655 108.66812134]
[126.91049194 113.50751495]
[124.18024445 117.94276428]
[120.72654724 121.84118652]
[116.65272522 125.08612823]
[112.08066559 127.58051300]
[114.48683929 142.38626099]
[116.89300537 157.19201660]
[129.01713562 167.69845581]
[128.21820068 183.72160339]
[115.10907745 192.96987915]
[99.74596405 188.34878540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 38]
[13 37]
[14 36]
[15 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
