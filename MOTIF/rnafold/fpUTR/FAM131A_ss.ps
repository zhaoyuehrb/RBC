%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGUUCUCCUUAUGUGACUAGGCACAGGUUCCAAAUGGGGAGGGGACUGGCUCAGCAUCCGGAGCCAAAACAGGAAUAGAACUGGGAGCUGAGCCUGGAGCGGUUCUGGGCUUUUGGUUCUCUGCAUCAACACAGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[204.38868713 233.36219788]
[194.49850464 222.08459473]
[184.60830688 210.80700684]
[174.71812439 199.52940369]
[164.82794189 188.25180054]
[151.93431091 189.20915222]
[140.68791199 182.44435120]
[135.33436584 170.24838257]
[138.04554749 157.00883484]
[128.40373230 145.51817322]
[118.76191711 134.02751160]
[109.12010193 122.53684235]
[100.24335480 127.14624023]
[89.25295258 127.99011230]
[77.81907654 124.18667603]
[67.94437408 115.60590363]
[55.47233200 123.93946075]
[43.00028992 132.27301025]
[30.52824402 140.60656738]
[27.69118500 156.15412903]
[14.64396572 165.07295227]
[-0.87273109 162.07168579]
[-9.65312386 148.93089294]
[-6.48796082 133.44679260]
[6.74492216 124.80582428]
[22.19469070 128.13452148]
[34.66673660 119.80096436]
[47.13877869 111.46741486]
[59.61082458 103.13385773]
[56.68446732 88.42208099]
[41.97269058 85.49572754]
[27.26091003 82.56937408]
[12.54913139 79.64301300]
[-2.16264820 76.71665955]
[-16.87442780 73.79030609]
[-26.94078445 85.39048004]
[-41.46382141 90.38817596]
[-56.53691483 87.43903351]
[-68.10547638 77.33636475]
[-73.05762482 62.79773712]
[-70.06125641 47.73395920]
[-59.92237473 36.19712067]
[-45.36828995 31.29056931]
[-30.31398201 34.33414459]
[-18.80897903 44.50913620]
[-13.94807243 59.07852936]
[0.76370668 62.00488281]
[15.47548580 64.93123627]
[30.18726540 67.85758972]
[44.89904404 70.78394318]
[59.61082458 73.71030426]
[71.80352020 64.97313690]
[73.76141357 50.10146332]
[75.71930695 35.22978973]
[77.67720032 20.35811806]
[79.63509369 5.48644447]
[81.59298706 -9.38522816]
[83.55088043 -24.25690079]
[85.50877380 -39.12857437]
[79.63895416 -53.82060623]
[88.97129822 -65.42906952]
[90.92919159 -80.30074310]
[92.88708496 -95.17241669]
[94.84497833 -110.04409027]
[96.80287170 -124.91576385]
[82.19483185 -141.02136230]
[84.02984619 -162.40748596]
[100.72839355 -175.44573975]
[101.05561829 -190.44216919]
[89.94706726 -201.68386841]
[90.12476349 -217.48715210]
[101.48328400 -228.47622681]
[117.28380585 -228.13145447]
[128.15217590 -216.65739441]
[127.64037323 -200.86140442]
[116.05204773 -190.11494446]
[115.72482300 -175.11851501]
[123.61115265 -171.17424011]
[129.78886414 -164.82127380]
[133.54794312 -156.74845886]
[134.44284058 -147.84449768]
[132.34501648 -139.10008240]
[127.46060181 -131.49769592]
[120.31040192 -125.90123749]
[111.67454529 -122.95787048]
[109.71665192 -108.08619690]
[107.75875854 -93.21452332]
[105.80086517 -78.34284973]
[103.84297180 -63.47117996]
[109.85283661 -49.84287262]
[100.38044739 -37.17068100]
[98.42255402 -22.29900932]
[96.46466064 -7.42733526]
[94.50676727 7.44433737]
[92.54887390 22.31600952]
[90.59098053 37.18768311]
[88.63308716 52.05935669]
[86.67519379 66.93103027]
[122.98223877 80.74481201]
[120.61076355 112.89502716]
[130.25257874 124.38569641]
[139.89439392 135.87635803]
[149.53620911 147.36701965]
[166.95332336 148.54864502]
[177.94023132 161.67858887]
[176.10552979 178.36161804]
[185.99571228 189.63922119]
[195.88591003 200.91680908]
[205.77609253 212.19441223]
[215.66627502 223.47200012]
[236.32443237 228.97845459]
[239.77288818 249.28550720]
[250.37948608 259.89212036]
[260.98608398 270.49871826]
[271.59268188 281.10531616]
[291.24728394 285.35372925]
[295.60867310 304.14614868]
[306.66784668 314.27999878]
[317.72698975 324.41384888]
[328.78616333 334.54772949]
[339.84530640 344.68157959]
[355.32446289 342.46121216]
[368.58206177 350.75399780]
[373.35827637 365.64431763]
[367.39791870 380.10144043]
[353.51528931 387.29913330]
[338.26535034 383.83886719]
[328.84866333 371.35449219]
[329.71145630 355.74072266]
[318.65231323 345.60687256]
[307.59313965 335.47302246]
[296.53399658 325.33917236]
[285.47482300 315.20532227]
[275.25448608 316.56695557]
[265.79180908 311.94488525]
[260.35977173 302.66629028]
[260.98608398 291.71191406]
[250.37948608 281.10531616]
[239.77288818 270.49871826]
[229.16629028 259.89212036]
[220.27474976 261.35101318]
[211.59164429 258.46942139]
[205.14440918 251.78486633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[9 103]
[10 102]
[11 101]
[12 100]
[16 29]
[17 28]
[18 27]
[19 26]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[68 77]
[69 76]
[112 140]
[113 139]
[114 138]
[115 137]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
