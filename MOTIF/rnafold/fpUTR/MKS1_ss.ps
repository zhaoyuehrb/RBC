%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAUCCAGCGUCUCCGUUGCCAGGAAAACAGAGCGGCGCGCUUUCCGGCGCAGUCGCGGCGCGUCGCAGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[86.11924744 116.03971100]
[72.92714691 123.17892456]
[72.09202576 137.10018921]
[64.48365784 148.65777588]
[52.22160339 154.83003235]
[38.62422180 154.06858826]
[27.31086731 146.68522644]
[13.83500195 153.27317810]
[0.35913751 159.86112976]
[-13.11672688 166.44906616]
[-26.59259224 173.03701782]
[-35.29654312 186.93569946]
[-51.67318726 186.07687378]
[-58.87563705 171.34402466]
[-49.49462891 157.89305115]
[-33.18054199 159.56115723]
[-19.70467567 152.97320557]
[-6.22881126 146.38525391]
[7.24705362 139.79730225]
[20.72291756 133.20936584]
[22.95943260 117.08172607]
[34.40803146 105.27449036]
[50.78305435 102.48651123]
[65.78793335 109.98681641]
[78.98004150 102.84760284]
[81.18887329 90.19749451]
[90.29192352 81.13996887]
[102.95294952 78.99458313]
[114.53173065 84.54760742]
[128.00759888 77.95966339]
[141.48345947 71.37171173]
[154.95932007 64.78376770]
[164.70855713 49.32217026]
[182.06323242 50.87468338]
[195.25534058 43.73547363]
[208.44744873 36.59626389]
[221.63955688 29.45705223]
[234.83166504 22.31784058]
[248.02377319 15.17862988]
[261.21588135 8.03941917]
[274.40798950 0.90020841]
[287.60009766 -6.23900270]
[300.79220581 -13.37821293]
[303.40219116 -24.31106567]
[311.54840088 -31.72794724]
[322.23544312 -33.24115753]
[331.71981812 -28.57420540]
[345.45642090 -34.59963608]
[359.19302368 -40.62506866]
[372.92962646 -46.65049744]
[385.00588989 -58.55008316]
[399.78347778 -50.23989105]
[395.88888550 -33.73933029]
[378.95504761 -32.91389847]
[365.21844482 -26.88846779]
[351.48184204 -20.86303520]
[337.74523926 -14.83760452]
[327.81680298 1.54956305]
[307.93139648 -0.18610714]
[294.73928833 6.95310354]
[281.54718018 14.09231472]
[268.35507202 21.23152542]
[255.16297913 28.37073708]
[241.97087097 35.50994873]
[228.77876282 42.64915848]
[215.58665466 49.78836823]
[202.39454651 56.92758179]
[189.20245361 64.06678772]
[185.34657288 75.72241211]
[174.16950989 81.71371460]
[161.54727173 78.25962830]
[148.07141113 84.84757996]
[134.59555054 91.43552399]
[121.11968231 98.02347565]
[116.23503876 113.65177917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[29 74]
[30 73]
[31 72]
[32 71]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
