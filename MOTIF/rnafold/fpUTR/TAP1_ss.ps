%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCGUGAUGGAGAAAAUUGGGCACCAGGGCUGCUCCCGAGAUUCUCAGAUCUGAUUUCCACGCUUGCUACCAAAAUAGUCUGGGCAGGCCACUUUUGGAAGUAGGCGUUAUCUAGUGAGCAGGCGGCCGCUUUCGAUUUCGCUUUCCCCUAA\
) } def
/len { sequence length } bind def

/coor [
[46.26000595 186.19473267]
[38.73190308 189.17851257]
[30.73283005 188.91313171]
[22.21185875 201.25788879]
[13.69088745 213.60266113]
[5.16991663 225.94741821]
[3.69819832 241.70001221]
[-9.89938927 247.77906799]
[-18.42036057 260.12384033]
[-26.94133186 272.46859741]
[-35.46230316 284.81335449]
[-31.13952446 299.84158325]
[-37.53525162 314.11141968]
[-51.62961960 320.88510132]
[-66.76769257 316.96432495]
[-75.80174255 304.20028687]
[-74.46616364 288.61984253]
[-63.39157486 277.57958984]
[-47.80706024 276.29238892]
[-39.28609085 263.94760132]
[-30.76511765 251.60285950]
[-22.24414825 239.25810242]
[-21.38190651 224.38847351]
[-7.17484140 217.42643738]
[1.34612978 205.08168030]
[9.86710072 192.73692322]
[18.38807297 180.39216614]
[17.86110687 158.77517700]
[38.06851959 149.15718079]
[45.56851959 136.16679382]
[53.06851959 123.17641449]
[60.56851959 110.18603516]
[92.66019440 87.68483734]
[93.26418304 72.69699860]
[93.86817169 57.70916367]
[94.47216034 42.72132874]
[95.07614899 27.73349380]
[95.68013763 12.74565983]
[83.67407227 3.09369040]
[79.69996643 -11.60528469]
[85.07954407 -25.65961075]
[97.55402374 -33.75438690]
[98.15801239 -48.74222183]
[98.76200104 -63.73005676]
[99.36598969 -78.71788788]
[87.15460968 -83.13342285]
[77.88813782 -94.73283386]
[75.67852020 -111.30937958]
[62.84180069 -119.06945038]
[50.00508118 -126.82951355]
[33.60728836 -126.61859131]
[25.45943832 -140.85040283]
[33.94333649 -154.88449097]
[50.33147812 -154.28378296]
[57.76514816 -139.66622925]
[70.60186768 -131.90617371]
[83.43858337 -124.14610291]
[90.52833557 -126.59262085]
[81.49308777 -138.56610107]
[90.08852386 -150.85913086]
[104.43601227 -146.48310852]
[104.70783234 -131.48565674]
[111.79757690 -133.93218994]
[117.11665344 -147.95742798]
[122.43572998 -161.98266602]
[127.75479889 -176.00791931]
[133.07386780 -190.03315735]
[138.39294434 -204.05839539]
[143.71202087 -218.08364868]
[149.03109741 -232.10888672]
[154.35017395 -246.13412476]
[152.00927734 -261.78118896]
[163.75692749 -270.93771362]
[169.07600403 -284.96295166]
[174.39508057 -298.98822021]
[179.71414185 -313.01345825]
[185.03321838 -327.03869629]
[190.35229492 -341.06393433]
[182.87904358 -356.85034180]
[188.98802185 -372.85287476]
[204.45907593 -379.38088989]
[209.49464417 -393.51040649]
[214.53021240 -407.63992310]
[219.56578064 -421.76943970]
[216.07913208 -437.79364014]
[228.39355469 -448.62356567]
[243.84101868 -443.11828613]
[246.53050232 -426.94119263]
[233.69528198 -416.73385620]
[228.65971375 -402.60437012]
[223.62416077 -388.47485352]
[218.58859253 -374.34533691]
[225.69851685 -363.55938721]
[225.27377319 -350.45281982]
[217.24531555 -339.83883667]
[204.37753296 -335.74487305]
[199.05847168 -321.71963501]
[193.73939514 -307.69436646]
[188.42031860 -293.66912842]
[183.10124207 -279.64389038]
[177.78216553 -265.61865234]
[180.50352478 -250.97476196]
[168.37541199 -240.81506348]
[163.05633545 -226.78981018]
[157.73725891 -212.76457214]
[152.41819763 -198.73933411]
[147.09912109 -184.71408081]
[141.78004456 -170.68884277]
[136.46096802 -156.66358948]
[131.14189148 -142.63835144]
[125.82282257 -128.61311340]
[135.82630920 -96.04573822]
[114.35382843 -78.11389923]
[113.74983978 -63.12606812]
[113.14585114 -48.13823318]
[112.54186249 -33.15039825]
[124.32453156 -24.07809258]
[128.55577087 -9.63646317]
[123.41176605 4.69506502]
[110.66796875 13.34964848]
[110.06398010 28.33748436]
[109.45999146 43.32531738]
[108.85600281 58.31315231]
[108.25201416 73.30098724]
[107.64802551 88.28882599]
[113.38827515 102.14701843]
[124.41336060 112.31793213]
[135.43844604 122.48884583]
[146.46353149 132.65975952]
[166.28211975 136.13349915]
[171.35586548 154.75749207]
[182.78153992 164.47621155]
[199.00082397 166.89842224]
[204.76022339 182.25294495]
[194.13496399 194.74436951]
[178.05540466 191.52259827]
[173.06282043 175.90190125]
[161.63713074 166.18316650]
[151.49658203 167.92045593]
[141.88504028 163.67211914]
[136.10635376 154.63244629]
[136.29261780 143.68484497]
[125.26753235 133.51393127]
[114.24244690 123.34301758]
[103.21736145 113.17210388]
[95.80274963 114.30058289]
[98.05947113 129.12985229]
[83.23016357 131.38632202]
[80.97351837 116.55754852]
[73.55889893 117.68603516]
[66.05889893 130.67642212]
[58.55889893 143.66679382]
[51.05889893 156.65718079]
[54.73456192 164.29408264]
[55.05367279 172.66902161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[6 24]
[8 22]
[9 21]
[10 20]
[11 19]
[29 153]
[30 152]
[31 151]
[32 150]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[42 116]
[43 115]
[44 114]
[45 113]
[48 57]
[49 56]
[50 55]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[81 92]
[82 91]
[83 90]
[84 89]
[126 145]
[127 144]
[128 143]
[129 142]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
