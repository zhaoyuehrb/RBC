%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAUUCUGGAAGUGCGGCCCGGGGAGGGGCCAGGAGCGGGAACGUGCCCGGUGCUGCCCAGUCUUUGUCUGCUGCCUCCGGAUGCACAGCG\
) } def
/len { sequence length } bind def

/coor [
[85.42963409 355.08599854]
[76.58206940 342.77758789]
[72.48078156 328.18460083]
[73.62102509 313.06921387]
[79.86510468 299.25662231]
[90.45902252 288.41482544]
[104.12350464 281.85299683]
[102.62207031 266.92831421]
[101.12063599 252.00364685]
[99.61920166 237.07897949]
[98.11775970 222.15431213]
[94.23767090 215.68424988]
[96.82408905 206.70710754]
[95.82220459 191.74060059]
[92.16047668 185.14450073]
[95.04541779 176.25877380]
[94.54419708 161.26715088]
[94.04296875 146.27552795]
[93.54174805 131.28390503]
[93.04051971 116.29228210]
[82.32310486 101.18332672]
[90.93106842 84.78069305]
[89.42963409 69.85602570]
[87.92819977 54.93135834]
[86.42675781 40.00669098]
[84.92532349 25.08202362]
[83.42388916 10.15735531]
[72.31120300 -4.40691519]
[79.89486694 -20.13602638]
[77.89556122 -35.00218964]
[75.89626312 -49.86835098]
[73.89695740 -64.73451233]
[69.57424164 -73.01660156]
[72.08783722 -80.12987518]
[70.58640289 -95.05454254]
[57.34667587 -102.92955780]
[51.35274887 -116.92692566]
[54.71058655 -131.59623718]
[65.92816925 -141.35861206]
[64.42673492 -156.28327942]
[62.92529678 -171.20794678]
[61.42386246 -186.13261414]
[49.02901077 -195.93788147]
[47.28090286 -211.64518738]
[57.21666336 -223.93568420]
[72.94158173 -225.51762390]
[85.12634277 -215.45246887]
[86.54193878 -199.71171570]
[76.34853363 -187.63404846]
[77.84996796 -172.70938110]
[79.35140228 -157.78471375]
[80.85283661 -142.86004639]
[93.79016876 -135.52767944]
[100.00263977 -121.82115173]
[96.91690063 -106.91036224]
[85.51107025 -96.55597687]
[87.01250458 -81.63130951]
[88.76311493 -66.73381805]
[90.76242065 -51.86765671]
[92.76172638 -37.00149155]
[94.76103210 -22.13533020]
[104.26088715 -14.44403839]
[105.94569397 -1.93034053]
[98.34855652 8.65592003]
[99.84999084 23.58058739]
[101.35142517 38.50525284]
[102.85286713 53.42992020]
[104.35430145 68.35459137]
[105.85573578 83.27925873]
[114.09960938 89.27275085]
[117.67689514 98.81667328]
[115.40361023 108.75224304]
[108.03214264 115.79106140]
[108.53337097 130.78268433]
[109.03459167 145.77430725]
[109.53582001 160.76593018]
[110.03704071 175.75755310]
[110.78870392 190.73870850]
[111.79059601 205.70521545]
[113.04242706 220.65287781]
[114.54386902 235.57754517]
[116.04530334 250.50221252]
[117.54673767 265.42687988]
[119.04817200 280.35156250]
[133.74586487 284.06011963]
[146.28703308 292.57452393]
[155.15727234 304.86657715]
[159.28544617 319.45199585]
[158.17304993 334.56945801]
[151.95443726 348.39352417]
[141.38052368 359.25485229]
[127.72815704 365.84185791]
[112.64592743 367.35913086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[13 79]
[14 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[29 61]
[30 60]
[31 59]
[32 58]
[34 57]
[35 56]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
