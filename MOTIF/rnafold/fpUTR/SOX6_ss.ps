%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUUAGGAGAGACCAUUGGGGAUAGGAAAGAUGAAAGGUCAUGGUGAGCUUCAAGGACAUGAAAGGUUGUUGUCUCAUGUAACAAUAGUAGAUUGUUUUUUUUCCUAAUAUUUCUAGCCAGCCCCUAAGUCAGGUGAUGGAACAAAUACCUACAGUUUAGUCAGGUGAAACAGGAGUGGGUGGAGGAAGGAAAGAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[311.91781616 84.83350372]
[301.54827881 69.33212280]
[286.78063965 71.96199799]
[272.01296997 74.59186554]
[257.24530029 77.22174072]
[242.47766113 79.85160828]
[227.70999146 82.48148346]
[212.94233704 85.11135864]
[206.61305237 98.56788635]
[193.41757202 105.80275726]
[178.31559753 103.85762787]
[167.12538147 93.27058411]
[152.35772705 95.90045929]
[137.59007263 98.53032684]
[122.82241058 101.16020203]
[108.05474854 103.79007721]
[113.10140991 116.49821472]
[106.96952820 132.49400330]
[88.83116913 144.00331116]
[75.05119324 149.92886353]
[61.27121353 155.85441589]
[47.49123764 161.77998352]
[33.71126175 167.70553589]
[19.93128395 173.63108826]
[21.27377701 188.68617249]
[17.90174103 203.39915466]
[10.15767288 216.33197021]
[-1.18922961 226.22453308]
[-15.01945877 232.11752319]
[-29.97364616 233.44538879]
[-44.58616638 230.09063721]
[-57.42878723 222.39407349]
[-67.25025940 211.12022400]
[-81.03023529 217.04577637]
[-94.81021118 222.97132874]
[-102.06209564 237.28181458]
[-117.80053711 240.39326477]
[-129.95233154 229.91885376]
[-129.19569397 213.89366150]
[-116.11101532 204.61082458]
[-100.73577118 209.19136047]
[-86.95578766 203.26579285]
[-73.17581177 197.34024048]
[-74.60242462 182.45649719]
[-71.35437775 167.84074402]
[-63.73748016 154.92706299]
[-52.48683929 144.98654175]
[-38.69593048 139.00210571]
[-23.71033478 137.57138062]
[-8.99644184 140.84700012]
[4.00203848 148.52046204]
[14.00572681 159.85112000]
[27.78570366 153.92556763]
[41.56568146 148.00000000]
[55.34565735 142.07444763]
[69.12563324 136.14889526]
[82.90560913 130.22332764]
[83.13544464 122.72685242]
[83.82495880 100.23741913]
[70.43386841 93.47881317]
[57.04277802 86.72021484]
[43.65168762 79.96160889]
[29.91508102 87.17861938]
[14.56476593 84.90981293]
[3.50325513 74.02759552]
[0.98392451 58.71640778]
[7.97550821 44.86370468]
[21.78959846 37.79613495]
[37.11439896 40.23133087]
[48.05720520 51.23289871]
[50.41029358 66.57051849]
[63.80138016 73.32912445]
[77.19247437 80.08773041]
[90.58356476 86.84632874]
[105.42488098 89.02241516]
[120.19253540 86.39253998]
[134.96018982 83.76267242]
[149.72785950 81.13279724]
[164.49551392 78.50292206]
[171.34294128 64.70368195]
[184.84498596 57.66465759]
[199.72685242 59.89942551]
[210.31246948 70.34369659]
[225.08012390 67.71382141]
[239.84777832 65.08395386]
[254.61544800 62.45407867]
[269.38308716 59.82420731]
[284.15075684 57.19433594]
[298.91842651 54.56446075]
[300.70568848 42.93852997]
[305.66824341 32.29536438]
[313.39938354 23.48166656]
[323.27264404 17.19525528]
[334.49258423 13.92982769]
[346.15875244 13.93620014]
[357.33813477 17.20307732]
[367.13955688 23.45881653]
[374.78494263 32.19397736]
[379.67086792 42.70280838]
[394.57189941 40.98255920]
[409.47293091 39.26230621]
[424.37396240 37.54205704]
[439.27499390 35.82180405]
[454.17602539 34.10155106]
[469.07705688 32.38130188]
[483.97808838 30.66104889]
[498.87911987 28.94079781]
[513.78015137 27.22054672]
[528.68121338 25.50029564]
[533.50891113 17.39104462]
[541.41101074 12.48747158]
[550.54620361 11.78318024]
[558.85314941 15.31011105]
[564.51568604 22.15961266]
[579.48004150 21.12600517]
[594.44439697 20.09239769]
[609.40875244 19.05879021]
[624.37310791 18.02518272]
[639.33740234 16.99157715]
[652.57165527 8.32173634]
[665.80181885 15.16364574]
[680.76617432 14.13003922]
[689.11645508 10.41520882]
[695.96740723 13.19704151]
[710.94586182 12.39287376]
[724.31140137 3.92685604]
[737.43518066 10.97070408]
[752.41357422 10.16653633]
[767.39202881 9.36236763]
[775.87554932 -3.49591517]
[790.13708496 -8.83091640]
[804.63397217 -4.79299402]
[813.86285400 6.86741924]
[828.84130859 6.06325102]
[843.81970215 5.25908232]
[854.35278320 -6.21666384]
[869.55450439 -6.81883144]
[880.42993164 3.29353690]
[895.40838623 2.48936844]
[910.38677979 1.68519986]
[925.36523438 0.88103139]
[938.73077393 -7.58498621]
[951.85455322 -0.54113758]
[966.83294678 -1.34530616]
[981.81140137 -2.14947462]
[996.78979492 -2.95364308]
[1003.10778809 -16.89428520]
[1015.18780518 -26.29283905]
[1030.25378418 -28.98958969]
[1044.84387207 -24.36483955]
[1055.60534668 -13.48132420]
[1060.06518555 1.16000414]
[1057.19860840 16.19467545]
[1047.66430664 28.16783333]
[1033.65332031 34.32813263]
[1018.38507080 33.25998306]
[1005.36828613 25.20883369]
[997.59399414 12.02478504]
[982.61553955 12.82895374]
[967.63714600 13.63312244]
[952.65869141 14.43729019]
[940.36450195 22.84578896]
[926.16937256 15.85945988]
[911.19097900 16.66362762]
[896.21252441 17.46779633]
[881.23413086 18.27196503]
[871.50390625 29.49062157]
[856.32507324 30.51953506]
[844.62390137 20.23751068]
[829.64544678 21.04167938]
[814.66705322 21.84584808]
[806.73962402 34.42735672]
[792.75842285 39.99422073]
[778.00769043 36.21684647]
[768.19616699 24.34079552]
[753.21777344 25.14496422]
[738.23931885 25.94913292]
[725.94519043 34.35763168]
[711.75006104 27.37130165]
[696.77160645 28.17547035]
[681.79980469 29.09438515]
[666.83544922 30.12799263]
[654.67156982 38.72389984]
[640.37103271 31.95592308]
[625.40667725 32.98952866]
[610.44232178 34.02313614]
[595.47802734 35.05674362]
[580.51367188 36.09035110]
[565.54931641 37.12395859]
[549.50537109 50.10293961]
[530.40142822 40.40132523]
[515.50042725 42.12157822]
[500.59936523 43.84183121]
[485.69833374 45.56208038]
[470.79730225 47.28233337]
[455.89627075 49.00258255]
[440.99523926 50.72283554]
[426.09420776 52.44308472]
[411.19317627 54.16333771]
[396.29214478 55.88359070]
[381.39111328 57.60383987]
[376.13970947 75.23357391]
[363.67434692 88.83050537]
[346.47137451 95.62763214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[33 43]
[34 42]
[35 41]
[59 74]
[60 73]
[61 72]
[62 71]
[99 201]
[100 200]
[101 199]
[102 198]
[103 197]
[104 196]
[105 195]
[106 194]
[107 193]
[108 192]
[109 191]
[114 189]
[115 188]
[116 187]
[117 186]
[118 185]
[119 184]
[121 182]
[122 181]
[124 180]
[125 179]
[127 177]
[128 176]
[129 175]
[133 171]
[134 170]
[135 169]
[138 166]
[139 165]
[140 164]
[141 163]
[143 161]
[144 160]
[145 159]
[146 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
