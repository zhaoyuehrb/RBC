%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCUCCCGCCGCGCGCUCGGGAUCCCGACCAGUCCUGACCGCACGGGGGCCGCGGCCACGGGGCGCAGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[74.51047516 222.36975098]
[60.69968796 214.20631409]
[58.61401367 198.29940796]
[69.85340881 186.85145569]
[71.06040192 171.90010071]
[72.26740265 156.94873047]
[73.47440338 141.99737549]
[74.68140411 127.04602051]
[77.03999329 104.95825195]
[90.82607269 96.19676208]
[81.81494141 84.20512390]
[73.93512726 79.04404449]
[72.69399261 71.54428864]
[64.17301941 59.19953156]
[55.65205002 46.85477448]
[41.44498444 39.89274216]
[40.58274460 25.02311707]
[32.06177521 12.67835808]
[23.54080200 0.33360034]
[9.33373737 -6.62843132]
[8.47149658 -21.49805832]
[-0.04947488 -33.84281540]
[-8.57044601 -46.18757248]
[-17.09141731 -58.53233337]
[-25.61238861 -70.87709045]
[-34.13335800 -83.22184753]
[-42.65433121 -95.56660461]
[-58.16954422 -95.80691528]
[-70.56012726 -105.14785004]
[-75.06165314 -119.99762726]
[-69.94318390 -134.64620972]
[-57.17287827 -143.46090698]
[-41.66118240 -143.05230713]
[-29.37265968 -133.57751465]
[-25.03249550 -118.67977142]
[-30.30957222 -104.08757782]
[-21.78860092 -91.74282074]
[-13.26763058 -79.39806366]
[-4.74665928 -67.05330658]
[3.77431202 -54.70854568]
[12.29528332 -42.36378860]
[20.81625366 -30.01902962]
[34.41384125 -23.93997765]
[35.88555908 -8.18737125]
[44.40653229 4.15738726]
[52.92750168 16.50214577]
[66.52509308 22.58119774]
[67.99681091 38.33380508]
[76.51777649 50.67856216]
[85.03874969 63.02331924]
[93.80657959 75.19398499]
[102.81771851 87.18563080]
[115.65443420 94.94569397]
[130.46018982 97.35186768]
[145.26594543 99.75803375]
[160.12855530 94.33463287]
[171.44985962 104.01333618]
[186.25561523 106.41950226]
[201.38887024 100.10153198]
[214.26112366 110.26209259]
[211.63052368 126.44887543]
[196.20318604 132.01029968]
[183.84944153 121.22525787]
[169.04370117 118.81909180]
[155.24008179 124.41459656]
[142.85977173 114.56378937]
[128.05401611 112.15761566]
[113.24826813 109.75144958]
[107.34439087 114.37683868]
[109.45223236 129.22799683]
[95.53663635 123.62762451]
[89.63275909 128.25302124]
[88.42576599 143.20437622]
[87.21876526 158.15573120]
[86.01176453 173.10710144]
[84.80476379 188.05845642]
[94.06223297 201.16108704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[10 52]
[11 51]
[13 50]
[14 49]
[15 48]
[17 46]
[18 45]
[19 44]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[53 68]
[54 67]
[55 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
