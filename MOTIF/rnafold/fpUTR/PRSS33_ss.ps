%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUGAGGACAGACAGAAGGACCACGGAGGGGGUGACGGGCUGGUGUGAGGAUUGGUGCCCCUGGGCCAGGACUCUCCUCUCUUCUCCCUGCUGGCUCCAGACCAGAGUCCAAGCCCUAGGCAGUGCCACCCUUACCCAGCCCAGCCUUGAAGACAGA\
) } def
/len { sequence length } bind def

/coor [
[-63.79635239 442.83612061]
[-71.08413696 455.94674683]
[-66.97090149 470.97070312]
[-74.54852295 484.16290283]
[-88.89691162 487.99166870]
[-96.18469238 501.10226440]
[-87.00051117 513.25012207]
[-83.55765533 528.08477783]
[-86.45262146 543.03601074]
[-95.18383026 555.51342773]
[-108.23854828 563.35522461]
[-123.35497284 565.20281982]
[-137.91409302 560.73608398]
[-149.39344788 550.72882080]
[-155.80416870 536.91497803]
[-156.03556824 521.68786621]
[-150.04754639 507.68557739]
[-138.87756348 497.33416748]
[-124.46089172 492.42709351]
[-109.29530334 493.81448364]
[-102.00752258 480.70388794]
[-106.33017731 466.49649048]
[-99.12609100 453.09661865]
[-84.19475555 448.65896606]
[-76.90696716 435.54833984]
[-88.58193970 421.94012451]
[-94.19576263 404.87606812]
[-92.87558746 386.92709351]
[-84.79532623 370.80780029]
[-71.15322876 358.96591187]
[-53.99425125 353.21054077]
[-35.90354156 354.43582153]
[-29.66021538 340.79687500]
[-23.41689110 327.15792847]
[-17.17356682 313.51898193]
[-10.93024158 299.88003540]
[-15.35852814 290.60278320]
[-13.89169788 280.20556641]
[-6.77764273 272.18582153]
[3.79597735 269.37603760]
[10.56668663 255.99105835]
[17.33739662 242.60609436]
[24.10810471 229.22111511]
[30.87881470 215.83615112]
[37.64952469 202.45117188]
[44.42023468 189.06620789]
[44.63435745 181.64050293]
[51.45586777 175.48805237]
[58.48645020 162.23773193]
[65.51703644 148.98741150]
[72.54762268 135.73710632]
[79.57820892 122.48678589]
[86.60878754 109.23646545]
[83.87055969 97.88386536]
[89.44456482 87.62181091]
[100.45826721 83.73879242]
[107.74604797 70.62818146]
[115.03382874 57.51756668]
[122.32161713 44.40695190]
[129.60940552 31.29633522]
[136.89718628 18.18572235]
[136.14988708 -0.18987629]
[151.49707031 -8.65604115]
[158.52764893 -21.90635681]
[165.55822754 -35.15667343]
[172.45921326 -48.47495270]
[179.22991943 -61.85992432]
[186.00062561 -75.24489594]
[192.77133179 -88.62986755]
[188.07505798 -103.48189545]
[195.13220215 -116.95970917]
[209.32028198 -121.34536743]
[216.09098816 -134.73034668]
[222.86169434 -148.11531067]
[229.63240051 -161.50028992]
[236.40312195 -174.88525391]
[243.17382812 -188.27023315]
[249.94453430 -201.65519714]
[245.24826050 -216.50723267]
[252.30538940 -229.98504639]
[266.49346924 -234.37069702]
[273.26419067 -247.75567627]
[280.03488159 -261.14065552]
[271.94433594 -271.27795410]
[268.31900024 -283.68222046]
[269.66711426 -296.48782349]
[275.75158691 -307.78271484]
[285.63098145 -315.89413452]
[297.80468750 -319.63598633]
[310.44113159 -318.48254395]
[317.72891235 -331.59317017]
[316.92141724 -347.97241211]
[330.84729004 -356.63278198]
[345.18081665 -348.66522217]
[345.17687988 -332.26608276]
[330.83953857 -324.30538940]
[323.55175781 -311.19476318]
[332.92532349 -296.80230713]
[333.75296021 -279.55770874]
[325.71871948 -264.17645264]
[310.94210815 -254.90982056]
[293.41986084 -254.36993408]
[286.64916992 -240.98495483]
[279.87844849 -227.59999084]
[284.75213623 -213.57205200]
[278.07632446 -199.90133667]
[263.32949829 -194.88449097]
[256.55880737 -181.49952698]
[249.78808594 -168.11454773]
[243.01737976 -154.72956848]
[236.24667358 -141.34460449]
[229.47595215 -127.95963287]
[222.70524597 -114.57465363]
[227.57893372 -100.54672241]
[220.90313721 -86.87600708]
[206.15631104 -81.85916138]
[199.38560486 -68.47418976]
[192.61488342 -55.08921432]
[185.84417725 -41.70424271]
[185.63006592 -34.27854538]
[178.80854797 -28.12608910]
[171.77796936 -14.87577248]
[164.74737549 -1.62545681]
[167.99304199 10.06037331]
[162.20246887 21.17171669]
[150.00779724 25.47350502]
[142.72001648 38.58411789]
[135.43223572 51.69473267]
[128.14443970 64.80535126]
[120.85666656 77.91596222]
[113.56887817 91.02658081]
[114.29503632 107.76457977]
[99.85910797 116.26705170]
[92.82852173 129.51736450]
[85.79793549 142.76768494]
[78.76734924 156.01800537]
[71.73677063 169.26831055]
[64.70618439 182.51863098]
[57.80520630 195.83691406]
[51.03449631 209.22187805]
[44.26378632 222.60685730]
[37.49308014 235.99182129]
[30.72236824 249.37680054]
[23.95166016 262.76177979]
[17.18095016 276.14675903]
[19.24927521 296.16543579]
[2.70870566 306.12335205]
[-3.53461909 319.76229858]
[-9.77794361 333.40124512]
[-16.02126884 347.04019165]
[-22.26459312 360.67913818]
[-13.11423016 368.81344604]
[-6.40292311 379.03601074]
[-2.58651471 390.63876343]
[-1.92065048 402.82037354]
[-4.44366646 414.74166870]
[-9.97446823 425.58328247]
[-18.12550354 434.60211182]
[-28.32991982 441.18215942]
[-39.88096619 444.87664795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[5 21]
[6 20]
[32 151]
[33 150]
[34 149]
[35 148]
[36 147]
[40 145]
[41 144]
[42 143]
[43 142]
[44 141]
[45 140]
[46 139]
[48 138]
[49 137]
[50 136]
[51 135]
[52 134]
[53 133]
[56 131]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[63 123]
[64 122]
[65 121]
[66 119]
[67 118]
[68 117]
[69 116]
[72 113]
[73 112]
[74 111]
[75 110]
[76 109]
[77 108]
[78 107]
[81 104]
[82 103]
[83 102]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
