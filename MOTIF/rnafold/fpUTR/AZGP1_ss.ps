%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUGGCCUGUAGAUUCACCUCCCCUGGGCAGGGCCCCAGGACCCAGGAUAAUAUCUGUGCCUCCUGCCCAGAACCCUCCAAGCAGACACA\
) } def
/len { sequence length } bind def

/coor [
[132.00122070 173.28550720]
[127.66643524 166.93542480]
[125.00662231 159.70187378]
[124.19120026 152.01945496]
[125.27850342 144.35208130]
[128.21166992 137.16497803]
[117.33978271 126.83047485]
[106.46788788 116.49597168]
[96.30485535 117.32906342]
[87.36566162 112.42272186]
[82.61099243 103.40193939]
[83.61562347 93.25442505]
[73.46620941 82.20954132]
[63.31680298 71.16465759]
[53.16739273 60.11977005]
[43.01798248 49.07488251]
[25.26217651 51.75935745]
[9.51122856 43.46141815]
[1.81894588 27.57753754]
[5.01858282 10.37870693]
[-5.85330915 0.04420356]
[-16.72520065 -10.29030037]
[-35.45895386 -8.96503067]
[-49.12647629 -21.38375282]
[-49.58089066 -39.53126144]
[-61.12565994 -49.10823059]
[-72.67042542 -58.68519974]
[-84.21519470 -68.26216888]
[-95.75996399 -77.83913422]
[-107.30473328 -87.41609955]
[-123.01564789 -85.70068359]
[-135.28544617 -95.66199493]
[-136.83465576 -111.39016724]
[-126.74418640 -123.55395508]
[-111.00051117 -124.93680573]
[-98.94408417 -114.71828461]
[-97.72776794 -98.96086884]
[-86.18299866 -89.38390350]
[-74.63822937 -79.80693817]
[-63.09346008 -70.22996521]
[-51.54869080 -60.65299988]
[-40.00392151 -51.07603073]
[-28.90491104 -54.61285782]
[-17.37756729 -52.23466873]
[-8.40158367 -44.43500137]
[-4.35629988 -33.12412643]
[-6.39069700 -21.16219139]
[4.48119450 -10.82768822]
[15.35308647 -0.49318445]
[27.06120300 -4.48670292]
[39.41942596 -3.03303170]
[50.00471878 3.64616179]
[56.71439743 14.29849815]
[58.18367767 26.87529564]
[54.06287003 38.92547607]
[64.21228027 49.97035980]
[74.36168671 61.01524353]
[84.51109314 72.06012726]
[94.66050720 83.10501862]
[112.63433838 87.57727814]
[116.80239105 105.62407684]
[127.67428589 115.95858002]
[138.54617310 126.29309082]
[162.22825623 122.28524017]
[181.64263916 136.03273010]
[185.64820862 159.24873352]
[199.11528015 165.85464478]
[212.58235168 172.46055603]
[226.04942322 179.06648254]
[239.72821045 171.98150635]
[254.78005981 174.28266907]
[265.46435547 184.88031006]
[267.83126831 199.56144714]
[281.29830933 206.16735840]
[297.61462402 204.52101135]
[306.97769165 217.98448181]
[299.75558472 232.70770264]
[283.37780762 233.54469299]
[274.69241333 219.63442993]
[261.22534180 213.02851868]
[248.16705322 220.14323425]
[233.24678040 218.18122864]
[222.21376038 207.68714905]
[219.44351196 192.53353882]
[205.97644043 185.92762756]
[192.50936890 179.32171631]
[179.04229736 172.71580505]
[173.53463745 177.89306641]
[166.91354370 181.57812500]
[159.57530212 183.54011536]
[151.96159363 183.65158081]
[144.53303528 181.89672852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[20 49]
[21 48]
[22 47]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[66 87]
[67 86]
[68 85]
[69 84]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
