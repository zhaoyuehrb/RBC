%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAAACUGCGCCUGGGCAACCAGUCGGGAGGGUGAGUCCCGCGCGCGACAGAAGCUUCUGGCGCGA\
) } def
/len { sequence length } bind def

/coor [
[111.58186340 125.06737518]
[101.22047424 126.62516785]
[91.40281677 124.21154785]
[82.47589874 136.26602173]
[73.54898071 148.32048035]
[68.98170471 164.64764404]
[52.02826309 164.77867126]
[47.20918274 148.52404785]
[61.49451828 139.39356995]
[70.42143250 127.33910370]
[79.34835052 115.28462982]
[76.92369843 111.29579163]
[75.26077271 106.93408203]
[74.41448212 102.34349060]
[59.72821808 99.29164886]
[45.04195786 96.23980713]
[30.35569763 93.18796539]
[14.96044064 98.83757782]
[2.54519439 88.12339783]
[5.88169956 72.06725311]
[21.53764534 67.18633270]
[33.40753555 78.50170898]
[48.09379959 81.55354309]
[62.78005981 84.60538483]
[77.46632385 87.65722656]
[90.90111542 73.42037201]
[112.15679169 72.03275299]
[112.83950806 57.04830170]
[113.52223206 42.06384659]
[114.20494843 27.07939148]
[114.88766479 12.09493637]
[103.25677490 1.64235783]
[101.11698151 -13.84813309]
[109.47863007 -27.06239891]
[124.39360809 -31.76107025]
[138.81951904 -25.72557640]
[145.94488525 -11.80569267]
[142.40533447 3.42603683]
[129.87211609 12.77765465]
[129.18940735 27.76210976]
[128.50668335 42.74656677]
[127.82396698 57.73102188]
[127.14124298 72.71547699]
[135.51025391 85.16375732]
[149.64416504 90.18695068]
[163.77809143 95.21014404]
[177.91200256 100.23333740]
[192.04591370 105.25653076]
[199.15368652 104.36547089]
[204.65713501 107.02774811]
[207.20100403 111.43315887]
[220.81958008 117.72080994]
[234.43814087 124.00846100]
[248.05671692 130.29611206]
[264.32983398 128.26681519]
[274.00665283 141.50656128]
[267.13250732 156.39543152]
[250.77893066 157.61701965]
[241.76907349 143.91467285]
[228.15049744 137.62702942]
[214.53192139 131.33938599]
[200.91336060 125.05173492]
[187.02272034 119.39044189]
[172.88880920 114.36724854]
[158.75489807 109.34405518]
[144.62097168 104.32086182]
[130.48706055 99.29766846]
[127.59983063 110.51402283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[14 25]
[15 24]
[16 23]
[17 22]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
