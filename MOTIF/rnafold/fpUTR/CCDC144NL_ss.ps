%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGGCGUGGCAGUGAUCGCUUGGCUUGGCAUUUCUGGCUUAGCGGUCCUCCUUUCGCAGAUUGGAAACCGCGGGCUAUCCUGCUGGGAGGUUGUGGCCGAGGCAGUAGCUCGCUACUG\
) } def
/len { sequence length } bind def

/coor [
[186.23918152 173.13606262]
[172.55061340 165.86534119]
[160.97872925 155.54054260]
[152.19100952 142.75164795]
[146.69563293 128.23097229]
[144.81214905 112.81111145]
[129.91441345 111.06255341]
[115.01667023 109.31400299]
[98.39643860 117.59771729]
[83.54718781 106.44638824]
[68.57877350 105.47344208]
[59.68954468 108.06212616]
[53.23598862 104.27595520]
[38.29788208 102.91474152]
[29.34444618 105.27178955]
[22.99135780 101.31935883]
[8.09362030 99.57080078]
[-6.80411577 97.82224274]
[-21.70185280 96.07368469]
[-36.59959030 94.32512665]
[-51.49732590 92.57656860]
[-66.39505768 90.82801819]
[-81.00308990 96.90386963]
[-92.74165344 87.73569489]
[-107.63938904 85.98714447]
[-122.53712463 84.23858643]
[-137.43486023 82.49002838]
[-152.04289246 88.56588745]
[-163.78144836 79.39771271]
[-178.67918396 77.64915466]
[-193.51800537 84.63068390]
[-206.82731628 75.04976654]
[-204.91566467 58.76242065]
[-189.74957275 52.52367783]
[-176.93063354 62.75141907]
[-162.03289795 64.49997711]
[-148.49044800 58.29904938]
[-135.68630981 67.59229279]
[-120.78856659 69.34085083]
[-105.89083099 71.08940125]
[-90.99309540 72.83795929]
[-77.45065308 66.63703156]
[-64.64650726 75.93027496]
[-49.74876785 77.67883301]
[-34.85103226 79.42739105]
[-19.95329475 81.17594910]
[-5.05555916 82.92450714]
[9.84217739 84.67306519]
[24.73991394 86.42161560]
[39.65909195 87.97663116]
[54.59720230 89.33784485]
[69.55171967 90.50502777]
[84.52013397 91.47798157]
[91.70964813 84.39483643]
[101.60356140 82.40228271]
[110.97438049 86.15030670]
[116.76522827 94.41625977]
[131.66296387 96.16481781]
[146.56069946 97.91337585]
[151.53941345 84.18614960]
[159.46052551 71.92808533]
[169.91917419 61.75947189]
[182.38221741 54.19397354]
[196.21536255 49.61266708]
[210.71546936 48.24486160]
[225.14634705 50.15661621]
[238.77600098 55.24755096]
[250.91389465 63.25613403]
[260.94586182 73.77308655]
[268.36517334 86.26231384]
[272.79821777 100.08824158]
[274.02322388 114.54813385]
[288.87054443 116.68286133]
[303.71786499 118.81758118]
[318.56518555 120.95230103]
[333.41250610 123.08702850]
[348.25982666 125.22174835]
[363.10714722 127.35646820]
[377.95446777 129.49119568]
[384.41036987 127.32937622]
[390.09692383 128.64341736]
[393.50912476 132.14146423]
[408.22561646 135.04393005]
[422.94213867 137.94641113]
[437.65863037 140.84889221]
[452.37515259 143.75137329]
[460.88381958 135.24356079]
[472.34219360 131.98825073]
[483.81817627 134.69635010]
[492.43420410 142.56814575]
[496.08880615 153.52459717]
[510.63482666 157.18699646]
[525.18084717 160.84941101]
[540.79858398 155.84756470]
[552.75561523 167.07080078]
[548.75158691 182.97363281]
[532.90551758 187.19656372]
[521.51843262 175.39543152]
[506.97244263 171.73301697]
[492.42642212 168.07061768]
[477.42645264 178.40887451]
[459.29818726 174.55415344]
[449.47268677 158.46788025]
[434.75616455 155.56539917]
[420.03964233 152.66291809]
[405.32315063 149.76043701]
[390.60662842 146.85797119]
[375.81973267 144.33851624]
[360.97241211 142.20379639]
[346.12509155 140.06907654]
[331.27777100 137.93434143]
[316.43045044 135.79962158]
[301.58312988 133.66490173]
[286.73580933 131.53018188]
[271.88848877 129.39546204]
[266.20040894 143.74827576]
[257.25546265 156.34249878]
[245.56416321 166.45230103]
[231.79533386 173.49382019]
[216.73802185 177.05889893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 59]
[7 58]
[8 57]
[10 53]
[11 52]
[13 51]
[14 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[24 41]
[25 40]
[26 39]
[27 38]
[29 36]
[30 35]
[72 115]
[73 114]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
