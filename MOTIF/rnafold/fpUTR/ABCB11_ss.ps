%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGAUGAAAACCGAGGUUGGAAAAGGUUGUGAAACCUUUUAACUCUCCACAGUGGAGUCCAUUAUUUCCUCUGGCUUCCUCAAAUUCAUAUUCACAGGGUCGUUGGCUGUGGGUUGCAAUUACC\
) } def
/len { sequence length } bind def

/coor [
[254.80961609 280.83978271]
[244.40159607 270.03823853]
[233.99359131 259.23669434]
[223.58558655 248.43513489]
[213.17758179 237.63359070]
[206.19590759 234.97137451]
[202.64984131 226.43379211]
[192.51219177 215.37811279]
[182.37452698 204.32243347]
[172.23687744 193.26675415]
[159.10977173 196.00701904]
[146.24816895 191.84370422]
[137.07061768 181.77023315]
[134.07243347 168.36557007]
[138.14785767 155.13453674]
[128.28675842 143.83148193]
[118.42565918 132.52844238]
[108.56456757 121.22540283]
[83.32587433 120.37927246]
[70.72912598 94.54656219]
[55.98653793 91.77959442]
[41.24394989 89.01262665]
[26.50136375 86.24565125]
[11.59420300 84.57935333]
[-3.39547229 84.02290344]
[-18.38514709 83.46644592]
[-33.37482071 82.90999603]
[-48.36449814 82.35353851]
[-63.35417175 81.79708862]
[-78.34384918 81.24063110]
[-92.57946014 89.38184357]
[-106.60958862 80.89139557]
[-106.00122833 64.50354004]
[-91.38021851 57.07669067]
[-77.78739166 66.25096130]
[-62.79771805 66.80741119]
[-47.80804443 67.36386871]
[-32.81836700 67.92031860]
[-17.82869339 68.47677612]
[-2.83901858 69.03322601]
[12.15065670 69.58968353]
[3.33271050 57.45527649]
[5.45197058 42.60573959]
[17.31228447 33.42243958]
[32.21945953 35.08861542]
[41.75959396 46.66384125]
[40.54804993 61.61483383]
[29.26833344 71.50306702]
[44.01092148 74.27003479]
[58.75350952 77.03701019]
[73.49609375 79.80397797]
[85.03958893 70.22547150]
[85.03958893 55.22547150]
[85.03958893 40.22547150]
[77.30229187 26.42530060]
[85.03958893 13.69802856]
[85.03958893 -1.30197167]
[85.03958893 -16.30197144]
[85.03958893 -31.30197144]
[72.40733337 -40.31338882]
[67.51633453 -55.03948212]
[72.24729156 -69.81776428]
[84.78105164 -78.96569061]
[100.29812622 -78.96569061]
[112.83188629 -69.81776428]
[117.56284332 -55.03948212]
[112.67185211 -40.31338882]
[100.03958893 -31.30197144]
[100.03958893 -16.30197144]
[100.03958893 -1.30197167]
[100.03958893 13.69802856]
[107.77689362 26.42530060]
[100.03958893 40.22547150]
[100.03958893 55.22547150]
[100.03958893 70.22547150]
[111.55694580 74.06079102]
[120.06511688 81.90381622]
[124.37274933 92.03010559]
[124.13991547 102.46520996]
[119.86760712 111.36430359]
[129.72869873 122.66735077]
[139.58979797 133.97039795]
[149.45089722 145.27343750]
[166.22271729 143.52348328]
[180.61048889 151.99661255]
[187.08450317 167.20809937]
[183.29255676 183.12910461]
[193.43020630 194.18478394]
[203.56785583 205.24046326]
[213.70552063 216.29612732]
[223.97912598 227.22558594]
[234.38713074 238.02713013]
[244.79513550 248.82867432]
[255.20315552 259.63021851]
[265.61114502 270.43176270]
[285.73583984 268.82794189]
[300.52398682 287.82843018]
[313.81243896 294.78665161]
[329.62716675 294.33380127]
[337.31304932 307.09219360]
[350.60150146 314.05041504]
[363.88998413 321.00860596]
[377.17843628 327.96682739]
[394.01507568 329.95785522]
[396.76269531 346.68768311]
[381.44732666 353.95919800]
[370.22024536 341.25527954]
[356.93176270 334.29708862]
[343.64331055 327.33886719]
[330.35482788 320.38067627]
[315.49060059 321.33117676]
[306.85424805 308.07510376]
[293.56576538 301.11688232]
[282.26272583 310.97799683]
[287.35427856 325.08743286]
[292.44580078 339.19686890]
[307.18695068 344.41540527]
[315.08032227 357.91461182]
[312.39892578 373.32058716]
[300.40884399 383.35910034]
[284.77139282 383.29025269]
[272.87014771 373.14660645]
[270.32446289 357.71762085]
[278.33636475 344.28839111]
[273.24484253 330.17895508]
[268.15328979 316.06951904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[7 90]
[8 89]
[9 88]
[10 87]
[15 83]
[16 82]
[17 81]
[18 80]
[20 51]
[21 50]
[22 49]
[23 48]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[52 75]
[53 74]
[54 73]
[56 71]
[57 70]
[58 69]
[59 68]
[97 113]
[98 112]
[100 110]
[101 109]
[102 108]
[103 107]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
