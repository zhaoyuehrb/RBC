%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUUUGCCUUCCGGUAUGUGGCCCCGUCUGGCUAGUCCUGUCUAGCGCGCCCAUUUCGAGCCCAAGUUUCCAGCUCGGGUUUCCGGGCUCAGAAUUUUCCAGGAGUGGGUUCUUGGGCAGUGGCUGUGGGAGCAGGA\
) } def
/len { sequence length } bind def

/coor [
[37.42175293 238.29541016]
[34.72513580 240.15873718]
[31.92117119 240.82482910]
[23.65771675 253.34342957]
[27.49385643 270.37051392]
[18.04897881 284.64611816]
[1.54014850 287.65353394]
[-6.44033289 300.35440063]
[-14.42081356 313.05526733]
[-22.40129471 325.75613403]
[-22.47343826 342.15512085]
[-36.84376907 350.05609131]
[-50.72932434 341.33123779]
[-49.84583282 324.95590210]
[-35.10215759 317.77563477]
[-27.12167740 305.07479858]
[-19.14119530 292.37393188]
[-11.16071415 279.67306519]
[-15.76375294 267.58685303]
[-12.49142838 254.87306213]
[-2.32776093 246.25860596]
[11.13911724 245.07997131]
[19.40257263 232.56137085]
[27.09606171 219.68464661]
[34.20409012 206.47570801]
[27.58582687 193.15893555]
[30.10791969 178.32305908]
[41.00976181 167.69276428]
[56.25688934 165.49473572]
[63.36492157 152.28581238]
[70.47294617 139.07687378]
[69.69057465 124.20282745]
[83.04347229 115.71692657]
[90.15150452 102.50798798]
[90.90811920 94.41075897]
[97.57010651 89.08504486]
[104.97272491 76.03893280]
[112.37535095 62.99281311]
[119.77797699 49.94669724]
[127.03376007 36.81834412]
[134.14178467 23.60941124]
[141.24981689 10.40047836]
[148.35784912 -2.80845475]
[155.46588135 -16.01738739]
[162.57391357 -29.22632027]
[169.68193054 -42.43525314]
[176.78996277 -55.64418793]
[171.44633484 -68.06157684]
[174.21595764 -81.09378052]
[183.86100769 -90.00004578]
[196.68528748 -91.67389679]
[204.08792114 -104.72001648]
[211.49053955 -117.76613617]
[218.89315796 -130.81225586]
[226.29579163 -143.85836792]
[233.69841003 -156.90447998]
[241.10102844 -169.95060730]
[248.50366211 -182.99671936]
[255.90628052 -196.04283142]
[248.29187012 -206.58592224]
[245.26985168 -219.18692017]
[247.25959778 -231.94406128]
[253.92687988 -242.94595337]
[264.23934937 -250.55793762]
[276.62625122 -253.66493225]
[289.21762085 -251.83468628]
[297.19808960 -264.53555298]
[305.17858887 -277.23641968]
[313.15905762 -289.93728638]
[321.13955688 -302.63815308]
[329.12002563 -315.33898926]
[325.81851196 -330.56195068]
[334.09280396 -343.32873535]
[348.62588501 -346.38241577]
[356.60635376 -359.08325195]
[364.58685303 -371.78411865]
[372.56732178 -384.48498535]
[380.54782104 -397.18585205]
[388.52828979 -409.88671875]
[396.50878906 -422.58758545]
[396.58093262 -438.98657227]
[410.95126343 -446.88754272]
[424.83679199 -438.16268921]
[423.95330811 -421.78735352]
[409.20962524 -414.60708618]
[401.22915649 -401.90625000]
[393.24868774 -389.20538330]
[385.26818848 -376.50451660]
[377.28771973 -363.80364990]
[369.30722046 -351.10278320]
[361.32675171 -338.40191650]
[364.88116455 -323.98312378]
[356.96875000 -310.98895264]
[341.82089233 -307.35852051]
[333.84042358 -294.65765381]
[325.85992432 -281.95678711]
[317.87945557 -269.25592041]
[309.89895630 -256.55508423]
[301.91848755 -243.85420227]
[310.50366211 -229.00871277]
[310.43673706 -211.77119446]
[301.64675903 -196.84031677]
[286.45272827 -188.33094788]
[268.95239258 -188.64021301]
[261.54977417 -175.59410095]
[254.14715576 -162.54797363]
[246.74452209 -149.50186157]
[239.34190369 -136.45574951]
[231.93928528 -123.40962982]
[224.53665161 -110.36351013]
[217.13403320 -97.31739044]
[209.73141479 -84.27127838]
[214.90609741 -68.30854797]
[206.81069946 -53.22667313]
[189.99890137 -48.53615570]
[182.89086914 -35.32722473]
[175.78283691 -22.11828995]
[168.67480469 -8.90935802]
[161.56677246 4.29957533]
[154.45875549 17.50850868]
[147.35072327 30.71744156]
[140.24269104 43.92637253]
[139.83969116 51.36846161]
[132.82409668 57.34931946]
[125.42147064 70.39543915]
[118.01884460 83.44155121]
[110.61621857 96.48767090]
[103.36043549 109.61602020]
[96.25241089 122.82495117]
[96.52636719 138.64378357]
[83.68188477 146.18490601]
[76.57385254 159.39382935]
[69.46582031 172.60276794]
[76.03100586 186.53849792]
[73.16503906 201.49308777]
[62.17283249 211.77099609]
[47.41302490 213.58374023]
[40.30499268 226.79266357]
[40.61749649 231.31361389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[7 18]
[8 17]
[9 16]
[10 15]
[24 138]
[25 137]
[29 133]
[30 132]
[31 131]
[33 129]
[34 128]
[36 127]
[37 126]
[38 125]
[39 124]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[51 112]
[52 111]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
