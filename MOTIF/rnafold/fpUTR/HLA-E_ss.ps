%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGACUCAGUUCUCAUUCCCAAUGGGUGUCGGGUUUCUAGAGAAGCCAAUCAGCGUCGCCACGACUCCCGACUAUAAAGUCCCCAUCCGGACUCAAGAAGUUCUCAGGACUCAGAGGCUGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[86.66008759 324.85198975]
[72.09445953 319.76806641]
[62.60764694 307.60238647]
[61.22685242 292.23693848]
[68.39268494 278.57479858]
[81.81855774 270.97549438]
[82.56036377 255.99383545]
[83.30216980 241.01219177]
[84.04397583 226.03054810]
[84.78578186 211.04890442]
[85.52758789 196.06726074]
[82.68555450 189.15681458]
[86.47756195 180.72558594]
[87.58970642 165.76687622]
[88.70184326 150.80816650]
[79.13668060 147.68479919]
[70.35123444 142.77929688]
[62.67385864 136.27500916]
[56.39146805 128.41502380]
[42.77515030 134.70755005]
[29.15883636 141.00009155]
[17.31724548 153.13322449]
[2.38019466 145.11318970]
[5.95181179 128.53971863]
[22.86630630 127.38376617]
[36.48262024 121.09123993]
[50.09893799 114.79871368]
[49.69668198 86.63234711]
[64.02836609 62.38139343]
[55.33209610 50.15949631]
[46.63582230 37.93759537]
[37.93954849 25.71569633]
[29.24327469 13.49379730]
[20.54700089 1.27189744]
[5.21574497 -1.48316383]
[-3.42940736 -14.00179005]
[-0.70839608 -28.60082054]
[-9.40466976 -40.82271957]
[-25.79527855 -39.07587433]
[-40.75760651 -45.76601410]
[-50.27523041 -58.99428940]
[-51.84516907 -75.12092590]
[-45.13552475 -89.76646423]
[-54.13143921 -101.76953125]
[-68.59920502 -108.17221069]
[-70.04067993 -122.99690247]
[-79.03659821 -134.99996948]
[-94.71484375 -136.99197388]
[-104.32629395 -149.53771973]
[-102.16864014 -165.19403076]
[-89.52198029 -174.67228699]
[-73.88935852 -172.34922791]
[-64.54532623 -159.60307312]
[-67.03353119 -143.99588013]
[-58.03762054 -131.99281311]
[-44.21330261 -126.44866943]
[-42.12837982 -110.76544189]
[-33.13246155 -98.76238251]
[-19.65145111 -101.28186035]
[-6.34219933 -97.70773315]
[4.16376495 -88.68724060]
[9.76355362 -75.95030212]
[9.30369282 -61.97792435]
[2.81722999 -49.51899338]
[11.51350307 -37.29709244]
[26.19789886 -35.08256912]
[35.19126129 -22.81170654]
[32.76890182 -7.42437601]
[41.46517181 4.79752350]
[50.16144562 17.01942253]
[58.85771942 29.24132347]
[67.55399323 41.46322250]
[76.25026703 53.68512344]
[88.16919708 49.31321716]
[100.79198456 47.95684052]
[113.36765289 49.69668198]
[125.14803314 54.42924118]
[135.43228149 61.87295532]
[143.60853577 71.58497620]
[157.22485352 65.29244232]
[170.84117126 58.99991608]
[184.45747375 52.70738602]
[198.07379150 46.41485596]
[203.29426575 31.49767494]
[217.56977844 24.71643639]
[232.43093872 30.09432602]
[239.06086731 44.44073868]
[233.52615356 59.24420166]
[219.11044312 65.72208405]
[204.36633301 60.03116989]
[190.75001526 66.32369995]
[177.13369751 72.61623383]
[163.51737976 78.90876007]
[149.90106201 85.20128632]
[151.24778748 90.90153503]
[151.94554138 96.71699524]
[151.98550415 102.57402802]
[151.36714172 108.39846039]
[150.09831238 114.11654663]
[148.19506836 119.65586853]
[161.12316895 127.26272583]
[174.05126953 134.86958313]
[186.97935486 142.47644043]
[199.90745544 150.08329773]
[216.62503052 152.90452576]
[218.54193115 169.74975586]
[202.88568115 176.25497437]
[192.30059814 163.01139832]
[179.37249756 155.40454102]
[166.44439697 147.79768372]
[153.51631165 140.19082642]
[140.58821106 132.58396912]
[130.22962952 142.37083435]
[117.60494995 148.98146057]
[103.66056061 151.92030334]
[102.54841614 166.87901306]
[101.43627930 181.83773804]
[100.50923157 196.80906677]
[99.76742554 211.79071045]
[99.02561951 226.77235413]
[98.28381348 241.75399780]
[97.54200745 256.73565674]
[96.80020142 271.71728516]
[109.40969849 280.60571289]
[115.19084930 294.90893555]
[112.29891205 310.06283569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[13 117]
[14 116]
[15 115]
[19 27]
[20 26]
[21 25]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[37 65]
[38 64]
[43 58]
[44 57]
[46 55]
[47 54]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
