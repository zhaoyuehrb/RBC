%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUUAUUGCAGAAGUUUCCAAACUGAAGCAAGCUGUGCCCAGGUCCCUGUAACAGCAGGUGGCUUUCUGACAUCAGCAGAGACUGGUGCUUUUUCCCAGGUACAAAGGACCUCCAGACCAGAGCCAGCCAGCAGCAAAAAGAGC\
) } def
/len { sequence length } bind def

/coor [
[86.79856873 265.75476074]
[73.89726257 257.75970459]
[64.75843048 245.64170837]
[60.61800385 231.03959656]
[62.03595734 215.92822266]
[68.82051849 202.35125732]
[80.05413055 192.14486694]
[94.21754456 186.68939209]
[94.21754456 171.68939209]
[94.21754456 156.68939209]
[94.21754456 141.68939209]
[87.64369965 138.07904053]
[80.42280579 151.22662354]
[67.27534485 144.00552368]
[74.49600983 130.85835266]
[67.92216492 127.24801636]
[55.26412201 135.29623413]
[42.60607910 143.34446716]
[29.94803619 151.39268494]
[17.28999138 159.44091797]
[14.10065460 174.92005920]
[0.85429490 183.54034424]
[-14.59025669 180.18753052]
[-23.07002258 166.85076904]
[-19.55410767 151.44253540]
[-6.12844133 143.10424805]
[9.24176598 146.78286743]
[21.89980888 138.73464966]
[34.55785370 130.68641663]
[47.21589661 122.63819885]
[59.87393951 114.58997345]
[61.46235657 106.98490143]
[64.36689758 100.35144806]
[68.30375671 94.89863586]
[54.46094894 89.12138367]
[40.61814117 83.34413147]
[26.77533150 77.56687927]
[12.93252277 71.78962708]
[1.10632813 78.32405090]
[-12.12849617 76.85272980]
[-21.93908882 68.13942719]
[-24.87391663 55.55069733]
[-38.59010696 49.47894669]
[-52.30629730 43.40719604]
[-68.54531860 45.69327164]
[-78.43007660 32.60802841]
[-71.79197693 17.61244011]
[-55.45972443 16.13268661]
[-46.23454666 29.69100761]
[-32.51835632 35.76276016]
[-18.80216789 41.83450699]
[-3.42535186 35.10269165]
[12.38675022 41.67251968]
[18.70977592 57.94682312]
[32.55258560 63.72407150]
[46.39539337 69.50132751]
[60.23820114 75.27857971]
[74.08100891 81.05583191]
[96.23507690 68.11738586]
[120.79348755 75.53969574]
[132.90986633 66.69700623]
[144.93107605 57.72534561]
[156.85572815 48.62574768]
[168.78038025 39.52614975]
[180.70503235 30.42655182]
[192.62968445 21.32695198]
[204.55433655 12.22735500]
[216.18119812 2.75022769]
[227.49833679 -7.09468937]
[238.81547546 -16.93960571]
[250.13261414 -26.78452301]
[246.69816589 -48.57154846]
[266.94464111 -67.51412201]
[271.97439575 -81.64569855]
[277.00415039 -95.77727509]
[282.03390503 -109.90885162]
[287.06365967 -124.04043579]
[292.09344482 -138.17201233]
[285.08685303 -152.33828735]
[290.22857666 -167.28279114]
[304.46813965 -174.13920593]
[319.35745239 -168.83975220]
[326.06292725 -154.52850342]
[320.60635376 -139.69606018]
[306.22500610 -133.14225769]
[301.19525146 -119.01067352]
[296.16549683 -104.87909698]
[291.13574219 -90.74751282]
[286.10595703 -76.61593628]
[281.07620239 -62.48435974]
[285.81475830 -56.67092514]
[297.00384521 -66.66115570]
[308.19290161 -76.65139008]
[317.27822876 -88.58692932]
[331.67501831 -84.37600708]
[332.89651489 -69.42581940]
[319.37420654 -62.93377686]
[307.33306885 -53.98891449]
[295.29190063 -45.04405594]
[300.03045654 -39.23062134]
[314.88595581 -41.30763626]
[329.74148560 -43.38465118]
[344.59698486 -45.46166611]
[352.73916626 -58.81228256]
[367.57446289 -63.75674057]
[382.09811401 -57.96042252]
[389.45251465 -44.16016388]
[386.16510010 -28.87203407]
[373.78811646 -19.31461334]
[358.16558838 -20.00062752]
[346.67398071 -30.60616112]
[331.81848145 -28.52914619]
[316.96298218 -26.45213127]
[302.10748291 -24.37511635]
[280.28082275 -8.69372559]
[259.97753906 -15.46738529]
[248.66040039 -5.62246847]
[237.34326172 4.22244835]
[226.02612305 14.06736565]
[225.43705750 17.61176491]
[223.05845642 21.03388405]
[218.97337341 23.47561073]
[213.65393066 24.15200615]
[201.72927856 33.25160599]
[189.80462646 42.35120392]
[177.87997437 51.45080185]
[165.95532227 60.55039978]
[154.03067017 69.64999390]
[150.59692383 76.25489807]
[141.75256348 78.81338501]
[129.63618469 87.65608215]
[134.18777466 98.45742035]
[134.66938782 110.89496613]
[130.52230835 123.39900208]
[121.80036926 134.22430420]
[109.21754456 141.68939209]
[109.21754456 156.68939209]
[109.21754456 171.68939209]
[109.21754456 186.68939209]
[123.38095093 192.14486694]
[134.61456299 202.35125732]
[141.39912415 215.92822266]
[142.81707764 231.03959656]
[138.67665100 245.64170837]
[129.53781128 257.75970459]
[116.63651276 265.75476074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 139]
[9 138]
[10 137]
[11 136]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[42 51]
[43 50]
[44 49]
[60 131]
[61 130]
[62 128]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[68 119]
[69 118]
[70 117]
[71 116]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
