%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAACCGGGGGGUUGUCGGUCUAUAAGCCUCGCCCGUUCCGCUCCCUGGGGCUUCCCCGAGCGCCGUCGGUGGUC\
) } def
/len { sequence length } bind def

/coor [
[91.17217255 108.10237122]
[92.77816772 103.58264160]
[78.03027344 100.84409332]
[63.28238297 98.10554504]
[48.53448868 95.36700439]
[33.78659439 92.62845612]
[18.80576515 97.71621704]
[7.70499992 87.78533936]
[-7.04289341 85.04679871]
[-21.84358025 82.60965729]
[-36.69090271 80.47492981]
[-51.53822327 78.34020996]
[-66.38554382 76.20548248]
[-81.23286438 74.07076263]
[-96.08019257 71.93604279]
[-104.99755859 84.37545776]
[-118.67958069 91.23554993]
[-133.98223877 90.93990326]
[-147.38908386 83.55646515]
[-155.81932068 70.78189850]
[-157.33573914 55.55169678]
[-151.58990479 41.36565399]
[-139.90213013 31.48361588]
[-124.95820618 28.17640495]
[-110.19212341 32.20399475]
[-98.99702454 42.64087296]
[-93.94546509 57.08871841]
[-79.09814453 59.22344208]
[-64.25082397 61.35816574]
[-49.40349960 63.49288559]
[-34.55617905 65.62760925]
[-19.70885849 67.76232910]
[-12.43652439 65.53371429]
[-4.30434608 70.29890442]
[10.44354725 73.03745270]
[24.36950874 67.75380707]
[36.52514267 77.88056183]
[51.27303314 80.61911011]
[66.02092743 83.35765839]
[80.76882172 86.09619904]
[95.51671600 88.83474731]
[110.40449524 87.00333405]
[124.04897308 80.77210999]
[137.69345093 74.54088593]
[151.33793640 68.30966187]
[154.67546082 63.56036377]
[159.12644958 61.02771378]
[163.56793213 60.74734879]
[167.05050659 62.26590347]
[181.35371399 57.74721146]
[195.65690613 53.22851562]
[209.96009827 48.70982361]
[223.24200439 38.17288208]
[237.04396057 48.01881409]
[231.40357971 64.00700378]
[214.47879028 63.01301956]
[200.17559814 67.53171539]
[185.87240601 72.05040741]
[171.56919861 76.56909943]
[157.56915283 81.95413971]
[143.92468262 88.18536377]
[130.28019714 94.41658783]
[116.63571930 100.64781189]
[112.70419312 115.12342072]
[121.32176208 127.40093994]
[129.93933105 139.67846680]
[145.54789734 142.15798950]
[154.76379395 154.99710083]
[152.11936951 170.57858276]
[139.18354797 179.65821838]
[123.63088989 176.84922791]
[114.68852997 163.81811523]
[117.66180420 148.29603577]
[109.04423523 136.01850891]
[100.42667389 123.74098206]
[94.82524109 119.13671875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[8 35]
[9 34]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[42 63]
[43 62]
[44 61]
[45 60]
[49 59]
[50 58]
[51 57]
[52 56]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
