%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGAGGGGGCGCUGUGCCAGGCGGCGGCCGUGCGGGGCGGGCGCGCUGCUCCUUCCGCCUCGCGGACCCCGGAAGCGCGCGUGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[22.95287704 144.68876648]
[13.70593739 146.97212219]
[4.61186218 144.65354919]
[-2.20693469 138.41020203]
[-16.89319611 141.46203613]
[-23.34249878 155.45178223]
[-36.63736725 162.87471008]
[-51.57714081 161.06716919]
[-62.45760345 150.93043518]
[-77.14386749 153.98226929]
[-89.08119202 164.36546326]
[-103.11646271 159.37944031]
[-117.80272675 162.43128967]
[-132.48898315 165.48312378]
[-147.17524719 168.53495789]
[-161.86151123 171.58680725]
[-176.54777527 174.63864136]
[-186.51351929 187.21096802]
[-202.55628967 187.11405945]
[-212.36941528 174.42224121]
[-208.42512512 158.87161255]
[-193.74914551 152.39126587]
[-179.59960938 159.95237732]
[-164.91334534 156.90054321]
[-150.22708130 153.84870911]
[-135.54083252 150.79685974]
[-120.85456848 147.74502563]
[-106.16830444 144.69317627]
[-95.28143311 134.52827454]
[-80.19570160 139.29602051]
[-65.50944519 136.24417114]
[-59.56824875 122.61185455]
[-46.58544159 115.00194550]
[-31.43393517 116.51364899]
[-19.94503593 126.77577972]
[-5.25877476 123.72393799]
[8.53694248 108.53697205]
[28.91075325 114.69402313]
[43.20792389 110.15630341]
[57.50509644 105.61858368]
[71.80226898 101.08087158]
[86.09944153 96.54315186]
[95.66680145 86.34720612]
[109.36283875 89.15967560]
[123.66001129 84.62196350]
[137.95718384 80.08424377]
[152.25436401 75.54652405]
[166.55152893 71.00880432]
[180.76914978 66.22765350]
[194.90306091 61.20445633]
[209.03697205 56.18126297]
[223.17088318 51.15806961]
[237.21697998 45.89429855]
[251.17115784 40.39148331]
[263.08972168 22.75772476]
[283.37551880 25.83211708]
[296.69378662 18.93114090]
[310.01208496 12.03016472]
[323.33035278 5.12918949]
[336.64862061 -1.77178609]
[347.93023682 -14.42727280]
[363.21423340 -7.08992815]
[360.39465332 9.62791634]
[343.54959106 11.54649258]
[330.23132324 18.44746780]
[316.91305542 25.34844398]
[303.59475708 32.24942017]
[290.27648926 39.15039444]
[288.92718506 48.29669189]
[283.33602905 55.83439255]
[274.72207642 59.89880371]
[265.07019043 59.40764999]
[256.67398071 54.34566116]
[242.71978760 59.84847641]
[237.54441833 65.34610748]
[228.19407654 65.29198456]
[214.06016541 70.31517792]
[199.92625427 75.33837128]
[185.79234314 80.36156464]
[180.43228149 85.67929840]
[171.08924866 85.30597687]
[156.79206848 89.84369659]
[142.49490356 94.38141632]
[128.19773865 98.91912842]
[113.90055847 103.45684814]
[104.33319855 113.65279388]
[90.63716125 110.84032440]
[76.33998871 115.37803650]
[62.04281616 119.91575623]
[47.74564362 124.45347595]
[33.44847107 128.99119568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[9 31]
[10 30]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[49 79]
[50 78]
[51 77]
[52 76]
[53 74]
[54 73]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
