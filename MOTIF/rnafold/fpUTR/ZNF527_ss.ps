%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAUUCUGGGAGGUGACGUCGCGGGUCUCGGUCGCGGGGCCCGUUUGCAGAGCCCGCGGCGCCGGGAGGACUUUGUUCUUCUUCAGAAGAGAAAACUGAAGAAGGAGGA\
) } def
/len { sequence length } bind def

/coor [
[191.73181152 170.12886047]
[188.18960571 164.27087402]
[175.48873901 156.29039001]
[161.06994629 159.84480286]
[148.07577515 151.93238831]
[144.44534302 136.78453064]
[131.74447632 128.80404663]
[119.04361725 120.82356262]
[106.34275818 112.84308624]
[92.37920380 112.12843323]
[85.67675781 99.85778046]
[72.97589874 91.87729645]
[74.30208588 106.81855774]
[64.87442017 118.48556519]
[49.98773575 120.32582092]
[38.00279236 111.30577087]
[35.65066910 96.49134064]
[44.25237656 84.20269775]
[58.97602463 81.34130859]
[47.79138947 71.34611511]
[36.60675812 61.35091400]
[25.42212677 51.35571289]
[14.23749352 41.36051559]
[3.05286098 31.36531639]
[-8.13177109 21.37011909]
[-19.31640434 11.37491989]
[-30.50103569 1.37972105]
[-39.11644363 -2.07408786]
[-41.85414505 -9.05608082]
[-52.75405121 -19.36103439]
[-63.65395737 -29.66598892]
[-78.99749756 -33.52427673]
[-82.93039703 -47.89026260]
[-93.83029938 -58.19521713]
[-111.78514862 -61.96958542]
[-116.28295898 -78.86860657]
[-127.46759033 -88.86380768]
[-138.65222168 -98.85900879]
[-149.83685303 -108.85420227]
[-165.67613220 -114.90014648]
[-164.25122070 -131.79411316]
[-147.62301636 -135.10159302]
[-139.84165955 -120.03883362]
[-128.65702820 -110.04364014]
[-117.47238922 -100.04843903]
[-106.28775787 -90.05323792]
[-94.10609436 -90.39546967]
[-84.69432068 -82.03441620]
[-83.52534485 -69.09512329]
[-72.62544250 -58.79016495]
[-58.06153870 -55.66896057]
[-53.34900284 -40.56589508]
[-42.44909668 -30.26094055]
[-31.54919243 -19.95598602]
[-20.50583839 -9.80491161]
[-9.32120514 0.19028719]
[1.86342728 10.18548584]
[13.04805946 20.18068504]
[24.23269272 30.17588234]
[35.41732407 40.17108154]
[46.60195541 50.16627884]
[57.78659058 60.16147995]
[68.97122192 70.15667725]
[80.95638275 79.17643738]
[93.65724182 87.15691376]
[107.62079620 87.87156677]
[114.32324219 100.14221954]
[127.02410126 108.12270355]
[139.72496033 116.10318756]
[152.42582703 124.08366394]
[167.64877319 120.78216553]
[180.41555786 129.05642700]
[183.46922302 143.58952332]
[196.17008972 151.57000732]
[209.08978271 159.19113159]
[222.21812439 166.44691467]
[238.03904724 166.35046387]
[245.43557739 179.27874756]
[258.56393433 186.53453064]
[271.69226074 193.79031372]
[284.82061768 201.04609680]
[297.94897461 208.30187988]
[311.07733154 215.55766296]
[324.20568848 222.81344604]
[337.33401489 230.06922913]
[350.46237183 237.32501221]
[363.59072876 244.58079529]
[376.71908569 251.83657837]
[390.24777222 244.42184448]
[405.63592529 245.52111816]
[417.97323608 254.78364563]
[423.32290649 269.25375366]
[419.97790527 284.31411743]
[409.00558472 295.15902710]
[393.90716553 298.32788086]
[379.50051880 292.80953979]
[370.38275146 280.36486816]
[369.46328735 264.96493530]
[356.33496094 257.70913696]
[343.20660400 250.45336914]
[330.07824707 243.19758606]
[316.94989014 235.94180298]
[303.82153320 228.68601990]
[290.69320679 221.43023682]
[277.56484985 214.17445374]
[264.43649292 206.91867065]
[251.30813599 199.66288757]
[238.17979431 192.40708923]
[223.29789734 193.02253723]
[214.96234131 179.57527161]
[201.83399963 172.31948853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[6 70]
[7 69]
[8 68]
[9 67]
[11 65]
[12 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[29 54]
[30 53]
[31 52]
[33 50]
[34 49]
[36 46]
[37 45]
[38 44]
[39 43]
[75 111]
[76 110]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
