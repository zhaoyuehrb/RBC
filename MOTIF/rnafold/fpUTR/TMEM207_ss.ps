%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCUGAGAAAGAAGGAAAUAAACACAGGCACCAAACCACUAUCCUAAGUUGACUGUCCUUUAAAU\
) } def
/len { sequence length } bind def

/coor [
[72.52163696 277.50991821]
[58.93721008 284.19888306]
[43.91661072 286.11206055]
[29.08916092 283.04196167]
[16.06323433 275.32162476]
[6.25178480 263.78845215]
[0.71908510 249.69348145]
[0.06528095 234.56564331]
[4.36129236 220.04589844]
[13.14111996 207.70922852]
[25.45239449 198.89382935]
[39.95967865 194.55593872]
[55.08933258 195.16606140]
[60.50795746 181.17898560]
[65.92658234 167.19189453]
[71.34520721 153.20481873]
[76.76383209 139.21772766]
[82.18245697 125.23065186]
[71.98832703 113.01524353]
[69.22647858 97.34651947]
[74.62972260 82.38184357]
[86.76441193 72.09175873]
[102.41088104 69.20652008]
[107.17774963 54.98411179]
[111.94462585 40.76170349]
[105.15284729 26.74351692]
[110.18973541 12.38787746]
[123.59579468 5.99934721]
[128.36265564 -8.22306252]
[133.12953186 -22.44547272]
[121.63941956 -32.39764786]
[114.83694458 -45.99156952]
[113.75942993 -61.15426636]
[118.57119751 -75.57353973]
[128.53848267 -87.05054474]
[142.14134216 -93.83513641]
[157.30543518 -94.89270020]
[171.71836853 -90.06197357]
[183.18225098 -80.07960510]
[189.94894409 -66.46783447]
[190.98655701 -51.30235291]
[186.13688660 -36.89579391]
[176.13943481 -25.44504547]
[162.51876831 -18.69626808]
[147.35194397 -17.67860031]
[142.58506775 -3.45619106]
[137.81820679 10.76621914]
[144.66651917 23.94332886]
[140.03483582 38.43478012]
[126.16703033 45.52857590]
[121.40016174 59.75098419]
[116.63329315 73.97339630]
[126.29067230 83.78731537]
[130.72387695 96.82283783]
[129.05197144 110.48968506]
[121.60719299 122.07214355]
[109.86888885 129.26867676]
[96.16954041 130.64927673]
[90.75091553 144.63635254]
[85.33229065 158.62344360]
[79.91366577 172.61051941]
[74.49504089 186.59761047]
[69.07641602 200.58468628]
[80.66841125 210.32658386]
[88.46700287 223.30581665]
[91.62624359 238.11453247]
[89.80345917 253.14637756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[23 52]
[24 51]
[25 50]
[28 47]
[29 46]
[30 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
