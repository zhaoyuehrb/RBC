%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCCUCCUGCAGCGCCUGGAGCCACACAGGGAUCCGGAGCCUGGGGGAAAAGCGGCGCGGGAGCCGGCACCCACCGCUGGAGGGGCGGCGACGGCGGCCGUAGCGACCUCGGGAGGCAAGCGGAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[246.80670166 239.20524597]
[236.21432495 224.78050232]
[236.32861328 206.72871399]
[223.96838379 198.23017883]
[211.60816956 189.73165894]
[199.24795532 181.23312378]
[191.88374329 180.02416992]
[186.69940186 172.38504028]
[174.54335022 163.59695435]
[162.38729858 154.80886841]
[147.54000854 153.62263489]
[140.88937378 139.26716614]
[128.73333740 130.47906494]
[116.57728577 121.69097900]
[104.42124176 112.90289307]
[89.75891876 109.73802185]
[75.06024170 112.72950745]
[60.39792633 115.89437866]
[45.77400589 119.23219299]
[31.15008926 122.57000732]
[16.52617073 125.90781403]
[1.90225136 129.24563599]
[-9.83021069 139.85977173]
[-23.96009445 135.14854431]
[-38.58401489 138.48635864]
[-46.77912903 151.99989319]
[-62.14912796 155.67938232]
[-75.57526398 147.34185791]
[-79.09204865 131.93380737]
[-70.61303711 118.59657288]
[-55.16867447 115.24288940]
[-41.92182541 123.86244202]
[-27.29790878 120.52462769]
[-16.61144638 110.14923096]
[-1.43556261 114.62171173]
[13.18835640 111.28389740]
[27.81227493 107.94608307]
[42.43619156 104.60826874]
[57.06011200 101.27045441]
[62.93721390 96.67124939]
[72.06876373 98.03083038]
[86.76743317 95.03934479]
[90.72010803 88.66546631]
[98.62545013 75.91769409]
[102.57811737 69.54381561]
[98.72435760 55.04730988]
[94.69966125 40.59733582]
[90.50459290 26.19589806]
[86.30951691 11.79446220]
[73.98657227 9.12181568]
[64.05033875 1.47687137]
[58.37467575 -9.62029552]
[57.99630737 -22.00633430]
[62.92597961 -33.29627609]
[72.15833282 -41.34277725]
[68.64803314 -55.92625809]
[65.13774109 -70.50973511]
[61.62744904 -85.09321594]
[48.01807022 -93.12815857]
[44.15731430 -108.45362854]
[52.33569336 -121.97729492]
[67.70112610 -125.67581177]
[81.13757324 -117.35490417]
[84.67342377 -101.95122528]
[76.21092987 -88.60350800]
[79.72122192 -74.02002716]
[83.23151398 -59.43655014]
[86.74180603 -44.85306931]
[103.30186462 -38.93984222]
[113.14382935 -24.18015862]
[112.22046661 -6.30784988]
[100.71095276 7.59938908]
[104.90602875 22.00082588]
[109.10109711 36.40225983]
[114.03914642 41.99768066]
[113.22086334 51.19355392]
[117.07461548 65.69005585]
[113.20932770 100.74684143]
[125.36537170 109.53493500]
[137.52142334 118.32302094]
[149.67747498 127.11111450]
[165.39424133 128.92591858]
[171.17539978 142.65281677]
[183.33143616 151.44090271]
[195.48748779 160.22898865]
[207.74647522 168.87290955]
[220.10668945 177.37142944]
[232.46691895 185.86996460]
[244.82713318 194.36848450]
[256.06112671 188.64173889]
[268.59268188 188.27563477]
[280.00894165 193.27854919]
[288.13833618 202.63107300]
[291.46365356 214.49307251]
[289.40487671 226.56550598]
[301.34997559 235.63825989]
[313.29504395 244.71099854]
[325.24014282 253.78375244]
[337.18524170 262.85650635]
[349.13034058 271.92926025]
[361.28637695 280.71734619]
[373.64660645 289.21588135]
[386.00680542 297.71438599]
[404.35061646 298.69320679]
[411.36181641 314.73629761]
[423.91931152 322.94052124]
[439.19836426 319.90921021]
[451.81655884 328.40835571]
[454.61230469 342.99325562]
[467.16979980 351.19747925]
[483.73681641 354.79885864]
[484.86239624 371.71539307]
[468.91851807 377.47994995]
[458.96557617 363.75497437]
[446.40808105 355.55075073]
[431.92858887 358.84918213]
[419.07662964 350.70782471]
[415.71508789 335.49801636]
[403.15759277 327.29379272]
[391.19638062 329.46264648]
[380.64694214 322.64929199]
[377.50830078 310.07461548]
[365.14807129 301.57608032]
[352.78784180 293.07757568]
[347.92480469 293.07464600]
[343.03311157 289.95135498]
[340.05758667 283.87432861]
[328.11248779 274.80160522]
[316.16738892 265.72885132]
[304.22232056 256.65609741]
[292.27722168 247.58334351]
[280.33212280 238.51060486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[8 85]
[9 84]
[10 83]
[12 81]
[13 80]
[14 79]
[15 78]
[16 42]
[17 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[24 33]
[25 32]
[45 77]
[46 76]
[47 74]
[48 73]
[49 72]
[55 68]
[56 67]
[57 66]
[58 65]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[101 124]
[102 123]
[103 122]
[105 119]
[106 118]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
