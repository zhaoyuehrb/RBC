%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCAGGGUUCCAGCGACAGCAGCACUGGACUCGUCCAGAGGGCGGCGGGUGAGCGGCUGGGGCCCCGUGGAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[127.33901978 349.90383911]
[126.75738525 334.91513062]
[126.17575836 319.92642212]
[122.67869568 313.19091797]
[125.87360382 304.34759521]
[125.87360382 289.34759521]
[111.98352814 271.76718140]
[122.00315094 250.95411682]
[119.11246490 236.23529053]
[116.22178650 221.51646423]
[113.33110046 206.79763794]
[110.44041443 192.07879639]
[107.54973602 177.35997009]
[104.65904999 162.64114380]
[101.76836395 147.92231750]
[98.87767792 133.20349121]
[95.98699951 118.48465729]
[87.78138733 114.43925476]
[82.43408203 107.01607513]
[81.19599152 97.95161438]
[84.35672760 89.36634064]
[91.17691040 83.26860046]
[90.01452637 68.31370544]
[80.64284515 59.20599747]
[80.11825562 46.55299377]
[88.17332458 37.31113052]
[87.59169769 22.32241249]
[87.01006317 7.33369303]
[86.42843628 -7.65502644]
[76.05072021 -14.06613922]
[70.22573853 -24.64528465]
[70.35472107 -36.59982300]
[76.28482819 -46.84042740]
[86.37950134 -52.77942276]
[86.96113586 -67.76814270]
[87.54276276 -82.75685883]
[88.12439728 -97.74558258]
[88.70602417 -112.73429871]
[89.28765869 -127.72301483]
[83.86003113 -143.78468323]
[97.79148865 -153.44651794]
[110.93233490 -142.73416138]
[104.27637482 -127.14138794]
[103.69474792 -112.15267181]
[103.11311340 -97.16394806]
[102.53148651 -82.17523193]
[101.94985199 -67.18650818]
[101.36822510 -52.19779205]
[114.56671143 -39.79548264]
[114.77579498 -21.37323952]
[101.41715240 -8.23665714]
[101.99877930 6.75206232]
[102.58041382 21.74078178]
[103.16204071 36.72949982]
[113.33988190 50.88697815]
[104.96942139 67.15132141]
[106.13180542 82.10620880]
[118.74123383 97.44017792]
[110.70582581 115.59397125]
[113.59651184 130.31280518]
[116.48719788 145.03163147]
[119.37787628 159.75045776]
[122.26856232 174.46928406]
[125.15924835 189.18812561]
[128.04992676 203.90695190]
[130.94061279 218.62577820]
[133.83129883 233.34460449]
[136.72198486 248.06343079]
[144.39436340 250.96507263]
[150.42123413 256.42620850]
[154.00080872 263.65155029]
[154.68222046 271.61624146]
[152.42169189 279.21112061]
[147.58164978 285.39715576]
[140.87361145 289.34759521]
[140.87361145 304.34759521]
[141.16447449 319.34478760]
[141.74610901 334.33349609]
[142.32772827 349.32223511]
[145.26365662 368.48025513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[22 57]
[23 56]
[26 54]
[27 53]
[28 52]
[29 51]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
