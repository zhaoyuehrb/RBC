%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:25 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RNASE2)
} def

/sequence { (\
GCUGCCCCUGAACCCCAGAACAACCAGCUGGAUCAGUUCUCACAGGAGCUACAGCGCGGAGACUGGGAAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 28 0.009094459 ubox
1 49 0.003406337 ubox
1 55 0.015694923 ubox
2 27 0.009111183 ubox
2 48 0.003414763 ubox
2 54 0.015706139 ubox
2 59 0.016724303 ubox
3 10 0.028062641 ubox
3 26 0.009105520 ubox
3 47 0.003382500 ubox
3 53 0.015604092 ubox
3 58 0.016788346 ubox
4 9 0.021676641 ubox
4 25 0.009069997 ubox
4 49 0.010703296 ubox
4 52 0.012190955 ubox
4 57 0.016843913 ubox
5 48 0.011842097 ubox
5 56 0.016816574 ubox
5 67 0.036227674 ubox
6 46 0.003464271 ubox
6 66 0.036321183 ubox
6 67 0.013682141 ubox
7 45 0.003433128 ubox
7 46 0.012089647 ubox
7 65 0.036110141 ubox
7 66 0.013633526 ubox
7 67 0.003867133 ubox
8 18 0.038986178 ubox
8 36 0.014768282 ubox
8 45 0.012107320 ubox
8 54 0.011332936 ubox
8 65 0.012843583 ubox
8 66 0.003491337 ubox
9 17 0.039366494 ubox
9 35 0.015506115 ubox
9 44 0.012063824 ubox
9 53 0.011362858 ubox
10 16 0.039389486 ubox
10 34 0.016469358 ubox
10 39 0.007143691 ubox
10 43 0.010264403 ubox
10 52 0.011298016 ubox
11 33 0.016357329 ubox
11 38 0.008678058 ubox
12 37 0.008790142 ubox
13 36 0.008769944 ubox
13 59 0.007383425 ubox
13 67 0.058053935 ubox
14 58 0.007376754 ubox
14 59 0.005992231 ubox
14 66 0.048007201 ubox
14 67 0.994703782 ubox
15 31 0.024978537 ubox
15 58 0.005967825 ubox
15 59 0.003831491 ubox
15 65 0.034726027 ubox
15 66 0.997597162 ubox
15 67 0.006564259 ubox
16 30 0.025055522 ubox
16 58 0.003842020 ubox
16 65 0.998158159 ubox
16 66 0.005784552 ubox
17 29 0.025083034 ubox
17 40 0.008513685 ubox
17 64 0.998198167 ubox
18 28 0.025010560 ubox
18 39 0.008854696 ubox
18 63 0.994630974 ubox
19 38 0.008855879 ubox
20 37 0.008840984 ubox
21 36 0.008819809 ubox
24 31 0.009899327 ubox
24 59 0.933937137 ubox
24 66 0.005767759 ubox
25 30 0.009907775 ubox
25 58 0.934370763 ubox
25 65 0.005786435 ubox
26 64 0.005778994 ubox
27 37 0.005266264 ubox
27 55 0.997242792 ubox
27 57 0.064245261 ubox
27 63 0.005405890 ubox
28 36 0.005418955 ubox
28 54 0.997434962 ubox
28 56 0.063065969 ubox
28 59 0.005778806 ubox
29 35 0.005476063 ubox
29 51 0.003360636 ubox
29 53 0.997032322 ubox
29 56 0.014048937 ubox
29 58 0.005801048 ubox
30 34 0.005820387 ubox
30 50 0.005791225 ubox
30 52 0.993978701 ubox
30 55 0.053730829 ubox
30 57 0.005890046 ubox
31 39 0.003969327 ubox
31 49 0.011534986 ubox
32 38 0.004052760 ubox
33 46 0.006683871 ubox
33 47 0.046872785 ubox
33 66 0.007444613 ubox
34 45 0.007603639 ubox
34 46 0.047141791 ubox
34 65 0.010661470 ubox
35 50 0.829838474 ubox
35 64 0.011072846 ubox
36 43 0.043059523 ubox
36 49 0.995274974 ubox
36 52 0.004322851 ubox
36 63 0.011176930 ubox
37 42 0.039389750 ubox
37 45 0.005886248 ubox
37 46 0.004410631 ubox
37 47 0.066152241 ubox
37 48 0.994898239 ubox
37 51 0.005622930 ubox
37 62 0.007959854 ubox
37 69 0.009144035 ubox
38 44 0.005511727 ubox
38 45 0.003972056 ubox
38 46 0.067993041 ubox
38 47 0.994742251 ubox
38 62 0.011343177 ubox
38 68 0.010537114 ubox
39 45 0.075057017 ubox
39 46 0.994414106 ubox
39 48 0.034936505 ubox
39 61 0.014363858 ubox
39 67 0.010689154 ubox
40 44 0.073166153 ubox
40 45 0.914098364 ubox
40 46 0.011268373 ubox
40 47 0.037377473 ubox
40 60 0.014396971 ubox
40 66 0.010216653 ubox
41 45 0.111460377 ubox
41 46 0.037721438 ubox
41 59 0.014382793 ubox
41 65 0.009900451 ubox
41 66 0.003307374 ubox
42 64 0.009417571 ubox
43 65 0.005179774 ubox
44 64 0.005445723 ubox
45 63 0.005693982 ubox
48 55 0.014490402 ubox
48 57 0.011601440 ubox
49 54 0.014450277 ubox
49 56 0.011599339 ubox
52 65 0.005884769 ubox
53 64 0.006094345 ubox
54 63 0.006110501 ubox
57 65 0.009142897 ubox
58 64 0.009310377 ubox
59 63 0.009143482 ubox
14 67 0.9500000 lbox
15 66 0.9500000 lbox
16 65 0.9500000 lbox
17 64 0.9500000 lbox
18 63 0.9500000 lbox
24 59 0.9500000 lbox
25 58 0.9500000 lbox
27 55 0.9500000 lbox
28 54 0.9500000 lbox
29 53 0.9500000 lbox
30 52 0.9500000 lbox
35 50 0.9500000 lbox
36 49 0.9500000 lbox
37 48 0.9500000 lbox
38 47 0.9500000 lbox
39 46 0.9500000 lbox
40 45 0.9500000 lbox
showpage
end
%%EOF
