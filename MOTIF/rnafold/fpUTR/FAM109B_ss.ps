%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCCGCGGCCACGUUGCAGCCCAGGCGGAGGCGCGGGAUCUCGAGCUGGGAUCGCCCUCUUGGGCUUCGGUGCGAUCGGCGGCGGGAGGUUCCCUGGGAACCAGGUGGUCGAAGGGCUGAGCUGUGUGGCCAGACAAGAGGUCCCUGCCCUCCCCCAGUGAGCCCUGCUGUUCCCGUGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[105.42193604 833.83081055]
[105.42193604 818.83081055]
[105.42193604 803.83081055]
[105.42193604 788.83081055]
[105.42193604 773.83081055]
[105.42193604 758.83081055]
[105.42193604 743.83081055]
[105.42193604 728.83081055]
[105.42193604 713.83081055]
[105.42193604 698.83081055]
[105.42193604 683.83081055]
[94.74106598 673.51312256]
[94.52738190 658.30102539]
[105.42193604 647.16790771]
[105.42193604 632.16790771]
[105.42193604 617.16790771]
[102.72395325 613.20520020]
[102.50019073 607.50146484]
[105.68096161 601.66876221]
[106.18218994 586.67712402]
[106.68341064 571.68548584]
[106.93405914 556.68762207]
[106.93405914 541.68762207]
[99.19676208 528.96032715]
[106.93405914 515.16015625]
[106.93405914 500.16015625]
[106.68341064 485.16226196]
[106.18218994 470.17062378]
[98.02392578 457.70901489]
[105.29577637 443.65798950]
[104.79454803 428.66638184]
[104.29331970 413.67474365]
[103.79209900 398.68313599]
[103.29087067 383.69149780]
[99.91838837 377.09832764]
[102.90864563 368.44564819]
[102.65799713 353.44772339]
[102.28204346 338.45245361]
[101.78082275 323.46081543]
[101.27959442 308.46920776]
[100.77837372 293.47756958]
[100.27714539 278.48596191]
[99.77592468 263.49432373]
[99.27469635 248.50271606]
[98.77347565 233.51109314]
[84.89555359 224.75997925]
[78.90162659 209.30914307]
[83.33518219 193.16815186]
[96.64205170 182.74211121]
[95.89039612 167.76095581]
[95.13873291 152.77981567]
[94.38706970 137.79866028]
[79.42835999 133.38005066]
[67.12770081 123.15157318]
[59.69056320 108.53723145]
[58.60909271 91.77405548]
[64.37396240 75.57082367]
[51.34200668 68.14330292]
[38.31005096 60.71577835]
[25.27809334 53.28825378]
[8.89114380 53.92062378]
[0.38014480 39.90296173]
[8.50048351 25.65542984]
[24.89865112 25.83467102]
[32.70561981 40.25629807]
[45.73757553 47.68382263]
[58.76953125 55.11134720]
[71.80148315 62.53887177]
[85.07435608 55.55095673]
[86.32619476 40.60328293]
[87.57803345 25.65561295]
[88.82986450 10.70794010]
[90.08170319 -4.23973227]
[91.33354187 -19.18740463]
[80.24842834 -27.39846611]
[74.71669769 -39.91743851]
[76.08735657 -53.42643356]
[83.89533234 -64.40265656]
[96.01098633 -70.03707123]
[97.51242065 -84.96173859]
[99.01385498 -99.88640594]
[100.51528931 -114.81107330]
[102.01673126 -129.73574829]
[95.69962311 -144.24107361]
[104.67201233 -156.12995911]
[106.17344666 -171.05462646]
[96.98593140 -178.63688660]
[92.65241241 -189.60398865]
[94.14490509 -201.18041992]
[100.97648621 -210.49620056]
[111.35120392 -215.29844666]
[113.35050964 -230.16461182]
[115.34981537 -245.03076172]
[117.34911346 -259.89694214]
[119.34841919 -274.76309204]
[121.34772491 -289.62924194]
[117.46648407 -306.13296509]
[132.25077820 -314.43121338]
[144.31742859 -302.52185059]
[136.21388245 -287.62994385]
[134.21458435 -272.76379395]
[132.21527100 -257.89761353]
[130.21597290 -243.03146362]
[128.21667480 -228.16529846]
[126.21736908 -213.29913330]
[138.17770386 -199.45935059]
[136.21009827 -180.95298767]
[121.09811401 -169.55319214]
[119.59667969 -154.62852478]
[126.02117157 -141.19070435]
[116.94139862 -128.23431396]
[115.43995667 -113.30963898]
[113.93852234 -98.38497162]
[112.43708801 -83.46030426]
[110.93565369 -68.53563690]
[123.52333832 -58.01285934]
[127.40439606 -41.90097046]
[120.85900879 -26.49494553]
[106.28121185 -17.93556786]
[105.02937317 -2.98789477]
[103.77754211 11.95977688]
[102.52570343 26.90744972]
[101.27386475 41.85512161]
[100.02202606 56.80279541]
[113.49507904 59.54824448]
[125.25334167 66.32795715]
[134.14395142 76.34799957]
[139.33662415 88.50392151]
[140.40037537 101.50190735]
[137.33737183 113.99626923]
[130.57133484 124.72875977]
[120.89279938 132.65524292]
[109.36822510 137.04699707]
[110.11988831 152.02815247]
[110.87155151 167.00930786]
[111.62320709 181.99046326]
[123.70384216 188.65075684]
[130.85482788 200.32072449]
[131.29698181 213.89187622]
[125.02165985 225.81085205]
[113.76509857 233.00985718]
[114.26631927 248.00148010]
[114.76754761 262.99310303]
[115.26876831 277.98474121]
[115.76999664 292.97634888]
[116.27121735 307.96798706]
[116.77244568 322.95959473]
[117.27366638 337.95123291]
[120.69375610 346.44317627]
[117.65589905 353.19708252]
[117.90654755 368.19500732]
[118.28250122 383.19027710]
[118.78372192 398.18191528]
[119.28495026 413.17352295]
[119.78617096 428.16516113]
[120.28739929 443.15676880]
[128.48150635 456.69070435]
[121.17381287 469.66940308]
[121.67503357 484.66104126]
[124.85580444 490.49374390]
[124.63204193 496.19744873]
[121.93405914 500.16015625]
[121.93405914 515.16015625]
[129.67135620 528.96032715]
[121.93405914 541.68762207]
[121.93405914 556.68762207]
[124.91815186 562.62335205]
[124.50392151 568.31640625]
[121.67503357 572.18670654]
[121.17381287 587.17834473]
[120.67258453 602.16998291]
[120.42193604 617.16790771]
[120.42193604 632.16790771]
[120.42193604 647.16790771]
[131.31649780 658.30102539]
[131.10281372 673.51312256]
[120.42193604 683.83081055]
[120.42193604 698.83081055]
[120.42193604 713.83081055]
[120.42193604 728.83081055]
[120.42193604 743.83081055]
[120.42193604 758.83081055]
[120.42193604 773.83081055]
[120.42193604 788.83081055]
[120.42193604 803.83081055]
[120.42193604 818.83081055]
[120.42193604 833.83081055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 187]
[2 186]
[3 185]
[4 184]
[5 183]
[6 182]
[7 181]
[8 180]
[9 179]
[10 178]
[11 177]
[14 174]
[15 173]
[16 172]
[19 171]
[20 170]
[21 169]
[22 166]
[23 165]
[25 163]
[26 162]
[27 159]
[28 158]
[30 156]
[31 155]
[32 154]
[33 153]
[34 152]
[36 151]
[37 150]
[38 148]
[39 147]
[40 146]
[41 145]
[42 144]
[43 143]
[44 142]
[45 141]
[49 136]
[50 135]
[51 134]
[52 133]
[57 68]
[58 67]
[59 66]
[60 65]
[69 124]
[70 123]
[71 122]
[72 121]
[73 120]
[74 119]
[79 115]
[80 114]
[81 113]
[82 112]
[83 111]
[85 109]
[86 108]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
