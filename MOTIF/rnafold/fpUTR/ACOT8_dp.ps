%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:14 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ACOT8)
} def

/sequence { (\
GGUUACUAGGGCAAUCUGCCGGAAGAGUCAGGUUCUGUGUAUGUCUCCGCGUCUUCCGCGGAGCGGGUGUGCAGGGCCUGCAGCAUUGAACUAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 20 0.003825025 ubox
1 92 0.020943957 ubox
2 19 0.003827794 ubox
2 84 0.006515230 ubox
2 91 0.022175139 ubox
3 18 0.003579087 ubox
3 83 0.006456645 ubox
3 90 0.021929362 ubox
3 94 0.003919263 ubox
4 23 0.003465599 ubox
4 26 0.004756293 ubox
4 82 0.005606160 ubox
4 88 0.003303341 ubox
4 89 0.020599739 ubox
4 93 0.003628406 ubox
5 28 0.012475176 ubox
5 87 0.003396355 ubox
6 22 0.009578471 ubox
6 25 0.014235518 ubox
6 27 0.013491870 ubox
6 94 0.981506771 ubox
7 21 0.008900426 ubox
7 24 0.013403647 ubox
7 26 0.013429754 ubox
7 88 0.003320718 ubox
7 93 0.997341467 ubox
8 17 0.003339437 ubox
8 87 0.003526461 ubox
8 92 0.998729405 ubox
9 16 0.003363503 ubox
9 20 0.003670231 ubox
9 91 0.999120176 ubox
9 92 0.006351556 ubox
10 19 0.003279921 ubox
10 20 0.069721019 ubox
10 91 0.007677631 ubox
11 19 0.069812033 ubox
12 18 0.069816869 ubox
12 88 0.997472818 ubox
13 17 0.056581925 ubox
13 87 0.996809160 ubox
14 86 0.994814002 ubox
15 23 0.009720451 ubox
15 26 0.044358297 ubox
15 85 0.986946652 ubox
16 21 0.005656382 ubox
16 22 0.012635762 ubox
16 25 0.057808951 ubox
16 27 0.007833803 ubox
16 83 0.992070469 ubox
17 21 0.011402954 ubox
17 24 0.057548051 ubox
17 26 0.008405360 ubox
17 82 0.992221922 ubox
17 85 0.063903142 ubox
18 28 0.005983059 ubox
18 81 0.991296383 ubox
18 84 0.076894436 ubox
19 27 0.018238567 ubox
19 80 0.888830284 ubox
19 83 0.076844849 ubox
20 31 0.004577766 ubox
20 37 0.004218243 ubox
20 80 0.055767269 ubox
21 29 0.136030878 ubox
21 36 0.004278645 ubox
21 78 0.019834528 ubox
21 79 0.040127349 ubox
21 87 0.003200989 ubox
21 92 0.005098170 ubox
22 28 0.116221792 ubox
22 29 0.262587004 ubox
22 35 0.004291562 ubox
22 77 0.015586559 ubox
22 78 0.019026775 ubox
22 86 0.003195724 ubox
22 87 0.006529852 ubox
22 91 0.005339647 ubox
23 28 0.240704124 ubox
23 34 0.004371016 ubox
23 86 0.006625699 ubox
23 87 0.011372465 ubox
24 33 0.004379490 ubox
24 79 0.009968737 ubox
24 86 0.011788593 ubox
24 87 0.016101908 ubox
25 78 0.005767996 ubox
25 86 0.017202169 ubox
25 87 0.008358646 ubox
26 79 0.009389532 ubox
26 86 0.008935541 ubox
26 87 0.006386249 ubox
26 92 0.005748790 ubox
27 77 0.003759458 ubox
27 78 0.004679575 ubox
27 81 0.092262099 ubox
27 84 0.052756932 ubox
27 86 0.006760298 ubox
27 91 0.005935485 ubox
28 76 0.003823913 ubox
28 80 0.019043688 ubox
28 83 0.050660924 ubox
28 85 0.006765787 ubox
28 90 0.005851463 ubox
29 75 0.003526542 ubox
29 80 0.452939686 ubox
30 79 0.987556373 ubox
31 78 0.999510466 ubox
31 79 0.003609918 ubox
32 77 0.999848801 ubox
33 76 0.999305901 ubox
34 75 0.997076021 ubox
34 76 0.003602127 ubox
35 74 0.999862095 ubox
35 75 0.004595413 ubox
35 76 0.007397815 ubox
36 73 0.999609901 ubox
36 74 0.003787477 ubox
36 75 0.007935785 ubox
37 72 0.999744919 ubox
38 69 0.010461097 ubox
38 71 0.995156719 ubox
38 73 0.015264280 ubox
39 68 0.042315992 ubox
39 70 0.774246101 ubox
39 72 0.020137654 ubox
40 67 0.084143225 ubox
40 69 0.889442964 ubox
40 71 0.021946271 ubox
41 68 0.909272842 ubox
41 70 0.029661111 ubox
42 65 0.438847986 ubox
42 67 0.862768720 ubox
42 69 0.028667344 ubox
43 64 0.569406469 ubox
43 68 0.017153985 ubox
44 63 0.081642692 ubox
44 66 0.047272300 ubox
44 67 0.015483658 ubox
45 63 0.990958166 ubox
45 65 0.031537918 ubox
45 66 0.011440538 ubox
45 67 0.005854891 ubox
46 62 0.999422204 ubox
46 65 0.007037031 ubox
46 67 0.007443028 ubox
47 61 0.999916312 ubox
47 66 0.012193097 ubox
48 60 0.999903287 ubox
48 65 0.012208346 ubox
49 59 0.999906088 ubox
49 64 0.012219370 ubox
50 58 0.999891543 ubox
50 63 0.012210258 ubox
51 57 0.986117743 ubox
52 61 0.009643476 ubox
52 62 0.006691034 ubox
53 60 0.009849340 ubox
53 61 0.006864399 ubox
54 60 0.006574154 ubox
65 79 0.004206161 ubox
66 78 0.004416776 ubox
67 77 0.004417951 ubox
68 76 0.004398300 ubox
81 88 0.015382673 ubox
82 87 0.014014586 ubox
82 92 0.003312231 ubox
83 91 0.003480159 ubox
6 94 0.9500000 lbox
7 93 0.9500000 lbox
8 92 0.9500000 lbox
9 91 0.9500000 lbox
12 88 0.9500000 lbox
13 87 0.9500000 lbox
14 86 0.9500000 lbox
15 85 0.9500000 lbox
16 83 0.9500000 lbox
17 82 0.9500000 lbox
18 81 0.9500000 lbox
19 80 0.9500000 lbox
30 79 0.9500000 lbox
31 78 0.9500000 lbox
32 77 0.9500000 lbox
33 76 0.9500000 lbox
34 75 0.9500000 lbox
35 74 0.9500000 lbox
36 73 0.9500000 lbox
37 72 0.9500000 lbox
38 71 0.9500000 lbox
39 70 0.9500000 lbox
40 69 0.9500000 lbox
41 68 0.9500000 lbox
42 67 0.9500000 lbox
45 63 0.9500000 lbox
46 62 0.9500000 lbox
47 61 0.9500000 lbox
48 60 0.9500000 lbox
49 59 0.9500000 lbox
50 58 0.9500000 lbox
51 57 0.9500000 lbox
showpage
end
%%EOF
