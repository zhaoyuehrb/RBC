%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCACACCCGACGCUCUGGCCCACACAGACGCUACUCUGUAGCAUCUCAGGUUCCCUCUGGCUGCACUCUGGAGGACCACACUCGUUUUCUUUUUGGCUGCCAGAGGCCCCCGCAUCCACCGCUGAGCUGGGAGAAAG\
) } def
/len { sequence length } bind def

/coor [
[88.60711670 312.45959473]
[86.92765045 297.55389404]
[85.24818420 282.64822388]
[83.56871033 267.74252319]
[81.88924408 252.83685303]
[72.78746796 264.75982666]
[58.46635056 269.22140503]
[44.20333862 264.57742310]
[35.25447083 252.53926086]
[34.91747284 237.54304504]
[43.31653214 225.11502075]
[57.35652924 219.83500671]
[71.86360931 223.64874268]
[81.49233246 235.15213013]
[82.50137329 220.18611145]
[83.51040649 205.22007751]
[84.51943970 190.25405884]
[81.80862427 183.31153870]
[85.72273254 174.96473694]
[87.06732941 160.02513123]
[88.41191864 145.08551025]
[80.33418274 142.19291687]
[72.92453003 137.86695862]
[66.43469238 132.25457764]
[61.08513260 125.54644012]
[57.05759048 117.97043610]
[54.48888397 109.78395081]
[53.46628189 101.26507568]
[38.60203552 99.25157928]
[23.73778915 97.23807526]
[9.02390862 103.05290985]
[-2.54957533 93.67721558]
[-17.41382217 91.66371155]
[-32.27806854 89.65021515]
[-47.14231491 87.63671875]
[-62.00656128 85.62321472]
[-78.51396179 89.48870087]
[-86.79808807 74.69647980]
[-74.87722778 62.64121246]
[-59.99306107 70.75897217]
[-45.12881470 72.77246857]
[-30.26456833 74.78596497]
[-15.40032291 76.79946899]
[-0.53607625 78.81296539]
[13.11461353 72.85411072]
[25.75128746 82.37383270]
[40.61553574 84.38732910]
[55.47978210 86.40083313]
[69.16605377 65.12515259]
[91.95839691 54.14893723]
[117.12564087 56.71374893]
[124.81912994 43.83701706]
[118.88578033 29.62077332]
[122.41979980 14.80982685]
[133.86206055 5.03543282]
[148.68832397 3.88670778]
[156.38182068 -8.99002457]
[164.07530212 -21.86675644]
[171.76879883 -34.74348831]
[179.46228027 -47.62022018]
[187.15577698 -60.49695206]
[194.84925842 -73.37368011]
[202.54275513 -86.25041199]
[202.97877502 -102.06561279]
[216.14866638 -109.02286530]
[223.84214783 -121.89959717]
[215.52365112 -134.64965820]
[213.57382202 -149.68579102]
[218.32627869 -164.01876831]
[228.78755188 -174.82260132]
[242.84422302 -179.99165344]
[257.68975830 -178.55096436]
[265.38323975 -191.42768860]
[273.07675171 -204.30442810]
[280.77023315 -217.18115234]
[288.46371460 -230.05789185]
[296.15719604 -242.93461609]
[303.85070801 -255.81135559]
[298.55215454 -270.52392578]
[303.99880981 -285.18231201]
[317.61886597 -292.86526489]
[332.98138428 -289.94512939]
[342.83264160 -277.80072021]
[342.52117920 -262.16625977]
[332.19406128 -250.42382812]
[316.72741699 -248.11785889]
[309.03393555 -235.24113464]
[301.34045410 -222.36439514]
[293.64697266 -209.48767090]
[285.95346069 -196.61093140]
[278.25997925 -183.73420715]
[270.56649780 -170.85746765]
[278.86999512 -158.46726990]
[280.97915649 -143.63955688]
[276.42263794 -129.30781555]
[266.05310059 -118.33087158]
[251.88839722 -112.92273712]
[236.71888733 -114.20610809]
[229.02539062 -101.32937622]
[229.13966370 -86.43521118]
[215.41947937 -78.55692291]
[207.72599792 -65.68019104]
[200.03250122 -52.80346298]
[192.33901978 -39.92673111]
[184.64552307 -27.04999924]
[176.95204163 -14.17326641]
[169.25854492 -1.29653502]
[161.56506348 11.58019733]
[167.57920837 25.18049240]
[164.39404297 39.88827133]
[153.02624512 50.01875305]
[137.69586182 51.53050613]
[130.00238037 64.40723419]
[137.51812744 72.44318390]
[142.93783569 82.01864624]
[145.95875549 92.59867859]
[146.41210938 103.59219360]
[144.27255249 114.38502502]
[139.65962219 124.37420654]
[132.83102417 133.00167847]
[124.16827393 139.78544617]
[114.15530396 144.34652710]
[103.35153198 146.43009949]
[102.00694275 161.36972046]
[100.66235352 176.30932617]
[99.48546600 191.26309204]
[98.47643280 206.22911072]
[97.46739197 221.19514465]
[96.45835876 236.16116333]
[96.79492950 251.15737915]
[98.47439575 266.06307983]
[100.15386200 280.96875000]
[101.83332825 295.87442017]
[103.51280212 310.78012085]
[116.02380371 320.43673706]
[117.95926666 336.12207031]
[108.17090607 348.53027344]
[92.46599579 350.29980469]
[80.16196442 340.38079834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[5 130]
[14 129]
[15 128]
[16 127]
[17 126]
[19 125]
[20 124]
[21 123]
[28 48]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[51 113]
[52 112]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[65 99]
[66 98]
[72 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
