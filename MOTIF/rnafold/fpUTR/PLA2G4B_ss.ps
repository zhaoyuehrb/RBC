%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUUGGGACAUCACAUCCCUGGCUCUGGGUUAGAAAGCUGACAGUCCUUGAUCCUGUGGCCACUGCCCCAUCAUUCCUGCUCCUGAGGACUCAGUCUC\
) } def
/len { sequence length } bind def

/coor [
[88.25134277 155.30627441]
[93.13465881 141.12342834]
[82.04953003 151.22886658]
[70.96439362 161.33428955]
[69.29524994 166.65255737]
[66.00525665 170.32751465]
[62.04466248 172.00981140]
[58.35847092 171.80212402]
[46.38821030 180.84164429]
[34.41795349 189.88116455]
[22.44769478 198.92068481]
[21.82606697 214.54589844]
[11.26798058 226.08110046]
[-4.24135780 228.07971191]
[-17.37891388 219.59805298]
[-21.94153404 204.64088440]
[-15.77488995 190.27055359]
[-1.79068136 183.27227783]
[13.40817547 186.95042419]
[25.37843323 177.91090393]
[37.34869385 168.87138367]
[49.31895065 159.83186340]
[60.85895920 150.24916077]
[71.94409180 140.14372253]
[83.02922821 130.03829956]
[70.64201355 114.81686401]
[68.96199799 96.20275879]
[77.52859497 80.65112305]
[92.50000000 72.98369598]
[92.50000000 57.98369217]
[92.50000000 42.98369217]
[92.50000000 27.98369408]
[84.76270294 14.18352127]
[92.50000000 1.45624924]
[92.50000000 -13.54375076]
[92.50000000 -28.54375076]
[81.87420654 -36.98849487]
[78.16081238 -49.83990860]
[82.51570892 -62.28123856]
[93.11404419 -69.78505707]
[93.57597351 -84.77793884]
[94.03789520 -99.77082825]
[91.13595581 -108.61997986]
[94.75198364 -115.21630859]
[95.67539978 -130.18786621]
[96.59880829 -145.15940857]
[97.52222443 -160.13096619]
[85.02143860 -169.17164612]
[79.41415405 -183.54389954]
[82.48962402 -198.66160583]
[93.26649475 -209.70074463]
[108.30588531 -213.13877869]
[122.80879974 -207.87864685]
[132.14739990 -195.59881592]
[133.34178162 -180.21775818]
[126.01080322 -166.64350891]
[112.49377441 -159.20755005]
[111.57035828 -144.23599243]
[110.64694977 -129.26445007]
[109.72353363 -114.29290009]
[109.03078461 -99.30889893]
[108.56885529 -84.31601715]
[108.10693359 -69.32312775]
[120.11957550 -57.66607666]
[120.06753540 -40.59183884]
[107.50000000 -28.54375076]
[107.50000000 -13.54375076]
[107.50000000 1.45624924]
[115.23729706 14.18352127]
[107.50000000 27.98369408]
[107.50000000 42.98369217]
[107.50000000 57.98369217]
[107.50000000 72.98369598]
[118.87236023 77.54744720]
[127.65880585 86.85590363]
[131.91189575 99.50714874]
[130.41954041 113.32066345]
[123.00405884 125.71224976]
[135.99443054 133.21224976]
[148.98481750 140.71224976]
[161.97520447 148.21224976]
[176.60685730 142.69421387]
[191.34507751 147.92095947]
[199.23092651 161.42456055]
[196.54095459 176.82904053]
[184.54525757 186.86087036]
[168.90786743 186.78332520]
[157.01226807 176.63302612]
[154.47520447 161.20262146]
[141.48481750 153.70262146]
[128.49443054 146.20262146]
[115.50405884 138.70262146]
[123.30849457 151.51242065]
[134.08671570 161.94458008]
[138.49736023 176.28146362]
[135.44674683 190.96797180]
[125.69130707 202.36233521]
[111.65009308 207.63911438]
[96.80487061 205.48982239]
[84.83678436 196.44743347]
[78.71353149 182.75415039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[8 22]
[9 21]
[10 20]
[11 19]
[29 73]
[30 72]
[31 71]
[32 70]
[34 68]
[35 67]
[36 66]
[40 63]
[41 62]
[42 61]
[44 60]
[45 59]
[46 58]
[47 57]
[78 92]
[79 91]
[80 90]
[81 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
