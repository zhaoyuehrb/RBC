%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGCCUUUAUUCAGCUUCCGGUAGACGCUGGUAGGGUAAGGGAGCUAAGUAGAUCACUUCCGGGCGACUGUUGUUUUAUUUCCGGUUU\
) } def
/len { sequence length } bind def

/coor [
[146.50653076 128.89659119]
[139.41746521 108.18158722]
[124.41970062 107.92268372]
[109.42193604 107.66377258]
[94.42417145 107.92268372]
[79.44427490 108.69909668]
[64.46438599 109.47551727]
[49.48449326 110.25193787]
[34.50460052 111.02835846]
[27.51426697 119.71076965]
[17.07435226 122.92807770]
[6.83482838 119.81555176]
[0.23184173 111.67749786]
[-14.76592350 111.41859436]
[-29.76368904 111.15968323]
[-44.76145554 110.90077209]
[-59.75922012 110.64186096]
[-73.69088745 118.13980865]
[-86.28271484 110.18398285]
[-101.28047943 109.92507172]
[-113.77133942 119.99274445]
[-129.39851379 116.36358643]
[-136.17417908 101.82157898]
[-128.90061951 87.52210999]
[-113.15748596 84.43450165]
[-101.02156830 94.92730713]
[-86.02380371 95.18621826]
[-73.16487885 87.66974640]
[-59.50030899 95.64409637]
[-44.50254440 95.90300751]
[-29.50477982 96.16191864]
[-14.50701427 96.42082977]
[0.49075136 96.67973328]
[16.43636894 85.97182465]
[33.72817993 96.04846954]
[48.70807266 95.27204895]
[63.68796158 94.49562836]
[78.66785431 93.71920776]
[93.64775085 92.94278717]
[98.13077545 89.79130554]
[104.07962036 89.50308990]
[109.68083954 92.66600800]
[124.67861176 92.92491150]
[139.67637634 93.18382263]
[142.11103821 83.66184998]
[146.22688293 74.74267578]
[151.88618469 66.72017670]
[158.90040588 59.85829544]
[167.03646851 54.38238525]
[176.02450562 50.47177124]
[185.56678772 48.25390625]
[195.34764099 47.80020142]
[205.04382324 49.12374496]
[214.33522034 52.17891312]
[222.91549683 56.86294937]
[230.50204468 63.01942444]
[236.84544373 70.44345856]
[241.73756409 78.88851929]
[245.01841736 88.07464600]
[246.58142090 97.69769287]
[246.37683105 107.43943024]
[244.41328430 116.97802734]
[258.03814697 123.25204468]
[271.66299438 129.52606201]
[285.28784180 135.80007935]
[298.91271973 142.07409668]
[320.80593872 137.90605164]
[333.52331543 155.30888367]
[347.88211060 159.64765930]
[362.24090576 163.98643494]
[378.07550049 159.72058105]
[389.49450684 171.49081421]
[384.75100708 187.18894958]
[368.72473145 190.66607666]
[357.90213013 178.34523010]
[343.54333496 174.00645447]
[329.18453979 169.66767883]
[322.82714844 175.08073425]
[314.71859741 177.44186401]
[306.25958252 176.26162720]
[298.94500732 171.66957092]
[294.09963989 164.40502930]
[292.63870239 155.69895935]
[279.01382446 149.42494202]
[265.38897705 143.15092468]
[251.76411438 136.87690735]
[238.13926697 130.60289001]
[222.98835754 146.16316223]
[202.87487793 154.44895935]
[181.08952332 154.07438660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[19 27]
[20 26]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
