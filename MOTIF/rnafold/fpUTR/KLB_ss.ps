%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCAGUCUCCCAGUUCAAGCUAAUCAUUGACAGAGCUUUACAAUCACAAGCUUUUACUGAAGCUUUGAUAAGACAGUCCAGCAGUUGGUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[34.86383057 287.58703613]
[31.18939400 302.20761108]
[24.12216949 315.52371216]
[14.07303905 326.76107788]
[1.62624300 335.26638794]
[-12.49457741 340.54519653]
[-27.46845627 342.29058838]
[-42.42483139 340.40109253]
[-56.49415970 334.98654175]
[-68.85846710 326.36172485]
[-78.79891205 315.02810669]
[-85.73757172 301.64459229]
[-89.27103424 286.98928833]
[-89.19387054 271.91421509]
[-85.51057434 257.29583740]
[-78.43527985 243.98405457]
[-68.37934113 232.75279236]
[-55.92738724 224.25500488]
[-41.80337143 218.98475647]
[-26.82843590 217.24844360]
[-11.87320805 219.14701843]
[2.19283581 224.57009888]
[10.77458572 212.26751709]
[19.35633469 199.96493530]
[27.93808556 187.66235352]
[29.20653343 180.23698425]
[36.99729538 175.10899353]
[45.96895599 163.08778381]
[54.94061279 151.06657410]
[63.71844482 138.90312195]
[72.30019379 126.60054016]
[80.88194275 114.29795837]
[76.13002014 100.39456940]
[80.41983032 86.34172058]
[92.12643433 77.46250916]
[106.81547546 77.12029266]
[115.39722443 64.81771088]
[117.80904388 55.80796814]
[124.45643616 52.26434326]
[133.42808533 40.24314117]
[126.45896912 26.70827103]
[126.05912781 11.55151939]
[132.25433350 -2.21945095]
[143.76695251 -11.89522266]
[158.27906799 -15.59766483]
[172.89903259 -12.64431572]
[181.87068176 -24.66551971]
[190.84234619 -36.68672562]
[199.81399536 -48.70792770]
[202.51335144 -57.63573837]
[209.27090454 -60.96448135]
[218.62326050 -72.69195557]
[227.97560120 -84.41942596]
[237.32795715 -96.14689636]
[246.68029785 -107.87437439]
[256.03265381 -119.60184479]
[265.38497925 -131.32931519]
[267.29278564 -147.61711121]
[282.45739746 -153.85945129]
[295.27874756 -143.63475037]
[292.56738281 -127.46130371]
[277.11245728 -121.97696686]
[267.76013184 -110.24949646]
[258.40777588 -98.52202606]
[249.05541992 -86.79454803]
[239.70307922 -75.06707764]
[230.35072327 -63.33960724]
[220.99838257 -51.61213303]
[211.83520508 -39.73627090]
[202.86354065 -27.71506691]
[193.89189148 -15.69386196]
[184.92022705 -3.67265773]
[191.91128540 9.50271797]
[192.49098206 24.46845818]
[186.49078369 38.25826263]
[175.05169678 48.11562729]
[160.40765381 52.04482651]
[145.44929504 49.21479797]
[136.47763062 61.23600388]
[127.69980621 73.39945984]
[119.11805725 85.70204163]
[123.86997986 99.60543060]
[119.58016968 113.65827942]
[107.87356567 122.53749084]
[93.18452454 122.87970734]
[84.60277557 135.18229675]
[76.02102661 147.48487854]
[73.60920715 156.49461365]
[66.96181488 160.03823853]
[57.99015808 172.05944824]
[49.01850128 184.08064270]
[40.24066925 196.24411011]
[31.65891838 208.54669189]
[23.07716942 220.84927368]
[14.49541950 233.15185547]
[24.44273376 244.47944641]
[31.38950348 257.85876465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 95]
[23 94]
[24 93]
[25 92]
[27 91]
[28 90]
[29 89]
[30 87]
[31 86]
[32 85]
[36 81]
[37 80]
[39 79]
[40 78]
[46 72]
[47 71]
[48 70]
[49 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
