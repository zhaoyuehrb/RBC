%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCAGGGUCAGUCUGUGACUCUUCCCCUACCACGCUCCCGCAGAGGCUGAGGAGGCGGUUUCGACUUCUCCUCCGGCUUUCUGUCUUCGGCACUGUGUGCUUCUUGCUCCGCGGUUUAUUUCUGUACCUAGUCCUCCCUCCCCUCUUCGGUCCAUCUCCAAAGCCCGGGCUUGGCGGGGACUCGCCCUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[115.86534882 268.34988403]
[112.50646973 252.66239929]
[122.78823853 240.34716797]
[122.78823853 225.34716797]
[115.05093384 212.61990356]
[122.78823853 198.81973267]
[122.78823853 183.81973267]
[122.78823853 168.81973267]
[122.78823853 153.81973267]
[122.78823853 138.81973267]
[115.56494904 136.80128479]
[93.89508057 130.74595642]
[86.11919403 143.57310486]
[78.34330750 156.40023804]
[70.56742096 169.22738647]
[67.52701569 185.90647888]
[50.65807343 187.60212708]
[44.35890579 171.86183167]
[57.74027634 161.45149231]
[65.51616669 148.62434387]
[73.29205322 135.79721069]
[81.06793976 122.97006989]
[79.10745239 115.73083496]
[66.13381195 123.25975037]
[53.16016769 130.78866577]
[43.35754013 142.14245605]
[28.78759956 145.70852661]
[14.84937572 140.16542053]
[6.70781326 127.56721497]
[7.37984610 112.58227539]
[16.61644554 100.76342010]
[30.99490166 96.49024963]
[45.18662262 101.34583282]
[60.18655014 101.29910278]
[75.18647766 101.25237274]
[73.22599030 94.01313782]
[60.03990936 86.86280060]
[46.85382843 79.71246338]
[31.69810104 87.20907593]
[15.22311497 84.22914124]
[3.88102269 72.14083862]
[1.99372315 55.83964920]
[-11.30526638 48.90157700]
[-24.60425568 41.96350098]
[-37.90324402 35.02542496]
[-51.20223618 28.08735275]
[-64.50122833 21.14927864]
[-77.85539246 14.31800652]
[-91.26387024 7.59397793]
[-104.67235565 0.86994892]
[-118.08084106 -5.85408020]
[-131.54278564 -12.47043514]
[-145.05731201 -18.97869110]
[-158.57185364 -25.48694801]
[-172.08638000 -31.99520302]
[-185.60092163 -38.50345993]
[-199.11544800 -45.01171494]
[-208.21759033 -45.91821671]
[-212.79316711 -51.73411942]
[-226.20164490 -58.45814896]
[-239.61012268 -65.18217468]
[-255.94026184 -63.67930603]
[-265.18463135 -77.22455597]
[-257.83340454 -91.88373566]
[-241.44889832 -92.57673645]
[-232.88609314 -78.59066010]
[-219.47761536 -71.86663055]
[-206.06913757 -65.14260101]
[-192.60719299 -58.52624893]
[-179.09265137 -52.01799393]
[-165.57812500 -45.50973511]
[-152.06359863 -39.00148010]
[-138.54905701 -32.49322510]
[-125.03452301 -25.98496819]
[-117.63481903 -25.91518974]
[-111.35681152 -19.26256371]
[-97.94832611 -12.53853512]
[-84.53984833 -5.81450558]
[-71.13136292 0.90952313]
[-63.73371887 1.09789455]
[-57.56315231 7.85028839]
[-44.26416016 14.78836250]
[-30.96517181 21.72643661]
[-17.66618156 28.66451073]
[-4.36719227 35.60258484]
[8.93179703 42.54066086]
[20.28838158 35.50831604]
[33.74486923 35.00494385]
[45.78725052 41.26909637]
[53.21783829 52.75806427]
[54.00416565 66.52638245]
[67.19024658 73.67671967]
[80.37632751 80.82705688]
[94.09251404 74.75531006]
[97.66429138 60.18676758]
[101.23606110 45.61822510]
[104.80783844 31.04968262]
[108.37961578 16.48114014]
[111.95139313 1.91259861]
[106.39415741 -15.63696098]
[119.00663757 -27.83149147]
[122.34445190 -42.45541000]
[115.06086731 -56.74977493]
[121.82633209 -71.29653168]
[137.45095825 -74.93664551]
[149.94888306 -64.87773895]
[149.73275757 -48.83614349]
[136.96836853 -39.11759567]
[133.63055420 -24.49367714]
[139.80073547 -14.08002472]
[137.13067627 -1.86308014]
[126.51992798 5.48437405]
[122.94815826 20.05291557]
[119.37638092 34.62145996]
[115.80460358 49.18999863]
[112.23283386 63.75854111]
[108.66105652 78.32708740]
[118.78011322 67.25438690]
[128.89916992 56.18168640]
[134.96238708 42.46172333]
[146.36364746 32.71434784]
[160.85937500 28.85768127]
[175.59706116 31.65064812]
[187.67657471 40.54364014]
[194.72087097 53.78667068]
[195.34376526 68.77372742]
[189.42266846 82.55562592]
[178.12275696 92.42031097]
[163.66766357 96.42658997]
[148.90251160 93.78634644]
[134.06510925 95.98892975]
[119.22770691 98.19152069]
[133.30473328 103.37200165]
[147.38175964 108.55247498]
[161.45878601 113.73294830]
[175.53581238 118.91342926]
[189.61283875 124.09390259]
[203.68986511 129.27438354]
[217.80795288 134.34187317]
[231.96620178 139.29605103]
[247.57870483 131.41816711]
[263.74218750 137.15036011]
[270.62615967 152.48858643]
[284.86199951 157.21520996]
[299.09783936 161.94183350]
[318.62771606 156.98004150]
[330.85336304 171.95141602]
[345.23336792 176.21932983]
[359.61340332 180.48724365]
[375.04464722 176.99626160]
[385.04440308 188.03503418]
[399.42443848 192.30294800]
[412.36834717 183.52859497]
[427.91860962 185.17866516]
[438.73291016 196.47402954]
[439.70501709 212.08135986]
[430.37594604 224.63136292]
[415.15060425 228.19830322]
[401.21792603 221.09799194]
[395.15652466 206.68295288]
[380.77648926 202.41503906]
[366.37377930 206.21128845]
[355.34548950 194.86724854]
[340.96545410 190.59933472]
[326.58544922 186.33142090]
[318.06356812 191.99725342]
[307.61044312 192.03114319]
[298.68429565 186.18003845]
[294.37121582 176.17767334]
[280.13537598 171.45104980]
[265.89953613 166.72442627]
[255.29595947 174.05789185]
[242.20936584 173.93943787]
[231.42402649 166.18811035]
[227.01202393 153.45431519]
[212.85375977 148.50012207]
[205.49276733 149.25929260]
[198.50938416 143.35140991]
[184.43235779 138.17092896]
[170.35533142 132.99044800]
[156.27830505 127.80997467]
[142.20127869 122.62950134]
[128.12425232 117.44902802]
[114.04722595 112.26854706]
[126.43369293 125.04288483]
[137.78823853 138.81973267]
[137.78823853 153.81973267]
[137.78823853 168.81973267]
[137.78823853 183.81973267]
[137.78823853 198.81973267]
[145.52554321 212.61990356]
[137.78823853 225.34716797]
[137.78823853 240.34716797]
[148.07000732 252.66239929]
[144.71112061 268.34988403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 193]
[4 192]
[6 190]
[7 189]
[8 188]
[9 187]
[10 186]
[12 22]
[13 21]
[14 20]
[15 19]
[36 93]
[37 92]
[38 91]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 79]
[49 78]
[50 77]
[51 76]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[59 68]
[60 67]
[61 66]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[101 109]
[102 108]
[132 184]
[133 183]
[134 182]
[135 181]
[136 180]
[137 179]
[138 178]
[139 176]
[140 175]
[143 171]
[144 170]
[145 169]
[147 165]
[148 164]
[149 163]
[151 161]
[152 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
