%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGCAGCCUUCGCCCUCCCUGCUCCUUCCCGCGCCGUCUUCCCUUCCCGCGUUCCCCGGGAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[107.01766205 134.82331848]
[97.28076935 135.41915894]
[87.74893188 133.34399414]
[79.14096832 128.75433350]
[72.10600281 121.99626160]
[67.17456055 113.57943726]
[52.41561508 116.25778961]
[37.65666962 118.93614197]
[22.89772606 121.61449432]
[18.88685989 136.34120178]
[8.87703514 147.86361694]
[-5.14429092 153.89396667]
[-20.39317322 153.23492432]
[-33.84193420 146.01734924]
[-42.82031631 133.67427063]
[-45.54565048 118.65644073]
[-41.47682190 103.94564819]
[-31.42170143 92.46273041]
[-17.37673569 86.48764038]
[-2.13056707 87.20672607]
[11.28966808 94.47721863]
[20.21937180 106.85555267]
[34.97831726 104.17720032]
[49.73725891 101.49884796]
[64.49620056 98.82049561]
[71.37383270 78.96542358]
[88.26737213 66.47006989]
[109.26599884 65.70638275]
[127.02257538 76.94156647]
[140.23150635 69.83354187]
[153.44044495 62.72550964]
[166.64936829 55.61748123]
[179.85830688 48.50944901]
[193.06724548 41.40142059]
[205.39727783 32.85915375]
[216.69334412 22.99007034]
[227.98941040 13.12099075]
[223.09701538 -1.27112103]
[224.08964539 -16.43961334]
[230.81591797 -30.07139969]
[242.25013733 -40.08773422]
[256.64868164 -44.96119690]
[271.81585693 -43.94861984]
[285.43878174 -37.20441437]
[295.44006348 -25.75702477]
[300.29458618 -11.35209179]
[299.26205444 3.81373549]
[292.49993896 17.42777824]
[281.03939819 27.41399574]
[266.62808228 32.24956131]
[251.46363831 31.19708443]
[237.85848999 24.41706276]
[226.56242371 34.28614426]
[215.26635742 44.15522385]
[215.34991455 46.81077576]
[214.34268188 49.66570663]
[212.16534424 52.29482651]
[208.89608765 54.25305557]
[204.77262878 55.13120270]
[200.17526245 54.61035156]
[186.96633911 61.71838379]
[173.75740051 68.82641602]
[160.54847717 75.93444061]
[147.33953857 83.04247284]
[134.13059998 90.15050507]
[135.52285767 99.80574799]
[134.23628235 109.47564697]
[130.36790466 118.43096924]
[124.20946503 125.99639893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 25]
[7 24]
[8 23]
[9 22]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 54]
[36 53]
[37 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
