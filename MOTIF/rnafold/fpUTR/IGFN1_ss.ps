%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAAUCCAGAGCCUCAGCAAGCAGCAGCUGGAAACGGGGAAGAGGGAGCAGACAGGAAGCGGGAGGUCAGCUGUACACCCAGGGUAAUAGAACUUCUACCCUCAGAGGAGUCAAAGAGGAGGCAGAACU\
) } def
/len { sequence length } bind def

/coor [
[103.08503723 299.36956787]
[88.24198151 302.29174805]
[73.22264862 300.48211670]
[59.49846649 294.11798096]
[48.41399765 283.82287598]
[41.05518341 270.60534668]
[38.14295959 255.76033020]
[39.96264648 240.74221802]
[46.33596420 227.02229309]
[56.63851929 215.94473267]
[69.86096954 208.59477234]
[84.70792389 205.69250488]
[86.50224304 190.80020142]
[88.29655457 175.90791321]
[90.09086609 161.01560974]
[91.88518524 146.12332153]
[80.58737946 143.22947693]
[70.22751617 137.58033752]
[57.17759323 144.97625732]
[51.53295517 159.99349976]
[36.22878647 164.80618286]
[23.00513268 155.72242737]
[22.00605392 139.71051025]
[33.99795532 129.05340576]
[49.78167725 131.92633057]
[62.83159637 124.53041077]
[61.05016327 117.24504852]
[57.48730087 102.67432404]
[55.70587158 95.38896179]
[40.71557617 94.84949493]
[25.72528076 94.31002045]
[11.49889755 102.46735382]
[-2.54083586 93.99281311]
[-1.95104575 77.60427094]
[12.66154194 70.16086578]
[26.26474953 79.31972504]
[41.25504684 79.85919952]
[56.24534225 80.39866638]
[61.17948914 73.26001740]
[67.23052979 67.24492645]
[74.15781403 62.51815414]
[81.69858551 59.19512177]
[89.57773590 57.33938980]
[97.51778412 56.96210861]
[105.24859619 58.02330399]
[103.45428467 43.13101196]
[101.65996552 28.23871613]
[89.93261719 23.59326172]
[81.37215424 14.42787361]
[77.58113861 2.54934740]
[79.23020172 -9.73672676]
[85.94033051 -20.07343674]
[96.36766815 -26.50469017]
[95.28942108 -41.46588516]
[94.21118164 -56.42708206]
[93.13294220 -71.38827515]
[80.12150574 -79.63501740]
[74.52631378 -93.79648590]
[78.29816437 -108.36484528]
[89.78767395 -117.80567932]
[88.70942688 -132.76687622]
[77.56900787 -144.31115723]
[79.79153442 -160.19950867]
[93.67208862 -168.24375916]
[108.56269073 -162.27302551]
[113.04054260 -146.86756897]
[103.67062378 -133.84510803]
[104.74887085 -118.88391876]
[117.47339630 -111.18817902]
[123.29528046 -97.31123352]
[119.78857422 -82.49379730]
[108.09413147 -72.46652222]
[109.17237854 -57.50532532]
[110.25061798 -42.54412842]
[111.32886505 -27.58293152]
[126.69718933 -19.04448318]
[133.99623108 -2.87901592]
[130.17123413 14.60024071]
[116.55226135 26.44440079]
[118.34658051 41.33669662]
[120.14089203 56.22898865]
[132.62541199 64.54383850]
[147.05857849 60.45925140]
[161.49172974 56.37466431]
[175.92489624 52.29007721]
[190.35806274 48.20548630]
[204.79121399 44.12089920]
[208.48063660 29.21171379]
[219.14190674 18.15582275]
[233.90722656 13.92720318]
[248.80476379 17.66333389]
[259.82717896 28.35921288]
[264.00949097 43.13770294]
[260.22668457 58.02346802]
[249.49632263 69.01230621]
[234.70478821 73.14827728]
[219.83096313 69.31883240]
[208.87580872 58.55406189]
[194.44264221 62.63864899]
[180.00949097 66.72323608]
[165.57632446 70.80782318]
[151.14315796 74.89241028]
[136.71000671 78.97700500]
[143.06578064 91.94313049]
[144.81208801 106.78173065]
[141.42344666 121.84741211]
[154.29226685 129.55413818]
[170.68904114 129.27514648]
[178.89588928 143.47302246]
[170.47030640 157.54219055]
[154.07981873 157.00952148]
[146.58554077 142.42295837]
[133.71672058 134.71623230]
[126.98191071 138.01658630]
[139.43315125 146.38119507]
[138.41490173 161.34658813]
[124.94539642 167.94754028]
[112.49400330 159.58316040]
[113.51229095 144.61727905]
[106.77748108 147.91763306]
[104.98316193 162.80993652]
[103.18885040 177.70222473]
[101.39453125 192.59451294]
[99.60021973 207.48681641]
[113.33291626 213.83253479]
[124.43117523 224.11280823]
[131.80769348 237.32044983]
[134.73980713 252.16154480]
[132.94024658 267.18209839]
[126.58532715 280.91052246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[18 26]
[19 25]
[29 38]
[30 37]
[31 36]
[45 81]
[46 80]
[47 79]
[53 75]
[54 74]
[55 73]
[56 72]
[60 68]
[61 67]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
