%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAGGAAGAGGUAGCUCCACAGGAGGUACAGCUGCUUACACAUCUCUCCUCAGAGCUGUCCCUUGACUUGGGGGUGAAUUUCAGGCCAACAGGGCUUCCUGGGAUACAAGAGCGUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[101.44484711 143.95558167]
[88.88225555 135.75917053]
[85.56455231 121.13066864]
[93.36285400 108.31604004]
[78.46182251 110.03629303]
[63.56079102 111.75653839]
[48.65975952 113.47679138]
[33.75872803 115.19704437]
[18.88088036 117.10744476]
[4.02864265 119.20768738]
[-10.82359600 121.30792999]
[-25.47148323 124.53894043]
[-39.82905960 128.88174438]
[-54.18663406 133.22456360]
[-68.54421234 137.56736755]
[-82.90178680 141.91018677]
[-97.25936127 146.25299072]
[-111.61693573 150.59580994]
[-125.79763794 155.48536682]
[-139.78063965 160.91450500]
[-145.92330933 175.47619629]
[-160.59477234 181.35188293]
[-175.09072876 175.05560303]
[-180.81095886 160.32283020]
[-174.36177063 145.89427185]
[-159.56935120 140.33012390]
[-145.20977783 146.93148804]
[-131.22676086 141.50236511]
[-129.46858215 138.31904602]
[-126.02023315 135.87416077]
[-121.26814270 134.98098755]
[-115.95974731 136.23823547]
[-101.60217285 131.89541626]
[-87.24459839 127.55261230]
[-72.88702393 123.20980072]
[-58.52944565 118.86698914]
[-44.17187119 114.52417755]
[-29.81429482 110.18136597]
[-42.06218719 101.52173615]
[-44.83154297 86.77959442]
[-36.56118774 74.26555634]
[-21.91338348 71.03417969]
[-9.14556122 78.90708923]
[-5.45534992 93.44608307]
[-12.92383766 106.45569611]
[1.92840028 104.35545349]
[16.78063774 102.25521088]
[23.03564262 98.15570068]
[32.03847885 100.29601288]
[46.93951035 98.57575989]
[61.84054184 96.85550690]
[76.74156952 95.13526154]
[91.64260101 93.41500854]
[106.36822510 90.55914307]
[120.83203125 86.58441925]
[135.29583740 82.60969543]
[149.75962830 78.63497162]
[164.22343445 74.66024780]
[178.27464294 69.41013336]
[191.80102539 62.92654037]
[205.32740784 56.44295120]
[218.85379028 49.95936203]
[232.38017273 43.47577286]
[245.90655518 36.99218369]
[251.23689270 22.35574913]
[265.04693604 15.97315502]
[278.96768188 21.14501953]
[292.49407959 14.66143036]
[305.76220703 7.66450071]
[318.75256348 0.16450094]
[331.74295044 -7.33549929]
[344.73333740 -14.83549881]
[348.92764282 -29.83702087]
[362.20855713 -37.25803375]
[376.48437500 -33.16696930]
[389.47476196 -40.66696930]
[402.46514893 -48.16696930]
[403.09646606 -63.58140945]
[411.97994995 -76.19438934]
[426.28088379 -81.98115540]
[441.43591309 -79.09517670]
[452.60910034 -68.45734406]
[456.23513794 -53.46216583]
[451.15695190 -38.89454269]
[438.99499512 -29.40294838]
[423.63009644 -28.01612091]
[409.96514893 -35.17658615]
[396.97476196 -27.67658806]
[383.98437500 -20.17658806]
[380.38943481 -5.76783991]
[367.32217407 2.02327943]
[352.23333740 -1.84511805]
[339.24295044 5.65488195]
[326.25256348 13.15488243]
[313.26220703 20.65488243]
[312.01055908 24.06927872]
[308.97583008 27.01189232]
[304.41577148 28.62000275]
[298.97766113 28.18781471]
[285.45129395 34.67140198]
[280.76391602 48.76268387]
[267.13861084 55.53065491]
[252.39015198 50.51856613]
[238.86376953 57.00215530]
[225.33738708 63.48574448]
[211.81098938 69.96933746]
[198.28460693 76.45292664]
[184.75822449 82.93651581]
[198.62852478 88.64744568]
[205.77214050 101.83717346]
[202.97663879 116.57437134]
[191.49913025 126.23185730]
[176.50096130 126.46672058]
[164.72669983 117.17334747]
[161.47113037 102.53090668]
[168.19816589 89.12405396]
[153.73435974 93.09877777]
[139.27055359 97.07350159]
[124.80675507 101.04821777]
[110.34294891 105.02294159]
[122.36569214 113.99253845]
[124.75765228 128.80059814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 47]
[10 46]
[11 45]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 28]
[20 27]
[54 120]
[55 119]
[56 118]
[57 117]
[58 116]
[59 108]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[67 100]
[68 99]
[69 95]
[70 94]
[71 93]
[72 92]
[75 89]
[76 88]
[77 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
