%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGCGCCCCACCUUCCUGAAGGUCGAGGCACGCUUUCCCAACAUGCUCUGCAGAGAAAUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[87.44767761 196.88833618]
[92.87883759 182.69076538]
[103.33338928 171.65577698]
[97.18952942 157.97174072]
[91.04567719 144.28770447]
[84.90181732 130.60365295]
[73.23725891 121.17295837]
[58.56993484 118.03135681]
[43.90261459 114.88975525]
[29.58804703 124.64716339]
[12.93618870 121.27061462]
[3.91410470 107.26771545]
[-10.88434982 104.81705475]
[-25.68280411 102.36639404]
[-40.48125839 99.91573334]
[-55.27971268 97.46507263]
[-70.43188477 103.73753357]
[-83.27354431 93.53833008]
[-80.59429932 77.35952759]
[-65.15032196 71.84449005]
[-52.82905579 82.66661835]
[-38.03059769 85.11727905]
[-23.23214531 87.56793976]
[-8.43369007 90.01860046]
[6.36476517 92.46926117]
[15.86950302 83.47332001]
[29.03105927 81.67654419]
[40.94713211 87.97952271]
[47.04421616 100.22243500]
[61.71154022 103.36403656]
[76.37886047 106.50563812]
[79.31771088 90.00587463]
[91.61579132 80.26712799]
[106.20844269 81.08277893]
[115.90998840 69.64250183]
[110.11508942 55.47642899]
[111.57880402 40.24107361]
[119.96479034 27.43740654]
[133.34599304 20.00761986]
[148.64753723 19.65902328]
[162.35322571 26.47172356]
[171.31358337 38.88021088]
[173.46958923 54.03310394]
[168.32582092 68.44837952]
[157.06427002 78.81351471]
[142.27276611 82.74668121]
[127.35026550 79.34405518]
[117.64871979 90.78433228]
[121.03513336 100.97285461]
[118.65068054 112.05102539]
[110.56984711 120.82401276]
[98.58586121 124.45980072]
[104.72972107 138.14384460]
[110.87357330 151.82788086]
[117.01743317 165.51193237]
[132.21076965 165.03153992]
[146.42965698 170.40663147]
[157.50581360 180.81755066]
[163.75021362 194.67669678]
[164.21061707 209.87065125]
[158.81681824 224.08245850]
[148.39134216 235.14491272]
[134.52400208 241.37107849]
[119.32943726 241.81149292]
[105.12474060 236.39900208]
[94.07601166 225.95898438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 31]
[8 30]
[9 29]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[34 48]
[35 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
