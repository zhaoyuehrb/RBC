%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACGCACGGGGUGGCGCGCGUGGGACCCGAGGGGUGGGGCUGGGUUUAGUAGGAGACCUGGGGCAAGGCCCCCUGUGGACGACCAUCUGCCAGCUUCUCUCGUUCCGUCGAUUGGGAGGAGCGGUGGCGACCUCGGCCUUCAGUGUUUCCGACGGAGUGA\
) } def
/len { sequence length } bind def

/coor [
[56.39876556 525.26434326]
[40.62088776 524.35101318]
[30.17258835 512.49316406]
[31.25265694 496.72583008]
[43.22031021 486.40347290]
[44.08713531 471.42855835]
[44.95396423 456.45361328]
[36.22951508 441.25048828]
[46.40808868 425.93179321]
[46.98615265 410.94293213]
[37.97032547 395.91079712]
[47.85177994 380.39877319]
[48.14086533 365.40155029]
[40.65028763 352.52752686]
[48.65211105 338.87902832]
[48.94119644 323.88183594]
[49.23028183 308.88461304]
[49.51937103 293.88739014]
[49.80845642 278.89019775]
[38.43972778 271.84030151]
[31.99809265 259.99264526]
[32.26615143 246.40130615]
[39.28090286 234.63063049]
[51.29595184 227.82058716]
[51.87401581 212.83172607]
[52.45207977 197.84288025]
[49.88925552 193.76124573]
[49.89635468 188.01779175]
[53.35231781 182.29074097]
[54.50758743 167.33529663]
[55.66285706 152.37985229]
[56.81812668 137.42440796]
[57.97339630 122.46895599]
[59.12866592 107.51351166]
[52.43497849 94.08985138]
[39.79490662 86.01343536]
[30.83164978 84.01430511]
[26.99114418 77.65758514]
[14.50907040 69.33905792]
[2.02699709 61.02053452]
[-10.45507622 52.70201111]
[-22.93715096 44.38348770]
[-35.41922379 36.06496429]
[-50.72529602 38.95666122]
[-63.26539230 30.34268188]
[-65.92785645 15.73286152]
[-78.40993500 7.41433764]
[-90.89200592 -0.90418589]
[-103.37407684 -9.22270966]
[-110.01338196 -10.03667736]
[-114.53760529 -13.57486343]
[-116.16836548 -18.11009598]
[-128.32058716 -26.90346909]
[-140.47282410 -35.69684219]
[-152.62504578 -44.49021530]
[-169.00160217 -48.87707901]
[-169.31967163 -65.82804108]
[-153.11920166 -70.82616425]
[-143.83166504 -56.64244080]
[-131.67944336 -47.84906769]
[-119.52722168 -39.05569458]
[-107.37499237 -30.26232147]
[-95.05555725 -21.70478249]
[-82.57347870 -13.38626003]
[-70.09140778 -5.06773615]
[-57.60933304 3.25078773]
[-43.10032272 0.08468382]
[-30.32322693 8.34303761]
[-27.10070038 23.58288956]
[-14.61862659 31.90141296]
[-2.13655305 40.21993637]
[10.34552097 48.53845978]
[22.82759476 56.85698318]
[35.30966949 65.17550659]
[47.87132645 73.37335968]
[60.51139832 81.44977570]
[73.80355835 74.49863434]
[74.38162231 59.50977325]
[74.95968628 44.52091599]
[75.53775024 29.53205872]
[67.41707611 15.28472137]
[75.92774200 1.26685381]
[92.31470490 1.89883769]
[99.72046661 16.53054237]
[90.52661133 30.11012268]
[89.94854736 45.09897995]
[89.37048340 60.08783722]
[88.79241943 75.07669830]
[103.74549103 76.50146484]
[113.64389038 85.01885986]
[127.13143158 78.45484161]
[140.61897278 71.89082336]
[154.10650635 65.32680511]
[167.59403992 58.76279068]
[180.95257568 51.94005966]
[194.17713928 44.86114120]
[207.40168762 37.78222275]
[220.62625122 30.70330620]
[233.85081482 23.62438774]
[247.07536316 16.54547119]
[260.29992676 9.46655369]
[273.52447510 2.38763618]
[286.74902344 -4.69128132]
[299.97360229 -11.77019882]
[308.48889160 -25.10437584]
[323.36117554 -24.28923798]
[336.58572388 -31.36815453]
[344.77282715 -45.57742691]
[361.16998291 -45.32124710]
[368.90921021 -30.86314774]
[360.02905273 -17.07638550]
[343.66464233 -18.14359856]
[330.44009399 -11.06468010]
[322.87069702 1.76316524]
[307.05252075 1.45435905]
[293.82794189 8.53327656]
[280.60339355 15.61219406]
[267.37884521 22.69111061]
[254.15428162 29.77002907]
[240.92971802 36.84894562]
[227.70516968 43.92786407]
[214.48060608 51.00678253]
[201.25605774 58.08569717]
[188.03149414 65.16461945]
[185.80552673 69.43928528]
[180.84651184 72.33678436]
[174.15806580 72.25032806]
[160.67053223 78.81434631]
[147.18298340 85.37836456]
[133.69544983 91.94238281]
[120.20790863 98.50639343]
[104.68742371 123.32890320]
[74.08410645 108.66877747]
[72.92884064 123.62422180]
[71.77357483 138.57966614]
[70.61830139 153.53511047]
[69.46303558 168.49055481]
[68.30776215 183.44601440]
[67.44093323 198.42094421]
[66.86286926 213.40979004]
[66.28480530 228.39865112]
[79.70442200 238.65715027]
[84.33642578 254.72856140]
[78.55091095 270.24475098]
[64.80567169 279.17926025]
[64.51658630 294.17648315]
[64.22750092 309.17370605]
[63.93841171 324.17089844]
[63.64932632 339.16812134]
[71.11922455 353.11483765]
[63.13808060 365.69064331]
[62.84899521 380.68786621]
[71.22852325 390.53442383]
[70.65143585 403.04910278]
[61.97500992 411.52099609]
[61.39694595 426.50985718]
[69.58515930 436.51608276]
[68.76698303 449.01733398]
[59.92889786 457.32043457]
[59.06206894 472.29537964]
[58.19524384 487.27029419]
[68.89192963 498.90457153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 161]
[6 160]
[7 159]
[9 156]
[10 155]
[12 152]
[13 151]
[15 149]
[16 148]
[17 147]
[18 146]
[19 145]
[24 141]
[25 140]
[26 139]
[29 138]
[30 137]
[31 136]
[32 135]
[33 134]
[34 133]
[35 76]
[36 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[46 66]
[47 65]
[48 64]
[49 63]
[52 62]
[53 61]
[54 60]
[55 59]
[77 88]
[78 87]
[79 86]
[80 85]
[90 131]
[91 130]
[92 129]
[93 128]
[94 127]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
