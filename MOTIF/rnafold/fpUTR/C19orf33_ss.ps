%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUCCUCCAACGGGCAGGUCUCAGCGCUCCUCCCCCUGCUCCGCUCCUCUGCAGGGCCCAGGCGCCCUUGGCCUUAGGACCCAACUUCUCUUACCGCC\
) } def
/len { sequence length } bind def

/coor [
[102.22149658 404.85739136]
[88.44884491 398.79846191]
[76.07189941 390.24230957]
[65.53807068 379.49822998]
[57.22815704 366.95465088]
[51.44255447 353.06497192]
[48.39040756 338.33129883]
[48.18204880 323.28625488]
[50.82501602 308.47372437]
[56.22375870 294.42913818]
[64.18312073 281.66024780]
[74.41538239 270.62857056]
[86.55064392 261.73297119]
[100.15022278 255.29496765]
[114.72251129 251.54730225]
[113.79909515 236.57575989]
[112.87567902 221.60420227]
[98.92290497 205.14912415]
[108.23558807 184.87292480]
[105.47933960 170.12832642]
[102.72309875 155.38372803]
[99.96685791 140.63912964]
[97.21061707 125.89453888]
[82.45877838 119.25131989]
[74.47583771 105.17930603]
[76.34230042 89.10867310]
[87.33791351 77.24083710]
[84.12891388 62.58811188]
[80.91992188 47.93539047]
[77.71092224 33.28266525]
[74.50193024 18.62994003]
[60.88294601 15.04809380]
[50.21145630 5.96202087]
[44.55767441 -6.78993034]
[44.98552322 -20.66592789]
[51.35289764 -32.92727280]
[62.35110855 -41.17893982]
[59.59486389 -55.92353821]
[56.83862305 -70.66813660]
[54.08237839 -85.41272736]
[51.32613754 -100.15732574]
[48.56989288 -114.90192413]
[33.92268372 -119.34239960]
[23.02495766 -130.08940125]
[18.38092804 -144.67335510]
[21.05776405 -159.74296570]
[30.44034576 -171.83534241]
[44.37262344 -178.17176819]
[59.65306473 -177.29615784]
[72.77033234 -169.40971375]
[80.71018219 -156.32470703]
[81.64808655 -141.04797363]
[75.36852264 -127.08997345]
[63.31449127 -117.65816498]
[66.07073212 -102.91356659]
[68.82697296 -88.16897583]
[71.58322144 -73.42437744]
[74.33946228 -58.67977905]
[77.09570312 -43.93518448]
[92.39530945 -38.99119568]
[103.21335602 -26.97040558]
[106.56144714 -11.05356407]
[101.44464874 4.48404598]
[89.15465546 15.42094326]
[92.36364746 30.07366753]
[95.57264709 44.72639084]
[98.78163910 59.37911606]
[101.99063873 74.03184509]
[114.57959747 78.41891479]
[123.34844971 88.46060181]
[125.99961090 101.52580261]
[121.83843231 114.19122314]
[111.95520782 123.13829803]
[114.71145630 137.88288879]
[117.46769714 152.62748718]
[120.22393799 167.37208557]
[122.98017883 182.11668396]
[130.98126221 185.62452698]
[136.79887390 192.01370239]
[139.48382568 200.12660217]
[138.64514160 208.53521729]
[134.50506592 215.79237366]
[127.84722900 220.68078613]
[128.77064514 235.65234375]
[129.69406128 250.62388611]
[144.61643982 252.55238342]
[158.90409851 257.27035522]
[172.04054260 264.60726929]
[183.55090332 274.29788208]
[193.01908875 285.99191284]
[200.10282898 299.26657104]
[204.54605103 313.64205933]
[206.18812561 328.59866333]
[204.96971130 343.59573364]
[200.93484497 358.09112549]
[194.22937012 371.56082153]
[185.09570312 383.51794434]
[173.86402893 393.53021240]
[160.94033813 401.23571777]
[146.79182434 406.35589600]
[131.92996216 408.70565796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 85]
[16 84]
[17 83]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
