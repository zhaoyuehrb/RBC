%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGGGCCGAGGGGGCGGGGUCACGAGCCGCCAGCCGCCGGGUGGAGGGUCCCGGCCGGGAGCCGCGGAAAGAGUAGGGCUCCCCAGACAACGGGGUCCGACGAGCAGUUGGGCACGGGCUGAGUCCGCCUGCCGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[47.97439957 430.87670898]
[40.22285843 417.29556274]
[43.06547546 401.91851807]
[55.16006088 392.00613403]
[55.16006088 377.00613403]
[47.42276001 364.27886963]
[55.16006088 350.47869873]
[55.16006088 335.47869873]
[55.16006088 320.47869873]
[42.61929703 328.70846558]
[28.29740524 324.24938965]
[22.64488602 310.35519409]
[29.78631401 297.16427612]
[44.51067734 294.30191040]
[56.07389450 303.85693359]
[57.71826935 288.94732666]
[59.36264801 274.03775024]
[61.00702667 259.12814331]
[62.65140152 244.21855164]
[64.29577637 229.30895996]
[52.14118195 220.51885986]
[38.49670410 226.75009155]
[24.85222435 232.98130798]
[17.92110252 247.44985962]
[2.25592518 250.91134644]
[-10.12632275 240.71038818]
[-9.72704220 224.67230225]
[3.14747405 215.10012817]
[18.62099838 219.33683777]
[32.26548004 213.10560608]
[45.90995789 206.87437439]
[56.10103989 195.86793518]
[61.26573563 181.78511047]
[66.27542877 167.64640808]
[71.12950897 153.45352173]
[75.98359680 139.26065063]
[80.83767700 125.06776428]
[85.69176483 110.87487793]
[80.68207550 96.73617554]
[67.97495270 88.76566315]
[55.26782990 80.79515076]
[42.56071091 72.82463837]
[29.85359001 64.85412598]
[17.14646912 56.88360977]
[2.80015111 62.79654312]
[-12.27384663 59.11494064]
[-22.27926636 47.25444794]
[-23.36881638 31.77567291]
[-15.12354660 18.63051796]
[-0.71392888 12.87356091]
[14.31924343 16.71847153]
[24.19540977 28.68680382]
[25.11698151 44.17648697]
[37.82410431 52.14700317]
[50.53122330 60.11751556]
[63.23834610 68.08802795]
[75.94546509 76.05854034]
[88.65258789 84.02905273]
[95.33139038 80.61679077]
[115.36780548 70.37998962]
[116.35570526 55.41255188]
[117.34359741 40.44512177]
[118.33149719 25.47768784]
[119.31939697 10.51025391]
[120.30728912 -4.45717955]
[121.29518890 -19.42461205]
[107.80142212 -26.48422050]
[98.35073853 -38.42593384]
[94.58053589 -53.18077850]
[97.14402008 -68.19239044]
[105.59704590 -80.85990906]
[118.47509003 -88.98862457]
[133.54693604 -91.17017365]
[148.20130920 -87.02660370]
[159.89924622 -77.27579498]
[166.61401367 -63.60715103]
[167.18222046 -48.38883972]
[161.50544739 -34.25752640]
[150.56719971 -23.66154480]
[136.26261902 -18.43671608]
[135.27471924 -3.46928191]
[134.28683472 11.49815083]
[133.29893494 26.46558380]
[132.31103516 41.43301773]
[131.32313538 56.40045166]
[130.33523560 71.36788177]
[135.55044556 76.75784302]
[137.47511292 61.88183594]
[150.30558777 54.11143875]
[164.38044739 59.29779434]
[169.10127258 73.53555298]
[160.91323853 86.10362244]
[145.98085022 87.53775787]
[151.19604492 92.92771912]
[166.18791199 92.43350220]
[175.60029602 83.54106140]
[188.14697266 83.48009491]
[197.05509949 91.73514557]
[212.05419922 91.57038116]
[227.05328369 91.40560913]
[242.05238342 91.24084473]
[257.05148315 91.07608032]
[272.05056763 90.91131592]
[287.04968262 90.74655151]
[299.25122070 80.33012390]
[314.97463989 83.51648712]
[322.15832520 97.86133575]
[315.29150391 112.36051941]
[299.64184570 115.89151764]
[287.21444702 105.74564362]
[272.21533203 105.91040802]
[257.21624756 106.07518005]
[242.21714783 106.23994446]
[227.21804810 106.40470886]
[212.21896362 106.56947327]
[197.21986389 106.73423767]
[182.67071533 116.48777008]
[166.68212891 107.42536163]
[151.69026184 107.91957855]
[99.88464355 115.72896576]
[95.03056335 129.92184448]
[90.17647552 144.11473083]
[85.32238770 158.30760193]
[80.46830750 172.50048828]
[80.64566803 181.71246338]
[75.34855652 186.94979858]
[70.18386841 201.03262329]
[79.20537567 230.95333862]
[77.56099701 245.86293030]
[75.91661835 260.77252197]
[74.27223969 275.68212891]
[72.62786865 290.59170532]
[70.98348999 305.50131226]
[70.16005707 320.47869873]
[70.16005707 335.47869873]
[70.16005707 350.47869873]
[77.89736176 364.27886963]
[70.16005707 377.00613403]
[70.16005707 392.00613403]
[82.25463867 401.91851807]
[85.09725952 417.29556274]
[77.34571838 430.87670898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[7 136]
[8 135]
[9 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 31]
[22 30]
[23 29]
[32 127]
[33 126]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[94 119]
[95 118]
[98 116]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
