%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGAGAGAACACACGUCCUUGCGGAAGUGACGGCAGUUCCGAGUCCAGUGGGGGCGGUGGGAGCGAUGAGGGUCUGAGACGGUGGGAGCGGUUGUGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[92.33644867 341.55502319]
[78.20532227 347.09359741]
[63.02766037 347.14947510]
[48.85612488 341.71514893]
[37.60729599 331.52554321]
[30.80248260 317.95870972]
[29.36198235 302.84945679]
[33.48060989 288.24118042]
[42.60135651 276.10955811]
[55.49071503 268.09527588]
[70.40550232 265.28216553]
[73.10932922 250.52787781]
[75.81315613 235.77357483]
[78.51698303 221.01928711]
[81.22080994 206.26498413]
[83.47777557 191.43574524]
[85.28582764 176.54512024]
[86.86877441 161.62887573]
[88.22625732 146.69042969]
[89.58374023 131.75198364]
[90.94122314 116.81352997]
[81.74571228 105.61581421]
[83.05699921 91.18574524]
[94.12033081 81.82898712]
[95.47781372 66.89054108]
[82.45787048 59.00115204]
[74.18816376 46.29292679]
[72.26405334 31.31567764]
[77.01404572 17.04687881]
[87.44518280 6.29975224]
[101.45008087 1.16862607]
[102.80756378 -13.76982212]
[104.16504669 -28.70827103]
[88.83290100 -38.63764954]
[80.55965424 -54.82975769]
[81.48904419 -72.90583801]
[91.28871918 -88.02425385]
[107.26160431 -96.17729950]
[107.26160431 -111.17729950]
[107.26160431 -126.17729950]
[107.26160431 -141.17729187]
[107.26160431 -156.17729187]
[93.38773346 -168.88237000]
[93.03675079 -187.37658691]
[105.97092438 -200.15628052]
[105.06524658 -215.12892151]
[104.15956879 -230.10154724]
[103.25389099 -245.07418823]
[92.24729919 -256.74615479]
[94.65287018 -272.60781860]
[108.62524414 -280.49148560]
[123.44601440 -274.34948730]
[127.74595642 -258.89343262]
[118.22652435 -245.97985840]
[119.13220215 -231.00723267]
[120.03787994 -216.03459167]
[120.94355774 -201.06196594]
[131.07716370 -195.40904236]
[137.22106934 -185.42308044]
[137.70861816 -173.58753967]
[132.29751587 -162.91432190]
[122.26160431 -156.17729187]
[122.26160431 -141.17729187]
[122.26160431 -126.17729950]
[122.26160431 -111.17729950]
[122.26160431 -96.17729950]
[133.42698669 -91.64581299]
[142.38766479 -83.53708649]
[148.04106140 -72.81646729]
[149.68049622 -60.77259445]
[147.08340454 -48.86251068]
[140.54121399 -38.53538513]
[130.82684326 -31.05619431]
[119.10349274 -27.35078812]
[117.74600983 -12.41233921]
[116.38852692 2.52610922]
[129.23910522 10.09763908]
[137.56216431 22.54899406]
[139.66232300 37.44027710]
[135.07000732 51.82536697]
[124.64504242 62.83477402]
[110.41625977 68.24802399]
[109.05877686 83.18647003]
[118.25428772 94.38418579]
[116.94300079 108.81425476]
[105.87966919 118.17101288]
[104.52218628 133.10946655]
[103.16470337 148.04791260]
[101.80722046 162.98635864]
[104.17387390 171.98655701]
[100.17646027 178.35316467]
[98.36840820 193.24380493]
[100.69763184 199.72229004]
[99.46577454 205.48800659]
[95.97510529 208.96881104]
[93.27127838 223.72309875]
[90.56745911 238.47740173]
[87.86363220 253.23170471]
[85.15980530 267.98599243]
[98.10784149 275.90515137]
[107.31769562 287.96926880]
[111.54380035 302.54678345]
[110.21463013 317.66625977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 92]
[17 91]
[18 89]
[19 88]
[20 87]
[21 86]
[24 83]
[25 82]
[31 76]
[32 75]
[33 74]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
