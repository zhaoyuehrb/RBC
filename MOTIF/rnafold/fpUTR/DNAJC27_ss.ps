%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCCCUCCCCCGGCUCCCCACGCUCCCAACCGCCCGCGCCUGCUGCCAGGCAGCGGCGGGGAUGGCGAGCAGCGGAGGCGAGGCGGUGACGAGAGCAGCGGCUCCGCCAUUGGACGAGGAGGCCUGAGGGACGGGCCAGCGGUGCACAAGAAGAGACCGAGGCGGGUGGCCCCGAGAGAGCCAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[106.26658630 314.63021851]
[95.45439148 325.40328979]
[81.03585815 330.41015625]
[65.87380219 328.65670776]
[52.97864532 320.49105835]
[44.91074371 307.53451538]
[43.27198029 292.35961914]
[48.38773727 277.97937012]
[59.24226761 267.24896240]
[73.68040466 262.29888916]
[75.40364838 247.39822388]
[77.12688446 232.49752808]
[70.90295410 218.96563721]
[80.17443085 206.14572144]
[81.89766693 191.24504089]
[83.62091064 176.34434509]
[85.34415436 161.44366455]
[87.06739044 146.54298401]
[78.42283630 143.21952820]
[70.57140350 138.30743408]
[63.80169296 131.98724365]
[58.36254120 124.49129486]
[54.45388031 116.09510040]
[52.21937943 107.10729218]
[37.21988678 106.98393250]
[22.22039413 106.86057281]
[7.22090054 106.73721313]
[-7.77909946 106.73721313]
[-22.77859116 106.86057281]
[-37.77808380 106.98393250]
[-54.65456772 117.98840332]
[-71.06335449 107.77773285]
[-86.05068207 108.39436340]
[-101.03800201 109.01099396]
[-116.02532196 109.62762451]
[-131.01263428 110.24425507]
[-139.47518921 113.72878265]
[-146.25111389 110.74572754]
[-161.24655151 111.11577606]
[-176.23843384 111.60913086]
[-191.22575378 112.22576141]
[-206.21307373 112.84239197]
[-221.20039368 113.45902252]
[-236.18771362 114.07565308]
[-249.74359131 123.30442047]
[-264.39428711 115.93633270]
[-265.06845093 99.55104828]
[-251.07252502 91.00434113]
[-236.80433655 99.08833313]
[-221.81701660 98.47170258]
[-206.82969666 97.85507202]
[-191.84237671 97.23844147]
[-176.85505676 96.62181091]
[-170.28991699 93.19972229]
[-161.61659241 96.12033844]
[-146.62115479 95.75028992]
[-131.62927246 95.25693512]
[-116.64195251 94.64030457]
[-101.65463257 94.02367401]
[-86.66731262 93.40704346]
[-71.67999268 92.79041290]
[-65.44690704 84.66716003]
[-55.56110001 81.25273132]
[-45.21749878 83.90662384]
[-37.90144348 91.98444366]
[-22.90195084 91.86108398]
[-7.90245867 91.73772430]
[-1.22831595 88.53341675]
[7.34426022 91.73772430]
[22.34375381 91.86108398]
[37.34324646 91.98444366]
[52.34273911 92.10780334]
[66.67581940 60.32989502]
[100.51576233 44.68984985]
[98.54767609 29.81952095]
[96.57958984 14.94919300]
[94.61151123 0.07886551]
[92.64342499 -14.79146194]
[90.67533875 -29.66178894]
[81.19426727 -42.32748413]
[87.19478607 -55.95990753]
[85.22670746 -70.83023834]
[72.96560669 -80.43769073]
[71.18151855 -95.54635620]
[80.41632080 -107.17623138]
[78.44823456 -122.04656219]
[64.22398376 -127.84019470]
[54.81491470 -139.97959900]
[52.75202560 -155.19932556]
[58.59022141 -169.40534973]
[70.75905609 -178.77630615]
[85.98516846 -180.79148865]
[100.17282104 -174.90879822]
[109.50559998 -162.71064758]
[111.47303772 -147.47828674]
[105.54590607 -133.30914307]
[93.31856537 -124.01464081]
[95.28664398 -109.14431763]
[107.22891998 -100.31722260]
[109.43667603 -85.26462555]
[100.09703064 -72.79832458]
[102.06511688 -57.92799377]
[111.40541840 -46.32592392]
[105.54566956 -31.62987518]
[107.51374817 -16.75954628]
[109.48183441 -1.88921905]
[111.44992065 12.98110867]
[113.41800690 27.85143661]
[115.38608551 42.72176361]
[121.90174103 46.43609619]
[127.30380249 32.44260788]
[132.70585632 18.44911575]
[138.10791016 4.45562553]
[140.20939636 -10.39643860]
[152.14262390 -19.48477554]
[167.01901245 -17.56302643]
[176.25096130 -5.74054623]
[174.50921631 9.15798855]
[162.80035400 18.53187180]
[153.51126099 30.30950165]
[144.22215271 42.08713150]
[134.93304443 53.86476135]
[141.44869995 57.57909393]
[155.24714661 51.69668579]
[169.04560852 45.81427765]
[182.84405518 39.93186569]
[196.64250183 34.04945755]
[210.44096375 28.16704941]
[217.73759460 13.87933636]
[233.48568726 10.81714439]
[245.60466003 21.32952499]
[244.79786682 37.35227966]
[231.68420410 46.59412003]
[216.32336426 41.96549988]
[202.52491760 47.84790802]
[188.72647095 53.73031998]
[174.92800903 59.61272812]
[161.12956238 65.49514008]
[147.33111572 71.37754822]
[150.21919250 83.12957001]
[150.36656189 94.72797394]
[147.98445129 105.56719208]
[162.43542480 109.58831787]
[176.88639832 113.60943604]
[191.33737183 117.63056183]
[201.36506653 106.12368774]
[215.39573669 100.11510468]
[230.64356995 100.79781342]
[244.08111572 108.03627014]
[253.04032898 120.39326477]
[255.74235535 135.41531372]
[251.65069580 150.11976624]
[241.57775879 161.58705139]
[227.52354431 167.54034424]
[212.27850342 166.79759216]
[198.86956787 159.50627136]
[189.95909119 147.11410522]
[187.31623840 132.08152771]
[172.86528015 128.06040955]
[158.41430664 124.03928375]
[143.96333313 120.01816559]
[142.26252747 123.39616394]
[140.30265808 126.63075256]
[138.09574890 129.70210266]
[135.65533447 132.59138489]
[145.02145386 144.30786133]
[154.38757324 156.02433777]
[163.75369263 167.74081421]
[179.21502686 173.20700073]
[181.94541931 189.37724304]
[169.13606262 199.61700439]
[153.96414185 193.39248657]
[152.03721619 177.10693359]
[142.67109680 165.39045715]
[133.30497742 153.67398071]
[123.93885803 141.95750427]
[118.76913452 144.51091003]
[113.33200073 146.43016052]
[107.70492554 147.68789673]
[101.96807861 148.26622009]
[100.24483490 163.16690063]
[98.52159882 178.06759644]
[96.79835510 192.96827698]
[95.07511902 207.86895752]
[101.17578888 222.46664429]
[92.02757263 234.22077942]
[90.30432892 249.12145996]
[88.58109283 264.02215576]
[101.50830078 272.13696289]
[109.62715912 285.06161499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 188]
[11 187]
[12 186]
[14 184]
[15 183]
[16 182]
[17 181]
[18 180]
[24 72]
[25 71]
[26 70]
[27 69]
[28 67]
[29 66]
[30 65]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[38 56]
[39 55]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[81 102]
[82 101]
[85 98]
[86 97]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
[128 134]
[142 161]
[143 160]
[144 159]
[145 158]
[165 176]
[166 175]
[167 174]
[168 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
