%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGAGUUCUGCACUUUGUUCCUUCCCUGGCACACCUGUGUCUGCAUUCCUUCUAUCUCCCGGCAUUCUCCACUCCUGUCUCUGUGUGUUUAAAAACCGGUGUGGGAAGUGUGCACGCCUGUGACGUCAGACUCCAGACC\
) } def
/len { sequence length } bind def

/coor [
[15.26317406 414.06723022]
[2.27457166 414.00222778]
[-10.39932346 411.19168091]
[-16.86453056 424.72686768]
[-23.32973671 438.26205444]
[-29.79494286 451.79724121]
[-36.26015091 465.33242798]
[-32.29047775 480.87658691]
[-42.08287430 493.58441162]
[-58.12545395 493.70751953]
[-68.11172485 481.15145874]
[-64.38106537 465.54821777]
[-49.79533005 458.86721802]
[-43.33012390 445.33203125]
[-36.86491776 431.79684448]
[-30.39970970 418.26165771]
[-23.93450356 404.72650146]
[-36.91563416 393.64566040]
[-46.32633591 379.39181519]
[-51.42412186 363.07662964]
[-51.80319977 345.97494507]
[-47.42679214 329.42501831]
[-38.63053131 314.72406006]
[-26.09676933 303.02630615]
[-10.80162144 295.25250244]
[6.06103611 292.01739502]
[23.17275810 293.58123779]
[28.40760422 279.52432251]
[33.64244843 265.46743774]
[38.87729263 251.41053772]
[44.11214066 237.35363770]
[40.23551178 220.27354431]
[54.43304825 208.60588074]
[59.35342026 194.43585205]
[64.27379608 180.26580811]
[57.56835938 167.01542664]
[62.35646057 152.57490540]
[76.30014801 145.63146973]
[81.22052002 131.46142578]
[86.14089203 117.29139709]
[91.06126404 103.12136078]
[89.87514496 97.92206573]
[91.73243713 92.43886566]
[96.52936554 88.43811798]
[102.07608795 74.50133514]
[107.62280273 60.56454849]
[113.16952515 46.62776566]
[108.78667450 34.44102097]
[113.75447083 22.91720009]
[124.88784027 18.05920219]
[130.74368286 4.24945498]
[136.59951782 -9.56029320]
[142.45535278 -23.37004089]
[148.31120300 -37.17979050]
[139.29797363 -47.93399048]
[135.83125305 -61.46233368]
[138.53584290 -75.09579468]
[146.82479858 -86.17008209]
[159.02560425 -92.54631805]
[172.71743774 -93.02399445]
[178.87948608 -106.69985199]
[185.04153442 -120.37570953]
[191.20359802 -134.05157471]
[179.75555420 -145.07810974]
[172.77403259 -159.32769775]
[171.08235168 -175.07832336]
[174.86581421 -190.43351746]
[183.65161133 -203.55070496]
[196.36775208 -212.86233521]
[211.47395325 -217.26310730]
[227.14807129 -216.24125671]
[233.00390625 -230.05101013]
[238.85975647 -243.86074829]
[228.74603271 -255.29208374]
[224.60200500 -269.98187256]
[227.25048828 -285.01345825]
[236.16561890 -297.40228271]
[249.57728577 -304.68856812]
[264.82260132 -305.42559814]
[278.87460327 -299.46704102]
[288.94320679 -287.99597168]
[293.02935791 -273.28997803]
[290.32171631 -258.26895142]
[281.35784912 -245.91531372]
[267.91760254 -238.68190002]
[252.66949463 -238.00491333]
[246.81365967 -224.19515991]
[240.95782471 -210.38542175]
[251.62960815 -201.02204895]
[258.88882446 -188.79605103]
[262.01055908 -174.90225220]
[260.67498779 -160.70324707]
[255.00015259 -147.59577942]
[245.53155518 -136.87338257]
[233.18980408 -129.59870911]
[219.18112183 -126.49816895]
[204.87945557 -127.88951874]
[198.71739197 -114.21365356]
[192.55534363 -100.53779602]
[186.39329529 -86.86193848]
[196.13902283 -74.01934052]
[198.11276245 -57.92452621]
[191.68522644 -42.93552780]
[178.51481628 -33.15871811]
[162.12094116 -31.32395172]
[156.26510620 -17.51420212]
[150.40927124 -3.70445442]
[144.55342102 10.10529423]
[138.69758606 23.91504288]
[141.80950928 41.15087128]
[127.10630798 52.17448425]
[121.55958557 66.11126709]
[116.01287079 80.04804993]
[110.46614838 93.98483276]
[105.23130035 108.04173279]
[100.31092834 122.21176910]
[95.39055634 136.38180542]
[90.47018433 150.55183411]
[97.10999298 164.64263916]
[91.91817474 178.94297791]
[78.44383240 185.18618774]
[73.52345276 199.35621643]
[68.60308075 213.52626038]
[73.52446747 225.50566101]
[69.07495117 237.23934937]
[58.16903687 242.58847046]
[52.93419266 256.64538574]
[47.69934845 270.70227051]
[42.46450424 284.75918579]
[37.22965622 298.81607056]
[48.10695648 306.06704712]
[57.19871902 315.45050049]
[64.09529114 326.53945923]
[68.48684692 338.83004761]
[70.17726135 351.76470947]
[69.09290314 364.75720215]
[65.28584290 377.21932983]
[58.93132401 388.58755493]
[50.31972122 398.34841919]
[39.84328079 406.06185913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[27 130]
[28 129]
[29 128]
[30 127]
[31 126]
[33 123]
[34 122]
[35 121]
[38 118]
[39 117]
[40 116]
[41 115]
[44 114]
[45 113]
[46 112]
[47 111]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[60 100]
[61 99]
[62 98]
[63 97]
[71 88]
[72 87]
[73 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
