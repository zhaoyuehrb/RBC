%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGAGCCGGGCGCGGGGCUUCUAUAAAAGGCGCCCGAAGCGGGGGCGCGCGCCCCAGAGACGUGAACUGUCGUUGCAGAGAUUGCGGGCGGCUGAGACGCCGCCUGCCUGGCACCUAGGAGCGCAGCGGAGCCCCGACACCGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[94.36719513 422.31570435]
[100.41353607 406.47656250]
[100.41353607 391.47656250]
[92.52000427 384.87802124]
[89.52854919 374.80419922]
[92.67008972 364.54559326]
[101.12968445 357.59432983]
[101.73367310 342.60650635]
[89.81871796 330.77423096]
[90.12623596 313.64807129]
[102.95308685 301.79345703]
[103.25514221 286.79650879]
[103.55719757 271.79956055]
[103.85925293 256.80258179]
[103.55719757 241.80563354]
[102.65151978 226.83299255]
[101.74584198 211.86036682]
[100.84016418 196.88772583]
[99.93448639 181.91510010]
[99.02880859 166.94245911]
[98.12313843 151.96983337]
[97.21746063 136.99719238]
[96.31178284 122.02456665]
[96.61784363 137.02143860]
[88.44446564 149.59904480]
[74.61614227 155.41088867]
[59.91156387 152.44856262]
[49.41222382 141.73577881]
[46.74640656 126.97455597]
[52.83534241 113.26599121]
[65.57486725 105.34737396]
[80.56288147 105.95527649]
[65.61151886 104.74827576]
[50.66016006 103.54127502]
[35.70880127 102.33427429]
[20.75744247 101.12728119]
[5.80608320 99.92028046]
[-5.04735422 111.17803192]
[-20.60327339 112.77409363]
[-33.51664352 103.95485687]
[-37.69016647 88.88449860]
[-31.15323257 74.67877960]
[-16.99238396 68.04520416]
[-1.89393675 72.11594391]
[7.01308155 84.96891785]
[21.96444130 86.17591858]
[36.91580200 87.38291931]
[51.86716080 88.58991241]
[66.81851959 89.79691315]
[81.76988220 91.00391388]
[94.68408203 83.37348938]
[100.84027863 69.69499207]
[106.99646759 56.01649857]
[113.15266418 42.33800125]
[119.17081451 28.59820938]
[125.05030823 14.79851723]
[123.34136200 -0.93012136]
[135.44818115 -9.60618687]
[141.32768250 -23.40587807]
[131.40470886 -26.26588631]
[122.82597351 -35.22743988]
[116.39559174 -48.77919769]
[109.96520233 -62.33095169]
[103.53481293 -75.88271332]
[88.96630096 -82.60118866]
[85.27577209 -98.21398926]
[95.29428101 -110.74430847]
[111.33649445 -110.57995605]
[121.09619141 -97.84701538]
[117.08657074 -82.31309509]
[123.51696014 -68.76134491]
[129.94734192 -55.20958710]
[136.37773132 -41.65782928]
[151.26837158 -39.84977722]
[160.75505066 -51.46885300]
[159.35716248 -66.98283386]
[169.14352417 -78.63108826]
[183.94235229 -79.86814880]
[193.42903137 -91.48722076]
[202.91571045 -103.10630035]
[187.98516846 -104.54804230]
[179.63090515 -117.00622559]
[183.96492004 -131.36647034]
[197.81642151 -137.12281799]
[211.05169678 -130.06394958]
[213.98757935 -115.35315704]
[224.59417725 -125.95975494]
[235.20077515 -136.56636047]
[245.80737305 -147.17295837]
[256.41397095 -157.77955627]
[267.02056885 -168.38616943]
[277.62719727 -178.99276733]
[288.23379517 -189.59936523]
[298.84039307 -200.20596313]
[298.58975220 -216.00827026]
[309.64630127 -227.30111694]
[325.45037842 -227.38465881]
[336.62570190 -216.20935059]
[336.54214478 -200.40527344]
[325.24929810 -189.34873962]
[309.44699097 -189.59936523]
[298.84039307 -178.99276733]
[288.23379517 -168.38616943]
[277.62719727 -157.77955627]
[267.02056885 -147.17295837]
[256.41397095 -136.56636047]
[245.80737305 -125.95975494]
[235.20077515 -115.35315704]
[224.59417725 -104.74655151]
[214.53479004 -93.61961365]
[205.04811096 -82.00054169]
[195.56143188 -70.38146973]
[197.30950928 -55.63426971]
[187.85418701 -43.71573639]
[172.37411499 -41.98217392]
[162.88743591 -30.36309814]
[155.12738037 -17.52637863]
[149.24787903 -3.72668743]
[151.37736511 11.01490498]
[138.85000610 20.67801666]
[132.97050476 34.47770691]
[133.24354553 41.90664291]
[126.83116150 48.49419022]
[120.67496490 62.17269135]
[114.51877594 75.85118866]
[108.36257935 89.52968597]
[114.75386047 93.71650696]
[118.59403229 101.70811462]
[117.75529480 111.78137207]
[111.28441620 121.11888885]
[112.19009399 136.09152222]
[113.09577179 151.06414795]
[114.00144196 166.03678894]
[114.90711975 181.00941467]
[115.81279755 195.98205566]
[116.71847534 210.95468140]
[117.62415314 225.92732239]
[118.52983093 240.89994812]
[121.13635254 244.53536987]
[122.29647827 248.42239380]
[122.11321259 252.06413269]
[120.84372711 255.05107117]
[118.85621643 257.10464478]
[118.55416107 272.10159302]
[118.25210571 287.09857178]
[117.95004272 302.09552002]
[128.35877991 310.69775391]
[131.84381104 323.54174805]
[127.34435272 335.85910034]
[116.72151184 343.21047974]
[116.11752319 358.19833374]
[126.31229401 375.54507446]
[115.41353607 391.47656250]
[115.41353607 406.47656250]
[121.45987701 422.31570435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[7 151]
[8 150]
[11 146]
[12 145]
[13 144]
[14 143]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[51 126]
[52 125]
[53 124]
[54 123]
[55 121]
[56 120]
[58 118]
[59 117]
[61 73]
[62 72]
[63 71]
[64 70]
[74 116]
[75 115]
[78 112]
[79 111]
[80 110]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
