%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCCGCCUAUCAGCCAAUGAAGAGACAGCAGUGAGAGCGGUUGCGCAGUGAAGGCUAGACCCGGUUUACUGGAAUUGCUCUGGCGAUCGAGGGAUCCUAGUACACCGCAAUC\
) } def
/len { sequence length } bind def

/coor [
[147.67726135 128.43634033]
[143.95069885 122.85195160]
[141.99488831 116.38685608]
[127.30861664 113.33501434]
[112.62236023 110.28318024]
[96.90558624 115.98412323]
[84.45191956 104.82958221]
[69.68777466 102.18003082]
[54.92363358 99.53047943]
[40.15949249 96.88092804]
[31.02033806 98.45491028]
[25.03062630 93.95208740]
[10.34436512 90.90025330]
[-4.34189606 87.84841156]
[-19.10603714 85.19886017]
[-33.93704224 82.95358276]
[-48.79733276 80.91107941]
[-63.68413162 79.07173920]
[-78.57093048 77.23240662]
[-93.45773315 75.39306641]
[-101.25135040 89.38315582]
[-113.76948547 99.30950928]
[-129.09387207 103.68845367]
[-144.89050293 101.88351440]
[-158.76501465 94.19777679]
[-168.62573242 81.82344055]
[-172.99885559 66.65699005]
[-187.93034363 65.22497559]
[-202.61766052 72.51982117]
[-216.12730408 63.22349548]
[-214.56170654 46.89925003]
[-199.53143311 40.34007645]
[-186.49832153 50.29348373]
[-171.56683350 51.72550583]
[-165.42045593 39.03287888]
[-155.27371216 29.19563866]
[-142.34207153 23.42080116]
[-128.18443298 22.42703629]
[-114.51521301 26.35529709]
[-102.99679565 34.74924469]
[-95.03726959 46.60817337]
[-91.61840057 60.50626755]
[-76.73159790 62.34560394]
[-61.84479523 64.18494415]
[-46.95799637 66.02427673]
[-39.83744431 63.68980789]
[-31.69176292 68.12257385]
[-16.86075783 70.36785889]
[-12.45605278 68.22037506]
[-6.64205265 68.91482544]
[-1.29005587 73.16214752]
[13.39620590 76.21398926]
[28.08246613 79.26583099]
[42.80904388 82.11679077]
[57.57318497 84.76634216]
[72.33732605 87.41588593]
[87.10147095 90.06543732]
[97.12779236 83.97445679]
[108.64540863 86.20418549]
[115.67420197 95.59691620]
[130.36045837 98.64875793]
[145.04672241 101.70059204]
[167.11767578 91.14295197]
[185.48736572 106.26497650]
[200.48596191 106.46985626]
[215.48455811 106.67473602]
[230.48316956 106.87961578]
[244.38772583 99.33152771]
[257.00814819 107.24194336]
[272.00674438 107.44682312]
[287.00534058 107.65171051]
[302.00393677 107.85659027]
[317.00253296 108.06147003]
[332.00112915 108.26634979]
[345.90570068 100.71826172]
[358.52609253 108.62867737]
[373.52471924 108.83355713]
[388.52331543 109.03843689]
[402.42788696 101.49034882]
[415.04827881 109.40076447]
[430.04687500 109.60564423]
[445.04547119 109.81052399]
[454.22860718 97.30252838]
[469.02011108 92.61312866]
[483.73242188 97.54550171]
[492.70828247 110.20303345]
[492.49633789 125.71866608]
[483.17807007 138.12631226]
[468.33654785 142.65496826]
[453.67864990 137.56329346]
[444.84060669 124.80912781]
[429.84201050 124.60424805]
[414.84338379 124.39936829]
[402.01162720 131.96211243]
[388.31842041 124.03704071]
[373.31982422 123.83216095]
[358.32122803 123.62728119]
[345.48947144 131.19001770]
[331.79626465 123.26494598]
[316.79766846 123.06006622]
[301.79904175 122.85518646]
[286.80044556 122.65030670]
[271.80184937 122.44542694]
[256.80325317 122.24054718]
[243.97148132 129.80328369]
[230.27828979 121.87821960]
[215.27967834 121.67333984]
[200.28108215 121.46846008]
[185.28248596 121.26358032]
[182.25573730 126.93406677]
[177.68362427 131.50987244]
[171.94355774 134.57972717]
[165.51925659 135.85801697]
[158.95996094 135.21130371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[7 57]
[8 56]
[9 55]
[10 54]
[12 53]
[13 52]
[14 51]
[15 48]
[16 47]
[17 45]
[18 44]
[19 43]
[20 42]
[27 34]
[28 33]
[64 109]
[65 108]
[66 107]
[67 106]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[76 97]
[77 96]
[78 95]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
