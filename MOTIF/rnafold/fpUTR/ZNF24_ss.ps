%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCAGCCCGCGCCGGGGGCUUCUGGGAAAAGGCUUGUGAACGGCGUUUCUGCGUCUGCCGUGGACAGCGAAGCUGCUGCGGUUCCUGAGCCGGAGGUUUGCGCCGGAGUGCCUGUGAAGAAAACGGGGUAUUGCCCUGAGGCUUAUAUUCUGCCUCAGUUGUCUUUUCUUGAAAUAUUAUAAAUCAGA\
) } def
/len { sequence length } bind def

/coor [
[78.73175812 295.70748901]
[72.31843567 309.26733398]
[65.90510559 322.82717896]
[59.49177933 336.38702393]
[53.07845306 349.94686890]
[46.66512680 363.50668335]
[50.26847839 375.90228271]
[44.63515472 387.06948853]
[33.27671814 391.25958252]
[26.64238930 404.71267700]
[20.00805855 418.16574097]
[13.37372780 431.61883545]
[11.79105663 448.49874878]
[-4.86731100 451.65075684]
[-12.50762939 436.51596069]
[-0.07936297 424.98452759]
[6.55496740 411.53143311]
[13.18929768 398.07833862]
[19.82362747 384.62524414]
[17.72720528 367.20883179]
[33.10528946 357.09338379]
[39.51861572 343.53353882]
[45.93194199 329.97369385]
[52.34526825 316.41384888]
[58.75859451 302.85400391]
[65.17192078 289.29415894]
[69.40861511 274.90493774]
[71.36650848 260.03326416]
[73.32440186 245.16157532]
[75.28228760 230.28990173]
[77.24018097 215.41822815]
[79.19807434 200.54655457]
[81.15596771 185.67489624]
[83.11386108 170.80322266]
[85.07175446 155.93154907]
[87.02964783 141.05987549]
[77.24681091 136.55729675]
[68.88719177 129.76803589]
[62.47369003 121.11679077]
[58.40746689 111.14468384]
[56.94286346 100.47547150]
[58.17149734 89.77651978]
[62.01651764 79.71704865]
[68.23741150 70.92628479]
[59.10598755 59.02598572]
[49.97456741 47.12568665]
[40.84314728 35.22538376]
[31.71172523 23.32508469]
[22.58030319 11.42478466]
[3.63152337 4.57771111]
[1.90365052 -14.67174721]
[-7.61224890 -26.26690292]
[-17.12814713 -37.86206055]
[-31.86389923 -43.62124634]
[-33.95698166 -58.36805344]
[-43.47288132 -69.96321106]
[-58.20862961 -75.72239685]
[-60.30171204 -90.46920013]
[-69.81761169 -102.06435394]
[-79.79972839 -113.26066589]
[-90.23136902 -124.03939056]
[-100.66300964 -134.81811523]
[-111.09465027 -145.59683228]
[-121.52629089 -156.37556458]
[-131.95793152 -167.15428162]
[-142.38957214 -177.93301392]
[-150.62042236 -181.93202209]
[-152.90191650 -188.97447205]
[-163.15579224 -199.92243958]
[-173.40968323 -210.87039185]
[-183.66357422 -221.81835938]
[-198.90408325 -229.24554443]
[-195.98614502 -245.94650269]
[-179.13011169 -247.76588440]
[-172.71560669 -232.07223511]
[-162.46171570 -221.12428284]
[-152.20783997 -210.17631531]
[-141.95394897 -199.22836304]
[-131.61083984 -188.36465454]
[-121.17920685 -177.58592224]
[-110.74756622 -166.80720520]
[-100.31592560 -156.02847290]
[-89.88428497 -145.24975586]
[-79.45264435 -134.47102356]
[-69.02100372 -123.69230652]
[-66.07813263 -138.40078735]
[-52.82146835 -145.41940308]
[-39.00252151 -139.58529663]
[-34.78640747 -125.19001007]
[-43.27446365 -112.82260132]
[-58.22245407 -111.58025360]
[-48.70655441 -99.98509979]
[-34.65144730 -95.05527496]
[-31.87772369 -79.47911072]
[-22.36182404 -67.88394928]
[-8.30671406 -62.95412827]
[-5.53299141 -47.37796021]
[3.98290801 -35.78280258]
[13.49880695 -24.18764687]
[23.73637390 -24.10194206]
[32.41404343 -18.26572037]
[36.52341843 -8.41070080]
[34.48060226 2.29336309]
[43.61202621 14.19366360]
[52.74344635 26.09396362]
[61.87486649 37.99426270]
[71.00628662 49.89456177]
[80.13771057 61.79486465]
[104.57103729 57.18354797]
[127.48017883 66.84909058]
[138.91809082 57.14474869]
[150.35598755 47.44040680]
[161.79389954 37.73606491]
[173.23181152 28.03172112]
[184.66972351 18.32737923]
[196.10762024 8.62303734]
[207.46575928 -1.17455566]
[218.74336243 -11.06474304]
[218.22135925 -26.69361115]
[227.90815735 -38.96959686]
[243.22996521 -42.09635544]
[256.95227051 -34.59752274]
[262.59582520 -20.01382446]
[257.49591064 -5.23123312]
[244.06057739 2.77036262]
[228.63354492 0.21285418]
[217.35594177 10.10304165]
[214.39515686 16.88795662]
[205.81196594 20.06094551]
[194.37405396 29.76528740]
[182.93615723 39.46963120]
[171.49824524 49.17397308]
[160.06033325 58.87831497]
[148.62242126 68.58265686]
[137.18452454 78.28699493]
[139.80886841 83.58668518]
[141.68231201 89.19596100]
[142.76953125 95.00903320]
[143.05001831 100.91624451]
[157.76179504 103.84259796]
[172.47357178 106.76895905]
[187.18534851 109.69531250]
[201.89712524 112.62166595]
[216.60890198 115.54801941]
[231.32069397 118.47437286]
[241.95880127 107.30145264]
[256.95407104 103.67579651]
[271.52157593 108.75434113]
[281.01284790 120.91653442]
[282.39929199 136.28147888]
[275.23846436 149.94625854]
[261.81539917 157.55050659]
[246.41331482 156.66772461]
[233.94697571 147.57962036]
[228.39433289 133.18615723]
[213.68255615 130.25979614]
[198.97077942 127.33344269]
[184.25898743 124.40708923]
[169.54721069 121.48073578]
[154.83543396 118.55438232]
[140.12365723 115.62802887]
[131.31524658 129.55500793]
[117.92056274 139.15350342]
[101.90132141 143.01776123]
[99.94342804 157.88943481]
[97.98553467 172.76110840]
[96.02764130 187.63278198]
[94.06974792 202.50445557]
[92.11185455 217.37612915]
[90.15396118 232.24780273]
[88.19606781 247.11947632]
[86.23817444 261.99114990]
[84.28028870 276.86282349]
[93.08467102 264.71856689]
[105.03778839 255.65640259]
[119.10828400 250.45819092]
[134.08210754 249.57249451]
[148.66729736 253.07569885]
[161.60537720 260.66555786]
[171.78002930 271.68719482]
[178.31335449 285.18963623]
[180.64164734 300.00781250]
[178.56399536 314.86325073]
[172.25968933 328.47412109]
[162.27265930 339.66604614]
[149.46463013 347.47335815]
[134.94070435 351.22244263]
[119.95405579 350.58981323]
[105.79776001 345.63003540]
[93.69327545 336.77105713]
[84.68499756 324.77728271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[9 19]
[10 18]
[11 17]
[12 16]
[27 173]
[28 172]
[29 171]
[30 170]
[31 169]
[32 168]
[33 167]
[34 166]
[35 165]
[36 164]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[49 103]
[51 99]
[52 98]
[53 97]
[55 95]
[56 94]
[58 92]
[59 91]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[68 78]
[69 77]
[70 76]
[71 75]
[110 135]
[111 134]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 127]
[118 126]
[139 161]
[140 160]
[141 159]
[142 158]
[143 157]
[144 156]
[145 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
