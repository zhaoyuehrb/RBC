%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCCGUUGGGGUGCGCAUCCGGGGACCUGCAGGUUACAAGCAGCAGAUCCCACCUUCAGUCCUGGCUCUGACAAGCCCUCCAGCUUCACGCCACCCGGGAUGGGAGAAAGCAGGUGUCGCGAGAGUUGGGCGCAAGACGCCUUGUAGGGAGUGUAACU\
) } def
/len { sequence length } bind def

/coor [
[113.41736603 249.38482666]
[99.34806061 254.58624268]
[84.67129517 251.48902893]
[73.90334320 241.04627991]
[70.35765839 226.47143555]
[63.70185852 239.91392517]
[57.04605865 253.35641479]
[50.39026260 266.79888916]
[43.73446274 280.24136353]
[47.48412323 295.84008789]
[37.51315689 308.40826416]
[21.47043610 308.30471802]
[11.66256618 295.60882568]
[15.61330414 280.05984497]
[30.29198074 273.58557129]
[36.94778061 260.14309692]
[43.60357666 246.70060730]
[50.25937271 233.25813293]
[56.91517258 219.81564331]
[62.38891602 205.85003662]
[66.63996124 191.46502686]
[70.89100647 177.08001709]
[75.00408173 162.65493774]
[78.97880554 148.19114685]
[82.95352936 133.72734070]
[69.72750092 122.62060547]
[62.82442856 106.78915405]
[47.82717896 106.50183105]
[32.82993317 106.21450806]
[17.83268547 105.92718506]
[3.88683724 113.39871979]
[-8.68989277 105.41905212]
[-23.68714142 105.13172913]
[-38.68438721 104.84440613]
[-53.68163681 104.55708313]
[-63.52645874 112.93736267]
[-76.04044342 112.36248016]
[-84.51364136 103.68846130]
[-99.50263214 103.11392212]
[-114.49163055 102.53938293]
[-130.55073547 107.97460175]
[-140.21914673 94.04771423]
[-129.51300049 80.90180206]
[-113.91709137 87.55039215]
[-98.92809296 88.12493134]
[-83.93910217 88.69947052]
[-68.90828705 79.68034363]
[-53.39431381 89.55983734]
[-38.39706421 89.84716034]
[-23.39981651 90.13448334]
[-8.40256977 90.42180634]
[4.47057438 82.92971039]
[18.12000847 90.92993164]
[33.11725616 91.21725464]
[48.11450195 91.50457764]
[63.11175156 91.79190063]
[69.71733093 77.39301300]
[81.64447021 66.96683502]
[96.79721069 62.34554672]
[98.51746368 47.44451523]
[100.23770905 32.54348373]
[101.95796204 17.64245224]
[95.85436249 3.04599261]
[105.00022125 -8.70996571]
[106.72047424 -23.61099625]
[108.44072723 -38.51202774]
[110.16097260 -53.41305923]
[111.88122559 -68.31409454]
[113.60147858 -83.21512604]
[115.32173157 -98.11615753]
[102.72384644 -109.36945343]
[99.33243561 -125.74823761]
[106.28652954 -140.77769470]
[120.67483521 -148.63601685]
[122.10934448 -163.56727600]
[112.32942963 -175.69125366]
[113.99692535 -190.81323242]
[125.61556244 -200.06216431]
[127.05007172 -214.99342346]
[128.48457336 -229.92466736]
[129.91908264 -244.85591125]
[119.67163086 -256.88775635]
[121.01664734 -272.63470459]
[133.15615845 -282.75439453]
[148.88800049 -281.24295044]
[158.87876892 -268.99713135]
[157.20109558 -253.28213501]
[144.85034180 -243.42140198]
[143.41583252 -228.49015808]
[141.98132324 -213.55891418]
[140.54681396 -198.62765503]
[150.19200134 -187.33581543]
[148.94992065 -172.17297363]
[137.04058838 -162.13276672]
[135.60607910 -147.20150757]
[146.40223694 -139.30384827]
[151.91963196 -126.99936676]
[150.61441040 -113.46890259]
[142.72187805 -102.26873016]
[130.22276306 -96.39590454]
[128.50251770 -81.49487305]
[126.78225708 -66.59384155]
[125.06200409 -51.69281006]
[123.34175873 -36.79177856]
[121.62150574 -21.89074516]
[119.90125275 -6.98971415]
[126.12789917 6.54092407]
[116.85899353 19.36270332]
[115.13874054 34.26373672]
[113.41849518 49.16476822]
[111.69824219 64.06579590]
[123.46102142 70.37406158]
[132.29704285 80.37815094]
[137.10401917 92.83007050]
[137.28227234 106.17642975]
[151.29965210 111.51615906]
[165.31704712 116.85589600]
[179.38493347 122.06112671]
[193.50204468 127.13138580]
[207.61914062 132.20162964]
[221.73623657 137.27188110]
[235.85334778 142.34214783]
[249.97044373 147.41239929]
[264.18206787 152.21130371]
[278.48303223 156.73712158]
[292.78396606 161.26292419]
[304.58578491 151.32710266]
[319.88873291 149.37176514]
[333.80969238 156.02085876]
[341.90652466 169.15267944]
[341.59558105 184.57691956]
[332.97607422 197.37173462]
[318.79846191 203.45437622]
[303.58673096 200.88388062]
[292.19494629 190.48048401]
[288.25814819 175.56387329]
[273.95721436 171.03805542]
[259.65625000 166.51225281]
[255.04280090 167.90234375]
[249.50759888 166.37580872]
[244.90019226 161.52949524]
[230.78309631 156.45924377]
[216.66598511 151.38899231]
[202.54888916 146.31874084]
[188.43179321 141.24848938]
[174.31468201 136.17822266]
[166.92210388 136.88014221]
[159.97731018 130.87329102]
[145.95993042 125.53355408]
[131.94253540 120.19381714]
[122.82698822 130.11717224]
[110.80928802 136.21153259]
[97.41732788 137.70205688]
[93.44260406 152.16586304]
[89.46788788 166.62966919]
[90.21042633 175.78176880]
[85.27602386 181.33105469]
[81.02497864 195.71607971]
[76.77393341 210.10108948]
[89.27903748 201.81723022]
[104.27507782 201.47257996]
[117.14754486 209.17320251]
[123.93538666 222.54948425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[20 159]
[21 158]
[22 157]
[23 155]
[24 154]
[25 153]
[27 56]
[28 55]
[29 54]
[30 53]
[32 51]
[33 50]
[34 49]
[35 48]
[38 46]
[39 45]
[40 44]
[59 111]
[60 110]
[61 109]
[62 108]
[64 106]
[65 105]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[74 95]
[75 94]
[78 91]
[79 90]
[80 89]
[81 88]
[115 150]
[116 149]
[117 148]
[118 146]
[119 145]
[120 144]
[121 143]
[122 142]
[123 141]
[124 138]
[125 137]
[126 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
