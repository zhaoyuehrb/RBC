%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUUCCUUCCGCUUUGCUUGUCUUUUGGCCCCGGCGACUCACCAUCGUCAGUGCGCAACCGUUCGCUAACUGAA\
) } def
/len { sequence length } bind def

/coor [
[129.97702026 162.04055786]
[116.85671234 166.80946350]
[103.04444885 168.83592224]
[89.10722351 168.03675842]
[75.61712646 164.44476318]
[63.12791824 158.20739746]
[52.15226364 149.58070374]
[43.14069366 138.91877747]
[36.46312332 126.65929413]
[32.39366531 113.30547333]
[31.09935570 99.40547943]
[32.63333130 85.52989197]
[36.93261719 72.24828339]
[23.94223785 64.74828339]
[10.95185661 57.24828339]
[-2.03852439 49.74828339]
[-18.69975090 54.62150574]
[-33.50914764 46.22262573]
[-37.71014404 30.06870842]
[-50.99198151 23.09786034]
[-64.27382660 16.12701416]
[-78.12354279 23.12450790]
[-93.43580627 20.61171341]
[-104.32273865 9.55484772]
[-106.59809875 -5.79449701]
[-99.38695526 -19.53418541]
[-85.46214294 -26.38102531]
[-70.17803192 -23.70226860]
[-59.41168594 -12.52795124]
[-57.30297470 2.84517312]
[-44.02113342 9.81602097]
[-30.73929405 16.78686905]
[-18.93348122 11.23650932]
[-5.90809917 13.62042713]
[3.43980956 23.27429771]
[5.46147585 36.75790405]
[18.45185661 44.25790405]
[31.44223785 51.75790405]
[44.43261719 59.25790405]
[55.37041473 47.50378418]
[68.73157501 38.60018158]
[83.79058838 33.03055191]
[99.72975922 31.09732056]
[115.68360901 32.90546417]
[130.78584290 38.35680389]
[144.21643066 47.15532684]
[155.24609375 58.82328796]
[163.27592468 72.72711945]
[167.86990356 88.11185455]
[168.77859497 104.14210510]
[165.95265198 119.94744110]
[179.75233459 125.82694244]
[193.55203247 131.70643616]
[207.35173035 137.58593750]
[221.15141296 143.46543884]
[235.66395569 137.80648804]
[249.57505798 143.96571350]
[254.88056946 157.83609009]
[268.68026733 163.71559143]
[281.92199707 155.62634277]
[297.38681030 156.89886475]
[309.12814331 167.04383850]
[312.63122559 182.16032410]
[306.54907227 196.43571472]
[293.22033691 204.38082886]
[277.77026367 202.94062805]
[266.13964844 192.66886902]
[262.80075073 177.51527405]
[249.00106812 171.63577271]
[235.32246399 177.41777039]
[221.24386597 171.65170288]
[215.27191162 157.26513672]
[201.47222900 151.38563538]
[187.67253113 145.50613403]
[173.87284851 139.62663269]
[160.07315063 133.74713135]
[152.03802490 145.16299438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 39]
[14 38]
[15 37]
[16 36]
[19 32]
[20 31]
[21 30]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
