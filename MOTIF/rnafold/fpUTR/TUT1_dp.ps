%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:06 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TUT1)
} def

/sequence { (\
GUUUCCGGAGGAGUGUGUCCGCGCAAUUGAACGACUUU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 14 0.006420970 ubox
1 16 0.004991300 ubox
1 22 0.055105291 ubox
1 24 0.535080452 ubox
1 27 0.078129083 ubox
1 32 0.371233161 ubox
1 35 0.202404661 ubox
2 8 0.004353951 ubox
2 9 0.009705067 ubox
2 10 0.008174668 ubox
2 11 0.005692862 ubox
2 12 0.007983707 ubox
2 13 0.024823508 ubox
2 15 0.004809865 ubox
2 21 0.034234232 ubox
2 23 0.531892304 ubox
2 26 0.085982181 ubox
2 30 0.020987046 ubox
2 31 0.359031596 ubox
2 34 0.200184398 ubox
3 7 0.004286388 ubox
3 8 0.009748002 ubox
3 9 0.011235879 ubox
3 10 0.007672968 ubox
3 11 0.008301868 ubox
3 12 0.045468736 ubox
3 13 0.125665984 ubox
3 25 0.082084743 ubox
3 26 0.095132474 ubox
3 29 0.024953550 ubox
3 30 0.340499300 ubox
3 31 0.149919844 ubox
3 33 0.155068334 ubox
3 34 0.018238976 ubox
4 8 0.010464939 ubox
4 9 0.007323033 ubox
4 10 0.007684672 ubox
4 11 0.046399293 ubox
4 12 0.248725084 ubox
4 25 0.108369162 ubox
4 29 0.307421571 ubox
4 30 0.207507324 ubox
4 33 0.015242886 ubox
4 34 0.082392383 ubox
5 10 0.047673876 ubox
5 11 0.262955462 ubox
5 29 0.228469159 ubox
5 33 0.074246185 ubox
6 10 0.261146361 ubox
6 15 0.005664172 ubox
6 17 0.004157863 ubox
6 21 0.746944601 ubox
6 23 0.240279077 ubox
6 29 0.061707175 ubox
6 33 0.421219405 ubox
7 14 0.005449710 ubox
7 16 0.004175517 ubox
7 20 0.757756969 ubox
7 22 0.241644204 ubox
7 28 0.063555243 ubox
7 32 0.429448668 ubox
7 36 0.007343258 ubox
7 37 0.004885894 ubox
7 38 0.106170207 ubox
8 19 0.757793426 ubox
8 27 0.054609661 ubox
8 28 0.108109984 ubox
8 35 0.007804711 ubox
8 37 0.144204040 ubox
8 38 0.020546727 ubox
9 18 0.754876219 ubox
9 27 0.110036518 ubox
9 28 0.077211125 ubox
9 36 0.148311166 ubox
9 37 0.021824701 ubox
9 38 0.008040029 ubox
10 19 0.024008895 ubox
10 20 0.285981474 ubox
10 27 0.079782332 ubox
10 28 0.072340524 ubox
10 35 0.148862419 ubox
10 36 0.021763221 ubox
10 37 0.007651525 ubox
10 38 0.095654524 ubox
11 18 0.019813590 ubox
11 19 0.286209018 ubox
11 27 0.067904790 ubox
11 28 0.335922230 ubox
11 35 0.021703487 ubox
11 36 0.004061046 ubox
11 37 0.130495362 ubox
11 38 0.006513711 ubox
12 18 0.282896060 ubox
12 27 0.330761096 ubox
12 28 0.100739972 ubox
12 36 0.135796906 ubox
12 37 0.006367111 ubox
13 22 0.095871048 ubox
13 24 0.282502736 ubox
13 27 0.103603901 ubox
13 32 0.145820442 ubox
13 35 0.138112040 ubox
13 36 0.005234155 ubox
13 37 0.004522958 ubox
14 21 0.095817711 ubox
14 23 0.282989053 ubox
14 25 0.433099620 ubox
14 26 0.076141495 ubox
14 29 0.004034968 ubox
14 31 0.124953813 ubox
14 33 0.033923229 ubox
14 34 0.133404395 ubox
15 20 0.093834799 ubox
15 22 0.283378297 ubox
15 24 0.465828278 ubox
15 27 0.026943246 ubox
15 28 0.009047650 ubox
15 32 0.054914923 ubox
15 35 0.026568590 ubox
16 21 0.271726980 ubox
16 23 0.465258549 ubox
16 25 0.052846480 ubox
16 26 0.021493204 ubox
16 29 0.016279382 ubox
16 31 0.054295722 ubox
16 33 0.108081617 ubox
16 34 0.022396506 ubox
17 22 0.456666507 ubox
17 24 0.060543101 ubox
17 27 0.023770892 ubox
17 28 0.023576415 ubox
17 32 0.123959194 ubox
17 35 0.052472424 ubox
18 23 0.057205096 ubox
18 26 0.023912233 ubox
18 30 0.051858184 ubox
18 31 0.119889975 ubox
18 34 0.052575236 ubox
19 29 0.053799050 ubox
19 33 0.049581253 ubox
20 29 0.119421179 ubox
20 33 0.020404884 ubox
21 28 0.092401230 ubox
21 32 0.026444971 ubox
22 29 0.077667140 ubox
22 33 0.213316500 ubox
23 28 0.053528850 ubox
23 32 0.215927762 ubox
25 37 0.014452543 ubox
25 38 0.017371415 ubox
26 36 0.015118958 ubox
26 37 0.020402502 ubox
27 34 0.033770955 ubox
28 33 0.034937776 ubox
29 37 0.031756504 ubox
29 38 0.053192447 ubox
30 36 0.033132531 ubox
30 37 0.059003656 ubox
30 38 0.017858631 ubox
31 36 0.049059470 ubox
31 37 0.018905377 ubox
1 24 0.9500000 lbox
2 23 0.9500000 lbox
6 21 0.9500000 lbox
7 20 0.9500000 lbox
8 19 0.9500000 lbox
9 18 0.9500000 lbox
showpage
end
%%EOF
