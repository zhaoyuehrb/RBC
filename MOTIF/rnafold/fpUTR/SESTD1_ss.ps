%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGCUCCGCCCCCAGCCCGCCUUCCUCCCGCCGCGCCCUCCGCCUCCGCCCGCACCUCGCUAGCGUUCCCCUGUCUUCCCCAACGCCCCGGAGCCGCCGGCCGCUAGCGUCAGCGCCAGCCAGAAUUAAGGAAGUUCACUGGAGUAAA\
) } def
/len { sequence length } bind def

/coor [
[80.35769653 395.04708862]
[68.01696777 385.64038086]
[63.59447479 370.76687622]
[68.79077148 356.14572144]
[81.60776520 347.39907837]
[81.91982269 332.40231323]
[82.23188019 317.40554810]
[82.54393768 302.40881348]
[82.85598755 287.41204834]
[68.53339386 282.95523071]
[60.28110504 295.48120117]
[62.09178543 311.42175293]
[50.65638733 322.67391968]
[34.74716949 320.60598755]
[26.56831932 306.80432129]
[32.39395142 291.85635376]
[47.75514221 287.22891235]
[56.00743103 274.70294189]
[47.13625336 257.10070801]
[46.98594284 237.85478210]
[55.17676163 220.95321655]
[69.64264679 209.71722412]
[87.13478851 206.15002441]
[89.61991119 191.35731506]
[92.10502625 176.56460571]
[94.59014893 161.77189636]
[97.07526398 146.97918701]
[99.56038666 132.18647766]
[82.07828522 124.35913086]
[73.10582733 108.78857422]
[74.86852264 92.09346771]
[85.32522583 80.50865173]
[80.42367554 66.33209229]
[75.52212524 52.15553665]
[70.62056732 37.97898102]
[64.82227325 30.83534050]
[65.76785278 23.45621300]
[61.16228867 9.18075371]
[47.22525787 -2.80836797]
[51.49834442 -19.80073929]
[46.59679413 -33.97729874]
[41.69524002 -48.15385437]
[36.79368973 -62.33041382]
[31.89213943 -76.50697327]
[24.12534142 -76.62577820]
[16.60792542 -78.50400543]
[9.73212814 -82.03466034]
[3.85465789 -87.02474213]
[-0.72181356 -93.20581818]
[-3.76423073 -100.24844360]
[-5.12101173 -107.77969360]
[-4.72958088 -115.40293121]
[-2.61919737 -122.71870422]
[1.09103262 -129.34564209]
[-8.89169407 -140.54141235]
[-24.76181412 -142.89062500]
[-32.69506073 -156.83491516]
[-26.60572624 -171.67739868]
[-11.16502571 -176.03221130]
[1.78225553 -166.55870056]
[2.30407190 -150.52413940]
[12.28679848 -139.32836914]
[15.39974308 -140.82287598]
[18.65137672 -141.98513794]
[22.00635147 -142.80252075]
[22.63032913 -157.78953552]
[23.25430679 -172.77655029]
[23.87828255 -187.76356506]
[24.50226021 -202.75057983]
[10.69787979 -209.11512756]
[0.38357550 -220.28131104]
[-4.86779642 -234.54635620]
[-4.25544024 -249.73495483]
[2.12726521 -263.53094482]
[13.30700302 -273.83056641]
[27.57894516 -279.06317139]
[42.76672363 -278.43081665]
[56.55430984 -272.02996826]
[66.83920288 -260.83670044]
[72.05302429 -246.55789185]
[71.40071106 -231.37095642]
[64.98173523 -217.59179688]
[53.77493668 -207.32164001]
[39.48927689 -202.12660217]
[38.86529922 -187.13958740]
[38.24132156 -172.15257263]
[37.61734390 -157.16555786]
[36.99336624 -142.17854309]
[56.99579620 -127.10792542]
[60.84527969 -102.14819336]
[46.06869888 -81.40852356]
[50.97024918 -67.23196411]
[55.87179947 -53.05540466]
[60.77334976 -38.87884903]
[65.67490387 -24.70228958]
[76.44387054 -19.10437202]
[80.62083435 -7.28185463]
[75.43775177 4.57518864]
[80.04331207 18.85064888]
[84.79712677 33.07742691]
[89.69867706 47.25398636]
[94.60022736 61.43054581]
[99.50177765 75.60710144]
[121.38265991 81.47117615]
[131.76184082 105.22962189]
[146.76101685 105.38565826]
[161.76020813 105.54169464]
[175.64012146 97.94837189]
[188.28622437 105.81764984]
[203.28540039 105.97368622]
[218.28459167 106.12972260]
[232.29777527 97.61132812]
[246.54957581 105.72415161]
[246.37899780 122.12241364]
[231.96148682 129.93698120]
[218.12855530 121.12890625]
[203.12936401 120.97286987]
[188.13018799 120.81683350]
[175.32312012 128.42132568]
[161.60417175 120.54088593]
[146.60498047 120.38484955]
[131.60580444 120.22881317]
[146.58061218 121.09754181]
[158.47987366 130.23033142]
[163.19149780 144.47113037]
[159.08729553 158.89872742]
[147.58555603 168.52732849]
[132.66098022 170.02957153]
[119.47106171 162.88630676]
[112.57389832 149.56605530]
[114.35308838 134.67160034]
[111.86797333 149.46430969]
[109.38285828 164.25701904]
[106.89773560 179.04972839]
[104.41262054 193.84243774]
[101.92749786 208.63513184]
[114.47465515 215.38208008]
[123.94369507 226.37937927]
[128.93243408 240.29011536]
[128.59913635 255.33071899]
[122.79782104 269.49945068]
[112.12277222 280.84271240]
[97.85274506 287.72412109]
[97.54068756 302.72085571]
[97.22863007 317.71762085]
[96.91657257 332.71435547]
[96.60452271 347.71112061]
[109.04656982 356.98339844]
[113.63014984 371.80804443]
[108.59277344 386.48471069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 18]
[11 17]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[28 131]
[32 103]
[33 102]
[34 101]
[35 100]
[37 99]
[38 98]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[54 62]
[55 61]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[105 122]
[106 121]
[107 120]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
