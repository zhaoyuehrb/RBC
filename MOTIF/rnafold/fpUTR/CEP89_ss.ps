%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUGAGCCAAUGGCCGACGUGGUUGCUGCAAAGUCCAUUGCGAAGAGAAAGCGUGAGGGCUGGGCCUGCGGCGGGCUUUAGGGAGUGGUCCCUGGCUGUGGAUAGAUCUGCUGAUGAGUCCAGGCCCCGGUCCAUUCUCCUCGCGCUGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[92.70491028 128.42733765]
[82.69725037 125.11319733]
[73.92942047 137.28385925]
[65.16159058 149.45452881]
[64.10386658 156.07493591]
[60.39067078 160.47233582]
[55.78754044 161.92912292]
[46.53675842 173.73687744]
[37.28597260 185.54463196]
[28.03519058 197.35238647]
[18.78440666 209.16014099]
[15.93140697 217.89939880]
[9.22652245 221.11003113]
[-0.26015779 232.72911072]
[-0.08455580 248.77120972]
[-12.60784531 258.79849243]
[-28.22323036 255.11892700]
[-34.95192337 240.55513000]
[-27.63224983 226.27920532]
[-11.87923241 223.24243164]
[-2.39255166 211.62335205]
[6.97665501 199.90934753]
[16.22743797 188.10159302]
[25.47822189 176.29385376]
[34.72900391 164.48609924]
[43.97978592 152.67834473]
[52.99092102 140.68670654]
[61.75875092 128.51603699]
[70.52658081 116.34536743]
[66.35331726 101.93759155]
[52.43803024 96.33717346]
[38.04238129 102.28721619]
[24.01008034 96.40936279]
[18.42633820 82.64864349]
[4.51104784 77.04822540]
[-9.40424156 71.44779968]
[-23.31953049 65.84738159]
[-37.23482132 60.24695587]
[-46.42280197 59.93801498]
[-51.37208939 54.39110565]
[-65.17178345 48.51160812]
[-78.97147369 42.63211060]
[-92.77116394 36.75260925]
[-106.57085419 30.87310982]
[-119.27308655 39.62849808]
[-134.69313049 40.10381699]
[-147.91049194 32.14738846]
[-154.70758057 18.29808617]
[-152.91545105 2.97516775]
[-143.10597229 -8.93187809]
[-128.40931702 -13.62355518]
[-113.51512909 -9.60276794]
[-103.17609406 1.84746647]
[-100.69136047 17.07341957]
[-86.89166260 22.95291710]
[-73.09197235 28.83241653]
[-59.29228210 34.71191788]
[-45.49259186 40.59141541]
[-31.63439751 46.33166504]
[-17.71910858 51.93208694]
[-3.80381942 57.53250885]
[10.11147022 63.13293076]
[24.02676010 68.73335266]
[37.58615494 62.67708206]
[51.77801514 68.15847778]
[58.03845215 82.42188263]
[71.95374298 88.02230072]
[97.54856873 73.05960846]
[119.67960358 86.96229553]
[134.16848755 83.08000946]
[148.65737915 79.19772339]
[163.14627075 75.31543732]
[177.63514709 71.43315125]
[192.12403870 67.55086517]
[206.61293030 63.66858292]
[208.85591125 54.09681702]
[214.42523193 46.06610870]
[222.50692749 40.67517090]
[231.94712830 38.64236069]
[241.41664124 40.21019745]
[249.59815979 45.11727905]
[255.36947632 52.64072037]
[270.12377930 49.93689346]
[284.87808228 47.23307037]
[299.60440063 44.38081741]
[314.30126953 41.38043213]
[328.99813843 38.38004684]
[343.69497681 35.37966156]
[358.39184570 32.37927628]
[373.08871460 29.37889099]
[385.06231689 19.03756714]
[399.08004761 24.07272148]
[413.77691650 21.07233620]
[422.50585938 8.17104340]
[437.45330811 5.33758831]
[449.69891357 13.73880577]
[464.39578247 10.73842049]
[479.09262085 7.73803473]
[493.78948975 4.73764944]
[501.62496948 -0.07065680]
[508.81237793 1.82796061]
[523.56665039 -0.87586498]
[538.32098389 -3.57969046]
[553.07525635 -6.28351593]
[567.82958984 -8.98734188]
[576.81652832 -21.71024323]
[591.81799316 -24.24212646]
[603.89196777 -15.59602165]
[618.64624023 -18.29984665]
[633.40057373 -21.00367165]
[645.53460693 -32.03529739]
[661.07080078 -26.78565788]
[664.02685547 -10.65512943]
[651.36181641 -0.23741902]
[636.10437012 -6.24937391]
[621.35009766 -3.54554820]
[606.59582520 -0.84172261]
[598.37237549 11.52401066]
[583.44793701 14.47625446]
[570.53338623 5.76695681]
[555.77911377 8.47078228]
[541.02478027 11.17460823]
[526.27050781 13.87843323]
[511.51620483 16.58226013]
[496.78988647 19.43450928]
[482.09301758 22.43489456]
[467.39614868 25.43527985]
[452.69931030 28.43566513]
[444.72659302 40.96448517]
[429.86462402 44.21666718]
[416.77728271 35.76919556]
[402.08044434 38.76958084]
[391.15802002 48.89629745]
[376.08908081 44.07575226]
[361.39224243 47.07613754]
[346.69537354 50.07652283]
[331.99850464 53.07690811]
[317.30166626 56.07729340]
[302.60479736 59.07767868]
[296.64599609 63.52250290]
[287.58190918 61.98736572]
[272.82760620 64.69119263]
[258.07330322 67.39501953]
[248.02029419 85.13578033]
[227.88887024 89.87502289]
[210.49520874 78.15747070]
[196.00631714 82.03975677]
[181.51744080 85.92204285]
[167.02854919 89.80432892]
[152.53965759 93.68661499]
[138.05078125 97.56889343]
[123.56188965 101.45117950]
[122.66748810 109.94942474]
[118.67350769 117.95220184]
[111.83939362 124.32329559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[13 21]
[14 20]
[30 67]
[31 66]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[69 152]
[70 151]
[71 150]
[72 149]
[73 148]
[74 147]
[75 146]
[82 143]
[83 142]
[84 141]
[85 139]
[86 138]
[87 137]
[88 136]
[89 135]
[90 134]
[92 132]
[93 131]
[96 128]
[97 127]
[98 126]
[99 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
