%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCCCGACAUUCCAUAUACAAGAUGGCCGCAGUCGGCAAGGAGAGACGUCGCUGAGGGGCUUGCCUGAAGCGAGGGGAUUCUAACAUUUUCAGAGAACCUUUUGGAAAGAACAAGCCUACUUCAAUAA\
) } def
/len { sequence length } bind def

/coor [
[-24.48428154 190.63723755]
[-39.72072220 183.08956909]
[-51.48052216 170.84234619]
[-65.02832031 177.28106689]
[-78.57612610 183.71978760]
[-91.88359070 190.64158630]
[-104.93350983 198.03750610]
[-117.98342896 205.43341064]
[-131.03335571 212.82933044]
[-144.08326721 220.22525024]
[-145.53097534 238.21592712]
[-157.32722473 251.66969299]
[-174.66931152 255.39132690]
[-190.66325378 248.09173584]
[-203.34358215 256.10482788]
[-216.02389526 264.11791992]
[-228.70420837 272.13101196]
[-230.62268066 287.65045166]
[-242.10317993 298.26800537]
[-257.72497559 298.97033691]
[-270.11193848 289.42584229]
[-273.41531372 274.14114380]
[-266.07534790 260.33322144]
[-251.55775452 254.52172852]
[-236.71730042 259.45068359]
[-224.03698730 251.43760681]
[-211.35665894 243.42451477]
[-198.67634583 235.41142273]
[-199.69024658 223.20231628]
[-195.35467529 211.66645813]
[-186.44612122 203.04644775]
[-174.63635254 199.04634094]
[-162.17893982 200.49504089]
[-151.47918701 207.17533875]
[-138.42927551 199.77941895]
[-125.37934875 192.38349915]
[-112.32942963 184.98757935]
[-99.27951050 177.59165955]
[-97.99914551 174.20538330]
[-94.95829010 171.30137634]
[-90.41684723 169.72654724]
[-85.01484680 170.17198181]
[-71.46704102 163.73326111]
[-57.91924286 157.29454041]
[-60.02675629 144.45121765]
[-58.70143509 131.49011230]
[-54.02840805 119.31374359]
[-46.32617950 108.77184296]
[-36.12489700 100.60207367]
[-24.12988853 95.37841034]
[-11.17288494 93.47082520]
[1.84564459 95.01906586]
[14.01907730 99.92247009]
[24.49777031 107.84648132]
[32.54836655 118.24543762]
[46.52395248 112.79722595]
[60.49953842 107.34901428]
[74.47512054 101.90081024]
[88.45070648 96.45259857]
[102.29163361 90.67082977]
[115.98992920 84.55882263]
[129.68823242 78.44682312]
[143.38653564 72.33482361]
[157.08483887 66.22282410]
[170.78314209 60.11082077]
[181.18481445 44.97177124]
[198.52845764 47.35430908]
[212.07624817 40.91558838]
[213.60803223 27.16079903]
[221.69322205 16.06229401]
[234.11793518 10.47627926]
[247.56958008 11.77406216]
[258.51983643 19.50711250]
[272.21813965 13.39511108]
[285.91644287 7.28310966]
[299.61474609 1.17110765]
[313.31301880 -4.94089413]
[327.01132202 -11.05289650]
[340.70962524 -17.16489792]
[347.35189819 -23.58273125]
[354.81045532 -23.25483322]
[368.65139771 -29.03660202]
[382.49230957 -34.81837082]
[396.33325195 -40.60013962]
[397.60913086 -55.85237503]
[405.83670044 -68.75839233]
[419.12536621 -76.35249329]
[434.42144775 -76.88960266]
[448.21002197 -70.24629211]
[457.32260132 -57.94915009]
[459.66516113 -42.82397079]
[454.69940186 -28.34641075]
[443.56640625 -17.84330368]
[428.82446289 -13.72818851]
[413.86120605 -16.94668770]
[402.11502075 -26.75921440]
[388.27407837 -20.97744751]
[374.43316650 -15.19567871]
[360.59222412 -9.41390991]
[346.82162476 -3.46659756]
[333.12332153 2.64540434]
[319.42504883 8.75740623]
[305.72674561 14.86940765]
[292.02844238 20.98140907]
[278.33013916 27.09341240]
[264.63183594 33.20541382]
[261.77679443 49.32467270]
[249.78106689 60.70589828]
[233.20544434 62.75073242]
[218.51496887 54.46338654]
[204.96717834 60.90210724]
[200.58053589 72.24194336]
[189.26324463 77.69116974]
[176.89514160 73.80912018]
[163.19683838 79.92111969]
[149.49853516 86.03312683]
[135.80023193 92.14512634]
[122.10193634 98.25712585]
[108.40363312 104.36912537]
[105.41524506 108.81048584]
[100.12194061 111.21105957]
[93.89891815 110.42818451]
[79.92333221 115.87639618]
[65.94774628 121.32460022]
[51.97216034 126.77281189]
[37.99657440 132.22102356]
[38.74822617 149.35427856]
[33.65594482 165.70498657]
[23.33825684 179.34274292]
[9.02960587 188.66325378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[5 42]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[14 28]
[15 27]
[16 26]
[17 25]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[60 119]
[61 118]
[62 117]
[63 116]
[64 115]
[65 114]
[67 111]
[68 110]
[73 106]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[81 99]
[82 98]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
