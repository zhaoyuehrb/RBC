%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGACCCGCCCCGCGGCGCAUUGUGGGAUCUGUCGGCUUGUCAGGUGGUGGAGGAAAAGGCGCUCCGUC\
) } def
/len { sequence length } bind def

/coor [
[159.43217468 180.68464661]
[149.79035950 169.19398499]
[140.14854431 157.70330811]
[130.50672913 146.21264648]
[123.57901764 143.01519775]
[120.70824432 134.00398254]
[111.57682800 122.10369110]
[102.44540405 110.20338440]
[98.04065704 112.65802002]
[92.19282532 112.95452118]
[86.00621033 110.41077423]
[80.86019135 104.90393829]
[66.21575165 101.65734863]
[51.57130814 98.41075134]
[36.92686844 95.16415405]
[22.28242874 91.91756439]
[7.63798809 88.67096710]
[-5.55487299 97.37292480]
[-21.01984024 94.11557007]
[-29.58182335 80.83144379]
[-26.16114807 65.40177917]
[-12.78724289 56.98072433]
[2.60539341 60.56433868]
[10.88458252 74.02652740]
[25.52902222 77.27312469]
[40.17346191 80.51971436]
[54.81790161 83.76631165]
[69.46234131 87.01290894]
[84.10678101 90.25949860]
[96.93045807 82.47789764]
[100.81274414 67.98901367]
[104.69503021 53.50012589]
[108.57731628 39.01123810]
[112.45960236 24.52235222]
[108.55769348 9.18984795]
[119.32540894 -1.10119164]
[123.20769501 -15.59007931]
[121.46685028 -32.45441437]
[137.19020081 -38.79573822]
[147.63636780 -25.44231224]
[137.69657898 -11.70779324]
[133.81430054 2.78109407]
[137.99389648 17.07725525]
[126.94849396 28.40463829]
[123.06620789 42.89352417]
[119.18392181 57.38241196]
[115.30163574 71.87129974]
[111.41934967 86.36018372]
[114.34570312 101.07196808]
[123.47712708 112.97226715]
[132.60855103 124.87256622]
[141.99739075 136.57083130]
[151.63920593 148.06149292]
[161.28102112 159.55216980]
[170.92283630 171.04283142]
[179.92970276 170.13262939]
[188.40721130 173.02192688]
[194.84347534 179.11074829]
[198.12602234 187.23637390]
[197.73373413 195.89471436]
[193.81784058 203.51870728]
[201.31784058 216.50909424]
[208.81784058 229.49946594]
[216.31784058 242.48985291]
[229.47369385 253.18377686]
[222.83959961 268.78585815]
[206.01074219 266.73010254]
[203.32746887 249.98985291]
[195.82746887 236.99946594]
[188.32746887 224.00909424]
[180.82746887 211.01870728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[6 51]
[7 50]
[8 49]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[36 42]
[37 41]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
