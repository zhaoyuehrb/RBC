%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCGGGCCCGGGUCGGCGCGCCCAGCCUGCCAGCCGCGCUGCUGCUGCUCCUCCUGCUGUGGGACCGCUGACCGCGCGGCUGCUCCGCUCUCCCCGCUCCAAGCGCCGAUCUGGGCACCCGCCACCAGC\
) } def
/len { sequence length } bind def

/coor [
[113.55459595 495.74926758]
[109.18062592 481.23568726]
[110.03748322 466.10156250]
[116.02169037 452.17440796]
[126.41062164 441.13604736]
[139.94976807 434.31936646]
[138.16899109 419.42544556]
[136.21109009 404.55377197]
[134.07637024 389.70645142]
[131.94165039 374.85913086]
[129.80693054 360.01181030]
[127.67220306 345.16448975]
[125.53748322 330.31713867]
[123.40276337 315.46981812]
[121.26803589 300.62249756]
[119.13331604 285.77517700]
[116.99859619 270.92785645]
[114.86386871 256.08053589]
[112.72914886 241.23323059]
[110.59442139 226.38589478]
[108.45970154 211.53857422]
[94.58134460 206.12962341]
[85.21145630 194.42231750]
[82.94462585 179.49824524]
[88.48865509 165.35043335]
[100.44786072 155.81498718]
[98.31314087 140.96766663]
[96.17841339 126.12034607]
[78.36318207 115.12366486]
[74.15670013 94.61475372]
[86.20468903 77.49296570]
[82.32240295 63.00408173]
[77.75510406 48.71633148]
[72.51314545 34.66208649]
[67.27117920 20.60783958]
[62.02921677 6.55359411]
[56.78725433 -7.50065136]
[51.54529190 -21.55489731]
[46.30332947 -35.60914230]
[41.06136703 -49.66338730]
[35.81940460 -63.71763611]
[19.52964592 -66.26878357]
[6.80395937 -76.60536957]
[1.03404319 -91.85126495]
[3.69663262 -107.83871460]
[13.97688198 -120.24759674]
[8.40194511 -134.17311096]
[-4.56018305 -138.04211426]
[-12.78250313 -148.53671265]
[-13.41851521 -161.65815735]
[-6.45952415 -172.56958008]
[-11.70148659 -186.62382507]
[-16.94344902 -200.67807007]
[-22.18541145 -214.73231506]
[-37.17037201 -218.76103210]
[-46.89923096 -230.84941101]
[-47.63104248 -246.34922791]
[-39.08441162 -259.30047607]
[-24.54569054 -264.72314453]
[-9.60531712 -260.53207397]
[-0.00816787 -248.33888245]
[0.55545777 -232.83204651]
[-8.13116646 -219.97427368]
[-2.88920355 -205.92002869]
[2.35275912 -191.86578369]
[7.59472179 -177.81153870]
[23.14735794 -171.52861023]
[29.51274872 -155.64646912]
[22.32746315 -139.74806213]
[27.90240097 -125.82253265]
[41.57020569 -124.76076508]
[53.49390793 -117.86254120]
[61.30218887 -106.43347931]
[63.41363907 -92.68662262]
[59.35674667 -79.31403351]
[49.87364960 -68.95959473]
[55.11561203 -54.90535355]
[60.35757446 -40.85110474]
[65.59954071 -26.79685974]
[70.84149933 -12.74261379]
[76.08346558 1.31163168]
[81.32542419 15.36587715]
[86.56739044 29.42012405]
[91.80934906 43.47436905]
[94.40900421 44.75122833]
[96.63280487 47.18525696]
[98.01786041 50.62850189]
[98.16748810 54.76127625]
[96.81128693 59.12179565]
[100.69357300 73.61068726]
[109.34471893 75.31086731]
[116.95351410 79.76499176]
[122.67122650 86.47622681]
[125.86009216 94.69596100]
[126.16439819 103.50733948]
[123.55020142 111.92748260]
[118.30911255 119.01718903]
[111.02573395 123.98562622]
[113.16046143 138.83294678]
[115.29518127 153.68026733]
[129.45639038 159.46015930]
[138.76174927 171.47296143]
[140.79135132 186.43113708]
[135.09933472 200.30401611]
[123.30702209 209.40385437]
[125.44174957 224.25117493]
[127.57646942 239.09849548]
[129.71119690 253.94581604]
[131.84591675 268.79315186]
[133.98063660 283.64047241]
[136.11535645 298.48779297]
[138.25007629 313.33511353]
[140.38481140 328.18243408]
[142.51953125 343.02975464]
[144.65425110 357.87707520]
[146.78897095 372.72439575]
[148.92369080 387.57171631]
[151.05841064 402.41903687]
[155.41534424 410.56079102]
[153.06291199 417.64465332]
[154.84368896 432.53857422]
[169.60829163 435.97113037]
[182.30677795 444.24905396]
[191.40574646 456.37280273]
[195.80644226 470.87829590]
[194.97747803 486.01397705]
[189.01895142 499.95211792]
[178.65037537 511.00961304]
[165.12380981 517.85125732]
[150.07266235 519.65081787]
[135.31440735 516.19104004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 121]
[7 120]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[26 100]
[27 99]
[28 98]
[31 90]
[32 89]
[33 84]
[34 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[46 70]
[47 69]
[51 66]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
