%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUACCGUGGGGCGGAGCGGAGCGCCAGGCUCGCUGUACUCGCGCACCCACCAUGGCCUCCCGCAGCGCGGGCACCCUACUGACCGAGUUCAAUGCCGCCUACGUGCCCCCUGGACUCAUGCCCGG\
) } def
/len { sequence length } bind def

/coor [
[114.51854706 272.25845337]
[103.05926514 265.28970337]
[94.31187439 255.09277344]
[89.15007019 242.66435242]
[88.09616852 229.22499084]
[91.26830292 216.09934998]
[98.36735535 204.58554077]
[108.70513153 195.82684326]
[103.34666443 181.81660461]
[97.98820496 167.80636597]
[92.62973785 153.79612732]
[87.27127838 139.78588867]
[81.91281128 125.77564240]
[72.03980255 114.48300171]
[58.87064362 107.30155182]
[45.70148087 100.12010956]
[30.71130943 104.35478973]
[17.45820999 96.88417816]
[13.51346874 82.56724548]
[0.34430739 75.38579559]
[-12.82485390 68.20435333]
[-25.99401665 61.02290344]
[-39.24964523 54.00234222]
[-52.58977890 47.14370728]
[-61.75648117 45.97880554]
[-66.16822052 39.95217514]
[-79.33737946 32.77072906]
[-92.50654602 25.58928108]
[-105.67570496 18.40783501]
[-119.25743103 12.04098415]
[-133.20138550 6.51232386]
[-147.56619263 12.53645039]
[-161.62858582 6.73096561]
[-167.28314209 -7.00080585]
[-181.22709656 -12.52946663]
[-195.17105103 -18.05812645]
[-208.84335327 -10.46851444]
[-224.18554688 -13.49365425]
[-233.95349121 -25.70516968]
[-233.53509521 -41.33715439]
[-223.12788391 -53.00866318]
[-207.64584351 -55.20877075]
[-194.39912415 -46.89864731]
[-189.64239502 -32.00208282]
[-175.69844055 -26.47342300]
[-161.75448608 -20.94476128]
[-148.22647095 -27.07080650]
[-134.00656128 -21.66259575]
[-127.67272186 -7.43163204]
[-113.72876740 -1.90297163]
[-116.60997009 -16.62366104]
[-107.08878326 -28.21447563]
[-92.08881378 -28.24681282]
[-82.51773834 -16.69715881]
[-85.33544922 -1.96418333]
[-98.49425507 5.23867321]
[-85.32509613 12.42012024]
[-72.15593719 19.60156631]
[-58.98677444 26.78301430]
[-45.73114395 33.80357361]
[-32.39101028 40.66220856]
[-24.92680168 40.92542267]
[-18.81256866 47.85374069]
[-5.64340734 55.03519058]
[7.52575445 62.21663666]
[20.69491577 69.39808655]
[34.86687088 64.96060181]
[48.32457733 72.05600739]
[52.88292694 86.95094299]
[66.05208588 94.13239288]
[79.22125244 101.31384277]
[90.57788086 83.88878632]
[108.98559570 86.15190887]
[121.97598267 78.65190887]
[134.96635437 71.15190887]
[147.95674133 63.65190887]
[148.05941772 48.35691833]
[155.75326538 35.25342178]
[168.88563538 27.80981636]
[183.88027954 27.93807030]
[196.71102905 35.50360489]
[209.70141602 28.00360489]
[222.69180298 20.50360489]
[228.21621704 5.44171858]
[243.48141479 0.50684887]
[256.77725220 9.48460579]
[257.90429688 25.48802185]
[245.99798584 36.24064636]
[230.19180298 33.49398422]
[217.20141602 40.99398422]
[204.21102905 48.49398422]
[204.34759521 63.38851166]
[196.96134949 76.43838501]
[183.94880676 84.08955383]
[168.75393677 84.20085907]
[155.45674133 76.64228821]
[142.46635437 84.14228821]
[129.47598267 91.64228821]
[116.48559570 99.14228821]
[112.20606995 114.11946869]
[95.92305756 120.41717529]
[101.28151703 134.42741394]
[106.63998413 148.43765259]
[111.99844360 162.44790649]
[117.35691071 176.45814514]
[122.71537018 190.46838379]
[139.49530029 190.64549255]
[154.90394592 197.19897461]
[166.61953735 209.11109924]
[172.88835144 224.55902100]
[172.78720093 241.19364929]
[166.35920715 256.49688721]
[154.60317993 268.16287231]
[160.63742065 281.89559937]
[166.67164612 295.62832642]
[172.70588684 309.36108398]
[187.89604187 312.52941895]
[198.29788208 324.04385376]
[199.91165161 339.47677612]
[192.11685181 352.89395142]
[177.91072083 359.13619995]
[162.75581360 355.80322266]
[152.47950745 344.17666626]
[151.03324890 328.72714233]
[158.97314453 315.39529419]
[152.93891907 301.66256714]
[146.90467834 287.92984009]
[140.87045288 274.19711304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[14 71]
[15 70]
[16 69]
[19 66]
[20 65]
[21 64]
[22 63]
[23 61]
[24 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 50]
[31 49]
[34 46]
[35 45]
[36 44]
[73 99]
[74 98]
[75 97]
[76 96]
[81 91]
[82 90]
[83 89]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
