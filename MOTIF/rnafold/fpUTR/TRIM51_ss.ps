%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGGAAUGAGCUCCUGAUCUUGGGGAGUACUUAAAAGAAUUUUUUCUUGGAAGAAUUACUGCAGGAAACAUUCAUAGAACCUUGGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[137.78192139 396.56872559]
[148.71960449 385.56204224]
[146.19808960 370.77551270]
[143.67657471 355.98895264]
[141.15505981 341.20239258]
[138.63354492 326.41586304]
[123.95572662 312.07601929]
[130.85864258 291.93954468]
[126.85414124 277.48394775]
[122.84963226 263.02838135]
[118.84513092 248.57278442]
[114.84062195 234.11720276]
[112.23445129 232.62580872]
[110.12965393 229.90463257]
[109.04155731 226.16651917]
[109.38721466 221.82319641]
[111.41345215 217.44041443]
[109.39278412 202.57714844]
[97.90384674 189.42947388]
[104.74420166 172.43678284]
[102.22268677 157.65023804]
[99.70117188 142.86369324]
[97.17965698 128.07714844]
[94.65814209 113.29059601]
[85.87989044 102.40786743]
[90.55530548 89.23091888]
[88.03379059 74.44436646]
[85.26290131 59.70251846]
[82.24342346 45.00956726]
[79.22394562 30.31661987]
[68.86707306 18.35644531]
[73.88401031 4.33219385]
[70.86453247 -10.36075497]
[67.84505463 -25.05370522]
[54.93243408 -33.76587677]
[52.07955933 -48.70962906]
[60.46486282 -60.96615219]
[57.44538498 -75.65910339]
[54.42590714 -90.35205078]
[51.40642929 -105.04499817]
[48.38695145 -119.73794556]
[37.09775162 -131.63273621]
[42.01315308 -147.27789307]
[58.07661057 -150.57902527]
[68.76341248 -138.14019775]
[63.07989883 -122.75742340]
[66.09938049 -108.06447601]
[69.11885834 -93.37152863]
[72.13833618 -78.67858124]
[75.15781403 -63.98563004]
[87.69697571 -56.02919388]
[90.96846771 -41.17146683]
[82.53800201 -28.07318306]
[85.55747986 -13.38023281]
[88.57695770 1.31271601]
[98.71785736 12.22195244]
[93.91689301 27.29714203]
[96.93637085 41.99008942]
[99.95584869 56.68304062]
[104.47898102 62.72484589]
[102.82034302 71.92285156]
[105.34185791 86.70940399]
[114.12010956 97.59213257]
[109.44469452 110.76908112]
[111.96620941 125.55563354]
[114.48771667 140.34217834]
[117.00923157 155.12872314]
[119.53074646 169.91526794]
[129.67115784 178.10208130]
[131.37294006 190.61601257]
[124.25605774 200.55647278]
[126.27672577 215.41975403]
[129.29620361 230.11270142]
[133.30072021 244.56828308]
[137.30522156 259.02386475]
[141.30972290 273.47946167]
[145.31423950 287.93502808]
[154.40365601 291.59045410]
[160.60275269 298.99545288]
[162.54519653 308.31271362]
[159.90014648 317.30990601]
[153.42008972 323.89434814]
[155.94160461 338.68090820]
[158.46311951 353.46743774]
[160.98463440 368.25399780]
[163.50614929 383.04052734]
[177.47346497 389.80023193]
[184.77033997 403.49456787]
[182.59094238 418.85784912]
[171.77331543 429.98251343]
[156.47705078 432.59097290]
[142.58387756 425.68014526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[6 82]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[17 72]
[18 71]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[26 62]
[27 61]
[28 59]
[29 58]
[30 57]
[32 55]
[33 54]
[34 53]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
