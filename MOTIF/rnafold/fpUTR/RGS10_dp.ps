%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RGS10)
} def

/sequence { (\
CUCCUCGCCUUCCUCCGGCUCAGCCGCCGCGCCGCCGGGCUGCUCCUUCUUCCUCCUCGGGCGCCCGCGGCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 23 0.015142202 ubox
2 22 0.015035980 ubox
4 23 0.039857775 ubox
5 18 0.005461903 ubox
5 22 0.039227576 ubox
6 17 0.009439803 ubox
6 26 0.006353034 ubox
6 29 0.023065024 ubox
6 31 0.008051207 ubox
6 72 0.010771321 ubox
7 16 0.020176123 ubox
7 19 0.164216531 ubox
7 24 0.007707026 ubox
7 25 0.006122482 ubox
7 27 0.022845954 ubox
7 28 0.023461133 ubox
7 30 0.055888666 ubox
7 71 0.008906190 ubox
8 18 0.164414941 ubox
8 23 0.007727711 ubox
8 26 0.021414332 ubox
8 29 0.054261904 ubox
8 70 0.008752611 ubox
9 17 0.164303931 ubox
9 23 0.006948849 ubox
9 69 0.008435321 ubox
10 22 0.007020380 ubox
12 18 0.009976138 ubox
13 17 0.009940847 ubox
16 26 0.296056334 ubox
16 29 0.903184243 ubox
17 25 0.307457692 ubox
17 28 0.936965599 ubox
17 33 0.003226100 ubox
18 24 0.307483341 ubox
18 27 0.937064833 ubox
18 30 0.003481515 ubox
18 32 0.003227267 ubox
19 23 0.305249906 ubox
19 26 0.936085970 ubox
19 29 0.003523943 ubox
19 31 0.003224735 ubox
23 30 0.068293570 ubox
23 71 0.022940403 ubox
24 29 0.068736484 ubox
24 70 0.022971049 ubox
25 69 0.022970689 ubox
25 72 0.018744569 ubox
26 68 0.022968310 ubox
26 71 0.020384773 ubox
27 67 0.022841784 ubox
27 70 0.020394774 ubox
28 69 0.020389626 ubox
28 72 0.006015296 ubox
29 64 0.022506520 ubox
29 68 0.020364311 ubox
29 71 0.003683020 ubox
30 63 0.022538303 ubox
30 67 0.019870958 ubox
30 72 0.921083919 ubox
31 62 0.022526554 ubox
31 64 0.003576547 ubox
31 66 0.016769639 ubox
31 71 0.999267608 ubox
32 60 0.003406549 ubox
32 61 0.022293125 ubox
32 63 0.003402626 ubox
32 70 0.999472449 ubox
33 59 0.004604074 ubox
33 60 0.019696605 ubox
33 63 0.016057910 ubox
33 69 0.999462788 ubox
33 72 0.003503213 ubox
34 58 0.005510489 ubox
34 62 0.016228778 ubox
34 68 0.999262448 ubox
34 71 0.003753044 ubox
35 60 0.012314861 ubox
35 61 0.014869075 ubox
35 67 0.706651470 ubox
35 70 0.003751955 ubox
36 59 0.017116683 ubox
36 60 0.013344711 ubox
36 67 0.706563236 ubox
36 69 0.003526262 ubox
37 46 0.003164336 ubox
37 53 0.003512862 ubox
37 54 0.005304720 ubox
37 55 0.005174120 ubox
37 56 0.014253234 ubox
37 57 0.008019926 ubox
37 58 0.018358439 ubox
37 65 0.008694578 ubox
37 66 0.999259526 ubox
38 45 0.003168943 ubox
38 52 0.003518999 ubox
38 53 0.005983223 ubox
38 54 0.004696748 ubox
38 55 0.014249687 ubox
38 56 0.011685746 ubox
38 57 0.016503471 ubox
38 58 0.008180066 ubox
38 64 0.007353186 ubox
38 65 0.999551941 ubox
38 66 0.004376858 ubox
39 52 0.005959506 ubox
39 53 0.005819369 ubox
39 54 0.010857577 ubox
39 55 0.011612239 ubox
39 56 0.016454948 ubox
39 57 0.006243597 ubox
39 64 0.999554922 ubox
39 65 0.004383333 ubox
40 63 0.977097632 ubox
41 63 0.208738637 ubox
42 62 0.997033697 ubox
43 60 0.033890679 ubox
43 61 0.995204214 ubox
44 59 0.031052727 ubox
44 60 0.807522862 ubox
44 61 0.081447142 ubox
45 59 0.799254586 ubox
45 60 0.583808464 ubox
45 61 0.021108836 ubox
46 59 0.585520583 ubox
46 60 0.025073720 ubox
47 59 0.024809180 ubox
48 59 0.005322565 ubox
48 60 0.009358018 ubox
49 59 0.018299477 ubox
49 60 0.012197324 ubox
50 59 0.013186392 ubox
51 60 0.007411803 ubox
51 61 0.009837970 ubox
52 59 0.014330105 ubox
52 60 0.044382128 ubox
52 61 0.010234994 ubox
53 59 0.045763980 ubox
53 60 0.011997271 ubox
54 59 0.011197207 ubox
54 60 0.003291293 ubox
55 59 0.005261500 ubox
55 60 0.010334165 ubox
16 29 0.9500000 lbox
17 28 0.9500000 lbox
18 27 0.9500000 lbox
19 26 0.9500000 lbox
30 72 0.9500000 lbox
31 71 0.9500000 lbox
32 70 0.9500000 lbox
33 69 0.9500000 lbox
34 68 0.9500000 lbox
35 67 0.9500000 lbox
37 66 0.9500000 lbox
38 65 0.9500000 lbox
39 64 0.9500000 lbox
40 63 0.9500000 lbox
42 62 0.9500000 lbox
43 61 0.9500000 lbox
44 60 0.9500000 lbox
45 59 0.9500000 lbox
showpage
end
%%EOF
