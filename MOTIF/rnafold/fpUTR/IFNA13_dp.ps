%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:44 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (IFNA13)
} def

/sequence { (\
AGAGAACCUAGAGCCCAAGGUUCAGAGUCACCCAUCUCAGCAAGCCCAGAAGCAUCUGCAAUAUCU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.023858339 ubox
1 37 0.028625636 ubox
1 57 0.067814725 ubox
1 66 0.286418603 ubox
2 8 0.025253428 ubox
2 23 0.023192456 ubox
2 29 0.043602773 ubox
2 36 0.032901097 ubox
2 38 0.377001665 ubox
2 56 0.071781619 ubox
2 65 0.336043252 ubox
3 9 0.013270901 ubox
3 22 0.021023839 ubox
3 28 0.043044884 ubox
3 35 0.032764968 ubox
3 37 0.377260449 ubox
3 55 0.067171221 ubox
3 57 0.015139224 ubox
3 64 0.314813526 ubox
3 66 0.056448475 ubox
4 8 0.013617860 ubox
4 21 0.007653481 ubox
4 22 0.004389583 ubox
4 23 0.906663932 ubox
4 29 0.090530353 ubox
4 36 0.376910113 ubox
4 38 0.008207558 ubox
4 56 0.015264470 ubox
4 65 0.060525008 ubox
5 21 0.003826666 ubox
5 22 0.907568893 ubox
5 28 0.082312502 ubox
5 35 0.375018835 ubox
5 37 0.008003401 ubox
5 55 0.014274236 ubox
5 64 0.056302051 ubox
6 21 0.908155411 ubox
6 28 0.372928960 ubox
7 20 0.908684060 ubox
7 27 0.376458511 ubox
8 19 0.908661036 ubox
8 25 0.378664726 ubox
8 27 0.054181968 ubox
8 40 0.003675734 ubox
8 44 0.003586366 ubox
8 52 0.005142763 ubox
9 18 0.902056595 ubox
9 24 0.376737523 ubox
9 26 0.058162153 ubox
9 39 0.003680611 ubox
9 43 0.003510237 ubox
9 51 0.004970388 ubox
9 58 0.036608495 ubox
9 63 0.007809412 ubox
10 57 0.039348305 ubox
10 62 0.007632760 ubox
11 22 0.003984329 ubox
11 23 0.415143599 ubox
11 29 0.003644635 ubox
11 38 0.003485674 ubox
11 56 0.039541357 ubox
12 21 0.003572965 ubox
12 22 0.415152949 ubox
12 28 0.003463592 ubox
12 37 0.003487148 ubox
12 55 0.039371020 ubox
13 21 0.415276098 ubox
13 36 0.003473398 ubox
13 53 0.039129889 ubox
14 20 0.415482390 ubox
14 52 0.039129779 ubox
15 19 0.412460900 ubox
19 32 0.004071717 ubox
19 46 0.039348362 ubox
19 47 0.005876428 ubox
20 31 0.004083451 ubox
20 41 0.004029293 ubox
20 45 0.039537355 ubox
20 46 0.004909602 ubox
21 30 0.004031350 ubox
21 40 0.004209168 ubox
21 43 0.003180546 ubox
21 44 0.039391100 ubox
22 39 0.004812171 ubox
22 42 0.004027030 ubox
22 43 0.035370331 ubox
24 37 0.207184006 ubox
24 57 0.007308269 ubox
24 66 0.017241162 ubox
25 36 0.221803337 ubox
25 38 0.876460355 ubox
25 56 0.007551701 ubox
25 65 0.018364045 ubox
26 35 0.221116708 ubox
26 37 0.877464434 ubox
26 55 0.007453363 ubox
26 64 0.017849902 ubox
26 66 0.003869824 ubox
27 35 0.013417023 ubox
27 36 0.877213233 ubox
27 41 0.012039669 ubox
27 45 0.005573165 ubox
27 53 0.005917188 ubox
27 59 0.003205952 ubox
27 65 0.004224022 ubox
28 34 0.062291675 ubox
28 40 0.011738497 ubox
28 44 0.005434929 ubox
28 52 0.005726279 ubox
34 62 0.021437830 ubox
34 64 0.008624018 ubox
35 50 0.009500156 ubox
35 61 0.022432352 ubox
35 63 0.008927660 ubox
36 44 0.010018427 ubox
36 49 0.010112527 ubox
37 43 0.009864931 ubox
37 48 0.009632558 ubox
37 50 0.006681528 ubox
38 49 0.007470845 ubox
38 58 0.057694920 ubox
39 57 0.064036515 ubox
39 66 0.113744274 ubox
40 53 0.076733730 ubox
40 56 0.064310878 ubox
40 59 0.853250458 ubox
40 65 0.125709420 ubox
41 52 0.076770915 ubox
41 58 0.853834499 ubox
42 57 0.840633394 ubox
43 57 0.045978127 ubox
43 66 0.023681343 ubox
44 53 0.851737538 ubox
44 56 0.056483777 ubox
44 59 0.186591720 ubox
44 65 0.026168306 ubox
45 52 0.850610218 ubox
45 58 0.168385266 ubox
47 58 0.430391307 ubox
48 57 0.461832584 ubox
48 66 0.036136516 ubox
49 56 0.468143325 ubox
49 65 0.040106397 ubox
50 55 0.427843071 ubox
50 64 0.038966127 ubox
51 57 0.011954458 ubox
52 56 0.012457794 ubox
52 59 0.144789491 ubox
52 65 0.003403323 ubox
53 58 0.144739664 ubox
54 62 0.007332965 ubox
54 64 0.003806797 ubox
55 61 0.007378216 ubox
55 63 0.003914990 ubox
57 63 0.004988925 ubox
58 62 0.004664419 ubox
4 23 0.9500000 lbox
5 22 0.9500000 lbox
6 21 0.9500000 lbox
7 20 0.9500000 lbox
8 19 0.9500000 lbox
9 18 0.9500000 lbox
25 38 0.9500000 lbox
26 37 0.9500000 lbox
27 36 0.9500000 lbox
40 59 0.9500000 lbox
41 58 0.9500000 lbox
42 57 0.9500000 lbox
44 53 0.9500000 lbox
45 52 0.9500000 lbox
showpage
end
%%EOF
