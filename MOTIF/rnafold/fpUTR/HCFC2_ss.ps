%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGACCCCAGCACAGCUGGAGGCGGGUCCCCGCCCUCCCCAGGGAGCAGCCGGUUGAGGCGGGAGCGGUGCAUUGUGGGCAGAGGGGCGGGGGUUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[28.42784882 211.72418213]
[16.62009621 220.97497559]
[10.52856827 235.57647705]
[-4.26186943 237.33494568]
[-16.06962204 246.58572388]
[-21.00086975 254.47796631]
[-28.37659454 255.93113708]
[-40.45836258 264.82107544]
[-52.40448380 273.89245605]
[-64.21223450 283.14324951]
[-76.01998901 292.39401245]
[-87.82774353 301.64480591]
[-99.63549042 310.89559937]
[-108.37490082 325.42346191]
[-124.75432587 321.04730225]
[-125.08347321 304.09655762]
[-108.88627625 299.08782959]
[-97.07852173 289.83706665]
[-85.27076721 280.58627319]
[-73.46302032 271.33547974]
[-61.65526581 262.08471680]
[-58.27486038 255.37010193]
[-49.34829330 252.73930359]
[-37.26652527 243.84936523]
[-25.32040405 234.77796936]
[-13.51265240 225.52719116]
[-8.26569366 211.58737183]
[7.36931324 209.16722107]
[19.17706490 199.91642761]
[29.45847702 188.99432373]
[37.97944641 176.64956665]
[46.50041962 164.30480957]
[55.02138901 151.96005249]
[63.54236221 139.61528015]
[72.06333160 127.27053070]
[80.58430481 114.92577362]
[89.10527802 102.58101654]
[97.43882751 90.10897064]
[105.58306122 77.51248169]
[113.34313202 64.67576599]
[120.71195221 51.61052322]
[128.08076477 38.54528427]
[135.44958496 25.48004341]
[135.48966980 9.65888786]
[148.48132324 2.37421489]
[155.85014343 -10.69102573]
[155.89022827 -26.51218033]
[168.88186646 -33.79685593]
[176.25068665 -46.86209488]
[183.61950684 -59.92733383]
[185.15515137 -69.10592651]
[191.41333008 -73.27104187]
[199.17340088 -86.10775757]
[206.93347168 -98.94448090]
[207.45138550 -114.75720215]
[220.65711975 -121.64617157]
[228.41719055 -134.48289490]
[223.19491577 -149.22268677]
[228.71737671 -163.85267639]
[242.37704468 -171.46499634]
[257.72424316 -168.46536255]
[267.51248169 -156.27011108]
[267.12005615 -140.63745117]
[256.73226929 -128.94865417]
[241.25390625 -126.72281647]
[233.49383545 -113.88610077]
[233.53097534 -98.99153900]
[219.77018738 -91.18441010]
[212.01011658 -78.34769440]
[204.25004578 -65.51097107]
[196.68473816 -52.55851746]
[189.31591797 -39.49327469]
[181.94711304 -26.42803574]
[182.43408203 -11.54139328]
[168.91537476 -3.32220626]
[161.54655457 9.74303436]
[162.03353882 24.62967682]
[148.51483154 32.84886169]
[141.14601135 45.91410446]
[133.77719116 58.97934341]
[126.40837097 72.04458618]
[126.86144257 76.95330048]
[124.11647034 82.17115021]
[118.17955017 85.65671539]
[110.03531647 98.25320435]
[108.61170959 106.33570862]
[101.45003510 111.10198212]
[92.92906189 123.44673920]
[84.40808868 135.79150391]
[75.88712311 148.13626099]
[67.36614990 160.48101807]
[58.84517670 172.82577515]
[50.32420731 185.17053223]
[41.80323410 197.51528931]
[56.42237854 194.15663147]
[70.81922150 198.36744690]
[81.32439423 209.07450867]
[85.26040649 223.54888916]
[81.62409210 238.10145569]
[71.34223175 249.02314758]
[57.03539658 253.53033447]
[42.35002136 250.47422791]
[31.02900887 240.63377380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[4 26]
[5 25]
[7 24]
[8 23]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[30 94]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[38 85]
[39 84]
[40 81]
[41 80]
[42 79]
[43 78]
[45 76]
[46 75]
[48 73]
[49 72]
[50 71]
[52 70]
[53 69]
[54 68]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
