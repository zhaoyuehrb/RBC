%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGGGGCACGCGCACCUGCCGUAGAGUGCUGAAGGUCCUGCCAACGGCUCUCUUGGCGUCUCAACGUUCGGAUCAGCAGCUUUUUUCCAUUCUCUCUCUCCACUUCUUCAGUGAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[131.01524353 180.88316345]
[122.25909424 168.70410156]
[113.50293732 156.52502441]
[104.74678040 144.34596252]
[89.77591705 143.41156006]
[79.57332611 154.40734863]
[69.37073517 165.40312195]
[59.16814041 176.39889526]
[48.96554947 187.39468384]
[38.76295853 198.39045715]
[28.69823837 209.51257324]
[18.77295113 220.75929260]
[16.05564880 236.93174744]
[0.59874016 242.41043091]
[-11.69703197 231.55934143]
[-8.18283272 215.54115295]
[7.52623224 210.83399963]
[17.45151901 199.58728027]
[19.54133797 192.41175842]
[27.76718140 188.18786621]
[37.96977234 177.19209290]
[48.17236328 166.19630432]
[58.37495422 155.20053101]
[68.57754517 144.20475769]
[78.78013611 133.20896912]
[67.80911255 119.74094391]
[64.05918121 103.53344727]
[67.67208099 88.04871368]
[55.07169342 79.91051483]
[42.47130203 71.77232361]
[29.87091446 63.63412857]
[14.08056927 62.64643097]
[7.58717394 49.24176407]
[-5.01321507 41.10356903]
[-17.61360359 32.96537781]
[-30.21399307 24.82718277]
[-45.47690582 27.93865395]
[-58.13956070 19.50587082]
[-61.01181030 4.93584204]
[-73.61219788 -3.20235205]
[-86.21259308 -11.34054565]
[-102.79829407 -14.85492611]
[-104.01263428 -31.76532936]
[-88.09925842 -37.61347961]
[-78.07439423 -23.94093513]
[-65.47400665 -15.80274105]
[-52.87361908 -7.66454697]
[-38.41163254 -11.03893661]
[-25.51711273 -2.96514845]
[-22.07579803 12.22679424]
[-9.47540951 20.36498833]
[3.12497902 28.50318146]
[15.72536755 36.64137650]
[30.61445045 37.04697800]
[38.00910950 51.03374100]
[50.60949707 59.17193604]
[63.20988464 67.31012726]
[75.81027222 75.44832611]
[86.21719360 68.40946960]
[98.45553589 65.56829834]
[101.06026459 50.79618073]
[103.66498566 36.02406311]
[106.26970673 21.25194740]
[108.87442780 6.47983074]
[102.76019287 -8.73687458]
[113.09265137 -21.47156525]
[129.24266052 -18.62388420]
[134.59646606 -3.12327957]
[123.64654541 9.08455372]
[121.04182434 23.85667038]
[118.43710327 38.62878418]
[115.83237457 53.40090179]
[113.22765350 68.17301941]
[119.76907349 71.76683807]
[125.38345337 76.68460083]
[138.37384033 69.18460083]
[151.36421204 61.68460083]
[149.73039246 46.54357910]
[154.40242004 32.04902649]
[164.57083130 20.71220779]
[178.47387695 14.49729729]
[193.70277405 14.48106670]
[207.61904907 20.66632652]
[217.81159973 31.98144531]
[222.51449585 46.46600723]
[220.91296387 61.61047745]
[213.28445435 74.79098511]
[200.95065308 83.72392273]
[186.04847717 86.86161041]
[171.15982056 83.66042328]
[158.86421204 74.67498016]
[145.87384033 82.17498016]
[132.88345337 89.67498016]
[135.65100098 101.91052246]
[133.85716248 114.76841736]
[127.42941284 126.54931641]
[116.92584991 135.58979797]
[125.68200684 147.76887512]
[134.43815613 159.94793701]
[143.19432068 172.12701416]
[152.39973450 183.97016907]
[162.04154968 195.46083069]
[171.82586670 206.83041382]
[181.75115967 218.07711792]
[191.67643738 229.32383728]
[199.79441833 233.75149536]
[201.70469666 240.97689819]
[211.34651184 252.46755981]
[220.98832703 263.95822144]
[236.78070068 266.78323364]
[244.29136658 280.95959473]
[237.75880432 295.61242676]
[222.19422913 299.50131226]
[209.53744507 289.64303589]
[209.49766541 273.60003662]
[199.85585022 262.10937500]
[190.21403503 250.61871338]
[180.42971802 239.24913025]
[170.50444031 228.00241089]
[160.57914734 216.75569153]
[153.71916199 213.78985596]
[150.55088806 205.10264587]
[140.90907288 193.61198425]
[137.33601379 192.97039795]
[133.91781616 190.49838257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 18]
[12 17]
[28 58]
[29 57]
[30 56]
[31 55]
[33 53]
[34 52]
[35 51]
[36 50]
[39 47]
[40 46]
[41 45]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[75 93]
[76 92]
[77 91]
[101 123]
[102 122]
[103 120]
[104 119]
[105 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
