%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUUUCUCCCCCAUCAGGAGCAGUUUCAGUCUCAACUUCAAAAGAACAAACGCGCACUCAAAACAAAGGAAGACCGUCCUCGACUGCAGAGGAAGCAGGAAGCUGUCGGCCCAGCUCUGAGCCCAGCUGCUGGAGCCCCGAGCAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[223.62892151 182.39738464]
[210.74310303 174.71910095]
[197.85729980 167.04083252]
[184.97148132 159.36254883]
[172.08567810 151.68428040]
[159.19987488 144.00599670]
[146.31405640 136.32772827]
[133.42825317 128.64944458]
[120.54244232 120.97116852]
[113.43550110 126.10113525]
[105.13082886 128.90426636]
[96.36875916 129.13067627]
[87.93040466 126.76016998]
[78.47454834 138.40434265]
[76.42255402 154.67460632]
[61.20325089 160.78237915]
[48.47295380 150.44450378]
[51.32749939 134.29571533]
[66.83037567 128.94848633]
[76.28623199 117.30431366]
[70.74414062 102.42420959]
[73.76145935 86.83485413]
[62.51800156 76.90587616]
[51.27453995 66.97689819]
[40.03107834 57.04792404]
[28.78761864 47.11894608]
[17.54415703 37.18996811]
[24.87039185 50.27913666]
[25.55213165 65.26363373]
[19.44472122 78.96398163]
[7.84406137 88.47317505]
[-6.78836298 91.77349854]
[-21.34777451 88.16468048]
[-32.74488449 78.41245270]
[-38.56139755 64.58609772]
[-37.56313705 49.61935043]
[-29.96192360 36.68793488]
[-17.37061691 28.53569794]
[-2.46109414 26.89240074]
[-17.07509422 23.51142120]
[-31.68909264 20.13044357]
[-47.20737839 25.43279457]
[-59.37881088 14.44242287]
[-55.68246460 -1.53471911]
[-39.92082596 -6.06271791]
[-28.30811501 5.51644373]
[-13.69411564 8.89742184]
[0.91988409 12.27840042]
[6.74196959 7.55047083]
[-4.46209431 -2.42294168]
[-15.66615772 -12.39635372]
[-26.87022209 -22.36976624]
[-38.07428741 -32.34317780]
[-49.27835083 -42.31658936]
[-63.43819046 -47.26622772]
[-73.14397430 -58.70291138]
[-75.72466278 -73.47924805]
[-70.47004700 -87.52876282]
[-58.82619476 -96.98501587]
[-43.99751663 -99.24563599]
[-30.06488991 -93.68849182]
[-20.86258888 -81.84291077]
[-18.92336273 -66.96690369]
[-11.46146202 -53.95460129]
[-3.99956131 -40.94229889]
[3.46233940 -27.92999458]
[10.92424011 -14.91769218]
[18.38614082 -1.90538859]
[24.20822716 -6.63331842]
[23.89822388 -21.63011360]
[23.58822060 -36.62691116]
[23.27821541 -51.62370682]
[11.70223427 -62.38345718]
[11.20857048 -78.18003082]
[22.09010506 -89.64160919]
[37.89101791 -89.96823120]
[49.23690796 -78.96612549]
[49.39645767 -63.16264343]
[38.27501297 -51.93371201]
[38.58501434 -36.93691254]
[38.89501953 -21.94011879]
[39.20502472 -6.94332170]
[38.30635834 13.81280231]
[27.47313309 25.94650841]
[38.71659470 35.87548447]
[49.96005630 45.80446243]
[61.20351791 55.73343658]
[72.44697571 65.66241455]
[83.69043732 75.59139252]
[100.60659790 70.65014648]
[117.30414581 76.28610992]
[127.76556396 90.46817780]
[128.22071838 108.08536530]
[141.10652161 115.76364136]
[153.99234009 123.44191742]
[166.87814331 131.12019348]
[179.76394653 138.79846191]
[192.64976501 146.47674561]
[205.53556824 154.15501404]
[218.42138672 161.83329773]
[231.30718994 169.51156616]
[249.42257690 164.13784790]
[265.47222900 173.49455261]
[269.57803345 191.28723145]
[282.77014160 198.42645264]
[295.96224976 205.56565857]
[309.15435791 212.70486450]
[322.34646606 219.84408569]
[343.64126587 217.85070801]
[353.89059448 235.72550964]
[367.49972534 242.03355408]
[381.10885620 248.34158325]
[394.78247070 254.50865173]
[408.51907349 260.53408813]
[422.25567627 266.55950928]
[435.99227905 272.58493042]
[449.72885132 278.61038208]
[467.94674683 276.13760376]
[477.82440186 290.61013794]
[491.68258667 296.35037231]
[505.54077148 302.09063721]
[521.72015381 299.41482544]
[531.91662598 312.25866699]
[525.64093018 327.40948486]
[509.34896851 329.28146362]
[499.80050659 315.94882202]
[485.94232178 310.20858765]
[472.08413696 304.46832275]
[460.75125122 308.81002808]
[449.13549805 304.09097290]
[443.70343018 292.34698486]
[429.96682739 286.32153320]
[416.23022461 280.29611206]
[402.49362183 274.27069092]
[388.75704956 268.24523926]
[381.32125854 268.43978882]
[374.80084229 261.95071411]
[361.19168091 255.64268494]
[347.58255005 249.33465576]
[339.75610352 253.75521851]
[330.63394165 254.04640198]
[322.29260254 250.01374817]
[316.69018555 242.46168518]
[315.20727539 233.03619385]
[302.01516724 225.89697266]
[288.82305908 218.75776672]
[275.63095093 211.61856079]
[262.43884277 204.47933960]
[252.40043640 210.05438232]
[240.79754639 210.06251526]
[230.54084778 204.38513184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[13 20]
[14 19]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[39 48]
[40 47]
[41 46]
[69 82]
[70 81]
[71 80]
[72 79]
[104 148]
[105 147]
[106 146]
[107 145]
[108 144]
[110 139]
[111 138]
[112 137]
[113 135]
[114 134]
[115 133]
[116 132]
[117 131]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
