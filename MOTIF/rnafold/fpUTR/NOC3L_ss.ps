%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAUUGGGAGGGACUGAAGGCCGUUUCCGGCUCUGGUAGUGUAGGGACUUCGGCACGUGUGUCAUUCCCCGGGAUUUCUGUAGUAACCCUGCUUCUGGUGAACUUGUCUGGCCGGCAUUCAUUUAAGGCCUAAGG\
) } def
/len { sequence length } bind def

/coor [
[206.22480774 141.31909180]
[191.91764832 136.81298828]
[177.61047363 132.30690002]
[163.30329895 127.80080414]
[148.99613953 123.29470062]
[134.53237915 126.85127258]
[123.69395447 115.32569122]
[109.38678741 110.81959534]
[95.69699860 113.66233826]
[86.10711670 103.48757172]
[71.79994965 98.98147583]
[62.58793259 99.38329315]
[57.22242737 94.20850372]
[43.02074814 89.38022614]
[28.81906891 84.55194855]
[14.61738873 79.72366333]
[5.39864445 79.91719055]
[0.15145957 74.62246704]
[-13.93747711 69.47447205]
[-28.02641296 64.32646942]
[-40.08584595 69.05463409]
[-51.74769211 64.41407013]
[-56.91841507 53.42002487]
[-70.88741302 47.95494080]
[-84.91727448 42.64805984]
[-99.00621033 37.50006485]
[-113.09514618 32.35206604]
[-125.15457916 37.08022690]
[-136.81642151 32.43966293]
[-141.98715210 21.44562149]
[-155.95614624 15.98053646]
[-169.92514038 10.51545238]
[-183.89413452 5.05036783]
[-198.04034424 0.06191133]
[-212.34751892 -4.44418478]
[-226.65469360 -8.95028114]
[-240.96185303 -13.45637703]
[-255.26902771 -17.96247292]
[-269.16775513 -10.43910503]
[-284.29141235 -15.02717400]
[-291.66741943 -29.00466156]
[-286.91970825 -44.07897186]
[-272.86502075 -51.30678177]
[-257.84173584 -46.39996338]
[-250.76293945 -32.26964188]
[-236.45576477 -27.76354599]
[-222.14859009 -23.25745010]
[-207.84143066 -18.75135422]
[-193.53425598 -14.24525833]
[-190.19470215 -15.60516834]
[-186.01666260 -15.36262226]
[-181.78540039 -13.13555527]
[-178.42906189 -8.91862774]
[-164.46005249 -3.45354390]
[-150.49105835 2.01154041]
[-136.52206421 7.47662497]
[-119.38240051 3.87983298]
[-107.94715118 18.26313210]
[-93.85821533 23.41112709]
[-79.76927948 28.55912399]
[-72.34462738 27.89460182]
[-65.42232513 33.98594284]
[-51.45333099 39.45102692]
[-34.31366348 35.85423660]
[-22.87841606 50.23753357]
[-8.78948021 55.38553238]
[5.29945612 60.53352737]
[19.44566727 65.52198792]
[33.64734650 70.35026550]
[47.84902954 75.17854309]
[62.05070877 80.00682068]
[76.30604553 84.67430878]
[90.61321259 89.18040466]
[104.30300140 86.33766174]
[113.89288330 96.51242828]
[128.20005798 101.01852417]
[143.68714905 97.78425598]
[153.50222778 108.98753357]
[167.80940247 113.49362946]
[182.11656189 117.99972534]
[196.42373657 122.50582123]
[210.73091125 127.01191711]
[215.47978210 122.45322418]
[221.29824829 119.46234894]
[227.68922424 118.26864624]
[234.11413574 118.94907379]
[240.03828430 121.42359924]
[244.97532654 125.46389771]
[248.52723694 130.71417236]
[250.41629028 136.72241211]
[250.50672913 142.97932434]
[263.92526245 149.68324280]
[277.34381104 156.38717651]
[290.98190308 162.63241577]
[304.82382202 168.41178894]
[318.66574097 174.19117737]
[332.50765991 179.97055054]
[346.97882080 174.20661926]
[360.93417358 180.26492310]
[366.34002686 194.09649658]
[380.18194580 199.87586975]
[394.02386475 205.65524292]
[407.86578369 211.43463135]
[421.70770264 217.21400452]
[435.54962158 222.99339294]
[442.28112793 222.51896667]
[447.42822266 225.16972351]
[449.87698364 229.35940552]
[463.44360352 235.75836182]
[477.01022339 242.15731812]
[490.57684326 248.55627441]
[506.10144043 244.51066589]
[518.85699463 254.24081421]
[519.05853271 270.28259277]
[506.55145264 280.33013916]
[490.93011475 276.67581177]
[484.17788696 262.12289429]
[470.61126709 255.72395325]
[457.04464722 249.32499695]
[443.47802734 242.92604065]
[429.77023315 236.83531189]
[415.92831421 231.05593872]
[402.08639526 225.27655029]
[388.24447632 219.49717712]
[374.40255737 213.71778870]
[360.56063843 207.93841553]
[346.92428589 213.81933594]
[332.80429077 208.15541077]
[326.72827148 193.81246948]
[312.88635254 188.03309631]
[299.04443359 182.25370789]
[285.20251465 176.47433472]
[281.75381470 177.52719116]
[277.61474609 176.90843201]
[273.60183716 174.30844116]
[270.63989258 169.80572510]
[257.22134399 163.10179138]
[243.80281067 156.39787292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[7 76]
[8 75]
[10 73]
[11 72]
[13 71]
[14 70]
[15 69]
[16 68]
[18 67]
[19 66]
[20 65]
[23 63]
[24 62]
[25 60]
[26 59]
[27 58]
[30 56]
[31 55]
[32 54]
[33 53]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[91 138]
[92 137]
[93 136]
[94 132]
[95 131]
[96 130]
[97 129]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
