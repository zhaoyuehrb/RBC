%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAGUCCCUGAGAAGAGGAGCUCUUGGGCCAAUCACCUAGUUUCUGCCUGUGUUACAGUGAAGAGAAGCUGCUUAAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[151.33909607 142.77880859]
[141.89724731 154.43435669]
[128.23251343 160.62101746]
[113.24431610 160.02609253]
[100.11293030 152.77578735]
[91.62464142 140.40853882]
[89.58053589 125.54846954]
[94.41423798 111.34883881]
[81.07410431 118.20747375]
[67.73397064 125.06610870]
[54.52133179 132.16723633]
[41.44058990 139.50851440]
[33.53851700 153.87825012]
[17.13952446 153.94914246]
[9.11348820 139.64828491]
[17.71690941 125.68714905]
[34.09932327 126.42776489]
[47.18006516 119.08650208]
[51.57463837 112.92227936]
[60.87533951 111.72597504]
[74.21546936 104.86734009]
[87.55560303 98.00870514]
[92.28009796 90.13095856]
[101.05132294 87.58764648]
[111.06111145 76.41606140]
[121.07089233 65.24447632]
[131.08067322 54.07289505]
[141.09045410 42.90131378]
[151.10023499 31.72973061]
[161.11001587 20.55814743]
[171.11979675 9.38656521]
[181.12957764 -1.78501725]
[166.13517761 -1.37512732]
[153.16801453 -8.91519547]
[146.10737610 -22.14951706]
[147.06552124 -37.11888504]
[155.75582886 -49.34502792]
[169.57849121 -55.17034531]
[184.39826965 -52.85212326]
[195.78164673 -43.08388519]
[200.32316589 -28.78792000]
[196.66293335 -14.23889160]
[209.74366760 -21.58016014]
[222.82441711 -28.92142677]
[235.90515137 -36.26269531]
[248.98588562 -43.60396194]
[262.06661987 -50.94522858]
[275.14736938 -58.28649902]
[279.25079346 -77.71865082]
[295.87237549 -88.03984070]
[314.53701782 -83.24750519]
[326.73635864 -91.97538757]
[338.93569946 -100.70326996]
[351.13504028 -109.43115234]
[360.49874878 -123.56472015]
[376.67208862 -118.47953033]
[376.26284790 -101.53051758]
[359.86294556 -97.23180389]
[347.66360474 -88.50392151]
[335.46423340 -79.77603912]
[323.26489258 -71.04815674]
[324.38562012 -60.43716812]
[320.85266113 -50.28209686]
[313.27310181 -42.54069901]
[303.04107666 -38.73677444]
[292.08163452 -39.66057968]
[282.48864746 -45.20575714]
[269.40789795 -37.86449051]
[256.32714844 -30.52322197]
[243.24641418 -23.18195343]
[230.16567993 -15.84068584]
[217.08493042 -8.49941826]
[204.00419617 -1.15815079]
[192.30116272 8.22476482]
[182.29138184 19.39634705]
[172.28160095 30.56793022]
[162.27182007 41.73951340]
[152.26203918 52.91109467]
[142.25225830 64.08267975]
[132.24247742 75.25426483]
[122.23268890 86.42584229]
[112.22290802 97.59742737]
[127.18362427 96.51249695]
[141.04344177 102.24882507]
[150.86151123 113.58925629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 18]
[12 17]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
