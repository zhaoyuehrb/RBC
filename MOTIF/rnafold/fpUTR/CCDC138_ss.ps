%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUGCGGCCGCGUAGCGCCGCGGGUUUGAUGAACGCGGUUCCCGGGGAGACUGGUACGGUUGCUGUGUGCU\
) } def
/len { sequence length } bind def

/coor [
[117.66475677 296.99343872]
[115.75949097 282.11492920]
[113.85421753 267.23645020]
[111.94895172 252.35792542]
[102.65773010 240.71652222]
[108.57949829 226.04534912]
[106.67422485 211.16683960]
[104.76895905 196.28833008]
[102.86369324 181.40982056]
[100.95842743 166.53132629]
[99.05316162 151.65281677]
[97.14788818 136.77430725]
[85.60298920 133.95895386]
[75.55242157 127.61883545]
[68.03938293 118.41203308]
[63.84368134 107.29416656]
[63.40081406 95.41919708]
[66.75674438 84.01969910]
[73.56314850 74.27886200]
[65.16352844 61.85121918]
[56.76390457 49.42357254]
[48.36428070 36.99592972]
[39.96466064 24.56828499]
[31.56503677 12.14063931]
[16.36097908 13.89994621]
[2.08503866 8.38123894]
[-7.98227453 -3.14732528]
[-11.52756691 -18.03656578]
[-7.73615551 -32.86504364]
[2.52072048 -44.22528458]
[16.88610649 -49.50679016]
[32.05894089 -47.49590302]
[44.55261993 -38.65471649]
[51.49618530 -25.01486588]
[51.29405594 -9.71069336]
[43.99268341 3.74101758]
[52.39230347 16.16866302]
[60.79192734 28.59630775]
[69.19155121 41.02395248]
[77.59117126 53.45159531]
[85.99079132 65.87924194]
[101.47322845 63.14469147]
[116.68799591 67.10630798]
[128.87075806 77.04431915]
[142.26464844 70.29125977]
[155.65853882 63.53820419]
[169.05242920 56.78514862]
[175.42012024 42.05992889]
[190.94006348 37.99659348]
[203.70669556 47.71218491]
[203.92654419 63.75373077]
[191.43095398 73.81552887]
[175.80548096 70.17903900]
[162.41159058 76.93209076]
[149.01770020 83.68515015]
[135.62380981 90.43820190]
[135.84440613 108.69845581]
[127.27870941 124.82651520]
[112.02639771 134.86903381]
[113.93166351 149.74754333]
[115.83692932 164.62605286]
[117.74220276 179.50456238]
[119.64746857 194.38307190]
[121.55273438 209.26156616]
[123.45800018 224.14007568]
[132.88549805 236.84570312]
[126.82746124 250.45266724]
[128.73272705 265.33117676]
[130.63800049 280.20968628]
[132.54325867 295.08819580]
[142.90536499 307.79876709]
[136.82659912 323.02966309]
[120.56027222 325.11267090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
