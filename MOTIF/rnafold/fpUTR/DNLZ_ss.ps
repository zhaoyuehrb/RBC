%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACGGAAGCCCAAGAACGCCGCUUCCGCCCGGCGCCCACUUCCAAGAUGGCGGCGGGGCGGGGCCGGGGCAGGGCGGACGGAGCCGGCGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[76.72244263 433.40383911]
[62.41117859 427.10131836]
[55.54571152 413.05142212]
[59.36770248 397.88809204]
[72.07252502 388.77099609]
[73.03357697 373.80181885]
[61.47049332 364.45123291]
[57.58467484 349.91287231]
[63.06880188 335.70800781]
[76.01525879 327.35964966]
[76.97631073 312.39047241]
[77.93737030 297.42129517]
[65.44944000 291.15829468]
[56.28927612 280.55249023]
[51.88261414 267.20346069]
[52.93489456 253.14167786]
[59.31855011 240.51945496]
[70.08740997 231.28163147]
[83.61682129 226.86590576]
[85.05716705 211.93521118]
[86.25801849 196.98335266]
[87.21907043 182.01417542]
[88.18013000 167.04499817]
[89.14118195 152.07582092]
[90.10223389 137.10662842]
[91.06328583 122.13745117]
[79.79229736 112.71143341]
[76.17581177 98.47043610]
[81.58370972 84.80882263]
[93.96752930 76.90149689]
[94.92858887 61.93231201]
[95.88964081 46.96313095]
[96.85069275 31.99395180]
[97.81174469 17.02477074]
[98.77279663 2.05558944]
[99.01321411 -12.94248390]
[98.53244019 -27.93477631]
[98.05166626 -42.92707062]
[97.57089233 -57.91936493]
[87.47807312 -73.21649933]
[96.13394928 -88.38947296]
[95.17288971 -103.35865784]
[86.56730652 -116.63474274]
[93.47327423 -129.83160400]
[92.51222229 -144.80078125]
[91.55117035 -159.76995850]
[84.50243378 -175.18916321]
[97.36775970 -186.23088074]
[111.53945160 -176.92498779]
[106.52034760 -160.73101807]
[107.48139954 -145.76182556]
[108.44245148 -130.79264832]
[116.97929382 -118.58725739]
[110.14207458 -104.31970978]
[111.10312653 -89.35053253]
[120.04035950 -81.02573395]
[120.85955811 -68.43523407]
[112.56318665 -58.40013885]
[113.04396057 -43.40784454]
[113.52473450 -28.41555023]
[114.00550842 -13.42325783]
[116.49548340 -10.67919064]
[117.67684174 -6.52242088]
[116.86787415 -1.63297498]
[113.74198151 3.01664257]
[112.78092957 17.98582268]
[111.81987000 32.95500565]
[110.85881805 47.92418671]
[109.89776611 62.89336777]
[108.93671417 77.86254883]
[120.20770264 87.28856659]
[123.82418823 101.52956390]
[118.41629028 115.19117737]
[106.03247070 123.09850311]
[105.07141113 138.06768799]
[104.11035919 153.03686523]
[103.14930725 168.00604248]
[102.18825531 182.97523499]
[101.22720337 197.94441223]
[103.83533478 206.89929199]
[99.98785400 213.37556458]
[98.54750824 228.30624390]
[112.46475983 236.56236267]
[121.39431763 249.98806763]
[123.61203766 265.90057373]
[118.72898865 281.14614868]
[107.75853729 292.72518921]
[92.90654755 298.38232422]
[91.94549561 313.35150146]
[90.98444366 328.32070923]
[102.75704193 338.25610352]
[106.37966919 353.04562378]
[100.66662598 366.96771240]
[88.00275421 374.76287842]
[87.04170227 389.73205566]
[98.47634888 400.39895630]
[100.32791901 415.92654419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 95]
[6 94]
[10 90]
[11 89]
[12 88]
[19 82]
[20 81]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 61]
[37 60]
[38 59]
[39 58]
[41 55]
[42 54]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
