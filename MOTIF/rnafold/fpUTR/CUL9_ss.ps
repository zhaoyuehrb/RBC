%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGGGCCAGGACGGCGGGACCGGCCGCUGGGUCCCAGCGAGGGCUGAGCCGGGCGGUGGGAGGAGGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[38.12905502 265.99581909]
[24.39433479 269.03192139]
[10.59164429 266.55825806]
[2.38742185 279.11575317]
[-5.81680059 291.67327881]
[-9.41819191 308.24029541]
[-26.33473587 309.36584473]
[-32.09927368 293.42199707]
[-18.37429810 283.46905518]
[-10.17007542 270.91152954]
[-1.96585298 258.35403442]
[-10.44835472 244.97021484]
[-12.32006741 229.17767334]
[-7.16389084 214.07283020]
[4.05440187 202.63894653]
[19.16662979 197.15692139]
[35.22113800 198.75044250]
[42.89941406 185.86463928]
[50.57769012 172.97883606]
[42.37659454 159.21170044]
[42.15330505 143.09562683]
[50.06044769 128.94438171]
[64.06195068 120.59223175]
[80.45651245 120.35515594]
[87.59572601 107.16305542]
[87.40246582 93.18255615]
[99.21217346 85.69773865]
[106.35137939 72.50563049]
[113.49059296 59.31352615]
[120.62980652 46.12141800]
[127.76901245 32.92931366]
[134.90821838 19.73720551]
[134.67163086 3.91776872]
[147.53388977 -3.59298515]
[154.67311096 -16.78509140]
[161.81231689 -29.97719765]
[158.88279724 -42.73139572]
[165.33087158 -53.65131378]
[177.13587952 -57.02222824]
[184.81414795 -69.90803528]
[192.49243164 -82.79384613]
[200.17070007 -95.67965698]
[199.85549927 -112.07577515]
[214.03521729 -120.31396484]
[228.12297058 -111.91948700]
[227.62649536 -95.52785492]
[213.05651855 -88.00138092]
[205.37823486 -75.11557007]
[197.69996643 -62.22975922]
[190.02168274 -49.34395218]
[190.85569763 -31.93993187]
[175.00442505 -22.83798599]
[167.86520386 -9.64588070]
[160.72599792 3.54622579]
[161.47323608 18.42207527]
[148.10032654 26.87641716]
[140.96112061 40.06852341]
[133.82191467 53.26062775]
[126.68270111 66.45273590]
[119.54348755 79.64484406]
[112.40427399 92.83694458]
[112.59753418 106.81744385]
[100.78782654 114.30226135]
[93.64862061 127.49436951]
[101.64948273 139.15806580]
[103.77129364 153.07461548]
[99.64907837 166.46508789]
[90.15885925 176.68113708]
[77.23226166 181.72869873]
[63.46349716 180.65710449]
[55.78522110 193.54292297]
[48.10694504 206.42872620]
[56.42080307 218.04481506]
[59.61626053 231.92271423]
[57.23422623 245.91882324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[17 72]
[18 71]
[19 70]
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[36 52]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
