%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCUCGGCCUCUUUGCACCGGGCAGAGUGACGAGCUUCGCCGGUGUCUUCAUUGAAGUCCUGUUGGUCCCUACCGGCACAUCACACACUCCUGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[-106.97628021 482.67504883]
[-112.44605255 496.64221191]
[-117.91582489 510.60937500]
[-123.38559723 524.57653809]
[-123.53134918 541.52984619]
[-139.86247253 546.08294678]
[-148.75852966 531.65045166]
[-137.35275269 519.10675049]
[-131.88298035 505.13958740]
[-126.41321564 491.17242432]
[-120.94344330 477.20526123]
[-130.38215637 468.98452759]
[-136.79603577 458.20709229]
[-139.53089905 445.94201660]
[-138.29841614 433.41143799]
[-133.20634460 421.86892700]
[-124.74937439 412.47409058]
[-113.76103973 406.17599487]
[-101.33161926 403.61734009]
[-88.69995880 405.06890869]
[-81.95252991 391.67218018]
[-75.20510101 378.27545166]
[-68.45767975 364.87872314]
[-61.71025467 351.48202515]
[-61.50926590 343.95971680]
[-54.53897476 337.77847290]
[-47.37817764 324.59808350]
[-48.10106277 309.72100830]
[-34.71433258 301.28857422]
[-27.55353546 288.10818481]
[-20.39273643 274.92776489]
[-23.52180481 263.12832642]
[-17.51676178 252.03941345]
[-5.15965176 247.95790100]
[2.40759110 235.00657654]
[-4.14983845 224.55551147]
[-5.57995939 212.22738647]
[-1.54210520 200.41479492]
[7.23703861 191.43745422]
[19.09334946 187.08673096]
[31.74049187 188.26838684]
[40.09827423 175.81257629]
[48.45605850 163.35675049]
[56.81384277 150.90092468]
[65.17163086 138.44511414]
[73.52941132 125.98928833]
[81.88719177 113.53347015]
[71.39206696 91.75173187]
[86.72294617 65.53260040]
[89.96321106 50.88676071]
[93.20347595 36.24092102]
[96.44374847 21.59507942]
[93.96170044 4.82380056]
[109.39044952 -2.20399928]
[120.41470337 10.67630196]
[111.08958435 24.83534622]
[107.84931946 39.48118591]
[104.60905457 54.12702942]
[101.36878204 68.77287292]
[107.78482056 72.65674591]
[127.03293610 84.30835724]
[138.50692749 74.64670563]
[143.57731628 59.05108643]
[159.67272949 55.90950775]
[170.23559570 68.45375061]
[164.39973450 83.77937317]
[148.16857910 86.12068939]
[136.69459534 95.78234863]
[132.80754089 109.19237518]
[124.63690186 119.15276337]
[114.14005280 124.56122589]
[103.42224121 125.24462128]
[94.34301758 121.89125824]
[85.98522949 134.34707642]
[77.62744904 146.80290222]
[69.26966095 159.25871277]
[60.91188049 171.71453857]
[52.55409622 184.17034912]
[44.19631195 196.62617493]
[50.96530151 213.28625488]
[46.55007172 230.55863953]
[32.85651779 241.73072815]
[15.35891628 242.57382202]
[7.79167366 255.52514648]
[8.19754124 273.85223389]
[-7.21233606 282.08856201]
[-14.37313366 295.26898193]
[-21.53393173 308.44937134]
[-21.32323456 324.26916504]
[-34.19777679 331.75888062]
[-41.35857391 344.93927002]
[-48.31352997 358.22943115]
[-55.06095505 371.62615967]
[-61.80838013 385.02288818]
[-68.55580139 398.41961670]
[-75.30323029 411.81634521]
[-64.03660583 425.52621460]
[-59.78201675 442.70056152]
[-63.32501221 459.98278809]
[-73.93163300 474.01495361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[20 96]
[21 95]
[22 94]
[23 93]
[24 92]
[26 91]
[27 90]
[29 88]
[30 87]
[31 86]
[34 84]
[35 83]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[49 59]
[50 58]
[51 57]
[52 56]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
