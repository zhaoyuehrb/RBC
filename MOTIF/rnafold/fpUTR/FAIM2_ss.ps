%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCAGCAUCUUCCCAGGCCCGGCCCUCUCCUCCCCCCGCGCCGAUGGUACGCGCCGGCUCGCCUGGCCCGGCUGCAGUGGAUGUUGCUAGAACCCACGCGGAGGAAGGAAGAGACGCAGGCAGGCUGCGGUUACCCAAGCGGCCACCCGGGCCUCAGGGACCCCUUCCCCGAGAGACGGCACC\
) } def
/len { sequence length } bind def

/coor [
[300.32351685 611.91003418]
[292.57199097 598.32885742]
[295.41461182 582.95184326]
[307.50918579 573.03948975]
[307.50918579 558.03948975]
[294.54187012 550.71044922]
[286.93347168 537.78887939]
[286.81362915 522.69409180]
[294.31466675 509.47927856]
[307.50918579 501.74285889]
[307.50918579 486.74285889]
[307.50918579 471.74285889]
[306.11773682 456.80752563]
[303.34683228 442.06567383]
[300.57595825 427.32382202]
[297.80505371 412.58197021]
[294.78558350 397.88903809]
[291.51837158 383.24917603]
[288.25119019 368.60931396]
[284.98397827 353.96945190]
[281.71676636 339.32962036]
[278.44955444 324.68975830]
[275.18237305 310.04989624]
[268.80484009 296.47317505]
[259.62326050 284.61154175]
[250.44166565 272.74990845]
[240.76754761 261.28643799]
[230.61813354 250.24154663]
[220.46871948 239.19665527]
[210.31932068 228.15177917]
[200.07699585 217.19299316]
[189.74249268 206.32110596]
[179.40798950 195.44920349]
[165.03137207 191.55531311]
[161.13145447 176.22230530]
[150.79695129 165.35041809]
[136.42034912 161.45652771]
[132.52041626 146.12351990]
[122.18592072 135.25163269]
[111.85141754 124.37973785]
[101.51690674 113.50784302]
[87.68308258 107.70912933]
[72.68521881 107.96247101]
[57.68735886 108.21581268]
[41.95260620 114.52880096]
[31.53051376 101.15657806]
[41.49502182 87.43998718]
[57.43401718 93.21794891]
[72.43187714 92.96460724]
[87.42973328 92.71126556]
[89.67495728 85.55522156]
[94.16540527 71.24313354]
[96.41062927 64.08708954]
[84.24565887 55.31135178]
[72.00701141 46.63866425]
[59.69556427 38.06964111]
[47.38411331 29.50061798]
[35.07265854 20.93159485]
[22.76120758 12.36257172]
[7.01445770 10.82946491]
[0.98845184 -2.79171419]
[-11.32299995 -11.36073780]
[-27.70044708 -12.20411301]
[-34.91679382 -26.93015671]
[-25.54848099 -40.38997650]
[-9.23282719 -38.73726654]
[-2.75397658 -23.67218971]
[9.55747509 -15.10316563]
[24.42362785 -14.18297291]
[31.33023071 0.05111999]
[43.64168167 8.62014294]
[55.95313644 17.18916702]
[68.26458740 25.75819016]
[80.57603455 34.32721329]
[87.87808228 35.57052994]
[93.02139282 43.14638519]
[105.18636322 51.92211914]
[111.61729431 48.06295395]
[130.91007996 36.48545837]
[128.88940430 21.62218285]
[126.86873627 6.75891066]
[124.84806061 -8.10436249]
[121.08975983 -13.58661461]
[120.73442078 -19.28612328]
[123.01894379 -23.50279045]
[121.50141907 -38.42583084]
[119.98389435 -53.34886932]
[108.50897217 -64.56072235]
[110.26354218 -80.50753784]
[123.90165710 -88.95629120]
[138.96131897 -83.42581940]
[143.89004517 -68.15862274]
[134.90693665 -54.86639404]
[136.42446899 -39.94335556]
[137.94198608 -25.02031517]
[139.71133423 -10.12503433]
[141.73200989 4.73823881]
[143.75268555 19.60151100]
[145.77334595 34.46478653]
[112.38880157 103.17333984]
[122.72330475 114.04523468]
[133.05781555 124.91712189]
[143.39231873 135.78901672]
[158.50811768 140.46054077]
[161.66883850 155.01591492]
[172.00334167 165.88780212]
[187.11915588 170.55932617]
[190.27987671 185.11470032]
[200.61437988 195.98660278]
[210.94888306 206.85848999]
[219.14854431 210.93437195]
[221.36419678 218.00236511]
[231.51361084 229.04725647]
[241.66302490 240.09213257]
[251.81242371 251.13702393]
[255.16723633 236.51699829]
[268.61346436 229.86874390]
[282.26748657 236.07905579]
[286.09292603 250.58305359]
[277.27792358 262.71960449]
[262.30331421 263.56832886]
[271.48489380 275.42996216]
[280.66647339 287.29159546]
[288.72543335 274.72738647]
[304.93960571 267.29650879]
[319.80285645 265.27584839]
[334.66613770 263.25518799]
[349.52941895 261.23449707]
[364.39270020 259.21383667]
[379.25595093 257.19314575]
[394.08297729 254.92173767]
[408.86953735 252.40022278]
[421.13882446 241.51921082]
[436.60903931 246.96020508]
[439.36575317 263.12600708]
[426.57308960 273.38659668]
[411.39105225 267.18676758]
[396.60449219 269.70828247]
[393.15075684 273.03561401]
[387.56326294 274.21475220]
[381.27664185 272.05642700]
[366.41336060 274.07711792]
[351.55007935 276.09777832]
[336.68682861 278.11843872]
[321.82354736 280.13912964]
[306.96026611 282.15979004]
[302.67575073 288.31552124]
[309.05355835 301.89208984]
[294.10671997 300.62698364]
[289.82223511 306.78268433]
[293.08941650 321.42254639]
[296.35662842 336.06240845]
[299.62384033 350.70227051]
[302.89102173 365.34213257]
[306.15823364 379.98196411]
[309.42544556 394.62182617]
[313.63278198 399.76751709]
[314.46762085 405.41674805]
[312.54690552 409.81109619]
[315.31781006 424.55294800]
[318.08868408 439.29479980]
[320.85958862 454.03665161]
[327.09576416 440.39440918]
[338.89315796 431.13046265]
[353.62512207 428.30737305]
[368.01150513 432.55374146]
[378.84918213 442.92410278]
[383.72515869 457.10949707]
[381.55374146 471.95147705]
[372.81845093 484.14550781]
[359.46417236 490.97656250]
[344.46426392 490.92367554]
[331.15847778 483.99865723]
[322.50918579 471.74285889]
[322.50918579 486.74285889]
[322.50918579 501.74285889]
[335.70370483 509.47927856]
[343.20474243 522.69409180]
[343.08489990 537.78887939]
[335.47650146 550.71044922]
[322.50918579 558.03948975]
[322.50918579 573.03948975]
[334.60375977 582.95184326]
[337.44638062 598.32885742]
[329.69485474 611.91003418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 182]
[5 181]
[10 176]
[11 175]
[12 174]
[13 162]
[14 161]
[15 160]
[16 159]
[17 156]
[18 155]
[19 154]
[20 153]
[21 152]
[22 151]
[23 150]
[24 123]
[25 122]
[26 121]
[27 115]
[28 114]
[29 113]
[30 112]
[31 110]
[32 109]
[33 108]
[35 106]
[36 105]
[38 103]
[39 102]
[40 101]
[41 100]
[42 50]
[43 49]
[44 48]
[53 77]
[54 76]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[61 68]
[62 67]
[79 99]
[80 98]
[81 97]
[82 96]
[85 95]
[86 94]
[87 93]
[125 146]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
