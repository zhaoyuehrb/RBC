%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCACCGGAGCGCGCCGGGUCCUCGCCGGGUCCCAGCCCCGCGCGUCGGCCCAGCCCAGCCGGGACCCCCCGCGACAUGCGCGUCCCAGCCCUGCGCUGAGCAGGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[58.57713699 224.61294556]
[54.06102753 238.91696167]
[49.54491425 253.22097778]
[53.61453247 269.10714722]
[41.70390701 280.37963867]
[26.06566811 275.44226074]
[22.78709602 259.37420654]
[35.24090576 248.70486450]
[39.75701523 234.40084839]
[44.27312469 220.09683228]
[39.51610947 203.26773071]
[53.03258133 190.85910034]
[57.14931870 176.43507385]
[55.94197464 169.03544617]
[61.58617401 161.67030334]
[66.10228729 147.36628723]
[70.61839294 133.06227112]
[75.13450623 118.75826263]
[69.25009155 104.96067047]
[55.80084229 98.31855011]
[42.35159683 91.67642975]
[28.90234947 85.03430939]
[15.45310402 78.39218140]
[0.64676547 83.23058319]
[-12.89806366 76.30294037]
[-17.41948891 62.15753937]
[-30.86873627 55.51541519]
[-44.31798172 48.87329483]
[-57.85825729 42.41876602]
[-71.48694611 36.15307617]
[-85.11563110 29.88738441]
[-98.74431610 23.62169456]
[-112.80255127 30.47005653]
[-127.96121216 26.62961388]
[-137.06285095 13.91370678]
[-135.80993652 -1.67360342]
[-124.79407501 -12.77246475]
[-109.21660614 -14.14233494]
[-96.43273926 -5.13640213]
[-92.47863007 9.99300671]
[-78.84993744 16.25869751]
[-65.22125244 22.52438736]
[-51.59256744 28.79007912]
[-44.09537125 28.72388840]
[-37.67586136 35.42404938]
[-24.22661400 42.06616974]
[-10.77736759 48.70829391]
[3.20321155 43.70040131]
[16.93727875 50.24486542]
[22.09522629 64.94293976]
[35.54447174 71.58506012]
[48.99371719 78.22718048]
[62.44296265 84.86930084]
[75.89221191 91.51142120]
[96.29991150 78.10855865]
[114.73114014 88.24678802]
[129.21099854 84.33094025]
[140.51275635 73.25932312]
[154.81855774 77.40578461]
[169.29841614 73.48994446]
[183.77827454 69.57410431]
[198.25811768 65.65825653]
[212.68214417 61.54151917]
[227.04754639 57.22467422]
[241.41296387 52.90783310]
[255.77836609 48.59098816]
[257.27136230 32.64877319]
[264.72418213 18.52035713]
[276.98010254 8.33578491]
[292.16079712 3.61783266]
[307.95419312 5.05437851]
[321.96658325 12.39827442]
[332.08547974 24.50927162]
[346.32531738 19.79476547]
[360.56518555 15.08026028]
[374.80502319 10.36575413]
[383.26461792 -3.26565170]
[399.21279907 -5.00757074]
[410.41555786 6.47624826]
[408.27905273 22.37640190]
[394.44223022 30.49565315]
[379.51953125 24.60560799]
[365.27969360 29.32011414]
[351.03982544 34.03461838]
[336.79998779 38.74912643]
[336.29705811 52.84534454]
[330.98007202 65.94240570]
[321.47457886 76.44467926]
[308.91778564 83.06508636]
[294.82247925 84.98276520]
[280.89477539 81.94483948]
[268.82769775 74.29953766]
[260.09521484 62.95639420]
[245.72979736 67.27323914]
[231.36439514 71.59008026]
[216.99899292 75.90692139]
[211.42042542 80.91610718]
[202.17396545 80.13811493]
[187.69410706 84.05395508]
[173.21426392 87.96979523]
[158.73440552 91.88564301]
[148.46833801 102.67717743]
[133.12683105 98.81079865]
[118.64698029 102.72663879]
[110.64034271 119.48612213]
[89.43851471 123.27437592]
[84.92240906 137.57838440]
[80.40629578 151.88240051]
[75.89018250 166.18641663]
[71.57334137 180.55181885]
[67.45660400 194.97584534]
[73.05258942 206.69894409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[12 111]
[13 110]
[15 109]
[16 108]
[17 107]
[18 106]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[26 47]
[27 46]
[28 45]
[29 43]
[30 42]
[31 41]
[32 40]
[56 104]
[57 103]
[59 101]
[60 100]
[61 99]
[62 98]
[63 96]
[64 95]
[65 94]
[66 93]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
