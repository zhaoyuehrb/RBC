%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGCUAAGCCGUGCAGUCACAGAGGGAACACAGAGCCUAGUUGUAAACGGACAGAGACGAGAGGGGCAAGGGAGGACAGUGGAUGACAGGGAAGACGAGUGGGGGCAGAGCUGCUCAGGACC\
) } def
/len { sequence length } bind def

/coor [
[129.14416504 248.34104919]
[122.77991486 241.76113892]
[117.65783691 234.16778564]
[113.93645477 225.79272461]
[111.73150635 216.89190674]
[111.11233521 207.73773193]
[112.09975433 198.61067200]
[114.66529846 189.79066467]
[118.73209381 181.54859924]
[124.17710876 174.13790894]
[130.83491516 167.78680420]
[123.28057098 154.82795715]
[110.18638611 147.72924805]
[109.92073822 131.91027832]
[102.36638641 118.95142365]
[88.38210297 115.15852356]
[81.08484650 102.64068604]
[84.67475891 88.60292053]
[77.12041473 75.64407349]
[69.56606293 62.68522263]
[62.45993805 56.76491165]
[61.98940659 49.30442047]
[54.76310349 36.15982056]
[40.41118622 40.67804718]
[25.45833015 42.30885315]
[10.47942924 40.99142456]
[-3.94998431 36.77825928]
[-17.27585983 29.83308601]
[-28.98690414 20.42448997]
[-38.63418579 8.91554070]
[-45.84836578 -4.25022840]
[-50.35381699 -18.56590843]
[-51.97916412 -33.48073196]
[-50.66379929 -48.42126465]
[-46.46014786 -62.81344986]
[-39.53156662 -76.10466766]
[-30.14600563 -87.78495789]
[-18.66564751 -97.40657806]
[-25.89195251 -110.55117798]
[-33.11825943 -123.69577789]
[-48.02865219 -128.20332336]
[-55.16990280 -141.63674927]
[-50.78076553 -155.82376099]
[-58.00706863 -168.96835327]
[-65.23337555 -182.11296082]
[-72.45967865 -195.25755310]
[-87.69780731 -194.38450623]
[-101.80240631 -200.21742249]
[-111.97300720 -211.59819031]
[-116.19022369 -226.26713562]
[-113.61672211 -241.31172180]
[-104.76347351 -253.74485779]
[-91.38829803 -261.09793091]
[-76.14685059 -261.91094971]
[-62.06533051 -256.02255249]
[-51.93962860 -244.60182190]
[-47.78021240 -229.91638184]
[-50.41294098 -214.88203430]
[-59.31507874 -202.48385620]
[-52.08877563 -189.33926392]
[-44.86246872 -176.19465637]
[-37.63616562 -163.05006409]
[-23.30586243 -159.15415955]
[-15.79011250 -145.92660522]
[-19.97365761 -130.92208862]
[-12.74735260 -117.77748108]
[-5.52104759 -104.63288116]
[8.75423527 -109.17054749]
[23.64526558 -110.83642578]
[38.57993317 -109.56462860]
[52.98408890 -105.40217590]
[66.30360413 -98.50723267]
[78.02570343 -89.14314270]
[87.69869232 -77.66834259]
[94.94936371 -64.52263641]
[99.49742126 -50.21036530]
[101.16626740 -35.28102493]
[99.88991547 -20.30820465]
[95.71553802 -5.86752176]
[88.80178070 7.48549557]
[79.41270447 19.23678017]
[67.90769958 28.93351746]
[75.13401031 42.07811737]
[82.52491760 55.13087463]
[90.07926178 68.08972168]
[97.63361359 81.04857635]
[111.61789703 84.84147644]
[118.91515350 97.35931396]
[115.32524109 111.39707947]
[122.87958527 124.35592651]
[136.51411438 132.38153076]
[136.23942566 147.27360535]
[143.79377747 160.23245239]
[165.65646362 156.52458191]
[187.06434631 162.15939331]
[204.20983887 176.10238647]
[214.05677795 195.84428406]
[214.87808228 217.85249329]
[206.55856323 238.20333862]
[217.62126160 248.33332825]
[228.68394470 258.46331787]
[239.74664307 268.59332275]
[250.80934143 278.72329712]
[261.87203979 288.85330200]
[277.04907227 285.62255859]
[291.21279907 291.96038818]
[298.91699219 305.42977905]
[297.19924927 320.85150146]
[286.72006226 332.29553223]
[271.50891113 335.36145020]
[257.41473389 328.87033081]
[249.85711670 315.31814575]
[251.74205017 299.91598511]
[240.67935181 289.78601074]
[229.61665344 279.65600586]
[218.55395508 269.52603149]
[207.49125671 259.39602661]
[196.42857361 249.26603699]
[188.90965271 254.41389465]
[180.60340881 258.17370605]
[171.76365662 260.42849731]
[162.66091919 261.10745239]
[153.57408142 260.18792725]
[144.78184509 257.69625854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 93]
[12 92]
[14 90]
[15 89]
[18 86]
[19 85]
[20 84]
[22 83]
[23 82]
[38 67]
[39 66]
[40 65]
[43 62]
[44 61]
[45 60]
[46 59]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
