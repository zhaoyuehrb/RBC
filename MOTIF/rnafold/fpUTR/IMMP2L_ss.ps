%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGAGGGCGGGGUCUGCGCGGGGACUUCCCCCGGGCUGAGCUGCGCAGCGGGGUUUUGGCCAAAUUGGGCGAGGGCACAAAAUAACCACUUACCCCUUCUCACCGAGGAAGAGCGGGAGAAAGGGU\
) } def
/len { sequence length } bind def

/coor [
[119.19557190 142.45661926]
[114.14694977 156.58146667]
[102.92645264 166.53639221]
[88.30082703 169.86669922]
[73.87644958 165.75120544]
[63.21007538 155.20471191]
[58.93181992 140.82777405]
[62.09661102 126.16543579]
[71.92407990 114.83314514]
[85.98975372 109.62532806]
[71.14715576 111.79266357]
[56.30456161 113.95999908]
[43.76715851 123.61008453]
[30.05548668 117.79293060]
[15.21289158 119.96026611]
[0.39756650 122.30677795]
[-14.38832474 124.83213806]
[-26.68888474 134.78234863]
[-40.53711700 129.29821777]
[-55.32300949 131.82357788]
[-67.62357330 141.77378845]
[-81.47180176 136.28965759]
[-96.25769806 138.81501770]
[-111.04358673 141.34036255]
[-125.82947540 143.86572266]
[-140.61537170 146.39108276]
[-151.02380371 158.59944153]
[-167.05285645 157.92959595]
[-176.40643311 144.89540100]
[-171.90925598 129.49557495]
[-157.01116943 123.54353333]
[-143.14071655 131.60519409]
[-128.35482788 129.07983398]
[-113.56893921 126.55447388]
[-98.78305054 124.02912140]
[-83.99716187 121.50376129]
[-72.75418091 111.73417664]
[-57.84836578 117.03768158]
[-43.06247330 114.51232910]
[-31.81949997 104.74274445]
[-16.91368103 110.04624176]
[-2.12778902 107.52088928]
[3.99789500 103.25046539]
[13.04555607 105.11766815]
[27.88815117 102.95033264]
[39.36391449 93.45526886]
[54.13722610 99.11740875]
[68.97982025 96.95007324]
[83.82241821 94.78273773]
[95.28715515 85.11009979]
[99.92240906 70.84425354]
[96.82828522 55.32855225]
[108.11984253 45.61515427]
[112.75509644 31.34930801]
[108.47834015 13.48704052]
[121.86095428 2.20194554]
[126.15013885 -12.17174149]
[130.43933105 -26.54542923]
[134.72851562 -40.91911697]
[139.01770020 -55.29280472]
[143.30688477 -69.66648865]
[147.42207336 -84.09095764]
[151.36268616 -98.56408691]
[155.30329895 -113.03722382]
[143.74078369 -123.00070190]
[137.65419006 -136.99771118]
[138.25199890 -152.24911499]
[145.41552734 -165.72674561]
[157.72245789 -174.75460815]
[172.72923279 -177.54022217]
[187.45623779 -173.53048706]
[198.97943115 -163.52154541]
[205.01086426 -149.50068665]
[204.35299683 -134.25175476]
[197.13644409 -120.80242920]
[184.79405212 -111.82309723]
[169.77642822 -109.09661102]
[165.83583069 -94.62347412]
[161.89521790 -80.15034485]
[163.18658447 -72.79555511]
[157.68057251 -65.37730408]
[153.39138794 -51.00362015]
[149.10220337 -36.62993240]
[144.81301880 -22.25624466]
[140.52383423 -7.88255692]
[136.23464966 6.49113083]
[141.72012329 17.34352875]
[138.18800354 29.39889145]
[127.02094269 35.98456192]
[122.38568878 50.25041199]
[125.81135559 64.74571991]
[114.18825531 75.47950745]
[109.55300140 89.74535370]
[115.26983643 95.48185730]
[117.29907990 104.33338928]
[128.76382446 114.00602722]
[140.22856140 123.67865753]
[151.69329834 133.35128784]
[167.23031616 136.33648682]
[171.96862793 150.45730591]
[183.43336487 160.12994385]
[194.89810181 169.80258179]
[206.36283875 179.47520447]
[217.82757568 189.14784241]
[226.49848938 192.33563232]
[229.44880676 199.19537354]
[240.67646790 209.14221191]
[251.90412903 219.08905029]
[267.02600098 215.60934448]
[281.29199219 221.71359253]
[289.21649170 235.05456543]
[287.75238037 250.50242615]
[277.46264648 262.11712646]
[262.30392456 265.43258667]
[248.10501099 259.17391968]
[240.32569885 245.74777222]
[241.95729065 230.31671143]
[230.72962952 220.36987305]
[219.50196838 210.42303467]
[208.15493774 200.61257935]
[196.69020081 190.93994141]
[185.22547913 181.26730347]
[173.76074219 171.59468079]
[162.29600525 161.92204285]
[147.57901001 159.62870789]
[142.02066040 144.81602478]
[130.55592346 135.14340210]
[119.09118652 125.47076416]
[107.62644958 115.79812622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 49]
[11 48]
[12 47]
[14 45]
[15 44]
[16 42]
[17 41]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[50 93]
[51 92]
[53 90]
[54 89]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 79]
[63 78]
[64 77]
[95 129]
[96 128]
[97 127]
[98 126]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
