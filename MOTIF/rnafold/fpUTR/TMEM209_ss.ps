%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGAGACUACCUAGUUCUUCCGGUAACUUUAGAGCCGCUUGCCGGUGGCCUCCCGCUUGAGCUUGGCUUUGCGCAUGCCCAGAGAGAGUGGCGCGAGCCUGCGUUUUCCGGCCAGAGGAC\
) } def
/len { sequence length } bind def

/coor [
[108.38288116 138.00286865]
[92.30716705 139.11634827]
[76.76987457 133.55903625]
[67.58827972 145.42068481]
[58.40669250 157.28231812]
[49.22510147 169.14395142]
[40.04351425 181.00558472]
[30.86192322 192.86721802]
[28.03656960 201.67668152]
[21.29441261 204.90913391]
[11.81528187 216.53437805]
[9.73075104 232.80049133]
[-5.50073767 238.87782288]
[-18.21033287 228.51451111]
[-15.32349396 212.37144470]
[0.19004747 207.05525208]
[9.66917801 195.43000793]
[19.00028610 183.68563843]
[28.18187714 171.82398987]
[37.36346817 159.96235657]
[46.54505539 148.10072327]
[55.72664642 136.23908997]
[64.90823364 124.37744904]
[58.64559937 110.74736023]
[43.66485214 109.98762512]
[28.68410492 109.22788239]
[13.70335770 108.46814728]
[4.79983664 121.06699371]
[-9.51028442 126.83101654]
[-24.66069794 123.92094421]
[-35.81695938 113.26536560]
[-39.41915131 98.26444244]
[-34.31782532 83.70491028]
[-22.14079285 74.23265839]
[-6.77370453 72.87026215]
[6.87985897 80.05244446]
[14.46309566 93.48739624]
[29.44384384 94.24713898]
[44.42459106 95.00687408]
[59.40533829 95.76660919]
[66.53413391 78.68791962]
[80.16760254 66.95819855]
[97.10719299 62.71425629]
[113.64160919 66.40526581]
[126.35872650 76.79187775]
[139.47392273 69.51235199]
[143.92098999 54.58380508]
[157.32536316 47.38816071]
[171.53004456 51.71975327]
[184.64524841 44.44022369]
[197.76043701 37.16069412]
[210.87564087 29.88116455]
[223.99084473 22.60163498]
[226.54559326 -0.60120136]
[246.57278442 -15.15019608]
[272.19461060 -9.84487152]
[281.37619019 -21.70650673]
[290.55780029 -33.56814194]
[299.73937988 -45.42977905]
[308.92095947 -57.29141617]
[318.10256958 -69.15305328]
[313.91613770 -83.97803497]
[319.20010376 -98.25854492]
[331.73153687 -106.59083557]
[346.58862305 -105.95400238]
[355.77020264 -117.81564331]
[358.09890747 -133.46452332]
[372.00781250 -138.79290771]
[381.18939209 -150.65454102]
[390.37100220 -162.51617432]
[385.11660767 -177.02117920]
[388.56063843 -192.05920410]
[399.60406494 -202.83168030]
[414.72299194 -205.90113831]
[429.09301758 -200.28813171]
[438.12872314 -187.78375244]
[438.94683838 -172.37809753]
[431.28631592 -158.98706055]
[417.59161377 -151.88366699]
[402.23263550 -153.33457947]
[393.05102539 -141.47294617]
[383.86944580 -129.61131287]
[382.19747925 -114.81084442]
[367.63183594 -108.63404846]
[358.45025635 -96.77241516]
[362.79071045 -82.54925537]
[357.86544800 -68.32934570]
[345.36526489 -59.63460541]
[329.96420288 -59.97146225]
[320.78259277 -48.10982513]
[311.60101318 -36.24818802]
[302.41943359 -24.38655281]
[293.23782349 -12.52491760]
[284.05624390 -0.66328156]
[287.99966431 13.80908394]
[301.92947388 19.37332726]
[315.85925293 24.93757248]
[329.78906250 30.50181580]
[345.93322754 27.62127113]
[356.29159546 40.33490753]
[350.20834351 55.56402588]
[333.94140625 57.64221191]
[324.22482300 44.43161011]
[310.29501343 38.86736679]
[296.36523438 33.30312347]
[282.43542480 27.73887825]
[277.25973511 35.62234116]
[270.21960449 41.57043839]
[261.97451782 45.18442154]
[253.25437927 46.27648544]
[244.79525757 44.87637711]
[237.27737427 41.21929169]
[231.27037048 35.71683502]
[218.15516663 42.99636459]
[205.03997803 50.27589417]
[191.92477417 57.55542374]
[178.80957031 64.83495331]
[174.97178650 79.18093109]
[161.77481079 86.75023651]
[146.75346375 82.62754822]
[133.63825989 89.90707397]
[135.81044006 104.31072235]
[131.91897583 118.74887848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[10 17]
[11 16]
[24 40]
[25 39]
[26 38]
[27 37]
[45 121]
[46 120]
[49 117]
[50 116]
[51 115]
[52 114]
[53 113]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[65 85]
[66 84]
[68 82]
[69 81]
[70 80]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
