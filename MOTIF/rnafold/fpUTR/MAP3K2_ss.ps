%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUUAAUAUGCUGAUCUGUUUUAUCUUCUCAGGCCAUAAAGAAUGCUGAUGGGAGAACCAUUUUCCUAAUUUUCAAAUUGUUGAGCUGUUUGCCAUA\
) } def
/len { sequence length } bind def

/coor [
[88.43959045 311.49697876]
[90.02064514 296.58053589]
[98.68209839 284.33392334]
[112.21969604 277.87377930]
[127.18827820 278.84414673]
[139.77906799 286.99868774]
[136.08488464 272.46072388]
[132.39070129 257.92272949]
[128.69651794 243.38473511]
[125.00233459 228.84675598]
[121.30815125 214.30877686]
[107.42794800 208.97229004]
[99.25494385 196.33639526]
[100.09945679 181.13310242]
[109.84687805 169.20439148]
[106.15269470 154.66641235]
[102.45851135 140.12841797]
[94.82154083 140.17547607]
[87.25616455 138.77133179]
[80.03767395 135.94505310]
[73.43285370 131.77789307]
[67.69014740 126.40098572]
[63.03028488 119.99137115]
[59.63788605 112.76618195]
[57.65418625 104.97531891]
[57.17129135 96.89281464]
[58.22811890 88.80718994]
[60.80823517 81.01116180]
[64.83967590 73.79106903]
[70.19679260 67.41631317]
[76.70410156 62.12936401]
[84.14194489 58.13655853]
[76.57469940 45.18523407]
[69.00745392 32.23390961]
[61.44021606 19.28258324]
[46.30786514 20.99487305]
[31.78928566 16.39805603]
[20.39990616 6.28855944]
[14.11300468 -7.58208418]
[14.01782513 -22.81070328]
[20.13085938 -36.75884628]
[31.39298630 -47.00991440]
[45.85297394 -51.78784943]
[61.00554276 -50.26483917]
[74.22541809 -42.70476151]
[83.22217560 -30.41744232]
[86.43707275 -15.53173447]
[83.31311798 -0.62667608]
[74.39154053 11.71534061]
[81.95878601 24.66666603]
[89.52602386 37.61799240]
[97.09326935 50.56931686]
[112.02800751 51.96700668]
[121.86693573 40.64466095]
[131.70587158 29.32231903]
[141.54479980 17.99997330]
[151.38372803 6.67762995]
[161.22265625 -4.64471436]
[171.06158447 -15.96705818]
[180.90051270 -27.28940201]
[186.72593689 -43.21110916]
[203.63806152 -42.02091217]
[207.17611694 -25.44024658]
[192.22285461 -17.45047379]
[182.38392639 -6.12812901]
[172.54499817 5.19421482]
[162.70606995 16.51655960]
[152.86714172 27.83890343]
[143.02821350 39.16124725]
[133.18928528 50.48359299]
[123.35034943 61.80593491]
[136.42060852 75.57264709]
[142.39610291 93.17919159]
[140.48629761 111.28160095]
[131.36691284 126.58304596]
[116.99649048 136.43423462]
[120.69067383 150.97222900]
[124.38485718 165.51020813]
[138.64445496 171.33859253]
[146.64437866 184.29447937]
[145.49501038 199.29924011]
[135.84613037 210.61459351]
[139.54031372 225.15257263]
[143.23449707 239.69055176]
[146.92868042 254.22854614]
[150.62286377 268.76654053]
[154.31704712 283.30450439]
[160.21855164 297.09481812]
[168.18492126 309.80453491]
[183.43733215 314.77883911]
[188.92279053 329.85494995]
[180.43331909 343.46777344]
[164.48133850 345.17468262]
[153.30381775 333.66632080]
[155.47520447 317.77090454]
[147.50883484 305.06118774]
[144.71533203 319.79876709]
[135.08302307 331.29739380]
[121.06323242 336.63079834]
[106.22383118 334.44171143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[15 78]
[16 77]
[17 76]
[32 52]
[33 51]
[34 50]
[35 49]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
