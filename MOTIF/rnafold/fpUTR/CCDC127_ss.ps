%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUACUGAGUGGGGGCGCCGCGCCUGCGCAAAGCGGACCCGCGGACGGUGGCGUUAAGGGAACGCUGAGGUCCCGCGCUCCCCGACCGAGGUAUAUCUCC\
) } def
/len { sequence length } bind def

/coor [
[188.83534241 352.83666992]
[182.93385315 339.04635620]
[177.03234863 325.25607300]
[160.99092102 322.17767334]
[149.78623962 310.06658936]
[147.92555237 293.50653076]
[156.32798767 278.92486572]
[150.00045776 265.32476807]
[143.67292786 251.72468567]
[137.34541321 238.12460327]
[131.01788330 224.52450562]
[118.63387299 216.24890137]
[119.82767487 200.47279358]
[113.50015259 186.87271118]
[107.17262268 173.27262878]
[101.39527893 168.45103455]
[100.86716461 159.14974976]
[94.96566010 145.35945129]
[89.06415558 131.56916809]
[76.35443878 123.60279083]
[61.37075806 124.30239868]
[46.38708115 125.00200653]
[32.88251114 134.30569458]
[18.19122696 127.01883698]
[17.42636490 110.63754272]
[31.37474823 102.01346588]
[45.68747711 110.01833344]
[60.67115402 109.31872559]
[75.65483093 108.61911774]
[76.26985931 96.67852020]
[81.99515533 87.18966675]
[90.78168488 81.98941803]
[89.38399506 67.05467987]
[87.98630524 52.11993790]
[86.58861542 37.18519592]
[74.70408630 27.11565399]
[73.49938202 11.94979382]
[83.17238617 0.68176460]
[81.77469635 -14.25297546]
[80.37701416 -29.18771553]
[69.00912476 -36.60702896]
[64.11503601 -49.05887985]
[67.29460144 -61.85314941]
[77.15136719 -70.31046295]
[76.21881866 -85.28144836]
[75.28627777 -100.25243378]
[74.35372925 -115.22341919]
[64.84114838 -128.58166504]
[71.89864349 -143.38449097]
[88.26606750 -144.40402222]
[97.10601807 -130.59144592]
[89.32471466 -116.15596008]
[90.25725555 -101.18497467]
[91.18980408 -86.21399689]
[92.12234497 -71.24301147]
[105.16515350 -60.75374603]
[106.70162201 -43.75027847]
[95.31175232 -30.58540535]
[96.70944214 -15.65066433]
[98.10713196 -0.71592444]
[109.70292664 8.56163311]
[111.33312988 23.68767166]
[101.52335358 35.78750610]
[102.92104340 50.72224808]
[104.31873322 65.65699005]
[105.71642303 80.59172821]
[120.60519409 92.01845551]
[120.48709106 112.42701721]
[102.85445404 125.66765594]
[108.75595856 139.45794678]
[114.65745544 153.24824524]
[120.77271271 166.94509888]
[127.10023499 180.54518127]
[133.42776489 194.14527893]
[146.26435852 203.39364624]
[144.61796570 218.19697571]
[150.94549561 231.79707336]
[157.27302551 245.39715576]
[163.60054016 258.99725342]
[169.92807007 272.59735107]
[183.71240234 274.25479126]
[194.76251221 282.47912598]
[200.22001648 295.00805664]
[198.74041748 308.48419189]
[190.82263184 319.35458374]
[196.72413635 333.14486694]
[202.62564087 346.93515015]
[208.95317078 360.53524780]
[215.70059204 373.93197632]
[222.44802856 387.32870483]
[237.53251648 392.04394531]
[244.79057312 406.08303833]
[239.91610718 421.11685181]
[225.80105591 428.22604370]
[210.81964111 423.19293213]
[203.86004639 409.00350952]
[209.05130005 394.07611084]
[202.30387878 380.67941284]
[195.55644226 367.28268433]
[191.21791077 364.92303467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[7 80]
[8 79]
[9 78]
[10 77]
[11 76]
[13 74]
[14 73]
[15 72]
[17 71]
[18 70]
[19 69]
[20 29]
[21 28]
[22 27]
[32 66]
[33 65]
[34 64]
[35 63]
[38 60]
[39 59]
[40 58]
[44 55]
[45 54]
[46 53]
[47 52]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
