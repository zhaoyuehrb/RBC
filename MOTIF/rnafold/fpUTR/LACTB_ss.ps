%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:47:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUCCGCCCCGCGCCGCGGCUGGCAGGGUGUGCGUGAGUUUGGUGGCGGCCGGCUGUGCAGAGACGCC\
) } def
/len { sequence length } bind def

/coor [
[143.91252136 212.10565186]
[135.22442627 209.60633850]
[127.72985077 204.48895264]
[122.19718933 197.25186157]
[119.20190430 188.61210632]
[119.06669617 179.43424988]
[121.82690430 170.64398193]
[127.22475433 163.13467407]
[119.81811523 150.09082031]
[112.41148376 137.04698181]
[105.00485229 124.00314331]
[97.59822083 110.95930481]
[89.91265106 98.07784271]
[81.95169830 85.36473083]
[73.99074554 72.65161896]
[64.96638489 60.66992569]
[54.94542694 49.50836945]
[44.92446899 38.34680939]
[34.66567993 27.40344620]
[24.17380333 16.68334389]
[13.68192863 5.96324396]
[3.19005346 -4.75685692]
[-11.99223423 -9.20755386]
[-15.36478806 -23.71531487]
[-25.85666275 -34.43541718]
[-41.78750229 -38.32648849]
[-46.12278748 -54.14221954]
[-34.40275574 -65.61273956]
[-18.68396568 -60.93815994]
[-15.13656235 -44.92729187]
[-4.64468765 -34.20719147]
[9.78715134 -30.52326584]
[13.91015434 -15.24873161]
[24.40202904 -4.52863073]
[34.89390564 6.19146967]
[45.38578033 16.91157150]
[52.53284836 19.56853485]
[56.08602905 28.32585144]
[66.10698700 39.48741150]
[76.12794495 50.64896774]
[79.22996521 50.75935364]
[82.45779419 52.30205154]
[85.18164062 55.32403564]
[86.77193451 59.60939789]
[86.70385742 64.69066620]
[94.66481018 77.40377808]
[102.62576294 90.11689758]
[109.43839264 94.91151428]
[110.64205933 103.55267334]
[118.04869080 116.59651184]
[125.45532990 129.64035034]
[132.86195374 142.68418884]
[140.26858521 155.72802734]
[162.20594788 159.03353882]
[175.24195862 176.67463684]
[172.03451538 198.12123108]
[182.52639771 208.84133911]
[193.01826477 219.56143188]
[201.52813721 223.67213440]
[203.71852112 230.97570801]
[213.73947144 242.13726807]
[229.53239441 242.73666382]
[240.21441650 254.38441467]
[239.44807434 270.17010498]
[227.68804932 280.72839355]
[211.91133118 279.79519653]
[201.47798157 267.92419434]
[202.57791138 252.15823364]
[192.55696106 240.99667358]
[182.29817200 230.05331421]
[171.80628967 219.33320618]
[161.31442261 208.61311340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 47]
[14 46]
[15 45]
[16 40]
[17 39]
[18 38]
[19 36]
[20 35]
[21 34]
[22 33]
[24 31]
[25 30]
[56 72]
[57 71]
[58 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
