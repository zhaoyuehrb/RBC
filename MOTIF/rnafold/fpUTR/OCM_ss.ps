%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGGGCCUGGGAAGAUGUGUUUCCCCUGGAUGUGCACAUUCCUGUUUGUGGCUUAUCGCCUCUCAUUUAUUCUGUGUGAGUAGGUAGAAA\
) } def
/len { sequence length } bind def

/coor [
[188.25112915 168.02784729]
[186.15010071 161.40081787]
[186.10707092 154.40776062]
[172.87078857 147.35076904]
[159.63452148 140.29379272]
[146.39823914 133.23681641]
[133.16197205 126.17982483]
[119.92568970 119.12284851]
[106.68941498 112.06586456]
[92.90505219 106.15052795]
[78.67084503 101.41899109]
[64.43663788 96.68746185]
[50.20243073 91.95593262]
[35.96822357 87.22440338]
[29.09223747 88.22917938]
[23.65103531 85.83123779]
[20.95178986 81.66292572]
[7.06948137 75.98124695]
[-6.81282663 70.29956055]
[-20.69513512 64.61787415]
[-34.57744217 58.93619537]
[-48.45975113 53.25451279]
[-68.11674500 57.04590988]
[-79.61656189 41.65530777]
[-93.85076904 36.92377853]
[-108.08497620 32.19224548]
[-125.02270508 32.93368149]
[-130.42399597 16.86313629]
[-116.47671509 7.22416210]
[-103.35344696 17.95804024]
[-89.11923981 22.68957138]
[-74.88503265 27.42110062]
[-65.96524811 21.93859482]
[-55.28275681 22.39311218]
[-46.50328064 28.87720871]
[-42.77806854 39.37220383]
[-28.89575958 45.05388641]
[-15.01345158 50.73556900]
[-1.13114357 56.41725159]
[12.75116444 62.09893799]
[26.63347244 67.78061676]
[40.69975281 72.99019623]
[54.93395996 77.72172546]
[69.16816711 82.45326233]
[83.40237427 87.18479156]
[97.63658142 91.91632080]
[100.09884644 90.68275452]
[103.07344055 90.25996399]
[106.27916718 90.83569336]
[109.37193298 92.49787903]
[111.98025513 95.21509552]
[113.74639893 98.82958984]
[126.98267365 105.88656616]
[140.21894836 112.94355011]
[153.45523071 120.00053406]
[166.69149780 127.05751801]
[179.92778015 134.11450195]
[193.16404724 141.17147827]
[217.27207947 136.91052246]
[231.27612305 156.18881226]
[245.79728699 159.94860840]
[260.31845093 163.70838928]
[274.83959961 167.46818542]
[289.42218018 170.98217773]
[304.06204224 174.24937439]
[318.70190430 177.51658630]
[333.34173584 180.78378296]
[347.98159790 184.05099487]
[358.87631226 173.12812805]
[373.95172119 169.85166931]
[388.39736938 175.26712036]
[397.60366821 187.64645386]
[398.63290405 203.03944397]
[391.15670776 216.53425598]
[377.56066895 223.82473755]
[362.18322754 222.58451843]
[349.93130493 213.20936584]
[344.71438599 198.69084167]
[330.07455444 195.42364502]
[315.43469238 192.15643311]
[300.79483032 188.88923645]
[286.15496826 185.62203979]
[278.79016113 187.27182007]
[271.07980347 181.98933411]
[256.55865479 178.22955322]
[242.03749084 174.46975708]
[227.51634216 170.70997620]
[223.07949829 175.68296814]
[217.33297729 179.13883972]
[210.78054810 180.74626160]
[204.00509644 180.33715820]
[197.61682129 177.92401123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[24 32]
[25 31]
[26 30]
[60 87]
[61 86]
[62 85]
[63 84]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
