%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGUAGCUUUGCAACUGGCUUUGGGGACUUCCGAAAGCUACCAGCACUGCACUGUGAGACUCUCAUCCCUGAGCUGAAUUCAUCUGAUUCGACGGCAAGCUUUGGUGAGAACAUAGAUAUAUUUCUGAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[61.61893463 122.39089966]
[58.13232422 114.88476562]
[43.35361862 117.45183563]
[31.08119011 127.43672943]
[17.21753502 121.99169922]
[2.43882918 124.55877686]
[-12.33987617 127.12585449]
[-20.34205818 131.71453857]
[-27.48658180 129.57829285]
[-42.32026291 131.80583191]
[-51.71207809 144.23287964]
[-66.78726959 146.28060913]
[-78.57668304 137.25036621]
[-93.41036987 139.47789001]
[-108.24404907 141.70542908]
[-115.46398163 155.31347656]
[-129.15235901 161.98292542]
[-143.96798706 159.34452820]
[-154.26582336 148.61640930]
[-169.09950256 150.84393311]
[-183.93318176 153.07147217]
[-198.76687622 155.29901123]
[-213.60055542 157.52655029]
[-228.43423462 159.75407410]
[-243.26791382 161.98161316]
[-255.76606750 171.68247986]
[-269.50122070 165.92100525]
[-284.33489990 168.14854431]
[-294.98672485 180.14514160]
[-310.99905396 179.15313721]
[-320.08865356 165.93350220]
[-315.28271484 150.62719727]
[-300.26797485 144.97593689]
[-286.56243896 153.31486511]
[-271.72875977 151.08732605]
[-260.29162598 141.54577637]
[-245.49545288 147.14793396]
[-230.66177368 144.92039490]
[-215.82807922 142.69287109]
[-200.99440002 140.46533203]
[-186.16072083 138.23779297]
[-171.32704163 136.01025391]
[-156.49336243 133.78273010]
[-149.80068970 120.50318146]
[-136.41345215 113.62962341]
[-121.36991119 115.98448181]
[-110.47158051 126.87174988]
[-95.63790131 124.64421844]
[-80.80422211 122.41667938]
[-72.18707275 110.32203674]
[-57.17534637 107.85168457]
[-44.54779816 116.97214508]
[-29.71411705 114.74461365]
[-14.90695190 112.34715271]
[-0.12824674 109.78007507]
[14.65045834 107.21299744]
[25.86581612 97.41172028]
[40.78654480 102.67313385]
[55.56524658 100.10605621]
[60.21921158 80.20234680]
[73.29122162 64.48803711]
[92.01510620 56.28844452]
[112.42868805 57.33870316]
[130.21221924 67.41655731]
[142.12123108 58.29651260]
[154.03025818 49.17646790]
[165.93927002 40.05641937]
[177.84829712 30.93637276]
[189.75730896 21.81632614]
[201.66633606 12.69627953]
[202.48806763 1.73947859]
[209.10855103 -6.75139141]
[219.11564636 -10.08010674]
[229.07711792 -7.36250114]
[241.39173889 -15.92697048]
[253.70635986 -24.49143982]
[266.02096558 -33.05590820]
[278.33560181 -41.62037659]
[278.12820435 -53.61169434]
[283.71505737 -64.08773804]
[293.58615112 -70.46556091]
[305.19235229 -71.23737335]
[315.60317993 -66.32551575]
[328.29751587 -74.31639862]
[335.85458374 -88.21608734]
[350.74737549 -88.44824219]
[363.44168091 -96.43912506]
[366.70101929 -111.90367126]
[379.98623657 -120.46395874]
[395.41546631 -117.04130554]
[403.83480835 -103.66632080]
[400.24923706 -88.27414703]
[386.78598022 -79.99668121]
[371.43255615 -83.74479675]
[358.73825073 -75.75392151]
[352.08917236 -62.42579269]
[336.28839111 -61.62207794]
[323.59405518 -53.63119507]
[320.68603516 -35.62239075]
[305.32556152 -25.20630455]
[286.90005493 -29.30575752]
[274.58544922 -20.74128914]
[262.27081299 -12.17681885]
[249.95620728 -3.61235023]
[237.64158630 4.95211887]
[230.82177734 22.99062920]
[210.78637695 24.60529900]
[198.87736511 33.72534561]
[186.96833801 42.84539413]
[175.05932617 51.96543884]
[163.15029907 61.08548737]
[151.24128723 70.20553589]
[139.33226013 79.32557678]
[143.81340027 92.59429932]
[143.94218445 106.59868622]
[139.70582581 119.94757080]
[131.52516174 131.31489563]
[140.23025513 143.53051758]
[148.93536377 155.74612427]
[157.64045715 167.96174622]
[173.26635742 170.32965088]
[182.57377625 183.10256958]
[180.04080200 198.70254517]
[167.17018127 207.87440491]
[151.59785461 205.17663574]
[142.56257629 192.20977783]
[145.42483521 176.66683960]
[136.71974182 164.45121765]
[128.01464844 152.23561096]
[119.30954742 140.01998901]
[111.55292511 142.90673828]
[103.39550018 144.30494690]
[95.12028503 144.16612244]
[87.01435089 142.49507141]
[79.35892487 139.34977722]
[72.41958618 134.83934021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[5 56]
[6 55]
[7 54]
[9 53]
[10 52]
[13 49]
[14 48]
[15 47]
[19 43]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
[70 107]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[83 98]
[84 97]
[86 95]
[87 94]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
