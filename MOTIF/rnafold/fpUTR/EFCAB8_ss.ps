%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGAGAUGGGAGUUGGAAAGUGUUAGCACUUUGCCAGACUUUGCCAGCAAGAUUAACUGAGGAGAUCAAAUUGAGUCAGGGUCAAGGCUA\
) } def
/len { sequence length } bind def

/coor [
[77.45740509 112.38945007]
[90.55532837 105.07936859]
[76.14402008 100.91831970]
[61.73271561 96.75727844]
[47.32141113 92.59623718]
[32.91010666 88.43518829]
[18.49880028 84.27414703]
[10.47536945 91.82052612]
[0.08609968 95.22488403]
[-10.68491554 93.91015625]
[-19.81149483 88.19360352]
[-25.60651398 79.21392059]
[-27.03364372 68.70500946]
[-40.96195221 63.13704681]
[-54.89026260 57.56908798]
[-68.81857300 52.00112915]
[-82.74688721 46.43317032]
[-96.76535034 41.09626389]
[-110.87014008 35.99186707]
[-124.97493744 30.88746834]
[-139.16218567 26.01697731]
[-153.42803955 21.38172150]
[-167.69389343 16.74646759]
[-181.95973206 12.11121178]
[-196.22558594 7.47595739]
[-210.49142456 2.84070230]
[-226.41098022 6.77768135]
[-237.58374023 -5.22654819]
[-232.51612854 -20.82306480]
[-216.42126465 -23.96750832]
[-205.85617065 -11.42514515]
[-191.59033203 -6.78989029]
[-177.32447815 -2.15463567]
[-163.05863953 2.48061943]
[-148.79278564 7.11587429]
[-134.52693176 11.75112915]
[-127.04511261 10.80519295]
[-119.87053680 16.78267860]
[-105.76574707 21.88707542]
[-91.66095734 26.99147415]
[-84.15194702 26.29342842]
[-77.17892456 32.50485992]
[-63.25061417 38.07281876]
[-49.32230377 43.64077759]
[-35.39399338 49.20873642]
[-21.46568489 54.77669525]
[-4.43080616 45.69271851]
[14.17524719 51.86294937]
[22.65984344 69.86284637]
[37.07114792 74.02388763]
[51.48245239 78.18492889]
[65.89376068 82.34597778]
[80.30506134 86.50701904]
[94.71636963 90.66806030]
[109.58532715 92.64644623]
[124.58328247 92.39843750]
[139.58122253 92.15042877]
[154.57917786 91.90242004]
[160.72334290 88.68381500]
[166.64198303 89.13893127]
[170.56889343 92.16682434]
[185.55044556 92.91058350]
[200.53199768 93.65433502]
[215.51354980 94.39809418]
[225.27706909 82.48257446]
[240.01248169 78.64573669]
[254.01602173 84.15617371]
[261.99407959 96.70561218]
[276.97564697 97.44937134]
[291.95718384 98.19312286]
[308.07662964 92.93958282]
[317.58715820 106.97475433]
[306.73327637 119.99893951]
[291.21343994 113.17467499]
[276.23187256 112.43091583]
[261.25033569 111.68716431]
[252.06852722 123.38469696]
[237.58805847 127.48105621]
[223.30513000 122.20360565]
[214.76979065 109.37964630]
[199.78823853 108.63588715]
[184.80668640 107.89212799]
[169.82513428 107.14837646]
[154.82719421 106.90036774]
[139.82923889 107.14837646]
[124.83129120 107.39638519]
[109.83334351 107.64439392]
[120.56424713 118.12521362]
[124.15270233 132.68965149]
[119.51912689 146.95605469]
[108.05751801 156.63238525]
[93.21607208 158.80757141]
[79.45979309 152.82719421]
[70.92722321 140.49044800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 40]
[19 39]
[20 38]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[55 87]
[56 86]
[57 85]
[58 84]
[61 83]
[62 82]
[63 81]
[64 80]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
