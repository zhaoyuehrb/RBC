%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACUGGCUGCUCUGAAAAGCCAUCUUUGCAUUGUUCCUCAUCCGCCUCCUUGCUCGCCGCAGCCGCCUCCGCCGCGCGCCUCCUCCGCCGCCGCGGACUCCGGCAGCUUUAUCGCCAGAGUCCCUGAACUCUCGCUUUCUUUUUAAUCCCCUGCAUCGGAUCACCGGCGUGCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[19.48015404 303.68359375]
[4.47392273 315.68899536]
[-12.46152115 324.76547241]
[-30.76147270 330.61172485]
[-49.81597519 333.03411865]
[-68.99014282 331.95312500]
[-87.64532471 327.40597534]
[-105.16036224 319.54522705]
[-113.42688751 332.06179810]
[-121.69341278 344.57836914]
[-129.95993042 357.09497070]
[-138.22645569 369.61154175]
[-131.89947510 383.68182373]
[-134.20645142 398.93569946]
[-144.41122437 410.50576782]
[-159.25750732 414.70001221]
[-174.00788879 410.18005371]
[-183.95558167 398.38824463]
[-185.92631531 383.08728027]
[-179.29122925 369.15963745]
[-166.16757202 361.04959106]
[-150.74302673 361.34500122]
[-142.47650146 348.82843018]
[-134.20997620 336.31185913]
[-125.94345856 323.79528809]
[-117.67693329 311.27871704]
[-126.34222412 303.85247803]
[-134.15261841 295.53048706]
[-141.01603699 286.41052246]
[-146.85150146 276.59982300]
[-151.59014893 266.21380615]
[-155.17601013 255.37461853]
[-157.56665039 244.20979309]
[-158.73374939 232.85073853]
[-158.66334534 221.43112183]
[-157.35606384 210.08538818]
[-154.82707214 198.94712830]
[-151.10595703 188.14749146]
[-146.23632812 177.81369019]
[-140.27529907 168.06747437]
[-133.29286194 159.02365112]
[-125.37107849 150.78883362]
[-116.60301971 143.46009827]
[-107.09178925 137.12388611]
[-96.94922638 131.85494995]
[-86.29463959 127.71551514]
[-75.25336456 124.75448608]
[-63.95532990 123.00694275]
[-52.53350449 122.49365234]
[-41.12233734 123.22086334]
[-29.85616493 125.18022919]
[-18.86765289 128.34889221]
[-8.28621292 132.68975830]
[1.76351154 138.15190125]
[11.16311741 144.67121887]
[19.80183411 152.17112732]
[30.98340225 142.17250061]
[35.31330109 127.92115021]
[50.75796127 124.48997498]
[61.93952942 114.49134827]
[73.12110138 104.49272156]
[84.30266571 94.49409485]
[89.35222626 80.36957550]
[87.04386902 65.54825592]
[77.27501678 53.10317230]
[82.96154022 39.33681107]
[80.65318298 24.51549339]
[78.34482574 9.69417381]
[76.03646851 -5.12714434]
[61.72965622 -15.17295933]
[59.15307236 -32.12228775]
[69.41639709 -45.43114853]
[66.85395813 -60.21065521]
[64.29151154 -74.99016571]
[61.72906113 -89.76966858]
[59.16661453 -104.54917908]
[49.18556976 -116.82473755]
[54.63494110 -130.68669128]
[52.07249451 -145.46620178]
[49.51004791 -160.24569702]
[44.95022202 -168.19000244]
[47.03274536 -175.30075073]
[44.72438812 -190.12207031]
[31.24845505 -198.05511475]
[26.07331467 -212.81153870]
[31.64250755 -227.42379761]
[45.32643127 -234.99243164]
[60.66395569 -231.94377136]
[70.41316986 -219.71728516]
[69.97079468 -204.08596802]
[59.54570389 -192.43041992]
[61.85406494 -177.60911560]
[64.28955841 -162.80815125]
[66.85200500 -148.02864075]
[69.41445160 -133.24913025]
[79.21221161 -122.03070831]
[73.94612122 -107.11162567]
[76.50856781 -92.33211517]
[79.07101440 -77.55261230]
[81.63346100 -62.77310181]
[84.19590759 -47.99359131]
[95.67564392 -42.10991669]
[101.75438690 -30.51194572]
[100.00990295 -17.33776855]
[90.85778809 -7.43550301]
[93.16614532 7.38581562]
[95.47450256 22.20713425]
[97.78285980 37.02845383]
[107.38660431 48.41341782]
[101.86518860 63.23989868]
[104.17354584 78.06121826]
[110.53617859 82.03197479]
[111.05100250 67.04080963]
[124.29109192 59.99099350]
[137.01651001 67.93226624]
[136.50196838 82.92343903]
[123.26144409 89.97348022]
[129.62408447 93.94423676]
[143.95223999 89.50533295]
[154.84463501 78.03073883]
[169.29153442 81.65515137]
[183.61968994 77.21625519]
[197.94786072 72.77735138]
[212.27601624 68.33845520]
[226.60417175 63.89955139]
[233.74922180 49.80260849]
[248.79536438 44.96635056]
[262.81597900 52.26004410]
[267.49288940 67.35646820]
[260.05136108 81.29918671]
[244.90634155 85.81622314]
[231.04307556 78.22771454]
[216.71492004 82.66661072]
[202.38674927 87.10551453]
[188.05859375 91.54441071]
[173.73043823 95.98331451]
[163.86288452 107.14040375]
[148.39114380 103.83349609]
[134.06297302 108.27239227]
[132.59190369 115.62670898]
[147.30053711 118.56884766]
[162.00917053 121.51098633]
[176.71780396 124.45312500]
[191.42639160 127.39550781]
[188.48376465 142.10403442]
[173.77566528 139.16175842]
[159.06703186 136.21961975]
[144.35839844 133.27748108]
[129.64978027 130.33534241]
[128.17871094 137.68965149]
[139.69691467 147.29855347]
[151.21511841 156.90745544]
[162.73332214 166.51634216]
[177.74514771 162.58894348]
[192.18617249 168.26667786]
[200.50350952 181.36634827]
[199.49897766 196.85087585]
[189.55885315 208.76612854]
[174.50529480 212.53047180]
[160.12672424 206.69641113]
[151.95198059 193.50727844]
[153.12442017 178.03456116]
[141.60621643 168.42565918]
[130.08801270 158.81675720]
[118.56980896 149.20785522]
[105.71482849 143.30929565]
[96.58168793 134.60585022]
[91.66516876 124.48402405]
[91.02667236 114.38387299]
[94.30129242 105.67565918]
[83.11972809 115.67428589]
[71.93815613 125.67291260]
[60.75658798 135.67153931]
[55.62691116 150.63806152]
[40.98202896 153.35408020]
[29.80046082 163.35270691]
[40.12186050 179.59416199]
[47.31819916 197.43804932]
[51.15084839 216.28950500]
[51.49330139 235.52030945]
[48.33532715 254.48985291]
[41.78328705 272.56643677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[56 176]
[57 175]
[59 173]
[60 172]
[61 171]
[62 170]
[63 111]
[64 110]
[66 108]
[67 107]
[68 106]
[69 105]
[72 101]
[73 100]
[74 99]
[75 98]
[76 97]
[78 95]
[79 94]
[80 93]
[82 92]
[83 91]
[118 139]
[119 138]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[150 165]
[151 164]
[152 163]
[153 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
