%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCUGGAGCUUGGAGGAGAAGUCUGAACUAAGGAUAAACUAAAGAGAGGCCAAUGAGACUUGAACCCUGAGCCUAAGUUGUCACCAGCAGGACUGAUGUGCACACAGAAGGAAUGAAGU\
) } def
/len { sequence length } bind def

/coor [
[33.44261169 137.53161621]
[37.55048752 123.10506439]
[46.46302032 111.03996277]
[59.04491043 102.87319183]
[73.69342804 99.64506531]
[88.54036713 101.76603699]
[75.88372803 93.71559906]
[63.22709656 85.66515350]
[54.19047165 83.66144562]
[50.35194778 77.24094391]
[37.90679550 68.86729431]
[25.46163940 60.49363327]
[13.01648331 52.11997986]
[0.57132858 43.74632263]
[-11.87382698 35.37266541]
[-20.85586548 33.13694763]
[-24.52779961 26.61974335]
[-36.75322342 17.92842674]
[-53.88375092 21.18029022]
[-67.82659149 11.27998257]
[-70.30335999 -5.30012846]
[-82.74851227 -13.67378426]
[-95.19367218 -22.04743958]
[-107.63882446 -30.42109680]
[-120.08397675 -38.79475021]
[-132.52912903 -47.16840744]
[-143.13655090 -36.49698257]
[-155.57200623 -28.02609444]
[-169.38597107 -22.06195641]
[-184.07907104 -18.82017136]
[-199.12016296 -18.41792488]
[-213.96554565 -20.86976242]
[-228.07852173 -26.08704758]
[-240.94895935 -33.88117981]
[-252.11157227 -43.97040939]
[-261.16284180 -55.99000931]
[-267.77560425 -69.50548553]
[-271.71075439 -84.02825928]
[-272.82608032 -99.03334808]
[-271.08126831 -113.97831726]
[-266.53936768 -128.32292175]
[-259.36456299 -141.54859924]
[-249.81623840 -153.17727661]
[-238.23954773 -162.78855896]
[-225.05299377 -170.03501892]
[-210.73324585 -174.65470886]
[-195.79797363 -176.48060608]
[-180.78704834 -175.44671631]
[-166.24313354 -171.59042358]
[-152.69197083 -165.05111694]
[-140.62342834 -156.06518555]
[-130.47378540 -144.95748901]
[-122.60991669 -132.12954712]
[-117.31612396 -118.04507446]
[-114.78376770 -103.21322632]
[-115.10438538 -88.17016602]
[-118.26638794 -73.45968628]
[-124.15547943 -59.61356354]
[-111.71032715 -51.23990631]
[-99.26516724 -42.86625290]
[-86.82001495 -34.49259567]
[-74.37486267 -26.11894035]
[-61.92970276 -17.74528313]
[-49.68408966 -21.97029686]
[-37.06315231 -18.28030396]
[-28.77960205 -7.81790638]
[-28.06190872 5.70300198]
[-15.83648300 14.39431858]
[-3.50017071 22.92751122]
[8.94498444 31.30116844]
[21.39014053 39.67482376]
[33.83529663 48.04848099]
[46.28044891 56.42213440]
[58.72560501 64.79579163]
[71.27754211 73.00852203]
[83.93417358 81.05896759]
[96.59080505 89.10940552]
[100.42362976 72.23583984]
[114.46008301 58.31366730]
[128.49583435 53.02238464]
[142.53158569 47.73110580]
[156.56733704 42.43982315]
[166.53993225 29.42140007]
[182.76321411 31.81671524]
[188.54803467 47.16167450]
[177.94349670 59.67069626]
[161.85862732 56.47557449]
[147.82286072 61.76685715]
[133.78710938 67.05813599]
[119.75136566 72.34941864]
[118.78837585 79.78733826]
[133.66418457 81.71354675]
[131.73774719 96.58932495]
[116.86240387 94.66317749]
[115.89941406 102.10109711]
[128.12483215 110.79241943]
[143.51118469 108.36381531]
[155.78569031 117.35220337]
[158.00617981 132.03569031]
[170.23159790 140.72702026]
[182.45701599 149.41833496]
[198.82525635 150.42491150]
[205.89445496 165.22215271]
[196.39244080 178.58792114]
[180.09407043 176.77265930]
[173.76570129 161.64375305]
[161.54028320 152.95243835]
[149.31484985 144.26112366]
[134.71693420 146.98805237]
[122.19480133 138.34797668]
[119.43352509 123.01783752]
[107.20809937 114.32652283]
[114.76686859 127.28279114]
[117.29425049 142.06834412]
[114.46829224 156.79972839]
[106.64897919 169.60044861]
[94.83234406 178.83988953]
[80.52364349 183.34111023]
[65.54554749 182.53073120]
[51.80601883 176.51197815]
[41.05523682 166.05155945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[17 68]
[18 67]
[21 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[79 90]
[80 89]
[81 88]
[82 87]
[95 112]
[96 111]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
