%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:25 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SGCA)
} def

/sequence { (\
CUCUCCUCCCUGCCCCCUGUCUCUGUCACUCACCGGGCGGGCCAGGCCGGGCAGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 50 0.005840152 ubox
1 51 0.008005390 ubox
1 54 0.074908530 ubox
2 49 0.005756529 ubox
2 50 0.008003833 ubox
2 51 0.003761468 ubox
2 53 0.075558568 ubox
3 49 0.008032799 ubox
3 50 0.004858336 ubox
3 51 0.028517924 ubox
3 54 0.052403958 ubox
4 49 0.004457187 ubox
4 50 0.016548844 ubox
4 51 0.082868987 ubox
4 53 0.052591304 ubox
5 46 0.011048622 ubox
5 49 0.016274857 ubox
5 50 0.097861037 ubox
5 51 0.050971030 ubox
6 45 0.011096672 ubox
6 49 0.097883989 ubox
6 50 0.051077009 ubox
6 51 0.016468664 ubox
6 54 0.109389240 ubox
7 44 0.010738761 ubox
7 49 0.049002702 ubox
7 50 0.016416147 ubox
7 53 0.110031169 ubox
8 46 0.014130120 ubox
8 49 0.017441004 ubox
8 50 0.003698963 ubox
8 51 0.123271249 ubox
9 41 0.011399496 ubox
9 45 0.013760197 ubox
9 46 0.112060746 ubox
9 49 0.003511385 ubox
9 50 0.123553520 ubox
9 51 0.019388882 ubox
10 40 0.011532409 ubox
10 45 0.112221326 ubox
10 49 0.123462878 ubox
10 50 0.019441878 ubox
10 54 0.972046596 ubox
11 39 0.011545356 ubox
11 44 0.111929570 ubox
11 49 0.019309710 ubox
11 53 0.983402650 ubox
12 38 0.011853732 ubox
12 42 0.078496135 ubox
12 43 0.081394961 ubox
12 47 0.124071942 ubox
12 48 0.015765531 ubox
12 52 0.985581431 ubox
13 37 0.011849217 ubox
13 41 0.109852023 ubox
13 46 0.124683281 ubox
13 50 0.003958997 ubox
13 51 0.985574294 ubox
14 36 0.011843891 ubox
14 40 0.109848572 ubox
14 41 0.010018039 ubox
14 45 0.124565199 ubox
14 46 0.006055177 ubox
14 49 0.005571014 ubox
14 50 0.985551162 ubox
14 51 0.003972099 ubox
15 35 0.011827466 ubox
15 39 0.109795159 ubox
15 40 0.009936996 ubox
15 41 0.018499084 ubox
15 45 0.006648280 ubox
15 46 0.003501888 ubox
15 49 0.980406588 ubox
15 50 0.005565269 ubox
16 36 0.003964696 ubox
16 37 0.109243966 ubox
16 39 0.009711253 ubox
16 40 0.018346736 ubox
16 41 0.129129693 ubox
16 45 0.003696963 ubox
16 46 0.978680473 ubox
16 49 0.005559555 ubox
17 35 0.004036020 ubox
17 36 0.109254294 ubox
17 37 0.003704339 ubox
17 39 0.018162774 ubox
17 40 0.129247733 ubox
17 45 0.983824712 ubox
17 46 0.014839856 ubox
18 32 0.010669292 ubox
18 35 0.108943539 ubox
18 36 0.003454321 ubox
18 39 0.129231310 ubox
18 44 0.983470016 ubox
18 45 0.014264049 ubox
19 29 0.005212114 ubox
19 31 0.011193166 ubox
19 33 0.016825501 ubox
19 34 0.106332080 ubox
19 38 0.131234251 ubox
19 42 0.088505586 ubox
19 43 0.977632227 ubox
19 47 0.048752182 ubox
20 28 0.005517039 ubox
20 32 0.021619360 ubox
20 36 0.003897121 ubox
20 37 0.123960810 ubox
20 40 0.010072752 ubox
20 41 0.106320032 ubox
20 46 0.048746372 ubox
21 35 0.005566517 ubox
21 36 0.122918929 ubox
21 37 0.042628574 ubox
21 39 0.012338806 ubox
21 40 0.090575797 ubox
21 41 0.825166600 ubox
21 45 0.048678326 ubox
22 35 0.107756082 ubox
22 36 0.040875780 ubox
22 37 0.023796516 ubox
22 39 0.068895631 ubox
22 40 0.391798431 ubox
22 41 0.485329595 ubox
22 44 0.041712366 ubox
23 35 0.065213358 ubox
23 36 0.045346605 ubox
23 37 0.011965335 ubox
23 39 0.385019809 ubox
23 40 0.898266453 ubox
23 41 0.017477324 ubox
24 32 0.103109187 ubox
24 35 0.046754782 ubox
24 36 0.011270079 ubox
24 39 0.901845059 ubox
24 40 0.012549064 ubox
25 31 0.106849598 ubox
25 33 0.081911621 ubox
25 34 0.050552732 ubox
25 38 0.982520279 ubox
25 42 0.016566575 ubox
26 32 0.078902447 ubox
26 36 0.057143265 ubox
26 37 0.981464048 ubox
26 40 0.009830550 ubox
26 41 0.016454095 ubox
27 35 0.066091891 ubox
27 36 0.979176677 ubox
27 39 0.011792649 ubox
27 40 0.016256692 ubox
29 36 0.041511716 ubox
29 37 0.028925436 ubox
30 35 0.043677269 ubox
30 36 0.031047490 ubox
30 37 0.005920190 ubox
31 35 0.039704477 ubox
31 36 0.011778901 ubox
40 48 0.004245290 ubox
41 47 0.004562310 ubox
42 46 0.004596392 ubox
45 56 0.003358913 ubox
46 55 0.003459673 ubox
47 54 0.003467998 ubox
49 56 0.005591356 ubox
50 55 0.005646347 ubox
10 54 0.9500000 lbox
11 53 0.9500000 lbox
12 52 0.9500000 lbox
13 51 0.9500000 lbox
14 50 0.9500000 lbox
15 49 0.9500000 lbox
16 46 0.9500000 lbox
17 45 0.9500000 lbox
18 44 0.9500000 lbox
19 43 0.9500000 lbox
22 41 0.9500000 lbox
23 40 0.9500000 lbox
24 39 0.9500000 lbox
25 38 0.9500000 lbox
26 37 0.9500000 lbox
27 36 0.9500000 lbox
showpage
end
%%EOF
