%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGGCGGCGGCGCCCGUAGGAUGCAGGGAUCGCUCCCCCGGGGCCGCUGAGCCUGCGCCCAGUGCCCCGAGCCCCGCGCCGAGCCGAGUCCGCGCCAAGCAGCAGCCGCCCACCCCGGGGCCCGGCCGGGGGACCAGCAGCUUCCCCACAGGCAACGUGAGGAGAGCCUGUGCCCAGAAGCAGGAUGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[37.57466507 425.04946899]
[40.25291443 410.29052734]
[47.93445587 397.40664673]
[59.64505768 388.03240967]
[66.39343262 374.63616943]
[54.04867172 383.15713501]
[41.70391464 391.67810059]
[29.49802971 400.39685059]
[17.43419075 409.31109619]
[5.37035131 418.22534180]
[-6.69348860 427.13958740]
[-18.75732803 436.05383301]
[-30.82116699 444.96807861]
[-35.87196350 452.59545898]
[-43.15192795 453.92687988]
[-55.35781097 462.64562988]
[-67.56369019 471.36437988]
[-79.76957703 480.08309937]
[-82.49642944 495.41940308]
[-94.99913788 504.08758545]
[-109.60314941 501.39343262]
[-121.80902863 510.11215210]
[-134.01490784 518.83087158]
[-139.18792725 526.37591553]
[-146.48840332 527.58990479]
[-158.83316040 536.11090088]
[-160.12037659 551.69537354]
[-171.16064453 562.76995850]
[-186.74108887 564.10559082]
[-199.50509644 555.07153320]
[-203.42590332 539.93341064]
[-196.65220642 525.83905029]
[-182.38235474 519.44335938]
[-167.35412598 523.76611328]
[-155.00936890 515.24517822]
[-142.73365784 506.62500000]
[-130.52777100 497.90628052]
[-118.32188416 489.18753052]
[-116.13437653 474.49908447]
[-103.88007355 465.48318481]
[-88.48831940 467.87722778]
[-76.28243256 459.15847778]
[-64.07655334 450.43975830]
[-51.87066650 441.72100830]
[-39.73541260 432.90423584]
[-27.67157364 423.98999023]
[-15.60773373 415.07574463]
[-3.54389453 406.16149902]
[8.51994514 397.24725342]
[20.58378410 388.33300781]
[22.16703606 383.81433105]
[26.61327171 380.24792480]
[33.18294144 379.33334351]
[45.52769852 370.81237793]
[57.87245941 362.29141235]
[74.09321594 347.14703369]
[74.57645416 332.15481567]
[75.05969238 317.16259766]
[66.26247406 311.82867432]
[60.43337631 303.25354004]
[58.68306732 292.95156860]
[61.39459610 282.77624512]
[68.14208984 274.58657837]
[77.75608826 269.90771484]
[78.96308136 254.95634460]
[72.27499390 241.64775085]
[81.09765625 228.51492310]
[82.30465698 213.56355286]
[83.51165009 198.61219788]
[84.71865082 183.66084290]
[85.92565155 168.70947266]
[83.32675171 161.78009033]
[87.27442932 153.52761841]
[88.72213745 138.59764099]
[90.16985321 123.66767120]
[69.77260590 119.24130249]
[54.00754547 98.00225067]
[55.35403442 65.79985809]
[50.60401535 51.57181168]
[45.85399628 37.34376526]
[41.10397720 23.11571693]
[29.39479065 12.47590637]
[32.70358276 -2.04652977]
[27.95356369 -16.27457619]
[13.70429516 -23.11079597]
[8.54136848 -38.04798889]
[15.52785778 -52.22418594]
[30.51880074 -57.22889709]
[44.62033844 -50.09291840]
[49.46627808 -35.04990005]
[42.18161011 -21.02459717]
[46.93162918 -6.79654980]
[58.30105972 2.82557607]
[55.33202362 18.36569786]
[60.08204269 32.59374619]
[64.83206177 46.82179260]
[69.58208466 61.04983902]
[77.07332611 60.68748856]
[83.93692780 47.34991074]
[92.05580902 59.96278763]
[99.54705048 59.60043716]
[102.90168762 44.98036957]
[97.57138824 29.47166443]
[108.53981018 17.28044891]
[124.52358246 20.94799805]
[129.07997131 36.70145416]
[117.52175903 48.33501053]
[114.16711426 62.95507812]
[121.01870728 66.00559998]
[141.57348633 75.15717316]
[150.19361877 62.88145828]
[158.81375122 50.60573959]
[167.43388367 38.33002090]
[164.46385193 22.80731201]
[173.40895081 9.77807713]
[188.96218872 6.97232962]
[201.89611816 16.05467033]
[204.53727722 31.63670731]
[195.31869507 44.47389221]
[179.70960999 46.95015717]
[171.08946228 59.22587585]
[162.46932983 71.50159454]
[153.84919739 83.77731323]
[144.46783447 111.91255188]
[124.54711914 126.10290527]
[105.09982300 125.11537933]
[103.65211487 140.04534912]
[102.20440674 154.97532654]
[100.87700653 169.91647339]
[99.67001343 184.86784363]
[98.46301270 199.81919861]
[97.25601196 214.77055359]
[96.04901886 229.72190857]
[102.65077209 244.09992981]
[93.91444397 256.16333008]
[92.70744324 271.11468506]
[106.52023315 285.68829346]
[105.20393372 305.41909790]
[90.05191040 317.64584351]
[89.56867218 332.63806152]
[89.08543396 347.63027954]
[96.37518311 360.73980713]
[109.36556244 368.23980713]
[122.35594177 375.73980713]
[135.34632874 383.23980713]
[148.33670044 390.73980713]
[166.42329407 385.13653564]
[182.59182739 394.36251831]
[186.82173157 412.16339111]
[200.04699707 419.24099731]
[213.27224731 426.31860352]
[226.49751282 433.39624023]
[239.72276306 440.47384644]
[252.94802856 447.55145264]
[266.17327881 454.62905884]
[278.47027588 445.58767700]
[293.47396851 442.78555298]
[308.20538330 446.77911377]
[319.73956299 456.77536011]
[325.78640747 470.78958130]
[325.14532471 486.03924561]
[317.94354248 499.49649048]
[305.61105347 508.48937988]
[290.59643555 511.23236084]
[275.88085938 507.18084717]
[264.38613892 497.13925171]
[258.39453125 483.10131836]
[259.09567261 467.85430908]
[245.87042236 460.77670288]
[232.64515686 453.69909668]
[219.41990662 446.62149048]
[206.19464111 439.54388428]
[192.96939087 432.46627808]
[179.74412537 425.38864136]
[169.78628540 430.98892212]
[158.24209595 431.08172607]
[147.98452759 425.52807617]
[141.62228394 415.60864258]
[140.83670044 403.73016357]
[127.84632111 396.23016357]
[114.85594177 388.73016357]
[101.86556244 381.23016357]
[88.87518311 373.73016357]
[96.67961884 386.53997803]
[109.10620880 394.94116211]
[117.79970551 407.16503906]
[121.65704346 421.66058350]
[120.18879700 436.58853149]
[113.58125305 450.05480957]
[102.67281342 460.35073853]
[88.84757233 466.16992188]
[73.85974121 466.77398682]
[59.61103439 462.08630371]
[47.90937805 452.70169067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[15 44]
[16 43]
[17 42]
[18 41]
[21 38]
[22 37]
[23 36]
[25 35]
[26 34]
[56 141]
[57 140]
[58 139]
[64 136]
[65 135]
[67 133]
[68 132]
[69 131]
[70 130]
[71 129]
[73 128]
[74 127]
[75 126]
[78 97]
[79 96]
[80 95]
[81 94]
[83 92]
[84 91]
[101 108]
[102 107]
[110 123]
[111 122]
[112 121]
[113 120]
[142 183]
[143 182]
[144 181]
[145 180]
[146 179]
[149 174]
[150 173]
[151 172]
[152 171]
[153 170]
[154 169]
[155 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
