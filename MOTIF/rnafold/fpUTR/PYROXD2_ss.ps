%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUGCUCCACCCCGUGCCUAGGGCAGCACAAAAGCCAAUCGCUAGCAAACUCCCUGCCUAGCAAGGCCCAGCCUGGGGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[99.82186127 279.53140259]
[85.56215668 273.11309814]
[78.81081390 259.00799561]
[82.75559235 243.87615967]
[95.53390503 234.86235046]
[96.61627197 219.90144348]
[97.69863129 204.94055176]
[98.78099823 189.97964478]
[99.86336517 175.01875305]
[100.94573212 160.05784607]
[102.02809906 145.09695435]
[91.75489044 144.47399902]
[81.86965179 141.53668213]
[72.88784790 136.42854309]
[65.28002167 129.40661621]
[59.44711304 120.82844543]
[55.69934845 111.13387299]
[54.23974991 100.82256317]
[39.30083084 99.47026825]
[24.36191368 98.11797333]
[9.42299461 96.76567078]
[-6.89673615 101.35944366]
[-15.82873249 86.94918060]
[-4.45424747 74.37709045]
[10.77529049 81.82675171]
[25.71420860 83.17905426]
[40.65312958 84.53134918]
[55.59204865 85.88364410]
[62.37776184 72.50627136]
[52.46214676 61.25102615]
[36.67556000 60.50322723]
[26.10348511 48.75559998]
[27.01814461 32.97780228]
[38.87689209 22.53051949]
[54.64413834 23.61194038]
[64.96545410 35.58047867]
[63.71739578 51.33541107]
[73.63301086 62.59066010]
[82.09761047 58.84587097]
[90.97257996 56.94512558]
[99.86898041 56.89737320]
[108.41152191 58.63195801]
[116.25437164 62.00451279]
[123.09518433 66.80594635]
[133.79710388 56.29552841]
[144.49902344 45.78511047]
[155.20094299 35.27469254]
[165.90286255 24.76427078]
[176.41328430 14.06235123]
[186.72877502 3.17241931]
[184.76489258 -12.34135532]
[193.27595520 -25.45988846]
[208.24328613 -29.98901176]
[222.59977722 -23.79021072]
[229.56674194 -9.79036903]
[225.85456848 5.40021515]
[213.21604919 14.60901260]
[197.61871338 13.48791122]
[187.30322266 24.37784386]
[184.93519592 31.56457520]
[176.41328430 35.46619034]
[165.71136475 45.97661209]
[155.00944519 56.48703003]
[144.30752563 66.99745178]
[133.60560608 77.50786591]
[142.78909302 100.31727600]
[137.13879395 125.66239166]
[150.39147949 132.68852234]
[163.64414978 139.71464539]
[176.89683533 146.74076843]
[193.72305298 148.81794739]
[196.38502502 165.56159973]
[181.03262329 172.75465393]
[169.87071228 159.99345398]
[156.61802673 152.96733093]
[143.36535645 145.94120789]
[130.11267090 138.91506958]
[116.98899841 146.17932129]
[115.90663147 161.14021301]
[114.82426453 176.10112000]
[113.74189758 191.06201172]
[112.65953064 206.02291870]
[111.57716370 220.98381042]
[110.49480438 235.94471741]
[121.84259796 246.70396423]
[123.56823730 262.24603271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[18 28]
[19 27]
[20 26]
[21 25]
[29 38]
[30 37]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 59]
[50 58]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
