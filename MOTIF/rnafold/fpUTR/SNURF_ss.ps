%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGGCGCGCAUGCUCAGGCGGGGAUGUGUGCGAAGCCUGCCGCUGCUGCAGCGAGUCUGGCGCAGAGUGGAGCGGCCGCCGGAGAUGCCUGACGCAUCUGUCUGAGGAGCGGUCAGUGACGCG\
) } def
/len { sequence length } bind def

/coor [
[72.35199738 124.96998596]
[59.42390442 132.57684326]
[46.49580383 140.18370056]
[33.56770706 147.79055786]
[20.63961029 155.39741516]
[12.00273705 171.60385132]
[-5.49526453 171.18701172]
[-18.23125648 179.11131287]
[-30.96724701 187.03561401]
[-43.70323944 194.95991516]
[-56.43922806 202.88421631]
[-69.17522430 210.80850220]
[-81.91120911 218.73280334]
[-94.64720154 226.65710449]
[-102.27694702 240.51702881]
[-117.17075348 240.67120361]
[-129.90675354 248.59550476]
[-142.64274597 256.51980591]
[-149.88804626 271.23162842]
[-166.26712036 272.04275513]
[-174.93057251 258.11880493]
[-166.96618652 243.78350830]
[-150.56703186 243.78381348]
[-137.83105469 235.85951233]
[-125.09505463 227.93521118]
[-118.37627411 214.64208984]
[-102.57150269 213.92111206]
[-89.83551025 205.99681091]
[-77.09951782 198.07252502]
[-64.36353302 190.14822388]
[-51.62753677 182.22392273]
[-38.89154816 174.29962158]
[-26.15555573 166.37532043]
[-13.41956425 158.45101929]
[-10.33593655 146.68449402]
[0.30235454 139.99610901]
[13.03275204 142.46931458]
[25.96084976 134.86245728]
[38.88894653 127.25559998]
[51.81704330 119.64874268]
[64.74514008 112.04188538]
[65.45038605 86.06314087]
[82.96833801 66.86641693]
[78.93692017 52.41831207]
[74.90550995 37.97020721]
[70.87409210 23.52210426]
[66.84268188 9.07400036]
[61.46704483 1.55286193]
[62.89497375 -5.78145790]
[59.22216034 -20.32485580]
[55.54934311 -34.86825562]
[51.87652588 -49.41165161]
[46.68856812 -57.06345367]
[48.29747391 -64.36020660]
[44.98550415 -78.99000549]
[31.00078773 -85.98727417]
[24.83310509 -100.35716248]
[29.39464569 -115.31464386]
[42.53158569 -123.79726410]
[58.04106903 -121.79977417]
[68.59999084 -110.26533508]
[69.22274780 -94.64015961]
[59.61529541 -82.30197144]
[62.92726517 -67.67218018]
[66.41992188 -53.08446884]
[70.09274292 -38.54106903]
[73.76555634 -23.99767113]
[77.43836975 -9.45427322]
[81.29077911 5.04258585]
[85.32219696 19.49069023]
[89.35361481 33.93879318]
[93.38502502 48.38689804]
[97.41644287 62.83499908]
[111.42215729 64.53951263]
[123.78961182 71.33004761]
[132.74497986 82.23265076]
[137.00379944 95.68359375]
[151.94760132 96.98065948]
[166.89141846 98.27773285]
[181.83523560 99.57479858]
[196.77905273 100.87186432]
[211.72286987 102.16893768]
[226.71253967 102.72538757]
[241.71139526 102.53986359]
[256.71023560 102.35433960]
[271.70910645 102.16882324]
[286.69879150 101.61236572]
[301.67010498 100.68532562]
[316.64141846 99.75827789]
[331.61276245 98.83123779]
[346.58407593 97.90419006]
[358.24032593 86.88095856]
[374.10540771 89.26388550]
[382.00903320 103.22499847]
[375.88815308 118.05451965]
[360.43826294 122.37651062]
[347.51110840 112.87551880]
[332.53979492 113.80255890]
[317.56848145 114.72960663]
[302.59713745 115.65664673]
[287.62582397 116.58369446]
[283.78784180 119.58843994]
[277.99484253 120.14109802]
[271.89462280 117.16767120]
[256.89578247 117.35319519]
[241.89691162 117.53871918]
[226.89807129 117.72424316]
[224.81526184 119.75102997]
[221.76135254 121.02811432]
[218.03569031 121.16462708]
[214.07936096 119.89226532]
[210.42579651 117.11274719]
[195.48197937 115.81568146]
[180.53817749 114.51861572]
[165.59436035 113.22154236]
[150.65054321 111.92447662]
[135.70672607 110.62741089]
[133.01361084 117.26307678]
[129.10060120 123.26085663]
[124.11228943 128.39910889]
[118.23300171 132.48799133]
[111.67997742 135.37640381]
[104.69537354 136.95761108]
[97.53726959 137.17320251]
[90.47016144 136.01519775]
[83.75519562 133.52638245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[16 25]
[17 24]
[18 23]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[49 68]
[50 67]
[51 66]
[52 65]
[54 64]
[55 63]
[77 117]
[78 116]
[79 115]
[80 114]
[81 113]
[82 112]
[83 107]
[84 106]
[85 105]
[86 104]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
