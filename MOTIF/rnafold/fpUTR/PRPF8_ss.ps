%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUCGGGUUGCGCACUUCCCGGCGCUGGGAACGCGGAGCGGACGCAGUCUGGCCGCCAUUGCGCUGCGGGGAAAGCGGCCUCUUGUGUGAGGGCCUGUGGGAUUCUCCGGAU\
) } def
/len { sequence length } bind def

/coor [
[106.17796326 334.52542114]
[91.80760956 328.35879517]
[84.80928802 314.37460327]
[88.48739624 299.17575073]
[101.10523987 289.93865967]
[101.92437744 274.96102905]
[102.74351501 259.98339844]
[103.56265259 245.00579834]
[103.76753235 230.00720215]
[103.35781097 215.01278687]
[102.94808960 200.01838684]
[94.86603546 187.50720215]
[102.22349548 173.50083923]
[101.81377411 158.50643921]
[101.40405273 143.51203918]
[100.99433136 128.51763916]
[77.98731995 111.90909576]
[82.40805817 87.60440063]
[73.92604065 75.23284149]
[65.44402313 62.86128616]
[56.96200562 50.48973083]
[48.47998810 38.11817551]
[34.29493713 31.11139679]
[33.47957230 16.23912430]
[24.99755478 3.86756945]
[16.51553917 -8.50398636]
[2.33048916 -15.51076508]
[1.51512265 -30.38303566]
[-6.96689415 -42.75459290]
[-21.15194321 -49.76137161]
[-21.96730995 -64.63364410]
[-30.44932747 -77.00519562]
[-45.73025513 -80.02694702]
[-54.15599060 -92.69429779]
[-51.18103790 -107.24370575]
[-59.66305542 -119.61525726]
[-68.14507294 -131.98681641]
[-76.62709045 -144.35836792]
[-89.22175598 -147.52555847]
[-96.01625824 -158.11776733]
[-93.78965759 -170.09403992]
[-101.93058014 -182.69265747]
[-110.07151031 -195.29127502]
[-118.21243286 -207.88990784]
[-126.35336304 -220.48852539]
[-140.02807617 -230.51042175]
[-134.18338013 -246.42506409]
[-117.27271271 -245.21440125]
[-113.75473785 -228.62945557]
[-105.61380768 -216.03083801]
[-97.47288513 -203.43220520]
[-89.33196259 -190.83358765]
[-81.19103241 -178.23495483]
[-65.19168091 -171.16751099]
[-64.25553131 -152.84039307]
[-55.77351761 -140.46882629]
[-47.29150009 -128.09727478]
[-38.80948257 -115.72572327]
[-24.16589928 -113.25569153]
[-15.38769054 -100.83000183]
[-18.07777214 -85.48721313]
[-9.59575462 -73.11566162]
[3.98260403 -66.99377441]
[5.40466118 -51.23661041]
[13.88667774 -38.86505508]
[27.46503639 -32.74317169]
[28.88709450 -16.98600388]
[37.36911011 -4.61444759]
[45.85112762 7.75710821]
[59.42948532 13.87899017]
[60.85154343 29.63615799]
[69.33355713 42.00771332]
[77.81557465 54.37926865]
[86.29759216 66.75082397]
[94.77960968 79.12238312]
[105.41283417 77.36414337]
[116.39839172 81.09292603]
[124.90456390 90.15104675]
[128.38330078 102.93812561]
[143.31478882 104.37014771]
[158.24627686 105.80216980]
[173.17776489 107.23419189]
[182.15739441 104.91733551]
[188.49560547 108.91471100]
[203.38241577 110.75404358]
[218.26921082 112.59338379]
[233.15029907 105.70243073]
[246.40097046 115.36430359]
[244.39006042 131.63969421]
[229.18623352 137.78587341]
[216.42987061 127.48018646]
[201.54307556 125.64084625]
[186.65626526 123.80150604]
[171.74574280 122.16567993]
[156.81425476 120.73365784]
[141.88276672 119.30163574]
[126.95127869 117.86961365]
[115.98873901 128.10791016]
[116.39846039 143.10231018]
[116.80818176 158.09671021]
[117.21790314 173.09112549]
[125.32926178 186.67480469]
[117.94248962 199.60867310]
[118.35221863 214.60307312]
[118.76194000 229.59747314]
[121.65293121 234.27072144]
[122.29874420 239.09568787]
[121.03958893 243.15766907]
[118.54026794 245.82493591]
[117.72113037 260.80255127]
[116.90199280 275.78018188]
[116.08285522 290.75778198]
[127.61808777 301.31582642]
[129.61672974 316.82516479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 105]
[10 104]
[11 103]
[13 101]
[14 100]
[15 99]
[16 98]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[24 69]
[25 68]
[26 67]
[28 65]
[29 64]
[31 62]
[32 61]
[35 58]
[36 57]
[37 56]
[38 55]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[79 97]
[80 96]
[81 95]
[82 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
