%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGUAGGUCCAGUGAGAACAGGCGUGAAAUUUAUAUCUCUGCCCAGGACUGGGUGCCUGCAUCGCC\
) } def
/len { sequence length } bind def

/coor [
[104.56152344 360.21420288]
[110.60786438 344.37506104]
[110.60786438 329.37506104]
[110.60786438 314.37506104]
[100.97695923 299.87521362]
[109.88367462 283.93460083]
[109.21070099 268.94970703]
[108.53772736 253.96481323]
[107.86475372 238.97991943]
[107.19178009 223.99501038]
[106.51880646 209.01011658]
[105.17421722 194.07051086]
[103.16072083 179.20625305]
[101.14722443 164.34201050]
[99.13372040 149.47776794]
[97.12022400 134.61352539]
[85.26477051 131.45252991]
[75.24810028 124.36663055]
[68.32019043 114.24004364]
[65.34556580 102.33646393]
[66.69541931 90.14131927]
[72.20130157 79.17642212]
[81.17614746 70.81007385]
[92.50000000 66.08630371]
[92.50000000 51.08629990]
[92.50000000 36.08629990]
[92.50000000 21.08630180]
[89.28845978 12.17586517]
[92.85167694 5.41710520]
[93.52465057 -9.56779099]
[86.41428375 -23.70120049]
[94.71479797 -36.06852341]
[95.38777161 -51.05342102]
[87.35748291 -65.35189819]
[95.95674896 -79.31558990]
[112.33937836 -78.57984161]
[119.65233612 -63.90153503]
[110.37266541 -50.38044739]
[109.69969177 -35.39554977]
[116.85819244 -22.33396149]
[108.50954437 -8.89481831]
[107.83657074 6.09007740]
[107.50000000 21.08630180]
[107.50000000 36.08629990]
[107.50000000 51.08629990]
[107.50000000 66.08630371]
[123.21362305 74.16365051]
[132.92056274 88.92633820]
[134.10906982 106.55441284]
[126.47162628 122.48648071]
[111.98446655 132.60002136]
[113.99797058 147.46426392]
[116.01146698 162.32852173]
[118.02496338 177.19276428]
[120.03846741 192.05700684]
[124.08132172 197.95603943]
[124.24234772 204.05813599]
[121.50370789 208.33714294]
[122.17667389 223.32205200]
[122.84964752 238.30694580]
[123.52262115 253.29183960]
[124.19559479 268.27673340]
[124.86856842 283.26162720]
[133.96083069 292.70828247]
[134.03489685 305.41421509]
[125.60786438 314.37506104]
[125.60786438 329.37506104]
[125.60786438 344.37506104]
[131.65420532 360.21420288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[24 46]
[25 45]
[26 44]
[27 43]
[29 42]
[30 41]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
