%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGUAGUUUGUCUUUACUAGGCCACCGUCUCGUCAGCGUUACGGAGUAUUUUGUCCGCCUGCCGCCGCCGUCCCAGAUAUUAAUCACGGAGUUCCAGGGAGAAGGAACUUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[105.00315094 137.36198425]
[97.83455658 137.63322449]
[90.74439240 136.54151917]
[83.98943329 134.12638855]
[75.04392242 146.16706848]
[66.09841156 158.20774841]
[57.15290070 170.24841309]
[48.20738983 182.28909302]
[52.00444031 197.45867920]
[45.11587524 211.49726868]
[30.79426956 217.77624512]
[15.80184460 213.33088684]
[7.21756649 200.26014709]
[9.09466839 184.73562622]
[20.54684067 174.08753967]
[36.16671753 173.34358215]
[45.11222839 161.30290222]
[54.05773926 149.26223755]
[63.00324631 137.22155762]
[71.94876099 125.18088531]
[62.35794830 97.99376678]
[74.78424072 71.98010254]
[67.16925049 59.05679321]
[54.82539368 55.03715515]
[48.77079391 44.01081085]
[51.80414581 32.21793365]
[44.53588486 19.09648895]
[31.08069420 10.77372265]
[31.68198776 -4.10874081]
[24.41372490 -17.23018646]
[9.48900700 -21.69006920]
[2.30487490 -35.10062027]
[6.64866590 -49.30157471]
[-0.61959702 -62.42301941]
[-14.07478714 -70.74578857]
[-13.47349358 -85.62825012]
[-20.74175644 -98.74969482]
[-28.01001930 -111.87113953]
[-34.99605179 -117.95819855]
[-35.29180908 -125.44004822]
[-42.20819473 -138.75033569]
[-46.83603287 -141.68437195]
[-49.52041245 -145.72999573]
[-50.16797638 -149.92294312]
[-49.09705734 -153.41015625]
[-54.92941666 -167.22984314]
[-60.76177979 -181.04951477]
[-75.90389252 -184.44012451]
[-86.13587952 -196.10571289]
[-87.52334595 -211.56062317]
[-79.53278351 -224.86215210]
[-65.23670959 -230.89556885]
[-50.13227844 -227.34089661]
[-40.02743530 -215.56500244]
[-38.80770493 -200.09593201]
[-46.94210052 -186.88188171]
[-41.10973740 -173.06221008]
[-35.27737427 -159.24252319]
[-28.89791489 -145.66671753]
[-21.98152733 -132.35644531]
[-14.88857269 -119.13940430]
[-7.62030983 -106.01795959]
[-0.35204691 -92.89651489]
[12.58326817 -85.51227570]
[12.50184917 -69.69128418]
[19.77011299 -56.56983566]
[34.11278534 -52.71973419]
[41.67075729 -39.51626205]
[37.53517151 -24.49844933]
[44.80343628 -11.37700367]
[57.73875046 -3.99277186]
[57.65732956 11.82822514]
[64.92559052 24.94967079]
[80.41036224 33.08998489]
[80.09255981 51.44180679]
[87.70755005 64.36511993]
[96.41127014 62.47573853]
[105.31533051 62.68115234]
[113.92266083 64.96988678]
[121.75276184 69.21418762]
[128.36851501 75.17710114]
[133.40058899 82.52574921]
[136.56808472 90.84989929]
[137.69416809 99.68486023]
[136.71595764 108.53740692]
[133.68809509 116.91335297]
[145.48635864 126.17622375]
[157.28463745 135.43908691]
[169.08291626 144.70196533]
[180.88117981 153.96482849]
[189.68429565 156.85658264]
[192.86590576 163.63468933]
[204.41342163 173.20835876]
[215.96092224 182.78202820]
[227.50843811 192.35568237]
[239.05593872 201.92935181]
[250.60345459 211.50300598]
[265.60321045 207.52975464]
[280.06152344 213.16334534]
[288.41882324 226.23754883]
[287.46160889 241.72506714]
[277.55792236 253.67063904]
[262.51596069 257.48095703]
[248.11961365 251.69084167]
[239.90461731 238.52674866]
[241.02978516 223.05052185]
[229.48228455 213.47685242]
[217.93476868 203.90319824]
[206.38726807 194.32952881]
[194.83975220 184.75587463]
[183.29223633 175.18220520]
[171.61831665 165.76310730]
[159.82003784 156.50024414]
[148.02177429 147.23736572]
[136.22349548 137.97450256]
[124.42522430 128.71162415]
[118.54367828 132.81890869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[22 76]
[23 75]
[26 73]
[27 72]
[29 70]
[30 69]
[33 66]
[34 65]
[36 63]
[37 62]
[38 61]
[40 60]
[41 59]
[45 58]
[46 57]
[47 56]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[92 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
