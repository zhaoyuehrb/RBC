%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCCGGAAAGCGGAAGCGGCGUGCAACACGUGGGGGCGGUGCCGGUCGGAGGGCUCCUAGUGCGCCAGGUUGUGGGAAGUGAGGCUGGCGGUGGCGACAACCGAGGAGGAGGGGCGGGACGCCGUGGAGCACGGCGACCGGCUGAGCGUC\
) } def
/len { sequence length } bind def

/coor [
[66.92734528 491.47766113]
[65.70470428 476.52758789]
[56.95575714 464.47332764]
[63.54246902 450.08840942]
[62.31983185 435.13830566]
[61.09719086 420.18823242]
[59.87455368 405.23812866]
[58.65191269 390.28805542]
[57.42927551 375.33795166]
[48.43853378 387.34490967]
[34.78069305 393.54678345]
[19.82349968 392.41436768]
[7.25509214 384.22686768]
[0.17458409 371.00317383]
[0.32788402 356.00393677]
[7.67719126 342.92773438]
[20.41031647 334.99880981]
[35.38753128 334.17233276]
[48.91575623 340.65206909]
[57.65876770 352.83914185]
[59.18611526 337.91708374]
[52.78495789 324.46813965]
[61.88721848 311.52752686]
[63.41456223 296.60549927]
[64.94190979 281.68344116]
[66.46925354 266.76141357]
[67.99659729 251.83937073]
[58.42181396 240.48776245]
[59.75819016 225.33293152]
[71.72972870 215.36698914]
[73.25707245 200.44496155]
[74.78441620 185.52291870]
[61.51668549 192.52058411]
[47.69088364 186.70274353]
[43.41818237 172.32415771]
[51.82332611 159.90023804]
[66.75940704 158.51693726]
[77.30354309 169.18667603]
[80.34235382 154.49771118]
[83.38117218 139.80874634]
[81.64600372 132.57791138]
[86.63468933 124.85254669]
[89.97250366 110.22862244]
[86.03518677 96.81262207]
[95.40357208 86.43356323]
[98.74138641 71.80963898]
[102.07920074 57.18572235]
[97.60671997 42.00983810]
[107.98211670 31.32337761]
[111.31993103 16.69945908]
[102.31505585 9.44128036]
[96.71981812 -0.62217253]
[95.31938171 -11.99910831]
[98.28032684 -23.01955223]
[105.13188934 -32.08046722]
[114.84033966 -37.87893677]
[125.96479797 -39.59944153]
[130.19078064 -53.99183655]
[134.41677856 -68.38423157]
[138.64276123 -82.77662659]
[142.86874390 -97.16902161]
[133.15188599 -113.37747192]
[138.22052002 -131.25291443]
[154.43486023 -139.65596008]
[158.07029724 -154.20874023]
[161.55709839 -168.79785156]
[164.89491272 -183.42176819]
[168.23272705 -198.04568481]
[171.57054138 -212.66961670]
[174.90835571 -227.29353333]
[173.30404663 -233.80790710]
[175.01518250 -239.30686951]
[178.69209290 -242.44003296]
[182.62361145 -256.91564941]
[186.55514526 -271.39123535]
[190.48666382 -285.86685181]
[186.63690186 -301.21252441]
[197.43955994 -311.46688843]
[201.37107849 -325.94250488]
[191.54234314 -337.94982910]
[190.68206787 -353.44302368]
[199.12104797 -366.46466064]
[213.61431885 -372.00765991]
[228.58892822 -367.94061279]
[238.28681946 -355.82739258]
[238.97897339 -340.32574463]
[230.39923096 -327.39642334]
[215.84667969 -322.01098633]
[211.91516113 -307.53536987]
[216.04612732 -293.22506714]
[204.96226501 -281.93530273]
[201.03074646 -267.45971680]
[197.09921265 -252.98411560]
[193.16769409 -238.50849915]
[189.53227234 -223.95571899]
[186.19445801 -209.33180237]
[182.85664368 -194.70788574]
[179.51882935 -180.08395386]
[176.18101501 -165.46003723]
[177.76831055 -158.19531250]
[172.62307739 -150.57331848]
[168.98765564 -136.02052307]
[176.88125610 -127.68607330]
[179.77461243 -116.45326996]
[176.82934570 -105.10968018]
[168.67112732 -96.52898407]
[157.26113892 -92.94303131]
[153.03515625 -78.55063629]
[148.80915833 -64.15824127]
[144.58317566 -49.76585007]
[140.35719299 -35.37345505]
[152.60382080 -21.33612823]
[153.99763489 -2.61032224]
[143.80368042 13.33640289]
[125.94384766 20.03727341]
[122.60603333 34.66119003]
[127.31726074 48.79107666]
[116.70312500 60.52353668]
[113.36531067 75.14745331]
[110.02749634 89.77137756]
[113.96481323 103.18737793]
[104.59642792 113.56643677]
[101.25861359 128.19035339]
[98.07012939 142.84756470]
[95.03131866 157.53652954]
[91.99250793 172.22547913]
[89.70645142 187.05026245]
[88.17910767 201.97230530]
[86.65176392 216.89433289]
[96.35608673 229.07891846]
[94.59457397 244.19023132]
[82.91863251 253.36672974]
[81.39128876 268.28875732]
[79.86394501 283.21078491]
[78.33660126 298.13284302]
[76.80925751 313.05487061]
[83.10116577 327.57116699]
[74.10815430 339.44445801]
[72.58081055 354.36648560]
[76.95381165 364.99255371]
[72.37936401 374.11532593]
[73.60200500 389.06542969]
[74.82463837 404.01550293]
[76.04727936 418.96560669]
[77.26992035 433.91567993]
[78.49256134 448.86578369]
[87.32895660 461.98934937]
[80.65479279 475.30493164]
[81.87743378 490.25503540]
[93.12879181 501.69122314]
[91.05976105 517.60028076]
[77.25752258 525.77819824]
[62.30997086 519.95147705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[20 139]
[21 138]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[30 129]
[31 128]
[32 127]
[38 126]
[39 125]
[40 124]
[42 123]
[43 122]
[45 120]
[46 119]
[47 118]
[49 116]
[50 115]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[64 102]
[65 101]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[73 94]
[74 93]
[75 92]
[76 91]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
