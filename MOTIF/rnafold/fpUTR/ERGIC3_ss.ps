%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUCCAGGCCGGAAGAGGGAGUCUGUAGGGGCGGGCCGGCUGGCGUCCCCUUUCCGGCCGGUCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.66770935 341.43185425]
[67.35475922 326.75354004]
[76.63442230 313.23245239]
[77.30739594 298.24755859]
[67.10018158 287.46105957]
[67.56920624 272.25466919]
[78.95227051 261.62152100]
[79.62524414 246.63662720]
[76.68222809 239.58567810]
[80.67956543 230.99899292]
[82.02415466 216.05937195]
[83.36874390 201.11976624]
[84.71333313 186.18014526]
[86.05792236 171.24053955]
[87.40251160 156.30091858]
[88.74710083 141.36131287]
[90.09169006 126.42169189]
[91.43627930 111.48207855]
[85.73371887 98.71601105]
[93.62410736 87.17333221]
[94.96869659 72.23371887]
[96.31328583 57.29410553]
[97.65787506 42.35449219]
[98.66690826 27.38846779]
[99.33988190 12.40357113]
[100.01285553 -2.58132482]
[92.90248871 -16.71473312]
[101.20300293 -29.08205795]
[101.87597656 -44.06695557]
[94.76560974 -58.20036316]
[103.06612396 -70.56768799]
[103.73909760 -85.55258179]
[92.89275360 -97.04747009]
[93.43484497 -112.84245300]
[105.04376221 -123.56666565]
[120.83213806 -122.85760498]
[131.43301392 -111.13595581]
[130.55706787 -95.35595703]
[118.72399139 -84.87960815]
[118.05102539 -69.89471436]
[125.20952606 -56.83312607]
[116.86087036 -43.39398193]
[116.18789673 -28.40908432]
[123.34640503 -15.34749603]
[114.99774933 -1.90835238]
[114.32477570 13.07654381]
[113.65180969 28.06143951]
[116.59482574 35.11239624]
[112.59748840 43.69908142]
[111.25289917 58.63869476]
[109.90830994 73.57830811]
[108.56372070 88.51792145]
[114.26628113 101.28398895]
[106.37589264 112.82666779]
[105.03130341 127.76628113]
[103.68671417 142.70590210]
[102.34212494 157.64550781]
[100.99753571 172.58512878]
[99.65294647 187.52473450]
[98.30835724 202.46435547]
[96.96376801 217.40396118]
[95.61917877 232.34358215]
[94.61014557 247.30960083]
[93.93717194 262.29449463]
[104.32126617 273.90521240]
[103.42530823 289.09243774]
[92.29228973 298.92053223]
[91.61932373 313.90542603]
[99.64961243 328.20388794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[7 64]
[8 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[20 52]
[21 51]
[22 50]
[23 49]
[24 47]
[25 46]
[26 45]
[28 43]
[29 42]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
