%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGCCGGAAGUGGCGUAACGUCCGGUCAAGGCAGCCAUCUCGCCGUGAGACAGCAAGUGUCGGAUCCGCAGGCGCAGCCGUGCG\
) } def
/len { sequence length } bind def

/coor [
[102.43655396 144.38433838]
[92.38682556 143.79435730]
[82.72758484 140.95816040]
[73.95425415 136.02117920]
[66.51681519 129.23667908]
[60.79674530 120.95259857]
[46.56435776 125.68959808]
[32.33196640 130.42658997]
[18.09957886 135.16358948]
[3.86719036 139.90057373]
[-10.36519814 144.63757324]
[-21.01572227 156.33700562]
[-35.53512573 153.01492310]
[-49.76751328 157.75192261]
[-56.61677170 171.99491882]
[-71.55868530 177.14418030]
[-85.72847748 170.14471436]
[-90.71946716 155.14920044]
[-83.57058716 141.05419922]
[-68.52313995 136.22203064]
[-54.50450897 143.51953125]
[-40.27211761 138.78253174]
[-30.63958931 127.42192078]
[-15.10219193 130.40518188]
[-0.86980337 125.66819000]
[13.36258507 120.93119812]
[27.59497452 116.19419861]
[41.82736206 111.45720673]
[56.05975342 106.72021484]
[57.76108170 86.15151978]
[68.56827545 68.56827545]
[86.15151978 57.76108170]
[106.72021484 56.05975342]
[111.45720673 41.82736206]
[116.19419861 27.59497452]
[120.93119812 13.36258507]
[124.89962006 -1.10294616]
[128.08810425 -15.76014900]
[119.80903625 -28.95465088]
[123.25140381 -43.77371979]
[135.88136292 -51.58522415]
[139.06983948 -66.24243164]
[142.25833130 -80.89962769]
[145.44680786 -95.55683136]
[138.01779175 -109.77616882]
[144.63453674 -124.39116669]
[160.22122192 -128.19046021]
[172.82109070 -118.25955963]
[172.76860046 -102.21659088]
[160.10400391 -92.36835480]
[156.91552734 -77.71115112]
[153.72705078 -63.05394745]
[150.53857422 -48.39674759]
[158.78216553 -36.04447174]
[155.75740051 -21.13456345]
[142.74530029 -12.57166958]
[139.55682373 2.08553314]
[141.33792114 5.37904882]
[141.46841431 9.75185966]
[139.43528748 14.34638882]
[135.16358948 18.09957886]
[130.42658997 32.33196640]
[125.68959808 46.56435776]
[120.95259857 60.79674530]
[131.61737061 68.75502014]
[139.44874573 79.51332855]
[143.74490356 92.10755157]
[144.12084961 105.40905762]
[140.54289246 118.22583771]
[133.33166504 129.40930176]
[142.74369812 141.08891296]
[152.15573120 152.76853943]
[161.56777954 164.44816589]
[171.18678284 175.95793152]
[181.00968933 187.29417419]
[190.83259583 198.63041687]
[205.77455139 206.64132690]
[202.21304321 223.21697998]
[185.29927063 224.38325500]
[179.49635315 208.45332336]
[169.67344666 197.11708069]
[159.85054016 185.78083801]
[152.93463135 182.71896362]
[149.88815308 173.86019897]
[140.47612000 162.18057251]
[131.06408691 150.50094604]
[121.65204620 138.82133484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[33 64]
[34 63]
[35 62]
[36 61]
[37 57]
[38 56]
[41 53]
[42 52]
[43 51]
[44 50]
[70 87]
[71 86]
[72 85]
[73 84]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
