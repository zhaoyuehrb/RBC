%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCUCAGAGCAAGGGAGGUAGUCGGGUCGAGGGAACCUGGCUCUGCCCAGGUGCCACUGCCCAAACCCCUGGGCCCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[-17.35141563 227.35270691]
[-29.95657730 235.48350525]
[-42.56173706 243.61430359]
[-55.16690063 251.74510193]
[-67.61965942 260.10745239]
[-79.91576385 268.69848633]
[-92.21187592 277.28948975]
[-104.50798035 285.88052368]
[-103.80928040 301.29205322]
[-111.57334900 314.62332153]
[-125.32271576 321.62036133]
[-140.66999817 320.05047607]
[-152.71792603 310.41455078]
[-157.62205505 295.78741455]
[-153.81750488 280.83654785]
[-142.51829529 270.33267212]
[-127.32994080 267.62756348]
[-113.09900665 273.58441162]
[-100.80290222 264.99340820]
[-88.50679016 256.40237427]
[-76.21068573 247.81134033]
[-72.44136047 241.24197388]
[-63.29769897 239.13993835]
[-50.69253922 231.00914001]
[-38.08737564 222.87834167]
[-25.48221588 214.74754333]
[-13.85415649 205.27188110]
[-3.34601092 194.56773376]
[7.16213465 183.86357117]
[17.67028046 173.15942383]
[28.17842484 162.45527649]
[31.57301140 147.95265198]
[46.76204300 143.52500916]
[57.27018738 132.82086182]
[67.77833557 122.11671448]
[78.28647614 111.41255951]
[76.28707886 84.46903992]
[102.34011841 67.92268372]
[106.71096802 53.57361984]
[111.08181000 39.22455215]
[115.45265961 24.87548637]
[119.82350922 10.52641964]
[124.19435120 -3.82264638]
[116.54012299 -17.64973450]
[120.98523712 -32.81603241]
[134.89247131 -40.32364273]
[150.01092529 -35.71843338]
[157.37107849 -21.73259544]
[152.60629272 -6.66367722]
[138.54341125 0.54819983]
[134.17257690 14.89726639]
[129.80172729 29.24633217]
[125.43087769 43.59539795]
[121.06003571 57.94446564]
[116.68918610 72.29353333]
[127.39334106 82.80167389]
[141.65919495 78.16641998]
[152.22427368 65.62406158]
[168.31913757 68.76850128]
[173.38674927 84.36502075]
[162.21400452 96.36924744]
[146.29444885 92.43226624]
[132.02859497 97.06752777]
[130.37243652 106.55721283]
[126.06986237 114.80788422]
[119.69988251 121.13368225]
[112.00147247 125.07722473]
[103.79162598 126.44028473]
[95.88023376 125.28701019]
[88.99063110 121.92070770]
[78.48248291 132.62486267]
[67.97434235 143.32901001]
[57.46619415 154.03315735]
[53.31999588 169.30142212]
[38.88257980 172.96340942]
[28.37443161 183.66757202]
[17.86628723 194.37171936]
[7.35814142 205.07586670]
[-3.15000415 215.78002930]
[11.63493824 218.31092834]
[20.57452583 230.35600281]
[18.71473885 245.24026489]
[7.08620882 254.71534729]
[-7.86692142 253.53048706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 21]
[6 20]
[7 19]
[8 18]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[33 73]
[34 72]
[35 71]
[36 70]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
