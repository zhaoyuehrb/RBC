%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGUUCUCCUGGAAGAAGAACCUGAUGCCAGCCAUCUGUCAAGGAAGACAGGAAGUAACAGUGCAGGCUCAGUGUGCUCGGCCCCUUCAUCUGUCAGCUGCAGCAAUGGAAUACGUGCUGGAAGUGAAGAACUCUCCGCGGCACCUCCUGAAGCAAUUCACAGUGUGUGACGUUCCUCUGU\
) } def
/len { sequence length } bind def

/coor [
[6.26203918 267.79684448]
[-8.56242561 265.50875854]
[-19.87692261 255.66081238]
[-24.18795013 241.29367065]
[-20.16489029 226.84413147]
[-32.41943741 235.49432373]
[-44.67398453 244.14453125]
[-51.48636246 258.42395020]
[-66.34610748 259.44238281]
[-78.60065460 268.09259033]
[-90.85520935 276.74279785]
[-103.10975647 285.39300537]
[-109.92213440 299.67242432]
[-124.78187561 300.69085693]
[-137.03642273 309.34106445]
[-138.26776123 320.17837524]
[-145.12953186 328.37176514]
[-155.16110229 331.36032104]
[-164.96716309 328.38528442]
[-177.50988770 336.61206055]
[-190.05262756 344.83883667]
[-193.28881836 362.01870728]
[-207.65934753 371.36871338]
[-224.02006531 367.52105713]
[-236.42051697 375.96078491]
[-248.82095337 384.40051270]
[-255.45710754 399.39697266]
[-271.78915405 400.87884521]
[-281.01611328 387.32174683]
[-273.64605713 372.67202759]
[-257.26068115 372.00006104]
[-244.86022949 363.56033325]
[-232.45979309 355.12063599]
[-231.84480286 342.23620605]
[-223.79516602 331.90896606]
[-211.07801819 328.05404663]
[-198.27940369 332.29611206]
[-185.73666382 324.06933594]
[-173.19393921 315.84255981]
[-165.80931091 297.98703003]
[-145.68663025 297.08651733]
[-133.43208313 288.43630981]
[-127.49623108 274.77560425]
[-111.75995636 273.13845825]
[-99.50540924 264.48825073]
[-87.25086212 255.83804321]
[-74.99631500 247.18783569]
[-69.06046295 233.52713013]
[-53.32419205 231.88998413]
[-41.06964111 223.23977661]
[-28.81509399 214.58956909]
[-17.26066208 205.02427673]
[-6.47451878 194.60029602]
[4.31162405 184.17633057]
[15.09776688 173.75236511]
[25.88390923 163.32839966]
[36.58067322 152.81272888]
[47.18727493 142.20613098]
[50.71571732 127.73548889]
[65.94500732 123.44838715]
[76.55161285 112.84178925]
[87.15821075 102.23518372]
[97.39650726 91.27264404]
[107.25456238 79.96694946]
[117.11261749 68.66125488]
[113.10671997 52.23981476]
[119.60540771 36.81605911]
[133.86938477 28.38199997]
[150.18550110 30.08599472]
[159.84909058 18.61363983]
[169.51268005 7.14128494]
[179.07798767 -4.41314793]
[188.54431152 -16.04881668]
[198.01063538 -27.68448639]
[200.28225708 -47.69880676]
[218.60011292 -53.84770584]
[227.66365051 -65.79978180]
[236.72720337 -77.75186157]
[245.79074097 -89.70394135]
[254.85429382 -101.65601349]
[263.81549072 -113.68502808]
[272.67364502 -125.79010773]
[281.53179932 -137.89518738]
[274.90167236 -155.82302856]
[280.34576416 -173.98970032]
[295.50161743 -185.13916016]
[314.16595459 -184.93139648]
[322.39273071 -197.47413635]
[330.61953735 -210.01686096]
[338.84631348 -222.55960083]
[347.07308960 -235.10232544]
[349.17098999 -244.01768494]
[355.54891968 -247.78732300]
[363.98864746 -260.18777466]
[365.35687256 -275.94970703]
[378.91424561 -282.11791992]
[387.35397339 -294.51834106]
[395.79370117 -306.91879272]
[404.23342896 -319.31924438]
[412.67315674 -331.71969604]
[403.39486694 -343.66827393]
[398.26489258 -357.89990234]
[397.78585815 -373.02026367]
[402.00466919 -387.54806519]
[410.50799561 -400.05999756]
[422.46279907 -409.33026123]
[436.69784546 -414.45068359]
[451.81854248 -414.91958618]
[466.34350586 -410.69104004]
[478.84973145 -402.17932129]
[488.11199951 -390.21832275]
[493.22286987 -375.97985840]
[493.68164062 -360.85885620]
[489.44338989 -346.33673096]
[480.92327881 -333.83621216]
[468.95608521 -324.58193970]
[454.71417236 -319.48062134]
[439.59286499 -319.03198242]
[425.07357788 -323.27996826]
[416.63388062 -310.87951660]
[408.19415283 -298.47909546]
[399.75442505 -286.07864380]
[391.31469727 -273.67819214]
[390.55014038 -258.80322266]
[376.38909912 -251.74804688]
[367.94937134 -239.34759521]
[359.61581421 -226.87554932]
[351.38903809 -214.33282471]
[343.16226196 -201.79008484]
[334.93548584 -189.24736023]
[326.70870972 -176.70462036]
[332.57678223 -167.16986084]
[334.46041870 -156.08152771]
[332.04818726 -145.04344177]
[325.65280151 -135.66679382]
[316.17129517 -129.33496094]
[304.95916748 -126.99943542]
[293.63690186 -129.03701782]
[284.77871704 -116.93193817]
[275.92056274 -104.82686615]
[274.50442505 -97.55480957]
[266.80636597 -92.59246826]
[257.74282837 -80.64038849]
[248.67927551 -68.68831635]
[239.61573792 -56.73623657]
[230.55218506 -44.78416061]
[232.85108948 -34.79794312]
[229.18492126 -24.99369812]
[220.54237366 -18.70706177]
[209.64630127 -18.21816826]
[200.17997742 -6.58249807]
[190.71365356 5.05317116]
[188.92706299 12.24318027]
[180.98504639 16.80488014]
[171.32144165 28.27723503]
[161.65785217 39.74958801]
[166.05363464 52.36986923]
[163.61392212 65.61936951]
[154.87171936 76.01195526]
[142.03245544 80.75947571]
[128.41831970 78.51931000]
[118.56025696 89.82500458]
[108.70220184 101.13069916]
[108.66047668 104.20478821]
[107.48817444 107.33075714]
[105.16436005 110.08574677]
[101.82606506 112.04532623]
[97.76481628 112.84178925]
[87.15821075 123.44838715]
[76.55161285 134.05499268]
[72.26451111 149.28428650]
[57.79387665 152.81272888]
[47.18727493 163.41932678]
[43.31936646 171.72138977]
[36.30787659 174.11453247]
[25.52173615 184.53851318]
[14.73559284 194.96247864]
[3.94945025 205.38644409]
[-6.83669233 215.81040955]
[8.11077690 214.55615234]
[21.42013931 221.47430420]
[28.98195076 234.42880249]
[28.46140289 249.41976929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 51]
[6 50]
[7 49]
[9 47]
[10 46]
[11 45]
[12 44]
[14 42]
[15 41]
[19 39]
[20 38]
[21 37]
[24 33]
[25 32]
[26 31]
[52 179]
[53 178]
[54 177]
[55 176]
[56 175]
[57 173]
[58 172]
[60 170]
[61 169]
[62 168]
[63 163]
[64 162]
[65 161]
[69 156]
[70 155]
[71 154]
[72 152]
[73 151]
[74 150]
[76 146]
[77 145]
[78 144]
[79 143]
[80 142]
[81 140]
[82 139]
[83 138]
[87 131]
[88 130]
[89 129]
[90 128]
[91 127]
[93 126]
[94 125]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
