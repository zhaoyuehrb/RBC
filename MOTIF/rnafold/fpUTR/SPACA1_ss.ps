%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACGGGAUUCGGAGCCGGGCGGCUACGGGCGGGGUGUCGCAGCUCUCUUCGACGUACCUGUCCUCAGGAGCCGCGGCGGCGACUGCGCCUCGGACGGCCGUCGGGGCCGAGAACC\
) } def
/len { sequence length } bind def

/coor [
[68.14235687 456.55654907]
[55.63354111 466.21600342]
[39.96907806 464.11837769]
[30.44240570 451.50814819]
[32.70553589 435.86672974]
[45.41579056 426.47390747]
[47.40667343 411.60662842]
[38.18971634 399.96258545]
[39.99696350 384.85668945]
[52.27278137 375.26803589]
[54.26366425 360.40075684]
[56.25454712 345.53344727]
[58.24542999 330.66616821]
[60.23631287 315.79888916]
[53.11673737 305.92037964]
[54.74024582 293.44628906]
[64.77273560 285.20751953]
[67.15869141 270.39849854]
[61.54434204 256.60253906]
[71.37823486 244.20877075]
[73.76419067 229.39974976]
[76.15013885 214.59072876]
[78.53609467 199.78170776]
[80.92204285 184.97267151]
[83.30799866 170.16365051]
[85.69395447 155.35462952]
[77.41818237 137.96279907]
[90.06539917 122.37505341]
[91.65979767 107.46002960]
[93.05551910 92.52510834]
[94.25231171 77.57292938]
[95.44910431 62.62074661]
[96.64589691 47.66856766]
[90.03432465 33.29505920]
[98.76241302 21.22569275]
[99.95920563 6.27351189]
[101.15599823 -8.67866802]
[102.15364838 -23.64545441]
[102.95198059 -38.62419510]
[103.75031281 -53.60293579]
[104.54864502 -68.58167267]
[105.34697723 -83.56041718]
[98.35511780 -97.75282288]
[106.75882721 -110.05026245]
[107.55715942 -125.02900696]
[98.81327057 -141.16699219]
[108.80027771 -155.53022766]
[109.19958496 -170.52491760]
[109.59889221 -185.51959229]
[109.99819946 -200.51428223]
[110.39750671 -215.50897217]
[99.93108368 -232.63742065]
[110.44197083 -248.77696228]
[110.04266357 -263.77163696]
[109.64335632 -278.76632690]
[109.24404144 -293.76101685]
[100.21275330 -307.44924927]
[107.79244232 -321.99160767]
[124.18577576 -322.42816162]
[132.52870178 -308.30981445]
[124.23873138 -294.16033936]
[124.63803864 -279.16564941]
[125.03734589 -264.17095947]
[125.43665314 -249.17626953]
[133.56320190 -242.72694397]
[136.79963684 -232.63742065]
[133.81933594 -222.23898315]
[125.39218903 -215.10966492]
[124.99288177 -200.11497498]
[124.59357452 -185.12028503]
[124.19426727 -170.12561035]
[123.79496002 -155.13092041]
[131.92422485 -146.06513977]
[131.63581848 -133.48916626]
[122.53590393 -124.23066711]
[121.73757172 -109.25193024]
[128.78652954 -96.13089752]
[120.32572174 -82.76208496]
[119.52738953 -67.78334045]
[118.72905731 -52.80460358]
[117.93072510 -37.82586288]
[117.13239288 -22.84712219]
[119.95465851 -15.91167927]
[116.10817719 -7.48187637]
[114.91138458 7.47030354]
[113.71459198 22.42248344]
[120.41176605 35.72650909]
[111.59807587 48.86536026]
[110.40128326 63.81753922]
[109.20449066 78.76972198]
[108.00769806 93.72190094]
[110.57965851 101.47917938]
[106.57482147 109.05443573]
[104.98041534 123.96945953]
[112.38675690 132.15420532]
[113.96056366 142.85620117]
[109.41362762 152.42691040]
[100.50297546 157.74058533]
[98.11702728 172.54960632]
[95.73107147 187.35862732]
[93.34511566 202.16764832]
[90.95916748 216.97668457]
[88.57321167 231.78570557]
[86.18726349 246.59472656]
[91.63095093 261.44992065]
[81.96771240 272.78442383]
[79.58176422 287.59347534]
[86.56074524 304.56945801]
[75.10360718 317.78976440]
[73.11272430 332.65704346]
[71.12184143 347.52435303]
[69.13095856 362.39163208]
[67.14007568 377.25894165]
[76.46059418 389.73953247]
[74.22975922 404.78872681]
[62.27396774 413.59750366]
[60.28308487 428.46478271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 117]
[7 116]
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[17 107]
[18 106]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[28 94]
[29 93]
[30 91]
[31 90]
[32 89]
[33 88]
[35 86]
[36 85]
[37 84]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[44 76]
[45 75]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
