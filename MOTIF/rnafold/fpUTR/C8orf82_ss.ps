%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCCCGAGGCCCGAGGGAGAGGGAAGAGCGCCGGGCCCGGGUCGCGGAGGCGGGCGCCGCCGGAACGCGAAGCGCGGGGCUACUGCGGGCAGGCGCGAGUUCGCGCAGCACCGCCCCCGGCGUGACCUGCUGGUCGCUUCCGGCGCGGGAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[-61.53961945 237.35174561]
[-68.64032745 232.91058350]
[-74.47456360 226.92387390]
[-88.01653290 233.37484741]
[-101.55849457 239.82582092]
[-110.68972015 252.74601746]
[-125.50741577 251.23435974]
[-139.04937744 257.68533325]
[-152.59135437 264.13632202]
[-161.72257996 277.05651855]
[-176.54026794 275.54483032]
[-190.08224487 281.99581909]
[-203.62420654 288.44680786]
[-217.16616821 294.89776611]
[-230.70814514 301.34875488]
[-244.25010681 307.79974365]
[-250.69393921 314.35055542]
[-258.12396240 314.24142456]
[-271.79074097 320.42358398]
[-273.57357788 334.12185669]
[-281.83770752 345.05532837]
[-294.33071899 350.42202759]
[-307.73461914 348.91342163]
[-318.54690552 341.03170776]
[-332.33316040 346.94265747]
[-335.63751221 362.10382080]
[-347.24465942 372.40203857]
[-362.69143677 373.87747192]
[-376.03820801 365.96276855]
[-382.15292358 351.70129395]
[-378.68429565 336.57684326]
[-366.96612549 326.40512085]
[-351.50427246 325.09735107]
[-338.24411011 333.15640259]
[-324.45785522 327.24545288]
[-321.35354614 311.15069580]
[-309.15856934 299.95138550]
[-292.52838135 298.19088745]
[-277.97290039 306.75680542]
[-264.30612183 300.57464600]
[-250.70108032 294.25778198]
[-237.15911865 287.80679321]
[-223.61715698 281.35580444]
[-210.07518005 274.90484619]
[-196.53321838 268.45385742]
[-182.99125671 262.00286865]
[-174.82864380 249.54409790]
[-159.04232788 250.59434509]
[-145.50036621 244.14337158]
[-131.95838928 237.69239807]
[-123.79578400 225.23361206]
[-108.00947571 226.28385925]
[-94.46750641 219.83288574]
[-80.92554474 213.38189697]
[-79.10944366 191.42254639]
[-64.47135162 174.78656006]
[-42.67734909 170.13882446]
[-22.29881477 179.45957947]
[-9.94112015 170.95736694]
[2.41657400 162.45516968]
[6.16457415 156.03883362]
[15.10347176 153.90991211]
[27.62673378 145.65351868]
[40.14999390 137.39714050]
[52.67325592 129.14074707]
[65.19651794 120.88436127]
[77.71977997 112.62797546]
[90.24304199 104.37158966]
[87.49987793 101.05310059]
[86.06153107 96.39437866]
[86.49993896 90.95481873]
[89.14109039 85.51543427]
[93.98606873 80.97188568]
[100.67729187 78.20178986]
[108.51760101 77.92464447]
[119.17646790 67.37055969]
[123.10096741 59.06185913]
[130.15173340 56.71585846]
[141.01702881 46.37442780]
[151.88233948 36.03299332]
[162.74763489 25.69156456]
[173.61293030 15.35013294]
[158.97470093 12.07569599]
[152.22636414 -1.32057428]
[158.30778503 -15.03247738]
[172.76730347 -19.02276802]
[185.02041626 -10.37051392]
[186.09768677 4.59078836]
[197.93000793 -4.62855625]
[209.76232910 -13.84790039]
[221.59463501 -23.06724548]
[233.33529663 -32.40303040]
[244.98315430 -41.85434723]
[247.10525513 -54.61198807]
[257.04608154 -62.24190140]
[269.11917114 -61.06964493]
[280.95150757 -70.28898621]
[292.78381348 -79.50833130]
[304.61611938 -88.72767639]
[316.44845581 -97.94702148]
[322.10693359 -113.33901978]
[338.30993652 -115.86763763]
[348.38925171 -102.93164062]
[341.97607422 -87.83848572]
[325.66778564 -86.11470795]
[313.83547974 -76.89536285]
[302.00314331 -67.67601776]
[290.17083740 -58.45667267]
[278.33853149 -49.23732758]
[272.66009521 -32.65641022]
[254.43447876 -30.20649147]
[242.78662109 -20.75517273]
[239.55690002 -14.06294823]
[230.81398010 -11.23492908]
[218.98167419 -2.01558471]
[207.14935303 7.20375967]
[195.31703186 16.42310333]
[183.95437622 26.21543503]
[173.08906555 36.55686569]
[162.22377014 46.89829636]
[151.35845947 57.23972702]
[140.49316406 67.58116150]
[129.73054504 78.02942657]
[119.07168579 88.58350372]
[120.99284363 103.45996857]
[133.98321533 110.95996857]
[146.97360229 118.45996857]
[159.96398926 125.95996857]
[172.95436096 133.45996094]
[185.94474792 140.95996094]
[202.33496094 140.41888428]
[210.76774597 154.48373413]
[202.56817627 168.68582153]
[186.17126465 168.41523743]
[178.44474792 153.95034790]
[165.45436096 146.45034790]
[152.46398926 138.95034790]
[139.47360229 131.45034790]
[126.48322296 123.95034790]
[113.49284363 116.45034790]
[98.49942780 116.89485168]
[85.97616577 125.15123749]
[73.45290375 133.40762329]
[60.92964172 141.66400146]
[48.40638351 149.92039490]
[35.88312149 158.17678833]
[23.35985756 166.43316650]
[10.91877270 174.81286621]
[-1.43892169 183.31506348]
[-13.79661655 191.81726074]
[-11.56990337 200.05503845]
[-11.36018085 208.57005310]
[-13.17190742 216.87654114]
[-16.89443970 224.50241089]
[-22.30875397 231.01611328]
[-29.10032654 236.05096436]
[-36.87739563 239.32589722]
[-45.19355774 240.66105652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[7 50]
[8 49]
[9 48]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[18 40]
[19 39]
[24 35]
[25 34]
[58 150]
[59 149]
[60 148]
[62 147]
[63 146]
[64 145]
[65 144]
[66 143]
[67 142]
[68 141]
[75 124]
[76 123]
[78 122]
[79 121]
[80 120]
[81 119]
[82 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 112]
[93 111]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
