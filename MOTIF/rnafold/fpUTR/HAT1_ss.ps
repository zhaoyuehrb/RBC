%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGCGGUCACUUCCGGCCCGGGAGCGCGCGGGUUGAUUCGUCCUUCCUCAGCCGCGGGUGAUCGUAGCUCGGAA\
) } def
/len { sequence length } bind def

/coor [
[130.09593201 305.10696411]
[128.87329102 290.15689087]
[127.65065002 275.20678711]
[125.51592255 260.35946655]
[122.47711182 245.67051697]
[119.43830109 230.98155212]
[116.39948273 216.29258728]
[113.36067200 201.60363770]
[110.32186127 186.91467285]
[107.28305054 172.22570801]
[104.24423218 157.53674316]
[101.20542145 142.84777832]
[98.16661072 128.15881348]
[95.12779236 113.46985626]
[85.97307587 102.90185547]
[90.18324280 89.56895447]
[87.14443207 74.87999725]
[84.10561371 60.19103241]
[81.06680298 45.50207138]
[66.34812927 36.30379868]
[62.76708984 19.66219711]
[72.02909851 5.77967501]
[68.39366913 -8.77311420]
[64.75823975 -23.32590294]
[61.12281799 -37.87869263]
[57.48739243 -52.43148041]
[47.55283356 -57.67349243]
[42.39387131 -67.39953613]
[43.57706070 -78.12087250]
[50.44290543 -86.14852905]
[48.00576401 -100.94921112]
[45.56862259 -115.74990082]
[43.13148117 -130.55058289]
[30.14447212 -139.55686951]
[27.41192245 -155.12313843]
[36.55500793 -168.01420593]
[52.14929581 -170.58201599]
[64.94297791 -161.30316162]
[67.34577942 -145.68258667]
[57.93216705 -132.98773193]
[60.36930847 -118.18704224]
[62.80645370 -103.38635254]
[65.24359131 -88.58567047]
[78.66092682 -74.90236664]
[72.04017639 -56.06690979]
[75.67560577 -41.51411819]
[79.31103516 -26.96133041]
[82.94645691 -12.40853977]
[86.58188629 2.14424920]
[98.58391571 7.26485252]
[105.47196198 18.57795906]
[104.48204803 31.98284149]
[95.75576782 42.46325684]
[98.79457855 57.15221786]
[101.83338928 71.84117889]
[104.87220764 86.53014374]
[114.02692413 97.09814453]
[109.81675720 110.43104553]
[112.85556793 125.12000275]
[115.89438629 139.80897522]
[118.93319702 154.49792480]
[121.97200775 169.18688965]
[125.01082611 183.87585449]
[128.04963684 198.56481934]
[131.08845520 213.25378418]
[134.12725830 227.94274902]
[137.16607666 242.63169861]
[140.20489502 257.32067871]
[144.09243774 261.63134766]
[145.57115173 266.53430176]
[144.85617065 270.92681885]
[142.60073853 273.98416138]
[143.82337952 288.93426514]
[145.04602051 303.88433838]
[152.36326599 319.17794800]
[139.69297791 330.44293213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[30 43]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
