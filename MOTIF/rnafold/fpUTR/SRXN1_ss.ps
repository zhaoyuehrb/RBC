%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCACCUGGCGAGCGGAGCCGGAGUCGGGCUGGGGACCGCGGGGUCGAGGCCGGACCGCGGCGGGGUCGGGGGAGAAACGCGCGCUGCCCUGGCACGGGCCCCCCCCCCCGGCCGCGCGGAAUGGUAUGGCCCGGCCGGAGUUAAGGCCGGGGGGAGGCGGCGAGUCCCGCGGCGGCGGCGACG\
) } def
/len { sequence length } bind def

/coor [
[-74.43297577 199.21562195]
[-87.88695526 200.89212036]
[-101.25100708 198.70890808]
[-113.44166565 192.85258484]
[-123.47332001 183.80717468]
[-130.53790283 172.31408691]
[-145.05906677 176.07388306]
[-159.58021545 179.83366394]
[-174.10137939 183.59346008]
[-188.62252808 187.35324097]
[-203.14369202 191.11303711]
[-204.91891479 201.62234497]
[-210.08090210 210.90328979]
[-218.01547241 217.90422058]
[-227.79597473 221.84161377]
[-238.29153442 222.28771973]
[-248.29766846 219.21693420]
[-256.67462158 213.00575256]
[-262.47720337 204.38687134]
[-277.21905518 207.15776062]
[-291.96090698 209.92864990]
[-306.70275879 212.69953918]
[-315.63177490 225.46318054]
[-330.62158203 228.06324768]
[-342.73474121 219.47213745]
[-357.47659302 222.24302673]
[-372.21844482 225.01391602]
[-384.35183716 235.16731262]
[-398.28933716 229.91423035]
[-413.03118896 232.68511963]
[-427.77304077 235.45600891]
[-442.51489258 238.22689819]
[-448.79348755 250.15782166]
[-460.62774658 256.19973755]
[-473.58810425 254.34307861]
[-482.96682739 245.48892212]
[-497.75335693 248.01043701]
[-512.53991699 250.53195190]
[-527.32647705 253.05346680]
[-539.59576416 263.93447876]
[-555.06597900 258.49349976]
[-557.82269287 242.32769775]
[-545.03002930 232.06710815]
[-529.84796143 238.26692200]
[-515.06140137 235.74540710]
[-500.27487183 233.22389221]
[-485.48834229 230.70237732]
[-476.37063599 216.58235168]
[-459.53234863 213.35148621]
[-445.28579712 223.48504639]
[-430.54394531 220.71415710]
[-415.80209351 217.94326782]
[-401.06024170 215.17237854]
[-389.98129272 205.21717834]
[-374.98931885 210.27206421]
[-360.24746704 207.50117493]
[-345.50561523 204.73028564]
[-337.33853149 192.32728577]
[-322.42767334 189.30720520]
[-309.47366333 197.95768738]
[-294.73181152 195.18679810]
[-279.98995972 192.41590881]
[-265.24810791 189.64501953]
[-258.11224365 171.45864868]
[-241.33631897 161.16934204]
[-221.60493469 163.08020020]
[-206.90347290 176.59187317]
[-192.38232422 172.83209229]
[-177.86116028 169.07229614]
[-163.34001160 165.31251526]
[-148.81884766 161.55271912]
[-134.29769897 157.79293823]
[-133.05172729 141.40023804]
[-126.26562500 126.39804840]
[-114.74132538 114.60177612]
[-99.85528564 107.44543457]
[-83.39406586 105.80734253]
[-67.33995819 109.90238190]
[-53.63224792 119.25397491]
[-43.93294525 132.74948120]
[-29.54705811 128.50140381]
[-15.16116905 124.25331879]
[-9.62446404 119.33288574]
[-0.49634242 120.05718231]
[13.95924187 116.05267334]
[28.41482735 112.04816437]
[42.87041092 108.04366302]
[57.32599640 104.03915405]
[71.78157806 100.03464508]
[86.23716736 96.03014374]
[96.17597961 86.19593048]
[109.75833130 89.51427460]
[124.21391296 85.50976562]
[138.66949463 81.50526428]
[149.90319824 70.36459351]
[164.23414612 74.42330933]
[178.68972778 70.41880035]
[186.51029968 56.94747925]
[201.22735596 53.09226608]
[214.02201843 60.63100052]
[228.47760010 56.62649536]
[242.93318176 52.62199020]
[257.35443115 48.49554825]
[271.74032593 44.24746323]
[282.78427124 32.91865158]
[297.18170166 36.73474503]
[311.56759644 32.48666382]
[325.95349121 28.23858070]
[340.33938599 23.99049950]
[354.72528076 19.74241638]
[369.11114502 15.49433327]
[383.49703979 11.24625111]
[397.88293457 6.99816799]
[412.26882935 2.75008559]
[426.65472412 -1.49799693]
[440.92837524 -6.10914993]
[455.08062744 -11.08041382]
[466.73397827 -25.32501984]
[483.83779907 -21.43913078]
[497.90408325 -26.64871025]
[511.97036743 -31.85828972]
[516.25946045 -46.65388870]
[528.29754639 -55.97793198]
[543.33978271 -56.42040634]
[555.61126709 -48.02110672]
[569.67755127 -53.23068619]
[583.74383545 -58.44026566]
[596.49707031 -69.61124420]
[610.76196289 -60.44882965]
[605.90649414 -44.20502853]
[588.95343018 -44.37398148]
[574.88714600 -39.16440582]
[560.82086182 -33.95482635]
[556.98083496 -19.58847046]
[545.27923584 -10.12611485]
[530.07177734 -9.35952950]
[517.17993164 -17.79200745]
[503.11364746 -12.58242798]
[489.04739380 -7.37284946]
[483.70425415 3.49494863]
[472.01028442 7.94302177]
[460.05187988 3.07184935]
[445.89962769 8.04311275]
[444.04943848 11.06883621]
[440.63098145 13.34015465]
[436.01892090 14.12490463]
[430.90280151 12.88789177]
[416.51690674 17.13597488]
[402.13101196 21.38405609]
[387.74511719 25.63213921]
[373.35922241 29.88022232]
[358.97335815 34.12830353]
[344.58746338 38.37638855]
[330.20156860 42.62446976]
[315.81567383 46.87255096]
[301.42977905 51.12063599]
[291.41482544 62.14559937]
[275.98840332 58.63335419]
[261.60250854 62.88143539]
[256.06579590 67.80186462]
[246.93768311 67.07757568]
[232.48210144 71.08207703]
[218.02651978 75.08658600]
[210.93475342 88.13428497]
[196.33177185 92.40135193]
[182.69422913 84.87438202]
[168.23864746 88.87889099]
[158.03890991 99.73313141]
[142.67401123 95.96084595]
[128.21841431 99.96535492]
[113.76283264 103.96985626]
[103.82402039 113.80406952]
[90.24166870 110.48572540]
[75.78608704 114.49023438]
[61.33050156 118.49473572]
[46.87491989 122.49924469]
[32.41933441 126.50375366]
[17.96374893 130.50825500]
[3.50816417 134.51277161]
[-10.91308689 138.63920593]
[-25.29897499 142.88728333]
[-39.68486404 147.13537598]
[-39.92080688 160.77551270]
[-43.98903275 173.77935791]
[-51.55018997 185.09397888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[19 63]
[20 62]
[21 61]
[22 60]
[25 57]
[26 56]
[27 55]
[29 53]
[30 52]
[31 51]
[32 50]
[36 47]
[37 46]
[38 45]
[39 44]
[80 182]
[81 181]
[82 180]
[84 179]
[85 178]
[86 177]
[87 176]
[88 175]
[89 174]
[90 173]
[92 171]
[93 170]
[94 169]
[96 167]
[97 166]
[100 163]
[101 162]
[102 161]
[103 159]
[104 158]
[106 156]
[107 155]
[108 154]
[109 153]
[110 152]
[111 151]
[112 150]
[113 149]
[114 148]
[115 147]
[116 143]
[117 142]
[119 139]
[120 138]
[121 137]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
