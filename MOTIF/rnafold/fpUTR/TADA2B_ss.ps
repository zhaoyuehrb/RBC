%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCUGGGGCCGCGGUGGCGGCAGCCGCGGCGGCGGGCGGCGGUUGCUCGUGCGCGGCGGCGGCGGCGGGUCCCGCGGGCGGCGGGGCGCUGACGGCCGGGGGCGCGGCGGCUGCGGCGGGCCGGGCGGCGGGCGGCGAGCGGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[236.30665588 424.80993652]
[231.14399719 410.72637939]
[225.98133850 396.64279175]
[211.92935181 386.17550659]
[215.15287781 368.07537842]
[209.70025635 354.10153198]
[204.24763489 340.12765503]
[192.41317749 331.08361816]
[194.60470581 315.41491699]
[189.15208435 301.44107056]
[177.31761169 292.39700317]
[179.50914001 276.72833252]
[174.05651855 262.75445557]
[168.60391235 248.78059387]
[163.15129089 234.80673218]
[151.31681824 225.76269531]
[153.50834656 210.09399414]
[148.05572510 196.12013245]
[142.60310364 182.14627075]
[137.15048218 168.17239380]
[131.69787598 154.19853210]
[119.86340332 145.15449524]
[122.05493164 129.48580933]
[116.60231018 115.51194000]
[93.54640961 119.21935272]
[82.26890564 101.84255981]
[68.08164978 96.97206879]
[53.89439011 92.10157013]
[39.70713043 87.23107910]
[25.51987076 82.36058807]
[9.95513344 85.19775391]
[0.42975712 73.74713898]
[-13.75750160 68.87664795]
[-29.32223892 71.71381378]
[-38.84761429 60.26320267]
[-53.03487396 55.39271164]
[-67.22212982 50.52222061]
[-82.78687286 53.35938263]
[-92.31224823 41.90877151]
[-106.49950409 37.03828049]
[-120.68676758 32.16778946]
[-134.92359924 27.44416809]
[-149.20848083 22.86792183]
[-165.11163330 26.87067413]
[-176.33390808 14.91273117]
[-171.33081055 -0.70459920]
[-155.24908447 -3.91554689]
[-144.63223267 8.58303642]
[-130.34735107 13.15928078]
[-122.97129822 12.19872952]
[-115.81626892 17.98052979]
[-101.62901306 22.85102272]
[-87.44175720 27.72151375]
[-72.89178467 24.53598022]
[-62.35164261 36.33496094]
[-48.16438293 41.20545197]
[-33.97712326 46.07594681]
[-19.42715263 42.89041138]
[-8.88700962 54.68939209]
[5.30024910 59.55988312]
[19.85021973 56.37435150]
[30.39036369 68.17333221]
[44.57762146 73.04382324]
[58.76488113 77.91431427]
[72.95214081 82.78480530]
[87.13939667 87.65529633]
[95.96252441 80.96533966]
[107.97583008 80.47662354]
[118.92906189 87.43227386]
[126.60733795 74.54646301]
[127.02468109 58.73076630]
[140.18634033 51.75796127]
[147.86460876 38.87215042]
[155.54289246 25.98634148]
[163.22116089 13.10053253]
[170.89944458 0.21472296]
[172.62255859 -8.82156563]
[178.87190247 -12.85572052]
[186.81484985 -25.58009148]
[194.75779724 -38.30446243]
[195.50190735 -54.10816193]
[208.80487061 -60.80746460]
[216.74781799 -73.53183746]
[217.49192810 -89.33553314]
[230.79487610 -96.03483582]
[238.73782349 -108.75920868]
[246.68077087 -121.48358154]
[246.70449829 -137.88270569]
[261.05145264 -145.82609558]
[274.96270752 -137.14225769]
[274.12756348 -120.76438904]
[259.40515137 -113.54063416]
[251.46220398 -100.81626129]
[243.51925659 -88.09189606]
[243.34327698 -73.19832611]
[229.47218323 -65.58889008]
[221.52923584 -52.86452103]
[221.35325623 -37.97095490]
[207.48216248 -30.36151695]
[199.53923035 -17.63714600]
[191.59628296 -4.91277504]
[183.78524780 7.89299870]
[176.10697937 20.77880859]
[168.42869568 33.66461563]
[160.75042725 46.55042648]
[153.07214355 59.43623734]
[153.20401001 74.33026123]
[139.49314880 82.22473907]
[131.81486511 95.11054993]
[130.57617188 110.05931854]
[136.02879333 124.03318787]
[148.25326538 134.07673645]
[145.67173767 148.74591064]
[151.12435913 162.71978760]
[156.57698059 176.69364929]
[162.02960205 190.66751099]
[167.48220825 204.64138794]
[179.70668030 214.68492126]
[177.12515259 229.35411072]
[182.57777405 243.32797241]
[188.03039551 257.30184937]
[193.48301697 271.27569580]
[205.70748901 281.31924438]
[203.12594604 295.98843384]
[208.57856750 309.96231079]
[220.80303955 320.00585938]
[218.22151184 334.67504883]
[223.67411804 348.64889526]
[229.12673950 362.62277222]
[240.63621521 368.53552246]
[244.87121582 380.33636475]
[240.06491089 391.48013306]
[245.22756958 405.56372070]
[250.39022827 419.64727783]
[256.83856201 433.19052124]
[264.51684570 446.07632446]
[279.65341187 451.39266968]
[284.79815674 466.58843994]
[276.00442505 480.00671387]
[260.01806641 481.35415649]
[249.10241699 469.59710693]
[251.63102722 453.75460815]
[243.95275879 440.86877441]
[241.40008545 455.64999390]
[231.37031555 466.80361938]
[216.94219971 470.90600586]
[202.54458618 466.69781494]
[192.59696960 455.47085571]
[190.15287781 440.67129517]
[195.96253967 426.84207153]
[208.24263000 418.22814941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[5 129]
[6 128]
[7 127]
[9 125]
[10 124]
[12 122]
[13 121]
[14 120]
[15 119]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[23 111]
[24 110]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[32 60]
[33 59]
[35 57]
[36 56]
[37 55]
[39 53]
[40 52]
[41 51]
[42 49]
[43 48]
[69 109]
[70 108]
[72 106]
[73 105]
[74 104]
[75 103]
[76 102]
[78 101]
[79 100]
[80 99]
[82 97]
[83 96]
[85 94]
[86 93]
[87 92]
[135 143]
[136 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
