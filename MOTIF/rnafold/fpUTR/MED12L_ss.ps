%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCACAGCGAGCGAGCGAGCGAGGAGGGGGAGAGAGGGAGUCUGUCUGCAAAGUGCUGCUCCCUGGUGCUCAGAGGCGGCUGCUCCAGCUCCAACUCUCAUUCAUUUCGCCGGUUAACAUGAGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[93.75009918 391.63262939]
[89.80948639 406.10577393]
[85.86887360 420.57891846]
[90.57038116 436.28967285]
[79.11996460 448.02932739]
[63.29682922 443.72116089]
[59.37845993 427.79702759]
[71.39574432 416.63830566]
[75.33634949 402.16516113]
[79.27696228 387.69201660]
[62.44203568 371.47528076]
[58.16581345 348.38119507]
[68.17269897 327.00979614]
[88.84349060 315.39654541]
[88.84349060 300.39654541]
[81.10619354 287.66928101]
[88.84349060 273.86911011]
[88.84349060 258.86911011]
[85.66532898 252.11190796]
[89.02911377 243.50775146]
[89.39157104 228.51213074]
[89.75402069 213.51651001]
[90.11647797 198.52088928]
[90.47893524 183.52526855]
[90.84139252 168.52964783]
[83.41388702 155.61912537]
[91.48239899 142.00994873]
[91.84484863 127.01432800]
[92.20730591 112.01870728]
[85.68023682 99.65387726]
[92.79707336 87.61883545]
[93.15953064 72.62321472]
[93.52198792 57.62759399]
[93.88443756 42.63197327]
[94.24689484 27.63635445]
[83.62454224 16.24322701]
[84.20574188 1.04069972]
[95.13281250 -9.01587963]
[95.49526978 -24.01149940]
[95.85771942 -39.00711823]
[96.22017670 -54.00273895]
[93.27601624 -62.75936890]
[96.77693176 -69.35513306]
[97.50163269 -84.33761597]
[98.22633362 -99.32009888]
[88.04784393 -108.23349762]
[84.93881226 -121.20038605]
[89.82368469 -133.39776611]
[100.69593811 -140.42205811]
[101.78246307 -155.38265991]
[102.86898041 -170.34326172]
[100.71134186 -174.37860107]
[100.08106232 -178.47383118]
[100.79835510 -182.12191772]
[102.53168488 -184.93251038]
[104.85173798 -186.67272949]
[107.37709045 -201.45861816]
[109.90245056 -216.24450684]
[112.42780304 -231.03039551]
[114.95316315 -245.81628418]
[117.47851562 -260.60217285]
[110.65108490 -271.62310791]
[113.12595367 -283.93905640]
[123.02647400 -290.99914551]
[125.90837097 -305.71969604]
[128.79026794 -320.44024658]
[121.06613922 -334.50143433]
[127.37643433 -349.25134277]
[142.88043213 -353.37509155]
[155.68481445 -343.70928955]
[155.96713257 -327.66873169]
[143.51083374 -317.55834961]
[140.62892151 -302.83779907]
[137.74702454 -288.11724854]
[144.35229492 -271.90557861]
[132.26440430 -258.07681274]
[129.73905945 -243.29093933]
[127.21369934 -228.50503540]
[124.68833923 -213.71914673]
[122.16298676 -198.93325806]
[119.63762665 -184.14736938]
[117.82958221 -169.25672913]
[116.74305725 -154.29614258]
[115.65653229 -139.33554077]
[127.17992401 -127.14906311]
[126.35691071 -110.06049347]
[113.20881653 -98.59539795]
[112.48411560 -83.61291504]
[111.75941467 -68.63043213]
[111.21579742 -53.64028549]
[110.85334015 -38.64466476]
[110.49089050 -23.64904404]
[110.12843323 -8.65342331]
[120.55686951 1.91933560]
[120.40290833 17.13219070]
[109.24251556 27.99881172]
[108.88005829 42.99443054]
[108.51760101 57.99005127]
[108.15515137 72.98567200]
[107.79269409 87.98129272]
[114.31976318 100.34612274]
[107.20292664 112.38116455]
[106.84046936 127.37678528]
[106.47801208 142.37240601]
[113.87959290 156.35551453]
[105.83701324 168.89210510]
[105.47455597 183.88772583]
[105.11209869 198.88334656]
[104.74964142 213.87896729]
[104.38719177 228.87458801]
[104.02473450 243.87020874]
[103.84349060 258.86911011]
[103.84349060 273.86911011]
[111.58078766 287.66928101]
[103.84349060 300.39654541]
[103.84349060 315.39654541]
[111.29412079 317.70770264]
[118.12460327 321.45541382]
[124.06166077 326.48532104]
[128.86866760 332.59185791]
[132.35502625 339.52658081]
[134.38380432 347.00839233]
[134.87702942 354.73492432]
[133.81874084 362.39462280]
[131.25540161 369.67950439]
[127.29397583 376.29742432]
[122.09738922 381.98373413]
[115.87783813 386.51205444]
[108.88817596 389.70312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[14 116]
[15 115]
[17 113]
[18 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[27 104]
[28 103]
[29 102]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[38 93]
[39 92]
[40 91]
[41 90]
[43 89]
[44 88]
[45 87]
[49 84]
[50 83]
[51 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[61 76]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
