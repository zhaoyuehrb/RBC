%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGAGAUAAAGGCCGGGGCUGGCACCCUGCGGAGGGAGGCCCAGCACUCACAGCACAGCCCCCUGAGACCCGCCCUGCACUUGACCGCAGCAGGAGGGAGUCCAGGAGCCAAGGUUGCCGCGGUGUCUCCGUCAGCCUCACC\
) } def
/len { sequence length } bind def

/coor [
[82.50390625 228.49467468]
[67.69300842 226.12036133]
[54.39525604 219.17991638]
[43.97819138 208.38711548]
[37.51311111 194.85186768]
[35.66489410 179.96617126]
[38.62361145 165.26086426]
[46.08498383 152.24826050]
[57.28168106 142.26657104]
[71.06222534 136.34233093]
[86.00941467 135.08479309]
[100.58608246 138.62327576]
[113.29265594 146.59346008]
[106.99431610 132.97982788]
[100.69598389 119.36619568]
[81.20444489 111.78688812]
[77.90700531 88.31535339]
[63.16065598 85.56850433]
[48.41430664 82.82166290]
[33.66795731 80.07481384]
[18.92160797 77.32797241]
[4.17525721 74.58112335]
[-10.57109261 71.83427429]
[-25.34633255 69.24733734]
[-40.14873123 66.82060242]
[-51.75675964 81.29822540]
[-71.52921295 85.24971771]
[-90.64604187 74.83038330]
[-105.44844055 77.25711823]
[-120.25083160 79.68384552]
[-132.58958435 90.48603821]
[-148.02462769 84.94603729]
[-150.67770386 68.76292419]
[-137.81958008 58.58449936]
[-122.67756653 64.88144684]
[-107.87516785 62.45471954]
[-93.07276917 60.02798843]
[-91.61261749 45.09922791]
[-105.66428375 39.85034180]
[-119.71594238 34.60145950]
[-133.82363892 29.50510597]
[-147.98571777 24.56187820]
[-164.93261719 25.05069542]
[-170.09370422 8.90140724]
[-156.00427246 -0.52854830]
[-143.04249573 10.39979839]
[-128.88041687 15.34302711]
[-121.47385406 14.57197762]
[-114.46706390 20.54979897]
[-100.41539764 25.79868126]
[-86.36373901 31.04756355]
[-69.98069763 24.51673317]
[-53.56754684 27.41659546]
[-41.86714554 37.88297272]
[-37.72200012 52.01820755]
[-22.91960335 54.44493866]
[-15.75699902 52.40808868]
[-7.82424641 57.08792496]
[6.92210340 59.83477402]
[21.66845322 62.58161926]
[36.41480255 65.32846832]
[51.16115189 68.07530975]
[65.90750122 70.82215881]
[80.65385437 73.56900787]
[94.46495056 67.71634674]
[102.74777222 55.21055222]
[111.03058624 42.70475769]
[113.18552399 33.75011063]
[119.63076782 30.02043533]
[128.18257141 17.69701767]
[136.73439026 5.37360001]
[145.15219116 -7.04173517]
[153.43501282 -19.54753113]
[150.49957275 -34.84527588]
[159.07768250 -47.40993881]
[173.67984009 -50.11414337]
[181.96266174 -62.61994171]
[190.24546814 -75.12573242]
[198.52828979 -87.63153076]
[206.81111145 -100.13732910]
[199.38403320 -113.52004242]
[199.03852844 -128.82165527]
[205.85398865 -142.52595520]
[218.26429749 -151.48381042]
[233.41761780 -153.63676453]
[247.83186340 -148.49008179]
[258.19470215 -137.22642517]
[262.12487793 -122.43412781]
[258.71923828 -107.51232147]
[248.76039124 -95.88994598]
[234.53678894 -90.23772430]
[219.31690979 -91.85450745]
[211.03408813 -79.34871674]
[202.75126648 -66.84291840]
[194.46844482 -54.33712387]
[186.18563843 -41.83132553]
[189.39318848 -27.33142471]
[181.17138672 -14.53077698]
[165.94079590 -11.26471233]
[157.65798950 1.24108350]
[156.57882690 8.60906124]
[149.05780029 13.92540550]
[140.50599670 26.24882317]
[131.95419312 38.57223892]
[123.53638458 50.98757553]
[115.25356293 63.49337006]
[106.97074890 75.99916840]
[118.92393494 86.71542358]
[121.20649719 101.35913849]
[114.30960846 113.06786346]
[120.60794830 126.68148804]
[126.90628815 140.29512024]
[134.92536926 145.98493958]
[136.78425598 154.52958679]
[147.33325195 165.19348145]
[157.88224792 175.85737610]
[168.43124390 186.52128601]
[178.98023987 197.18518066]
[189.52923584 207.84907532]
[195.90850830 209.99810791]
[199.63479614 214.41217041]
[200.29168701 219.21086121]
[210.36883545 230.32171631]
[220.44598389 241.43257141]
[230.52313232 252.54342651]
[246.41256714 254.75820923]
[254.46357727 268.63482666]
[248.50010681 283.52835083]
[233.09681702 288.01370239]
[220.06980896 278.65014648]
[219.41226196 262.62057495]
[209.33512878 251.50971985]
[199.25798035 240.39886475]
[189.18083191 229.28800964]
[178.86534119 218.39807129]
[168.31634521 207.73417664]
[157.76734924 197.07028198]
[147.21835327 186.40637207]
[136.66935730 175.74247742]
[126.12036133 165.07858276]
[129.14031982 179.77143860]
[127.35414124 194.66470337]
[120.94551086 208.22677612]
[110.57350922 219.06288147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 112]
[14 111]
[15 110]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 56]
[25 55]
[28 37]
[29 36]
[30 35]
[38 51]
[39 50]
[40 49]
[41 47]
[42 46]
[65 107]
[66 106]
[67 105]
[69 104]
[70 103]
[71 102]
[72 100]
[73 99]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[114 140]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
