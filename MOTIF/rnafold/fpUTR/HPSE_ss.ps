%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCGCUGCUCCCCGGGCGCUCCUCCCCGGGCGCUCCUCCCCAGGCCUCCCGGGCGCUUGGAUCCCGGCCAUCUCCGCACCCUUCAAGUGGGUGUGGGUGAUUUCCUGGCGGGGGGAGCAGCCAGGUGAGCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[136.46385193 308.43243408]
[133.07849121 293.81942749]
[121.25859070 288.56515503]
[114.54607391 277.28042603]
[115.60128021 263.99691772]
[124.26107025 253.61369324]
[121.20923615 238.92744446]
[118.15739441 224.24118042]
[115.10555267 209.55491638]
[112.05371094 194.86865234]
[109.00186920 180.18238831]
[105.95003510 165.49613953]
[102.89819336 150.80987549]
[99.84635162 136.12361145]
[96.79450989 121.43734741]
[83.63677216 114.23499298]
[69.62086487 119.57862091]
[55.60495758 124.92224884]
[41.58905029 130.26586914]
[27.57314301 135.60949707]
[13.55723476 140.95312500]
[-0.45867264 146.29675293]
[-14.47457981 151.64038086]
[-20.70606995 166.16429138]
[-35.41315079 171.95025635]
[-49.87036896 165.56555176]
[-55.50051498 150.79812622]
[-48.96332550 136.40921021]
[-34.13719559 130.93551636]
[-19.81820679 137.62446594]
[-5.80229855 132.28083801]
[8.21360970 126.93721771]
[22.22951698 121.59358978]
[36.24542618 116.24996185]
[50.26133347 110.90634155]
[64.27723694 105.56271362]
[78.29314423 100.21908569]
[79.90254974 92.89379883]
[65.25202942 89.67475128]
[68.47132111 75.02428436]
[83.12135315 78.24322510]
[84.73075867 70.91793823]
[74.24557495 60.19129944]
[63.76038742 49.46465683]
[53.27519989 38.73801422]
[42.79001236 28.01137161]
[32.30482483 17.28472900]
[21.69822502 6.67812681]
[10.97158241 -3.80705976]
[-5.04149771 -7.34447527]
[-9.72587776 -23.06034660]
[1.73733020 -34.78753281]
[17.55576134 -30.46211052]
[21.45676804 -14.53370285]
[32.18341064 -4.04851580]
[39.22604752 -1.60137033]
[43.03146744 6.79954195]
[53.51665497 17.52618408]
[64.00183868 28.25282669]
[74.48703003 38.97946930]
[84.97221375 49.70611191]
[95.45740509 60.43275452]
[103.71221161 67.58666229]
[108.53506470 76.05222321]
[109.84363556 84.66636658]
[107.89748383 92.31513214]
[119.95195007 83.38821411]
[132.00640869 74.46130371]
[137.09669495 66.77068329]
[144.43841553 65.47209167]
[156.69297791 56.82188416]
[168.94752502 48.17168045]
[180.69018555 38.83841705]
[191.88293457 28.85231400]
[202.96130371 18.73945999]
[213.92384338 8.50116253]
[224.88638306 -1.73713505]
[235.84892273 -11.97543240]
[246.81146240 -22.21372986]
[257.77398682 -32.45202637]
[268.73654175 -42.69032288]
[279.69906616 -52.92861938]
[290.66162109 -63.16691971]
[289.65072632 -78.77179718]
[298.94860840 -91.34493256]
[314.16503906 -94.94968414]
[328.11529541 -87.88399506]
[334.21252441 -73.48406219]
[329.57775879 -58.54910278]
[316.39941406 -50.13094330]
[300.89990234 -52.20438004]
[289.93737793 -41.96607971]
[278.97482300 -31.72778320]
[268.01229858 -21.48948669]
[257.04974365 -11.25119019]
[246.08721924 -1.01289272]
[235.12467957 9.22540474]
[224.16213989 19.46370125]
[213.19960022 29.70199966]
[210.43444824 36.62595749]
[201.86903381 40.04507065]
[190.67628479 50.03116989]
[205.15307617 53.95833588]
[211.32221985 67.63099670]
[204.68733215 81.08380890]
[190.08425903 84.51167297]
[178.15647888 75.41617584]
[177.59771729 60.42622757]
[165.34317017 69.07643127]
[153.08862305 77.72663879]
[140.93333435 86.51576996]
[128.87886047 95.44268799]
[116.82440186 104.36959839]
[111.48077393 118.38550568]
[114.53261566 133.07176208]
[117.58444977 147.75802612]
[120.63629150 162.44429016]
[123.68813324 177.13055420]
[126.73997498 191.81681824]
[129.79180908 206.50308228]
[132.84365845 221.18933105]
[135.89549255 235.87559509]
[138.94734192 250.56185913]
[153.72618103 259.84429932]
[157.19343567 276.60494995]
[147.69148254 290.43408203]
[151.07682800 305.04705811]
[165.90081787 308.85598755]
[177.24893188 319.12628174]
[182.51345825 333.49789429]
[180.48464966 348.66836548]
[171.62870789 361.15158081]
[157.98066711 368.07901001]
[142.67674255 367.85882568]
[129.23365784 360.54153442]
[120.74056244 347.80868530]
[119.14907837 332.58615112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[14 115]
[15 114]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 55]
[49 54]
[66 113]
[67 112]
[68 111]
[70 110]
[71 109]
[72 108]
[73 102]
[74 101]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
