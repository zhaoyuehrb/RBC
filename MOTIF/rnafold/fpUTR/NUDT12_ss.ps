%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUCGGGAAGACUGCAUCCGGCUCCAGGAAAAGCGAGUGGGAUAUCCCAAUCUUUGGACUGCAUCCUGGUUGCCUCUACUGUGGUCACCUUUGGGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[103.65647125 350.40878296]
[101.44177246 335.57318115]
[91.91013336 324.12780762]
[97.52508545 309.33648682]
[95.31038666 294.50088501]
[92.95850372 292.70648193]
[91.23748779 289.79727173]
[90.60566711 286.03302002]
[91.40892792 281.84539795]
[93.82064056 277.78994751]
[93.37614441 262.79650879]
[92.93164062 247.80311584]
[84.29502869 239.19015503]
[83.89491272 226.59623718]
[92.50000000 216.84748840]
[92.50000000 201.84748840]
[92.50000000 186.84748840]
[92.50000000 171.84748840]
[92.50000000 156.84748840]
[92.50000000 141.84748840]
[92.50000000 126.84749603]
[78.04738617 117.17907715]
[72.13684082 100.82604218]
[77.06824493 84.15158081]
[90.92270660 73.64396667]
[90.03410339 58.67030716]
[89.14549255 43.69665146]
[78.64218140 28.66322136]
[86.91368866 13.26429939]
[85.58174896 -1.67644846]
[84.24980927 -16.61719704]
[82.91786957 -31.55794334]
[81.58592987 -46.49869156]
[80.25399017 -61.43943787]
[71.36833191 -68.05791473]
[67.75367737 -78.29666138]
[70.40447235 -88.59750366]
[78.18169403 -95.52454376]
[77.73719788 -110.51795197]
[75.52249908 -125.35355377]
[71.56868744 -139.82308960]
[60.46746826 -151.09577942]
[64.57639313 -165.41241455]
[60.62258911 -179.88194275]
[56.66878128 -194.35147095]
[52.71497345 -208.82101440]
[40.68752289 -219.96876526]
[44.59136963 -235.89646912]
[60.41056824 -240.21908569]
[71.87168884 -228.48985291]
[67.18450928 -212.77481079]
[71.13831329 -198.30528259]
[75.09212494 -183.83575439]
[79.04592896 -169.36621094]
[89.86434937 -159.12849426]
[86.03822327 -143.77690125]
[89.99203491 -129.30735779]
[97.71468353 -142.16662598]
[111.43038940 -148.23947144]
[126.14222717 -145.31341553]
[136.49037170 -134.45449829]
[138.70474243 -119.61884308]
[131.97863770 -106.21141052]
[118.76248932 -99.11679840]
[103.87123108 -100.91973114]
[92.73060608 -110.96245575]
[93.17510986 -95.96903992]
[104.59311676 -80.48288727]
[95.19474030 -62.77137756]
[96.52667999 -47.83063126]
[97.85861969 -32.88988113]
[99.19055939 -17.94913483]
[100.52249146 -3.00838685]
[101.85443115 11.93236065]
[110.98611450 20.01854706]
[112.13159943 32.56665039]
[104.11914825 42.80804062]
[105.00775909 57.78169632]
[105.89636230 72.75535583]
[116.99845886 77.90723419]
[124.82357025 87.31819153]
[127.86315918 99.17395782]
[125.53125000 111.18897247]
[118.27739716 121.04696655]
[107.50000000 126.84749603]
[107.50000000 141.84748840]
[107.50000000 156.84748840]
[107.50000000 171.84748840]
[107.50000000 186.84748840]
[107.50000000 201.84748840]
[107.50000000 216.84748840]
[117.09427643 232.47674561]
[107.92505646 247.35861206]
[108.36955261 262.35202026]
[108.81405640 277.34542847]
[110.14598846 292.28619385]
[112.36068726 307.12179565]
[122.05073547 319.62832642]
[116.27737427 333.35848999]
[118.49207306 348.19409180]
[131.34243774 357.39431763]
[133.84100342 372.99984741]
[124.50544739 385.75219727]
[108.87437439 388.08566284]
[96.22142029 378.61578369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[4 97]
[5 96]
[10 95]
[11 94]
[12 93]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[25 79]
[26 78]
[27 77]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[38 67]
[39 66]
[40 57]
[41 56]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
