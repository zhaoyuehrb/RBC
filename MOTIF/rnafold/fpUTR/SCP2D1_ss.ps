%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGAUGUCACAAUCUGACCUGUGGGUAUUAAUCUGGUCACAGCUGCUCACAGACUAGAUGGCAAGGUCCAGGGGACUAGCACAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[66.67475128 195.68597412]
[70.76449585 181.25427246]
[79.01656342 168.72816467]
[90.66237640 159.27432251]
[104.61724091 153.77326965]
[119.58142853 152.73736572]
[134.16189575 156.26339722]
[125.01336670 144.37623596]
[115.86483765 132.48908997]
[106.71630096 120.60193634]
[97.56777191 108.71478271]
[93.60241699 107.67146301]
[90.17110443 104.78144836]
[88.13388062 100.35408020]
[88.16468811 95.09206390]
[80.29412079 82.32279968]
[72.42355347 69.55352783]
[64.55298615 56.78426361]
[49.43702316 53.02322769]
[41.63705063 39.96125793]
[45.31577682 25.57367325]
[37.44520950 12.80440712]
[29.57464409 0.03514070]
[21.70407677 -12.73412609]
[13.83350849 -25.50339317]
[5.96294165 -38.27265930]
[-1.90762579 -51.04192734]
[-9.77819347 -63.81119156]
[-17.64875984 -76.58045959]
[-26.46745682 -76.98136139]
[-34.26308441 -80.91573334]
[-39.70332718 -87.62348938]
[-41.89457321 -95.87856293]
[-40.52805328 -104.21260071]
[-35.92074966 -111.17610931]
[-41.95865631 -124.90722656]
[-47.99656677 -138.63835144]
[-61.53209686 -147.89692688]
[-60.01207352 -164.22547913]
[-45.00016403 -170.82658386]
[-31.93933296 -160.90959167]
[-34.26544571 -144.67625427]
[-28.22753716 -130.94512939]
[-22.18962860 -117.21401978]
[-3.38077569 -106.68703461]
[-4.87949371 -84.45102692]
[2.99107361 -71.68176270]
[10.86164093 -58.91249466]
[18.73220825 -46.14322662]
[26.60277557 -33.37395859]
[34.47334290 -20.60469246]
[42.34391022 -7.83542681]
[50.21447754 4.93383980]
[58.08504486 17.70310593]
[72.59123993 20.88208771]
[80.75502014 33.71981812]
[77.32225037 48.91369629]
[85.19281769 61.68296432]
[93.06338501 74.45223236]
[100.93395233 87.22149658]
[109.45492554 99.56625366]
[118.60345459 111.45340729]
[127.75198364 123.34056091]
[136.90051270 135.22770691]
[146.04904175 147.11486816]
[153.15832520 149.69271851]
[157.28746033 155.16207886]
[171.48794556 159.99389648]
[185.68843079 164.82569885]
[199.88890076 169.65750122]
[214.08938599 174.48931885]
[231.03192139 173.86735535]
[236.31973267 189.97560120]
[222.30480957 199.51596069]
[209.25758362 188.68978882]
[195.05709839 183.85798645]
[180.85661316 179.02618408]
[166.65614319 174.19436646]
[152.45565796 169.36256409]
[160.49009705 182.02935791]
[164.32991028 196.52957153]
[163.61744690 211.51263428]
[158.41908264 225.58306885]
[149.21897888 237.43034363]
[136.87403870 245.95103455]
[122.53402710 250.35151672]
[107.53458405 250.22195435]
[93.27274323 245.57438660]
[81.07683563 236.84170532]
[72.08277130 224.83724976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[15 60]
[16 59]
[17 58]
[18 57]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[35 44]
[36 43]
[37 42]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
