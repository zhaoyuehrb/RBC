%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGGAAGCGGAAGAGGCUGCAGGGCCGGGAAGCCUCUGUUUGGUCCGGCCAGGUCCCGGGAUCCGGGCCGCCAGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[91.29429626 214.78141785]
[77.44405365 206.68508911]
[75.28121948 190.78849792]
[86.46492767 179.28613281]
[87.59935760 164.32910156]
[88.73378754 149.37205505]
[89.86821747 134.41500854]
[81.64672852 130.82537842]
[74.57286835 125.30824280]
[69.08894348 118.20859528]
[54.85859680 122.95171356]
[40.62824631 127.69482422]
[26.39789581 132.43794250]
[19.55476379 146.68388367]
[4.61506653 151.83956909]
[-9.55773735 144.84620667]
[-14.55517387 129.85282898]
[-7.41235447 115.75475311]
[7.63301420 110.91611481]
[21.65478134 118.20758820]
[35.88513184 113.46447754]
[50.11548233 108.72135925]
[64.34583282 103.97824860]
[66.04696655 88.41390228]
[74.21510315 75.05635834]
[87.29447174 66.44980621]
[85.03210449 51.62139511]
[82.76974487 36.79298401]
[80.50737762 21.96457672]
[78.24501038 7.13616800]
[75.98265076 -7.69224072]
[72.37349701 -12.15050697]
[71.14977264 -17.06539154]
[72.04989624 -21.37897873]
[74.40452576 -24.31987762]
[73.83689880 -39.30913544]
[73.26927948 -54.29838943]
[60.80826187 -63.74598312]
[57.38578796 -79.00444794]
[64.61784363 -92.86920166]
[79.08968353 -98.79373169]
[93.96813202 -93.98065186]
[102.22805023 -80.70256042]
[99.96936035 -65.22895813]
[88.25853729 -54.86601257]
[88.82615662 -39.87675476]
[89.39378357 -24.88749886]
[90.81105804 -9.95460510]
[93.07342529 4.87380362]
[95.33578491 19.70221138]
[97.59815216 34.53062057]
[99.86051941 49.35903168]
[102.12287903 64.18743896]
[124.63749695 73.92242432]
[135.63439941 95.84835052]
[150.56729126 97.26562500]
[159.66242981 94.92213440]
[166.03475952 99.02956390]
[180.90332031 101.01091003]
[195.77188110 102.99225616]
[210.64045715 104.97360229]
[225.50901794 106.95494843]
[242.00802612 103.05377197]
[250.32412720 117.82803345]
[238.42936707 129.90905762]
[223.52767944 121.82350922]
[208.65910339 119.84217072]
[193.79054260 117.86082458]
[178.92198181 115.87947845]
[164.05340576 113.89813232]
[149.15000916 112.19851685]
[134.21711731 110.78124237]
[131.59175110 117.00022125]
[127.84786224 122.61730957]
[123.11801910 127.43361664]
[117.56967163 131.27862549]
[111.39926147 134.01622009]
[104.82525635 135.54943848]
[103.69082642 150.50648499]
[102.55639648 165.46353149]
[101.42196655 180.42056274]
[110.74290466 193.47811890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 81]
[5 80]
[6 79]
[7 78]
[10 23]
[11 22]
[12 21]
[13 20]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[35 47]
[36 46]
[37 45]
[55 72]
[56 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
