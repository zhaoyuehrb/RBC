%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGACAGGCCCCGCCCCCGCCAAACGCCUGGCGCCCUCCGUCGCCCGGUUUCCAUGGUGACGGGGCGCCAGGCUAGGGCGGCCUGGCCACUGAGCCGGGGUGCAGUGGCAGCGGGAGAGUACCUGGCGAUGGCGAU\
) } def
/len { sequence length } bind def

/coor [
[133.39964294 352.44808960]
[131.70814514 337.54376221]
[122.58498383 325.77017212]
[128.71673584 311.18551636]
[127.02523804 296.28118896]
[117.90207672 284.50759888]
[124.03382874 269.92294312]
[122.34233093 255.01863098]
[120.65083313 240.11431885]
[118.95933533 225.20999146]
[103.55150604 208.88768005]
[112.41917419 187.47790527]
[109.05775452 172.85940552]
[105.69633484 158.24089050]
[102.33492279 143.62237549]
[98.97350311 129.00386047]
[81.19492340 122.10536194]
[71.53574371 105.66250610]
[74.16646576 86.77477264]
[63.03443146 76.72103119]
[51.90239716 66.66728210]
[40.77035904 56.61354065]
[29.63832283 46.55979919]
[16.35254288 50.40601349]
[3.01208615 47.18930435]
[-6.90268087 37.85947418]
[-10.86004543 24.94651985]
[-7.92288923 11.87522697]
[-18.82487297 1.57247305]
[-29.72685814 -8.73028088]
[-40.62884140 -19.03303528]
[-51.53082657 -29.33578873]
[-62.43281174 -39.63854218]
[-73.33479309 -49.94129562]
[-84.23677826 -60.24405289]
[-95.13876343 -70.54680634]
[-106.04074860 -80.84955597]
[-116.94273376 -91.15231323]
[-123.40670013 -93.09011841]
[-127.28309631 -97.39044189]
[-128.09120178 -102.17550659]
[-138.51649475 -112.96036530]
[-148.94178772 -123.74523163]
[-159.36708069 -134.53009033]
[-169.79237366 -145.31495667]
[-180.21766663 -156.09982300]
[-190.64295959 -166.88467407]
[-208.43041992 -171.49449158]
[-212.10302734 -188.61807251]
[-222.76939392 -199.16456604]
[-238.28363037 -206.00157166]
[-236.00859070 -222.80218506]
[-219.23477173 -225.26692200]
[-212.22288513 -209.83093262]
[-201.55651855 -199.28443909]
[-189.41003418 -199.02326965]
[-180.43397522 -190.25036621]
[-179.85810852 -177.30996704]
[-169.43280029 -166.52511597]
[-159.00750732 -155.74024963]
[-148.58221436 -144.95538330]
[-138.15692139 -134.17051697]
[-127.73163605 -123.38565826]
[-117.30634308 -112.60079956]
[-106.63997650 -102.05429840]
[-95.73799133 -91.75154114]
[-84.83600616 -81.44879150]
[-73.93402100 -71.14603424]
[-63.03203964 -60.84328079]
[-52.13005447 -50.54052734]
[-41.22807312 -40.23777390]
[-30.32608795 -29.93501854]
[-19.42410278 -19.63226509]
[-8.52211952 -9.32951069]
[2.37986493 0.97324306]
[18.36767578 -2.57630348]
[33.48454666 4.14255571]
[41.72639465 18.67676163]
[39.69206619 35.42776108]
[50.82410431 45.48150635]
[61.95613861 55.53524780]
[73.08817291 65.58898926]
[84.22021484 75.64273834]
[93.07461548 71.81636810]
[102.69402313 71.10328674]
[112.01583862 73.58224487]
[120.01033783 78.97943115]
[125.79440308 86.69862366]
[140.44996643 83.50261688]
[155.10552979 80.30661011]
[169.76109314 77.11060333]
[184.41665649 73.91459656]
[199.07221985 70.71858978]
[213.72778320 67.52257538]
[225.56251526 57.02258301]
[239.64610291 61.87044907]
[254.30165100 58.67444229]
[266.05978394 47.24297333]
[281.76293945 51.96981812]
[285.25704956 67.99240112]
[272.94769287 78.82806396]
[257.49768066 73.33000946]
[242.84210205 76.52601624]
[232.05564880 86.79740906]
[216.92379761 82.17813873]
[202.26823425 85.37415314]
[187.61267090 88.57015991]
[172.95710754 91.76616669]
[158.30154419 94.96217346]
[143.64598083 98.15818024]
[128.99041748 101.35418701]
[124.51113129 115.53970337]
[113.59201050 125.64244843]
[116.95343018 140.26095581]
[120.31484985 154.87947083]
[123.67626953 169.49798584]
[127.03768921 184.11648560]
[134.34745789 186.63781738]
[140.24450684 191.53256226]
[144.00100708 198.13372803]
[145.17570496 205.56808472]
[143.66523743 212.87152100]
[139.71134949 219.11410522]
[133.86366272 223.51849365]
[135.55516052 238.42280579]
[137.24665833 253.32713318]
[138.93815613 268.23144531]
[148.18229675 281.07110596]
[141.92956543 294.58969116]
[143.62106323 309.49401855]
[152.86520386 322.33364868]
[146.61247253 335.85226440]
[148.30397034 350.75659180]
[160.82275391 360.40310669]
[162.77087402 376.08685303]
[152.99253845 388.50296021]
[137.28906250 390.28515625]
[124.97703552 380.37609863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[4 130]
[5 129]
[7 127]
[8 126]
[9 125]
[10 124]
[12 117]
[13 116]
[14 115]
[15 114]
[16 113]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 55]
[50 54]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
