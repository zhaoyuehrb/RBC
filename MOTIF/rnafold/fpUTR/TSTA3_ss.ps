%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCGCCCCCCACCUGGCUCCGCGGGCAGCCGGAGCGCACCCGGCCGGAAGCCGCUGUCGGGGAGCCGGCGGUGGGGCUGGACGCAGGUGCAACUGAC\
) } def
/len { sequence length } bind def

/coor [
[161.63426208 297.55142212]
[160.47569275 285.94927979]
[163.82862854 274.72769165]
[171.22767639 265.58221436]
[164.90014648 251.98211670]
[152.51614380 243.70651245]
[153.70994568 227.93041992]
[147.38241577 214.33032227]
[141.05490112 200.73023987]
[134.72737122 187.13014221]
[128.39984131 173.53005981]
[121.86157990 160.03001404]
[115.11415100 146.63330078]
[102.47876740 138.74684143]
[103.18135834 122.94123840]
[96.43392944 109.54450989]
[90.17544556 104.22225189]
[89.69229889 95.62457275]
[83.36477661 82.02448273]
[77.03724670 68.42439270]
[70.70972443 54.82430267]
[64.38219452 41.22421646]
[58.05467224 27.62412643]
[45.21807861 18.37575340]
[46.86446762 3.57241940]
[40.53694153 -10.02766991]
[33.17203140 -23.09511375]
[24.81424713 -35.55093384]
[16.45646286 -48.00675201]
[1.20653975 -51.18127823]
[-7.09200382 -63.93230820]
[-3.97159958 -78.45121765]
[-12.32938385 -90.90703583]
[-20.68716812 -103.36285400]
[-29.04495239 -115.81867981]
[-41.63190460 -119.12405396]
[-48.31472397 -129.81819153]
[-45.92527771 -141.78933716]
[-53.89164352 -154.49905396]
[-68.62733459 -161.69569397]
[-69.49263000 -178.07199097]
[-55.59739304 -186.78143311]
[-41.23584747 -178.86448669]
[-41.18192291 -162.46542358]
[-33.21555710 -149.75570679]
[-17.32343864 -142.49333191]
[-16.58913231 -124.17646027]
[-8.23134804 -111.72064209]
[0.12643614 -99.26482391]
[8.48422050 -86.80899811]
[23.10235214 -84.19255066]
[31.75577164 -71.67964172]
[28.91228294 -56.36453629]
[37.27006531 -43.90871811]
[45.62784958 -31.45289803]
[48.10614014 -31.08641434]
[50.60157776 -29.76273537]
[52.77136230 -27.46954727]
[54.27380753 -24.31028938]
[54.80561447 -20.50092888]
[54.13703156 -16.35519600]
[60.46455765 -2.75510597]
[72.84856415 5.52049828]
[71.65476227 21.29660034]
[77.98228455 34.89669037]
[84.30981445 48.49678040]
[90.63733673 62.09686661]
[96.96486664 75.69696045]
[103.29238892 89.29704285]
[109.83065796 102.79708862]
[116.57807922 116.19380951]
[129.69609070 125.03849792]
[128.51087952 139.88586426]
[135.25830078 153.28259277]
[142.03298950 159.67761230]
[141.99993896 167.20252991]
[148.32745361 180.80262756]
[154.65498352 194.40270996]
[160.98251343 208.00280762]
[167.31004333 221.60289001]
[180.14663696 230.85125732]
[178.50024414 245.65460205]
[184.82777405 259.25469971]
[203.58026123 261.95608521]
[216.96212769 275.16003418]
[219.86853027 293.58502197]
[211.33615112 310.00689697]
[218.90339661 322.95822144]
[226.47064209 335.90954590]
[241.81910706 339.67788696]
[249.93591309 353.23858643]
[246.00552368 368.54635620]
[232.35975647 376.51934814]
[217.09440613 372.42733765]
[209.26612854 358.69802856]
[213.51931763 343.47677612]
[205.95207214 330.52545166]
[198.38482666 317.57412720]
[186.97727966 318.58349609]
[175.99259949 315.16595459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[7 80]
[8 79]
[9 78]
[10 77]
[11 76]
[12 74]
[13 73]
[15 71]
[16 70]
[18 69]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[25 62]
[26 61]
[27 55]
[28 54]
[29 53]
[32 50]
[33 49]
[34 48]
[35 47]
[38 45]
[39 44]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
