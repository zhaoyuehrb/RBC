%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCACCAGGCGCGGUCCGGAGGCCGAGGGCGACCACAGCAGCCUCCGCCUCCUGCUGCUCAGGACUAUUCUGCGCUGGGCUAGUCGGCGGUGACCCGGACUGCGCCCGGCAGUGGCUUCGCGGGCGACGCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[217.90396118 367.27941895]
[216.22294617 362.80621338]
[216.51551819 357.42819214]
[209.70567322 344.06307983]
[196.96939087 341.81555176]
[187.73362732 332.48553467]
[185.55148315 319.34219360]
[191.44683838 307.17706299]
[184.93858337 293.66253662]
[172.44535828 285.55273438]
[173.42875671 269.76211548]
[166.92050171 256.24758911]
[160.41224670 242.73306274]
[153.90399170 229.21852112]
[147.39573669 215.70399475]
[140.88748169 202.18945312]
[134.37922668 188.67492676]
[127.87096405 175.16038513]
[121.36270905 161.64585876]
[114.85445404 148.13133240]
[108.34619904 134.61679077]
[101.83794403 121.10225677]
[86.16773224 116.04219055]
[78.85699463 101.28709412]
[84.32392883 85.75415039]
[77.51407623 72.38905334]
[70.70421600 59.02395630]
[63.89435959 45.65885925]
[49.13290787 40.68519592]
[42.41713333 27.03407478]
[47.24973297 12.99193954]
[40.43987274 -0.37315848]
[33.63001633 -13.73825645]
[16.92769432 -18.80481529]
[9.17274189 -34.06453705]
[14.70430088 -49.90713882]
[7.59627056 -63.11606979]
[0.71663302 -69.25283813]
[0.48072398 -76.70209503]
[-6.32913351 -90.06719208]
[-13.13899136 -103.43228912]
[-19.94884872 -116.79738617]
[-26.68905640 -123.08697510]
[-26.75775909 -130.53965759]
[-33.26601410 -144.05418396]
[-48.33629227 -142.60086060]
[-62.96703720 -146.38414001]
[-75.39725494 -154.92872620]
[-84.13762665 -167.18743896]
[-88.14895630 -181.66952515]
[-86.96571350 -196.62193298]
[-80.74993896 -210.24151611]
[-70.26940155 -220.89251709]
[-76.77765656 -234.40704346]
[-83.28591919 -247.92158508]
[-89.79417419 -261.43609619]
[-96.30242920 -274.95065308]
[-110.90935516 -281.58517456]
[-114.68965912 -297.17648315]
[-104.74340820 -309.76425171]
[-88.70051575 -309.69219971]
[-78.86771393 -297.01562500]
[-82.78789520 -281.45889282]
[-76.27964020 -267.94436646]
[-69.77138519 -254.42984009]
[-63.26312637 -240.91529846]
[-56.75487137 -227.40077209]
[-41.89308167 -228.95399475]
[-27.36938477 -225.32200623]
[-14.94138336 -216.92442322]
[-6.11986113 -204.75881958]
[-1.98514640 -190.28213501]
[-3.05483103 -175.23634338]
[-9.21906281 -161.43872070]
[-19.75148201 -150.56243896]
[-13.24322701 -137.04791260]
[-6.58375072 -123.60724640]
[0.22610687 -110.24214935]
[7.03596449 -96.87705231]
[13.84582138 -83.51195526]
[20.80520439 -70.22409821]
[27.91323280 -57.01516724]
[40.69673538 -55.05398178]
[50.13952255 -45.93354797]
[52.61602402 -32.84247589]
[46.99511337 -20.54811478]
[53.80497360 -7.18301582]
[60.61483002 6.18208170]
[74.81568909 10.52618885]
[81.91223907 23.98328972]
[77.25945282 38.84899902]
[84.06931305 52.21409988]
[90.87917328 65.57919312]
[97.68902588 78.94429016]
[110.16883087 81.41833496]
[118.98014069 90.59586334]
[120.94420624 103.16601562]
[115.35247040 114.59400177]
[121.86073303 128.10853577]
[128.36898804 141.62306213]
[134.87724304 155.13760376]
[141.38549805 168.65213013]
[147.89375305 182.16667175]
[154.40200806 195.68119812]
[160.91026306 209.19573975]
[167.41851807 222.71026611]
[173.92677307 236.22479248]
[180.43502808 249.73933411]
[186.94328308 263.25387573]
[199.90202332 272.33029175]
[198.45310974 287.15426636]
[204.96138000 300.66879272]
[221.54580688 306.10885620]
[228.95640564 321.53872681]
[223.07077026 337.25323486]
[229.88061523 350.61831665]
[237.13639832 363.74667358]
[244.82989502 376.62341309]
[252.52339172 389.50015259]
[267.58596802 393.46954346]
[275.20483398 406.63800049]
[271.32778931 420.97338867]
[279.02127075 433.85012817]
[286.71475220 446.72686768]
[294.40823364 459.60360718]
[309.55108643 464.90206909]
[314.71377563 480.09176636]
[305.93591309 493.52041626]
[289.95114136 494.88671875]
[279.02160645 483.14257812]
[281.53152466 467.29708862]
[273.83801270 454.42034912]
[266.14453125 441.54360962]
[258.45104980 428.66690063]
[243.99012756 425.28790283]
[236.00440979 412.33865356]
[239.64665222 397.19363403]
[231.95315552 384.31689453]
[224.25967407 371.44018555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[8 112]
[9 111]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[25 94]
[26 93]
[27 92]
[28 91]
[31 88]
[32 87]
[33 86]
[36 82]
[37 81]
[39 80]
[40 79]
[41 78]
[42 77]
[44 76]
[45 75]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[117 139]
[118 138]
[119 137]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
