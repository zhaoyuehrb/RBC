%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAUAAGGACUGCCCGGGGCUGCGCGCCGGGAACCUCGCGGGGCUGGCGGGCGCCGCACCCCCUCCCUGGCCGCCUGCGCCCCGGGGAGGCCGCCCGCGCGCGACGGGACCGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[57.89527130 369.94381714]
[53.63186264 384.53463745]
[44.10543060 396.38009644]
[30.76868248 403.67391968]
[15.65537834 405.30380249]
[1.07018769 401.02117920]
[-10.76275444 391.47918701]
[-18.03901100 378.13284302]
[-19.64900398 363.01742554]
[-15.34722328 348.43786621]
[-5.78965855 336.61749268]
[7.56623220 329.35879517]
[22.68377113 327.76870728]
[26.90975952 313.37631226]
[31.13574791 298.98391724]
[35.36173630 284.59152222]
[39.58772659 270.19912720]
[38.43930435 262.80557251]
[44.11474991 255.49058533]
[48.71295166 241.21275330]
[41.70915222 228.11761475]
[46.16898727 213.57235718]
[59.95185471 206.31492615]
[64.55005646 192.03707886]
[69.14825439 177.75924683]
[73.56072235 163.42292786]
[77.78670502 149.03053284]
[82.01269531 134.63813782]
[86.23868561 120.24574280]
[90.46467590 105.85334778]
[94.50347137 91.40731049]
[98.35440063 76.91005707]
[102.20532990 62.41280365]
[106.05625153 47.91555023]
[97.00232697 33.01532364]
[101.38102722 16.48630333]
[116.03665161 8.34925365]
[119.50992584 -6.24308634]
[122.98319244 -20.83542633]
[126.45646667 -35.42776489]
[120.75231171 -52.87702942]
[133.16261292 -65.21138000]
[136.25588989 -79.88896942]
[139.34916687 -94.56655884]
[142.44242859 -109.24414825]
[145.53570557 -123.92173767]
[148.62898254 -138.59933472]
[146.89047241 -145.18188477]
[148.57060242 -150.77120972]
[152.28259277 -153.94932556]
[156.13351440 -168.44657898]
[159.98445129 -182.94383240]
[163.83537292 -197.44108582]
[167.68630981 -211.93833923]
[171.53723145 -226.43559265]
[175.38815308 -240.93284607]
[179.05056763 -255.47886658]
[182.52383423 -270.07119751]
[185.99711609 -284.66354370]
[174.41824341 -294.67297363]
[168.82807922 -308.92108154]
[170.51116943 -324.13375854]
[179.08078003 -336.81524658]
[192.56767273 -344.05145264]
[207.87263489 -344.17950439]
[221.47872925 -337.17004395]
[230.25935364 -324.63372803]
[232.19679260 -309.45132446]
[226.84584045 -295.11166382]
[215.43609619 -284.90988159]
[200.58944702 -281.19027710]
[197.11618042 -266.59793091]
[193.64291382 -252.00559998]
[195.17353821 -244.68161011]
[189.88540649 -237.08190918]
[186.03448486 -222.58465576]
[182.18356323 -208.08740234]
[178.33262634 -193.59014893]
[174.48170471 -179.09289551]
[170.63076782 -164.59564209]
[166.77984619 -150.09838867]
[163.30657959 -135.50605774]
[160.21330261 -120.82846069]
[157.12002563 -106.15087128]
[154.02674866 -91.47328186]
[150.93347168 -76.79569244]
[147.84019470 -62.11810303]
[154.20256042 -51.74101257]
[151.65914917 -39.42623138]
[141.04881287 -31.95449448]
[137.57553101 -17.36215401]
[134.10226440 -2.76981425]
[130.62899780 11.82252598]
[138.88357544 21.80763817]
[139.85676575 34.92224121]
[132.96479797 46.35098648]
[120.55350494 51.76647568]
[116.70258331 66.26373291]
[112.85165405 80.76098633]
[109.00072479 95.25823975]
[110.14399719 103.34402466]
[104.85707092 110.07933807]
[100.63108063 124.47173309]
[96.40509033 138.86413574]
[92.17910004 153.25651550]
[87.95311737 167.64891052]
[88.53313446 176.88922119]
[83.42608643 182.35745239]
[78.82788849 196.63528442]
[74.22969055 210.91311646]
[81.18690491 224.84992981]
[76.32028198 239.26419067]
[62.99078369 245.81094360]
[58.39258575 260.08877563]
[53.98011780 274.42510986]
[49.75413132 288.81750488]
[45.52814102 303.20989990]
[41.30215454 317.60229492]
[37.07616425 331.99468994]
[48.93416977 341.50552368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[19 114]
[20 113]
[23 110]
[24 109]
[25 108]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[31 100]
[32 99]
[33 98]
[34 97]
[37 93]
[38 92]
[39 91]
[40 90]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 73]
[58 72]
[59 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
