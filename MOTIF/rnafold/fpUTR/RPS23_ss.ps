%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCCUUGGCUGGGCGGGGCUUGCUCGCGGUGGCUUGUGGCUCCUUCCUGCGGUGCUUCUCUCUUUCGCUCAGGCCCGUGGCGCCGACAGG\
) } def
/len { sequence length } bind def

/coor [
[85.53795624 107.50000000]
[70.53795624 107.50000000]
[55.53795242 107.50000000]
[40.53795242 107.50000000]
[25.53795433 107.50000000]
[10.53795433 107.50000000]
[1.37724841 119.88497925]
[-13.14978504 124.44773102]
[-27.40932655 119.63842010]
[-35.99983215 107.50000000]
[-50.99983215 107.50000000]
[-65.99983215 107.50000000]
[-80.99983215 107.50000000]
[-95.99983215 107.50000000]
[-111.60329437 117.09905243]
[-126.49431610 107.97905731]
[-141.48594666 108.48028564]
[-156.47756958 108.98150635]
[-171.46919250 109.48273468]
[-186.46081543 109.98396301]
[-198.42559814 120.67150116]
[-214.21656799 117.83869171]
[-221.72024536 103.65862274]
[-215.18045044 89.00902557]
[-199.61395264 85.12782288]
[-186.96203613 94.99233246]
[-171.97041321 94.49111176]
[-156.97879028 93.98988342]
[-141.98716736 93.48866272]
[-126.99554443 92.98743439]
[-118.39198303 84.30516052]
[-105.77248383 83.88137817]
[-95.99983215 92.50000000]
[-80.99983215 92.50000000]
[-65.99983215 92.50000000]
[-50.99983215 92.50000000]
[-35.99983215 92.50000000]
[-27.40932655 80.36157990]
[-13.14978504 75.55226898]
[1.37724841 80.11502075]
[10.53795433 92.50000000]
[25.53795433 92.50000000]
[40.53795242 92.50000000]
[55.53795242 92.50000000]
[70.53795624 92.50000000]
[85.53795624 92.50000000]
[94.36813354 84.71331024]
[106.13952637 84.91003418]
[114.70458221 92.98743439]
[129.69621277 93.48866272]
[144.68783569 93.98988342]
[159.67945862 94.49111176]
[174.67735291 94.74176025]
[189.67735291 94.74176025]
[204.67735291 94.74176025]
[219.67735291 94.74176025]
[234.67735291 94.74176025]
[249.67735291 94.74176025]
[264.67736816 94.74176025]
[271.35607910 81.06126404]
[283.26376343 71.67540741]
[298.00543213 68.40377045]
[312.64553833 71.84296417]
[324.29257202 81.25869751]
[330.67007446 94.74176025]
[345.67007446 94.74176025]
[360.67007446 94.74176025]
[371.66674805 83.39061737]
[387.47015381 83.22352600]
[398.70440674 94.33961487]
[398.70440674 110.14390564]
[387.47015381 121.25998688]
[371.66674805 121.09289551]
[360.67007446 109.74176025]
[345.67007446 109.74176025]
[330.67007446 109.74176025]
[324.29257202 123.22482300]
[312.64553833 132.64054871]
[298.00543213 136.07974243]
[283.26376343 132.80810547]
[271.35607910 123.42225647]
[264.67736816 109.74176025]
[249.67735291 109.74176025]
[234.67735291 109.74176025]
[219.67735291 109.74176025]
[204.67735291 109.74176025]
[189.67735291 109.74176025]
[174.67735291 109.74176025]
[167.85140991 112.95473480]
[159.17822266 109.48273468]
[144.18659973 108.98150635]
[129.19497681 108.48028564]
[114.20335388 107.97905731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[49 93]
[50 92]
[51 91]
[52 90]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
