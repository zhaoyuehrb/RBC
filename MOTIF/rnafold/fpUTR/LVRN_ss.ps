%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGCUGUCUGCUGAGCUCCAGUCCGUCCAGGCUCUUCCAGGAGGAAGAGGCACGAUACAAGAGAGGAGGGGCAGGGGUCGCAGCACUGAACACCCUGGCCGGGGUUUUGACAGCUGCCACAGUCUCUGAGCUCCAGCCUCGCGCCUGAACCCGGUCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[94.28952026 230.36393738]
[106.29730988 220.67803955]
[104.58744049 205.77581787]
[102.87756348 190.87359619]
[101.16769409 175.97137451]
[88.12915802 168.82052612]
[81.72573090 155.20216370]
[84.60278320 140.24969482]
[95.86278534 129.73692322]
[94.15291595 114.83470154]
[84.54761505 103.31349182]
[70.19609833 98.95068359]
[55.84458923 94.58787537]
[41.49308014 90.22506714]
[27.14156723 85.86225128]
[9.33273411 90.46167755]
[-2.17309594 77.23651886]
[-16.60506821 73.14772797]
[-31.03704262 69.05894470]
[-45.46901703 64.97016144]
[-59.90098953 60.88138199]
[-75.28764343 64.56395721]
[-85.42388153 53.65038300]
[-99.85585022 49.56159973]
[-114.28782654 45.47281647]
[-128.71980286 41.38402939]
[-144.10646057 45.06660461]
[-154.24269104 34.15303421]
[-168.67466736 30.06424904]
[-183.10662842 25.97546577]
[-200.27873230 42.91882706]
[-224.02680969 46.46183395]
[-245.19662476 35.37334824]
[-255.70704651 14.03643799]
[-270.69006348 13.32270908]
[-285.67306519 12.60898018]
[-300.65609741 11.89525127]
[-315.63909912 11.18152332]
[-330.62210083 10.46779442]
[-345.60510254 9.75406551]
[-359.92538452 17.74543381]
[-373.86563110 9.10821819]
[-373.08532715 -7.27235460]
[-358.38717651 -14.54535580]
[-344.89138794 -5.22894478]
[-329.90838623 -4.51521587]
[-314.92535400 -3.80148721]
[-299.94235229 -3.08775854]
[-284.95935059 -2.37402964]
[-269.97634888 -1.66030097]
[-254.99331665 -0.94657230]
[-252.67568970 -7.67696381]
[-249.14791870 -13.86929131]
[-244.52925110 -19.30791473]
[-238.97697449 -23.80277634]
[-232.68106079 -27.19603729]
[-225.85774231 -29.36762428]
[-218.74192810 -30.23947525]
[-211.57926941 -29.77833557]
[-204.61759949 -27.99702454]
[-198.09838867 -24.95408821]
[-192.24835205 -20.75189590]
[-187.27157593 -15.53318501]
[-183.34237671 -9.47621918]
[-180.59922791 -2.78870463]
[-179.13987732 4.29934072]
[-179.01785278 11.54349232]
[-164.58587646 15.63227558]
[-150.15390015 19.72105980]
[-135.79951477 15.74602890]
[-124.63101196 26.95205879]
[-110.19904327 31.04084206]
[-95.76706696 35.12962341]
[-81.33509827 39.21841049]
[-66.98071289 35.24337769]
[-55.81220627 46.44940567]
[-41.38022995 50.53819275]
[-26.94825935 54.62697601]
[-12.51628494 58.71575928]
[1.91568780 62.80454254]
[12.65510273 57.17608643]
[24.73290253 60.49823761]
[31.50437737 71.51074219]
[45.85588837 75.87355042]
[60.20740128 80.23636627]
[74.55891418 84.59917450]
[88.91042328 88.96198273]
[75.37925720 82.48838043]
[65.91023254 70.85491943]
[62.31824875 56.29134369]
[65.29178619 41.58902740]
[74.26090240 29.56592369]
[87.50650787 22.52647591]
[102.48986053 21.81991577]
[116.33912659 27.58166695]
[126.39985657 38.70738983]
[130.74372864 53.06464386]
[128.53817749 67.90160370]
[120.20746613 80.37304688]
[135.01144409 77.95603943]
[149.81544495 75.53902435]
[162.18853760 65.67915344]
[175.99623108 71.26455688]
[190.80021667 68.84754181]
[205.60421753 66.43053436]
[220.40820312 64.01351929]
[235.21218872 61.59650803]
[250.01617432 59.17950058]
[264.82015991 56.76248932]
[277.19326782 46.90261841]
[291.00097656 52.48801422]
[305.80496216 50.07100296]
[313.97976685 40.05599213]
[326.39193726 38.36827087]
[336.28814697 45.37392044]
[351.13546753 43.23919678]
[365.98278809 41.10447311]
[380.83010864 38.96975327]
[395.64755249 30.73081207]
[407.66638184 42.68840408]
[399.50323486 57.54772568]
[382.96484375 53.81707382]
[368.11752319 55.95179749]
[353.27020264 58.08651733]
[338.42288208 60.22124100]
[325.26165771 71.80016327]
[308.22195435 64.87499237]
[293.41796875 67.29199982]
[282.10375977 76.97898865]
[267.23718262 71.56647491]
[252.43318176 73.98348999]
[237.62919617 76.40049744]
[222.82521057 78.81750488]
[208.02122498 81.23451996]
[193.21723938 83.65152740]
[178.41325378 86.06854248]
[167.09902954 95.75553131]
[152.23245239 90.34301758]
[137.42846680 92.76002502]
[122.62447357 95.17704010]
[136.77497864 100.15332031]
[151.50682068 102.97689819]
[161.22911072 114.39955139]
[161.66233826 129.39329529]
[152.61576843 141.35823059]
[138.07151794 145.02767944]
[124.43162537 138.78643799]
[117.70020294 125.38301086]
[109.05514526 113.12483215]
[110.76501465 128.02705383]
[124.11350250 135.71626282]
[130.30247498 149.62849426]
[127.14997101 164.34330750]
[116.06992340 174.26150513]
[117.77979279 189.16372681]
[119.48966217 204.06594849]
[121.19953156 218.96817017]
[135.08909607 225.68263245]
[143.12411499 238.85235596]
[142.74067688 254.27494812]
[134.06112671 267.02911377]
[119.85507202 273.04504395]
[104.65560913 270.40310669]
[93.31284332 259.94625854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 157]
[3 156]
[4 155]
[5 154]
[9 150]
[10 149]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[23 74]
[24 73]
[25 72]
[26 71]
[28 69]
[29 68]
[30 67]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[99 140]
[100 139]
[101 138]
[103 136]
[104 135]
[105 134]
[106 133]
[107 132]
[108 131]
[109 130]
[111 128]
[112 127]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
