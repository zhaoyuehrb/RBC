%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCGGGCCAGCCCAGGAGCCGCGGGCCGGAGCGGGGCGGCGGGGCCCCAGGCCGCGGGGCGGCGCGGGACGGCGGGCGCCGGCGCCGCAGAUCAGCCAGUAGAC\
) } def
/len { sequence length } bind def

/coor [
[79.87397003 108.68492126]
[64.89935303 109.55709076]
[49.92472839 110.42926025]
[34.95010376 111.30143738]
[19.97548294 112.17360687]
[5.00086021 113.04577637]
[-5.47996712 124.56923676]
[-20.67878723 125.24042511]
[-31.60005188 115.17754364]
[-46.57467270 116.04971313]
[-61.54929733 116.92188263]
[-70.08712006 120.59291840]
[-76.97092438 117.59520721]
[-91.96457672 118.03147888]
[-106.95822906 118.46775055]
[-121.95188141 118.90402222]
[-127.99114990 131.61422729]
[-138.88703918 140.41395569]
[-152.45422363 143.61230469]
[-166.00346375 140.63444519]
[-176.87457275 132.12396240]
[-182.95878601 119.80484772]
[-197.95878601 119.80484772]
[-212.95878601 119.80484772]
[-225.27400208 130.08662415]
[-240.96150208 126.72773743]
[-247.98716736 112.30484772]
[-240.96150208 97.88196564]
[-225.27400208 94.52307892]
[-212.95878601 104.80484772]
[-197.95878601 104.80484772]
[-182.95878601 104.80484772]
[-175.28080750 90.66803741]
[-161.46495056 82.24572754]
[-145.19477844 81.89318085]
[-130.86358643 89.79931641]
[-122.38815308 103.91036987]
[-107.39450073 103.47409821]
[-92.40084839 103.03782654]
[-77.40718842 102.60155487]
[-62.42146683 101.94726562]
[-47.44684601 101.07508850]
[-32.47222519 100.20291901]
[-22.79303551 88.94019318]
[-7.61906338 87.84236908]
[4.12868786 98.07115936]
[19.10330963 97.19898224]
[34.07793427 96.32681274]
[49.05255508 95.45464325]
[64.02717590 94.58246613]
[79.00180054 93.71029663]
[96.50799561 78.35997772]
[117.95399475 87.42466736]
[132.44288635 83.54238129]
[146.93176270 79.66010284]
[148.97793579 64.62384796]
[156.60444641 51.55175781]
[168.62220764 42.42011261]
[183.18109131 38.59564590]
[198.05462646 40.63101578]
[210.98054504 48.18521881]
[220.00485229 60.08022308]
[234.49374390 56.19794083]
[248.98263550 52.31565475]
[263.47152710 48.43336868]
[277.96041870 44.55108261]
[292.44927979 40.66879654]
[306.93817139 36.78651047]
[318.26556396 25.74110603]
[332.56173706 29.92070389]
[347.05059814 26.03841782]
[354.66970825 20.71673203]
[362.01748657 22.26048088]
[376.61315918 18.80124283]
[386.22528076 5.95653439]
[402.26452637 5.60709238]
[412.42694092 18.02098083]
[408.91680908 33.67532349]
[394.42678833 40.56145096]
[380.07238770 33.39691544]
[365.47671509 36.85615540]
[350.93289185 40.52730560]
[336.44400024 44.40959167]
[326.15295410 55.17731094]
[310.82046509 51.27539825]
[296.33157349 55.15768433]
[281.84268188 59.03997040]
[267.35379028 62.92225647]
[252.86491394 66.80454254]
[238.37602234 70.68682861]
[223.88714600 74.56911469]
[222.01936340 89.38264465]
[214.60229492 102.38773346]
[202.73912048 111.58718872]
[188.21852112 115.55454254]
[173.24501038 113.65518951]
[160.10421753 106.14767456]
[150.81405640 94.14898682]
[136.32516479 98.03127289]
[121.83628082 101.91355896]
[120.34409332 108.16103363]
[117.10503387 113.70775604]
[112.39722443 118.07743073]
[106.62490845 120.89486694]
[100.28372955 121.91812897]
[93.91819000 121.05935669]
[88.07487488 118.39228058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[9 43]
[10 42]
[11 41]
[13 40]
[14 39]
[15 38]
[16 37]
[22 32]
[23 31]
[24 30]
[53 100]
[54 99]
[55 98]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[70 83]
[71 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
