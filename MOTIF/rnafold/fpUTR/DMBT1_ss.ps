%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUAGCAGCAGUAGAAAUAUACCACCCUAGAGGACACACCUCCUUUUAGCUAGGUACCUAUAAAUGUCCAGGAUUUUCUAUUCAAUUGAGAAGAACCCAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[143.84208679 183.28381348]
[138.86883545 176.94364929]
[135.28833008 169.71394348]
[133.25457764 161.89660645]
[132.85685730 153.81903076]
[134.11587524 145.82035828]
[136.98268127 138.23722839]
[125.13846588 129.03318787]
[113.29424286 119.82913971]
[99.16454315 123.85861969]
[85.35131073 118.85066223]
[77.08686829 106.70224762]
[77.50171661 92.01508331]
[65.65749359 82.81104279]
[53.81327057 73.60699463]
[41.96904755 64.40295410]
[33.68850708 67.07481384]
[25.13081741 66.16657257]
[17.76044464 61.91130447]
[12.80711842 55.10812759]
[11.06084633 46.97324753]
[12.74667740 38.92284775]
[2.06250763 28.39438629]
[-8.62166214 17.86592484]
[-19.30583191 7.33746147]
[-34.52378464 9.72913170]
[-48.07365417 2.78259039]
[-54.85476685 -10.65171242]
[-52.45367050 -25.32729530]
[-63.13784027 -35.85575867]
[-73.82201385 -46.38422012]
[-84.50617981 -56.91268158]
[-95.19035339 -67.44114685]
[-106.02792358 -77.81163025]
[-117.01657104 -88.02190399]
[-128.00521851 -98.23218536]
[-143.78767395 -97.40189362]
[-155.47860718 -108.03662109]
[-156.14199829 -123.82698059]
[-145.38424683 -135.40483093]
[-129.58775330 -135.90122986]
[-118.12429810 -125.02168274]
[-117.79493713 -109.22082520]
[-106.80628967 -99.01055145]
[-95.81764984 -88.80027771]
[-88.66265106 -86.51706696]
[-84.66188812 -78.12531281]
[-73.97772217 -67.59685516]
[-63.29354858 -57.06838989]
[-52.60937881 -46.53992844]
[-41.92520905 -36.01146317]
[-27.28645515 -38.62773514]
[-13.75405598 -32.04456711]
[-6.60935354 -18.59813118]
[-8.77736855 -3.34670806]
[1.90680063 7.18175459]
[12.59097004 17.71021652]
[23.27513885 28.23867989]
[44.65114594 31.21047401]
[51.17309189 52.55873489]
[63.01731491 61.76277542]
[74.86153412 70.96681976]
[86.70575714 80.17086029]
[100.83545685 76.14138031]
[114.64868927 81.14933777]
[122.91313171 93.29775238]
[122.49828339 107.98491669]
[134.34249878 117.18895721]
[146.18672180 126.39300537]
[167.90231323 117.00423431]
[190.98193359 121.69214630]
[207.16543579 138.65364075]
[210.73243713 161.71553040]
[224.88548279 166.68455505]
[240.46957397 163.95568848]
[249.91510010 175.47225952]
[264.06814575 180.44129944]
[278.22119141 185.41032410]
[292.37423706 190.37934875]
[306.52728271 195.34838867]
[320.68032837 200.31741333]
[332.78588867 190.75398254]
[348.14230347 189.27622986]
[361.84942627 196.35568237]
[369.53335571 209.73330688]
[368.74215698 225.14036560]
[359.72830200 237.66052246]
[345.36810303 243.29862976]
[330.24383545 240.25559998]
[319.18161011 229.50244141]
[315.71130371 214.47045898]
[301.55825806 209.50143433]
[287.40521240 204.53239441]
[273.25216675 199.56336975]
[259.09912109 194.59434509]
[244.94607544 189.62530518]
[230.37429810 192.70959473]
[219.91645813 180.83760071]
[205.76341248 175.86857605]
[201.07740784 182.31517029]
[195.16822815 187.67756653]
[188.28143311 191.72752380]
[180.70429993 194.29145813]
[172.75384521 195.25790405]
[164.76359558 194.58227539]
[157.06953430 192.28898621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 69]
[8 68]
[9 67]
[13 63]
[14 62]
[15 61]
[16 60]
[22 58]
[23 57]
[24 56]
[25 55]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 45]
[35 44]
[36 43]
[73 99]
[74 98]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
