%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUCAACCAAGAUGGCGCGGAUGGCUUCAGGCGCAUCACGACACCGGCGCGUCACGCGACCCGCCCUACGGGCACCUCCCGCGCUUUUCUUAGCGCCGCAGACGGUGGCCGAGCGGGGGACCGGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[91.22705078 135.22453308]
[84.67288208 148.71685791]
[78.11871338 162.20919800]
[79.04841614 178.00305176]
[66.52769470 186.07032776]
[59.97352600 199.56265259]
[65.37879944 214.41386414]
[58.62388611 228.70185852]
[43.71635437 233.94981384]
[29.50057983 227.04420471]
[24.41052628 212.08203125]
[31.46603584 197.94006348]
[46.48119736 193.00848389]
[53.03536606 179.51615906]
[51.63686371 164.68734741]
[64.62638855 155.65502930]
[71.18055725 142.16268921]
[77.73472595 128.67036438]
[70.18194580 120.70304871]
[65.35639191 110.84217834]
[50.42430878 112.26802063]
[35.51025391 113.87144470]
[20.61633682 115.65222931]
[5.72241879 117.43302155]
[-9.17149925 119.21380615]
[-24.04317284 121.17169952]
[-38.89049530 123.30641937]
[-53.73781586 125.44113922]
[-68.55524445 133.68008423]
[-80.57407379 121.72248840]
[-72.41093445 106.86316681]
[-55.87253952 110.59381866]
[-41.02521515 108.45909882]
[-26.17789459 106.32437897]
[-19.94425774 102.21865845]
[-10.95228577 104.31988525]
[3.94163275 102.53910065]
[18.83555031 100.75831604]
[33.72946930 98.97753143]
[40.05904770 95.02131653]
[48.99847031 97.33593750]
[63.93054962 95.91010284]
[71.39759064 77.64749146]
[87.31424713 65.98817444]
[106.97847748 64.37650299]
[124.58116150 73.28858948]
[136.79980469 64.58773804]
[149.01843262 55.88688660]
[161.23707581 47.18603134]
[164.42555237 32.52882767]
[156.92555237 19.53844643]
[149.42555237 6.54806614]
[141.92555237 -6.44231510]
[128.76969910 -17.13623619]
[135.40380859 -32.73832321]
[152.23265076 -30.68257523]
[154.91593933 -13.94231510]
[162.41593933 -0.95193404]
[169.91593933 12.03844738]
[177.41593933 25.02882767]
[193.69259644 24.40775490]
[204.47593689 33.25480652]
[218.53019714 28.01284218]
[232.58444214 22.77087975]
[239.61398315 16.78287125]
[247.03601074 17.57576370]
[261.21102905 12.66974449]
[275.32666016 7.59539366]
[289.38088989 2.35343099]
[296.41043091 -3.63457727]
[303.83245850 -2.84168577]
[318.00747681 -7.74770498]
[332.18249512 -12.65372467]
[342.69305420 -24.47907448]
[357.25094604 -21.33000183]
[371.42596436 -26.23602104]
[385.60098267 -31.14204025]
[399.77597046 -36.04806137]
[413.89160156 -41.12240982]
[427.94586182 -46.36437225]
[435.06472778 -63.83840561]
[452.36337280 -70.54101562]
[468.82540894 -62.69760132]
[482.61431885 -68.60235596]
[496.40322876 -74.50710297]
[510.19213867 -80.41185760]
[523.98101807 -86.31661224]
[529.62145996 -101.08011627]
[544.08312988 -107.45472717]
[558.78619385 -101.65851593]
[565.00756836 -87.13025665]
[559.05621338 -72.48931885]
[544.46301270 -66.42190552]
[529.88580322 -72.52770996]
[516.09686279 -66.62295532]
[502.30798340 -60.71820068]
[488.51907349 -54.81344986]
[474.73016357 -48.90869522]
[472.85263062 -37.54027939]
[465.61077881 -28.42366028]
[454.73919678 -23.93075371]
[442.93475342 -25.30280304]
[433.18783569 -32.31012726]
[419.13357544 -27.06816483]
[413.91513062 -21.73121834]
[404.68200684 -21.87304688]
[390.50698853 -16.96702766]
[376.33197021 -12.06100845]
[362.15695190 -7.15498924]
[352.66030884 4.31944847]
[337.08850098 1.52128768]
[322.91348267 6.42730713]
[308.73849487 11.33332634]
[294.62286377 16.40767670]
[280.56860352 21.64963913]
[275.35015869 26.98658562]
[266.11703491 26.84475708]
[251.94203186 31.75077629]
[237.82640076 36.82512665]
[223.77215576 42.06708908]
[209.71791077 47.30905151]
[196.75691223 67.25253296]
[169.93792725 59.40467072]
[157.71928406 68.10552216]
[145.50065613 76.80638123]
[133.28201294 85.50723267]
[136.14456177 96.63789368]
[135.38407898 108.10556030]
[131.07679749 118.76074982]
[123.65445709 127.53541565]
[113.86107635 133.55001831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[20 42]
[21 41]
[22 39]
[23 38]
[24 37]
[25 36]
[26 34]
[27 33]
[28 32]
[46 126]
[47 125]
[48 124]
[49 123]
[50 60]
[51 59]
[52 58]
[53 57]
[62 121]
[63 120]
[64 119]
[66 118]
[67 117]
[68 115]
[69 114]
[71 113]
[72 112]
[73 111]
[75 109]
[76 108]
[77 107]
[78 106]
[79 104]
[80 103]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
