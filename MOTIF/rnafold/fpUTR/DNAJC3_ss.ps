%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCACUGAGGCCUGAGCGAGAGCCGACGGCGGGCGGGCGCAGCUGCUGCCGGAGCGCCGGCGCGUGCUGGUGGGCCACACACCUUUCCUCCUCUUCACUCGCGAGCCCUCGGAC\
) } def
/len { sequence length } bind def

/coor [
[43.27924728 587.99859619]
[29.08259201 593.85949707]
[13.85958290 591.82098389]
[1.70513272 582.43133545]
[-4.11127234 568.21643066]
[-2.02504873 552.99987793]
[7.40262032 540.87487793]
[21.63573837 535.10308838]
[23.62662125 520.23577881]
[25.61750412 505.36849976]
[27.60838699 490.50122070]
[29.59927177 475.63391113]
[31.59015465 460.76663208]
[25.61054039 447.12500000]
[35.11102295 434.47387695]
[37.10190582 419.60656738]
[29.98233223 409.72808838]
[31.60583878 397.25399780]
[41.63832855 389.01519775]
[44.02428055 374.20617676]
[46.41023254 359.39715576]
[48.79618454 344.58813477]
[51.18213654 329.77911377]
[39.54568481 320.48080444]
[34.08951569 306.51348877]
[36.37223434 291.59182739]
[45.87976837 279.73840332]
[60.13687134 274.19924927]
[62.52282715 259.39022827]
[60.45373917 252.19409180]
[65.17446136 244.22090149]
[67.95378876 229.48063660]
[62.70868683 215.54011536]
[72.86902618 203.41253662]
[75.64836121 188.67227173]
[78.42768860 173.93200684]
[73.18258667 159.99148560]
[83.34292603 147.86390686]
[86.12225342 133.12365723]
[88.90158844 118.38339233]
[76.63424683 106.18578339]
[76.55207062 86.88277435]
[91.49205017 71.68615723]
[90.29525757 56.73398209]
[89.09846497 41.78179932]
[87.90167236 26.82962036]
[86.50595093 11.89469624]
[84.91155243 -3.02032590]
[83.31714630 -17.93534851]
[79.24762726 -26.25976753]
[81.88426971 -33.26788330]
[80.68747711 -48.22006226]
[79.49068451 -63.17224503]
[78.29389954 -78.12442017]
[77.09710693 -93.07660675]
[67.35009766 -106.26477814]
[74.14506531 -121.18993378]
[90.49193573 -122.49835968]
[99.57444000 -108.84405518]
[92.04928589 -94.27339172]
[93.24607849 -79.32121277]
[94.44287109 -64.36903381]
[95.63965607 -49.41685486]
[96.83644867 -34.46467590]
[98.23217010 -19.52975082]
[99.82657623 -4.61472845]
[101.42097473 10.30029392]
[105.31048584 16.69851685]
[102.85385132 25.63282776]
[104.05064392 40.58501053]
[105.24743652 55.53718948]
[106.44422913 70.48937225]
[119.84539795 77.22796631]
[132.56141663 69.27165222]
[145.27743530 61.31533813]
[150.26380920 46.06687546]
[165.34425354 40.59334183]
[178.95034790 49.09356308]
[180.64465332 65.04689789]
[169.12745667 76.21530914]
[153.23374939 74.03135681]
[140.51773071 81.98767090]
[127.80171204 89.94397736]
[122.06110382 112.82708740]
[103.64184570 121.16271973]
[100.86251831 135.90298462]
[98.08318329 150.64324951]
[103.12949371 165.63809204]
[93.16795349 176.71134949]
[90.38861847 191.45159912]
[87.60929108 206.19186401]
[92.65559387 221.18670654]
[82.69405365 232.25996399]
[79.91471863 247.00022888]
[77.33184814 261.77618408]
[74.94589996 276.58520508]
[86.74183655 286.32189941]
[92.04538727 300.56158447]
[89.52605438 315.44512939]
[79.95916748 326.99200439]
[65.99116516 332.16506958]
[63.60520935 346.97409058]
[61.21925735 361.78311157]
[58.83330536 376.59213257]
[56.44735336 391.40115356]
[63.42634201 408.37713623]
[51.96919632 421.59747314]
[49.97831345 436.46475220]
[55.81552887 451.16976929]
[46.45744705 462.75750732]
[44.46656418 477.62478638]
[42.47568130 492.49209595]
[40.48479843 507.35937500]
[38.49391556 522.22668457]
[36.50303268 537.09399414]
[48.71610641 546.40722656]
[54.62150955 560.58544922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[15 108]
[16 107]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[28 96]
[29 95]
[31 94]
[32 93]
[34 91]
[35 90]
[36 89]
[38 87]
[39 86]
[40 85]
[43 72]
[44 71]
[45 70]
[46 69]
[47 67]
[48 66]
[49 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
