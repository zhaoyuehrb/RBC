%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:42 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PRAMEF7)
} def

/sequence { (\
UCUGAGAGAUCCCAGCACCCUACAAACUGAGUCCAGAUCUGAGUUUUCCCUUGCAGAUUCAUCAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.008247719 ubox
1 9 0.009958137 ubox
1 37 0.031914995 ubox
1 57 0.030550217 ubox
2 6 0.008751607 ubox
2 8 0.011416242 ubox
2 15 0.015287740 ubox
2 36 0.036109769 ubox
2 56 0.033429486 ubox
2 66 0.233133133 ubox
3 7 0.010325363 ubox
3 14 0.017149983 ubox
3 35 0.036217163 ubox
3 55 0.033392954 ubox
3 61 0.038017433 ubox
3 64 0.903715800 ubox
3 65 0.171976926 ubox
4 11 0.009827851 ubox
4 13 0.017422520 ubox
4 34 0.036208340 ubox
4 52 0.004282499 ubox
4 54 0.032786620 ubox
4 60 0.042163030 ubox
4 63 0.988682752 ubox
5 10 0.009699532 ubox
5 51 0.010238474 ubox
5 52 0.003217159 ubox
5 59 0.037518593 ubox
5 62 0.987194112 ubox
6 33 0.031968521 ubox
6 50 0.011067342 ubox
6 52 0.025775607 ubox
6 58 0.020769685 ubox
6 59 0.004696892 ubox
6 60 0.297304057 ubox
6 63 0.086149942 ubox
7 32 0.031717459 ubox
7 40 0.010561384 ubox
7 51 0.030122835 ubox
7 58 0.004701423 ubox
7 59 0.269304028 ubox
7 62 0.084690098 ubox
8 33 0.017763841 ubox
8 39 0.011771489 ubox
8 48 0.011970236 ubox
8 50 0.029876333 ubox
8 58 0.189278001 ubox
8 59 0.935321502 ubox
8 60 0.134347460 ubox
8 63 0.012422699 ubox
9 32 0.017814912 ubox
9 38 0.011784654 ubox
9 47 0.012142706 ubox
9 58 0.970922771 ubox
9 59 0.103728090 ubox
9 62 0.012229488 ubox
10 30 0.011076410 ubox
10 31 0.017376523 ubox
10 37 0.011786706 ubox
10 57 0.994998644 ubox
10 61 0.010944534 ubox
11 29 0.010203781 ubox
11 36 0.011716117 ubox
11 56 0.994884760 ubox
13 29 0.034432834 ubox
13 53 0.025372415 ubox
14 21 0.016522545 ubox
14 28 0.035002443 ubox
14 51 0.006002958 ubox
14 52 0.024838793 ubox
15 20 0.017094643 ubox
15 27 0.034942235 ubox
15 32 0.008779656 ubox
15 50 0.007325945 ubox
15 51 0.021673921 ubox
15 54 0.997289889 ubox
16 29 0.003380533 ubox
16 31 0.008908452 ubox
16 53 0.997637880 ubox
17 52 0.961574002 ubox
20 31 0.004027218 ubox
20 43 0.007977011 ubox
21 30 0.004081877 ubox
21 42 0.007993285 ubox
22 44 0.004122370 ubox
23 29 0.003454795 ubox
23 41 0.006075890 ubox
23 43 0.004036013 ubox
24 40 0.005869355 ubox
24 45 0.042817916 ubox
24 46 0.908041072 ubox
24 47 0.048775549 ubox
25 44 0.032644550 ubox
25 45 0.981300973 ubox
25 46 0.042651263 ubox
25 47 0.004364097 ubox
26 44 0.996583616 ubox
26 45 0.030416289 ubox
27 36 0.015609585 ubox
27 43 0.998939727 ubox
27 66 0.003419415 ubox
28 35 0.015999912 ubox
28 41 0.004898890 ubox
28 42 0.996084355 ubox
28 61 0.005144344 ubox
28 64 0.008288496 ubox
29 34 0.016122130 ubox
29 39 0.039225351 ubox
29 40 0.005592866 ubox
29 60 0.005712304 ubox
29 63 0.009155599 ubox
30 38 0.039043866 ubox
30 40 0.994148030 ubox
30 59 0.005676845 ubox
30 62 0.009068432 ubox
31 38 0.022528777 ubox
31 39 0.995278567 ubox
31 58 0.005584542 ubox
32 37 0.121896131 ubox
32 42 0.003794772 ubox
32 57 0.005546984 ubox
33 41 0.004157446 ubox
33 56 0.005509125 ubox
34 41 0.009404812 ubox
35 40 0.008550223 ubox
36 59 0.012282242 ubox
36 60 0.003908763 ubox
36 63 0.004076765 ubox
37 58 0.017027007 ubox
37 62 0.004044669 ubox
38 57 0.019460347 ubox
39 56 0.019880550 ubox
40 55 0.019797988 ubox
40 61 0.031468623 ubox
41 48 0.005880382 ubox
41 52 0.007211612 ubox
41 54 0.019171463 ubox
41 60 0.036212641 ubox
41 63 0.003465111 ubox
42 47 0.005529175 ubox
42 51 0.013899343 ubox
42 52 0.006562272 ubox
42 59 0.036204365 ubox
42 62 0.003433633 ubox
43 50 0.014804974 ubox
43 51 0.005491754 ubox
43 54 0.003782098 ubox
43 58 0.036188577 ubox
44 53 0.004163722 ubox
44 57 0.036173723 ubox
45 56 0.035988494 ubox
46 55 0.034530748 ubox
47 57 0.003433107 ubox
48 56 0.003540473 ubox
50 66 0.005400372 ubox
51 65 0.005518764 ubox
52 64 0.005535264 ubox
53 63 0.005469154 ubox
56 63 0.008503887 ubox
57 62 0.007558336 ubox
3 64 0.9500000 lbox
4 63 0.9500000 lbox
5 62 0.9500000 lbox
8 59 0.9500000 lbox
9 58 0.9500000 lbox
10 57 0.9500000 lbox
11 56 0.9500000 lbox
15 54 0.9500000 lbox
16 53 0.9500000 lbox
17 52 0.9500000 lbox
24 46 0.9500000 lbox
25 45 0.9500000 lbox
26 44 0.9500000 lbox
27 43 0.9500000 lbox
28 42 0.9500000 lbox
30 40 0.9500000 lbox
31 39 0.9500000 lbox
showpage
end
%%EOF
