%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACGCACAGGAAGCGGGCGGGACCGGACUUCCGGCUGGUCUGUGGGGUUUCGGGUUCGGGGUUUCCUGGUGGGCGUCAGGGGCAGGCAACAGAGUGGCGGCCGCUACGGCCCUGUAACAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[84.62140656 110.93265533]
[92.51388550 102.36522675]
[78.84129333 96.19591522]
[65.16870880 90.02661133]
[51.49612045 83.85730743]
[37.82353210 77.68799591]
[16.77215385 81.28285980]
[5.12415075 64.31842804]
[-8.97123814 59.18812561]
[-23.06662750 54.05782318]
[-37.16201782 48.92752075]
[-51.25740814 43.79721832]
[-65.35279846 38.66691589]
[-79.44818878 33.53661346]
[-93.54357147 28.40631294]
[-105.07679749 35.48943710]
[-118.38738251 34.61389923]
[-128.59019470 26.32719612]
[-132.07150269 13.85512733]
[-146.03460693 8.37501144]
[-159.99771118 2.89489627]
[-174.34147644 8.96896267]
[-188.42399597 3.21243644]
[-194.12628174 -10.49957943]
[-208.08938599 -15.97969532]
[-222.05250549 -21.45981026]
[-236.01560974 -26.93992615]
[-249.97871399 -32.42004013]
[-262.16348267 -27.97627449]
[-273.72167969 -32.91089249]
[-278.61526489 -44.04845810]
[-292.43740845 -49.87497711]
[-306.25955200 -55.70149994]
[-321.98150635 -53.93222809]
[-330.70394897 -66.00568390]
[-344.52609253 -71.83220673]
[-359.06848145 -65.64389801]
[-373.69583130 -71.62851715]
[-379.73004150 -86.23549652]
[-373.59109497 -100.79877472]
[-358.92114258 -106.67821503]
[-344.42358398 -100.38565063]
[-338.69958496 -85.65435028]
[-324.87744141 -79.82782745]
[-310.14413452 -82.01384735]
[-300.43301392 -69.52364349]
[-286.61087036 -63.69712067]
[-272.78872681 -57.87060165]
[-255.57426453 -61.03023148]
[-244.49859619 -46.38314819]
[-230.53549194 -40.90303040]
[-216.57238770 -35.42291641]
[-202.60928345 -29.94280052]
[-188.64616394 -24.46268654]
[-175.13955688 -30.63575745]
[-160.90090942 -25.27705002]
[-154.51760864 -11.06820965]
[-140.55450439 -5.58809471]
[-126.59139252 -0.10797932]
[-111.53723145 -7.49330425]
[-95.46529388 -1.64052629]
[-88.41326904 14.31092358]
[-74.31788635 19.44122505]
[-60.22249222 24.57152748]
[-46.12710571 29.70182991]
[-32.03171539 34.83213425]
[-17.93632507 39.96243286]
[-3.84093642 45.09273529]
[10.25445271 50.22303772]
[17.74760437 45.11298370]
[26.89701080 44.07222748]
[35.60486984 47.46948242]
[41.81384277 54.64085770]
[43.99283981 64.01541138]
[57.66542435 70.18471527]
[71.33801270 76.35402679]
[85.01060486 82.52333069]
[98.68318939 88.69263458]
[113.48662567 91.11300659]
[128.41209412 89.61948395]
[141.37330627 80.54657745]
[154.80770874 86.97820282]
[169.73316956 85.48468781]
[184.65863037 83.99117279]
[193.47424316 74.47795868]
[206.01077271 73.59616852]
[215.44650269 81.27466583]
[230.40455627 80.15371704]
[243.58793640 71.40676117]
[256.85781860 78.17131805]
[271.81588745 77.05036926]
[287.15887451 69.83727264]
[298.33746338 82.58388519]
[289.18353271 96.85419464]
[272.93682861 92.00842285]
[257.97879028 93.12937927]
[245.86531067 101.79615021]
[231.52551270 95.11177826]
[216.56745911 96.23272705]
[202.69023132 106.89781952]
[186.15216064 98.91663361]
[171.22669983 100.41014862]
[156.30123901 101.90366364]
[144.40759277 110.86974335]
[129.90560913 104.54494476]
[114.98014832 106.03846741]
[111.31140900 112.57990265]
[103.97393036 125.66276550]
[100.30519867 132.20420837]
[106.81345367 145.71873474]
[113.32170868 159.23327637]
[119.82996368 172.74780273]
[126.33821869 186.26232910]
[132.84648132 199.77687073]
[139.35473633 213.29139709]
[151.67463684 224.93855286]
[143.89314270 240.00125122]
[127.26497650 236.69363403]
[125.84020233 219.79965210]
[119.33194733 206.28512573]
[112.82368469 192.77058411]
[106.31542969 179.25605774]
[99.80717468 165.74153137]
[93.29891968 152.22698975]
[86.79066467 138.71246338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[19 59]
[20 58]
[21 57]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[79 106]
[80 105]
[82 103]
[83 102]
[84 101]
[87 99]
[88 98]
[90 96]
[91 95]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
