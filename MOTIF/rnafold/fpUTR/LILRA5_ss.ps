%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCUCAGCCUGGGCUACACAGCCAGGUGUCAGAUGUGUCUCUGCUGAUCUGAGUCUGCCUGUGGCAUGGACCUGCAUCUUCCCUGAAGCAUCUCCAGGGCUGAAAAAUCACUGACC\
) } def
/len { sequence length } bind def

/coor [
[126.14493561 224.76638794]
[131.24203491 210.52297974]
[140.49273682 198.55302429]
[152.99073792 190.02920532]
[148.76473999 175.63681030]
[144.53875732 161.24441528]
[140.31277466 146.85203552]
[136.08677673 132.45964050]
[131.86079407 118.06723785]
[103.76110840 132.28292847]
[79.19571686 119.29651642]
[65.89305115 126.22753906]
[52.59038925 133.15856934]
[39.28772736 140.08959961]
[25.98506165 147.02061462]
[12.68239880 153.95164490]
[6.42460442 160.77511597]
[-1.05680120 160.88485718]
[-14.53491592 167.46820068]
[-23.24361420 181.36390686]
[-39.61996460 180.49948120]
[-46.81737900 165.76417542]
[-37.43177795 152.31640625]
[-21.11826134 153.99008179]
[-7.64014578 147.40673828]
[5.75137186 140.64898682]
[19.05403519 133.71795654]
[32.35670090 126.78692627]
[45.65936279 119.85590363]
[58.96202850 112.92487335]
[72.26469421 105.99385071]
[71.86318970 96.32668304]
[74.73307037 87.08660126]
[63.65565872 76.97270203]
[52.57824707 66.85880280]
[41.50083160 56.74490738]
[30.42341805 46.63101196]
[19.34600449 36.51711655]
[3.77849674 37.05606079]
[-7.31149960 26.64133072]
[-7.72936535 11.79676914]
[-18.80677986 1.68287265]
[-34.93101501 -1.30729318]
[-40.14775848 -16.85456276]
[-29.09047318 -28.96524048]
[-13.13394451 -25.18089676]
[-8.69288254 -9.39454079]
[2.38453126 0.71935570]
[17.20576286 -0.21160939]
[28.58391190 9.88751793]
[29.45990181 25.43970108]
[40.53731537 35.55359650]
[51.61472702 45.66749573]
[62.69214249 55.78139114]
[73.76955414 65.89528656]
[84.84696960 76.00918579]
[92.67280579 70.45664215]
[102.50418854 67.59533691]
[113.37581635 68.12891388]
[124.08496857 72.40562439]
[127.55824280 57.81328583]
[131.03150940 43.22094727]
[134.50477600 28.62860680]
[132.29034424 11.81990051]
[147.82913208 5.03888702]
[158.64671326 18.09325027]
[149.09712219 32.10187912]
[145.62385559 46.69421768]
[142.15057373 61.28655624]
[138.67730713 75.87889862]
[149.48841858 86.27696228]
[163.93446350 82.23816681]
[178.38050842 78.19936371]
[192.82655334 74.16056824]
[200.61512756 60.67072678]
[215.32299805 56.78060150]
[228.13549805 64.28895569]
[242.58154297 60.25015259]
[257.02758789 56.21135330]
[268.23480225 45.04405594]
[282.57534790 49.06875610]
[297.02139282 45.02995682]
[304.55563354 31.13712692]
[319.73043823 26.72108841]
[333.54281616 34.40179443]
[337.79818726 49.62242126]
[329.97186279 63.35284042]
[314.70709229 67.44703674]
[301.06018066 59.47599792]
[286.61416626 63.51479721]
[276.44021606 74.39321136]
[261.06637573 70.65739441]
[246.62034607 74.69619751]
[232.17430115 78.73499298]
[225.11351013 91.79948425]
[210.52070618 96.10118866]
[196.86534119 88.60660553]
[182.41931152 92.64540863]
[167.97326660 96.68420410]
[153.52722168 100.72300720]
[146.25318909 113.84124756]
[150.47917175 128.23364258]
[154.70516968 142.62603760]
[158.93115234 157.01843262]
[163.15713501 171.41082764]
[167.38313293 185.80322266]
[182.50543213 186.21697998]
[196.75904846 191.28544617]
[208.74758911 200.51205444]
[217.29649353 212.99288940]
[221.56825256 227.50520325]
[221.14436340 242.62722778]
[216.06636047 256.87744141]
[206.83171082 268.85980225]
[194.34515381 277.40032959]
[179.82997131 281.66238403]
[164.70825195 281.22836304]
[150.46142578 276.14080811]
[138.48527527 266.89813232]
[129.95309448 254.40583801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 106]
[5 105]
[6 104]
[7 103]
[8 102]
[9 101]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[18 25]
[19 24]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[41 48]
[42 47]
[60 70]
[61 69]
[62 68]
[63 67]
[71 100]
[72 99]
[73 98]
[74 97]
[77 94]
[78 93]
[79 92]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
