%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCGCAGAGGAGCCCACUUGAGAGCGCCUCCUGUCGUCUGUAAGGUUGCCUUGCCAUCCCUCGGCACCACAACUUCCCCCGCCCCCCCAUCGCCUCCUCCUCCAUCCUCCAGUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[78.63018036 414.80145264]
[71.42684937 401.56481934]
[67.47084808 387.02362061]
[66.97551727 371.96203613]
[69.96757507 357.19232178]
[76.28565216 343.51098633]
[85.58903503 331.65588379]
[97.37599182 322.26629639]
[111.01087952 315.84860229]
[107.91760254 301.17102051]
[104.82433319 286.49343872]
[101.73105621 271.81585693]
[98.63777924 257.13824463]
[95.54450989 242.46066284]
[86.68129730 254.56204224]
[72.16648865 258.34625244]
[58.52308655 252.11267090]
[51.88249207 238.66267395]
[55.22900772 224.04074097]
[67.05870056 214.81803894]
[82.05525970 215.13926697]
[93.47859955 224.85906982]
[93.08918762 209.86412048]
[92.69977570 194.86917114]
[89.34017944 188.18362427]
[92.50000000 179.48103333]
[92.50000000 164.48103333]
[92.50000000 149.48103333]
[78.81482697 145.34104919]
[66.85875702 137.50041199]
[57.60762405 126.59903717]
[51.81649017 113.52669525]
[49.95801544 99.35032654]
[52.18389130 85.22698975]
[58.31244278 72.30939484]
[67.84346771 61.65186691]
[79.99905396 54.12425232]
[93.78708649 50.34094238]
[94.17649841 35.34599686]
[80.67399597 28.31437111]
[71.60044098 16.16704369]
[68.71260834 1.34541714]
[72.53070068 -13.20048046]
[82.24562836 -24.59914970]
[95.88970947 -30.62446785]
[96.27912140 -45.61941147]
[96.66853333 -60.61435699]
[97.05794525 -75.60929871]
[97.44734955 -90.60424805]
[97.83676147 -105.59918976]
[85.69377899 -115.07833099]
[81.50969696 -129.71891785]
[86.68756866 -143.84880066]
[99.04491425 -152.12129211]
[99.43432617 -167.11624146]
[99.82373047 -182.11117554]
[100.21314240 -197.10612488]
[88.37996674 -207.32914734]
[85.93750763 -222.77479553]
[94.03900909 -236.15013123]
[108.85919952 -241.13972473]
[123.40042877 -235.38763428]
[130.79678345 -221.60983276]
[127.55592346 -206.31176758]
[115.20808411 -196.71672058]
[114.81867981 -181.72177124]
[114.42926788 -166.72682190]
[114.03985596 -151.73188782]
[125.95117188 -142.82914734]
[130.38867188 -128.44956970]
[125.45032501 -114.04587555]
[112.83170319 -105.20977783]
[112.44229889 -90.21483612]
[112.05288696 -75.21989441]
[111.66347504 -60.22494888]
[111.27406311 -45.23000336]
[110.88465881 -30.23505974]
[124.19760895 -23.50968170]
[133.30780029 -11.62213421]
[136.36576843 3.10233021]
[132.71252441 17.75408745]
[123.02071381 29.41409111]
[109.17144012 35.73540878]
[108.78203583 50.73035431]
[123.51524353 55.82245636]
[135.96702576 65.20063782]
[144.92929077 77.95503235]
[149.53256226 92.84822083]
[149.33020020 108.43526459]
[144.34185791 123.20393372]
[135.05148315 135.72135925]
[122.36044312 144.77313232]
[107.50000000 149.48103333]
[107.50000000 164.48103333]
[107.50000000 179.48103333]
[107.69472504 194.47976685]
[108.08412933 209.47471619]
[108.47354126 224.46965027]
[110.22209930 239.36738586]
[113.31536865 254.04498291]
[116.40864563 268.72256470]
[119.50192261 283.40014648]
[122.59519958 298.07775879]
[125.68846893 312.75534058]
[140.75367737 313.12454224]
[155.32749939 316.95861816]
[168.62400818 324.05087280]
[179.92611694 334.01876831]
[188.62432861 346.32476807]
[194.24954224 360.30523682]
[196.49842834 375.20620728]
[195.24969482 390.22412109]
[190.57067871 404.54904175]
[182.71369934 417.40847778]
[172.10250854 428.10891724]
[159.30932617 436.07327271]
[145.02409363 440.87210083]
[130.01716614 442.24655151]
[115.09787750 440.12252808]
[101.07079315 434.61456299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 104]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[22 98]
[23 97]
[24 96]
[26 95]
[27 94]
[28 93]
[38 84]
[39 83]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
