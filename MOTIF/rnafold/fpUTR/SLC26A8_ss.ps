%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGAACGCCCGCGGGCUAGGCCACAACGGCUCGGGAACCGCCGCCGGUAUCCGCGUCCGCAGCGCCGCCAGCCAGGCGAGAGCCGUGUGGGAUCCCAGCGCCCGCACUCCCGCCCCCGCCAAGGAGCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[210.05908203 521.11071777]
[216.10542297 505.27154541]
[216.10542297 490.27154541]
[208.36813354 477.54428101]
[216.10542297 463.74411011]
[216.10542297 448.74411011]
[208.47885132 443.99746704]
[202.60270691 437.51312256]
[198.83428955 429.87341309]
[197.34985352 421.72106934]
[198.13935852 413.70556641]
[201.01641846 406.43161011]
[205.64198303 400.41354370]
[211.55900574 396.03906250]
[206.79212952 381.81665039]
[202.02525330 367.59423828]
[197.25839233 353.37182617]
[192.49151611 339.14941406]
[187.72463989 324.92700195]
[172.38960266 318.12167358]
[166.56585693 302.02920532]
[174.29183960 286.38229370]
[169.19772339 272.27380371]
[163.45747375 258.41558838]
[157.08332825 244.83729553]
[150.70918274 231.25900269]
[144.33503723 217.68069458]
[137.96089172 204.10240173]
[132.21949768 199.34162903]
[131.60038757 190.13604736]
[125.54158020 176.41413879]
[119.48276520 162.69223022]
[113.42395020 148.97032166]
[107.36513519 135.24841309]
[101.30632019 121.52651215]
[76.29438782 119.45600128]
[61.53627777 89.89567566]
[48.78302002 81.99919128]
[36.02976608 74.10270691]
[23.18615532 66.35404968]
[10.25390911 58.75424576]
[-2.67833734 51.15444565]
[-15.61058426 43.55464172]
[-32.00448227 43.96950912]
[-40.32872009 29.84013748]
[-32.02003479 15.70161724]
[-15.62569046 16.09844208]
[-8.01078129 30.62239647]
[4.92146492 38.22219849]
[17.85371208 45.82199860]
[30.78595924 53.42180252]
[38.21308136 54.10475922]
[43.92624664 61.34945297]
[56.67950439 69.24593353]
[69.43276215 77.14241791]
[81.40302277 68.10289764]
[77.29807281 53.67551041]
[73.19313049 39.24812698]
[69.08818817 24.82074356]
[55.82869339 15.78938293]
[54.76626587 -0.21845263]
[66.71590424 -10.92292213]
[82.51087189 -8.11247349]
[90.03461456 6.05695868]
[83.51557159 20.71579742]
[87.62051392 35.14318466]
[91.72545624 49.57056808]
[95.83040619 63.99795151]
[110.82640076 64.34442139]
[115.59327698 50.12200928]
[120.36014557 35.89960098]
[125.12701416 21.67719078]
[119.29192352 6.73292112]
[127.46202850 -7.07391930]
[143.36993408 -9.15190315]
[154.81245422 2.09302020]
[153.01187134 18.03470802]
[139.34942627 26.44406319]
[134.58255005 40.66647339]
[129.81568909 54.88888168]
[125.04881287 69.11128998]
[130.63665771 98.62635040]
[115.02822113 115.46769714]
[121.08703613 129.18960571]
[127.14585114 142.91151428]
[133.20466614 156.63342285]
[139.26348877 170.35533142]
[145.32229614 184.07723999]
[151.53919983 197.72825623]
[157.91334534 211.30654907]
[164.28749084 224.88485718]
[170.66163635 238.46315002]
[177.03578186 252.04145813]
[180.86796570 254.49179077]
[183.41131592 257.73339844]
[184.57542419 261.24432373]
[184.45550537 264.52920532]
[183.30624390 267.17968750]
[188.40034485 281.28820801]
[201.21812439 285.59713745]
[209.07574463 296.36190796]
[209.26704407 309.49288940]
[201.94705200 320.16012573]
[206.71392822 334.38253784]
[211.48080444 348.60494995]
[216.24766541 362.82736206]
[221.01454163 377.04977417]
[225.78141785 391.27218628]
[251.73104858 401.73013306]
[255.87776184 432.80551147]
[266.23654175 443.65429688]
[276.59530640 454.50305176]
[286.95410156 465.35180664]
[306.49948120 470.03723145]
[310.45779419 488.91015625]
[321.30657959 499.26892090]
[337.35998535 502.61846924]
[342.22821045 518.27838135]
[330.90319824 530.13909912]
[315.03515625 525.99926758]
[310.94778442 510.11767578]
[300.09902954 499.75891113]
[289.83560181 500.90994263]
[280.45910645 496.07757568]
[275.22619629 486.66525269]
[276.10534668 475.71060181]
[265.74655151 464.86181641]
[255.38777161 454.01306152]
[245.02899170 443.16430664]
[231.10542297 448.74411011]
[231.10542297 463.74411011]
[238.84272766 477.54428101]
[231.10542297 490.27154541]
[231.10542297 505.27154541]
[237.15176392 521.11071777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[5 131]
[6 130]
[14 108]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[22 99]
[23 98]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[37 55]
[38 54]
[39 53]
[40 51]
[41 50]
[42 49]
[43 48]
[56 68]
[57 67]
[58 66]
[59 65]
[69 81]
[70 80]
[71 79]
[72 78]
[110 129]
[111 128]
[112 127]
[113 126]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
