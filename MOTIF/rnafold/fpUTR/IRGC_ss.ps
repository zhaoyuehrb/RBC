%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUGUCUGACCUUGGCUAAGAGGGAAGGAGAUCCUAUCAGUGGGGAGAGUGUGAGGGGAGAGGGAGAGCCUGCAGGGCAGGCGCUGAGGAUCACGCAUCCUGUGACUCUCCCCUGUCCCCCGCCACCCUCUGAACCACUGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[-170.24655151 478.99353027]
[-180.07987976 475.32696533]
[-190.45895386 486.15631104]
[-200.83804321 496.98565674]
[-204.80093384 512.30249023]
[-219.19342041 516.13726807]
[-229.57249451 526.96661377]
[-239.95158386 537.79595947]
[-239.24198914 555.24182129]
[-251.11071777 567.58453369]
[-267.89721680 567.55914307]
[-278.04412842 578.60632324]
[-288.19100952 589.65350342]
[-298.33789062 600.70074463]
[-297.41680908 616.47814941]
[-307.98413086 628.23004150]
[-323.77038574 628.98431396]
[-335.40994263 618.29333496]
[-335.99722290 602.49993896]
[-325.18380737 590.97412109]
[-309.38510132 590.55383301]
[-299.23822021 579.50665283]
[-289.09130859 568.45941162]
[-278.94442749 557.41223145]
[-281.28500366 544.70050049]
[-275.77496338 532.79321289]
[-264.23229980 526.15484619]
[-250.78091431 527.41687012]
[-240.40184021 516.58752441]
[-230.02275085 505.75820923]
[-226.80224609 491.21594238]
[-211.66738892 486.60656738]
[-201.28829956 475.77722168]
[-190.90922546 464.94787598]
[-195.72351074 446.06979370]
[-188.20690918 427.94161987]
[-171.20161438 417.86386108]
[-151.40751648 420.00552368]
[-141.98422241 408.33499146]
[-132.56091309 396.66445923]
[-123.13761902 384.99392700]
[-113.71431732 373.32339478]
[-104.29102325 361.65283203]
[-94.86772156 349.98229980]
[-97.37800598 333.38452148]
[-86.92832184 319.81933594]
[-69.56968689 317.93838501]
[-60.39622498 306.07046509]
[-51.22275925 294.20254517]
[-42.04929352 282.33462524]
[-40.38745880 267.53302002]
[-25.82605362 261.34625244]
[-16.65258980 249.47831726]
[-7.47912359 237.61039734]
[-6.37205791 218.34648132]
[12.28341389 210.82994080]
[20.94492531 198.58338928]
[29.60643578 186.33682251]
[38.26794815 174.09027100]
[46.92945862 161.84370422]
[47.96159744 146.98490906]
[62.24730682 140.18571472]
[70.90882111 127.93914795]
[79.57032776 115.69258881]
[88.23184204 103.44602966]
[93.37876129 89.35670471]
[94.65084839 74.41073608]
[88.11176300 60.00411224]
[96.90053558 47.97886276]
[98.17262268 33.03289795]
[99.44470978 18.08693695]
[100.71680450 3.14097404]
[101.98889160 -11.80498791]
[103.26097870 -26.75094986]
[98.57967377 -43.04578781]
[112.94178772 -52.05500412]
[125.57475281 -40.74816895]
[118.20693970 -25.47886086]
[116.93485260 -10.53289986]
[115.66276550 4.41306305]
[114.39067841 19.35902596]
[113.11858368 34.30498886]
[111.84649658 49.25094986]
[118.47657776 62.58853912]
[109.59680939 75.68283081]
[108.32472229 90.62879181]
[120.92785645 98.76274109]
[134.02307129 91.44731140]
[147.11827087 84.13188934]
[160.21348572 76.81646729]
[168.48779297 63.33142090]
[183.37232971 63.87916565]
[196.46752930 56.56374359]
[209.56274414 49.24831772]
[222.65795898 41.93289185]
[235.75317383 34.61746979]
[241.49017334 19.63526726]
[256.82366943 14.91690731]
[269.99114990 24.08191109]
[270.89163208 40.09967422]
[258.83432007 50.68273926]
[243.06858826 47.71268082]
[229.97338867 55.02810669]
[216.87817383 62.34352875]
[203.78295898 69.65895081]
[190.68774414 76.97438049]
[183.35009766 89.93617249]
[167.52891541 89.91167450]
[154.43370056 97.22710419]
[141.33848572 104.54252625]
[128.24327087 111.85794830]
[100.47840118 112.10754395]
[91.81688690 124.35410309]
[83.15538025 136.60066223]
[74.49386597 148.84722900]
[72.84220123 164.58198547]
[59.17601776 170.50521851]
[50.51450729 182.75177002]
[41.85299683 194.99833679]
[33.19148254 207.24490356]
[24.52997398 219.49145508]
[26.99742508 230.17434692]
[23.21844673 240.23149109]
[14.68398571 246.38792419]
[4.38879681 246.78385925]
[-4.78466892 258.65179443]
[-13.95813465 270.51971436]
[-16.27611732 286.17019653]
[-30.18137360 291.50808716]
[-39.35483932 303.37600708]
[-48.52830505 315.24392700]
[-57.70177078 327.11184692]
[-54.46226501 340.22814941]
[-59.31863785 352.62637329]
[-70.27904510 359.83850098]
[-83.19718170 359.40560913]
[-92.62048340 371.07614136]
[-102.04378510 382.74667358]
[-111.46708679 394.41720581]
[-120.89038086 406.08776855]
[-130.31369019 417.75830078]
[-139.73698425 429.42883301]
[-134.85717773 439.02282715]
[-133.48889160 449.66049194]
[-135.76554871 460.10202026]
[-141.39729309 469.13925171]
[-149.70762634 475.73547363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[11 24]
[12 23]
[13 22]
[14 21]
[38 142]
[39 141]
[40 140]
[41 139]
[42 138]
[43 137]
[44 136]
[47 132]
[48 131]
[49 130]
[50 129]
[52 127]
[53 126]
[54 125]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[62 115]
[63 114]
[64 113]
[65 112]
[66 86]
[67 85]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
[87 111]
[88 110]
[89 109]
[90 108]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
