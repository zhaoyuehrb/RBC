%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCUAUCUGCUCUCUGGCCUGCCUCAGUGGUCUACAGCAGUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[69.23381042 116.98430634]
[64.31343842 131.15434265]
[59.39306641 145.32437134]
[54.47269440 159.49441528]
[61.58857346 173.60610962]
[56.56251144 188.58990479]
[42.37637711 195.55618286]
[27.44655609 190.37199402]
[20.63064194 176.11299133]
[25.97239876 161.23881531]
[40.30265808 154.57403564]
[45.22303009 140.40400696]
[50.14340210 126.23397064]
[55.06377411 112.06393433]
[66.27962494 98.15084076]
[80.42156219 92.36455536]
[93.62516785 94.75022888]
[92.62327576 79.78372192]
[91.62138367 64.81722260]
[90.61949921 49.85071564]
[89.61760712 34.88421249]
[88.61571503 19.91771126]
[87.61383057 4.95120764]
[86.61193848 -10.01529503]
[74.99810791 -20.39588356]
[74.19525146 -35.58831787]
[84.16312408 -46.59636307]
[83.16123199 -61.56286621]
[82.15934753 -76.52936554]
[80.99079132 -91.48377991]
[79.65570831 -106.42424774]
[64.68509674 -134.46867371]
[56.75521088 -147.20118713]
[48.82532501 -159.93370056]
[40.89543915 -172.66621399]
[32.96555710 -185.39872742]
[25.03567123 -198.13124084]
[17.10578537 -210.86376953]
[9.17590046 -223.59628296]
[1.24601531 -236.32879639]
[-6.00698519 -242.01652527]
[-6.71504450 -249.43449402]
[-14.35929394 -262.34051514]
[-22.00354385 -275.24655151]
[-29.64779282 -288.15255737]
[-44.97229385 -289.72286987]
[-56.30131149 -299.89669800]
[-59.43027115 -314.61651611]
[-53.36422348 -328.19375610]
[-61.00847244 -341.09976196]
[-68.65272522 -354.00579834]
[-76.29697418 -366.91180420]
[-83.94122314 -379.81784058]
[-91.58547211 -392.72387695]
[-107.04665375 -394.03970337]
[-118.75953674 -404.21752930]
[-122.22027588 -419.34375000]
[-116.09814453 -433.60205078]
[-102.74722290 -441.50979614]
[-87.30122375 -440.02633667]
[-75.69944763 -429.72204590]
[-72.40299988 -414.55917358]
[-78.67945099 -400.36810303]
[-71.03520203 -387.46209717]
[-63.39094925 -374.55606079]
[-55.74670029 -361.65005493]
[-48.10245132 -348.74401855]
[-40.45820236 -335.83801270]
[-25.63642120 -334.63265991]
[-14.23158360 -324.81463623]
[-10.75416374 -309.99029541]
[-16.74176979 -295.79681396]
[-9.09751987 -282.89077759]
[-1.45327044 -269.98477173]
[6.19097900 -257.07873535]
[13.97852993 -244.25868225]
[21.90841484 -231.52616882]
[29.83830070 -218.79364014]
[37.76818466 -206.06112671]
[45.69807053 -193.32861328]
[53.62795639 -180.59609985]
[61.55783844 -167.86358643]
[69.48772430 -155.13107300]
[77.41761017 -142.39855957]
[70.76672363 -155.84347534]
[72.81954193 -170.70234680]
[82.86666870 -181.84034729]
[97.43609619 -185.40850830]
[111.49303436 -180.17375183]
[120.17978668 -167.94508362]
[120.49445343 -152.94839478]
[112.32829285 -140.36610413]
[98.50296021 -134.54629517]
[112.82949829 -138.99043274]
[127.15602875 -143.43455505]
[141.48257446 -147.87869263]
[155.80911255 -152.32283020]
[169.14572144 -162.79045105]
[182.89620972 -152.87275696]
[177.17262268 -136.91416931]
[160.25323486 -137.99629211]
[145.92669678 -133.55215454]
[131.60015869 -129.10801697]
[117.27362823 -124.66388702]
[102.94709015 -120.21975708]
[94.59617615 -107.75933075]
[95.93125916 -92.81886292]
[99.68995667 -86.38460541]
[97.12584686 -77.53125763]
[98.12773895 -62.56475449]
[99.12963104 -47.59825134]
[110.47579193 -38.01701355]
[111.70505524 -22.85312462]
[101.57844543 -11.01718521]
[102.58032990 3.94931817]
[103.58222198 18.91582108]
[104.58411407 33.88232422]
[105.58599854 48.84882736]
[106.58789062 63.81533051]
[107.58978271 78.78183746]
[108.59166718 93.74833679]
[112.55460358 108.21537781]
[119.31975555 121.60315704]
[126.08490753 134.99093628]
[132.85005188 148.37872314]
[139.61520386 161.76651001]
[146.38035583 175.15428162]
[153.14550781 188.54206848]
[167.15780640 197.06190491]
[166.51509094 213.44845581]
[151.87855530 220.84463501]
[138.30499268 211.64189148]
[139.75772095 195.30722046]
[132.99258423 181.91943359]
[126.22742462 168.53166199]
[119.46227264 155.14387512]
[112.69712067 141.75608826]
[105.93196869 128.36831665]
[99.16681671 114.98052979]
[91.68356323 115.48146820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[27 111]
[28 110]
[29 109]
[30 107]
[31 106]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[42 75]
[43 74]
[44 73]
[45 72]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[122 139]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
