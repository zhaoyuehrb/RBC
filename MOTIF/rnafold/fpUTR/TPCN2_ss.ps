%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGUGCGCGCGUCAGCAAAAACGCCAGGGACGGGGUCUCCGCGCCUGCGCAGUGAAGCUGGGCGCCUUCGGGGCUUGAGCUUCUGAGGGUCGGGUCCAGCGCGUGGGCUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[91.37961578 270.90881348]
[100.98551941 258.05944824]
[100.18036652 243.08108521]
[91.77106476 230.78746033]
[98.75646973 216.59187317]
[97.95131683 201.61349487]
[89.54201508 189.31988525]
[96.52741241 175.12429810]
[95.72226715 160.14591980]
[94.91711426 145.16754150]
[94.11196136 130.18917847]
[93.30681610 115.21080017]
[93.59880066 130.20796204]
[87.57286072 143.94433594]
[76.34060669 153.88598633]
[61.97404099 158.19897461]
[47.12337112 156.08767700]
[34.52809525 147.94157410]
[26.51166153 135.26336670]
[24.55286407 120.39181519]
[29.01304054 106.07025909]
[39.06942368 94.94061279]
[52.86691284 89.05593872]
[67.86028290 89.50180054]
[81.28133392 96.19402313]
[68.09427643 89.04548645]
[54.81243515 82.07464600]
[41.43820572 75.28273773]
[28.06397820 68.49082947]
[14.68974972 61.69891739]
[-0.16970032 66.37165833]
[-13.63631630 59.29317474]
[-17.99948502 45.09816360]
[-31.37371445 38.30625534]
[-44.74794388 31.51434898]
[-60.38390732 35.10547256]
[-72.85023499 25.00744057]
[-72.58382416 8.96659946]
[-59.78904343 -0.71189016]
[-44.28095627 3.39648008]
[-37.95603561 18.14011955]
[-24.58180618 24.93202782]
[-11.20757771 31.72393608]
[2.82805824 26.87248993]
[16.48818016 33.56993103]
[21.48165703 48.32469177]
[34.85588455 55.11659622]
[48.23011398 61.90850449]
[61.60434341 68.70041656]
[69.09051514 68.92635345]
[75.24280548 75.85842896]
[88.42986298 83.00696564]
[82.37942505 69.28136444]
[87.07614899 55.03563309]
[100.10338593 47.59982681]
[114.75804138 50.79998016]
[123.49967194 62.98947906]
[121.83032227 77.89630127]
[110.60847473 87.85041809]
[124.48585510 82.15670776]
[138.36323547 76.46300507]
[152.24061584 70.76930237]
[166.11799622 65.07559204]
[179.99537659 59.38188934]
[193.87275696 53.68818283]
[207.50962830 47.44030762]
[220.88385010 40.64839935]
[234.25808716 33.85649109]
[247.63230896 27.06458473]
[261.00653076 20.27267647]
[274.38076782 13.48076916]
[287.75500488 6.68886089]
[301.12921143 -0.10304706]
[314.50344849 -6.89495516]
[327.78530884 -13.86580276]
[340.97235107 -21.01433372]
[349.08444214 -35.26656723]
[365.48269653 -35.09682465]
[373.29803467 -20.67972183]
[364.49066162 -6.84634066]
[348.12088013 -7.82727480]
[334.93383789 -0.67874420]
[330.49523926 5.35390711]
[321.29534912 6.47927332]
[307.92114258 13.27118111]
[294.54690552 20.06308937]
[281.17266846 26.85499763]
[267.79846191 33.64690399]
[254.42422485 40.43881226]
[241.04998779 47.23072052]
[227.67576599 54.02262878]
[214.30152893 60.81453705]
[212.86901855 64.17205048]
[209.66561890 66.95886230]
[204.99957275 68.31589508]
[199.56646729 67.56556702]
[185.68908691 73.25926971]
[171.81170654 78.95297241]
[157.93432617 84.64668274]
[144.05694580 90.34038544]
[130.17956543 96.03408813]
[116.30217743 101.72779846]
[108.28519440 114.40564728]
[109.09033966 129.38401794]
[109.89549255 144.36239624]
[110.70063782 159.34077454]
[111.50579071 174.31915283]
[119.97267914 187.68411255]
[112.92969513 200.80834961]
[113.73484039 215.78672791]
[122.20173645 229.15168762]
[115.15874481 242.27592468]
[115.96389771 257.25430298]
[126.89188385 268.99987793]
[124.37989044 284.84506226]
[110.35491180 292.63476562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[5 110]
[6 109]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[25 52]
[26 51]
[27 49]
[28 48]
[29 47]
[30 46]
[33 43]
[34 42]
[35 41]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
