%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGAGAAUGGCGCCGCUGGAGAUCCUUUCCUGCUUUUGGUUUCCCUGGCAGGGGUUGAACUGUGGAGUGUGUGGGCUCUUAUCACGCG\
) } def
/len { sequence length } bind def

/coor [
[86.49211884 113.63227844]
[72.60980988 119.31396484]
[58.72750092 124.99564362]
[44.84519577 130.67732239]
[30.96288681 136.35900879]
[21.12172890 148.74699402]
[6.41207647 146.40704346]
[-7.47023153 152.08872986]
[-11.20113277 168.48477173]
[-23.79486847 179.37651062]
[-40.22880173 180.67829895]
[-54.09997940 172.07885742]
[-67.78247070 178.22616577]
[-81.46496582 184.37347412]
[-95.14746094 190.52076721]
[-107.11746979 202.52723694]
[-121.96834564 194.34873962]
[-118.22060394 177.81420898]
[-101.29476929 176.83828735]
[-87.61227417 170.69097900]
[-73.92977905 164.54367065]
[-60.24728394 158.39636230]
[-58.70355606 145.02082825]
[-50.64538956 134.09841919]
[-38.12160873 128.58871460]
[-24.40828705 130.05136108]
[-13.15191460 138.20642090]
[0.73039311 132.52473450]
[9.57859421 120.54314423]
[25.28120232 122.47670746]
[39.16350937 116.79502106]
[53.04581833 111.11333466]
[66.92812347 105.43165588]
[80.81043243 99.74996948]
[91.27614594 79.61056519]
[117.13738251 81.57415771]
[124.41691589 68.45896149]
[131.69644165 55.34376144]
[138.97596741 42.22856140]
[146.25549316 29.11336327]
[145.43341064 10.81402016]
[160.63041687 2.21703291]
[167.46282959 -11.13654423]
[174.29525757 -24.49011993]
[181.12767029 -37.84369659]
[187.96009827 -51.19727325]
[194.33761597 -64.77399445]
[200.25296021 -78.55835724]
[206.16828918 -92.34272766]
[212.08363342 -106.12709045]
[209.61299133 -122.33906555]
[222.58494568 -132.37202454]
[237.65507507 -125.90492249]
[239.32051086 -109.59056091]
[225.86799622 -100.21175385]
[219.95265198 -86.42739105]
[214.03732300 -72.64302063]
[208.12197876 -58.85865402]
[209.11972046 -53.99395752]
[206.92108154 -48.46921539]
[201.31367493 -44.36485291]
[194.48124695 -31.01127625]
[187.64883423 -17.65769958]
[180.81640625 -4.30412197]
[173.98399353 9.04945469]
[177.40422058 20.78679085]
[171.65127563 32.02947617]
[159.37069702 36.39289093]
[152.09117126 49.50809097]
[144.81164551 62.62329102]
[137.53210449 75.73848724]
[130.25257874 88.85369110]
[132.02192688 103.74897003]
[142.17134094 114.79385376]
[152.32075500 125.83874512]
[162.47015381 136.88362122]
[172.61956787 147.92851257]
[182.76898193 158.97340393]
[198.38151550 158.08860779]
[210.87913513 167.48773193]
[214.36085510 182.73277283]
[207.18270874 196.62551880]
[192.73399353 202.60621643]
[177.83695984 197.85096741]
[169.52552795 184.60507202]
[171.72409058 169.12280273]
[161.57467651 158.07792664]
[151.42527771 147.03303528]
[141.27586365 135.98814392]
[131.12644958 124.94326782]
[120.97705078 113.89837646]
[108.95611572 121.37201691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[7 28]
[8 27]
[12 22]
[13 21]
[14 20]
[15 19]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 58]
[48 57]
[49 56]
[50 55]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
