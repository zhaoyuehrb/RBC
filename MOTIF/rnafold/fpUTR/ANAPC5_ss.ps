%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAUGUCUGUUUCCUGGGAUAUUGUGAGGGCGGGCGGAGAUGUAGACCCGGUAGUGUUGUGCCUUGUGGUGACAACUGGCGGCAGCGCGCCGCGGGCCCGAGACUUAGUCUCGGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[110.11489868 164.33201599]
[109.73181915 149.33691406]
[109.34873962 134.34181213]
[89.73664093 129.31420898]
[78.58871460 115.65906525]
[64.47161102 120.72932434]
[54.09905624 132.67588806]
[39.50557327 129.69604492]
[25.38847351 134.76629639]
[11.27137280 139.83654785]
[-2.84572816 144.90679932]
[-16.96282959 149.97705078]
[-31.07992935 155.04731750]
[-45.06293869 160.47644043]
[-58.90273285 166.26091003]
[-72.74253082 172.04537964]
[-86.58232880 177.82984924]
[-87.85523224 193.08232117]
[-96.08030701 205.98994446]
[-109.36747742 213.58663940]
[-124.66345215 214.12672424]
[-138.45333862 207.48611450]
[-147.56829834 195.19075012]
[-149.91380310 180.06602478]
[-144.95086670 165.58749390]
[-133.81993103 155.08221436]
[-119.07880402 150.96423340]
[-104.11489105 154.17980957]
[-92.36679077 163.99005127]
[-78.52700043 158.20558167]
[-64.68720245 152.42111206]
[-50.84740448 146.63664246]
[-48.20426941 142.53158569]
[-42.90106964 140.10859680]
[-36.15018463 140.93020630]
[-22.03308296 135.85995483]
[-7.91598129 130.78970337]
[6.20111942 125.71945190]
[20.31822014 120.64920044]
[34.43532181 115.57894135]
[43.79812622 103.99502563]
[59.40135956 106.61222076]
[73.51846313 101.54196930]
[74.74615479 87.82088470]
[82.97826385 75.84733582]
[96.70195770 69.11663055]
[112.71739197 70.01564026]
[126.87879944 79.04711151]
[135.16699219 94.51903534]
[143.48062134 82.03369904]
[151.63414001 69.44322205]
[159.62620544 56.74964142]
[167.61827087 44.05606461]
[175.61033630 31.36248589]
[177.57167053 22.31897354]
[183.97209167 18.45043564]
[192.28572083 5.96510410]
[200.59934998 -6.52022743]
[208.91299438 -19.00555801]
[217.22662354 -31.49089050]
[225.54025269 -43.97622299]
[233.85389709 -56.46155167]
[242.00740051 -69.05203247]
[249.99946594 -81.74561310]
[257.99151611 -94.43919373]
[265.65679932 -107.33273315]
[272.99029541 -120.41783142]
[280.32379150 -133.50292969]
[287.65728760 -146.58802795]
[286.90695190 -162.97000122]
[300.86297607 -171.58171082]
[315.16860962 -163.56417847]
[315.10745239 -147.16514587]
[300.74240112 -139.25453186]
[293.40890503 -126.16943359]
[286.07540894 -113.08433533]
[278.74191284 -99.99923706]
[279.19055176 -95.13751221]
[276.50772095 -89.96090698]
[270.68511963 -86.44712830]
[262.69305420 -73.75354767]
[254.70097351 -61.05997086]
[253.78913879 -53.63706207]
[246.33921814 -48.14791870]
[238.02558899 -35.66259003]
[229.71195984 -23.17725754]
[221.39831543 -10.69192600]
[213.08468628 1.79340589]
[204.77105713 14.27873707]
[196.45742798 26.76406860]
[188.30390930 39.35454941]
[180.31184387 52.04813004]
[172.31977844 64.74170685]
[164.32771301 77.43528748]
[163.41587830 84.85819244]
[155.96595764 90.34733582]
[147.65232849 102.83266449]
[148.99147034 117.77277374]
[159.39294434 128.58059692]
[169.79443359 139.38841248]
[180.19592285 150.19624329]
[190.59741211 161.00405884]
[200.99890137 171.81188965]
[211.40039062 182.61972046]
[221.80187988 193.42753601]
[232.20336914 204.23536682]
[247.54324341 211.45507812]
[244.85218811 228.19407654]
[228.02238464 230.24201965]
[221.39553833 214.63685608]
[210.99404907 203.82902527]
[200.59255981 193.02119446]
[190.19107056 182.21337891]
[179.78959656 171.40554810]
[169.38810730 160.59773254]
[158.98661804 149.78990173]
[148.58512878 138.98208618]
[138.18363953 128.17425537]
[124.34384155 133.95872498]
[124.72692108 148.95382690]
[125.11000061 163.94894409]
[127.79194641 183.14418030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[5 43]
[6 42]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 32]
[15 31]
[16 30]
[17 29]
[49 97]
[50 96]
[51 94]
[52 93]
[53 92]
[54 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 82]
[64 81]
[65 80]
[66 77]
[67 76]
[68 75]
[69 74]
[98 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
