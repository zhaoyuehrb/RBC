%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGACUGCACUGCCGCGAAGGCGGAGGAGGCCGGCAGCCGGCACCCCCACACUCGGACCGCAGCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[31.98221397 196.04856873]
[17.93747330 201.31594849]
[3.02418613 199.70538330]
[-9.57214832 191.56092834]
[-17.16093826 178.62220764]
[-18.12120628 163.65298462]
[-12.24783897 149.85067749]
[-0.79820722 140.16491699]
[-15.71603584 138.59698486]
[-26.12114143 149.95655823]
[-41.04553223 152.97583008]
[-54.72424698 146.70233154]
[-61.99888611 133.73246765]
[-76.91670990 132.16453552]
[-91.83454132 130.59660339]
[-106.75237274 129.02868652]
[-121.67019653 127.46075439]
[-134.99269104 136.39891052]
[-150.24314880 131.41864014]
[-155.72271729 116.34037781]
[-147.22795105 102.73088074]
[-131.27529907 101.03018951]
[-120.10227203 112.54293060]
[-105.18444061 114.11085510]
[-90.26661682 115.67877960]
[-75.34878540 117.24671173]
[-60.43095779 118.81463623]
[-50.61869812 107.64066315]
[-35.93456268 104.34822845]
[-21.96404839 110.40447235]
[-14.14810848 123.67916107]
[0.76971972 125.24708557]
[15.65144062 123.36708832]
[29.71067047 118.13850403]
[43.76990128 112.90992737]
[57.82912827 107.68134308]
[71.88835907 102.45276642]
[85.94758606 97.22418213]
[95.00707245 86.57442474]
[108.82382965 88.71658325]
[122.88305664 83.48800659]
[130.08714294 77.39109802]
[137.64202881 78.34838867]
[151.90788269 73.71313477]
[156.45603943 63.42609024]
[165.81799316 57.60459900]
[176.60952759 58.05715561]
[185.09284973 64.37552643]
[199.69653320 60.95026398]
[205.58528137 46.59399796]
[218.80541992 38.46951294]
[234.27357483 39.70084000]
[246.04188538 49.81450653]
[249.58522034 64.92160034]
[243.54109192 79.21314240]
[230.23359680 87.19373322]
[214.77970886 85.79468536]
[203.12179565 75.55394745]
[188.51811218 78.97920990]
[175.78082275 93.28748322]
[156.54313660 87.97898102]
[142.27728271 92.61423492]
[128.11163330 97.54723358]
[114.05241394 102.77581787]
[104.99292755 113.42557526]
[91.17617035 111.28341675]
[77.11694336 116.51199341]
[63.05770874 121.74057770]
[48.99848175 126.96915436]
[34.93925095 132.19773865]
[20.88002014 137.42631531]
[34.38113403 143.96237183]
[43.50131607 155.87127686]
[46.29248047 170.60931396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 32]
[9 31]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[40 64]
[41 63]
[43 62]
[44 61]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
