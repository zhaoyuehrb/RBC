%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAUCAUGUGACUGAUGACUAAGUUAAAUCUUUUCUGCUUACUGAAAAGGAAGAGUCUGAUGAUUAGUUACUGAUCCUCUUUGCAUUUGUAAAGCUUUGGAGAUAUUGAAUC\
) } def
/len { sequence length } bind def

/coor [
[85.37461853 162.25642395]
[94.34953308 150.23764038]
[106.67310333 141.68606567]
[121.07272339 137.48477173]
[136.06214905 138.06776428]
[124.29826355 128.76126099]
[112.53437805 119.45475006]
[100.77050018 110.14823914]
[92.88623047 107.97165680]
[88.81697083 100.42332458]
[77.31168365 90.79896545]
[65.80640411 81.17459869]
[54.30111313 71.55023193]
[42.79582596 61.92586899]
[31.29054070 52.30150604]
[19.78525352 42.67714310]
[8.27996731 33.05278015]
[-3.22531891 23.42841530]
[-16.16786766 28.92554092]
[-30.14826584 28.28326797]
[-42.41525269 21.68555069]
[-50.57967758 10.48266029]
[-53.07974625 -3.08475399]
[-49.47953415 -16.33371162]
[-60.71763992 -26.26874924]
[-72.09039307 -36.04936218]
[-83.59568024 -45.67372513]
[-98.56861877 -42.05194473]
[-112.63870239 -47.87312317]
[-120.49027252 -60.71122360]
[-119.29105377 -75.53350067]
[-130.79634094 -85.15786743]
[-142.30163574 -94.78222656]
[-153.80691528 -104.40659332]
[-165.31219482 -114.03095245]
[-176.81748962 -123.65531921]
[-188.32276917 -133.27967834]
[-203.33987427 -129.37243652]
[-217.77323914 -135.06958008]
[-226.07296753 -148.18041992]
[-225.04763794 -163.66357422]
[-215.09150696 -175.56547546]
[-200.03291321 -179.30957031]
[-185.66218567 -173.45620728]
[-177.50517273 -160.25610352]
[-178.69841003 -144.78497314]
[-167.19313049 -135.16059875]
[-155.68783569 -125.53623962]
[-144.18255615 -115.91188049]
[-132.67726135 -106.28751373]
[-121.17197418 -96.66314697]
[-109.66669464 -87.03878784]
[-95.28930664 -90.83731079]
[-81.26619720 -85.37686920]
[-73.05125427 -72.55625916]
[-73.97132111 -57.17901230]
[-62.46603394 -47.55464935]
[-55.21843719 -45.65086746]
[-50.78260040 -37.50685501]
[-39.54449463 -27.57181740]
[-24.41923523 -33.07786942]
[-8.48254108 -30.22690392]
[3.93827200 -19.69773865]
[9.42277622 -4.26688719]
[6.39904499 11.92312813]
[17.90433121 21.54749107]
[29.40961838 31.17185593]
[40.91490555 40.79621887]
[52.42019272 50.42058182]
[63.92547607 60.04494858]
[75.43076324 69.66931152]
[86.93605042 79.29367828]
[98.44133759 88.91803741]
[110.07700348 98.38436127]
[121.84088898 107.69086456]
[133.60476685 116.99737549]
[145.36865234 126.30388641]
[158.95845032 132.65347290]
[173.64471436 135.70530701]
[193.37921143 127.59018707]
[208.49259949 141.53382874]
[223.37939453 143.37316895]
[238.26620483 145.21250916]
[253.15299988 147.05183411]
[268.03979492 148.89117432]
[282.92660522 150.73051453]
[297.80770874 143.83956909]
[311.05834961 153.50143433]
[309.04745483 169.77682495]
[293.84362793 175.92300415]
[281.08728027 165.61730957]
[266.20046997 163.77798462]
[251.31365967 161.93864441]
[236.42686462 160.09930420]
[221.54006958 158.25996399]
[206.65325928 156.42062378]
[200.46351624 163.11186218]
[191.73112488 166.17509460]
[182.44293213 164.77568054]
[174.77720642 159.11041260]
[170.59288025 150.39157104]
[155.90661621 147.33973694]
[165.97094727 158.46220398]
[171.98783875 172.20254517]
[173.33595276 187.14183044]
[169.87608337 201.73736572]
[161.96551514 214.48188782]
[150.42114258 224.05932617]
[136.43510437 229.48063660]
[121.45169067 230.18601990]
[107.01820374 226.10258484]
[94.62512207 217.65205383]
[85.55224609 205.70706177]
[80.73649597 191.50112915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[8 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[24 60]
[25 59]
[26 57]
[27 56]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[78 102]
[79 101]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
