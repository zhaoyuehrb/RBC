%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCGGUGCACGCCGGGAGUUGCAGUUCCCGGGCGAGGCAGUUGACUGCCCCACAACGAGCUCGGGCCUCACCCGG\
) } def
/len { sequence length } bind def

/coor [
[180.98094177 218.02830505]
[176.11737061 198.64842224]
[181.26318359 179.26846313]
[169.85708618 169.52674866]
[155.15422058 167.14453125]
[149.68547058 152.29855347]
[138.27937317 142.55682373]
[126.87328339 132.81510925]
[115.46720123 123.07338715]
[104.06111145 113.33166504]
[91.75508881 104.75484467]
[78.66764832 97.42552948]
[60.39477158 98.20230103]
[51.80945969 83.02883911]
[38.44436264 76.21897888]
[25.07926559 69.40911865]
[11.71416759 62.59926605]
[-1.78205693 56.05312729]
[-15.40420437 49.77323151]
[-29.02635193 43.49333191]
[-42.64849854 37.21343613]
[-56.27064896 30.93354225]
[-71.00948334 36.63813019]
[-85.43119049 30.17362404]
[-90.97962952 15.37530136]
[-84.36301422 1.02274382]
[-69.50685883 -4.36893034]
[-55.22505569 2.39906335]
[-49.99075317 17.31139374]
[-36.36860275 23.59128952]
[-22.74645615 29.87118530]
[-9.12430859 36.15108109]
[4.49783897 42.43097687]
[12.09088898 42.36910248]
[18.52402496 49.23416519]
[31.88912201 56.04402542]
[45.25421906 62.85388184]
[58.61931992 69.66374207]
[70.38967896 66.22347260]
[81.65952301 72.00701904]
[85.99696350 84.33808899]
[99.08440399 91.66740417]
[101.79177094 90.86570740]
[104.87804413 91.00337219]
[108.00528717 92.22487640]
[110.78753662 94.55185699]
[112.83516693 97.86896515]
[113.80282593 101.92557526]
[125.20891571 111.66729736]
[136.61500549 121.40901947]
[148.02110291 131.15074158]
[159.42718506 140.89245605]
[174.94589233 143.97146606]
[179.59881592 158.12065125]
[191.00489807 167.86238098]
[200.39292908 162.31100464]
[210.91198730 159.49644470]
[221.78295898 159.61743164]
[232.20326233 162.65565491]
[241.40614319 168.37773132]
[248.71702576 176.35321045]
[253.60302734 185.98684692]
[255.71177673 196.56307983]
[254.89675903 207.29913330]
[251.22752380 217.40303040]
[244.98384094 226.13192749]
[253.80061340 238.26718140]
[262.61740112 250.40243530]
[271.43417358 262.53768921]
[286.99099731 266.45745850]
[293.49450684 281.12319946]
[285.95571899 295.28463745]
[270.15777588 298.07830811]
[258.21951294 287.36117554]
[259.29891968 271.35446167]
[250.48214722 259.21920776]
[241.66535950 247.08395386]
[232.84858704 234.94869995]
[213.44039917 238.70809937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[11 42]
[12 41]
[14 38]
[15 37]
[16 36]
[17 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
