%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCACCGUCCCCACGCUGGGGCUUCAGGUCUCCUAGCAACAAGUUGUACCAUAUGAGGACGGCCGCUGAGCCAUA\
) } def
/len { sequence length } bind def

/coor [
[134.69752502 329.53002930]
[145.41111755 318.42947388]
[141.86595154 303.85443115]
[138.32078552 289.27938843]
[134.77561951 274.70437622]
[121.95881653 267.20333862]
[118.15589142 252.47268677]
[126.11054230 239.08010864]
[122.56537628 224.50506592]
[119.02020264 209.93002319]
[115.47503662 195.35499573]
[111.92987061 180.77995300]
[108.38470459 166.20491028]
[97.85858917 155.66687012]
[102.11508942 140.42900085]
[98.56992340 125.85396576]
[77.74916840 113.24284363]
[76.59304810 88.92808533]
[65.47252655 78.86161041]
[54.35200119 68.79512787]
[43.23147964 58.72865677]
[32.11095428 48.66217804]
[20.99043083 38.59570312]
[9.47849083 28.97929764]
[-2.40666223 19.82817078]
[-14.29181576 10.67704296]
[-30.53057098 5.80476046]
[-30.34403419 -11.14816093]
[-14.00200176 -15.66194916]
[-5.14068842 -1.20811009]
[6.74446487 7.94301701]
[18.62961769 17.09414482]
[23.65192795 17.32016373]
[28.51123238 20.89243889]
[31.05690765 27.47517776]
[42.17743301 37.54165649]
[53.29795456 47.60813141]
[64.41847992 57.67460632]
[75.53900146 67.74108124]
[86.65953064 77.80756378]
[95.89852142 74.43341064]
[105.72933197 74.74832153]
[113.14306641 61.70851517]
[120.55680847 48.66871262]
[123.12908173 31.91103363]
[139.94393921 29.74379349]
[146.68128967 45.30156708]
[133.59660339 56.08245087]
[126.18286896 69.12225342]
[118.76913452 82.16205597]
[122.68550110 87.51638794]
[125.11289978 93.69009399]
[125.89199066 100.27794647]
[124.97165680 106.84755707]
[122.41228485 112.96772766]
[118.38188171 118.23674774]
[113.14496613 122.30879974]
[116.69013214 136.88383484]
[127.46982574 148.46437073]
[122.95974731 162.65974426]
[126.50491333 177.23478699]
[130.05007935 191.80982971]
[133.59524536 206.38485718]
[137.14041138 220.95989990]
[140.68557739 235.53494263]
[153.90274048 243.77778625]
[157.29040527 258.60946655]
[149.35066223 271.15921021]
[152.89582825 285.73422241]
[156.44099426 300.30926514]
[159.98616028 314.88430786]
[174.60131836 319.82403564]
[184.20790100 331.89535522]
[185.74046326 347.24639893]
[178.70999146 360.97869873]
[165.35987854 368.71032715]
[149.95008850 367.97415161]
[137.39784241 359.00506592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[15 58]
[16 57]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 32]
[25 31]
[26 30]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
