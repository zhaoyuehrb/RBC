%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGUGGUGAAAAGGUGACAGGGAGCUGCCCCCGCUCAAGAGCCGGUGGUUGGGGGUCUGAGAAGAAGUCACCAAU\
) } def
/len { sequence length } bind def

/coor [
[34.00430298 158.81098938]
[44.19983673 147.80526733]
[29.27390480 149.29406738]
[14.34797287 150.78288269]
[-0.57795936 152.27168274]
[-15.50389194 153.76049805]
[-30.42982483 155.24929810]
[-45.35575485 156.73811340]
[-60.28168869 158.22691345]
[-75.20761871 159.71572876]
[-78.92862701 174.41027832]
[-87.45362854 186.94422913]
[-99.75319672 195.80406189]
[-114.34208679 199.91989136]
[-129.45861816 198.79472351]
[-143.27742004 192.56440735]
[-154.12977600 181.98130798]
[-160.70523071 168.32336426]
[-162.20974731 153.23985291]
[-158.46166992 138.55218506]
[-149.91358948 126.03395844]
[-137.59771729 117.19681549]
[-123.00126648 113.10787201]
[-107.88682556 114.26090240]
[-94.07953644 120.51667023]
[-83.24669647 131.11975098]
[-76.69642639 144.78979492]
[-61.77049637 143.30097961]
[-46.84456253 141.81217957]
[-31.91863060 140.32336426]
[-16.99269867 138.83456421]
[-2.06676626 137.34574890]
[12.85916615 135.85694885]
[27.78509903 134.36813354]
[42.71102905 132.87933350]
[47.91154480 128.52615356]
[55.32766342 127.57972717]
[66.83960724 117.96331787]
[78.35154724 108.34691620]
[89.86348724 98.73050690]
[93.66934967 91.35558319]
[102.02962494 88.97167206]
[113.91477203 79.82054901]
[120.12892151 65.27080536]
[134.93362427 63.63681412]
[146.81877136 54.48568726]
[145.40727234 39.12303162]
[152.54577637 25.44658089]
[165.95642090 17.82044220]
[181.35992432 18.67808723]
[193.84107971 27.74584389]
[199.41720581 42.13022614]
[196.30895996 57.24123001]
[185.50819397 68.25698853]
[170.46138000 71.66240692]
[155.96990967 66.37084198]
[144.08474731 75.52196503]
[138.72071838 89.41716003]
[123.06590271 91.70570374]
[111.18074799 100.85682678]
[99.47988892 110.24244690]
[87.96794891 119.85885620]
[76.45600891 129.47526550]
[64.94406891 139.09165955]
[79.93809509 139.51498413]
[93.93553162 144.90681458]
[105.33885193 154.65176392]
[112.84659576 167.63768005]
[115.60191345 182.38244629]
[113.29032898 197.20326233]
[106.17567444 210.40863037]
[95.06993866 220.49140930]
[81.24061584 226.30087280]
[66.26604462 227.17398071]
[51.85527802 223.01107788]
[39.65300751 214.28727722]
[31.05188179 201.99822998]
[27.03354263 187.54649353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[37 64]
[38 63]
[39 62]
[40 61]
[42 60]
[43 59]
[45 57]
[46 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
