%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACUUCUCUUCCCUUCAUUCUUCGCCAGGCUCUCUGCUGACUCAAGUUCUUCAGUUCACGAUCUUCUAGUUGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[7.24059439 133.98143005]
[-7.19623423 138.05302429]
[-21.63306236 142.12463379]
[-20.86599731 157.16987610]
[-23.46655655 172.00851440]
[-29.30430222 185.89620972]
[-38.08641434 198.13641357]
[-49.37238312 208.11511230]
[-62.59610748 215.33181763]
[-77.09429932 219.42453003]
[-92.13972473 220.18794250]
[-106.97772217 217.58378601]
[-120.86401367 211.74267578]
[-133.10208130 202.95759583]
[-143.07804871 191.66921997]
[-150.29154968 178.44374084]
[-154.38073730 163.94456482]
[-155.14051819 148.89894104]
[-152.53276062 134.06158447]
[-146.68829346 120.17670441]
[-137.90025330 107.94077301]
[-126.60945129 97.96752930]
[-113.38222504 90.75724030]
[-98.88205719 86.67156219]
[-83.83625793 85.91542816]
[-68.99952698 88.52677917]
[-55.11606216 94.37461853]
[-42.88225937 103.16561890]
[-32.91175461 114.45883942]
[-25.70466995 127.68781281]
[-11.26784134 123.61620331]
[3.16898751 119.54459381]
[8.14210892 105.53009796]
[20.56083870 97.03073883]
[35.78097153 97.47895813]
[47.95952606 106.91236115]
[62.39635468 102.84075165]
[76.83318329 98.76914215]
[91.27001190 94.69754028]
[97.75359344 89.52477264]
[106.35391998 90.76144409]
[120.93946838 87.25976562]
[135.52502441 83.75807953]
[150.11056519 80.25640106]
[163.00148010 67.28235626]
[179.60562134 72.59686279]
[194.04244995 68.52525330]
[208.47927856 64.45364380]
[219.66111755 53.26091766]
[234.01075745 57.25302505]
[248.44758606 53.18141937]
[252.15040588 38.27555847]
[262.82162476 27.22925949]
[277.59072876 23.01391983]
[292.48492432 26.76344681]
[303.49771118 37.46923447]
[307.66671753 52.25148010]
[303.87054443 67.13383484]
[293.13027954 78.11302185]
[278.33505249 82.23568726]
[263.46466064 78.39286804]
[252.51919556 67.61824799]
[238.08236694 71.68985748]
[227.93315125 82.59135437]
[212.55088806 78.89047241]
[198.11405945 82.96208191]
[183.67723083 87.03369141]
[177.36924744 97.54969025]
[165.16766357 100.95267487]
[153.61224365 94.84194946]
[139.02670288 98.34363556]
[124.44115448 101.84531403]
[109.85560608 105.34699249]
[95.34161377 109.13436890]
[80.90478516 113.20597076]
[66.46795654 117.27758026]
[52.03113174 121.34918976]
[46.57614517 135.75575256]
[33.83304214 144.09042358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[36 77]
[37 76]
[38 75]
[39 74]
[41 73]
[42 72]
[43 71]
[44 70]
[46 67]
[47 66]
[48 65]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
