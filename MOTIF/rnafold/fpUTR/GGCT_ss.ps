%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCGCCAGUCCCCUAACCCUGAGGCUGCCGCGCGGCGGUCACUGCGCCGGGGUAGUGGGCCCCAGUGUUGCGCUCUCUGGCCGUUCCUUACACUCUGCUUCAGGCUCCAGUGCAGGGGCGUAGUGGGAU\
) } def
/len { sequence length } bind def

/coor [
[92.82357025 326.78936768]
[85.20024872 312.26983643]
[94.19039917 298.55456543]
[94.54467773 283.55874634]
[94.89896393 268.56292725]
[95.25324249 253.56710815]
[95.60752869 238.57128906]
[95.96180725 223.57546997]
[83.85604858 211.96340942]
[83.84791565 194.85224915]
[96.42765045 182.76211548]
[96.42765045 167.76211548]
[96.42765045 152.76211548]
[96.42765045 137.76211548]
[96.42765045 122.76212311]
[89.23626709 135.92585754]
[87.01502991 150.76048279]
[77.26144409 162.15643311]
[62.94756699 166.64118958]
[48.43505096 162.84817505]
[38.14606476 151.93321228]
[35.21580505 137.22219849]
[40.53717422 123.19783020]
[52.48866653 114.13351440]
[67.42916107 112.79140472]
[80.99437714 106.38945770]
[66.02052307 105.50418854]
[51.04666901 104.61891174]
[36.07281494 103.73364258]
[21.09896088 102.84836578]
[6.12510777 101.96309662]
[-8.84874630 101.07782745]
[-23.25959396 108.90467072]
[-37.10001373 100.10836792]
[-36.13216400 83.73780823]
[-21.35169029 76.63361359]
[-7.96347332 86.10397339]
[7.01038027 86.98924255]
[21.98423386 87.87451935]
[36.95808792 88.75978851]
[51.93194199 89.64505768]
[66.90579224 90.53033447]
[81.87964630 91.41560364]
[86.34516907 85.38990021]
[80.37383270 71.62969971]
[95.27621460 73.33849335]
[99.74172974 67.31278992]
[94.53751373 53.24452209]
[89.33329773 39.17625427]
[84.12907410 25.10798836]
[72.08444214 14.84946346]
[74.92543030 0.22831355]
[69.72121429 -13.83995247]
[64.51699066 -27.90821838]
[59.31277466 -41.97648239]
[54.10855484 -56.04475021]
[40.19270325 -64.02777100]
[37.90019989 -79.90618134]
[48.98966217 -91.49942780]
[64.95420074 -89.91416168]
[73.54718781 -76.36646271]
[68.17681885 -61.24897003]
[73.38104248 -47.18070221]
[78.58525848 -33.11243820]
[83.78948212 -19.04417229]
[88.99369812 -4.97590590]
[100.66609192 4.27636337]
[98.19734192 19.90377045]
[103.40155792 33.97203445]
[108.60578156 48.04030228]
[113.80999756 62.10856628]
[127.08550262 69.09147644]
[141.62651062 65.40919495]
[156.16751099 61.72691345]
[170.70851135 58.04463196]
[185.24951172 54.36235046]
[199.79052734 50.68006516]
[203.82066345 39.37487030]
[212.74681091 31.53292465]
[224.24137878 29.04325104]
[235.38174438 32.41909027]
[243.39326477 40.69732285]
[258.09194946 37.70584106]
[272.79061890 34.71435547]
[287.48928833 31.72287369]
[288.75527954 16.67049980]
[294.21200562 2.58501792]
[303.41714478 -9.39172268]
[315.62445068 -18.28882408]
[329.84432983 -23.38503456]
[344.92407227 -24.26723099]
[359.64120483 -20.86389351]
[372.80267334 -13.45092010]
[383.34155273 -2.62924361]
[390.40350342 10.72386932]
[393.41601562 25.52594185]
[392.13491821 40.57703781]
[386.66403198 54.65702820]
[377.44689941 66.62451935]
[365.23065186 75.50934601]
[351.00564575 80.59127045]
[335.92504883 81.45832062]
[321.21133423 78.04019928]
[308.05731201 70.61400604]
[297.52929688 59.78174973]
[290.48077393 46.42154694]
[275.78210449 49.41303253]
[261.08343506 52.40451431]
[246.38475037 55.39599991]
[237.30984497 71.21423340]
[219.26885986 75.54402924]
[203.47280884 65.22106934]
[188.93179321 68.90335083]
[174.39079285 72.58563232]
[159.84979248 76.26791382]
[145.30879211 79.95020294]
[130.76777649 83.63248444]
[111.42765045 122.76212311]
[111.42765045 137.76211548]
[111.42765045 152.76211548]
[111.42765045 167.76211548]
[111.42765045 182.76211548]
[122.02254486 191.17060852]
[125.75592804 203.96803284]
[121.47138214 216.38534546]
[110.95762634 223.92974854]
[110.60334015 238.92556763]
[110.24906158 253.92138672]
[109.89477539 268.91720581]
[109.54049683 283.91302490]
[109.18621826 298.90884399]
[117.51863861 313.03338623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[47 71]
[48 70]
[49 69]
[50 68]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[82 109]
[83 108]
[84 107]
[85 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
