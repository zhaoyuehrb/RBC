%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCCUCGCGCAGGGUCAGAGGCCGUGGGGCGGGCCACGGUGACGCGCGCGGAAGCGCUCUGCGGGCCCUCGGAAACCGCCCCGGCGGCUGAGAGGCUGCGGCCACUGCCUGGCACCCCGACGGGAGGGGCUCCGGAUCGUUCGGAGCCGGCUGAACCCCUUCGGCCGCGAGCGACCGC\
) } def
/len { sequence length } bind def

/coor [
[72.32381439 264.17294312]
[62.24697113 252.49131775]
[60.10798645 237.21295166]
[66.58940887 223.21315002]
[79.62303925 214.95916748]
[79.62303925 199.95916748]
[79.49357605 184.95973206]
[79.23467255 169.96195984]
[78.97576141 154.96420288]
[78.71685028 139.96643066]
[78.45793915 124.96866608]
[71.60198212 111.62715912]
[59.55869293 102.68517303]
[43.86627197 100.67061615]
[38.26017761 86.87129974]
[26.21688461 77.92931366]
[14.17359447 68.98732758]
[5.39331388 66.37390900]
[2.00138378 59.78559113]
[-9.88576889 50.63706207]
[-21.77292061 41.48853302]
[-37.42823410 39.20341110]
[-42.79530716 25.30939102]
[-54.68246078 16.16086197]
[-66.56961060 7.01233101]
[-78.45676422 -2.13619900]
[-93.69001007 1.80389237]
[-108.76762390 -8.29406071]
[-122.60091400 -14.09406185]
[-136.43420410 -19.89406204]
[-150.26750183 -25.69406319]
[-164.10078430 -31.49406433]
[-177.93408203 -37.29406738]
[-191.76737976 -43.09406662]
[-205.60066223 -48.89406967]
[-217.83721924 -39.71725082]
[-232.92457581 -37.90936661]
[-246.79893494 -43.85652542]
[-255.77359009 -55.86949921]
[-257.51849365 -70.66209412]
[-271.35180664 -76.46209717]
[-285.18508911 -82.26210022]
[-295.12887573 -75.68995667]
[-306.89120483 -74.75574493]
[-317.52908325 -79.57678986]
[-324.43704224 -88.84487915]
[-325.98507690 -100.17890930]
[-339.60992432 -106.45292664]
[-355.38122559 -105.19712067]
[-363.70544434 -117.54850006]
[-377.33029175 -123.82251740]
[-390.95513916 -130.09654236]
[-404.58001709 -136.37055969]
[-418.20486450 -142.64457703]
[-431.82971191 -148.91859436]
[-447.31646729 -144.73046875]
[-460.16088867 -154.34300232]
[-460.50982666 -170.38226318]
[-448.09561157 -180.54429626]
[-432.44137573 -177.03367615]
[-425.55569458 -162.54344177]
[-411.93084717 -156.26942444]
[-398.30599976 -149.99540710]
[-384.68112183 -143.72138977]
[-371.05627441 -137.44737244]
[-357.43142700 -131.17335510]
[-342.63467407 -132.87792969]
[-333.33590698 -120.07778168]
[-319.71105957 -113.80376434]
[-302.97631836 -121.17791748]
[-285.86233521 -113.87725067]
[-279.38507080 -96.09539032]
[-265.55178833 -90.29538727]
[-251.71849060 -84.49538422]
[-239.94552612 -93.62022400]
[-225.08703613 -95.64048004]
[-211.12001038 -89.91434479]
[-201.83346558 -77.88700867]
[-199.80067444 -62.72735977]
[-185.96737671 -56.92736053]
[-172.13407898 -51.12735748]
[-158.30079651 -45.32735825]
[-144.46749878 -39.52735519]
[-130.63420105 -33.72735596]
[-116.80091095 -27.92735481]
[-102.96762085 -22.12735367]
[-89.99887085 -29.66469383]
[-88.19081879 -44.55532837]
[-86.38276672 -59.44596100]
[-84.57471466 -74.33659363]
[-82.76667023 -89.22722626]
[-80.95861816 -104.11785889]
[-87.88082123 -118.98443604]
[-78.24681854 -132.25538635]
[-61.96723557 -130.27868652]
[-55.78911972 -115.08779907]
[-66.06798553 -102.30980682]
[-67.87603760 -87.41917419]
[-69.68408203 -72.52854156]
[-71.49213409 -57.63790894]
[-73.30018616 -42.74727631]
[-75.10823822 -27.85664368]
[-69.30823517 -14.02335167]
[-57.42108154 -4.87482166]
[-45.53392792 4.27370834]
[-33.64677811 13.42223835]
[-18.84171295 15.05299568]
[-12.62439156 29.60137939]
[-0.73723871 38.74990845]
[11.14991379 47.89844131]
[23.11558151 56.94403458]
[35.15887451 65.88602448]
[47.20216370 74.82801056]
[62.03316879 76.20298004]
[68.50067902 90.64188385]
[80.54396820 99.58386993]
[80.59688568 70.37803650]
[119.50868988 52.48764038]
[133.13354492 46.21362305]
[146.70375061 39.82224655]
[160.21827698 33.31399155]
[169.00415039 19.46695328]
[185.37544250 20.42247391]
[192.49076843 35.19759369]
[183.03048706 48.59294128]
[166.72653198 46.82852554]
[153.21200562 53.33678055]
[148.53762817 59.08667755]
[139.40756226 59.83847809]
[125.78270721 66.11249542]
[127.84751129 80.96970367]
[142.66685486 83.29064178]
[157.48622131 85.61157990]
[172.30557251 87.93252563]
[187.12492371 90.25346375]
[201.94427490 92.57440186]
[216.76362610 94.89533997]
[231.58297729 97.21628571]
[246.40232849 99.53722382]
[262.98626709 96.01448059]
[270.96221924 110.97510529]
[258.79421997 122.78087616]
[244.08139038 114.35657501]
[229.26203918 112.03563690]
[214.44268799 109.71469879]
[199.62333679 107.39375305]
[184.80398560 105.07281494]
[169.98463440 102.75187683]
[155.16526794 100.43093872]
[140.34591675 98.10999298]
[125.52656555 95.78905487]
[118.44135284 109.01023865]
[128.58050537 120.06453705]
[138.71966553 131.11883545]
[148.85881042 142.17314148]
[158.99797058 153.22743225]
[169.13711548 164.28173828]
[179.27627563 175.33604431]
[195.07272339 179.74105835]
[198.89347839 195.68890381]
[186.80807495 206.77380371]
[171.24894714 201.59255981]
[168.22198486 185.47518921]
[158.08282471 174.42089844]
[147.94366455 163.36659241]
[137.80451965 152.31228638]
[127.66535950 141.25799561]
[117.52620697 130.20368958]
[107.38704681 119.14939117]
[93.45570374 124.70976257]
[93.71461487 139.70751953]
[93.97352600 154.70529175]
[94.23243713 169.70304871]
[94.49134827 184.70082092]
[97.77538300 193.25291443]
[94.62303925 199.95916748]
[94.62303925 214.95916748]
[107.65666962 223.21315002]
[114.13809204 237.21295166]
[111.99910736 252.49131775]
[101.92226410 264.17294312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 177]
[6 176]
[7 174]
[8 173]
[9 172]
[10 171]
[11 170]
[12 116]
[13 115]
[15 113]
[16 112]
[17 111]
[19 110]
[20 109]
[21 108]
[23 106]
[24 105]
[25 104]
[26 103]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[40 74]
[41 73]
[42 72]
[47 69]
[48 68]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[118 130]
[119 129]
[120 127]
[121 126]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
[139 143]
[152 169]
[153 168]
[154 167]
[155 166]
[156 165]
[157 164]
[158 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
