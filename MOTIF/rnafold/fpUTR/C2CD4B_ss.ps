%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACUGAAGGUGGCGCCUCGGCAGCGGGCUAGAGGCCACUGGCACUGAGCUUGCAACCAGAUCCAGAGACACUGAAGAAGAGAGAAAGGCGCACCUCUUCCCGCCACUCCUAGCCCCAGCCUCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[109.21556091 327.58346558]
[111.67002106 312.67871094]
[118.22545624 299.06976318]
[128.35046387 287.85989380]
[141.22422791 279.95782471]
[137.28361511 265.48471069]
[133.34300232 251.01156616]
[120.32676697 243.86222839]
[116.12425232 229.24055481]
[123.71138000 215.63639832]
[119.77077484 201.16326904]
[115.83016205 186.69012451]
[111.88954926 172.21699524]
[107.94894409 157.74386597]
[104.00833130 143.27073669]
[100.06771851 128.79759216]
[78.91236115 119.61167145]
[71.28295898 97.84651184]
[57.13327789 92.86788940]
[47.89543533 92.96200562]
[42.70433426 87.59423828]
[28.67909050 82.27516174]
[14.40617657 88.51388550]
[0.25835750 82.91979980]
[-5.60135269 69.27430725]
[-19.62659645 63.95523453]
[-33.65184021 58.63616180]
[-47.67708206 53.31708527]
[-61.70232773 47.99801254]
[-75.72756958 42.67893982]
[-89.75281525 37.35986710]
[-101.88014221 41.94268799]
[-113.49116516 37.14770126]
[-118.51757050 26.07520103]
[-132.41018677 20.41877747]
[-146.37013245 14.93062973]
[-160.39538574 9.61155605]
[-174.42062378 4.29248285]
[-191.37452698 4.32927465]
[-196.10319519 -11.95188236]
[-181.76733398 -21.00282097]
[-169.10154724 -9.73276043]
[-155.07630920 -4.41368771]
[-141.05107117 0.90538579]
[-133.60598755 0.32988825]
[-126.75376892 6.52615833]
[-112.86114502 12.18258095]
[-95.68244934 8.81505680]
[-84.43373871 23.33462334]
[-70.40850067 28.65369606]
[-56.38325500 33.97277069]
[-42.35800934 39.29184341]
[-28.33276749 44.61091614]
[-14.30752277 49.92998886]
[-0.28227955 55.24906158]
[13.15240955 48.92097473]
[27.45177269 54.11547470]
[33.99816513 68.24992371]
[48.02340698 73.56899261]
[62.11189651 78.71821594]
[76.26157379 83.69683075]
[80.74853516 78.58301544]
[86.30992889 74.66448975]
[92.63537598 72.15995026]
[99.37184143 71.20917511]
[102.96157837 56.64505005]
[106.55131531 42.08092117]
[99.51554108 27.66296577]
[106.53108215 13.23515511]
[122.21621704 9.86527157]
[134.53865051 20.13840103]
[134.04566956 36.17387772]
[121.11544037 45.67065811]
[117.52570343 60.23478317]
[113.93596649 74.79891205]
[117.28192902 76.96435547]
[120.29686737 79.57102203]
[122.92304230 82.56898499]
[136.81565857 76.91256714]
[150.70828247 71.25614166]
[164.60090637 65.59971619]
[178.49353027 59.94329834]
[192.38613892 54.28687286]
[193.28257751 39.05010605]
[200.70872498 25.71537399]
[213.19012451 16.93030357]
[228.24858093 14.43917370]
[242.89422607 18.73660278]
[254.21914673 28.96932983]
[259.97479248 43.10564423]
[259.01837158 58.33876419]
[251.53976440 71.64414978]
[239.02386475 80.37999725]
[223.95571899 82.81180573]
[209.32711792 78.45674133]
[198.04257202 68.17949677]
[184.14994812 73.83591461]
[170.25732422 79.49234009]
[156.36470032 85.14876556]
[142.47209167 90.80518341]
[128.57946777 96.46160889]
[125.81501007 112.76288605]
[114.54085541 124.85698700]
[118.48146057 139.33012390]
[122.42207336 153.80325317]
[126.36268616 168.27638245]
[130.30329895 182.74951172]
[134.24391174 197.22265625]
[138.18450928 211.69578552]
[151.62115479 219.57579041]
[155.41131592 234.30973816]
[147.81614685 247.07095337]
[151.75675964 261.54409790]
[155.69735718 276.01721191]
[170.80020142 276.30209351]
[185.21058655 280.83166504]
[197.76036072 289.23883057]
[207.43214417 300.84197998]
[213.44190979 314.70053101]
[215.30247498 329.69100952]
[212.86299133 344.59823608]
[206.32121277 358.21374512]
[196.20748901 369.43377686]
[183.34165955 377.34878540]
[168.76670837 381.31710815]
[153.66416931 381.01708984]
[139.25834656 376.47302246]
[126.71702576 368.05328369]
[117.05689240 356.44039917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 114]
[6 113]
[7 112]
[10 109]
[11 108]
[12 107]
[13 106]
[14 105]
[15 104]
[16 103]
[18 61]
[19 60]
[21 59]
[22 58]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[34 47]
[35 46]
[36 44]
[37 43]
[38 42]
[65 75]
[66 74]
[67 73]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
