%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGAAUGUUUUCCUAGAGAUGUCAGCCUACAAAGGACACAAUCUCUCUUCUUCAAAUUCUUCCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[103.88677216 297.34811401]
[113.03988647 284.17239380]
[111.71418762 269.23107910]
[110.38848114 254.28977966]
[109.06278229 239.34848022]
[107.73708344 224.40716553]
[106.41137695 209.46586609]
[95.53726196 195.86953735]
[103.00951385 179.20463562]
[101.02420807 164.33660889]
[99.03890228 149.46856689]
[97.05358887 134.60052490]
[80.40261078 128.66740417]
[68.82954407 115.30622864]
[65.33310699 97.97901917]
[70.81926727 81.17547607]
[83.86650085 69.24958038]
[79.93081665 54.77510834]
[75.99513245 40.30063629]
[72.05944824 25.82616234]
[68.12376404 11.35168839]
[64.18807983 -3.12278485]
[49.23451996 -5.97804403]
[37.05318069 -15.00588703]
[30.02826118 -28.37266159]
[29.50570107 -43.40222931]
[35.53561783 -57.11170197]
[46.87298203 -66.80343628]
[42.93729782 -81.27790833]
[39.00161362 -95.75238037]
[26.98813057 -106.91519165]
[30.91191864 -122.83799744]
[46.73651886 -127.14079285]
[58.18294144 -115.39721680]
[53.47608566 -99.68806458]
[57.41176987 -85.21359253]
[61.34745407 -70.73912048]
[76.03145599 -68.12272644]
[88.17324829 -59.35424042]
[95.33320618 -46.12941360]
[96.04409027 -31.04581833]
[90.11139679 -17.09267807]
[78.66255188 -7.05846930]
[82.59823608 7.41600466]
[86.53392029 21.89047813]
[90.46960449 36.36495209]
[94.40528870 50.83942413]
[98.34097290 65.31389618]
[110.49662781 66.89865875]
[121.34423065 72.60836792]
[129.53201294 81.73149872]
[134.03964233 93.13117981]
[134.30538940 105.38681793]
[130.29615784 116.97117615]
[122.51153564 126.44065857]
[111.92163086 132.61521912]
[113.90693665 147.48326111]
[115.89224243 162.35130310]
[117.87755585 177.21932983]
[127.76095581 185.82804871]
[128.95310974 198.47372437]
[121.35268402 208.14016724]
[122.67838287 223.08146667]
[124.00408173 238.02278137]
[125.32978821 252.96408081]
[126.65548706 267.90536499]
[127.98118591 282.84667969]
[139.31114197 294.20501709]
[137.35186768 310.12796021]
[123.60635376 318.40084839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[9 59]
[10 58]
[11 57]
[12 56]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[28 37]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
