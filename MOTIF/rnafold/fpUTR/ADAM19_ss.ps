%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGCUGGGAGCCGGGUGGGGAGGCGCGGGGCGAGCCGGGGGGUUCCAGACGCGCCUCCACCGCCGGGCAGUGGGCAGGUAUGGCUGAGGGCGUGUGAGCGCCGAGCGCUAAGGGCCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[98.78496552 203.17613220]
[91.03342438 189.59498596]
[93.87604523 174.21792603]
[105.97062683 164.30555725]
[105.97062683 149.30555725]
[105.97062683 134.30555725]
[94.96813965 133.54716492]
[85.04158783 129.44157410]
[77.15102386 122.58158875]
[71.99651337 113.81549072]
[69.95744324 104.14521790]
[71.06886292 94.61315155]
[57.50902176 88.19982147]
[43.94918060 81.78649139]
[28.16584969 82.88059998]
[19.96865463 70.44454956]
[6.40881538 64.03122711]
[-7.15102386 57.61789703]
[-20.71086311 51.20457077]
[-34.27070236 44.79124451]
[-47.90822220 38.54480362]
[-61.62136841 32.46618271]
[-75.33451843 26.38756371]
[-89.04766083 20.30894279]
[-102.76081085 14.23032379]
[-116.47395325 8.15170383]
[-130.18710327 2.07308388]
[-143.90025330 -4.00553560]
[-157.61338806 -10.08415508]
[-170.03306580 -1.15672123]
[-185.15390015 0.34561926]
[-198.90512085 -5.88095903]
[-207.63496399 -18.07300377]
[-209.08030701 -32.89786530]
[-222.79344177 -38.97648621]
[-236.50659180 -45.05510712]
[-250.21974182 -51.13372421]
[-263.93289185 -57.21234512]
[-280.17306519 -54.93440247]
[-290.05123901 -68.02459717]
[-283.40563965 -83.01686096]
[-267.07266235 -84.48843384]
[-257.85427856 -70.92549133]
[-244.14111328 -64.84687042]
[-230.42797852 -58.76825333]
[-216.71482849 -52.68963242]
[-203.00167847 -46.61101151]
[-191.04655457 -55.49585342]
[-176.15023804 -57.21514893]
[-162.30189514 -51.20767975]
[-153.26051331 -38.99496841]
[-151.53477478 -23.79730225]
[-137.82162476 -17.71868134]
[-124.10848236 -11.64006233]
[-110.39533234 -5.56144285]
[-96.68218994 0.51717705]
[-82.96903992 6.59579659]
[-69.25589752 12.67441654]
[-55.54274750 18.75303650]
[-41.82960129 24.83165550]
[-34.36104965 24.66428375]
[-27.85737610 31.23140717]
[-14.29753685 37.64473343]
[-0.73769748 44.05805969]
[12.82214165 50.47138596]
[26.38198090 56.88471222]
[41.19541931 55.33188629]
[50.36250687 68.22665405]
[63.92234802 74.63998413]
[77.48218536 81.05330658]
[90.14933014 71.12720490]
[106.69944763 69.13314056]
[122.41401672 76.23961639]
[132.50189209 90.93381500]
[133.55514526 109.30440521]
[148.48292542 110.77466583]
[163.41069031 112.24491882]
[172.36524963 109.95567322]
[178.68519592 113.93883514]
[193.57238770 115.77499390]
[208.45957947 117.61115265]
[226.53698730 108.85012817]
[241.56925964 120.91339111]
[256.52862549 122.01686096]
[271.48797607 123.12033081]
[286.44732666 124.22379303]
[295.13342285 111.63416290]
[308.86425781 105.12558746]
[323.90930176 106.35553741]
[336.23620605 114.89389038]
[342.59140015 128.36523438]
[357.55075073 129.46870422]
[372.51010132 130.57217407]
[387.46948242 131.67564392]
[402.42883301 132.77909851]
[416.95223999 125.16317749]
[430.66296387 134.16030884]
[429.45657349 150.51501465]
[414.57409668 157.40298462]
[401.32534790 147.73846436]
[386.36599731 146.63499451]
[371.40664673 145.53152466]
[356.44729614 144.42805481]
[341.48791504 143.32458496]
[333.22485352 155.71762085]
[319.77853394 162.35482788]
[304.71585083 161.36389160]
[292.08865356 152.91104126]
[285.34387207 139.18315125]
[270.38449097 138.07968140]
[255.42514038 136.97621155]
[240.46578979 135.87274170]
[233.25761414 143.29586792]
[222.92565918 145.51654053]
[212.89303589 141.54853821]
[206.62342834 132.49835205]
[191.73623657 130.66218567]
[176.84904480 128.82601929]
[161.94042969 127.17269135]
[147.01266479 125.70243835]
[132.08488464 124.23217773]
[120.97062683 134.30555725]
[120.97062683 149.30555725]
[120.97062683 164.30555725]
[133.06520081 174.21792603]
[135.90782166 189.59498596]
[128.15628052 203.17613220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[6 122]
[12 70]
[13 69]
[14 68]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[75 121]
[76 120]
[77 119]
[79 118]
[80 117]
[81 116]
[83 112]
[84 111]
[85 110]
[86 109]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
