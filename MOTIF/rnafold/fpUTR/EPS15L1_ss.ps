%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCACGCGUGGCUGCAGCCCCGCCCCCGUUCCCCCGGCGCUCGGAGCCCGAGUCCGCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[93.45797729 143.11538696]
[82.55645752 132.81214905]
[81.71115875 117.83598328]
[91.38507843 106.37088776]
[76.52892303 104.29854584]
[61.67276382 102.22619629]
[50.88884354 113.22679901]
[35.87074280 115.73879242]
[22.41238213 109.00555420]
[15.58125305 95.79670715]
[0.72509646 93.72435760]
[-14.13105965 91.65201569]
[-28.86785126 97.40853882]
[-40.40411758 87.98708344]
[-55.26027298 85.91473389]
[-70.11643219 83.84239197]
[-85.10365295 90.49935150]
[-98.20132446 80.63105774]
[-95.93567657 64.38917542]
[-80.63742065 58.48194885]
[-68.04408264 68.98623657]
[-53.18792725 71.05857849]
[-38.33177185 73.13092041]
[-24.65759277 67.22617340]
[-12.05871487 76.79586029]
[2.79744172 78.86820221]
[17.65359879 80.94055176]
[27.83872604 70.10536957]
[42.62596130 67.31222534]
[56.38331223 73.83821869]
[63.74510956 87.37004089]
[78.60126495 89.44238281]
[93.45742035 91.51473236]
[108.45742035 91.51473236]
[123.31357574 89.44238281]
[138.16973877 87.37004089]
[153.02589417 85.29769897]
[165.62477112 75.72801208]
[179.29895020 81.63275909]
[194.15510559 79.56041718]
[209.01126099 77.48806763]
[217.40647888 73.07071686]
[224.59963989 75.67956543]
[239.53565979 74.29553986]
[254.47166443 72.91151428]
[269.40768433 71.52748871]
[284.34368896 70.14346313]
[299.27969360 68.75943756]
[314.49337769 61.27744293]
[325.89456177 73.82534027]
[316.99319458 88.25454712]
[300.66372681 83.69544983]
[285.72772217 85.07947540]
[270.79171753 86.46350098]
[255.85569763 87.84752655]
[240.91967773 89.23155212]
[225.98367310 90.61557770]
[211.08360291 92.34422302]
[196.22744751 94.41657257]
[181.37129211 96.48891449]
[169.83502197 105.91036987]
[155.09823608 100.15385437]
[140.24208069 102.22619629]
[125.38592529 104.29854584]
[110.52976990 106.37088776]
[120.20330811 117.83485413]
[119.35888672 132.81106567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[34 65]
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
