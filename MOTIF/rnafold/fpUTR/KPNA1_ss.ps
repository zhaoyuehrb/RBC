%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUGCGAACGCCGGCUGAGCUGAGUCUCGCUGCUCGGUGCGAGGCGGCGGAGAGCGAGGCCUGGUGAGCACCGCCGAGGCGCGGGCCAGCUCUUCGAGGUUGUGCGCGGGAGUGGCACGGCGGGCGGGCGAGCGAGGGGCUAACUUCAGCGGUGGCACCGGGAUCGGUUGCCUUGAGCCUGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[227.44772339 243.69107056]
[217.06378174 232.86639404]
[202.66957092 229.03807068]
[198.69979858 213.72299194]
[188.31585693 202.89831543]
[173.92164612 199.06999207]
[169.95188904 183.75491333]
[159.56793213 172.93023682]
[144.71759033 172.87850952]
[134.03259277 162.04866028]
[134.18753052 146.47259521]
[123.80358887 135.64791870]
[113.41963959 124.82324982]
[103.03569031 113.99857330]
[89.66319275 109.91593933]
[86.13962555 96.38537598]
[75.75568390 85.56069946]
[65.37173462 74.73602295]
[52.50405884 73.68473053]
[44.07757187 64.43912506]
[44.21319199 52.33147049]
[34.01059723 41.33569336]
[23.80800819 30.33991432]
[13.60541725 19.34413719]
[6.17851830 20.76262856]
[-1.21053553 19.51914787]
[-7.64584923 15.81593227]
[-12.34653091 10.15707302]
[-14.76136875 3.28037333]
[-14.63319588 -3.93867397]
[-12.02546215 -10.59830952]
[-21.28001976 -22.40310478]
[-30.53457642 -34.20789719]
[-39.78913498 -46.01269150]
[-49.04368973 -57.81748962]
[-58.29824829 -69.62228394]
[-67.55280304 -81.42707825]
[-84.78704834 -87.88775635]
[-86.59912109 -105.33483887]
[-96.04861450 -116.98417664]
[-105.49810791 -128.63351440]
[-114.94759369 -140.28285217]
[-124.39708710 -151.93218994]
[-139.09968567 -157.77548218]
[-141.10847473 -172.53401184]
[-150.55796814 -184.18334961]
[-160.00746155 -195.83268738]
[-175.48190308 -197.61572266]
[-184.89907837 -209.56442261]
[-183.10386658 -224.30595398]
[-192.55335999 -235.95529175]
[-202.00285339 -247.60464478]
[-211.45234680 -259.25396729]
[-220.90182495 -270.90332031]
[-230.35131836 -282.55264282]
[-239.80081177 -294.20199585]
[-249.25030518 -305.85134888]
[-261.98629761 -307.96722412]
[-269.61614990 -317.88043213]
[-268.47589111 -329.93502808]
[-277.73043823 -341.73983765]
[-286.98501587 -353.54461670]
[-296.23956299 -365.34942627]
[-305.49411011 -377.15420532]
[-309.96551514 -362.83615112]
[-323.88491821 -357.24597168]
[-337.01751709 -364.49404907]
[-339.70703125 -379.25094604]
[-329.97592163 -390.66607666]
[-314.97781372 -390.34521484]
[-323.22042847 -402.87753296]
[-337.26818848 -410.15567017]
[-337.79751587 -425.04089355]
[-346.04013062 -437.57321167]
[-361.39776611 -442.21249390]
[-367.21188354 -457.16494751]
[-359.02239990 -470.96029663]
[-343.11157227 -473.01596069]
[-331.68484497 -461.75497437]
[-333.50781250 -445.81582642]
[-325.26519775 -433.28350830]
[-311.80700684 -426.90176392]
[-310.68811035 -411.12014771]
[-302.44549561 -398.58782959]
[-293.68933105 -386.40878296]
[-284.43478394 -374.60397339]
[-275.18020630 -362.79919434]
[-265.92565918 -350.99438477]
[-256.67111206 -339.18960571]
[-240.06468201 -333.54061890]
[-237.60096741 -315.30084229]
[-228.15147400 -303.65148926]
[-218.70198059 -292.00213623]
[-209.25248718 -280.35281372]
[-199.80299377 -268.70346069]
[-190.35351562 -257.05413818]
[-180.90402222 -245.40478516]
[-171.45452881 -233.75544739]
[-156.65972900 -232.47108459]
[-146.91065979 -220.79161072]
[-148.35812378 -205.28218079]
[-138.90863037 -193.63284302]
[-129.45913696 -181.98350525]
[-115.43242645 -176.97344971]
[-112.74774933 -161.38168335]
[-103.29825592 -149.73234558]
[-93.84877014 -138.08300781]
[-84.39927673 -126.43367004]
[-74.94978333 -114.78432465]
[-62.94367981 -113.21360779]
[-54.97681427 -103.56912994]
[-55.74800873 -90.68163300]
[-46.49345398 -78.87683868]
[-37.23889542 -67.07204437]
[-27.98433876 -55.26725006]
[-18.72978210 -43.46245575]
[-9.47522449 -31.65766144]
[-0.22066790 -19.85286713]
[21.40674782 -13.82859230]
[24.60119438 9.14154530]
[34.80378723 20.13732338]
[45.00637817 31.13310242]
[55.20896912 42.12887955]
[72.22702026 46.37977982]
[76.19641113 64.35207367]
[86.58036041 75.17675018]
[96.96430969 86.00142670]
[110.33680725 90.08406067]
[113.86037445 103.61462402]
[124.24431610 114.43930054]
[134.62826538 125.26397705]
[145.01220703 136.08865356]
[160.58126831 136.58091736]
[170.95787048 147.70660400]
[170.39260864 162.54629517]
[180.77656555 173.37097168]
[195.91349792 177.97354126]
[199.14053345 192.51437378]
[209.52447510 203.33905029]
[224.66142273 207.94161987]
[227.88845825 222.48245239]
[238.27239990 233.30712891]
[253.14979553 229.75599670]
[267.71099854 234.09970093]
[278.07406616 245.07572937]
[281.52868652 259.66757202]
[277.24447632 273.93328857]
[287.62841797 284.75796509]
[298.01235962 295.58264160]
[308.39630127 306.40731812]
[318.86987305 317.14532471]
[329.43228149 327.79592896]
[346.10311890 324.98983765]
[361.01678467 332.59155273]
[368.39306641 347.43273926]
[365.50582886 363.58380127]
[376.24380493 374.05734253]
[386.98181152 384.53091431]
[397.71981812 395.00445557]
[408.54449463 405.38839722]
[419.45510864 415.68203735]
[430.36572266 425.97564697]
[446.43890381 429.22900391]
[451.40081787 444.85946655]
[440.14703369 456.78778076]
[424.25448608 452.74310303]
[420.07208252 436.88626099]
[409.16146851 426.59262085]
[398.25088501 416.29901123]
[391.21472168 413.99133301]
[387.24627686 405.74246216]
[376.50827026 395.26889038]
[365.77026367 384.79534912]
[355.03225708 374.32180786]
[342.12811279 377.78649902]
[329.09368896 374.39065552]
[319.36529541 364.91885376]
[315.56210327 351.77178955]
[318.78170776 338.35836792]
[308.21926880 327.70776367]
[301.26370239 325.16748047]
[297.57162476 316.79129028]
[287.18768311 305.96661377]
[276.80374146 295.14193726]
[266.41979980 284.31726074]
[251.98838806 288.00512695]
[237.55267334 283.94729614]
[227.01663208 273.13717651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[4 139]
[5 138]
[7 136]
[8 135]
[11 132]
[12 131]
[13 130]
[14 129]
[16 127]
[17 126]
[18 125]
[21 123]
[22 122]
[23 121]
[24 120]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[45 103]
[46 102]
[47 101]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[70 84]
[71 83]
[73 81]
[74 80]
[147 185]
[148 184]
[149 183]
[150 182]
[151 180]
[152 179]
[156 174]
[157 173]
[158 172]
[159 171]
[160 169]
[161 168]
[162 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
