%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAGUCUUCAAGCCUGGAGUUCCUGCUUGGUUCUUCCUGAGGACUGAGCACCUUCUAGACUACAUCCAGAUCUGUUUUCCCUGCAGAUUCGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[101.37175751 198.65208435]
[97.17436218 213.42630005]
[86.14102936 224.11091614]
[71.23967743 227.83184814]
[56.47869110 223.58815002]
[45.82870483 212.52137756]
[42.15450668 197.60844421]
[46.44444275 182.86082458]
[57.54454041 172.24559021]
[72.46892548 168.61814880]
[76.61344910 154.20208740]
[80.75798035 139.78602600]
[84.90250397 125.36995697]
[89.04702759 110.95389557]
[86.26381683 96.21437073]
[77.14782715 84.30224609]
[62.61649704 78.04515839]
[61.02622986 63.23569489]
[51.91023636 51.32357025]
[42.79424667 39.41144562]
[33.67825699 27.49932098]
[24.56226540 15.58719540]
[15.44627571 3.67507100]
[3.37036586 4.42356491]
[-7.42114925 -0.77427125]
[-14.22488213 -10.48505211]
[-15.40090370 -22.16204262]
[-10.76667690 -32.81255341]
[-19.12446213 -45.26837540]
[-27.48224449 -57.72419357]
[-35.84003067 -70.18001556]
[-44.19781494 -82.63583374]
[-52.55559921 -95.09165192]
[-60.91338348 -107.54747009]
[-69.27116394 -120.00329590]
[-77.62895203 -132.45910645]
[-85.98673248 -144.91493225]
[-94.34452057 -157.37075806]
[-102.70230103 -169.82656860]
[-116.54844666 -179.61026001]
[-110.98010254 -195.62368774]
[-94.05101013 -194.70591736]
[-90.24648285 -178.18435669]
[-81.88869476 -165.72853088]
[-73.53091431 -153.27272034]
[-65.17313385 -140.81689453]
[-56.81534576 -128.36108398]
[-48.45756149 -115.90525818]
[-40.09977722 -103.44944000]
[-31.74199295 -90.99361420]
[-23.38421059 -78.53779602]
[-15.02642536 -66.08197784]
[-6.66864157 -53.62615967]
[1.68914247 -41.17033768]
[19.71670914 -38.85705948]
[30.65978813 -23.95321655]
[27.35840034 -5.44091988]
[36.47439194 6.47120523]
[45.59038162 18.38332939]
[54.70637131 30.29545403]
[63.82236099 42.20758057]
[72.93835449 54.11970520]
[86.81764221 59.52474976]
[89.05995178 75.18624878]
[98.17594147 87.09838104]
[92.51947021 73.20577240]
[95.33934784 58.47321701]
[105.72626495 47.65138626]
[120.33083344 44.22991180]
[134.44364929 49.31208801]
[143.51385498 61.25910950]
[144.61666870 76.21851349]
[137.39506531 89.36787415]
[150.89509583 95.90614319]
[164.39514160 102.44440460]
[177.89517212 108.98267365]
[191.39521790 115.52094269]
[204.89526367 122.05920410]
[218.39529419 128.59747314]
[232.58830261 122.03296661]
[247.66673279 126.17721558]
[256.51101685 139.07342529]
[254.94517517 154.63241577]
[243.70852661 165.50770569]
[228.10667419 166.56430054]
[215.50634766 157.30331421]
[211.85702515 142.09751892]
[198.35699463 135.55924988]
[184.85694885 129.02098083]
[171.35691833 122.48271179]
[157.85687256 115.94445038]
[144.35682678 109.40618134]
[130.85679626 102.86791229]
[124.00836945 105.92554474]
[110.31151581 112.04079437]
[103.46309662 115.09841919]
[99.31856537 129.51448059]
[95.17404175 143.93055725]
[91.02951813 158.34661865]
[86.88499451 172.76268005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[15 65]
[16 64]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
