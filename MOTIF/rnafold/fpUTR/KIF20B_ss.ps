%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGGUGCCCUGGCCGCCAUUGUUUGAAUUUGAAAACGGUAACAUCGCAGUGCUGCUCGCGGGUCUGGCUAGUCAGGCGAAGUUUGCAGA\
) } def
/len { sequence length } bind def

/coor [
[116.53266907 143.31008911]
[101.65567017 141.39309692]
[93.03685760 129.11645508]
[96.28728485 114.47328186]
[85.77063751 125.16907501]
[75.25399017 135.86486816]
[64.73733521 146.56066895]
[54.22068787 157.25646973]
[54.60476303 173.05609131]
[43.64398193 184.44190979]
[27.84118271 184.65892029]
[16.57188416 173.57836914]
[16.52196312 157.77415466]
[27.72103500 146.62265015]
[43.52489090 146.73982239]
[54.04153824 136.04402161]
[64.55818939 125.34822083]
[75.07484436 114.65242767]
[85.59149170 103.95662689]
[86.60413361 88.99085236]
[77.62419128 76.97583008]
[68.64424896 64.96081543]
[59.66430664 52.94580078]
[50.68436432 40.93078232]
[41.70442200 28.91576767]
[24.67546654 22.16621017]
[23.06162643 4.78079605]
[13.68100929 -6.92407560]
[-1.71216655 -6.32715321]
[-14.35742950 -14.80952930]
[-19.52215958 -28.94422340]
[-15.42253494 -43.23866653]
[-24.80315208 -54.94353867]
[-34.18376923 -66.64840698]
[-49.65186310 -72.09543610]
[-52.40226746 -88.26229858]
[-39.60560608 -98.51790619]
[-24.42598534 -92.31217194]
[-22.47889709 -76.02902222]
[-13.09827995 -64.32415771]
[-3.71766281 -52.61928177]
[11.12652969 -53.50695419]
[23.79690742 -45.38750076]
[29.32131386 -31.19826698]
[25.38588142 -16.30469322]
[34.76649857 -4.59982061]
[46.87458038 -2.90943813]
[54.77210617 6.94568014]
[53.71943665 19.93582535]
[62.69937897 31.95084000]
[71.67932129 43.96585846]
[80.65926361 55.98087311]
[89.63921356 67.99588776]
[98.61915588 80.01091003]
[121.13332367 93.46129608]
[135.77317810 96.72850037]
[150.41304016 99.99570465]
[165.05288696 103.26290894]
[178.29170227 95.05487823]
[193.09205627 98.57683563]
[200.83557129 111.24859619]
[215.47541809 114.51580048]
[229.95343018 104.87546539]
[246.61938477 108.51600647]
[255.40646362 122.74547577]
[270.14831543 125.51636505]
[284.89016724 128.28726196]
[299.63201904 131.05815125]
[314.37387085 133.82904053]
[327.27816772 124.70462799]
[342.84045410 127.45970917]
[351.82791138 140.45974731]
[348.90844727 155.99205017]
[335.81411743 164.84156799]
[320.31356812 161.75805664]
[311.60296631 148.57089233]
[296.86111450 145.80000305]
[282.11926270 143.02911377]
[267.37744141 140.25820923]
[252.63557434 137.48731995]
[243.01251221 146.23471069]
[229.90536499 147.80158997]
[218.14767456 141.38145447]
[212.20822144 129.15565491]
[197.56835938 125.88845062]
[185.17196655 134.06555176]
[170.27853394 130.96069336]
[161.78569031 117.90276337]
[147.14582825 114.63555908]
[132.50598145 111.36836243]
[117.86611938 108.10115814]
[128.54980469 118.63011932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[27 46]
[28 45]
[32 41]
[33 40]
[34 39]
[55 91]
[56 90]
[57 89]
[58 88]
[61 85]
[62 84]
[65 80]
[66 79]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
