%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAACCCCAGCGCGAGUGCCAGAGCCCAGCCGGCGCGGAGCGGGAGCGGUGCAGGCUGAGGUCUCCGAGCGGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[21.70244789 285.16949463]
[13.95195675 298.01199341]
[20.84609604 311.81323242]
[19.16158104 327.14834595]
[9.43593693 339.12396240]
[-5.22742128 343.91870117]
[-20.14946747 340.00256348]
[-30.56863213 328.62521362]
[-33.16019821 313.41705322]
[-27.09720421 299.23101807]
[-14.31433105 290.59381104]
[1.10945308 290.26150513]
[8.85994339 277.41897583]
[16.10663223 264.28561401]
[22.83862114 250.88111877]
[29.57060814 237.47663879]
[36.30259705 224.07214355]
[43.03458405 210.66766357]
[49.76657104 197.26316833]
[56.23736191 183.73065186]
[62.44452286 170.07521057]
[55.84761810 154.73475647]
[62.39918137 139.01213074]
[78.55919647 132.65010071]
[84.23219299 118.76424408]
[89.90519714 104.87837982]
[95.30786133 90.88512421]
[100.43816376 76.78973389]
[105.29417419 62.59751511]
[109.87406158 48.31379700]
[114.45394897 34.03007889]
[119.03384399 19.74635887]
[123.61373138 5.46264124]
[120.45945740 -10.04094219]
[131.71325684 -19.79806137]
[136.29313660 -34.08177948]
[140.87303162 -48.36549759]
[145.45292664 -62.64921570]
[139.78436279 -72.31473541]
[140.50888062 -83.27306366]
[147.12669373 -91.75650787]
[157.15507507 -94.98909760]
[162.82807922 -108.87496185]
[160.07385254 -125.04116821]
[172.86810303 -135.29978943]
[188.04917908 -129.09764099]
[190.00010681 -112.81494904]
[176.71392822 -103.20196533]
[171.04093933 -89.31610107]
[175.28837585 -70.61435699]
[159.73663330 -58.06932449]
[155.15675354 -43.78560638]
[150.57685852 -29.50189018]
[145.99696350 -15.21817112]
[149.47883606 -0.73625457]
[137.89744568 10.04253101]
[133.31756592 24.32625008]
[128.73767090 38.60996628]
[124.15778351 52.89368439]
[119.57788849 67.17740631]
[120.56037140 74.70277405]
[114.53355408 81.92003632]
[109.40325165 96.01542664]
[109.81355286 104.29482269]
[103.79105377 110.55137634]
[98.11805725 124.43724060]
[92.44506073 138.32310486]
[99.10417938 150.20953369]
[97.63779449 163.55769348]
[88.81845093 173.42239380]
[76.09996796 176.28237915]
[69.89280701 189.93782043]
[69.14187622 199.31051636]
[63.17106247 203.99516296]
[56.43907166 217.39964294]
[49.70708466 230.80413818]
[42.97509766 244.20861816]
[36.24311066 257.61312866]
[29.51112175 271.01760864]
[29.51580811 278.05752563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 72]
[21 71]
[24 67]
[25 66]
[26 65]
[27 63]
[28 62]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
