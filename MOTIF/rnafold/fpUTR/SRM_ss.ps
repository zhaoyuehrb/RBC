%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGGCGGGCGGAGCUGGUCCCGUUGUGCUGCGGCGCCGCGCGGCCUGCAGUCCCGGGCCCGCGCCCCGCGCCGCCCGCCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[107.24593353 372.11749268]
[106.73381805 357.12622070]
[106.22170258 342.13497925]
[105.70958710 327.14373779]
[105.19746399 312.15246582]
[104.68534851 297.16122437]
[104.17323303 282.16995239]
[103.66111755 267.17871094]
[102.89312744 252.19837952]
[101.86949158 237.23333740]
[100.84585571 222.26831055]
[99.82221985 207.30328369]
[98.79858398 192.33824158]
[97.77494812 177.37321472]
[96.75131226 162.40818787]
[88.16350555 150.23860168]
[94.94101715 135.94258118]
[93.91738129 120.97755432]
[76.24533081 107.56490326]
[78.07263184 82.55763245]
[64.99771881 75.20597839]
[51.92281342 67.85432434]
[36.10161972 67.83502197]
[28.79989052 54.85295486]
[15.72498322 47.50130081]
[2.65007567 40.14964676]
[-10.42483139 32.79799271]
[-25.57352066 37.30274200]
[-39.43061829 29.70298004]
[-43.77495575 14.50751019]
[-36.02910995 0.73153639]
[-20.78855896 -3.45190096]
[-7.09524918 4.43915749]
[-3.07317805 19.72308731]
[10.00172901 27.07473946]
[23.07663536 34.42639160]
[36.15154266 41.77804565]
[51.03753281 41.27151489]
[59.27446747 54.77941895]
[72.34937286 62.13107300]
[85.42427826 69.48272705]
[100.05629730 66.18058777]
[108.70650482 53.92604065]
[117.35670471 41.67149353]
[126.00691223 29.41694450]
[134.65711975 17.16239548]
[143.30732727 4.90784788]
[151.74703979 -7.49259949]
[159.97381592 -20.03533173]
[168.20060730 -32.57806396]
[176.42738342 -45.12079620]
[172.96691895 -60.54158401]
[181.49459839 -73.84775543]
[196.95111084 -77.14498138]
[210.16638184 -68.47708893]
[213.30001831 -52.98658371]
[204.49288940 -39.86370087]
[188.97010803 -36.89401627]
[180.74333191 -24.35128593]
[172.51655579 -11.80855370]
[164.28977966 0.73417842]
[163.23202515 8.21011543]
[155.56187439 13.55805302]
[146.91166687 25.81260109]
[138.26145935 38.06715012]
[129.61125183 50.32169724]
[120.96105194 62.57624817]
[112.31084442 74.83079529]
[122.58502197 86.18656921]
[124.92607880 100.44994354]
[119.49685669 112.91400909]
[108.88240814 119.95391846]
[109.90604401 134.91894531]
[118.56707001 148.15893555]
[111.71634674 161.38455200]
[112.73998260 176.34957886]
[113.76361847 191.31460571]
[114.78725433 206.27964783]
[115.81089020 221.24467468]
[116.83452606 236.20970154]
[117.85816193 251.17474365]
[121.63298798 259.72940063]
[118.65237427 266.66659546]
[119.16448975 281.65783691]
[119.67660522 296.64910889]
[120.18872070 311.64035034]
[120.70083618 326.63159180]
[121.21295929 341.62286377]
[121.72507477 356.61410522]
[122.23719025 371.60537720]
[125.08422852 390.77682495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 81]
[10 80]
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[17 73]
[18 72]
[20 41]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[27 34]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
