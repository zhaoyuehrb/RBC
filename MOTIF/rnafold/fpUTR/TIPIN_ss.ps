%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUUCCCGAGUAUCGCGAGAAGCGCGCUUAGUCUGCACGCCGAGGUCCGCGCUGUGUCCCGUGUUUUCUGCGUGAGAGGAAAAG\
) } def
/len { sequence length } bind def

/coor [
[105.94541168 213.55125427]
[93.75008392 203.95678711]
[89.55574036 189.01733398]
[94.97519684 174.47741699]
[107.92455292 165.92793274]
[108.46608734 150.93771362]
[109.00762939 135.94749451]
[109.54916382 120.95726776]
[93.60917664 119.62758636]
[84.10253906 108.96973419]
[69.16362000 110.32202911]
[54.22470474 111.67432404]
[39.28578568 113.02661896]
[30.31385803 122.50226593]
[17.68797493 123.20271301]
[8.34057140 115.29849243]
[-6.63742971 116.11057281]
[-21.61543083 116.92266083]
[-33.35594940 127.85607910]
[-49.20228577 125.35142517]
[-56.99847794 111.33005524]
[-50.76396179 96.54795837]
[-35.28132248 92.34469604]
[-22.42751503 101.94465637]
[-7.44951296 101.13257599]
[7.52848816 100.32048798]
[21.54617882 89.92945862]
[37.93348694 98.08769989]
[52.87240601 96.73540497]
[67.81132507 95.38311005]
[82.75024414 94.03081512]
[93.05360413 81.40972900]
[110.69789124 81.42200470]
[122.70497131 96.14279175]
[134.80830383 87.28224945]
[146.91165161 78.42170715]
[152.14054871 70.64327240]
[159.61572266 69.46912384]
[172.03105164 61.05131912]
[184.44638062 52.63351440]
[196.86172485 44.21570587]
[209.27705383 35.79790115]
[216.35723877 21.64934540]
[231.23353577 20.91104317]
[243.64886475 12.49323654]
[256.06420898 4.07543087]
[268.47952271 -4.34237528]
[271.74029541 -16.97767448]
[282.44760132 -23.70501137]
[294.45361328 -21.31630707]
[307.16476440 -29.28040123]
[319.87591553 -37.24449539]
[332.58706665 -45.20859146]
[333.51644897 -60.69780731]
[343.39865112 -72.66114807]
[358.43377686 -76.49846649]
[372.84048462 -70.73423767]
[381.07910156 -57.58491516]
[379.98175049 -42.10669327]
[369.97033691 -30.25125694]
[354.89447021 -26.57726669]
[340.55114746 -32.49744797]
[327.83999634 -24.53335190]
[315.12887573 -16.56925583]
[302.41772461 -8.60516167]
[295.18569946 7.27460194]
[276.89733887 8.07295990]
[264.48199463 16.49076653]
[252.06666565 24.90857124]
[239.65133667 33.32637787]
[233.45918274 46.87283707]
[217.69487000 48.21323776]
[205.27952576 56.63104248]
[192.86419678 65.04885101]
[180.44885254 73.46665192]
[168.03352356 81.88446045]
[155.77218628 90.52503967]
[143.66885376 99.38558197]
[131.56550598 108.24612427]
[124.53938293 121.49880981]
[123.99784851 136.48902893]
[123.45631409 151.47924805]
[122.91477966 166.46946716]
[135.21347046 175.93107605]
[139.56962585 190.82414246]
[134.30822754 205.42199707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 83]
[6 82]
[7 81]
[8 80]
[10 31]
[11 30]
[12 29]
[13 28]
[16 26]
[17 25]
[18 24]
[34 79]
[35 78]
[36 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[44 70]
[45 69]
[46 68]
[47 67]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
