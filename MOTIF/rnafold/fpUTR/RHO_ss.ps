%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCAUCCAGCUGGAGCCCUGAGUGGCUGAGCUCAGGCCUUCGCAGCAUUCUUGGGUGGGAGCAGCCACGGGUCAGCCACAAGGGCCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[10.46390629 458.58175659]
[4.10881519 472.42129517]
[-7.33018208 482.47460938]
[-21.87121010 486.99990845]
[-36.99494934 485.21316528]
[-50.08111572 477.42395020]
[-58.86245728 464.98175049]
[-61.81755066 450.04229736]
[-58.43441010 435.19393921]
[-49.29918289 423.00921631]
[-35.99460220 415.59921265]
[-20.82576942 414.24777222]
[-16.00417709 400.04382324]
[-11.18258476 385.83987427]
[-6.36099339 371.63592529]
[-13.15852261 358.43252563]
[-8.47108364 343.95901489]
[5.42392254 336.91867065]
[10.24551487 322.71472168]
[15.06710625 308.51077271]
[19.88869858 294.30682373]
[24.71029091 280.10287476]
[19.62357712 268.99374390]
[23.67460251 257.03973389]
[35.17936325 250.93260193]
[40.46311569 236.89401245]
[45.74686432 222.85542297]
[51.03061676 208.81683350]
[56.31436920 194.77824402]
[61.59811783 180.73965454]
[66.88186646 166.70106506]
[72.16561890 152.66247559]
[69.40741730 138.02548218]
[81.50991058 127.83528900]
[86.79366302 113.79669952]
[80.90949249 100.55574799]
[86.01342773 86.99491882]
[99.16774750 80.91954803]
[104.45149994 66.88095856]
[109.73525238 52.84237289]
[106.25024414 34.85359573]
[120.03896332 24.13426781]
[124.86054993 9.93031597]
[129.68214417 -4.27363586]
[126.79138184 -19.82850838]
[138.20910645 -29.39327240]
[143.03070068 -43.59722519]
[138.95898438 -61.46234131]
[152.38958740 -72.62708282]
[156.74386597 -86.98118591]
[152.49508667 -102.82038116]
[164.27763367 -114.22666931]
[179.97064209 -109.46624756]
[183.43048096 -93.43622589]
[171.09797668 -82.62692261]
[166.74369812 -68.27281189]
[172.19116211 -57.33606720]
[168.53343201 -45.25591660]
[157.23464966 -38.77563095]
[152.41307068 -24.57168007]
[155.64869690 -10.03276920]
[143.88609314 0.54795611]
[139.06449890 14.75190830]
[134.24290466 28.95586014]
[139.32962036 40.06499100]
[135.27859497 52.01898956]
[123.77383423 58.12612152]
[118.49008942 72.16471100]
[113.20633698 86.20330048]
[119.09050751 99.44425201]
[113.98657227 113.00508118]
[100.83225250 119.08045197]
[95.54850006 133.11903381]
[97.92877197 148.76016235]
[86.20420837 157.94622803]
[80.92045593 171.98481750]
[75.63670349 186.02340698]
[70.35295868 200.06199646]
[65.06920624 214.10058594]
[59.78545380 228.13917542]
[54.50170517 242.17776489]
[49.21795273 256.21636963]
[52.70295334 274.20513916]
[38.91424179 284.92446899]
[34.09265137 299.12841797]
[29.27105904 313.33236694]
[24.44946671 327.53631592]
[19.62787437 341.74026489]
[26.36562920 355.78448486]
[21.27350807 370.12063599]
[7.84295893 376.45751953]
[3.02136683 390.66146851]
[-1.80022514 404.86541748]
[-6.62181711 419.06936646]
[4.58972120 429.37573242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 94]
[13 93]
[14 92]
[15 91]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[25 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[34 73]
[35 72]
[38 69]
[39 68]
[40 67]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
