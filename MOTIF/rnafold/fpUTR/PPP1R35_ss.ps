%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGGCGGGGGAAAGGAGGCGGCAGCCAGGCUGUGUCCCCUGACCGUUGGAGCGUCUGCGACCCCCGCAUCCCCGCACCCUCAAGGCACCUCCAAAG\
) } def
/len { sequence length } bind def

/coor [
[160.61914062 272.04641724]
[171.49902344 261.51516724]
[165.11233521 247.94274902]
[158.72564697 234.37034607]
[152.33895874 220.79794312]
[145.95227051 207.22554016]
[139.35317993 193.75512695]
[132.54331970 180.39002991]
[125.73345947 167.02493286]
[118.92359924 153.65983582]
[112.11374664 140.29473877]
[105.30388641 126.92963409]
[87.32291412 127.36983490]
[71.28573608 116.01695251]
[64.65792847 95.75973511]
[71.90592194 73.95176697]
[57.50151443 69.76689911]
[43.09711075 65.58203125]
[33.79695129 66.18611908]
[28.30982590 61.03287125]
[14.04397774 56.39761734]
[0.08914471 63.31862640]
[-14.31242275 58.41459656]
[-20.82455063 45.06814575]
[-35.09039688 40.43288803]
[-49.35624695 35.79763412]
[-63.62209320 31.16238022]
[-77.88793945 26.52712440]
[-94.82027435 27.38297462]
[-100.33000946 11.34928799]
[-86.44817352 1.61630547]
[-73.25268555 12.26127720]
[-58.98683929 16.89653206]
[-44.72098923 21.53178787]
[-30.45514297 26.16704178]
[-16.18929482 30.80229759]
[-3.07602549 23.83252335]
[11.45760345 28.33010864]
[18.67923164 42.13176727]
[32.94507980 46.76702499]
[47.28197479 51.17762756]
[61.68638229 55.36249542]
[76.09078979 59.54735947]
[88.36302948 50.92228317]
[89.30488586 35.95188141]
[90.24674988 20.98148155]
[87.62844086 12.03707981]
[91.46060181 5.55795383]
[92.87223053 -9.37547588]
[85.55731964 -24.05281067]
[94.83518982 -37.57513428]
[111.16156006 -36.03183746]
[117.74125671 -21.01053238]
[107.80565643 -7.96385098]
[106.39403534 6.96957827]
[105.21714783 21.92333794]
[104.27529144 36.89373779]
[103.33343506 51.86413956]
[116.47803497 59.09044647]
[128.61328125 50.27366638]
[140.74855042 41.45688629]
[152.88380432 32.64011002]
[156.80355835 17.08327484]
[171.46929932 10.57979107]
[185.63073730 18.11857224]
[188.42442322 33.91651154]
[177.70727539 45.85478210]
[161.70057678 44.77536392]
[149.56532288 53.59214401]
[137.43006897 62.40892029]
[125.29481506 71.22570038]
[132.87637329 99.55812836]
[118.66898346 120.11978149]
[125.47884369 133.48487854]
[132.28869629 146.84997559]
[139.09855652 160.21507263]
[145.90841675 173.58016968]
[152.71827698 186.94526672]
[159.52502441 193.31126404]
[159.52467346 200.83885193]
[165.91136169 214.41125488]
[172.29804993 227.98365784]
[178.68473816 241.55606079]
[185.07142639 255.12847900]
[200.12098694 253.45825195]
[214.89688110 256.76754761]
[227.79635620 264.69738770]
[237.42016602 276.38760376]
[242.72438049 290.57012939]
[243.13365173 305.70654297]
[238.60357666 320.15496826]
[229.62554932 332.34814453]
[217.17343140 340.96347046]
[202.59794617 345.06637573]
[187.48011780 344.21182251]
[173.45983887 338.49255371]
[162.05790710 328.52886963]
[154.51110840 315.40164185]
[151.63809204 300.53472900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[16 43]
[17 42]
[18 41]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[44 58]
[45 57]
[46 56]
[48 55]
[49 54]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
