%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAAGUCACUUCUCACACGCCUUUCUUAUUGGAUACCGGCUUUUCAUGGGGCCGAGCGCCGCUGGGUAGGCGGAAGUAGCCGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[75.23741913 354.58456421]
[85.39085388 342.47329712]
[83.84008789 327.55364990]
[82.28932953 312.63403320]
[80.73857117 297.71441650]
[70.99541473 293.45748901]
[63.93082809 285.40194702]
[60.93648529 275.02905273]
[62.64694977 264.28598022]
[68.80671692 255.22033691]
[78.30564880 249.58985901]
[78.30564880 234.58985901]
[78.30564880 219.58985901]
[78.30564880 204.58985901]
[78.30564880 189.58985901]
[76.40370178 187.90306091]
[75.03321075 185.37701416]
[74.50415039 182.20182800]
[75.05582428 178.67105103]
[76.82471466 175.15579224]
[79.82157135 172.06930542]
[82.39795685 157.29222107]
[84.97434235 142.51513672]
[87.55072784 127.73805237]
[90.12711334 112.96096802]
[83.97034454 102.91730499]
[86.19377136 91.34848785]
[95.63500977 84.30262756]
[98.71990967 69.62327576]
[101.80480957 54.94392395]
[104.88970947 40.26457214]
[100.15594482 25.16814613]
[110.34533691 14.30418968]
[113.43023682 -0.37516281]
[116.51513672 -15.05451584]
[105.19374847 -25.33913803]
[100.57080841 -39.81412125]
[103.79247284 -54.56157303]
[113.89568329 -65.64223480]
[128.09309387 -70.14769745]
[131.17799377 -84.82704926]
[134.26289368 -99.50640869]
[137.34779358 -114.18576050]
[140.43267822 -128.86511230]
[143.51757812 -143.54446411]
[146.60247803 -158.22381592]
[140.98754883 -173.63175964]
[151.72966003 -186.02284241]
[167.77824402 -182.65019226]
[172.62390137 -166.98330688]
[161.28182983 -155.13891602]
[158.19692993 -140.45956421]
[155.11204529 -125.78021240]
[152.02714539 -111.10086060]
[148.94224548 -96.42150879]
[145.85734558 -81.74215698]
[142.77244568 -67.06280518]
[153.95529175 -57.22361755]
[158.74359131 -43.01347351]
[155.75646973 -28.21673393]
[145.69801331 -16.82707596]
[131.19448853 -11.96961689]
[128.10958862 2.70973563]
[125.02468872 17.38908768]
[129.97911072 31.43554878]
[119.56906128 43.34946823]
[116.48416138 58.02882385]
[113.39926147 72.70817566]
[110.31436157 87.38752747]
[116.00013733 103.07509613]
[104.90419769 115.53735352]
[102.32781219 130.31443787]
[99.75142670 145.09152222]
[97.17504120 159.86860657]
[94.59865570 174.64569092]
[93.30564880 189.58985901]
[93.30564880 204.58985901]
[93.30564880 219.58985901]
[93.30564880 234.58985901]
[93.30564880 249.58985901]
[108.24459076 262.71121216]
[109.05291748 282.28149414]
[95.65819550 296.16366577]
[97.20895386 311.08328247]
[98.75971222 326.00289917]
[100.31047058 340.92251587]
[112.73767090 350.68676758]
[114.53768158 366.38821411]
[104.64260101 378.71148682]
[88.92299652 380.34539795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[28 69]
[29 68]
[30 67]
[31 66]
[33 64]
[34 63]
[35 62]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
