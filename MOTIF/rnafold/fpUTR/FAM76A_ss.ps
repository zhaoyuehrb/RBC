%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCAGCCAGCAGCCUGCAGCCGCCGCCGGGUUGUGCCUCAGACUGUCAGAUAAAUCGGCGGGCCGGGCCGGCGGGUCGGUGAGCGCGGCCCGGGCCGGAC\
) } def
/len { sequence length } bind def

/coor [
[78.03894043 401.16546631]
[86.27398682 386.98391724]
[85.81654358 371.99090576]
[85.35910797 356.99789429]
[82.42829895 353.03045654]
[82.07730103 347.14093018]
[85.35910797 341.08300781]
[85.81654358 326.08996582]
[86.27398682 311.09695435]
[74.93576050 303.87173462]
[68.63621521 291.87121582]
[69.13668060 278.21807861]
[76.41287231 266.52618408]
[88.63278198 259.94396973]
[89.54724121 244.97187805]
[90.46170044 229.99977112]
[91.14773560 215.01547241]
[91.60517883 200.02244568]
[92.06262207 185.02943420]
[82.90462494 170.14544678]
[92.50000000 154.52207947]
[92.50000000 139.52207947]
[92.50000000 124.52207947]
[92.50000000 109.52207947]
[92.04255676 94.52905273]
[91.12809753 79.55695343]
[90.21363831 64.58485413]
[89.29917908 49.61275482]
[88.38471985 34.64065552]
[87.47026062 19.66855812]
[86.55580139 4.69645834]
[77.99157715 -8.60634899]
[84.93858337 -21.78164482]
[84.02412415 -36.75374222]
[83.10966492 -51.72584152]
[79.40972900 -60.26848221]
[82.40270996 -67.16716766]
[81.94526672 -82.16018677]
[81.48782349 -97.15321350]
[81.03038025 -112.14623260]
[69.25646210 -102.85242462]
[54.32910919 -104.32692719]
[44.60105515 -115.74467468]
[45.51571274 -130.71676636]
[56.56128311 -140.86543274]
[71.55711365 -140.51190186]
[82.11195374 -129.85449219]
[84.39067078 -144.68038940]
[86.66938019 -159.50630188]
[84.86354065 -168.63893127]
[89.25030518 -174.74679565]
[91.98008728 -189.49632263]
[85.99498749 -204.76428223]
[96.43497467 -217.41098022]
[112.56027222 -214.42655945]
[117.78256989 -198.88116455]
[106.72960663 -186.76654053]
[103.99982452 -172.01701355]
[101.49528503 -157.22758484]
[99.21657562 -142.40168762]
[96.93786621 -127.57577515]
[96.02340698 -112.60367584]
[96.48084259 -97.61065674]
[96.93828583 -82.61763000]
[97.39572906 -67.62460327]
[98.08176422 -52.64030457]
[98.99622345 -37.66820145]
[99.91068268 -22.69610405]
[108.40949249 -10.46420193]
[101.52790070 3.78199840]
[102.44235992 18.75409889]
[103.35681915 33.72619629]
[104.27127838 48.69829559]
[105.18573761 63.67039490]
[106.10019684 78.64249420]
[107.01465607 93.61459351]
[110.17548370 98.03140259]
[110.53663635 103.92116547]
[107.50000000 109.52207947]
[107.50000000 124.52207947]
[107.50000000 139.52207947]
[107.50000000 154.52207947]
[116.10818481 164.27627563]
[115.70267487 176.87603760]
[107.05564117 185.48686218]
[106.59819794 200.47988892]
[106.14075470 215.47291565]
[109.04462433 224.31790161]
[105.43379974 230.91423035]
[104.51934052 245.88633728]
[103.60488129 260.85842896]
[116.76033020 271.35928345]
[121.08304596 287.45635986]
[115.07791901 302.82727051]
[101.26701355 311.55438232]
[100.80957031 326.54742432]
[100.35212708 341.54043579]
[100.35212708 356.54043579]
[100.80957031 371.53344727]
[101.26701355 386.52648926]
[110.35131073 400.17959595]
[102.82805634 414.75125122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[7 97]
[8 96]
[9 95]
[14 91]
[15 90]
[16 89]
[17 87]
[18 86]
[19 85]
[21 82]
[22 81]
[23 80]
[24 79]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[33 68]
[34 67]
[35 66]
[37 65]
[38 64]
[39 63]
[40 62]
[47 61]
[48 60]
[49 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
