%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGAGCCGGGCUUGCCCGGGCAUGUGGGAGCUGCCGGCUUUCCGGACGCCACGUGCAGACCGGAAGAGACACGCGGGGCUUCAGGCUGCUGCCCCAUUGGAAGAUUACUCCCCAGGCUUCCCUUGCCCCAAGCAGUGAGCUGACUGGA\
) } def
/len { sequence length } bind def

/coor [
[152.46842957 283.89794922]
[144.96716309 269.84091187]
[143.41793823 253.94447327]
[148.08631897 238.63003540]
[158.28855896 226.24160767]
[151.14935303 213.04949951]
[144.01014709 199.85739136]
[136.87092590 186.66528320]
[129.73171997 173.47319031]
[122.59250641 160.28108215]
[115.31735229 147.16345215]
[107.90702820 134.12170410]
[100.49670410 121.07996368]
[77.02481842 108.44537354]
[62.28358459 105.67120361]
[47.54234695 102.89703369]
[34.58639526 111.54463959]
[19.67620468 108.52124023]
[11.51188278 96.11643219]
[-3.22935200 93.34226227]
[-17.97058678 90.56809235]
[-32.71182251 87.79393005]
[-47.53196335 85.47803497]
[-62.41677475 83.62265015]
[-77.30158234 81.76725769]
[-92.18639374 79.91186523]
[-107.07119751 78.05648041]
[-121.95600891 76.20108795]
[-136.84082031 74.34570312]
[-151.72563171 72.49031067]
[-158.04776001 82.18125916]
[-167.50485229 88.75830841]
[-178.68968201 91.28992462]
[-189.95553589 89.44309235]
[-199.65863037 83.52648926]
[-206.39796448 74.43975067]
[-209.21755981 63.53680801]
[-223.95880127 60.76264191]
[-238.70004272 57.98847580]
[-253.44126892 55.21430969]
[-268.72717285 61.15342331]
[-281.34237671 50.67542267]
[-278.30944824 34.55917740]
[-262.74841309 29.38369942]
[-250.66709900 40.47307587]
[-235.92587280 43.24724197]
[-221.18463135 46.02140808]
[-206.44340515 48.79557419]
[-193.69692993 35.21461487]
[-175.20649719 31.96075821]
[-158.32382202 40.50897598]
[-149.87023926 57.60550308]
[-134.98542786 59.46089172]
[-120.10061646 61.31628036]
[-105.21581268 63.17166901]
[-90.33100128 65.02706146]
[-75.44618988 66.88244629]
[-60.56138229 68.73783875]
[-45.67657471 70.59323120]
[-42.64852905 68.67276001]
[-38.52267075 68.16009521]
[-33.98816681 69.56262970]
[-29.93765450 73.05269623]
[-15.19641972 75.82685852]
[-0.45518506 78.60102844]
[14.28604984 81.37519836]
[26.40110970 72.78677368]
[41.39033508 75.39018250]
[50.31651688 88.15579987]
[65.05774689 90.92996979]
[79.79898834 93.70413971]
[66.57994080 86.61492920]
[61.52720261 72.49154663]
[67.24950409 58.62593460]
[80.79241180 52.17692947]
[95.16368866 56.47417450]
[102.94342041 69.29898834]
[100.11382294 84.03163147]
[107.25303650 70.83952332]
[114.39224243 57.64741898]
[121.53145599 44.45531082]
[128.67066956 31.26320457]
[124.38797760 16.28668022]
[131.81607056 3.00970936]
[146.12030029 -0.98088747]
[153.25950623 -14.17299366]
[155.48049927 -30.98083496]
[172.24632263 -33.49950790]
[179.30780029 -18.08614349]
[166.45161438 -7.03378296]
[159.31240845 6.15832329]
[163.79527283 20.31598663]
[156.74302673 33.79636002]
[141.86277771 38.40241623]
[134.72355652 51.59452438]
[127.58435059 64.78662872]
[120.44513702 77.97873688]
[113.30593109 91.17084503]
[125.89580536 83.01639557]
[135.33509827 71.35878754]
[148.40318298 63.99503708]
[163.26443481 61.95952988]
[177.83128357 65.53819275]
[190.05755615 74.22832489]
[198.22581482 86.80924988]
[201.18869019 101.51371765]
[198.52996826 116.27620697]
[190.62313843 129.02305603]
[178.57887268 137.96371460]
[164.08898926 141.84230042]
[149.18888855 140.11398315]
[135.97157288 133.02156067]
[126.29415894 121.56214905]
[113.53844452 113.66963959]
[120.94876862 126.71138000]
[128.35910034 139.75312805]
[135.36444092 145.71540833]
[135.78462219 153.14186096]
[142.92382812 166.33396912]
[150.06303406 179.52607727]
[157.20225525 192.71818542]
[164.34146118 205.91029358]
[171.48066711 219.10240173]
[185.63110352 217.21980286]
[199.54278564 220.28417969]
[211.54209900 227.90588379]
[220.19262695 239.14831543]
[224.46717834 252.64291382]
[223.86964417 266.75576782]
[218.49255371 279.78543091]
[209.00343323 290.16806030]
[215.86848450 303.50488281]
[222.73353577 316.84173584]
[237.51541138 321.75433350]
[244.28755188 335.37756348]
[239.51304626 349.43957520]
[246.37809753 362.77639771]
[253.24313354 376.11322021]
[267.31872559 384.52807617]
[266.79855347 400.91897583]
[252.21769714 408.42437744]
[238.57571411 399.32336426]
[239.90631104 382.97827148]
[233.04125977 369.64144897]
[226.17620850 356.30462646]
[211.95751953 352.01925659]
[204.80540466 338.59158325]
[209.39669800 323.70678711]
[202.53164673 310.36993408]
[195.66659546 297.03311157]
[179.92536926 298.58874512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[11 116]
[12 115]
[13 114]
[14 71]
[15 70]
[16 69]
[19 66]
[20 65]
[21 64]
[22 63]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[37 48]
[38 47]
[39 46]
[40 45]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[85 91]
[86 90]
[131 150]
[132 149]
[133 148]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
