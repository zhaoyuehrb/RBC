%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACCAGGAGGGUAUGCAUAGGGAGGGCAAGAGCUCUGGGCCACUGCGAAGAUUCAAAAGCUCCAAAAACCUACUGUAGACAUCGAAGAACCAAUAUAUACA\
) } def
/len { sequence length } bind def

/coor [
[214.72247314 273.49288940]
[205.83255005 261.41113281]
[196.94261169 249.32936096]
[182.22479248 247.34912109]
[173.03703308 235.22312927]
[175.21386719 219.79914856]
[166.32394409 207.71739197]
[157.43400574 195.63562012]
[145.42863464 193.45852661]
[137.94006348 183.32005310]
[139.48362732 170.40463257]
[130.96266174 158.05987549]
[122.44168854 145.71511841]
[113.92071533 133.37036133]
[102.85887909 136.04432678]
[91.51383209 135.14756775]
[81.00946808 130.76892090]
[72.38639832 123.34215546]
[66.49887085 113.60298920]
[63.93013000 102.51625061]
[64.93464661 91.18023682]
[69.41291809 80.71794891]
[76.92129517 72.16584015]
[69.95044708 58.88400269]
[62.97959900 45.60216141]
[56.00875092 32.32032013]
[40.79151535 32.76424789]
[26.94698334 26.58234406]
[17.19929886 15.04965973]
[13.44095039 0.48820966]
[16.36552238 -14.20043659]
[25.34041023 -26.11332130]
[18.36956406 -39.39516068]
[11.39871597 -52.67700195]
[4.52462721 -58.95009232]
[4.42478085 -66.46694183]
[-2.14173484 -79.95326233]
[-8.70825005 -93.43958282]
[-23.37713623 -98.67996216]
[-29.84439850 -112.45055389]
[-24.75810051 -126.40280151]
[-31.32461739 -139.88911438]
[-45.20944214 -148.61515808]
[-44.32457733 -164.99041748]
[-29.58029938 -172.16943359]
[-16.14425468 -162.76704407]
[-17.83829498 -146.45564270]
[-11.27178001 -132.96931458]
[2.84801364 -128.36854553]
[9.69951153 -114.78504181]
[4.77807140 -100.00610352]
[11.34458637 -86.51978302]
[17.91110229 -73.03345490]
[24.68055534 -59.64785004]
[31.65140343 -46.36600876]
[38.62224960 -33.08417130]
[53.52468109 -33.70306778]
[67.27454376 -27.76584244]
[77.12339783 -16.40093422]
[81.07729340 -1.82743549]
[78.30031586 13.07811165]
[69.29059601 25.34947205]
[76.26143646 38.63131332]
[83.23228455 51.91315460]
[90.20313263 65.19499207]
[108.81218719 64.93274689]
[125.08659363 73.96099091]
[134.71472168 89.88785553]
[135.14573669 108.49375916]
[126.26547241 124.84938812]
[134.78643799 137.19413757]
[143.30741882 149.53889465]
[151.82838440 161.88366699]
[168.60113525 169.29251099]
[169.51577759 186.74568176]
[178.40570068 198.82745361]
[187.29563904 210.90922546]
[202.66885376 213.41961670]
[211.51240540 225.79888916]
[209.02438354 240.43942261]
[217.91430664 252.52119446]
[226.80424500 264.60296631]
[240.85374451 259.10076904]
[255.84869385 257.42333984]
[270.76672363 259.68496704]
[284.59066772 265.73150635]
[296.37802124 275.15066528]
[305.32510376 287.30026245]
[310.82183838 301.35186768]
[312.49353027 316.34747314]
[310.22610474 331.26461792]
[304.17422485 345.08624268]
[294.75051880 356.86996460]
[282.59747314 365.81234741]
[268.54373169 371.30368042]
[253.54750061 372.96954346]
[238.63122559 370.69638062]
[224.81193542 364.63916016]
[213.03186035 355.21090698]
[204.09417725 343.05441284]
[198.60827637 328.99856567]
[196.94819641 314.00167847]
[199.22711182 299.08627319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[6 77]
[7 76]
[8 75]
[11 73]
[12 72]
[13 71]
[14 70]
[23 65]
[24 64]
[25 63]
[26 62]
[32 56]
[33 55]
[34 54]
[36 53]
[37 52]
[38 51]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
