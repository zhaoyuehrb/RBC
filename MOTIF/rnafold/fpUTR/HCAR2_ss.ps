%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACACAGACACACACCUCCUUGCUGGAGCAUUCACUAGGCGAGGCGCUCCAUCGGACUCACUAGCCGCACUC\
) } def
/len { sequence length } bind def

/coor [
[70.88615417 202.40011597]
[57.60943604 209.38072205]
[43.26401520 213.76350403]
[28.35297966 215.39477539]
[13.39926434 214.21730042]
[-1.07269967 210.27239990]
[-14.55537891 203.69841003]
[-26.57593346 194.72587585]
[-36.71280289 183.66947937]
[-44.61048126 170.91696167]
[-49.99199677 156.91557312]
[-52.66862106 142.15631104]
[-52.54648209 127.15680695]
[-49.62986374 112.44309235]
[-44.02105331 98.53118134]
[-35.91675186 85.90896606]
[-25.60117912 75.01911163]
[-13.43610287 66.24352264]
[0.15184377 59.88996887]
[14.68613052 56.18125916]
[29.65703583 55.24746704]
[44.53953171 57.12133408]
[58.81167984 61.73715210]
[71.97295380 68.93303680]
[83.56179810 78.45662689]
[93.16751862 89.96773529]
[95.66904449 75.17779541]
[98.17057800 60.38785172]
[100.67211151 45.59791183]
[103.17363739 30.80797005]
[105.67517090 16.01803017]
[98.79286194 -0.91232842]
[110.16301727 -14.11166286]
[112.04302216 -28.99338341]
[113.92301941 -43.87510300]
[103.16615295 -55.22516632]
[102.27320099 -70.83723450]
[111.66579437 -83.33976746]
[126.90901947 -86.82945251]
[140.80551147 -79.65856171]
[146.79376221 -65.21298218]
[142.04629517 -50.31346130]
[128.80473328 -41.99510574]
[126.92473602 -27.11338425]
[125.04473877 -12.23166466]
[132.27502441 -2.30513120]
[130.63140869 10.27333641]
[120.46511078 18.51956177]
[117.96357727 33.30950165]
[115.46205139 48.09944153]
[112.96051788 62.88938141]
[110.45898438 77.67932129]
[107.95745850 92.46926117]
[109.29796600 94.54253387]
[110.12124634 96.82819366]
[123.41429901 103.77763367]
[136.70735168 110.72707367]
[146.05870056 112.00112152]
[150.40251160 118.25605011]
[163.39289856 125.75605011]
[179.78311157 125.21496582]
[188.21589661 139.27981567]
[180.01632690 153.48190308]
[163.61941528 153.21131897]
[155.89289856 138.74642944]
[142.90251160 131.24642944]
[129.75791931 124.02012634]
[116.46485901 117.07068634]
[103.17180634 110.12124634]
[106.53412628 124.73954773]
[107.11194611 139.72842407]
[104.88499451 154.56217957]
[99.93137360 168.72062683]
[92.42480469 181.70721436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[33 45]
[34 44]
[35 43]
[55 69]
[56 68]
[57 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
