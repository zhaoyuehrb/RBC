%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCCGCCGAGUGAUUAGUGAGCGGAGAAGCUUUCUUCCGGCGGGAAGGGCCCCGGAGGCGGGCACUUGGGGGGAAAGUUGAGACGUGAUUACCGGGUUGGGCGGGCCCCAUCUGGGAGGGGUUUGUGGGUGAACUCGGGGUCCACCGCCCGCUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[-31.57864189 272.81423950]
[-41.60843658 283.96786499]
[-51.63823318 295.12149048]
[-61.66802979 306.27508545]
[-71.69782257 317.42871094]
[-81.72762299 328.58233643]
[-79.97505188 347.40853882]
[-92.29138947 361.33255005]
[-110.55483246 361.87228394]
[-120.14734650 373.40414429]
[-129.73985291 384.93600464]
[-122.96755219 398.57623291]
[-122.33521271 413.79202271]
[-127.95239258 427.94711304]
[-138.84588623 438.58911133]
[-153.12831116 443.87417603]
[-168.32518005 442.88665771]
[-181.80352783 435.79763794]
[-191.22814941 423.83532715]
[-194.96617126 409.07229614]
[-192.36996460 394.06631470]
[-183.88932800 381.41726685]
[-170.99359131 373.31665039]
[-155.91702271 371.16796875]
[-141.27171326 375.34347534]
[-131.67919922 363.81164551]
[-122.08669281 352.27978516]
[-125.57717896 341.35916138]
[-123.31774902 329.99658203]
[-115.75975037 321.05850220]
[-104.70587921 316.85708618]
[-92.88124084 318.55255127]
[-82.85144043 307.39892578]
[-72.82164764 296.24530029]
[-62.79185104 285.09167480]
[-52.76205826 273.93804932]
[-42.73226166 262.78445435]
[-32.91928482 251.43960571]
[-23.32677460 239.90774536]
[-13.73426247 228.37588501]
[-4.25332546 216.75212097]
[5.11515760 205.03753662]
[14.48364067 193.32295227]
[23.85212326 181.60836792]
[33.22060776 169.89378357]
[42.58909225 158.17919922]
[51.95757294 146.46461487]
[50.93768692 134.38102722]
[58.68832016 124.53833008]
[71.46755219 122.57303619]
[81.06006622 111.04117584]
[76.03194427 91.43278503]
[89.88710785 72.83842468]
[80.51862335 61.12383652]
[71.15014648 49.40925217]
[61.78166199 37.69466400]
[47.11993027 31.74956322]
[45.21353149 16.97746468]
[35.84505081 5.26287842]
[26.47656631 -6.45170736]
[10.84010601 -6.63913584]
[-0.98387414 -16.87278175]
[-3.41245270 -32.32062912]
[4.70107079 -45.68867874]
[19.52573967 -50.66494751]
[34.06179810 -44.89978790]
[41.44576263 -31.11533737]
[38.19115067 -15.82019043]
[47.55963516 -4.10560465]
[56.92811966 7.60898113]
[70.91975403 12.71617794]
[73.49624634 28.32618332]
[82.86473083 40.04076767]
[92.23321533 51.75535583]
[101.60169220 63.46994019]
[98.99635315 48.69793320]
[91.97785187 35.44121170]
[90.71136475 20.49477386]
[95.39920807 6.24611902]
[105.29254150 -5.02871418]
[118.81105042 -11.52871609]
[133.79531860 -12.21559620]
[147.85179138 -6.97963428]
[158.73515320 3.34279275]
[164.70690918 17.10280991]
[164.81315613 32.10243607]
[159.03692627 45.94566727]
[148.30088806 56.42123413]
[134.32081604 61.85565567]
[122.68650818 71.32364655]
[137.43577576 68.59248352]
[152.18502808 65.86132050]
[166.93429565 63.13015747]
[174.84751892 58.46997452]
[181.99395752 60.49135590]
[196.79310608 58.04495239]
[211.59226990 55.59854889]
[226.39143372 53.15214539]
[241.19058228 50.70574188]
[255.98974609 48.25933838]
[270.78890991 45.81293869]
[281.53811646 28.89142418]
[300.95413208 25.30889130]
[316.54779053 36.91790771]
[331.18084717 33.62036896]
[345.81390381 30.32283401]
[360.44696045 27.02529716]
[375.08001709 23.72776031]
[389.71307373 20.43022346]
[404.34613037 17.13268852]
[418.97918701 13.83515167]
[433.61224365 10.53761482]
[439.62619019 -3.76665163]
[452.91680908 -11.77531910]
[468.37359619 -10.40889168]
[480.05310059 -0.19278738]
[483.46432495 14.94469166]
[477.29556274 29.18287659]
[463.91882324 37.04689407]
[448.47775269 35.51287079]
[436.90975952 25.17066956]
[422.27670288 28.46820450]
[407.64364624 31.76574135]
[393.01062012 35.06327820]
[378.37756348 38.36081314]
[363.74450684 41.65835190]
[349.11145020 44.95588684]
[334.47839355 48.25342178]
[319.84533691 51.55096054]
[316.87033081 61.46126556]
[309.97753906 69.28670502]
[300.37396240 73.55468750]
[289.78445435 73.42465973]
[280.14212036 68.85275269]
[273.23532104 60.61209488]
[258.43615723 63.05849838]
[243.63699341 65.50490570]
[228.83782959 67.95130920]
[214.03866577 70.39771271]
[199.23951721 72.84411621]
[184.44035339 75.29051971]
[169.66545105 77.87941742]
[154.91619873 80.61058044]
[140.16693115 83.34175110]
[125.41767120 86.07291412]
[125.40614319 107.97971344]
[110.79679871 121.74349213]
[92.59192657 120.63368988]
[82.99941254 132.16554260]
[80.32505035 150.36207581]
[63.67216110 155.83309937]
[54.30367661 167.54768372]
[44.93519211 179.26226807]
[35.56671143 190.97685242]
[26.19822693 202.69143677]
[16.82974434 214.40602112]
[7.46126032 226.12060547]
[4.52498913 234.82203674]
[-2.20240545 237.96839905]
[-11.79491711 249.50025940]
[-21.38742828 261.03210449]
[-22.89930534 267.54803467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[9 27]
[10 26]
[11 25]
[38 161]
[39 160]
[40 159]
[41 157]
[42 156]
[43 155]
[44 154]
[45 153]
[46 152]
[47 151]
[50 149]
[51 148]
[53 75]
[54 74]
[55 73]
[56 72]
[58 70]
[59 69]
[60 68]
[90 145]
[91 144]
[92 143]
[93 142]
[95 141]
[96 140]
[97 139]
[98 138]
[99 137]
[100 136]
[101 135]
[104 129]
[105 128]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
