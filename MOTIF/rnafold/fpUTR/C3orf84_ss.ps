%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUGACCUCCAGAGAUUCUCUUUCCUGAAGAUACCCUCCAAAAGACAAGAGGAAAGUUUGCCUUUUCUGCUCCCUUCUUGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[126.80517578 142.13298035]
[116.26068878 147.21542358]
[104.82275391 149.70358276]
[93.11982727 149.46078491]
[81.79493713 146.50033569]
[71.47033691 140.98492432]
[62.71329498 133.21757507]
[56.00498581 123.62508392]
[51.71399689 112.73450470]
[36.79994202 114.33792877]
[23.90592003 123.50606537]
[10.42449188 117.17358398]
[-4.48956251 118.77700806]
[-19.40361786 120.38043976]
[-27.82190514 124.49034119]
[-34.87725449 121.76513672]
[-49.83903503 122.83522034]
[-58.86333466 135.60612488]
[-73.99841309 139.53849792]
[-88.09794617 132.77557373]
[-94.50457001 118.51060486]
[-90.19326782 103.47908020]
[-77.19971466 94.77842712]
[-61.65905762 96.51681519]
[-50.90912247 107.87344360]
[-35.94734192 106.80335236]
[-21.00704384 105.46638489]
[-6.09298944 103.86295319]
[8.82106495 102.25952911]
[20.64833450 93.20607758]
[35.19651413 99.42387390]
[50.11056900 97.82044983]
[54.37834930 79.69308472]
[64.99101257 64.38993835]
[80.47260284 54.03929520]
[98.66998291 50.08069611]
[117.05233765 53.06468964]
[133.06311035 62.57626343]
[144.47560120 77.29259491]
[158.70799255 72.55559540]
[172.94038391 67.81860352]
[187.17277527 63.08161163]
[201.40515137 58.34461594]
[215.55073547 53.35434341]
[229.60498047 48.11238098]
[243.65922546 42.87041855]
[245.13600159 27.71850395]
[253.01287842 14.76312828]
[265.68176270 6.54608345]
[280.60067749 4.65223598]
[294.80383301 9.40408421]
[305.49105835 19.80833054]
[319.54531860 14.56636715]
[333.59957886 9.32440472]
[347.65380859 4.08244181]
[361.70806885 -1.15952075]
[375.76229858 -6.40148354]
[389.81655884 -11.64344597]
[397.76217651 -25.58067703]
[413.63439941 -27.91579056]
[425.25735474 -16.85748672]
[423.71496582 -0.88875067]
[410.19036865 7.74057055]
[395.05850220 2.41079974]
[381.00427246 7.65276241]
[366.95001221 12.89472485]
[352.89578247 18.13668823]
[338.84152222 23.37865067]
[324.78729248 28.62061310]
[310.73303223 33.86257553]
[309.46948242 48.72423553]
[301.84725952 61.61652756]
[289.33209229 69.95507050]
[274.37655640 72.04138947]
[259.93966675 67.40863037]
[248.90118408 56.92466354]
[234.84693909 62.16662598]
[220.79269409 67.40859222]
[215.50701904 72.81842041]
[206.14215088 72.57700348]
[191.90975952 77.31400299]
[177.67736816 82.05099487]
[163.44499207 86.78798676]
[149.21260071 91.52497864]
[149.83348083 103.21394348]
[147.71626282 114.72631073]
[142.97724915 125.42954254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 32]
[10 31]
[12 29]
[13 28]
[14 27]
[16 26]
[17 25]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[44 78]
[45 77]
[46 76]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
