%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGUUGAAUGAAUCCUGACCACACCCACCCUGGCUUUUCUUCACCUCUUCAACCAGGAGCCGAGAUUUCUGUUGCUCUGAAGCCAUCCAGGGGUCUUUAACCAGAAGAGAGAGGAGAGCCUCAGGAGUUAGGACCAGAAGAAGCCAGGGAAGCAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[27.37322235 431.65975952]
[27.28889465 446.73477173]
[23.59864616 461.35140991]
[16.51702309 474.65982056]
[6.45574236 485.88632202]
[-6.00024700 494.37817383]
[-20.12677002 499.64172363]
[-35.10252762 501.37091064]
[-50.05685043 499.46520996]
[-64.12031555 494.03543091]
[-76.47528839 485.39724731]
[-86.40346527 474.05288696]
[-93.32764435 460.66186523]
[-96.84525299 446.00274658]
[-96.75178528 430.92779541]
[-93.05267334 416.31341553]
[-85.96298218 403.00927734]
[-75.89489746 391.78890991]
[-63.43376160 383.30459595]
[-49.30405045 378.04962158]
[-34.32724762 376.32949829]
[-19.37408257 378.24426270]
[-13.97141552 364.25100708]
[-8.56875038 350.25775146]
[-18.84984779 339.45199585]
[-23.43863106 325.19531250]
[-21.37395096 310.29907227]
[-13.01227379 297.72518921]
[0.03251275 289.99728394]
[15.20035362 288.69421387]
[20.60301971 274.70095825]
[26.00568581 260.70770264]
[31.40835190 246.71446228]
[36.81101608 232.72120667]
[42.21368408 218.72795105]
[47.61634827 204.73469543]
[53.01901627 190.74143982]
[51.91608429 186.04859924]
[53.78446198 180.61579895]
[58.91202545 176.31704712]
[64.85322571 162.54380798]
[70.79441833 148.77056885]
[76.73561859 134.99732971]
[82.67681122 121.22408295]
[73.07389069 105.05361938]
[76.15994263 86.50163269]
[90.48065186 74.31076813]
[89.31826782 59.35587692]
[88.15588379 44.40098190]
[86.99349213 29.44608879]
[85.83110809 14.49119377]
[84.66872406 -0.46370038]
[77.33398438 -4.67400074]
[72.34102631 -11.38285828]
[70.45681000 -19.43390465]
[71.92035675 -27.47608757]
[76.41527557 -34.19034958]
[83.13433075 -38.50595093]
[83.13433075 -53.50595093]
[71.39009857 -60.77446365]
[64.83423615 -72.80759430]
[65.09096527 -86.39988708]
[71.98572540 -97.99051666]
[83.61902618 -104.59615326]
[83.90989685 -119.59333038]
[84.20076752 -134.59051514]
[84.49163818 -149.58769226]
[84.78250885 -164.58486938]
[85.07337952 -179.58204651]
[85.36425018 -194.57922363]
[85.65512085 -209.57640076]
[85.94599152 -224.57359314]
[86.23685455 -239.57077026]
[72.59698486 -252.66323853]
[72.80307007 -271.25061035]
[86.26145935 -283.60705566]
[85.97058868 -298.60424805]
[85.67971802 -313.60144043]
[76.74764252 -327.35461426]
[84.43229675 -341.84179688]
[100.82836151 -342.15979004]
[109.06896973 -327.98147583]
[100.67690277 -313.89230347]
[100.96777344 -298.89511108]
[101.25863647 -283.89794922]
[111.04472351 -277.92208862]
[116.77049255 -267.84915161]
[116.90145874 -256.14312744]
[111.28844452 -245.73301697]
[101.23403931 -239.27989197]
[100.94316864 -224.28271484]
[100.65229797 -209.28553772]
[100.36142731 -194.28836060]
[100.07055664 -179.29118347]
[99.77968597 -164.29400635]
[99.48881531 -149.29681396]
[99.19794464 -134.29963684]
[98.90708160 -119.30245972]
[98.61621094 -104.30528259]
[112.00547791 -94.84667206]
[117.18739319 -79.11924744]
[111.93895721 -63.23909378]
[98.13433075 -53.50595093]
[98.13433075 -38.50595093]
[110.83346558 -21.00070381]
[99.62361908 -1.62608671]
[100.78600311 13.32880783]
[101.94838715 28.28370094]
[103.11077881 43.23859406]
[104.27316284 58.19348907]
[105.43554688 73.14838409]
[117.44741058 71.00785828]
[131.13998413 74.45334625]
[146.03855896 72.71195221]
[160.93713379 70.97055817]
[175.83570862 69.22916412]
[188.65957642 59.00758743]
[203.82266235 65.25362396]
[205.72648621 81.54188538]
[192.41255188 91.11640930]
[177.57710266 84.12773895]
[162.67852783 85.86913300]
[147.77995300 87.61052704]
[132.88137817 89.35192108]
[130.85133362 104.21459198]
[128.82144165 119.07593536]
[142.70730591 124.74893188]
[155.82690430 116.46306610]
[171.30897522 117.50476074]
[183.20033264 127.47346497]
[186.92852783 142.53601074]
[181.05996704 156.90054321]
[167.85125732 165.04359436]
[152.38139343 163.83401489]
[140.59887695 153.73689270]
[137.03430176 138.63479614]
[123.14844513 132.96179199]
[108.08118439 132.85804749]
[96.45005798 127.16527557]
[90.50885773 140.93852234]
[84.56766510 154.71176147]
[78.62646484 168.48500061]
[72.68527222 182.25823975]
[67.01226807 196.14410400]
[61.60960388 210.13735962]
[56.20693970 224.13061523]
[50.80427170 238.12387085]
[45.40160751 252.11712646]
[39.99893951 266.11038208]
[34.59627533 280.10363770]
[29.19360924 294.09689331]
[39.55039597 305.25479126]
[44.01742172 319.74383545]
[41.75986481 334.67446899]
[33.27845383 347.09326172]
[20.29966927 354.56726074]
[5.42450571 355.66043091]
[0.02183979 369.65368652]
[-5.38082600 383.64694214]
[6.97938108 392.27761841]
[16.91443634 403.61596680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 159]
[23 158]
[24 157]
[30 151]
[31 150]
[32 149]
[33 148]
[34 147]
[35 146]
[36 145]
[37 144]
[40 143]
[41 142]
[42 141]
[43 140]
[44 139]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[58 104]
[59 103]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[72 91]
[73 90]
[76 85]
[77 84]
[78 83]
[113 124]
[114 123]
[115 122]
[116 121]
[126 137]
[127 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
