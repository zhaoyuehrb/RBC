%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCCGAUAGCUGGUCCUCUUUCUCCAACACCUAGCCUGAGACUUGGCGGCGCGGCUGCUAUCCUGAACUAGCUUGGUAAGUGUUGUGUCCCGAACCAGCGUAGAGAGACCUCGGACCAGCCGCCUUG\
) } def
/len { sequence length } bind def

/coor [
[82.23582458 411.26257324]
[81.15757751 396.30136108]
[80.07933807 381.34017944]
[79.00109863 366.37896729]
[77.92285156 351.41778564]
[76.84461212 336.45657349]
[66.54204559 347.35873413]
[51.66662598 349.28796387]
[38.92383575 341.37460327]
[34.05781555 327.18582153]
[39.26205063 313.11755371]
[52.19059753 305.51147461]
[67.01557922 307.79617310]
[77.05462646 318.94271851]
[78.49131775 304.01168823]
[79.92800903 289.08065796]
[81.36470032 274.14959717]
[82.80139160 259.21856689]
[84.23808289 244.28753662]
[84.95726013 229.30477905]
[84.95726013 214.30477905]
[84.95726013 199.30477905]
[84.95726013 184.30477905]
[84.95726013 169.30477905]
[84.95726013 154.30477905]
[84.95726013 139.30477905]
[75.33674622 150.81329346]
[61.30606842 156.11801147]
[46.47806549 153.85299683]
[34.67088699 144.60147095]
[28.92483902 130.74568176]
[30.71950150 115.85343170]
[39.59275818 103.75941467]
[53.25978088 97.57778931]
[68.20137024 98.90029907]
[80.57011414 107.38641357]
[87.18084717 120.84962463]
[90.74371338 106.27890015]
[94.13160706 91.66650391]
[97.34404755 77.01453400]
[100.55648804 62.36256027]
[92.24605560 53.69661331]
[89.22735596 42.20008087]
[92.14859009 30.80276108]
[100.15938568 22.35063171]
[111.15391541 18.89527130]
[115.06514740 4.41417170]
[118.97637939 -10.06692791]
[122.88761902 -24.54802704]
[122.10588837 -33.75114059]
[127.07015991 -39.32731247]
[131.32751465 -53.71045685]
[135.58486938 -68.09360504]
[139.84222412 -82.47675323]
[144.09957886 -96.85990143]
[148.35693359 -111.24304962]
[152.61428833 -125.62619019]
[156.87164307 -140.00933838]
[160.60896301 -154.53630066]
[163.82141113 -169.18826294]
[167.03384399 -183.84024048]
[170.24629211 -198.49220276]
[173.45872498 -213.14418030]
[165.20124817 -226.35220337]
[168.66784668 -241.16561890]
[181.31056213 -248.95646667]
[184.52301025 -263.60842896]
[187.73544312 -278.26040649]
[185.22154236 -295.02694702]
[200.63691711 -302.08404541]
[211.68562317 -289.22470093]
[202.38742065 -275.04797363]
[199.17497253 -260.39599609]
[195.96253967 -245.74401855]
[204.18592834 -233.37828064]
[201.13677979 -218.47334290]
[188.11070251 -209.93173218]
[184.89825439 -195.27976990]
[181.68582153 -180.62779236]
[178.47337341 -165.97583008]
[175.26094055 -151.32385254]
[176.92582703 -148.10916138]
[177.05593872 -143.90640259]
[175.19451904 -139.47470093]
[171.25479126 -135.75198364]
[166.99743652 -121.36883545]
[162.74008179 -106.98568726]
[158.48272705 -92.60254669]
[154.22537231 -78.21939850]
[149.96801758 -63.83625031]
[145.71066284 -49.45310211]
[141.45330811 -35.06995392]
[137.36871338 -20.63679504]
[133.45748901 -6.15569448]
[129.54624939 8.32540512]
[125.63501740 22.80650520]
[135.71133423 38.00294876]
[131.50636292 56.07033157]
[115.20845795 65.57500458]
[111.99601746 80.22697449]
[108.78357697 94.87894440]
[110.27818298 102.88791656]
[105.31443787 109.84175873]
[101.75157166 124.41248322]
[99.95726013 139.30477905]
[99.95726013 154.30477905]
[99.95726013 169.30477905]
[99.95726013 184.30477905]
[99.95726013 199.30477905]
[99.95726013 214.30477905]
[99.95726013 229.30477905]
[102.39865875 233.16944885]
[103.32384491 237.20416260]
[102.87493896 240.89155579]
[101.35334778 243.81925964]
[99.16912079 245.72422791]
[97.73242950 260.65527344]
[96.29573822 275.58630371]
[94.85904694 290.51733398]
[93.42235565 305.44836426]
[91.98566437 320.37942505]
[91.80580902 335.37832642]
[92.88404846 350.33953857]
[93.96229553 365.30072021]
[95.04053497 380.26193237]
[96.11877441 395.22311401]
[97.19702148 410.18432617]
[106.83919525 423.44934082]
[99.92613983 438.32015991]
[83.56941223 439.49899292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[14 121]
[15 120]
[16 119]
[17 118]
[18 117]
[19 116]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[37 104]
[38 103]
[39 101]
[40 100]
[41 99]
[46 96]
[47 95]
[48 94]
[49 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
