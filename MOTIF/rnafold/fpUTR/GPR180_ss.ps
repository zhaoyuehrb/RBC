%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCCAGCUGCCGACGUGGGGCGGGCAGCCGCCGGCGGCUGGGAGCCGAGGCGUCGGUGCAGACCUGGAGACGGGC\
) } def
/len { sequence length } bind def

/coor [
[86.23523712 131.07884216]
[78.03387451 123.95622253]
[72.83533478 114.96560669]
[70.94240570 105.23940277]
[72.26338959 95.89983368]
[58.55212784 89.81694794]
[44.84087372 83.73406982]
[31.12961578 77.65119171]
[17.41835785 71.56831360]
[3.70710087 65.48542786]
[-10.00415611 59.40254974]
[-23.71541405 53.31967163]
[-37.42667007 47.23678970]
[-51.13792801 41.15391159]
[-47.59283829 55.72896957]
[-53.94706726 69.31660461]
[-67.40556335 75.93997192]
[-82.04827881 72.68563080]
[-91.43428802 60.98508072]
[-91.43492126 45.98508072]
[-82.04991150 34.28373337]
[-67.40620422 31.02830124]
[-78.91814423 21.41189575]
[-90.43008423 11.79549217]
[-101.94202423 2.17908716]
[-113.45396423 -7.43731737]
[-129.69421387 -9.71471024]
[-135.59036255 -25.01723862]
[-125.07697296 -37.60297012]
[-108.96931458 -34.52478790]
[-103.83755493 -18.94925690]
[-92.32561493 -9.33285236]
[-80.81367493 0.28355175]
[-69.30173492 9.89995670]
[-57.78979874 19.51636124]
[-45.05504608 27.44265366]
[-31.34379005 33.52553558]
[-17.63253403 39.60841370]
[-3.92127657 45.69129562]
[9.78998089 51.77417374]
[23.50123787 57.85705185]
[37.21249390 63.93993378]
[50.92375183 70.02281189]
[64.63500977 76.10569000]
[78.34626770 82.18857574]
[103.20424652 66.90821838]
[133.83399963 81.72286224]
[147.29257202 75.09967804]
[160.75115967 68.47650146]
[174.20974731 61.85331726]
[187.66831970 55.23013306]
[196.33589172 41.30873108]
[212.71472168 42.12471008]
[219.95568848 56.83866119]
[210.60990906 70.31413269]
[194.29150391 68.68871307]
[180.83293152 75.31189728]
[167.37434387 81.93508148]
[153.91575623 88.55826569]
[140.45718384 95.18144989]
[138.54005432 102.43228149]
[153.51681519 101.59779358]
[158.93836975 115.58374786]
[147.31217957 125.06169891]
[134.70581055 116.93395996]
[132.78868103 124.18479156]
[141.21499634 136.59436035]
[149.64131165 149.00392151]
[158.06762695 161.41346741]
[173.05690002 168.06582642]
[174.52113342 184.39947510]
[160.95405579 193.61175537]
[146.31231689 186.22587585]
[145.65806580 169.83979797]
[137.23175049 157.43023682]
[128.80543518 145.02067566]
[120.37911987 132.61111450]
[108.54925537 135.96475220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
