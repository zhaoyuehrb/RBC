%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGUGAGCGCGCGUGCGUGCGUGUGCGGGUGCGUGAGCGUGAGCGCGCGGAGGCCGGAAGCGAGCGCUGCGCAGUCGGGUGGUCGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[16.88180733 192.31672668]
[11.77628803 206.42111206]
[-1.67668962 213.05566406]
[-15.97464848 208.52043152]
[-23.14387894 195.34461975]
[-19.18581963 180.87557983]
[-33.22440720 186.15933228]
[-47.26299667 191.44308472]
[-53.84494781 205.56100464]
[-68.15734100 210.71949768]
[-81.57605743 204.35760498]
[-95.61464691 209.64135742]
[-109.65323639 214.92510986]
[-123.69182587 220.20886230]
[-137.73042297 225.49261475]
[-151.76899719 230.77636719]
[-161.74858093 243.78942871]
[-177.97056580 241.38540649]
[-183.74716187 226.03735352]
[-173.13591003 213.53402710]
[-157.05274963 216.73777771]
[-143.01416016 211.45402527]
[-128.97557068 206.17027283]
[-114.93698883 200.88652039]
[-100.89839935 195.60276794]
[-86.85980988 190.31901550]
[-80.96576691 176.68832397]
[-66.80390930 171.12986755]
[-52.54674911 177.40449524]
[-38.50815964 172.12074280]
[-24.46957016 166.83699036]
[-11.01647949 160.20266724]
[1.72155356 152.28164673]
[14.45958614 144.36062622]
[21.18179321 131.06922913]
[36.98675156 130.35234070]
[49.72478104 122.43132019]
[62.46281433 114.51029968]
[75.20085144 106.58928680]
[87.93888092 98.66826630]
[100.41092682 90.33471680]
[112.60362244 81.59754944]
[119.31424713 67.27001953]
[134.16636658 66.14590454]
[146.35906982 57.40873718]
[158.55177307 48.67157364]
[161.25546265 33.33117294]
[173.74505615 24.64413643]
[188.35311890 27.31622696]
[200.54582214 18.57906151]
[212.73852539 9.84189701]
[224.93121338 1.10473156]
[237.12391663 -7.63243389]
[249.31661987 -16.36960030]
[252.23800659 -29.06298828]
[262.73620605 -36.06990051]
[274.78332520 -34.03176880]
[287.25537109 -42.36532211]
[299.58941650 -50.90182495]
[311.78210449 -59.63898849]
[318.05361938 -74.79155731]
[334.34503174 -76.66800690]
[343.89718628 -63.33801651]
[336.88360596 -48.51433182]
[320.51925659 -47.44628906]
[308.32656860 -38.70912170]
[304.65228271 -32.12665939]
[295.58892822 -29.89327621]
[283.11688232 -21.55972290]
[276.33160400 -5.46648359]
[258.05377197 -4.17689896]
[245.86108398 4.56026649]
[233.66838074 13.29743195]
[221.47569275 22.03459740]
[209.28298950 30.77176285]
[197.09028625 39.50892639]
[194.92495728 54.20066071]
[182.68429565 63.23507690]
[167.28894043 60.86427307]
[155.09623718 69.60144043]
[142.90353394 78.33860016]
[137.06501770 92.04119110]
[121.34078979 93.79024506]
[109.14808655 102.52741241]
[107.08084869 107.57892609]
[102.25362396 111.02524567]
[95.85990143 111.40630341]
[83.12186432 119.32731628]
[70.38383484 127.24833679]
[57.64580154 135.16935730]
[44.90776825 143.09037781]
[37.27445221 156.94833374]
[22.38060379 157.09866333]
[9.64257145 165.01968384]
[-3.09546137 172.94068909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 31]
[7 30]
[8 29]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[32 95]
[33 94]
[34 93]
[36 91]
[37 90]
[38 89]
[39 88]
[40 87]
[41 84]
[42 83]
[44 81]
[45 80]
[46 79]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[57 69]
[58 68]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
