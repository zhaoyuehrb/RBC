%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUAAGUAGAUGCAACACCUCAUUUAUACCUCCUUAUCUCAUACAGAAGAGCUAAGAUUGGCAGAAAUGAUUUCACAGAAGCCACUUGCUUGGAGCAGACUACC\
) } def
/len { sequence length } bind def

/coor [
[92.94685364 298.22335815]
[80.97870636 307.95819092]
[65.64488220 309.65447998]
[51.83834457 302.77093506]
[43.96471405 289.50405884]
[44.53643799 274.08731079]
[53.37107468 261.44006348]
[67.64952850 255.59803772]
[70.27834320 240.83018494]
[72.90715790 226.06234741]
[75.53597260 211.29449463]
[68.63858795 195.23159790]
[80.41577911 181.17196655]
[82.60993195 166.33331299]
[84.80408478 151.49465942]
[68.79505157 143.69058228]
[56.21969986 131.07893372]
[48.46178055 115.04749298]
[46.37493896 97.36026764]
[50.18881226 79.96351624]
[59.48373032 64.77149963]
[73.23691559 53.45590591]
[67.64958954 39.53535461]
[62.06226730 25.61480141]
[56.47494125 11.69424725]
[50.88761902 -2.22630572]
[45.30029297 -16.14685822]
[30.39432335 -20.03507233]
[20.74877167 -31.81712341]
[19.90047646 -46.84191513]
[27.96551323 -59.33564377]
[22.37818909 -73.25619507]
[6.22184610 -79.76291656]
[-0.17799725 -95.60044861]
[6.64874363 -110.89184570]
[0.65516937 -124.64237976]
[-5.33840513 -138.39291382]
[-11.33197975 -152.14343262]
[-23.93893623 -161.70246887]
[-21.93159294 -176.46119690]
[-27.92516899 -190.21173096]
[-33.91874313 -203.96224976]
[-49.09946823 -207.17555237]
[-59.46717834 -218.72068787]
[-61.03528595 -234.15832520]
[-53.20081329 -247.55238342]
[-38.97628021 -253.75256348]
[-23.83130836 -250.37477112]
[-13.58944702 -238.71784973]
[-12.18890285 -223.26411438]
[-20.16821289 -209.95582581]
[-14.17463875 -196.20530701]
[-8.18106461 -182.45477295]
[3.99719119 -173.87925720]
[2.41855001 -158.13700867]
[8.41212463 -144.38647461]
[14.40569878 -130.63595581]
[20.39927292 -116.88542175]
[33.01734161 -113.85543823]
[41.67821121 -103.93074036]
[43.01127243 -90.62948608]
[36.29874039 -78.84352112]
[41.88606644 -64.92296600]
[56.35083008 -61.47207642]
[66.12555695 -50.03010941]
[67.30230713 -34.84891510]
[59.22084808 -21.73418427]
[64.80817413 -7.81363010]
[70.39549255 6.10692310]
[75.98281860 20.02747726]
[81.57014465 33.94802856]
[87.15747070 47.86858368]
[99.37183380 46.31368256]
[111.61923981 47.58236694]
[123.25554657 51.60790634]
[133.66874695 58.17858124]
[142.31115723 66.94881439]
[148.72827148 77.45735168]
[152.58255005 89.15148926]
[153.67131042 101.41619873]
[151.93727112 113.60643005]
[165.77430725 119.39749908]
[179.61134338 125.18857574]
[193.44836426 130.97964478]
[208.77827454 126.24959564]
[221.95274353 135.40455627]
[222.86541748 151.42163086]
[210.81620789 162.01388550]
[195.04821777 159.05584717]
[187.65730286 144.81668091]
[173.82026672 139.02560425]
[159.98323059 133.23452759]
[146.14619446 127.44345856]
[137.53109741 138.39312744]
[126.38865662 146.75740051]
[113.46920776 151.97302246]
[99.64273834 153.68879700]
[97.44858551 168.52746582]
[95.25444031 183.36611938]
[102.34023285 194.26684570]
[100.10420227 206.66517639]
[90.30381775 213.92330933]
[87.67500305 228.69116211]
[85.04618835 243.45899963]
[82.41737366 258.22683716]
[93.80274200 268.63726807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 105]
[9 104]
[10 103]
[11 102]
[13 99]
[14 98]
[15 97]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[31 63]
[32 62]
[35 58]
[36 57]
[37 56]
[38 55]
[40 53]
[41 52]
[42 51]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
