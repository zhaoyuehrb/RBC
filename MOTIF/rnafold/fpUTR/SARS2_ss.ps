%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGAGGCGGGACACAGACGACGAUUGGGCGACGAAGGACUCUAUCGCGGUCAACUUUCCUCAGGAUCUGAUUGGCUCGUCACGGUCAGGUUCGCUGCCUUGCAAUUGGUCUAAACGCGGAGUGGGCGGGACGAAGUGCCGCCUUGUUCCCGGUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[238.87414551 186.94480896]
[225.69305420 179.78527832]
[213.97612000 182.91677856]
[202.92179871 177.01808167]
[198.73918152 164.78201294]
[185.70030212 157.36666870]
[172.66140747 149.95132446]
[159.62252808 142.53596497]
[146.58363342 135.12062073]
[133.54473877 127.70526886]
[120.50585938 120.28992462]
[113.56397247 125.45957184]
[105.40101624 128.33726501]
[96.75183868 128.66392517]
[88.39507294 126.41016388]
[81.08302307 121.77886963]
[75.47394562 115.18696594]
[72.07279205 107.22787476]
[57.07350540 107.08152771]
[43.19850159 114.68382263]
[30.54732513 106.82272339]
[15.54803848 106.67637634]
[6.26693630 118.97138977]
[-8.30392075 123.39218903]
[-22.51586342 118.44398499]
[-30.98753548 106.22233582]
[-45.98682022 106.07598877]
[-60.98610687 105.92964935]
[-75.98538971 105.78330231]
[-89.86039734 113.38559723]
[-102.51157379 105.52449036]
[-117.51086426 105.37814331]
[-126.17318726 108.43589783]
[-132.80064392 105.07975769]
[-147.79421997 104.64077759]
[-162.78779602 104.20179749]
[-177.78492737 103.90911865]
[-192.78422546 103.76277924]
[-206.79188538 112.29022217]
[-221.04893494 104.18660736]
[-220.88894653 87.78824615]
[-206.47648621 79.96435547]
[-192.63787842 88.76348877]
[-177.63859558 88.90983582]
[-170.88523865 85.81482697]
[-162.34881592 89.20822144]
[-147.35523987 89.64720154]
[-132.36166382 90.08618164]
[-117.36451721 90.37886047]
[-102.36522675 90.52520752]
[-89.56307220 82.91244507]
[-75.83905029 90.78401184]
[-60.83975983 90.93035889]
[-45.84047699 91.07670593]
[-30.84119034 91.22305298]
[-22.13266373 79.16902161]
[-7.82688046 74.49906158]
[6.65494585 79.20332336]
[15.69438362 91.67708588]
[30.69367027 91.82343292]
[43.49582291 84.21067047]
[57.21985245 92.08224487]
[72.21913910 92.22859192]
[79.30549622 79.90251923]
[91.41889954 72.45846558]
[90.83366394 57.46989059]
[90.24842072 42.48131180]
[89.66317749 27.49273300]
[89.07793427 12.50415421]
[88.49269867 -2.48442459]
[87.90745544 -17.47300339]
[87.32221222 -32.46158218]
[86.73696899 -47.45016098]
[86.15173340 -62.43873978]
[85.56649017 -77.42731476]
[72.59226227 -85.93901062]
[67.13043213 -100.46306610]
[71.28119659 -115.41468048]
[83.44849396 -125.04465485]
[98.95375824 -125.65007019]
[111.83489227 -116.99813080]
[117.13883209 -102.41568756]
[112.82611847 -87.50997925]
[100.55506897 -78.01255798]
[101.14031219 -63.02397919]
[101.72554779 -48.03540039]
[102.31079102 -33.04682159]
[102.89603424 -18.05824471]
[103.48127747 -3.06966591]
[104.06651306 11.91891289]
[104.65175629 26.90749168]
[105.23699951 41.89606857]
[105.82224274 56.88464737]
[106.40747833 71.87322998]
[124.64775848 85.01136780]
[127.92120361 107.25103760]
[140.96009827 114.66638184]
[153.99897766 122.08173370]
[167.03787231 129.49708557]
[180.07675171 136.91242981]
[193.11564636 144.32777405]
[206.15454102 151.74311829]
[224.53654480 151.17514038]
[232.85258484 166.60418701]
[246.03367615 173.76371765]
[264.40109253 172.83717346]
[273.01660156 188.10102844]
[286.33486938 195.00199890]
[299.65316772 201.90296936]
[312.97143555 208.80395508]
[321.06842041 203.25538635]
[330.58001709 201.07843018]
[340.16940308 202.53529358]
[348.50479126 207.38050842]
[354.44436646 214.90104675]
[357.19277954 224.02096558]
[356.40728760 233.45524597]
[369.14691162 241.37367249]
[378.13693237 243.26187134]
[382.05575562 249.57293701]
[394.63848877 257.73843384]
[407.22119141 265.90393066]
[419.80392456 274.06942749]
[438.18768311 274.57788086]
[445.58676147 290.46701050]
[458.32641602 298.38543701]
[471.06604004 306.30386353]
[483.80569458 314.22229004]
[496.54534912 322.14071655]
[509.28497314 330.05914307]
[525.09008789 330.77282715]
[531.81500244 344.06286621]
[544.55462646 351.98129272]
[561.19879150 355.20748901]
[562.70623779 372.09426880]
[546.89666748 378.21755981]
[536.63623047 364.72094727]
[523.89654541 356.80252075]
[509.00268555 356.65521240]
[501.36654663 342.79879761]
[488.62692261 334.88037109]
[475.88726807 326.96194458]
[463.14761353 319.04351807]
[450.40798950 311.12509155]
[437.66833496 303.20666504]
[425.78826904 305.64727783]
[415.09799194 299.11193848]
[411.63842773 286.65213013]
[399.05569458 278.48663330]
[386.47299194 270.32113647]
[373.89025879 262.15567017]
[361.22848511 254.11331177]
[348.48886108 246.19488525]
[329.11029053 252.55982971]
[311.02890015 242.50697327]
[306.07046509 222.12222290]
[292.75216675 215.22125244]
[279.43389893 208.32028198]
[266.11563110 201.41929626]
[254.46202087 204.77882385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[18 63]
[19 62]
[21 60]
[22 59]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[34 48]
[35 47]
[36 46]
[37 44]
[38 43]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[107 159]
[108 158]
[109 157]
[110 156]
[117 153]
[118 152]
[120 151]
[121 150]
[122 149]
[123 148]
[125 145]
[126 144]
[127 143]
[128 142]
[129 141]
[130 140]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
