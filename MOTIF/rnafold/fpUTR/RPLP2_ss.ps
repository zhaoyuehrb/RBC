%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUAACCCCGCCUCUUGCGUCGGCGCCUUCCUUUUCCUCCCUGUCGCCACCGAGGUCGCACGCGUGAGACUUCUCCGCCGCCUCCGCCGCAGACGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[-27.95557976 294.21066284]
[-34.40655899 307.75262451]
[-40.85753632 321.29458618]
[-33.32865524 334.86276245]
[-35.24625778 350.26089478]
[-45.87298203 361.56808472]
[-61.12263489 364.43649292]
[-75.13141632 357.76312256]
[-82.51266479 344.11407471]
[-80.42813873 328.73764038]
[-69.67937469 317.54641724]
[-54.39950180 314.84359741]
[-47.94852448 301.30163574]
[-41.49754715 287.75967407]
[-47.62854004 277.91644287]
[-48.17805481 266.21197510]
[-42.88825607 255.62127686]
[-33.00058746 248.89401245]
[-20.96649551 247.84083557]
[-13.72461319 234.70481873]
[-6.48272991 221.56878662]
[-7.11392641 206.68756104]
[6.32451344 198.33778381]
[13.56639671 185.20175171]
[20.80827904 172.06573486]
[28.05016327 158.92971802]
[35.29204559 145.79368591]
[21.52981377 151.76034546]
[6.54875755 152.51397705]
[-7.74279165 147.95857239]
[-19.52433395 138.67443848]
[-27.29510117 125.84419250]
[-30.06523132 111.10219574]
[-27.48185539 96.32633209]
[-19.87405396 83.39878845]
[-8.21092796 73.96631622]
[6.02183676 69.23045349]
[21.01123047 69.79446411]
[34.84785843 75.58650970]
[45.76916885 85.86877441]
[52.38397598 99.33147430]
[53.84966660 114.25968933]
[49.98054504 128.74967957]
[61.90335846 119.64768219]
[73.82617950 110.54567719]
[85.74899292 101.44367981]
[91.30822754 88.61454773]
[105.14900208 86.63350677]
[117.07182312 77.53150177]
[117.07576752 67.81537628]
[121.57389069 59.36053848]
[129.39857483 54.08372116]
[138.64611816 53.11127853]
[147.13909912 56.54090881]
[159.82302856 48.53355789]
[172.50697327 40.52620697]
[185.19091797 32.51885605]
[190.89166260 25.17127228]
[198.37150574 24.46862411]
[211.28715515 16.84065819]
[213.99588013 11.99927425]
[217.94560242 9.08095360]
[222.14706421 8.23293781]
[225.70603943 9.16790962]
[239.24800110 2.71693182]
[252.78997803 -3.73404622]
[259.31973267 -10.35581112]
[266.83016968 -10.16886425]
[280.55734253 -16.21571541]
[294.28454590 -22.26256752]
[303.53430176 -35.80412674]
[319.86383057 -34.29473877]
[326.47473145 -19.28713226]
[316.56625366 -6.21984434]
[300.33139038 -8.53538227]
[286.60421753 -2.48853111]
[272.87701416 3.55832028]
[259.24093628 9.80792141]
[245.69898987 16.25889969]
[232.15701294 22.70987701]
[218.91511536 29.75631142]
[205.99946594 37.38427734]
[193.19825745 45.20279694]
[180.51432800 53.21014786]
[167.83038330 61.21749878]
[155.14643860 69.22484589]
[147.46138000 88.28148651]
[126.17382050 89.45432281]
[114.25100708 98.55632019]
[108.69177246 111.38545227]
[94.85099792 113.36649323]
[82.92817688 122.46849823]
[71.00536346 131.57049561]
[59.08254623 140.67250061]
[55.63429260 149.16329956]
[48.42807007 153.03556824]
[41.18618774 166.17160034]
[33.94430542 179.30761719]
[26.70242119 192.44364929]
[19.46053696 205.57966614]
[19.57374573 221.40046692]
[6.65329456 228.81066895]
[-0.58858860 241.94670105]
[-7.83047152 255.08271790]
[-1.81675839 272.91326904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[19 104]
[20 103]
[21 102]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[43 94]
[44 93]
[45 92]
[46 91]
[48 89]
[49 88]
[54 86]
[55 85]
[56 84]
[57 83]
[59 82]
[60 81]
[64 80]
[65 79]
[66 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
