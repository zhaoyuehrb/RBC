%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAGGGCGGCAGCGGCGGCGGCGGGAGCGCGCCCGUUGCAAGAUGGCGGCGGCCAUGCUGGGCCCCGGGGCUGUGUGUGCGCAGCGGGCGGCGGCGCGGCCCGGAAGGCUGGCGCGGCGACGGCGUUAGCCCGGCCCUCGGCCCCUCUUUGCGGCCGCUCCCUCCGCCUAUUCCCUCCUUGCUCGAG\
) } def
/len { sequence length } bind def

/coor [
[127.48164368 220.26560974]
[139.85469055 211.16596985]
[138.12242126 196.26632690]
[136.39015198 181.36669922]
[134.65788269 166.46705627]
[132.92561340 151.56741333]
[131.19334412 136.66777039]
[129.46107483 121.76813507]
[122.08478546 120.41153717]
[107.33220673 117.69832611]
[99.95591736 116.34172058]
[93.03580475 129.65007019]
[94.29881287 146.00050354]
[80.61933136 155.04504395]
[66.06963348 147.47944641]
[65.61720276 131.08653259]
[79.72746277 122.72994995]
[86.64757538 109.42160797]
[90.08893585 94.82170868]
[89.84092712 79.82375336]
[89.59291840 64.82580566]
[89.34490967 49.82785797]
[89.09690094 34.82990646]
[81.13248444 21.15954971]
[88.65829468 8.30608940]
[88.41028595 -6.69186020]
[88.16227722 -21.68980980]
[87.91426849 -36.68775940]
[87.66625977 -51.68570709]
[87.41825104 -66.68365479]
[87.17024231 -81.68161011]
[83.89454651 -90.22819519]
[87.04418182 -96.92910767]
[87.04418182 -111.92910767]
[87.04418182 -126.92910767]
[84.71619415 -130.64263916]
[83.79508209 -134.51440430]
[84.15626526 -138.07934570]
[85.53601837 -140.96159363]
[87.57292938 -142.91226196]
[88.56428528 -157.87947083]
[89.55564880 -172.84666443]
[90.54700470 -187.81387329]
[88.22241974 -192.52763367]
[87.97541046 -197.19306946]
[89.43666077 -201.02301025]
[91.97680664 -203.49279785]
[93.70907593 -218.39244080]
[87.61724854 -232.99382019]
[96.77258301 -244.74240112]
[98.50485229 -259.64202881]
[96.38500977 -268.54598999]
[100.39092255 -274.77294922]
[102.36930084 -289.64190674]
[104.34768677 -304.51089478]
[106.32607269 -319.37985229]
[97.91117859 -325.98919678]
[93.04467773 -335.42776489]
[92.54858398 -345.95455933]
[96.44563293 -355.65890503]
[103.96727753 -362.80743408]
[113.70424652 -366.15359497]
[116.41745758 -380.90615845]
[119.13066101 -395.65872192]
[121.84387207 -410.41131592]
[124.55708313 -425.16387939]
[123.81332397 -440.14544678]
[119.65228271 -454.55673218]
[115.49123383 -468.96804810]
[111.33019257 -483.37936401]
[107.16915131 -497.79064941]
[101.77265930 -505.18338013]
[103.06056213 -512.47473145]
[99.13835907 -526.95281982]
[95.21616364 -541.43096924]
[91.29396057 -555.90911865]
[87.37176514 -570.38726807]
[83.44956970 -584.86535645]
[69.10013580 -590.46893311]
[60.89759827 -603.29748535]
[61.81100464 -618.31848145]
[71.28086853 -629.78405762]
[67.35866547 -644.26220703]
[63.43647003 -658.74035645]
[50.29222870 -667.93859863]
[49.43228912 -683.95861816]
[61.51631927 -694.51116943]
[77.27448273 -691.50122070]
[84.61847687 -677.23779297]
[77.91460419 -662.66253662]
[81.83679962 -648.18438721]
[85.75900269 -633.70629883]
[99.72135925 -628.58856201]
[108.09192657 -616.08270264]
[107.48645020 -600.86798096]
[97.92769623 -588.78759766]
[101.84989929 -574.30944824]
[105.77209473 -559.83129883]
[109.69429779 -545.35321045]
[113.61649323 -530.87506104]
[117.53869629 -516.39691162]
[121.58045197 -501.95169067]
[125.74150085 -487.54040527]
[129.90254211 -473.12908936]
[134.06358337 -458.71777344]
[138.22462463 -444.30648804]
[145.41284180 -442.16644287]
[159.78924561 -437.88641357]
[166.97744751 -435.74639893]
[178.34317017 -445.53518677]
[189.70889282 -455.32397461]
[201.07461548 -465.11276245]
[212.44035339 -474.90155029]
[223.80607605 -484.69033813]
[235.17179871 -494.47912598]
[246.53752136 -504.26788330]
[257.90322876 -514.05670166]
[257.52124023 -529.68957520]
[267.31759644 -541.87835693]
[282.66677856 -544.86773682]
[296.32138062 -537.24633789]
[301.83407593 -522.61267090]
[296.60198975 -507.87634277]
[283.09552002 -499.99539185]
[267.69201660 -502.69094849]
[256.32629395 -492.90216064]
[244.96057129 -483.11337280]
[233.59484863 -473.32461548]
[222.22912598 -463.53582764]
[210.86340332 -453.74703979]
[199.49768066 -443.95825195]
[188.13195801 -434.16946411]
[176.76623535 -424.38067627]
[155.81906128 -416.44604492]
[139.30966187 -422.45068359]
[136.59645081 -407.69808960]
[133.88323975 -392.94552612]
[131.17002869 -378.19296265]
[128.45681763 -363.44036865]
[140.66664124 -348.27972412]
[137.77381897 -328.72195435]
[121.19503021 -317.40145874]
[119.21664429 -302.53250122]
[117.23826599 -287.66354370]
[115.25988007 -272.79458618]
[113.40449524 -257.90975952]
[111.67222595 -243.01013184]
[117.88795471 -229.47447205]
[108.60871124 -216.66017151]
[106.87644196 -201.76052856]
[105.51420593 -186.82250977]
[104.52285004 -171.85531616]
[103.53149414 -156.88810730]
[102.54013062 -141.92089844]
[102.04418182 -126.92910767]
[102.04418182 -111.92910767]
[102.04418182 -96.92910767]
[102.16819000 -81.92961884]
[102.41619873 -66.93167114]
[102.66420746 -51.93371964]
[102.91221619 -36.93576813]
[103.16022491 -21.93781853]
[103.40823364 -6.93986940]
[103.65624237 8.05807972]
[111.60292053 20.65568352]
[104.09484863 34.58189774]
[104.34285736 49.57984924]
[104.59086609 64.57779694]
[104.83887482 79.57574463]
[105.08688354 94.57369995]
[113.21152496 91.54503632]
[122.71110535 92.45082855]
[132.09585571 97.66800690]
[139.80451965 107.07272339]
[144.36071777 120.03586578]
[146.09298706 134.93550110]
[147.82525635 149.83514404]
[149.55752563 164.73478699]
[151.28979492 179.63442993]
[153.02206421 194.53405762]
[154.75433350 209.43370056]
[168.88500977 215.45195007]
[178.10060120 227.73887634]
[179.92211914 242.98936462]
[173.85961914 257.10113525]
[161.54385376 266.27813721]
[146.28773499 268.05184937]
[132.19505310 261.94515991]
[123.05667877 249.60069275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 181]
[3 180]
[4 179]
[5 178]
[6 177]
[7 176]
[8 175]
[11 18]
[12 17]
[19 170]
[20 169]
[21 168]
[22 167]
[23 166]
[25 164]
[26 163]
[27 162]
[28 161]
[29 160]
[30 159]
[31 158]
[33 157]
[34 156]
[35 155]
[40 154]
[41 153]
[42 152]
[43 151]
[47 150]
[48 149]
[50 147]
[51 146]
[53 145]
[54 144]
[55 143]
[56 142]
[62 139]
[63 138]
[64 137]
[65 136]
[66 135]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[82 92]
[83 91]
[84 90]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
