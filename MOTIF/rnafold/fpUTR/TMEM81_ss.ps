%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUAUUGACAAUACAUGCAUCAUAUCUUUUGACUUUGAAGGAUAUCUCAUGUCAAAGGAAUCAAGUUAUGAUUUAUAGAGGAUUCAGCUGGAAUACCUUGUGGGUGCUGGCUGAGGGUGGCAAAACGCCUACCGAGAC\
) } def
/len { sequence length } bind def

/coor [
[108.74132538 157.89749146]
[104.77838898 172.36453247]
[100.81546021 186.83157349]
[107.47828674 201.42561340]
[100.09418488 215.66831970]
[84.32760620 218.63389587]
[72.27332306 208.04739380]
[73.17834473 192.02989197]
[86.34842682 182.86863708]
[90.31135559 168.40159607]
[94.27428436 153.93455505]
[79.20893860 147.76564026]
[67.23931885 137.70748901]
[59.26028824 125.01740265]
[55.70936966 111.11756134]
[56.55392075 97.44058228]
[61.32729340 85.28356171]
[48.50722885 77.49601746]
[35.68716431 69.70846558]
[19.87558365 69.15666962]
[13.01492786 55.93621063]
[0.19486341 48.14865875]
[-12.62520123 40.36110687]
[-25.44526672 32.57355881]
[-38.26533127 24.78600693]
[-51.08539581 16.99845695]
[-64.47317505 10.23330402]
[-78.34730530 4.53167152]
[-92.22142792 -1.16996133]
[-106.09555817 -6.87159395]
[-119.96968079 -12.57322693]
[-133.84381104 -18.27486038]
[-147.71794128 -23.97649193]
[-161.59205627 -29.67812538]
[-175.46618652 -35.37975693]
[-187.70100403 -31.13294220]
[-199.16876221 -36.22880554]
[-203.90243530 -47.41560745]
[-217.64608765 -53.42492676]
[-231.38975525 -59.43424606]
[-244.70715332 -51.47018051]
[-260.15927124 -52.88842392]
[-271.80447388 -63.14362717]
[-275.16491699 -78.29245758]
[-268.94842529 -92.50988007]
[-255.54542542 -100.32901001]
[-240.10958862 -98.74322510]
[-228.57633972 -88.36229706]
[-225.38043213 -73.17790222]
[-211.63677979 -67.16857910]
[-197.89311218 -61.15926361]
[-180.62368774 -64.07897186]
[-169.76455688 -49.25388336]
[-155.89042664 -43.55225372]
[-142.01629639 -37.85062027]
[-128.14218140 -32.14898682]
[-114.26805115 -26.44735336]
[-100.39392090 -20.74571991]
[-86.51979828 -15.04408741]
[-72.64566803 -9.34245491]
[-58.77154541 -3.64082217]
[-64.07049561 -17.67368126]
[-59.28678894 -31.89043999]
[-46.58253479 -39.86552048]
[-31.69969368 -37.99441528]
[-21.36489105 -27.12280846]
[-20.24916458 -12.16436005]
[-28.85679245 0.12013168]
[-43.29784393 4.17839146]
[-30.47777939 11.96594238]
[-17.65771484 19.75349236]
[-4.83765078 27.54104233]
[7.98241377 35.32859421]
[20.80247879 43.11614609]
[35.69708252 43.11091614]
[43.47471619 56.88839722]
[56.29478073 64.67594910]
[69.11484528 72.46350098]
[80.84471130 61.26202774]
[96.58853149 55.07705688]
[114.19834137 55.31198120]
[131.05616760 62.45296860]
[144.46296692 75.92281342]
[152.06712341 94.09795380]
[152.26458740 114.49598694]
[166.92980957 111.34463501]
[181.59504700 108.19327545]
[196.26026917 105.04191589]
[210.92550659 101.89055634]
[225.59072876 98.73919678]
[240.25596619 95.58783722]
[254.92118835 92.43647766]
[269.58642578 89.28512573]
[274.83953857 85.05835724]
[280.57434082 84.29682159]
[284.97463989 86.33544922]
[299.76568604 83.84050751]
[314.55673218 81.34556580]
[329.34780884 78.85062408]
[344.13885498 76.35568237]
[358.75164795 67.75905609]
[371.05755615 79.42101288]
[363.25796509 94.47434235]
[346.63378906 91.14673615]
[331.84274292 93.64167786]
[317.05166626 96.13661957]
[302.26062012 98.63156128]
[287.46957397 101.12650299]
[272.73776245 103.95034790]
[258.07254028 107.10170746]
[243.40731812 110.25306702]
[228.74209595 113.40442657]
[214.07685852 116.55578613]
[199.41163635 119.70714569]
[184.74639893 122.85850525]
[170.08117676 126.00985718]
[155.41593933 129.16122437]
[150.18109131 143.21812439]
[159.21276855 155.19429016]
[168.24444580 167.17047119]
[177.40898132 179.04530334]
[186.70521545 190.81729126]
[196.00146484 202.58927917]
[211.70295715 205.88214111]
[218.78923035 220.27534485]
[211.82431030 234.72766113]
[196.15109253 238.15249634]
[183.79270935 227.92263794]
[184.22947693 211.88552856]
[174.93322754 200.11354065]
[165.63697815 188.34155273]
[158.96917725 185.01472473]
[156.26826477 176.20214844]
[147.23658752 164.22596741]
[138.20492554 152.24978638]
[130.83901978 153.66171265]
[133.66287231 168.39350891]
[136.48648071 183.12536621]
[121.75458527 185.94871521]
[118.93107605 171.21736145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[17 78]
[18 77]
[19 76]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[38 51]
[39 50]
[40 49]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
[118 135]
[119 134]
[120 133]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
