%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUGGGCCAGGCGCCGGGGCAGGAAGGGAGGCGGCCGCCGUGCCAUUCUUAAAGGCGCCCGAGUGUAGGCGACAGGCCGCUGACGGCCGGAAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[150.38334656 254.39204407]
[147.11276245 246.33267212]
[145.33593750 237.81243896]
[145.11227417 229.10597229]
[146.45106506 220.49426270]
[149.31114197 212.25563049]
[153.60217285 204.65670776]
[159.18740845 197.94381714]
[150.37063599 185.80856323]
[141.55384827 173.67329407]
[129.55419922 171.41989136]
[122.12847900 161.22488403]
[123.76492310 148.31224060]
[115.33367920 135.90603638]
[106.90242767 123.49982452]
[98.47117615 111.09362030]
[89.84609222 98.82137299]
[81.02931976 86.68611908]
[72.21253967 74.55086517]
[63.39575958 62.41560745]
[54.38945770 50.42033768]
[45.19585037 38.56801224]
[28.38692093 39.36210251]
[14.51690388 30.12814522]
[8.87771797 14.62426853]
[13.48116207 -1.04610431]
[3.91980243 -12.60380268]
[-5.64155769 -24.16150093]
[-15.20291710 -35.71920013]
[-24.76427650 -47.27689743]
[-39.52252960 -52.97817230]
[-41.67350769 -67.71664429]
[-51.23486710 -79.27434540]
[-60.79622650 -90.83204651]
[-70.35758972 -102.38973999]
[-85.99500275 -102.31797791]
[-97.98697662 -112.35424042]
[-100.67126465 -127.75971222]
[-92.78042603 -141.26040649]
[-78.04026794 -146.48170471]
[-63.41065598 -140.95826721]
[-55.79923248 -127.29808807]
[-58.79988861 -111.95110321]
[-49.23852921 -100.39340210]
[-39.67716599 -88.83570099]
[-30.11580849 -77.27800751]
[-16.04144669 -72.40341187]
[-13.20657825 -56.83826065]
[-3.64521885 -45.28055954]
[5.91614103 -33.72286224]
[15.47750092 -22.16516304]
[25.03886032 -10.60746384]
[38.32941055 -12.67339325]
[50.99024963 -7.82059717]
[59.63274002 2.76794434]
[61.88638687 16.35904884]
[57.04817581 29.37440681]
[66.24178314 41.22673035]
[72.94907379 44.64386368]
[75.53101349 53.59882736]
[84.34779358 65.73408508]
[93.16457367 77.86933899]
[101.98135376 90.00459290]
[109.01765442 94.25131226]
[110.87738037 102.66236877]
[119.30863190 115.06857300]
[127.73988342 127.47478485]
[136.17114258 139.88099670]
[152.88636780 147.40356445]
[153.68910217 164.85652161]
[162.50588989 176.99177551]
[171.32266235 189.12702942]
[194.01824951 183.89822388]
[216.48425293 189.82376099]
[233.56637573 205.49041748]
[241.37054443 227.25628662]
[238.15061951 250.09730530]
[251.06175232 257.73294067]
[263.97290039 265.36856079]
[276.88400269 273.00418091]
[289.79513550 280.63980103]
[306.19012451 280.27038574]
[314.47515869 294.42276001]
[306.12731934 308.53820801]
[289.73413086 308.09591675]
[282.15951538 293.55093384]
[269.24838257 285.91531372]
[256.33728027 278.27969360]
[243.42613220 270.64407349]
[230.51499939 263.00845337]
[224.46105957 269.16415405]
[217.39857483 274.14056396]
[209.55432129 277.77529907]
[201.18063354 279.94915771]
[192.54731750 280.58996582]
[183.93290710 279.67495728]
[175.61569214 277.23159790]
[167.86476135 273.33676147]
[160.93124390 268.11431885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 72]
[9 71]
[10 70]
[13 68]
[14 67]
[15 66]
[16 65]
[17 63]
[18 62]
[19 61]
[20 60]
[21 58]
[22 57]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[32 46]
[33 45]
[34 44]
[35 43]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
