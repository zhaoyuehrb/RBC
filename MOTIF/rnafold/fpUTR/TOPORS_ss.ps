%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAGGAAGAGGCGGAGUCGAGGUGAGGGAGUGAAAUGCUUAAUUCAGGAAUGGAUUUUGGAGUUUCUGGGUGCUGAAGAAAUAGGGCCUUUCCGCCUGCGGGCCCAGUGAGUCGACACGGUGGGGGCCCGCGAUCCCCGGGACUUACCACUGAAUAAAUCCAGUCCAGCGUGCGACGACUUACUGGCUUC\
) } def
/len { sequence length } bind def

/coor [
[-251.08822632 103.38308716]
[-256.82849121 106.52969360]
[-263.09423828 108.37107849]
[-269.59350586 108.82830048]
[-276.02487183 107.88677216]
[-282.09149170 105.59660339]
[-287.51480103 102.07000732]
[-292.04727173 97.47580719]
[-295.48373413 92.03134918]
[-297.67065430 85.99225616]
[-298.51296997 79.64040375]
[-313.15225220 76.37063599]
[-327.79153442 73.10086823]
[-342.43081665 69.83110809]
[-357.07009888 66.56134033]
[-371.70938110 63.29157257]
[-386.34866333 60.02180862]
[-391.35733032 61.59582520]
[-396.00119019 61.12800598]
[-399.56072998 59.10223389]
[-401.61444092 56.21855164]
[-416.07669067 52.23808670]
[-430.53890991 48.25762177]
[-445.00112915 44.27715683]
[-459.46334839 40.29669189]
[-466.24575806 53.21047592]
[-475.56826782 64.42120361]
[-487.01898193 73.43751526]
[-500.09280396 79.86490631]
[-514.21368408 83.42301178]
[-528.76000977 83.95780945]
[-543.09204102 81.44832611]
[-556.58001709 76.00740051]
[-568.63171387 67.87665558]
[-578.71856689 57.41572952]
[-586.39880371 45.08639908]
[-591.33691406 31.43218040]
[-593.31811523 17.05437660]
[-592.25775146 2.58559442]
[-606.65325928 -1.62974393]
[-611.75372314 -0.38494805]
[-616.35729980 -1.15392661]
[-619.77752686 -3.40700746]
[-621.63922119 -6.41820621]
[-635.81182861 -11.33121681]
[-649.98443604 -16.24422836]
[-664.15704346 -21.15723801]
[-678.32958984 -26.07024956]
[-692.50219727 -30.98326111]
[-706.67480469 -35.89627075]
[-720.84735107 -40.80928040]
[-735.01995850 -45.72229385]
[-749.19256592 -50.63530350]
[-760.75231934 -40.52256775]
[-775.82281494 -37.56030655]
[-790.35021973 -42.54535294]
[-800.42669678 -54.13676071]
[-803.34167480 -69.21649170]
[-798.31109619 -83.72817993]
[-786.68817139 -93.76824951]
[-771.59942627 -96.63597107]
[-757.10357666 -91.55995178]
[-747.09997559 -79.90560150]
[-744.27954102 -64.80789185]
[-730.10693359 -59.89488220]
[-715.93438721 -54.98187256]
[-701.76177979 -50.06886292]
[-687.58917236 -45.15584946]
[-673.41656494 -40.24283981]
[-659.24401855 -35.32983017]
[-645.07141113 -30.41681862]
[-630.89880371 -25.50380707]
[-616.72625732 -20.59079742]
[-602.43792725 -16.02526093]
[-588.04241943 -11.80992317]
[-580.59106445 -25.34095383]
[-570.31848145 -36.88658524]
[-557.73461914 -45.86918259]
[-543.46484375 -51.83842087]
[-528.21948242 -54.49386597]
[-512.75799561 -53.70009232]
[-497.85128784 -49.49359131]
[-484.24340820 -42.08108521]
[-472.61416626 -31.82940292]
[-463.54544067 -19.24729729]
[-457.49176025 -4.96021795]
[-454.75778198 10.32079029]
[-455.48287964 25.83446884]
[-441.02066040 29.81493378]
[-426.55844116 33.79539871]
[-412.09622192 37.77586365]
[-397.63400269 41.75632858]
[-383.07888794 45.38252258]
[-368.43960571 48.65229034]
[-353.80032349 51.92205429]
[-339.16104126 55.19182205]
[-324.52175903 58.46158600]
[-309.88247681 61.73135376]
[-295.24319458 65.00112152]
[-276.81918335 49.63430786]
[-252.78523254 52.79070282]
[-238.66665649 72.80050659]
[-223.69099426 73.65462494]
[-208.71533203 74.50874329]
[-193.73966980 75.36286163]
[-178.76399231 76.21697235]
[-171.89656067 73.45485687]
[-163.55213928 77.20883179]
[-148.59236145 78.30659485]
[-133.63258362 79.40435028]
[-118.67280579 80.50211334]
[-103.71303558 81.59987640]
[-88.75325775 82.69763947]
[-73.79347992 83.79540253]
[-58.83370209 84.89315796]
[-43.87392426 85.99092102]
[-27.14366913 76.31381226]
[-10.63126469 87.85952759]
[4.35631704 88.46977234]
[19.34389877 89.08001709]
[34.33148193 89.69026184]
[47.36299133 82.47714996]
[60.83696365 90.76947784]
[75.82454681 91.37972260]
[90.81212616 91.98996735]
[109.95127869 52.73957825]
[124.41349792 48.75911331]
[138.87571716 44.77864838]
[153.30506897 40.68061447]
[167.70059204 36.46527481]
[182.09611511 32.24993515]
[196.49162292 28.03459740]
[202.60568237 13.64181328]
[216.56420898 6.59245157]
[231.77641296 10.21500492]
[241.05955505 22.79901505]
[240.03042603 38.40269852]
[229.17494202 49.65847015]
[213.61872864 51.25170135]
[200.70697021 42.43011475]
[186.31144714 46.64545441]
[171.91592407 50.86079025]
[157.52041626 55.07612991]
[151.97621155 59.98049164]
[142.85618591 59.24087524]
[128.39396667 63.22133636]
[113.93173981 67.20180511]
[113.26118469 74.67176819]
[125.52915955 83.30291748]
[111.92006683 89.61169434]
[111.24951172 97.08165741]
[124.77159882 103.57419586]
[138.29370117 110.06673431]
[151.81578064 116.55927277]
[165.40702820 109.07209778]
[180.79919434 111.03697968]
[192.07368469 121.69837952]
[194.89523315 136.95677185]
[188.17887878 150.94499207]
[174.50721741 158.28428650]
[159.13726807 156.15254211]
[147.97909546 145.36946106]
[145.32324219 130.08135986]
[131.80116272 123.58882141]
[118.27906036 117.09628296]
[104.75697327 110.60374451]
[90.20188141 106.97755432]
[75.21430206 106.36730957]
[60.22671890 105.75706482]
[46.12319565 112.92652130]
[33.72123718 104.67784882]
[18.73365402 104.06760406]
[3.74607253 103.45735931]
[-11.24150944 102.84711456]
[-18.81418228 110.68160248]
[-29.23595810 112.99900055]
[-39.00435257 109.26832581]
[-44.97168732 100.95069885]
[-59.93146133 99.85293579]
[-74.89124298 98.75517273]
[-89.85101318 97.65741730]
[-104.81079102 96.55965424]
[-119.77056885 95.46189117]
[-134.73034668 94.36412811]
[-149.69012451 93.26637268]
[-164.64990234 92.16860962]
[-179.61811829 91.19263458]
[-194.59378052 90.33852386]
[-209.56944275 89.48440552]
[-224.54510498 88.63028717]
[-239.52076721 87.77617645]
[-242.22433472 93.78865051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[39 75]
[40 74]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[102 191]
[103 190]
[104 189]
[105 188]
[106 187]
[108 186]
[109 185]
[110 184]
[111 183]
[112 182]
[113 181]
[114 180]
[115 179]
[116 178]
[118 174]
[119 173]
[120 172]
[121 171]
[123 169]
[124 168]
[125 167]
[126 147]
[127 146]
[128 145]
[129 143]
[130 142]
[131 141]
[132 140]
[151 166]
[152 165]
[153 164]
[154 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
