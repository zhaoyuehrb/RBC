%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCCGUCGCUUCUUCCGGAGCCGUACGUGGCACCGCCCCGCUCGCGGGCGGCCGCGGGGCUUGCUGGGAAGAGAGGCGAAGCCAGGUCACCUUUCAAGGACCCAGAAGUAGGGUUUUGGCCUAGGUAACGGGGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[90.67114258 176.72311401]
[75.75724030 175.11830139]
[62.68225861 167.76676941]
[53.56181717 155.85804749]
[49.87165070 141.31904602]
[52.20885086 126.50225067]
[60.19524384 113.80510712]
[72.53858948 105.28208923]
[87.24424744 102.31227112]
[73.68885040 95.88957214]
[60.13344574 89.46687317]
[46.57804489 83.04417419]
[33.02264023 76.62147522]
[19.46723938 70.19877625]
[5.91183710 63.77607727]
[-7.64356518 57.35337830]
[-21.19896698 50.93067551]
[-34.96001053 44.96127701]
[-48.91153717 39.45175552]
[-62.86306763 33.94223022]
[-76.81459808 28.43270683]
[-90.88459015 23.23316765]
[-105.06616974 18.34615898]
[-119.24774933 13.45915031]
[-133.42932129 8.57214165]
[-143.00564575 13.93656635]
[-153.73023987 13.11657333]
[-162.03189087 6.62999296]
[-165.28178406 -3.15940928]
[-179.23330688 -8.66893291]
[-193.18482971 -14.17845726]
[-207.13636780 -19.68798065]
[-221.08789062 -25.19750595]
[-235.03941345 -30.70702934]
[-241.75195312 -30.10278511]
[-246.94514465 -32.64705658]
[-249.47738647 -36.78120041]
[-263.17153931 -42.90245438]
[-276.86572266 -49.02370834]
[-290.55987549 -55.14496613]
[-304.25405884 -61.26622009]
[-318.23910522 -54.26961136]
[-333.43753052 -57.94957733]
[-342.67306519 -70.56855011]
[-341.58502197 -86.16823578]
[-330.68713379 -97.38293457]
[-315.12500000 -98.91741943]
[-302.24664307 -90.04714966]
[-298.13281250 -74.96038818]
[-284.43862915 -68.83913422]
[-270.74447632 -62.71788025]
[-257.05029297 -56.59662247]
[-243.35612488 -50.47536850]
[-229.52989197 -44.65855789]
[-215.57836914 -39.14903259]
[-201.62684631 -33.63951111]
[-187.67530823 -28.12998581]
[-173.72378540 -22.62046242]
[-159.77224731 -17.11093712]
[-140.96885681 -21.41585541]
[-128.54231262 -5.60943604]
[-114.36074066 -0.72242737]
[-100.17916107 4.16458130]
[-85.99758148 9.05158997]
[-81.32391357 7.76309299]
[-75.79357147 9.45359039]
[-71.30506897 14.48117828]
[-57.35354233 19.99070168]
[-43.40201569 25.50022507]
[-29.45048523 31.00975037]
[-26.02689171 29.89389038]
[-21.88325882 30.43078041]
[-17.82588387 32.94434738]
[-14.77626801 37.37527466]
[-1.22086549 43.79797363]
[12.33453655 50.22067261]
[25.88993835 56.64337540]
[39.44533920 63.06607437]
[53.00074387 69.48877716]
[66.55614471 75.91147614]
[80.11154938 82.33417511]
[93.66694641 88.75687408]
[103.76303864 87.80405426]
[111.31460571 94.40473938]
[126.08027649 97.04576111]
[140.84594727 99.68679047]
[153.72332764 90.92263031]
[168.66020203 93.81134796]
[176.93612671 106.14198303]
[191.70179749 108.78300476]
[206.64868164 103.59635925]
[217.81483459 113.45365906]
[232.58049011 116.09468079]
[247.34616089 118.73571014]
[262.11184692 121.37673950]
[272.60665894 108.64838409]
[287.99221802 102.96012115]
[304.05850220 105.76805115]
[316.45947266 116.21700287]
[321.88876343 131.39790344]
[336.70925903 133.71163940]
[351.52972412 136.02537537]
[366.35021973 138.33909607]
[381.17068481 140.65283203]
[395.99118042 142.96656799]
[410.81164551 145.28030396]
[422.47097778 134.85943604]
[438.10244751 134.42272949]
[450.32540894 144.17639160]
[453.36849976 159.51501465]
[445.79489136 173.19619751]
[431.18063354 178.76008606]
[416.42608643 173.57958984]
[408.49792480 160.10078430]
[393.67742920 157.78704834]
[378.85696411 155.47331238]
[364.03646851 153.15957642]
[349.21600342 150.84585571]
[334.39550781 148.53211975]
[319.57504272 146.21838379]
[311.69281006 157.42285156]
[299.68615723 164.15565491]
[285.88293457 165.04574585]
[272.98788452 159.86128235]
[263.55267334 149.56639099]
[259.47079468 136.14241028]
[244.70513916 133.50137329]
[229.93946838 130.86035156]
[215.17379761 128.21932983]
[201.28306580 133.59487915]
[189.06077576 123.54867554]
[174.29510498 120.90764618]
[162.25804138 129.60504150]
[147.24592590 127.13700867]
[138.20491028 114.45246124]
[123.43924713 111.81143188]
[108.67357635 109.17040253]
[118.92109680 120.12432098]
[124.02337646 134.22987366]
[123.15483856 149.20471191]
[116.45601654 162.62580872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[18 70]
[19 69]
[20 68]
[21 67]
[22 64]
[23 63]
[24 62]
[25 61]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[84 137]
[85 136]
[86 135]
[89 132]
[90 131]
[92 129]
[93 128]
[94 127]
[95 126]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
