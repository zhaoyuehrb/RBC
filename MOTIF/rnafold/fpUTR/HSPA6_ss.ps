%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCCGAGCCGGGCUGGCUGCAGAGAAACCGCAGGGAGAGCCUCACUGCUGAGCGCCCCUCGACGGCGGAGCGGCAGCAGCCUCCGUGGCCUCCAGCAUCCGACAAGAAGCUUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.60868073 212.84620667]
[96.63789368 228.07510376]
[90.46450043 241.99662781]
[79.15808105 252.19882202]
[64.67752838 256.91406250]
[49.53170395 255.32545471]
[36.34469604 247.70817566]
[27.40124512 235.38200378]
[24.25085258 220.48251343]
[27.43934631 205.59112549]
[36.41429901 193.28787231]
[49.62074280 185.70436096]
[64.77058411 184.15447998]
[69.40584564 169.88862610]
[74.04109955 155.62277222]
[78.67635345 141.35693359]
[83.31160736 127.09108734]
[87.94686127 112.82523346]
[78.20513916 101.41914368]
[63.38981628 103.76566315]
[48.57448959 106.11218262]
[33.75916672 108.45869446]
[27.64572144 122.62306976]
[14.83218956 131.21475220]
[-0.59267956 131.49215698]
[-13.70686626 123.36679077]
[-20.32567978 109.43140411]
[-18.33708382 94.13274384]
[-8.37562847 82.35255432]
[6.38001919 77.84984589]
[21.22138786 82.06141663]
[31.41264915 93.64337158]
[46.22797394 91.29685211]
[61.04330063 88.95034027]
[75.85862732 86.60382080]
[87.13622284 76.71363068]
[91.39645386 62.33133698]
[95.65668488 47.94904327]
[99.91690826 33.56674576]
[99.35898590 24.32264709]
[104.48148346 18.86642265]
[109.11673737 4.60057449]
[113.75199127 -9.66527367]
[101.14935303 -24.99028587]
[100.16486359 -44.66611862]
[111.01834106 -60.93801117]
[129.29702759 -67.49291229]
[132.41571045 -82.16512299]
[135.53437805 -96.83734131]
[138.65306091 -111.50955200]
[141.77172852 -126.18177032]
[144.89041138 -140.85398865]
[138.76454163 -158.15852356]
[150.86970520 -170.79107666]
[153.60322571 -185.53990173]
[148.51037598 -200.51899719]
[158.43746948 -211.62313843]
[161.17100525 -226.37196350]
[163.71124268 -241.15530396]
[166.05776978 -255.97062683]
[157.82910156 -269.74264526]
[163.60070801 -284.71157837]
[178.94506836 -289.39450073]
[192.09133911 -280.19909668]
[192.95480347 -264.17929077]
[180.87309265 -253.62411499]
[178.52658081 -238.80879211]
[180.61367798 -231.62168884]
[175.91983032 -223.63842773]
[173.18629456 -208.88960266]
[178.47467041 -194.96543884]
[168.35205078 -182.80636597]
[165.61851501 -168.05754089]
[172.23310852 -157.83763123]
[169.98985291 -145.46311951]
[159.56262207 -137.73530579]
[156.44395447 -123.06309509]
[153.32527161 -108.39087677]
[150.20660400 -93.71866608]
[147.08792114 -79.04644775]
[143.96923828 -64.37423706]
[152.62422180 -58.23040771]
[158.71086121 -49.48804855]
[161.48921204 -39.16425705]
[160.60607910 -28.47094536]
[156.13963318 -18.67259598]
[148.59339905 -10.93672085]
[138.83946228 -6.19476986]
[128.01783752 -5.03001833]
[123.38258362 9.23582935]
[118.74732971 23.50167656]
[114.29920959 37.82697678]
[110.03897858 52.20927048]
[105.77874756 66.59156799]
[101.51851654 80.97386169]
[127.07649231 102.88757324]
[137.95710754 113.21289825]
[148.83772278 123.53821564]
[164.17402649 127.42518616]
[168.08004761 141.79850769]
[178.96066284 152.12382507]
[194.75099182 151.45960999]
[206.32939148 162.21675110]
[206.82661438 178.01322937]
[195.94766235 189.47724915]
[180.14682007 189.80743408]
[168.79846191 178.80787659]
[168.63534546 163.00444031]
[157.75473022 152.67912292]
[143.19668579 149.53068542]
[138.51240540 134.41882324]
[127.63179016 124.09351349]
[116.75117493 113.76818848]
[102.21270752 117.46048737]
[97.57745361 131.72633362]
[92.94219971 145.99218750]
[88.30694580 160.25804138]
[83.67169189 174.52388000]
[79.03643799 188.78973389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[18 114]
[19 35]
[20 34]
[21 33]
[22 32]
[36 95]
[37 94]
[38 93]
[39 92]
[41 91]
[42 90]
[43 89]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[54 73]
[55 72]
[57 70]
[58 69]
[59 67]
[60 66]
[96 113]
[97 112]
[98 111]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
