%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUCGGAGCAGACGGGAGUUUCUCCUCGGGGUCGGAGCAGGAGGCACGCGGAGUGUGAGGCCACGCAUGAGCGGACGCUAACCCCCUCCCCAGCCACAAAGAGUCUACAUGUCUAGGGUCUAGAC\
) } def
/len { sequence length } bind def

/coor [
[93.51914215 117.53488922]
[83.11113739 128.33644104]
[72.70313263 139.13798523]
[72.14416504 152.09434509]
[63.16255569 160.88288879]
[51.00144196 161.14198303]
[40.32944870 171.68280029]
[29.65745544 182.22360229]
[18.98546410 192.76440430]
[15.02151966 201.11618042]
[7.91672707 203.42987061]
[-3.01272106 213.70349121]
[-13.94216919 223.97709656]
[-24.87161636 234.25071716]
[-29.08307838 250.09986877]
[-44.98299789 254.11541748]
[-56.21490097 242.16650391]
[-51.22436905 226.54515076]
[-35.14523315 223.32127380]
[-24.21578407 213.04765320]
[-13.28633595 202.77403259]
[-2.35688806 192.50042725]
[8.44465828 182.09242249]
[19.11664963 171.55160522]
[29.78864288 161.01080322]
[40.46063614 150.47000122]
[44.12955093 133.35588074]
[61.90158463 128.72998047]
[72.30959320 117.92842865]
[82.71759796 107.12688446]
[88.32904816 93.21604156]
[88.32904816 78.21604156]
[88.32904816 63.21603775]
[77.42005157 46.34937668]
[87.54737854 29.95182037]
[86.80557251 14.97017384]
[86.06377411 -0.01147279]
[85.32196808 -14.99311924]
[73.89016724 -25.57384491]
[73.35128784 -40.77793121]
[83.50884247 -51.61119843]
[82.76703644 -66.59284210]
[72.41626740 -81.76208496]
[80.90253448 -97.07015991]
[79.79039001 -112.02886963]
[78.67825317 -126.98758698]
[66.54873657 -142.99900818]
[75.43243408 -160.10229492]
[73.58188629 -174.98770142]
[71.73133850 -189.87312317]
[56.85049438 -197.80511475]
[49.66474152 -212.87716675]
[52.80816269 -229.10742188]
[64.85778046 -240.18280029]
[62.63961792 -255.01788330]
[60.42145538 -269.85296631]
[58.20329666 -284.68804932]
[55.98513412 -299.52313232]
[45.35766983 -312.01269531]
[51.11434937 -327.36822510]
[67.33319855 -329.79330444]
[77.32965851 -316.79318237]
[70.82022095 -301.74130249]
[73.03838348 -286.90621948]
[75.25653839 -272.07113647]
[77.47470093 -257.23605347]
[79.69286346 -242.40095520]
[92.10666656 -237.32875061]
[100.43840790 -226.68278503]
[102.41021729 -213.19892883]
[97.39652252 -200.41078186]
[86.61675262 -191.72366333]
[88.46730042 -176.83825684]
[90.31784058 -161.95283508]
[99.01196289 -156.33802795]
[103.21463776 -146.63890076]
[101.28720856 -136.02098083]
[93.63696289 -128.09973145]
[94.74910736 -113.14101410]
[95.86124420 -98.18229675]
[104.85475159 -89.99225616]
[105.84507751 -77.46520996]
[97.74868774 -67.33464813]
[98.49049377 -52.35300446]
[109.66854095 -42.57615662]
[110.63426208 -27.39320374]
[100.30361176 -15.73492527]
[101.04541779 -0.75327861]
[101.78722382 14.22836781]
[102.52902985 29.21001434]
[110.78292084 35.45397186]
[114.25491333 45.43800735]
[111.54554749 55.88380051]
[103.32904816 63.21603775]
[103.32904816 78.21604156]
[103.32904816 93.21604156]
[108.60958099 90.18502045]
[115.45060730 89.72507477]
[122.81056976 92.36501312]
[129.50199890 98.25372314]
[134.32069397 107.12688446]
[144.72869873 117.92842865]
[155.13670349 128.72998047]
[170.28384399 133.29885864]
[173.54322815 147.83247375]
[183.95123291 158.63401794]
[194.35923767 169.43556213]
[204.76724243 180.23710632]
[220.57147217 180.27967834]
[231.65725708 191.54382324]
[231.44760132 207.34672546]
[220.06689453 218.31278992]
[204.26708984 217.93606567]
[193.42195129 206.44004822]
[193.96569824 190.64511108]
[183.55769348 179.84356689]
[173.14968872 169.04202271]
[162.74168396 158.24047852]
[148.33898926 154.44418335]
[144.33515930 139.13798523]
[133.92715454 128.33644104]
[123.51914215 117.53488922]
[116.01914215 117.53488922]
[120.65437317 131.80075073]
[108.51909637 140.61749268]
[96.38388062 131.80064392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[6 26]
[7 25]
[8 24]
[9 23]
[11 22]
[12 21]
[13 20]
[14 19]
[31 96]
[32 95]
[33 94]
[35 90]
[36 89]
[37 88]
[38 87]
[41 84]
[42 83]
[44 80]
[45 79]
[46 78]
[48 74]
[49 73]
[50 72]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[101 122]
[102 121]
[103 120]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
