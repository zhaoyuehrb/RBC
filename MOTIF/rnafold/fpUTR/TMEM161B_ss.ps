%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUUCCUGUCCCGCGCGCGCACAACUUCCGGCAGAGCCGGAAGACCCUCUCUUUCGCUGUUUGAGAGUCUCUCGGCUCAAGGACCGGGAGGUAAGAGGUUUGGGACUGCCCCGGCAACUCCAGGGUGUCUGGUCCACGACCUAUCCUAGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[103.10611725 235.55076599]
[103.33017731 250.67707825]
[98.86704254 265.13168335]
[90.15397644 277.49847412]
[78.04458618 286.56588745]
[63.72523880 291.44558716]
[48.59879303 291.65951538]
[34.14717865 287.18667603]
[21.78622627 278.46533203]
[12.72692871 266.34988403]
[7.85682726 252.02726746]
[7.65304375 236.90068054]
[12.13554382 222.45205688]
[20.86517715 210.09695435]
[32.98670197 201.04577637]
[47.31257629 196.18527222]
[62.43929672 195.99162292]
[66.87428284 181.66226196]
[71.30926514 167.33288574]
[75.74424744 153.00350952]
[69.27201080 149.53286743]
[63.28755188 145.27592468]
[57.88586044 140.30029297]
[53.15269089 134.68492126]
[49.16317749 128.51896667]
[45.98064423 121.90029144]
[43.65561295 114.93398285]
[28.78231430 116.87947845]
[13.90901375 118.82496643]
[-0.96428633 120.77046204]
[-15.83758640 122.71595001]
[-30.71088600 124.66144562]
[-45.58418655 126.60694122]
[-60.45748520 128.55242920]
[-75.37862396 136.60203552]
[-87.24422455 124.49236298]
[-78.89253235 109.73818970]
[-62.40298080 113.67913055]
[-47.52967834 111.73364258]
[-32.65637970 109.78814697]
[-17.78307915 107.84265137]
[-2.90977907 105.89716339]
[11.96352100 103.95166779]
[26.83682060 102.00617218]
[41.71012115 100.06068420]
[42.25765610 86.91123962]
[45.77914810 74.01815033]
[52.18471909 62.05527115]
[61.23164749 51.66835785]
[50.67823792 41.00883102]
[40.12482834 30.34930229]
[29.57141876 19.68977356]
[19.01800919 9.03024483]
[4.40172195 13.57147217]
[-10.64866638 10.78859901]
[-22.67468834 1.32110798]
[-28.91285133 -12.65544033]
[-27.92967224 -27.92933846]
[-19.95107651 -40.99075317]
[-6.81048822 -48.83827209]
[8.47248173 -49.66859055]
[22.38591766 -43.29090500]
[31.73261642 -31.17076302]
[34.36477280 -16.09328461]
[29.67753792 -1.52316487]
[40.23094559 9.13636398]
[50.78435516 19.79589272]
[61.33776474 30.45542145]
[71.89117432 41.11494827]
[86.08099365 36.25193024]
[87.87758636 21.35990906]
[89.67417145 6.46788883]
[91.47076416 -8.42413139]
[93.26735687 -23.31615067]
[95.06394196 -38.20817184]
[96.86053467 -53.10019302]
[98.65711975 -67.99221039]
[100.30462646 -82.90145874]
[101.80288696 -97.82644653]
[97.36885834 -114.19029999]
[111.86574554 -122.98101044]
[124.32604980 -111.48418427]
[116.72787476 -96.32819366]
[115.22961426 -81.40320587]
[117.70453644 -74.39444733]
[113.54914093 -66.19562531]
[111.75255585 -51.30360413]
[109.95596313 -36.41158295]
[108.15937805 -21.51956177]
[106.36278534 -6.62754202]
[104.56619263 8.26447868]
[102.76960754 23.15649796]
[100.97301483 38.04851913]
[119.66178894 42.01768494]
[136.03576660 51.41360855]
[148.58634949 65.21009827]
[156.20695496 81.98387146]
[158.28987122 100.06068420]
[173.16317749 102.00617218]
[188.03648376 103.95166779]
[202.90977478 105.89716339]
[217.78308105 107.84265137]
[230.23518372 98.48408508]
[245.29110718 100.66896820]
[254.13633728 112.59781647]
[269.00964355 114.54331207]
[283.88293457 116.48880768]
[298.75622559 118.43429565]
[313.62954712 120.37979126]
[328.56875610 121.72865295]
[343.55001831 122.47872162]
[358.53125000 123.22878265]
[373.51248169 123.97885132]
[387.68228149 116.94129944]
[400.00674438 125.30534363]
[414.98797607 126.05541229]
[427.80191040 116.40232086]
[443.30181885 120.54145050]
[449.59750366 135.29760742]
[441.85940552 149.35113525]
[426.02359009 151.92137146]
[414.23791504 141.03665161]
[399.25665283 140.28657532]
[386.15841675 147.37777710]
[372.76242065 138.96008301]
[357.78115845 138.21002197]
[342.79992676 137.45994568]
[327.81869507 136.70988464]
[325.63134766 138.54704285]
[322.56439209 139.60325623]
[318.92102051 139.53141785]
[315.12692261 138.10401917]
[311.68405151 135.25309753]
[296.81076050 133.30760193]
[281.93743896 131.36210632]
[267.06414795 129.41661072]
[252.19084167 127.47112274]
[240.57501221 136.72357178]
[225.46365356 134.96244812]
[215.83758545 122.71595001]
[200.96427917 120.77046204]
[186.09098816 118.82496643]
[171.21768188 116.87947845]
[156.34439087 114.93398285]
[152.62701416 125.06214142]
[147.10675049 134.33172607]
[139.97271729 142.42518616]
[131.46928406 149.06523132]
[121.88779449 154.02441406]
[111.55647278 157.13284302]
[100.82925415 158.28401184]
[90.07362366 157.43849182]
[85.63864136 171.76786804]
[81.20365143 186.09724426]
[76.76866913 200.42660522]
[89.14130402 209.13139343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 155]
[18 154]
[19 153]
[20 152]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[70 93]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 84]
[79 83]
[98 144]
[99 143]
[100 142]
[101 141]
[102 140]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[110 128]
[111 127]
[112 126]
[113 125]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
