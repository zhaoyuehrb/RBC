%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACCGGAGCCUGAGAGCCGGGCGCCGUGCGCUCCUCCCCGCGCUGUCUCGGCGGCCCAGGAAUUCACUGUCUGUAGCAUCUGCUCCUCCACAGAGGGACCCUGGA\
) } def
/len { sequence length } bind def

/coor [
[123.02482605 147.85925293]
[114.42700958 160.15060425]
[101.18482208 167.19648743]
[86.18713379 167.45977783]
[72.70578766 160.88304138]
[63.68183517 148.90104675]
[61.08390808 134.12773132]
[65.47875977 119.78600311]
[75.90762329 109.00459290]
[90.09583282 104.13550568]
[76.15561676 98.59741211]
[62.21540833 93.05931854]
[64.79386902 107.83604431]
[55.07325745 119.26012421]
[40.07433319 119.08046722]
[30.63015175 107.42681885]
[33.56182480 92.71609497]
[46.75251770 85.57316589]
[33.76213837 78.07316589]
[20.77175522 70.57316589]
[7.78137493 63.07316589]
[-5.20900631 55.57316589]
[-18.19938660 48.07316589]
[-27.34989738 46.44865417]
[-31.45396423 40.16139603]
[-44.22071457 32.28674698]
[-60.02817154 31.62732697]
[-66.79866791 18.36046219]
[-79.56541443 10.48581314]
[-92.33216095 2.61116409]
[-105.09891510 -5.26348448]
[-117.86566162 -13.13813305]
[-132.16706848 -7.11739016]
[-147.26835632 -10.68543625]
[-157.36276245 -22.47028542]
[-158.56877136 -37.94042206]
[-150.42266846 -51.14726257]
[-136.05679321 -57.01251221]
[-120.99510956 -53.28085327]
[-111.02914429 -41.38719177]
[-109.99101257 -25.90488243]
[-97.22426605 -18.03023529]
[-84.45751190 -10.15558624]
[-71.69076538 -2.28093719]
[-58.92401505 5.59371138]
[-44.02972031 5.68988609]
[-36.34606552 19.51999855]
[-23.57931519 27.39464760]
[-10.69938755 35.08278656]
[2.29099369 42.58278656]
[15.28137493 50.08278656]
[28.27175522 57.58278656]
[41.26213837 65.08278656]
[54.25251770 72.58278656]
[67.75350189 79.11911011]
[81.69371033 84.65719604]
[95.63392639 90.19528961]
[110.27836609 93.44188690]
[125.25299072 94.31405640]
[140.22761536 95.18623352]
[155.20222473 96.05840302]
[170.17684937 96.93057251]
[175.43458557 88.36409760]
[183.45919800 82.40935516]
[193.06834412 79.88935852]
[202.86621094 81.12501526]
[211.44635010 85.89492798]
[217.59356689 93.47354889]
[220.45593262 102.74126434]
[235.22804260 105.34599304]
[250.16212463 100.12261200]
[261.35247803 109.95243073]
[276.12460327 112.55715179]
[290.89669800 115.16188049]
[305.66882324 117.76660156]
[320.44094849 120.37132263]
[335.36328125 121.89585114]
[350.35693359 122.33212280]
[365.35058594 122.76839447]
[379.52047729 114.51332092]
[393.61819458 122.89102173]
[393.14123535 139.28323364]
[378.58023071 146.82705688]
[364.91430664 137.76203918]
[349.92065430 137.32577515]
[334.92700195 136.88951111]
[342.40390015 149.89318848]
[337.17678833 163.95297241]
[323.02096558 168.91407776]
[310.16055298 161.19332886]
[307.88406372 146.36708069]
[317.83621216 135.14343262]
[303.06411743 132.53871155]
[288.29199219 129.93399048]
[273.51986694 127.32926941]
[258.74774170 124.72454834]
[244.87026978 130.13423157]
[232.62332153 120.11810303]
[217.85121155 117.51338196]
[202.41662598 130.70140076]
[181.94683838 128.51234436]
[169.30468750 111.90519714]
[154.33006287 111.03302765]
[139.35543823 110.16085052]
[124.38081360 109.28868103]
[109.40618896 108.41651154]
[120.20706177 118.82521820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 57]
[11 56]
[12 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[25 48]
[26 47]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[69 99]
[70 98]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
