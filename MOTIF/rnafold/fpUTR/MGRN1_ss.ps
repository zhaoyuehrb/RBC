%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGGCUCGAGGCGCCUCCGCGGCCGUGGACGAGCGUCCGUGCGGCCUGGUCCGGGCCAUGUCCGCGUGAGGACCCCGCCGCUGUCGCCGCUCCCGUUCCGGCCCUGGCCCCUCUGCCCGGCAGCGCCGCGCACC\
) } def
/len { sequence length } bind def

/coor [
[100.02567291 114.39240265]
[92.23191833 127.20869446]
[84.43815613 140.02499390]
[76.64440155 152.84127808]
[68.85063934 165.65756226]
[61.05688095 178.47386169]
[53.26311874 191.29014587]
[45.46936035 204.10644531]
[50.65289688 218.85990906]
[45.09202194 233.47534180]
[31.41240692 241.05175781]
[16.07315063 238.01182556]
[6.31697941 225.79089355]
[6.75045967 210.15931702]
[17.16891479 198.49784851]
[32.65306854 196.31268311]
[40.44683075 183.49639893]
[48.24058914 170.68009949]
[56.03434753 157.86381531]
[63.82810593 145.04751587]
[71.62186432 132.23123169]
[79.41562653 119.41493988]
[87.20938110 106.59864807]
[89.92612457 91.84671783]
[87.20938110 77.09479523]
[84.49263763 62.34286880]
[81.77590179 47.59094238]
[79.05915833 32.83901596]
[74.39037323 24.88546181]
[76.45247650 17.72061920]
[74.07224274 2.91067481]
[71.69200134 -11.89927006]
[69.31176758 -26.70921516]
[66.59502411 -41.46113968]
[63.54318237 -56.14739990]
[60.49134064 -70.83366394]
[57.43950272 -85.51992798]
[54.38766098 -100.20618439]
[44.01215744 -107.96276855]
[41.80923843 -120.32032776]
[48.42829514 -130.50956726]
[45.71155167 -145.26148987]
[31.93387985 -159.89872742]
[38.97806168 -177.85197449]
[35.59270477 -192.46496582]
[32.20735168 -207.07794189]
[28.82199478 -221.69093323]
[25.43663979 -236.30392456]
[12.31053638 -244.69100952]
[9.08547211 -259.55886841]
[17.16216660 -272.02093506]
[13.77681065 -286.63391113]
[10.39145470 -301.24688721]
[7.00609922 -315.85989380]
[3.62074351 -330.47286987]
[-0.75394559 -344.82077026]
[-6.09757137 -358.83666992]
[-11.44119740 -372.85256958]
[-16.78482246 -386.86849976]
[-28.07704544 -399.51452637]
[-19.05122566 -413.86621094]
[-2.76181221 -409.16604614]
[-2.76891494 -392.21209717]
[2.57471061 -378.19619751]
[7.91833639 -364.18029785]
[13.26196194 -350.16439819]
[20.86440659 -363.09509277]
[35.32923508 -367.06607056]
[48.46815109 -359.82943726]
[52.84342575 -345.48171997]
[45.97829437 -332.14492798]
[31.75898933 -327.36880493]
[18.23373032 -333.85821533]
[21.61908531 -319.24523926]
[25.00444031 -304.63226318]
[28.38979721 -290.01925659]
[31.77515221 -275.40628052]
[44.50904846 -267.76538086]
[48.15044785 -252.99395752]
[40.04962540 -239.68927002]
[43.43498230 -225.07629395]
[46.82033539 -210.46330261]
[50.20569229 -195.85031128]
[53.59104919 -181.23733521]
[62.79916382 -176.57029724]
[67.98632812 -167.39051819]
[67.20127869 -156.65455627]
[60.46347809 -147.97824097]
[63.18022156 -133.22631836]
[75.26940918 -120.55627441]
[69.07392120 -103.25802612]
[72.12576294 -88.57176208]
[75.17760468 -73.88550568]
[78.22944641 -59.19924164]
[81.28128052 -44.51298141]
[84.78431702 -41.15224075]
[86.15888214 -35.52586365]
[84.12171173 -29.08945274]
[86.50194550 -14.27950764]
[88.88218689 0.53043675]
[91.26242828 15.34038162]
[93.81108093 30.12227440]
[96.52782440 44.87419891]
[99.24456787 59.62612534]
[101.96131134 74.37805176]
[104.67805481 89.12997437]
[109.36633301 74.88146973]
[116.26462555 61.56179810]
[128.25646973 52.55092621]
[142.96960449 49.63139725]
[157.49345398 53.38076401]
[168.95487976 63.05731583]
[175.08656311 76.74681854]
[174.67552185 91.74118805]
[167.80305481 105.07419586]
[155.82609558 114.10947418]
[142.84196472 106.59864807]
[150.63572693 119.41493988]
[158.42948914 132.23123169]
[172.21073914 140.00218201]
[172.21272278 154.89678955]
[180.00648499 167.71308899]
[187.80023193 180.52937317]
[195.59399414 193.34565735]
[208.98986816 203.73735046]
[202.71264648 219.48640442]
[185.84135437 217.81427002]
[182.77770996 201.13941956]
[174.98394775 188.32313538]
[167.19018555 175.50683594]
[159.39642334 162.69055176]
[146.17263794 155.83630371]
[145.61318970 140.02499390]
[137.81942749 127.20869446]
[130.02568054 114.39240265]
[122.52567291 114.39240265]
[115.02570343 127.38279724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[30 101]
[31 100]
[32 99]
[33 98]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[41 89]
[42 88]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 66]
[57 65]
[58 64]
[59 63]
[117 135]
[118 134]
[119 133]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
