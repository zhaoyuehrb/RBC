%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAAUGCCUGCGGCAGGGGCGGAACUGCUAGGUGGUCUGAGCCCGGCUUUGGGCUGGGGUCGGGCUGUCACACAAUGGCUAGAAGUCGUGACUUCGUCUCCUUCGUGCCGCAUGGUUUUCAACGCCCUUGACCCGCCGGUUCCUUUUGUUUGGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[144.51347351 457.37994385]
[139.59910583 443.20782471]
[142.30146790 428.45324707]
[151.91967773 416.94281006]
[165.95927429 411.66174316]
[180.77909851 413.97967529]
[192.53541565 423.29513550]
[189.03373718 408.70959473]
[185.53205872 394.12405396]
[175.03741455 383.55465698]
[179.33934021 368.32955933]
[175.83766174 353.74401855]
[172.33598328 339.15847778]
[168.83430481 324.57290649]
[165.04692078 310.05892944]
[160.97532654 295.62210083]
[156.90371704 281.18527222]
[152.83210754 266.74844360]
[148.76049805 252.31161499]
[144.68888855 237.87478638]
[140.61729431 223.43795776]
[136.54568481 209.00112915]
[131.91043091 194.73527527]
[126.71866608 180.66241455]
[121.52691650 166.58953857]
[116.33515930 152.51667786]
[111.14340210 138.44380188]
[105.67634583 124.47557831]
[99.93609619 110.61738586]
[92.51482391 113.74855804]
[82.68963623 111.33370209]
[74.37051392 102.23944855]
[60.74836731 95.95954895]
[47.12622070 89.67965698]
[33.50407410 83.39975739]
[19.88192558 77.11986542]
[6.25977802 70.83996582]
[-7.36236954 64.56007385]
[-20.98451805 58.28017426]
[-34.60666656 52.00027847]
[-48.22881317 45.72038269]
[-64.00064087 46.96938324]
[-72.31952667 34.61441040]
[-85.94168091 28.33451462]
[-99.56382751 22.05461884]
[-113.18597412 15.77472210]
[-126.80812073 9.49482632]
[-140.43026733 3.21493030]
[-154.05241394 -3.06496572]
[-170.96797180 -4.20523071]
[-174.55496216 -20.77537918]
[-159.62536621 -28.80926323]
[-147.77252197 -16.68711281]
[-134.15037537 -10.40721703]
[-120.52822113 -4.12732124]
[-106.90607452 2.15257502]
[-93.28392792 8.43247128]
[-79.66178131 14.71236706]
[-66.03963470 20.99226379]
[-51.24215317 19.29408264]
[-41.94891739 32.09823608]
[-28.32676888 38.37813187]
[-14.70462132 44.65802765]
[-1.08247340 50.93792343]
[12.53967381 57.21781921]
[26.16182137 63.49771500]
[39.78396988 69.77761078]
[53.40611649 76.05751038]
[67.02826691 82.33740234]
[80.65041351 88.61730194]
[67.79572296 80.88703918]
[62.36268234 66.90554810]
[66.62493896 52.52385330]
[78.79879761 43.76045990]
[93.78970337 44.28270340]
[105.32420349 53.87203979]
[108.57529449 68.51548004]
[102.18157196 82.08589172]
[110.01905060 69.29629517]
[117.85652924 56.50669098]
[114.38443756 41.32175446]
[122.51494598 28.46292496]
[137.01286316 25.24639511]
[144.85034180 12.45679283]
[152.68782043 -0.33280933]
[160.52529907 -13.12241173]
[155.53276062 -23.97983932]
[156.41680908 -35.77683640]
[162.83993530 -45.56788254]
[173.09628296 -50.96491623]
[184.56312561 -50.71940613]
[192.89666748 -63.19144821]
[201.23022461 -75.66349030]
[205.00262451 -92.19241333]
[221.92990112 -93.14310455]
[227.52937317 -77.14053345]
[213.70227051 -67.32994080]
[205.36871338 -54.85789490]
[197.03517151 -42.38585281]
[201.70516968 -24.72429848]
[191.85868835 -8.96024609]
[173.31489563 -5.28493309]
[165.47741699 7.50466919]
[157.63993835 20.29427147]
[149.80245972 33.08387375]
[153.51843262 47.46188354]
[145.75230408 60.54400635]
[130.64613342 64.34416962]
[122.80864716 77.13377380]
[114.97116852 89.92337036]
[113.79428864 104.87713623]
[119.53453827 118.73532867]
[124.60230255 123.11099243]
[126.39084625 128.57412720]
[125.21627045 133.25204468]
[130.40803528 147.32492065]
[135.59977722 161.39778137]
[140.79153442 175.47065735]
[145.98329163 189.54353333]
[149.51806641 192.26420593]
[151.74739075 195.64024353]
[152.62649536 199.16989136]
[152.28176880 202.38998413]
[150.98251343 204.92951965]
[155.05412292 219.36634827]
[159.12571716 233.80317688]
[163.19732666 248.24000549]
[167.26893616 262.67684937]
[171.34054565 277.11367798]
[175.41215515 291.55050659]
[179.48374939 305.98733521]
[184.00209045 310.92831421]
[185.13610840 316.56381226]
[183.41984558 321.07122803]
[186.92152405 335.65679932]
[190.42321777 350.24234009]
[193.92489624 364.82788086]
[204.66999817 376.44052124]
[200.11759949 390.62237549]
[203.61927795 405.20791626]
[207.12095642 419.79345703]
[212.03541565 433.96554565]
[218.31530762 447.58770752]
[224.59519958 461.20986938]
[230.87510681 474.83200073]
[246.00862122 478.77032471]
[255.02787781 491.54479980]
[253.67425537 507.12368774]
[242.58688354 518.15112305]
[227.00088501 519.42028809]
[214.27549744 510.33190918]
[210.41925049 495.17727661]
[217.25296021 481.11190796]
[210.97305298 467.48974609]
[204.69316101 453.86761475]
[198.41326904 440.24545288]
[194.94781494 454.83966064]
[184.74443054 465.83468628]
[170.44935608 470.37902832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 141]
[8 140]
[9 139]
[11 137]
[12 136]
[13 135]
[14 134]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[28 112]
[29 111]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[78 110]
[79 109]
[80 108]
[83 105]
[84 104]
[85 103]
[86 102]
[91 99]
[92 98]
[93 97]
[142 156]
[143 155]
[144 154]
[145 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
