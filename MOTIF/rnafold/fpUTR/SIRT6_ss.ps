%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCUUCCGGCGGAAGCGGCCUCAACAAGGGAAACUUUAUUGUUCCCGUGGGGCAGUCGAGG\
) } def
/len { sequence length } bind def

/coor [
[58.85749435 226.40759277]
[48.03278732 216.02368164]
[42.13477707 202.23188782]
[42.10415649 187.23191833]
[47.94688034 173.41461182]
[33.77186584 178.32063293]
[19.59685326 183.22665405]
[5.42184162 188.13267517]
[-8.75317001 193.03869629]
[-22.92818260 197.94471741]
[-37.10319519 202.85073853]
[-50.09362411 213.74499512]
[-64.15824890 204.27807617]
[-58.95477295 188.14239502]
[-42.00921631 188.67572021]
[-27.83420181 183.76969910]
[-13.65919018 178.86367798]
[0.51582235 173.95765686]
[14.69083500 169.05163574]
[28.86584663 164.14562988]
[43.04085922 159.23960876]
[55.04897690 150.25044250]
[63.74983215 138.03179932]
[72.45068359 125.81316376]
[81.15153503 113.59452057]
[89.85239410 101.37588501]
[91.69048309 93.20508575]
[99.26940155 88.79623413]
[108.54178619 77.00543213]
[109.97372437 69.94770813]
[114.28597260 65.57216644]
[119.29948425 64.59039307]
[129.65066528 53.73438263]
[140.00184631 42.87837219]
[150.35304260 32.02236176]
[154.19299316 23.33052635]
[161.46446228 20.91093254]
[172.32048035 10.55974770]
[172.44596863 -5.24404287]
[183.76812744 -16.27057266]
[199.56970215 -15.97799492]
[210.47592163 -4.53989363]
[210.01629639 11.25771046]
[198.46351624 22.04237938]
[182.67166138 21.41575813]
[171.81564331 31.76694298]
[161.20904541 42.37354660]
[150.85786438 53.22955704]
[140.50668335 64.08556366]
[130.15548706 74.94157410]
[120.33258057 86.27781677]
[111.06019592 98.06861877]
[102.07102966 110.07673645]
[93.37017822 122.29537201]
[84.66932678 134.51400757]
[75.96846771 146.73265076]
[67.26761627 158.95129395]
[82.16943359 157.23786926]
[96.55338287 161.49250793]
[108.12532806 171.03662109]
[115.03961182 184.34799194]
[116.19346619 199.30354309]
[111.40284729 213.51797485]
[101.43182373 224.72416687]
[87.87071991 231.13482666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[28 52]
[29 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
