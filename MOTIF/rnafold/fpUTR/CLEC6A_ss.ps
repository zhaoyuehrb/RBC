%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGCAGUUUGUCCCUGAGCUCUAGCUUCUUUAAAUGAAGCUGAGUCUCUGGGCAACAUCUUUAGGGAGAGAGGUACAAAAGGUUCCUGGACCUUCUCAACACAGGGAGCCUGCAUA\
) } def
/len { sequence length } bind def

/coor [
[78.58258820 331.75549316]
[70.83104706 318.17434692]
[73.67366791 302.79730225]
[85.76824951 292.88494873]
[85.76824951 277.88494873]
[85.76824951 262.88494873]
[85.76824951 247.88493347]
[76.02928925 241.66030884]
[70.49942017 231.37350464]
[70.68334198 219.57530212]
[76.65197754 209.25688171]
[86.99481201 203.09149170]
[87.79314423 188.11274719]
[88.59147644 173.13400269]
[89.38981628 158.15525818]
[90.18814850 143.17652893]
[90.98648071 128.19778442]
[71.71172333 116.00923157]
[65.53884125 91.87940216]
[50.72981644 89.49345398]
[35.92079163 87.10749817]
[21.11176491 84.72154999]
[12.00993156 86.45751190]
[5.94243431 82.06991577]
[-8.79782772 79.29058075]
[-23.53808975 76.51125336]
[-38.27835083 73.73191833]
[-53.01861191 70.95259094]
[-67.75887299 68.17325592]
[-79.74059296 78.22176361]
[-95.37807465 78.16596985]
[-107.28778839 68.03221893]
[-109.84631348 52.60535812]
[-101.84561157 39.16948318]
[-87.06335449 34.06860352]
[-72.47928619 39.71119308]
[-64.97954559 53.43299866]
[-50.23928070 56.21232986]
[-35.49901962 58.99166107]
[-20.75875854 61.77098846]
[-6.01849651 64.55032349]
[8.72176552 67.32965088]
[23.49771881 69.91252136]
[38.30674362 72.29847717]
[53.11576843 74.68442535]
[67.92479706 77.07038116]
[78.80998993 66.74989319]
[77.21559143 51.83486938]
[75.62118530 36.91984558]
[74.02678680 22.00482368]
[72.43238068 7.08980179]
[70.83798218 -7.82522011]
[69.24357605 -22.74024200]
[56.16389084 -31.31088257]
[51.70289612 -46.29866028]
[57.96693420 -60.62680817]
[71.99832153 -67.53001404]
[87.17185974 -63.74879074]
[96.32307434 -51.06851959]
[95.13104248 -35.47643280]
[84.15859985 -24.33464432]
[85.75299835 -9.41962242]
[87.34740448 5.49539948]
[88.94180298 20.41042137]
[90.53620911 35.32544327]
[92.13060760 50.24046707]
[93.72501373 65.15548706]
[113.70117950 70.52458954]
[125.65530396 85.22962952]
[140.12683105 81.28309631]
[154.59834290 77.33655548]
[169.06985474 73.39001465]
[183.48756409 69.25119019]
[197.84889221 64.92081451]
[212.21022034 60.59043121]
[223.18911743 49.19857025]
[237.60818481 52.93217087]
[251.96951294 48.60179520]
[256.10934448 33.74025345]
[267.64193726 23.49316597]
[282.88729858 21.13033485]
[296.98065186 27.40573311]
[305.42489624 40.31690216]
[305.52548218 55.74393845]
[297.25033569 68.76412964]
[283.23999023 75.22277832]
[267.96511841 73.05895233]
[256.29989624 62.96312332]
[241.93856812 67.29350281]
[231.98689270 78.37562561]
[216.54060364 74.95175934]
[202.17927551 79.28214264]
[187.81794739 83.61251831]
[182.25119019 88.62020111]
[173.01640320 87.86153412]
[158.54487610 91.80807495]
[144.07336426 95.75460815]
[129.60183716 99.70114899]
[128.56605530 107.76779938]
[125.37423706 115.24816132]
[120.26728058 121.57766724]
[113.63063812 126.27858734]
[105.96521759 128.99610901]
[105.16688538 143.97485352]
[104.36855316 158.95359802]
[103.57022095 173.93234253]
[102.77188873 188.91107178]
[101.97355652 203.88981628]
[115.15550995 217.35559082]
[114.45517731 235.87034607]
[100.76824951 247.88493347]
[100.76824951 262.88494873]
[100.76824951 277.88494873]
[100.76824951 292.88494873]
[112.86283112 302.79730225]
[115.70545197 318.17434692]
[107.95391083 331.75549316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 114]
[5 113]
[6 112]
[7 111]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[19 46]
[20 45]
[21 44]
[22 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[69 98]
[70 97]
[71 96]
[72 95]
[73 93]
[74 92]
[75 91]
[77 89]
[78 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
