%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCCCAGUGCCCGCGCGCGCCGCCAGGCUCGCAAGCACCGCGUAGGCCAGCUGGCCGGAUCCCGCCGUCUGUC\
) } def
/len { sequence length } bind def

/coor [
[117.80872345 118.55500793]
[104.71754456 111.23236847]
[91.33858490 104.44979095]
[77.69410706 98.21856689]
[64.04962921 91.98734283]
[50.40514374 85.75611115]
[40.11268234 90.25492096]
[29.29199600 88.22427368]
[21.64742279 80.61457062]
[19.65193558 70.24147797]
[6.56075859 62.91883850]
[-6.53041744 55.59619522]
[-19.62159348 48.27355194]
[-30.52929306 53.79224396]
[-42.61879349 53.22875977]
[-52.75983810 46.84894943]
[-58.38576126 36.40909576]
[-58.14272690 24.67406082]
[-70.59348297 16.30872917]
[-83.04423523 7.94339991]
[-98.81407166 6.66954803]
[-105.06334686 -6.85065508]
[-117.51409912 -15.21598530]
[-129.96484375 -23.58131599]
[-146.35395813 -24.15515327]
[-153.81158447 -38.76049042]
[-144.66596985 -52.37260437]
[-128.32533264 -50.98852539]
[-121.59951782 -36.03206635]
[-109.14876556 -27.66673851]
[-96.69801331 -19.30140877]
[-81.81873322 -18.62590027]
[-74.67890167 -4.50735331]
[-62.22814941 3.85797691]
[-49.77739716 12.22330666]
[-32.31238174 7.49327993]
[-16.52013016 16.94722557]
[-12.29895115 35.18237305]
[0.79222548 42.50501633]
[13.88340187 49.82765961]
[26.97457886 57.15030289]
[46.03818512 55.19161224]
[56.63637161 72.11163330]
[70.28085327 78.34285736]
[83.92533112 84.57408142]
[97.56980896 90.80531311]
[103.07653046 90.06418610]
[108.54983521 92.62367249]
[112.04019165 98.14118958]
[125.13137054 105.46383667]
[138.64590454 111.97209167]
[152.53318787 117.64159393]
[166.42047119 123.31108856]
[182.12138367 121.36375427]
[190.98008728 133.33758545]
[204.86738586 139.00708008]
[218.75466919 144.67658997]
[232.64195251 150.34608459]
[242.05943298 150.73393250]
[246.97242737 156.54049683]
[260.61691284 162.77171326]
[277.53643799 163.85159302]
[281.18255615 180.40882874]
[266.28173828 188.49595642]
[254.38568115 176.41619873]
[240.74121094 170.18496704]
[226.97245789 164.23336792]
[213.08517456 158.56387329]
[199.19787598 152.89437866]
[185.31059265 147.22486877]
[170.60299683 149.57772827]
[160.75097656 137.19837952]
[146.86369324 131.52888489]
[132.97639465 125.85938263]
[129.38163757 127.08901978]
[124.97778320 126.44756317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 46]
[4 45]
[5 44]
[6 43]
[10 41]
[11 40]
[12 39]
[13 38]
[18 35]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[51 74]
[52 73]
[53 72]
[55 70]
[56 69]
[57 68]
[58 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
