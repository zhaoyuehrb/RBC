%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACCCGAGCUACGGUGGCCGCGGGGCGGCGGUGGCGAUUGGACUUGGUGGGUCCCGGGCCAGGGGCGGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[155.83474731 199.26960754]
[159.48046875 182.29467773]
[151.05415344 169.88513184]
[144.51501465 166.01712036]
[142.55104065 156.81045532]
[134.62474060 144.07571411]
[126.69844818 131.34095764]
[118.77215576 118.60620880]
[91.89237213 122.03418732]
[79.53273773 101.55430603]
[65.19496155 97.14655304]
[50.85718918 92.73880005]
[36.51941681 88.33104706]
[22.18164635 83.92329407]
[6.71712399 87.26381683]
[-3.17464972 76.12819672]
[-17.51242256 71.72044373]
[-32.97694397 75.06096649]
[-42.86871719 63.92534637]
[-57.20648956 59.51758957]
[-71.54425812 55.10983658]
[-87.39917755 59.29953766]
[-98.76146698 47.47454071]
[-93.94257355 31.79939079]
[-77.89976501 28.39933777]
[-67.13650513 40.77206421]
[-52.79873657 45.17981720]
[-38.46096420 49.58757401]
[-24.02197456 45.93177414]
[-13.10466766 57.38267136]
[1.23310435 61.79042435]
[15.67209339 58.13462448]
[26.58940125 69.58551788]
[40.92717361 73.99327087]
[55.26494598 78.40103149]
[69.60271454 82.80878448]
[83.94049072 87.21653748]
[89.19416809 81.17362213]
[96.72392273 77.34764862]
[105.57631683 76.58593750]
[114.49044800 79.32195282]
[122.07752991 85.46839905]
[132.36311340 74.55021667]
[142.64871216 63.63203430]
[152.93429565 52.71385193]
[163.21987915 41.79566956]
[173.50546265 30.87748528]
[179.96545410 15.20250702]
[196.81614685 17.07076454]
[199.68563843 33.78011322]
[184.42364502 41.16307449]
[174.13806152 52.08125687]
[163.85247803 62.99943542]
[153.56689453 73.91761780]
[143.28129578 84.83580017]
[132.99571228 95.75398254]
[131.50691223 110.67991638]
[139.43319702 123.41466522]
[147.35949707 136.14941406]
[155.28578186 148.88417053]
[163.46371460 161.45880127]
[171.89002991 173.86836243]
[185.48182678 174.90158081]
[195.79003906 183.51748657]
[199.11964417 196.33042908]
[194.45060730 208.50830078]
[202.37690735 221.24304199]
[210.30319214 233.97779846]
[218.22949219 246.71253967]
[226.15579224 259.44729614]
[239.65873718 269.69946289]
[233.54522705 285.51278687]
[216.65750122 284.01574707]
[213.42103577 267.37359619]
[205.49473572 254.63883972]
[197.56845093 241.90408325]
[189.64215088 229.16934204]
[181.71586609 216.43458557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[5 60]
[6 59]
[7 58]
[8 57]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[16 31]
[17 30]
[19 28]
[20 27]
[21 26]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
