%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUGAAUUGGGGCGUGUCUAGAAAGAGAAGCCAUAGUCGGCGAGCAACGCUGGAGCAUCCCGCUCUGGUGCCGCUGCAGCCGGCAGAG\
) } def
/len { sequence length } bind def

/coor [
[128.82063293 131.84886169]
[122.58435059 136.53663635]
[115.60299683 140.01907349]
[108.10688782 142.18124390]
[100.34333038 142.95184326]
[92.56845093 142.30545044]
[85.03873444 140.26338196]
[78.00260162 136.89300537]
[71.69216919 132.30551147]
[66.31562805 126.65224457]
[62.05034637 120.11971283]
[59.03703690 112.92342377]
[57.37511444 105.30078125]
[42.39522171 104.52436066]
[27.41533089 103.74794006]
[17.62584305 115.64215088]
[2.88210845 119.44684601]
[-11.10938168 113.90588379]
[-19.06007195 101.33908844]
[-34.03996277 100.56266785]
[-49.01985550 99.78624725]
[-63.37343979 107.71762085]
[-77.27742004 99.02214050]
[-76.42858124 82.64498138]
[-61.70013046 75.43354797]
[-48.24343491 84.80635071]
[-33.26354599 85.58277130]
[-18.28365135 86.35919189]
[-9.07635975 74.68170166]
[5.41300344 70.61693573]
[19.68438911 75.92550659]
[28.19175148 88.76805115]
[43.17164230 89.54447174]
[58.15153503 90.32089233]
[70.20098114 69.06462097]
[91.89311218 57.81875610]
[116.20855713 60.22234726]
[135.27906799 75.49761963]
[148.90391541 69.22360229]
[162.52877808 62.94958496]
[176.15362549 56.67556763]
[189.77848816 50.40155029]
[203.40335083 44.12753296]
[214.03163147 27.16920090]
[233.12698364 29.24028778]
[246.28652954 22.04122543]
[259.44607544 14.84216404]
[263.98449707 -0.05886042]
[277.43267822 -7.17227077]
[291.61056519 -2.75375438]
[304.77011108 -9.95281696]
[317.92965698 -17.15187836]
[331.08920288 -24.35094070]
[344.24871826 -31.55000305]
[357.40826416 -38.74906540]
[370.56781006 -45.94812775]
[383.72735596 -53.14719009]
[396.88690186 -60.34625244]
[402.75646973 -75.27701569]
[418.13119507 -79.85927582]
[431.21691895 -70.57791138]
[431.97537231 -54.55279922]
[419.82473755 -44.07702637]
[404.08593750 -47.18671036]
[390.92642212 -39.98764801]
[377.76687622 -32.78858566]
[364.60733032 -25.58952522]
[351.44778442 -18.39046288]
[338.28823853 -11.19140053]
[325.12872314 -3.99233842]
[311.96917725 3.20672369]
[298.80963135 10.40578556]
[294.88406372 24.72798538]
[281.64096069 32.21632004]
[266.64514160 28.00170517]
[253.48559570 35.20076752]
[240.32604980 42.39982986]
[238.26133728 52.67427826]
[230.64115906 60.18882370]
[219.90191650 62.19171524]
[209.67736816 57.75238800]
[196.05250549 64.02640533]
[182.42764282 70.30042267]
[168.80279541 76.57444000]
[155.17793274 82.84845734]
[141.55308533 89.12247467]
[142.83520508 96.81810760]
[142.70417786 104.61871338]
[141.16432190 112.26694489]
[138.26643372 119.51049042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 34]
[14 33]
[15 32]
[19 28]
[20 27]
[21 26]
[38 86]
[39 85]
[40 84]
[41 83]
[42 82]
[43 81]
[45 77]
[46 76]
[47 75]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
