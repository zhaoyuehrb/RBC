%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAAUGGGGAGGCUAUGCAGGUGUGUGGGCUGGAGGGACUUUGCAGAUGUGAUUAAGGAUUGUGAGAUGGAAAAAUUAUCCUUGAUUACCUGCACGGACCCAGUAUAAUCACAACUGUCCUUAUAAGAAGAGGAGCUUUGGAAGAAGAGAGAGUUGACUACGGAAGAGGGAAAAGUGCCACAGAC\
) } def
/len { sequence length } bind def

/coor [
[64.23593140 277.02703857]
[64.20684052 289.86975098]
[59.33408356 301.70162964]
[50.37629700 310.77362061]
[38.69310379 315.75912476]
[26.03882790 315.94805908]
[20.18298912 329.75781250]
[14.32714939 343.56756592]
[8.47131062 357.37731934]
[13.12948799 372.72921753]
[3.91290379 385.86062622]
[-12.10826778 386.69827271]
[-22.64395523 374.59954834]
[-19.61207962 358.84558105]
[-5.33843803 351.52148438]
[0.51740104 337.71173096]
[6.37323999 323.90197754]
[12.22907925 310.09222412]
[1.37455952 296.74850464]
[-1.25192571 279.65921021]
[5.16025257 263.50650024]
[18.93275261 252.76210022]
[36.33647156 250.44926453]
[41.72758865 236.45155334]
[39.08156967 221.79386902]
[51.26175690 211.69665527]
[56.65287399 197.69894409]
[62.04399109 183.70123291]
[67.43510437 169.70352173]
[72.82622528 155.70582581]
[78.10019684 141.66355896]
[83.25666046 127.57771301]
[88.41313171 113.49187469]
[85.16139221 108.94651031]
[83.55161285 103.74586487]
[83.66151428 98.44754791]
[85.38928223 93.59088135]
[74.60692596 83.16299438]
[63.82457352 72.73510742]
[48.52576828 68.70308685]
[44.75601578 54.29343033]
[33.97366333 43.86554337]
[18.67485809 39.83352280]
[14.90510654 25.42386627]
[4.12275124 14.99598026]
[-6.65960407 4.56809330]
[-17.44195938 -5.85979271]
[-28.22431564 -16.28767967]
[-34.56557846 -18.26912117]
[-38.36991119 -22.52464104]
[-39.18538666 -27.24875069]
[-49.61326981 -38.03110504]
[-60.04115677 -48.81346130]
[-70.46904755 -59.59581375]
[-80.89693451 -70.37817383]
[-91.32481384 -81.16052246]
[-101.75270081 -91.94287872]
[-112.18058777 -102.72523499]
[-122.60847473 -113.50759125]
[-133.03636169 -124.28994751]
[-143.46424866 -135.07229614]
[-153.89213562 -145.85466003]
[-169.04766846 -150.39562988]
[-172.33381653 -164.92321777]
[-182.76170349 -175.70556641]
[-197.43016052 -171.33576965]
[-212.44692993 -174.29466248]
[-224.36128235 -183.90231323]
[-230.43537903 -197.95092773]
[-229.27345276 -213.21226501]
[-221.14247131 -226.17938232]
[-207.91091919 -233.87251282]
[-192.61927795 -234.52384949]
[-178.78146362 -227.98370361]
[-169.57730103 -215.75495911]
[-167.12184143 -200.64770508]
[-171.97933960 -186.13345337]
[-161.55145264 -175.35110474]
[-147.14179993 -171.58134460]
[-143.10978699 -156.28254700]
[-132.68190002 -145.50018311]
[-122.25400543 -134.71783447]
[-111.82611847 -123.93547821]
[-101.39823151 -113.15312195]
[-90.97035217 -102.37076569]
[-80.54246521 -91.58840942]
[-70.11457825 -80.80606079]
[-59.68668747 -70.02370453]
[-49.25880432 -59.24134827]
[-38.83091736 -48.45899200]
[-28.40303040 -37.67663574]
[-17.79642868 -27.07003403]
[-7.01407290 -16.64214897]
[3.76828218 -6.21426153]
[14.55063725 4.21362448]
[25.33299255 14.64151096]
[39.86056900 17.92765999]
[44.40154648 33.08319092]
[55.18390274 43.51107407]
[69.71147919 46.79722595]
[74.25245667 61.95275497]
[85.03481293 72.38063812]
[95.81716919 82.80852509]
[86.88964081 70.75451660]
[84.86098480 55.89233017]
[90.23144531 41.88668060]
[101.67675781 32.19107437]
[116.37474823 29.19625473]
[130.70120239 33.64067841]
[141.12348938 44.42844009]
[145.07170105 58.89950180]
[141.57228088 73.48559570]
[131.48811340 84.59008026]
[117.30697632 89.47472382]
[132.09802246 86.97978973]
[146.88908386 84.48484802]
[161.68013000 81.98990631]
[176.47119141 79.49496460]
[188.79219055 69.57006836]
[202.62911987 75.08267212]
[217.42016602 72.58773041]
[232.18986511 69.96929932]
[246.93716431 67.22754669]
[261.68444824 64.48580170]
[267.02807617 48.84847641]
[279.45349121 38.09685898]
[295.51190186 35.09008408]
[310.80874634 40.55479050]
[321.20623779 52.91235352]
[335.90563965 49.92456436]
[350.60507202 46.93677139]
[365.30450439 43.94898224]
[375.32498169 31.42022324]
[391.36715698 31.58707047]
[401.12487793 44.32153320]
[397.11282349 59.85482407]
[382.40872192 66.27112579]
[368.29229736 58.64840698]
[353.59286499 61.63619995]
[338.89343262 64.62398529]
[324.19403076 67.61177826]
[320.71670532 80.82977295]
[311.83764648 91.30756378]
[299.24850464 96.96065521]
[285.38601685 96.63226318]
[272.96060181 90.32948303]
[264.42620850 79.23310089]
[249.67890930 81.97484589]
[234.93161011 84.71659851]
[228.91813660 89.03886414]
[219.91511536 87.37878418]
[205.12405396 89.87372589]
[193.86100769 99.62017059]
[178.96612549 94.28601837]
[164.17507935 96.78096008]
[149.38401794 99.27590179]
[134.59297180 101.77084351]
[119.80191803 104.26578522]
[133.97842407 109.16747284]
[148.92495728 107.90206146]
[163.44664001 111.65981293]
[175.90332031 120.01630402]
[184.88809204 132.02770996]
[189.38615417 146.33741760]
[188.88946533 161.32919312]
[183.45414734 175.30978394]
[173.69407654 186.70018005]
[160.71160889 194.21386719]
[145.97305298 197.00222778]
[131.14305115 194.75030518]
[117.89659119 187.71247864]
[107.72978210 176.68359375]
[101.79092407 162.90934753]
[100.75077820 147.94544983]
[104.72685242 133.48196411]
[102.49897003 118.64833832]
[97.34250641 132.73417664]
[92.18603516 146.82002258]
[92.17254639 155.97480774]
[86.82393646 161.09693909]
[81.43281555 175.09465027]
[76.04170227 189.09236145]
[70.65058136 203.09005737]
[65.25946808 217.08776855]
[67.51987457 232.74667358]
[55.72529602 241.84266663]
[50.33418274 255.84037781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[23 187]
[24 186]
[26 184]
[27 183]
[28 182]
[29 181]
[30 180]
[31 178]
[32 177]
[33 176]
[37 103]
[38 102]
[39 101]
[41 99]
[42 98]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[64 78]
[65 77]
[114 158]
[115 157]
[116 156]
[117 155]
[118 154]
[120 152]
[121 151]
[122 149]
[123 148]
[124 147]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
