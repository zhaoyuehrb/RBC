%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCGGAGUGACGCGUGGCCGCCGGCACCCGGAGCUCCUGGGCACACGGCAUUGGCAGGGGCCGCUUCGGCAGAGUG\
) } def
/len { sequence length } bind def

/coor [
[92.72962189 313.98342896]
[90.97219849 298.72540283]
[97.09394836 284.63925171]
[109.44816589 275.51406860]
[107.68510437 260.61804199]
[105.92204285 245.72201538]
[104.15898132 230.82598877]
[102.39591980 215.92996216]
[100.63285828 201.03393555]
[98.86979675 186.13790894]
[97.10673523 171.24188232]
[95.34367371 156.34585571]
[91.99935150 152.59902954]
[91.15632629 146.63430786]
[94.07437897 140.21792603]
[93.48548126 125.22949982]
[79.87888336 116.55618286]
[73.98820496 101.53399658]
[78.07238007 85.92356110]
[90.56523132 75.71108246]
[89.38834381 60.75732040]
[88.21145630 45.80356216]
[86.15627289 30.94502068]
[83.22991943 16.23324203]
[80.30355835 1.52146280]
[77.37720490 -13.19031620]
[62.01701736 -19.96047783]
[53.71519470 -34.36030197]
[55.51691055 -50.71841812]
[66.53139496 -62.72375870]
[63.02971268 -77.30931091]
[59.52803421 -91.89485931]
[56.02635193 -106.48040771]
[52.52467346 -121.06595612]
[39.65205765 -130.64067078]
[39.25595856 -146.67884827]
[51.64023209 -156.87733459]
[67.30472565 -153.41275024]
[74.23297119 -138.94282532]
[67.11022186 -124.56763458]
[70.61190033 -109.98208618]
[74.11357880 -95.39653778]
[77.61526489 -80.81098938]
[81.11694336 -66.22544098]
[94.00301361 -62.21020508]
[103.24652863 -52.22581100]
[106.30700684 -38.85623169]
[102.26372528 -25.63619423]
[92.08898926 -16.11667061]
[95.01534271 -1.40489197]
[97.94169617 13.30688763]
[100.86804962 28.01866722]
[103.85764313 30.33623314]
[105.74199677 34.34277725]
[105.67936707 39.43429947]
[103.16521454 44.62667465]
[104.34210205 59.58043671]
[105.51898956 74.53419495]
[117.43109131 80.63189697]
[124.74567413 91.83800507]
[125.53348541 105.19687653]
[119.58674622 117.18505096]
[108.47391510 124.64060211]
[109.06281281 139.62902832]
[110.23970032 154.58279419]
[112.00276184 169.47882080]
[113.76582336 184.37484741]
[115.52888489 199.27087402]
[117.29194641 214.16690063]
[119.05500793 229.06292725]
[120.81806946 243.95895386]
[122.58113098 258.85498047]
[124.34419250 273.75100708]
[138.48728943 279.74002075]
[147.72824097 292.00790405]
[149.58128357 307.25457764]
[143.54795837 321.37884521]
[131.25119019 330.58129883]
[115.99876404 332.38653564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[15 64]
[16 63]
[20 58]
[21 57]
[22 56]
[23 52]
[24 51]
[25 50]
[26 49]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
