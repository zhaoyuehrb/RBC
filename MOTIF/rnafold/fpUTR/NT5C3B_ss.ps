%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGGAGGCGACGCCUGCGCAGUGCGGUCGCGGGGCUGUCGUUGUCCCGCGAGCCGCCGACCAGGCCUCGAACGGG\
) } def
/len { sequence length } bind def

/coor [
[78.52364349 241.63154602]
[67.86297607 229.96426392]
[68.65822601 214.17999268]
[80.43757629 203.64328003]
[81.03392792 188.65513611]
[71.91998291 182.99140930]
[66.05831146 173.90544128]
[64.63373566 163.10401917]
[67.98957825 152.65234375]
[75.54833221 144.57907104]
[85.90973663 140.48271179]
[88.28570557 125.67208099]
[90.66167450 110.86145020]
[85.85688782 97.73111725]
[94.52769470 86.76258087]
[96.90366364 71.95195007]
[99.27963257 57.14131927]
[101.65560913 42.33068848]
[104.03157806 27.52005959]
[93.05317688 20.16922569]
[85.77771759 9.19755173]
[83.29663849 -3.68299532]
[85.95667267 -16.47937584]
[93.31192017 -27.22585487]
[104.19811249 -34.28596878]
[116.91677094 -36.60168457]
[120.46193695 -51.17672348]
[124.00710297 -65.75176239]
[127.55226898 -80.32680511]
[130.80694580 -94.96944427]
[133.76986694 -109.67391205]
[136.73277283 -124.37837219]
[139.69567871 -139.08282471]
[142.65859985 -153.78729248]
[145.62150574 -168.49174500]
[148.58441162 -183.19621277]
[151.54733276 -197.90066528]
[154.51023865 -212.60513306]
[144.61192322 -224.71121216]
[144.86268616 -240.34678650]
[155.14414978 -252.12921143]
[170.60171509 -254.49517822]
[183.93678284 -246.32757568]
[188.85295105 -231.48286438]
[183.02894592 -216.97027588]
[169.21470642 -209.64222717]
[166.25178528 -194.93775940]
[163.28887939 -180.23330688]
[160.32597351 -165.52883911]
[157.36305237 -150.82438660]
[154.40014648 -136.11991882]
[151.43724060 -121.41545868]
[148.47431946 -106.71099854]
[145.51141357 -92.00653839]
[147.32693481 -84.62917328]
[142.12730408 -76.78163910]
[138.58213806 -62.20659637]
[135.03697205 -47.63155746]
[131.49180603 -33.05651474]
[144.26393127 -21.85486412]
[149.78546143 -5.69674015]
[146.50611877 11.14965916]
[135.21263123 24.18848228]
[118.84220886 29.89603043]
[116.46623993 44.70666122]
[114.09026337 59.51729202]
[111.71429443 74.32791901]
[109.33832550 89.13854980]
[114.14311218 102.26888275]
[105.47230530 113.23741913]
[103.09633636 128.04804993]
[100.72036743 142.85867310]
[113.40162659 158.09588623]
[111.25760651 177.50791931]
[96.02206421 189.25148010]
[95.42572021 204.23962402]
[106.33069611 215.67889404]
[105.86936951 231.47645569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[11 72]
[12 71]
[13 70]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[26 59]
[27 58]
[28 57]
[29 56]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
