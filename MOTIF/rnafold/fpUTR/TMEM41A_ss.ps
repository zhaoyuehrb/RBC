%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAACGUGCUCCGCGGGCUCAGUCCGCCCGCCGCUGCGUCCCGGAGUGCAAGUGAGCUUCUCGGCUGCCCCGCGGGCCGGGGUGCGGAGCCGAC\
) } def
/len { sequence length } bind def

/coor [
[95.78909302 289.73162842]
[80.55097198 292.14056396]
[66.43867493 285.90783691]
[57.95540619 273.02227783]
[57.80813217 257.59564209]
[66.04384613 244.55046082]
[80.03457642 238.04943848]
[81.97239685 223.17514038]
[79.67104340 215.99945068]
[84.22137451 207.85353088]
[86.63983917 193.04977417]
[89.05830383 178.24601746]
[91.47676849 163.44227600]
[93.89523315 148.63851929]
[96.31369019 133.83477783]
[98.73215485 119.03102112]
[88.92594910 107.68032837]
[73.92790985 107.92322540]
[58.92987823 108.16612244]
[43.93184662 108.40901947]
[34.21662521 120.66252899]
[18.88762474 123.75377655]
[5.18273497 116.22316742]
[-0.42701682 101.62643433]
[4.70712328 86.85569763]
[18.16097069 78.88525391]
[33.58203125 81.47850037]
[43.68894958 93.41098785]
[58.68698502 93.16809082]
[73.68502045 92.92519379]
[88.68305206 92.68229675]
[102.05915833 85.89408875]
[111.11007690 73.93244934]
[120.16099548 61.97080612]
[122.92076874 53.05759811]
[129.70378113 49.77470016]
[139.13729858 38.11241913]
[148.57080078 26.45013428]
[151.61775208 17.63096619]
[158.50352478 14.56943893]
[168.30972290 3.21874642]
[178.11593628 -8.13194561]
[187.92214966 -19.48263741]
[197.54327393 -30.99063492]
[206.97679138 -42.65291977]
[216.41029358 -54.31520081]
[214.62535095 -65.28839111]
[219.18254089 -75.18495941]
[228.30169678 -80.73140717]
[238.74189758 -80.24657440]
[248.91052246 -91.27376556]
[259.07913208 -102.30096436]
[258.61727905 -117.87094879]
[269.08682251 -128.90924072]
[283.93325806 -129.25358582]
[294.10189819 -140.28079224]
[304.27050781 -151.30798340]
[314.43914795 -162.33517456]
[320.73165894 -178.07812500]
[337.60131836 -176.38958740]
[340.64877319 -159.71177673]
[325.46633911 -152.16654968]
[315.29769897 -141.13935852]
[305.12908936 -130.11216736]
[294.96044922 -119.08496857]
[295.81802368 -104.25930786]
[285.66265869 -92.93130493]
[270.10635376 -92.13233948]
[259.93771362 -81.10514069]
[249.76908875 -70.07794952]
[247.13299561 -51.03770065]
[228.07258606 -44.88169098]
[218.63906860 -33.21940613]
[209.20556641 -21.55712318]
[207.41256714 -14.23784351]
[199.27284241 -9.67642689]
[189.46662903 1.67426562]
[179.66041565 13.02495766]
[169.85421753 24.37565041]
[160.23309326 35.88364792]
[150.79957581 47.54592896]
[141.36605835 59.20821381]
[132.12263489 71.02172852]
[123.07171631 82.98336792]
[114.02079773 94.94500732]
[113.53591156 121.44948578]
[111.11744690 136.25323486]
[108.69898224 151.05699158]
[106.28051758 165.86073303]
[103.86205292 180.66448975]
[101.44358826 195.46824646]
[99.02512360 210.27198792]
[96.84669495 225.11296082]
[94.90887451 239.98725891]
[106.76696777 249.85586548]
[111.38546753 264.57568359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 94]
[8 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 31]
[18 30]
[19 29]
[20 28]
[32 85]
[33 84]
[34 83]
[36 82]
[37 81]
[38 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 74]
[45 73]
[46 72]
[50 70]
[51 69]
[52 68]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
