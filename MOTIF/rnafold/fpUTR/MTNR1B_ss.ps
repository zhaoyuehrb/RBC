%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGAGCUGGGCAGGGAAGAGAGCGCCCGGCUCAGUACUGCGCGCGCCCUGCGGCUGUCCGGGGCCGCGCGGUGGCCAAAGCACAGCGCGGGAGAGUCUGCG\
) } def
/len { sequence length } bind def

/coor [
[104.62918854 139.01365662]
[94.72451782 136.62165833]
[86.34698486 131.91426086]
[79.98165131 125.50697327]
[75.90341949 118.09907532]
[62.04522324 123.83932495]
[48.18703079 129.57957458]
[34.32883835 135.31982422]
[20.47064590 141.06007385]
[6.61245203 146.80032349]
[-7.24574089 152.54058838]
[-21.10393333 158.28083801]
[-34.96212769 164.02108765]
[-35.76649475 179.26298523]
[-43.11194611 192.64234924]
[-55.54004288 201.50265503]
[-70.58316803 204.08471680]
[-85.25450897 199.87585449]
[-96.64105225 189.71173096]
[-102.48199463 175.61044312]
[-101.61761475 160.37182617]
[-94.21952820 147.02149963]
[-81.75663757 138.21020508]
[-66.70346069 135.68739319]
[-52.04880905 139.95401001]
[-40.70237732 150.16288757]
[-26.84418488 144.42263794]
[-12.98599243 138.68238831]
[0.87220061 132.94213867]
[14.73039341 127.20188904]
[28.58858681 121.46163177]
[42.44678116 115.72138214]
[56.30497360 109.98113251]
[70.16316223 104.24088287]
[73.92517090 77.08650970]
[100.48337555 60.71563721]
[133.65098572 71.86563873]
[137.24072266 57.30151367]
[140.83045959 42.73738480]
[144.42019653 28.17325974]
[148.00993347 13.60913181]
[151.59967041 -0.95499539]
[155.18940735 -15.51912308]
[158.77914429 -30.08325005]
[162.36886597 -44.64737701]
[161.38337708 -53.90121841]
[166.29322815 -59.59386826]
[170.32121277 -74.04293060]
[174.34918213 -88.49199677]
[178.37716675 -102.94105530]
[182.40513611 -117.39012146]
[186.43312073 -131.83917236]
[176.68469238 -143.91177368]
[175.92776489 -159.41038513]
[184.45338440 -172.37545776]
[198.98330688 -177.82167053]
[213.93045044 -173.65484619]
[223.54734802 -161.47720337]
[224.13609314 -145.97129822]
[215.47032166 -133.09947205]
[200.88218689 -127.81120300]
[196.85420227 -113.36213684]
[192.82621765 -98.91307831]
[188.79824829 -84.46401215]
[184.77026367 -70.01495361]
[180.74229431 -55.56589127]
[176.93299866 -41.05764389]
[173.34326172 -26.49351501]
[169.75352478 -11.92938805]
[166.16378784 2.63473964]
[162.57406616 17.19886589]
[158.98432922 31.76299477]
[155.39459229 46.32712173]
[151.80485535 60.89124680]
[148.21511841 75.45537567]
[156.92156982 87.67002869]
[171.86001587 89.02751160]
[186.51074219 81.65945435]
[200.06660461 90.88824463]
[198.58250427 107.22009277]
[183.58514404 113.85420227]
[170.50253296 103.96596527]
[155.56408691 102.60848236]
[151.49195862 108.90672302]
[164.08831787 117.05115509]
[155.94369507 129.64738464]
[143.34773254 121.50320435]
[139.27561951 127.80145264]
[146.64442444 140.86668396]
[154.01324463 153.93193054]
[161.38206482 166.99717712]
[168.75088501 180.06240845]
[176.11970520 193.12765503]
[190.50605774 200.99942017]
[190.61152649 217.39823914]
[176.32760620 225.45439148]
[162.34837341 216.88041687]
[163.05447388 200.49647522]
[155.68565369 187.43122864]
[148.31683350 174.36599731]
[140.94801331 161.30075073]
[133.57919312 148.23550415]
[126.21037292 135.17027283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[76 83]
[77 82]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
