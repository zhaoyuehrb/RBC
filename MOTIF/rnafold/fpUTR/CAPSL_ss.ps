%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAAGGCAGAACCAGAGUAGAGAUUGACAGUGAGCUGAGCCAAUCAGGCUGUGAAUCUGCAGCAGUGAUCCCAGGUCCUCCAAUUAAUACUAAGAGAGUGGACCAGGGCCCCUGAGGAAGACAG\
) } def
/len { sequence length } bind def

/coor [
[114.81993866 137.21217346]
[105.36228180 139.69410706]
[95.58508301 139.81062317]
[86.07097626 137.55474854]
[77.38692474 133.06092834]
[70.05041504 126.59696960]
[64.49864197 118.54805756]
[61.06245422 109.39383698]
[59.94660950 99.67981720]
[45.23482895 96.75346375]
[30.52305031 93.82711029]
[15.81127071 90.90075684]
[1.09949183 87.97439575]
[-11.94513512 96.48765564]
[-26.82328415 93.31034088]
[-34.85897827 80.82181549]
[-49.57075882 77.89546204]
[-64.61523438 82.79180908]
[-75.58848572 72.72021484]
[-90.30026245 69.79385376]
[-105.01204681 66.86750031]
[-115.33126831 75.62139893]
[-128.61746216 76.78253174]
[-139.96159363 70.14835358]
[-145.30271912 58.35511017]
[-159.93824768 55.06859207]
[-174.57377625 51.78207397]
[-189.20932007 48.49555588]
[-203.84484863 45.20903778]
[-222.69392395 52.15597534]
[-236.47140503 38.67738342]
[-251.25057983 36.11295700]
[-266.02975464 33.54852676]
[-281.22970581 39.70423889]
[-293.99252319 29.40654945]
[-291.18890381 13.24883652]
[-275.70297241 7.85277081]
[-263.46530151 18.76936340]
[-248.68614197 21.33379173]
[-233.90698242 23.89822006]
[-226.00592041 17.21737671]
[-215.50605774 16.02009010]
[-205.91067505 20.95236206]
[-200.55833435 30.57350349]
[-185.92279053 33.86002350]
[-171.28726196 37.14654160]
[-156.65173340 40.43305969]
[-142.01620483 43.71957779]
[-128.26214600 34.12468719]
[-111.48432922 37.46161270]
[-102.08568573 52.15572357]
[-87.37390900 55.08207703]
[-72.66213226 58.00843430]
[-58.66993713 52.90277100]
[-46.64440536 63.18368149]
[-31.93262482 66.11003876]
[-19.72945976 57.64727402]
[-4.76793623 60.40543747]
[4.02584648 73.26261902]
[18.73762512 76.18897247]
[33.44940567 79.11533356]
[48.16118622 82.04168701]
[62.87296295 84.96804047]
[75.20593262 68.54159546]
[94.05942535 60.38830566]
[114.47520447 62.65237427]
[131.08419800 74.73838043]
[139.51844788 93.46786499]
[154.51393127 93.83598328]
[165.91107178 83.21793365]
[181.11337280 83.80487061]
[191.16583252 94.73573303]
[206.16131592 95.10385132]
[221.15679932 95.47196960]
[236.15567017 95.65604401]
[251.15567017 95.65604401]
[266.15115356 95.28792572]
[281.13308716 94.55191040]
[296.11502075 93.81589508]
[311.09695435 93.07987976]
[326.07888794 92.34386444]
[341.02355957 91.05690765]
[355.91076660 89.22074890]
[370.79794312 87.38459015]
[385.68515015 85.54842377]
[398.43441772 76.18002319]
[412.01309204 82.30118561]
[426.90026855 80.46502686]
[432.81979370 66.29270172]
[445.04214478 56.99163818]
[460.27957153 55.06377411]
[474.43328857 61.02769470]
[483.69598389 73.27913666]
[485.57608032 88.52252197]
[479.56781006 102.65746307]
[467.28741455 111.88172150]
[452.03820801 113.71401978]
[437.92214966 107.66148376]
[428.73645020 95.35221863]
[413.84924316 97.18837738]
[402.16482544 106.42544556]
[387.52130127 100.43562317]
[372.63409424 102.27178192]
[357.74691772 104.10794067]
[342.85971069 105.94409943]
[340.37844849 108.58835602]
[336.44973755 110.10924530]
[331.64141846 109.81998444]
[326.81488037 107.32579803]
[311.83294678 108.06181335]
[296.85101318 108.79782867]
[281.86907959 109.53384399]
[266.88717651 110.26985931]
[263.01239014 113.22379303]
[257.21557617 113.70312500]
[251.15567017 110.65604401]
[236.15567017 110.65604401]
[229.39566040 113.83562469]
[220.78868103 110.46745300]
[205.79319763 110.09933472]
[190.79771423 109.73121643]
[180.22100830 120.15566254]
[165.00822449 119.99595642]
[154.14581299 108.83146667]
[139.15032959 108.46334839]
[135.93324280 117.69684601]
[130.57484436 125.87577057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[16 56]
[17 55]
[19 53]
[20 52]
[21 51]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[31 40]
[32 39]
[33 38]
[68 125]
[69 124]
[72 121]
[73 120]
[74 119]
[75 117]
[76 116]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 105]
[83 104]
[84 103]
[85 102]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
