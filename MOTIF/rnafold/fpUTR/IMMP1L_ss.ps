%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCUGAAAAGUGCGCCCUACGAAAGGACGGUCGACUUCGGCGGGGCCCAGGUGAGAAAGGCCCACCUGUGUCCUGGUUGAGGGUCUCCAGGGUUCUUUGGGGCCCGAGGAAUUUCAGACCUGAACAAUCAGGUGGACAACUUCUUGUGACUUUGGGUAUUCUGAAAUUACUGCCAAUGGUGGCAGAGUCUACAUAGAACU\
) } def
/len { sequence length } bind def

/coor [
[89.78398895 268.03680420]
[75.77775574 273.40573120]
[60.77959442 273.01037598]
[57.25907898 258.42938232]
[53.35811234 272.91323853]
[49.45714188 287.39709473]
[54.20165253 303.09494019]
[42.78342056 314.86590576]
[26.94854736 310.60107422]
[22.98659134 294.68771362]
[34.97327423 283.49612427]
[38.87424088 269.01226807]
[42.77521133 254.52839661]
[29.52193642 247.50196838]
[16.26984978 240.47615051]
[6.47088337 251.83309937]
[3.31386328 267.33612061]
[-10.85855103 271.91781616]
[-20.65751648 283.27474976]
[-30.45648384 294.63171387]
[-30.71694756 310.67263794]
[-43.50813675 320.35589600]
[-59.01774979 316.25326538]
[-65.34813690 301.51196289]
[-57.64316559 287.44024658]
[-41.81343079 284.83273315]
[-32.01446533 273.47579956]
[-22.21549988 262.11883545]
[-19.75936699 247.42814636]
[-4.88606501 242.03413391]
[4.91290092 230.67718506]
[12.54652405 217.76486206]
[17.77365494 203.70509338]
[14.95648384 189.07934570]
[27.01781464 178.84045410]
[32.24494553 164.78068542]
[37.47207642 150.72091675]
[42.69920349 136.66114807]
[36.08657074 123.19737244]
[21.76442909 118.73908997]
[7.44228935 114.28080750]
[-6.87985086 109.82252502]
[-21.20199203 105.36424255]
[-35.55820084 101.01691437]
[-49.94762039 96.78079987]
[-64.33703613 92.54469299]
[-78.72645569 88.30857849]
[-93.11587524 84.07246399]
[-108.53937531 87.59754181]
[-118.56350708 76.58091736]
[-132.95292664 72.34481049]
[-147.34234619 68.10869598]
[-161.73176575 63.87258530]
[-176.12118530 59.63647079]
[-190.51060486 55.40036011]
[-202.10937500 65.57246399]
[-217.36972046 67.83641052]
[-231.42210388 61.46977234]
[-239.78247070 48.50412750]
[-239.78303528 33.07676315]
[-231.42364502 20.11049843]
[-217.37173462 13.74281693]
[-202.11122131 16.00562477]
[-190.51168823 26.17687035]
[-186.27449036 41.01094055]
[-171.88507080 45.24705505]
[-157.49565125 49.48316574]
[-143.10623169 53.71927643]
[-128.71681213 57.95538712]
[-114.32739258 62.19150162]
[-99.93312073 58.36342621]
[-88.87976074 69.68304443]
[-74.49034119 73.91915894]
[-60.10092545 78.15527344]
[-45.71150589 82.39138031]
[-31.32208824 86.62749481]
[-24.01304817 85.50004578]
[-16.74370766 91.04209900]
[-2.42156744 95.50038147]
[11.90057278 99.95866394]
[26.22271347 104.41695404]
[40.54485321 108.87523651]
[51.67129135 98.81529236]
[48.67382431 84.11784363]
[45.67635345 69.42038727]
[42.67888260 54.72293091]
[39.68141556 40.02547455]
[34.89738464 32.23633194]
[36.75313568 25.07746124]
[33.98347092 10.33538055]
[31.21380615 -4.40670061]
[28.44414139 -19.14878273]
[25.67447853 -33.89086151]
[14.58879375 -45.97554779]
[19.76902580 -61.53502274]
[35.88619614 -64.56303406]
[46.36034393 -51.94461823]
[40.41655731 -36.66052628]
[43.18622208 -21.91844559]
[45.95588684 -7.17636490]
[48.72555161 7.56571627]
[51.49521637 22.30779648]
[54.37886810 37.02800751]
[57.37633896 51.72546005]
[60.37380981 66.42291260]
[63.37127686 81.12036896]
[66.36874390 95.81782532]
[73.01887512 81.37758636]
[85.19606018 71.99480438]
[99.82039642 69.42980957]
[113.46268463 73.79132843]
[123.14755249 83.61866760]
[137.24734497 78.50048828]
[151.34713745 73.38230896]
[165.44694519 68.26412964]
[179.54673767 63.14594650]
[193.64653015 58.02776337]
[207.74632263 52.90958023]
[221.84611511 47.79140091]
[235.94590759 42.67321777]
[249.92311096 37.22913742]
[263.77017212 31.46208763]
[277.61724854 25.69503784]
[291.46429443 19.92798996]
[305.31137085 14.16094017]
[319.15841675 8.39389133]
[321.22729492 -6.76087618]
[330.54248047 -18.76606750]
[344.52307129 -24.45892715]
[359.37670898 -22.40330505]
[371.12792969 -13.25046253]
[384.97500610 -19.01751137]
[398.82205200 -24.78456116]
[412.66912842 -30.55160904]
[422.43380737 -42.99995422]
[437.15759277 -40.75061417]
[451.00466919 -46.51766205]
[460.52731323 -59.86873627]
[476.82284546 -58.02829361]
[483.12783813 -42.88962555]
[472.95623779 -30.02609634]
[456.77169800 -32.67060089]
[442.92465210 -26.90355110]
[434.15039062 -14.86770630]
[418.43615723 -16.70454597]
[404.58911133 -10.93749809]
[390.74203491 -5.17044830]
[376.89498901 0.59660059]
[375.11486816 15.38499928]
[366.11163330 27.37656975]
[352.22314453 33.29067993]
[337.14013672 31.44688225]
[324.92547607 22.24095345]
[311.07839966 28.00800323]
[297.23135376 33.77505112]
[283.38427734 39.54210281]
[269.53723145 45.30915070]
[255.69015503 51.07619858]
[254.01586914 54.18614197]
[250.74879456 56.63732147]
[246.21604919 57.68847656]
[241.06410217 56.77301407]
[226.96429443 61.89119339]
[212.86450195 67.00937653]
[198.76470947 72.12755585]
[184.66491699 77.24574280]
[170.56512451 82.36392212]
[156.46533203 87.48210144]
[142.36552429 92.60028076]
[128.26573181 97.71846771]
[116.47692871 126.40478516]
[82.70500183 129.14506531]
[92.67854309 140.34901428]
[102.65209198 151.55296326]
[112.62563324 162.75691223]
[122.59917450 173.96084595]
[132.57272339 185.16479492]
[148.30187988 189.80438232]
[151.88490295 205.80731201]
[139.63589478 216.71116638]
[124.15557098 211.29896545]
[121.36877441 195.13835144]
[111.39523315 183.93440247]
[101.42168427 172.73045349]
[91.44814301 161.52650452]
[81.47460175 150.32255554]
[71.50105286 139.11860657]
[56.75897598 141.88827515]
[51.53184509 155.94804382]
[46.30471420 170.00781250]
[41.07758331 184.06758118]
[43.52087402 199.69898987]
[31.83342361 208.93223572]
[26.60629272 222.99200439]
[37.93414307 213.15940857]
[48.85131073 202.87274170]
[62.87217331 197.54212952]
[77.86584473 197.97772217]
[91.55360413 204.11329651]
[101.85517883 215.01640320]
[107.20494843 229.02995300]
[106.78986359 244.02421570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[15 31]
[16 30]
[18 28]
[19 27]
[20 26]
[32 194]
[33 193]
[35 191]
[36 190]
[37 189]
[38 188]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
[112 170]
[113 169]
[114 168]
[115 167]
[116 166]
[117 165]
[118 164]
[119 163]
[120 162]
[121 158]
[122 157]
[123 156]
[124 155]
[125 154]
[126 153]
[131 148]
[132 147]
[133 146]
[134 145]
[136 143]
[137 142]
[172 187]
[173 186]
[174 185]
[175 184]
[176 183]
[177 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
