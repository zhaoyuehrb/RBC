%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUCCCAGCCUGUGCCCCCAGCCUGCGUGCUGCCCAGAGCCCCCAUAGAGAGAGGUCCCCGCCGCCACCCUC\
) } def
/len { sequence length } bind def

/coor [
[196.52316284 286.70031738]
[205.42990112 274.47229004]
[196.61312866 262.33703613]
[187.79635620 250.20176697]
[178.97956848 238.06651306]
[170.16279602 225.93125916]
[157.82536316 227.73547363]
[145.85639954 223.98783875]
[136.64396667 215.36947632]
[132.05496216 203.53979492]
[133.05699158 190.81730652]
[139.51509094 179.72517395]
[131.74468994 166.89471436]
[123.97428131 154.06425476]
[116.20387268 141.23377991]
[108.43346405 128.40332031]
[96.89453125 129.46571350]
[85.83059692 126.02114105]
[76.93395233 118.59648895]
[71.56539917 108.32739258]
[70.54608917 96.78457642]
[74.03192139 85.73357391]
[81.48973083 76.86470795]
[75.38867950 63.16152191]
[69.00199127 49.58911514]
[62.33246231 36.15344238]
[55.66293716 22.71776390]
[42.59650421 13.79706383]
[43.86790085 -1.04317963]
[37.19837189 -14.47885609]
[24.73996162 -25.97773743]
[32.34062958 -41.13247681]
[49.00719070 -38.02409744]
[50.63404846 -21.14838409]
[57.30357742 -7.71270752]
[69.89295959 0.24698386]
[69.09860992 16.04823685]
[75.76814270 29.48391342]
[82.43766785 42.91959000]
[88.40750885 47.64757538]
[89.09186554 57.06047440]
[95.19290924 70.76365662]
[113.23490143 73.49133301]
[126.25724030 86.27304840]
[129.32090759 104.26102448]
[121.26393127 120.63291168]
[129.03433228 133.46337891]
[136.80474854 146.29383850]
[144.57514954 159.12431335]
[152.34555054 171.95477295]
[170.20697021 172.78216553]
[184.02027893 183.89273071]
[188.57757568 200.86529541]
[182.29804993 217.11447144]
[191.11482239 229.24974060]
[199.93161011 241.38499451]
[208.74838257 253.52024841]
[217.56515503 265.65548706]
[231.94705200 260.96334839]
[247.07501221 260.94714355]
[261.46694946 265.60842896]
[273.71286011 274.49057007]
[282.61303711 286.72338867]
[287.29556274 301.10842896]
[287.30163574 316.23638916]
[282.63070679 330.62518311]
[273.74035645 342.86514282]
[261.50155640 351.75714111]
[247.11340332 356.43002319]
[231.98544312 356.42596436]
[217.59977722 351.74539185]
[205.36576843 342.84683228]
[196.48197937 330.60211182]
[191.81875610 316.21078491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[5 55]
[6 54]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[23 42]
[24 41]
[25 39]
[26 38]
[27 37]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
