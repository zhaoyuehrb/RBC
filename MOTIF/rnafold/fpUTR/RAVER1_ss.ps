%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCCAACGGGGCAAGGGGGGCGGGAAGGAGGUGGGGUUUCUCCCAGCCAAUCGACGGGCGCGCCCUCGUUGCCGCUCU\
) } def
/len { sequence length } bind def

/coor [
[-29.27427673 292.34494019]
[-39.06880569 303.83117676]
[-53.20303345 308.83914185]
[-67.84756470 306.11822510]
[-77.48937988 317.60888672]
[-87.13119507 329.09957886]
[-87.17097473 345.14257812]
[-99.82775116 355.00082397]
[-115.39233398 351.11193848]
[-121.92489624 336.45913696]
[-114.41422272 322.28277588]
[-98.62185669 319.45776367]
[-88.98004150 307.96707153]
[-79.33823395 296.47640991]
[-84.56079102 282.52685547]
[-82.08329773 267.73773193]
[-72.47237396 256.09744263]
[-58.23192215 250.79588318]
[-43.15147018 253.35070801]
[-33.50965500 241.86004639]
[-23.86783981 230.36938477]
[-14.22602654 218.87870789]
[-4.58421183 207.38804626]
[5.05760193 195.89738464]
[14.69941616 184.40670776]
[16.95323372 169.68362427]
[31.75092888 164.08551025]
[41.39274216 152.59484863]
[43.64656067 137.87174988]
[58.44425583 132.27365112]
[68.08606720 120.78297424]
[77.72788239 109.29231262]
[87.36969757 97.80164337]
[92.50000000 83.70625305]
[92.50000000 68.70625305]
[92.50000000 53.70625687]
[92.50000000 38.70625687]
[92.50000000 23.70625496]
[83.83629608 9.78245258]
[91.80042267 -4.55298233]
[108.19957733 -4.55298233]
[116.16370392 9.78245258]
[107.50000000 23.70625496]
[107.50000000 38.70625687]
[107.50000000 53.70625687]
[107.50000000 68.70625305]
[107.50000000 83.70625305]
[120.34250641 91.45674896]
[133.61393738 84.46609497]
[146.88536072 77.47544098]
[148.97113037 62.09918594]
[159.72079468 50.90882111]
[175.00090027 48.20726776]
[188.93589783 55.03332901]
[196.16754150 68.76224518]
[193.91508484 84.11496735]
[183.04464722 95.18805695]
[167.73614502 97.72369385]
[153.87600708 90.74686432]
[140.60458374 97.73751831]
[127.33315277 104.72817230]
[121.00213623 110.97601318]
[113.80843353 113.98810577]
[107.05242157 113.93027496]
[101.82489777 111.42717743]
[98.86036682 107.44345856]
[89.21855164 118.93412781]
[79.57673645 130.42478943]
[69.93492126 141.91546631]
[66.99145508 157.46044922]
[52.88341141 162.23666382]
[43.24159622 173.72732544]
[40.29813004 189.27230835]
[26.19008255 194.04852295]
[16.54826927 205.53919983]
[6.90645456 217.02986145]
[-2.73535943 228.52052307]
[-12.37717342 240.01119995]
[-22.01898766 251.50186157]
[-31.66080284 262.99252319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[27 72]
[28 71]
[30 69]
[31 68]
[32 67]
[33 66]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
