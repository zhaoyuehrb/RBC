%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACAGAGGGAAAGGCAGCAAGAGGAGAGGCAUAAAUUUAGGAUCUCACCCUUCAUUCCACAGACACACACAGCCUCUCUGCCCACCUCUGCUUCCUCUAGGAACACAGGAGUUCCAGAUCACAUCGAGUUCACC\
) } def
/len { sequence length } bind def

/coor [
[162.38397217 206.12254333]
[161.65606689 197.97038269]
[162.08976746 189.79426575]
[163.67716980 181.75894165]
[166.38714600 174.02642822]
[170.16592407 166.75276184]
[158.53025818 157.28643799]
[146.89457703 147.82011414]
[135.25891113 138.35380554]
[123.62324524 128.88748169]
[111.98757172 119.42115784]
[101.12957001 122.79489899]
[89.99121094 120.51115417]
[81.33694458 113.13673401]
[77.31467438 102.50189972]
[78.92269135 91.24610901]
[67.72994232 81.26000977]
[56.53718185 71.27391052]
[45.34442902 61.28780746]
[34.15167236 51.30170441]
[27.63200188 49.54918671]
[23.63325882 45.35924530]
[22.69004822 40.59729385]
[11.96340656 30.11210823]
[1.23676372 19.62692261]
[-9.48987865 9.14173508]
[-20.21652222 -1.34345150]
[-32.26951218 7.03341150]
[-45.65921402 13.03682232]
[-59.92372513 16.46135712]
[-74.57127380 17.19052696]
[-89.09718323 15.20073605]
[-103.00122833 10.56204891]
[-115.80490875 3.43571711]
[-127.06787109 -5.93142033]
[-136.40309143 -17.21549034]
[-143.49014282 -30.02678299]
[-148.08621216 -43.92320633]
[-150.03440857 -58.42554474]
[-149.26914978 -73.03399658]
[-145.81831360 -87.24536896]
[-139.80226135 -100.57044983]
[-131.42964172 -112.55081177]
[-141.91482544 -123.27745056]
[-152.40000916 -134.00408936]
[-166.66390991 -128.66917419]
[-181.86412048 -129.60360718]
[-195.36714172 -136.64549255]
[-204.83349609 -148.57479858]
[-208.62306213 -163.32467651]
[-206.07928467 -178.33964539]
[-197.64288330 -191.01824951]
[-184.77552795 -199.16386414]
[-169.70654297 -201.36518860]
[-155.04675293 -197.24084473]
[-143.33602905 -187.50540161]
[-136.60333252 -173.84558105]
[-136.01513672 -158.62803650]
[-141.67337036 -144.48928833]
[-131.18818665 -133.76263428]
[-120.70300293 -123.03599548]
[-107.88500214 -131.48057556]
[-93.66802216 -137.27989197]
[-78.59156036 -140.21191406]
[-63.22808075 -140.16348267]
[-48.16131592 -137.13465881]
[-33.96407318 -131.23873901]
[-21.17645264 -122.69808197]
[-10.28531170 -111.83569336]
[-1.70571935 -99.06301117]
[4.23485708 -84.86431122]
[7.30905247 -69.77837372]
[7.39830446 -54.37802887]
[4.49742460 -39.24837875]
[-1.28513455 -24.96460915]
[-9.73133469 -12.07009411]
[0.99530786 -1.58490729]
[11.72195053 8.90027905]
[22.44859314 19.38546562]
[33.17523575 29.87065315]
[44.13777542 40.10895157]
[55.33053207 50.09505081]
[66.52328491 60.08115387]
[77.71604156 70.06725311]
[88.90879822 80.05335999]
[106.77346039 78.20542145]
[120.44360352 89.85394287]
[121.45389557 107.78549194]
[133.08956909 117.25180817]
[144.72523499 126.71813202]
[156.36090088 136.18444824]
[167.99656677 145.65077209]
[179.63223267 155.11708069]
[199.97570801 142.74131775]
[223.55039978 139.63484192]
[246.34080505 146.29940796]
[264.47601318 161.57476807]
[274.88726807 182.84062195]
[275.82711792 206.46594238]
[290.17501831 210.84063721]
[304.52291870 215.21531677]
[313.73269653 214.72912598]
[319.14556885 219.85633850]
[333.39016724 224.55650330]
[347.63476562 229.25665283]
[361.87933350 233.95681763]
[376.12393188 238.65698242]
[390.12365723 231.32322693]
[405.18353271 236.11645508]
[412.36886597 250.19291687]
[407.41668701 265.20129395]
[393.26504517 272.23739624]
[378.30987549 267.12680054]
[371.42379761 252.90156555]
[357.17919922 248.20141602]
[342.93460083 243.50125122]
[328.69000244 238.80108643]
[314.44540405 234.10093689]
[300.14822388 229.56321716]
[285.80032349 225.18852234]
[271.45245361 220.81384277]
[267.58538818 227.96557617]
[262.74298096 234.50024414]
[257.02212524 240.28570557]
[250.53746033 245.20481873]
[243.41905212 249.15780640]
[235.80989075 252.06431580]
[227.86296082 253.86499023]
[219.73812866 254.52270508]
[211.59901428 254.02340698]
[203.60960388 252.37625122]
[195.93099976 249.61360168]
[188.71818542 245.79031372]
[182.11683655 240.98263550]
[176.26043701 235.28672791]
[171.26754761 228.81669617]
[167.23942566 221.70236206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[43 61]
[44 60]
[45 59]
[99 121]
[100 120]
[101 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
