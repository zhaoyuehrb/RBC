%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAGAUUGGGUGCUUGGCCGUCCCUGCCAUUAGCGCGUAACGAGAGACUGCUUGCUGCGGCAGAGACGCCAGAGGUGCAGCUCCAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[108.52088165 129.60815430]
[108.52111816 114.60861969]
[101.02111816 114.60861969]
[94.25596619 127.99639893]
[87.49081421 141.38418579]
[85.74367523 158.24786377]
[69.05537415 161.23733521]
[61.56295013 146.02879333]
[74.10302734 134.61903381]
[80.86817932 121.23124695]
[87.63333130 107.84346771]
[90.62112427 93.14404297]
[89.61923218 78.17753601]
[88.61734772 63.21103287]
[87.61545563 48.24452972]
[86.61356354 33.27802658]
[85.11212921 18.35335922]
[83.11282349 3.48719740]
[81.11352539 -11.37896442]
[79.11421967 -26.24512672]
[74.79150391 -34.52721786]
[77.30509949 -41.64049149]
[75.80366516 -56.56515884]
[74.30223083 -71.48982239]
[65.22245026 -84.44622040]
[71.64694214 -97.88404083]
[70.14550781 -112.80870819]
[68.64407349 -127.73337555]
[67.14263916 -142.65805054]
[65.64120483 -157.58271790]
[56.08766174 -166.44360352]
[55.24615860 -179.04212952]
[63.02365494 -188.47154236]
[62.02176666 -203.43804932]
[61.01987839 -218.40455627]
[60.01798630 -233.37104797]
[59.01609802 -248.33755493]
[50.37432480 -261.59011841]
[57.24425888 -274.80575562]
[56.24237061 -289.77227783]
[55.24048233 -304.73876953]
[41.68465424 -312.10375977]
[34.28261948 -325.63940430]
[35.39634323 -341.02651978]
[44.67043686 -353.35513306]
[59.14557648 -358.69122314]
[74.20278931 -355.33209229]
[85.03737640 -344.34957886]
[88.19207001 -329.24819946]
[82.66020203 -314.84674072]
[70.20698547 -305.74066162]
[71.20886993 -290.77416992]
[72.21076202 -275.80764771]
[80.78087616 -263.62561035]
[73.98259735 -249.33944702]
[74.98448944 -234.37294006]
[75.98638153 -219.40643311]
[76.98826599 -204.43994141]
[77.99015808 -189.47343445]
[88.55487823 -175.57006836]
[80.56587219 -159.08415222]
[82.06730652 -144.15948486]
[83.56874084 -129.23481750]
[85.07017517 -114.31015015]
[86.57160950 -99.38548279]
[95.54399872 -87.49659729]
[89.22689819 -72.99126434]
[90.72833252 -58.06659317]
[92.22976685 -43.14192581]
[93.98037720 -28.24443054]
[95.97968292 -13.37826920]
[97.97898865 1.48789322]
[99.97829437 16.35405540]
[103.32846069 20.01475716]
[104.27829742 25.87942123]
[101.58007050 32.27613831]
[102.58195496 47.24264145]
[103.58384705 62.20914459]
[104.58573914 77.17564392]
[105.58762360 92.14215088]
[125.32509613 89.62179565]
[144.40890503 107.84346771]
[151.17405701 121.23124695]
[157.93920898 134.61903381]
[172.67016602 140.97341919]
[176.74751282 156.48970032]
[167.04347229 169.26509094]
[151.00212097 169.49943542]
[140.92903137 157.01293945]
[144.55142212 141.38418579]
[137.78627014 127.99639893]
[131.02111816 114.60861969]
[123.52111816 114.60861969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[17 73]
[18 72]
[19 71]
[20 70]
[22 69]
[23 68]
[24 67]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[39 53]
[40 52]
[41 51]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
