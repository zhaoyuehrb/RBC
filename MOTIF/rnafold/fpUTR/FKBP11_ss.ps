%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCGCGACCCGCCCCGUCCCGUCCAGUCUGGCCUGGGCGCCGCGGGAACGCUGUCCUGGCUGCCGCCACCCGAACAGCCUGUCCUGGUGCCCCGGCUCCCUGCCCCGCGCCCAGUC\
) } def
/len { sequence length } bind def

/coor [
[132.22821045 168.58811951]
[119.47265625 176.48089600]
[104.49678802 175.63037109]
[92.71688843 166.34414673]
[88.39336395 151.98074341]
[93.08926392 137.73582458]
[94.22754669 122.77907562]
[86.05796051 135.35913086]
[77.88837433 147.93919373]
[74.33264923 164.51608276]
[57.41927338 165.68824768]
[51.61082077 149.76034546]
[65.30831909 139.76960754]
[73.47790527 127.18954468]
[81.64748383 114.60948944]
[75.36759186 100.98734283]
[60.49591827 99.02944946]
[45.62424469 97.07155609]
[30.75257301 95.11366272]
[15.88089943 93.15576935]
[3.42099571 102.50395203]
[-11.63310432 100.30651855]
[-20.46838379 88.37029266]
[-35.34005737 86.41239929]
[-50.21173096 84.45450592]
[-65.08340454 82.49662018]
[-79.95507812 80.53872681]
[-94.82675171 78.58083344]
[-109.69841766 76.62294006]
[-122.08265686 86.44161224]
[-137.77267456 84.54451752]
[-147.45985413 72.05716705]
[-145.39698792 56.38808441]
[-132.80790710 46.83345795]
[-117.16152191 49.06188202]
[-107.74052429 61.75126648]
[-92.86885834 63.70915604]
[-77.99718475 65.66705322]
[-63.12550735 67.62494659]
[-48.25383759 69.58283997]
[-33.38216400 71.54072571]
[-18.51049042 73.49861908]
[-6.88694429 64.25585175]
[8.22293758 66.02957916]
[17.83879280 78.28409576]
[32.71046448 80.24198914]
[47.58213806 82.19988251]
[62.45381165 84.15777588]
[77.32548523 86.11566925]
[84.54738617 81.74649811]
[92.04864502 80.29996490]
[98.79814148 81.46651459]
[103.99716187 84.60997772]
[109.37268066 70.60626984]
[114.74819946 56.60256577]
[120.12371826 42.59885788]
[125.31547546 28.52598953]
[130.32257080 14.38636684]
[125.65666962 -5.14031792]
[140.64494324 -17.24108696]
[144.90516663 -31.62338257]
[149.16540527 -46.00568008]
[153.42562866 -60.38797379]
[149.07327271 -76.19902039]
[160.78091431 -87.68218231]
[176.50474548 -83.02456665]
[180.06942749 -67.01753998]
[167.80792236 -56.12774658]
[163.54769897 -41.74544907]
[159.28746033 -27.36315346]
[155.02723694 -12.98085690]
[160.75669861 -4.33878660]
[160.71574402 6.25106478]
[154.67266846 15.21545982]
[144.46220398 19.39347076]
[139.45509338 33.53309250]
[140.19750977 40.98018646]
[134.12742615 47.97438049]
[128.75190735 61.97808456]
[123.37638855 75.98178864]
[118.00086975 89.98549652]
[123.19261932 104.05836487]
[136.37487793 111.21575165]
[149.55712891 118.37313080]
[154.17472839 118.06306458]
[158.20552063 119.19788361]
[161.25090027 121.39311218]
[163.08813477 124.17123413]
[163.68545532 127.03097534]
[176.04734802 135.52706909]
[188.40924072 144.02316284]
[200.77113342 152.51925659]
[213.13302612 161.01535034]
[226.08058167 157.04466248]
[238.75375366 161.23318481]
[246.55329895 171.82295227]
[246.78686523 184.77754211]
[258.92211914 193.59431458]
[271.05737305 202.41110229]
[287.06405640 201.33168030]
[297.78121948 213.26994324]
[294.98754883 229.06788635]
[280.82611084 236.60667419]
[266.16033936 230.10317993]
[262.24060059 214.54635620]
[250.10533142 205.72956848]
[237.97007751 196.91279602]
[221.54898071 200.27586365]
[207.46557617 190.58041382]
[204.63693237 173.37724304]
[192.27503967 164.88114929]
[179.91314697 156.38505554]
[167.55125427 147.88896179]
[155.18936157 139.39286804]
[142.39974976 131.55538940]
[129.21749878 124.39800262]
[116.03524017 117.24062347]
[124.17232513 129.84172058]
[135.09677124 140.12065125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[53 81]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[60 71]
[61 70]
[62 69]
[63 68]
[82 117]
[83 116]
[84 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
