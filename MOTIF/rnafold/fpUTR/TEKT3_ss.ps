%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAUAGGAAAGGCGGGGCCAGGGCCAGACUGGUCUGGGCCCCAGUCGAGGGCUGCAGGUGGUAGGCUGCGACCCCUUCCUCCCACAGCCCCUUCCCGCCCCUCGCCGGGCAUCCGCCGACAGGUACAUACCAAGAAAUUGAAUUGCUGAGUCACAGGAGAGAUUUACAAAUAGUGUUUUGGCAUC\
) } def
/len { sequence length } bind def

/coor [
[89.37431335 137.54182434]
[82.69807434 134.97052002]
[76.60357666 131.22340393]
[71.29573059 126.42648315]
[66.95300293 120.74102020]
[63.72140503 114.35818481]
[61.70959473 107.49259186]
[60.98521805 100.37506866]
[46.23791885 97.63332367]
[31.49061966 94.89157867]
[16.74332047 92.14982605]
[1.90583551 101.94812775]
[-14.74993896 97.49086761]
[-27.52642632 105.34970856]
[-40.30291367 113.20854950]
[-53.01329422 121.17385864]
[-65.65667725 129.24510193]
[-78.30006409 137.31632996]
[-90.94344330 145.38757324]
[-103.58683014 153.45880127]
[-116.23021698 161.53004456]
[-123.69896698 175.47737122]
[-138.58999634 175.80398560]
[-151.23338318 183.87522888]
[-163.87675476 191.94645691]
[-176.52014160 200.01770020]
[-189.16352844 208.08892822]
[-201.80691528 216.16017151]
[-211.90415955 229.77934265]
[-227.78628540 223.84684753]
[-226.48225403 206.94313049]
[-209.87814331 203.51678467]
[-197.23475647 195.44554138]
[-184.59138489 187.37431335]
[-171.94799805 179.30307007]
[-159.30461121 171.23184204]
[-146.66122437 163.16059875]
[-140.09681702 149.79057312]
[-124.30145264 148.88665771]
[-111.65806580 140.81541443]
[-99.01467896 132.74418640]
[-86.37129974 124.67295074]
[-73.72791290 116.60171509]
[-61.08452988 108.53047943]
[-57.13041306 102.26879120]
[-48.16175461 100.43206024]
[-35.38526535 92.57321930]
[-22.60877800 84.71437836]
[-22.93756866 80.39421844]
[-22.36008263 76.10022736]
[-20.90160751 72.02042389]
[-31.14786720 61.06533051]
[-41.39412689 50.11023331]
[-51.64038467 39.15513229]
[-61.88664627 28.20003510]
[-72.13290405 17.24493790]
[-87.69448853 16.55586815]
[-97.92959595 5.29987812]
[-97.17677307 -9.53146839]
[-107.42302704 -20.48656654]
[-122.50056458 -25.28015709]
[-125.54350281 -39.86061478]
[-135.78976440 -50.81571579]
[-150.86729431 -55.60930634]
[-153.91023254 -70.18976593]
[-164.15649414 -81.14485931]
[-174.40275574 -92.09996033]
[-189.78414917 -90.05246735]
[-203.41539001 -97.46656036]
[-210.05499268 -111.49137115]
[-207.14988708 -126.73406982]
[-195.81715393 -137.33354187]
[-180.41444397 -139.21405029]
[-166.86444092 -131.65252686]
[-160.37736511 -117.55651093]
[-163.44764709 -102.34622192]
[-153.20138550 -91.39112091]
[-142.95513916 -80.43601990]
[-128.61047363 -76.42601776]
[-124.83466339 -61.06197357]
[-114.58840179 -50.10687637]
[-100.24375153 -46.09686661]
[-96.46793365 -30.73282623]
[-86.22167206 -19.77772713]
[-71.37316132 -19.53824615]
[-60.82593918 -8.57418060]
[-61.17780685 6.99867868]
[-50.93154907 17.95377731]
[-40.68528748 28.90887451]
[-30.43902969 39.86397171]
[-20.19277000 50.81906891]
[-9.94651031 61.77416992]
[8.24099922 62.37756348]
[19.48506737 77.40252686]
[34.23236847 80.14427948]
[48.97966385 82.88602448]
[63.72696304 85.62777710]
[85.37069702 63.82987976]
[116.08245087 64.45216370]
[124.77712250 52.22911835]
[133.47178650 40.00607681]
[131.04739380 24.61906433]
[140.03915405 12.34701920]
[154.72325134 10.13056183]
[163.41792297 -2.09248161]
[172.11257935 -14.31552505]
[173.80688477 -30.04574776]
[187.48905945 -35.93193436]
[196.18373108 -48.15497589]
[204.87838745 -60.37802124]
[205.88946533 -76.74597168]
[220.68864441 -83.81111908]
[234.05180359 -74.30544281]
[232.23208618 -58.00757217]
[217.10144043 -51.68335342]
[208.40676880 -39.46031189]
[199.71211243 -27.23726654]
[198.63970947 -12.38131809]
[184.33561707 -5.62086010]
[175.64096069 6.60218334]
[166.94628906 18.82522774]
[169.66921997 33.42390060]
[161.02572632 45.94366074]
[145.69482422 48.70074081]
[137.00016785 60.92378616]
[128.30549622 73.14682770]
[132.78707886 78.85049438]
[136.13540649 85.28516388]
[138.23475647 92.22843933]
[139.01257324 99.44033051]
[138.44195557 106.67156982]
[136.54264832 113.67220306]
[149.31913757 121.53104401]
[162.09561157 129.38989258]
[174.87210083 137.24871826]
[187.64859009 145.10755920]
[200.42507935 152.96640015]
[216.23333740 153.60626221]
[223.02024841 166.86473083]
[235.79673767 174.72357178]
[248.57322693 182.58241272]
[261.34973145 190.44125366]
[274.06771851 188.21623230]
[284.55224609 195.04098511]
[287.47119141 206.79292297]
[300.11456299 214.86416626]
[312.75793457 222.93539429]
[321.69467163 224.92173767]
[325.54357910 231.24862671]
[338.05035400 239.52999878]
[350.55709839 247.81137085]
[363.06384277 256.09274292]
[375.57058716 264.37414551]
[388.07733154 272.65551758]
[402.56509399 267.09808350]
[417.54373169 271.15020752]
[427.25369263 283.25375366]
[427.96130371 298.75469971]
[419.39443970 311.69256592]
[404.84725952 317.09252930]
[389.91345215 312.87814331]
[380.33535767 300.66995239]
[379.79595947 285.16226196]
[367.28921509 276.88088989]
[354.78247070 268.59951782]
[342.27572632 260.31811523]
[329.76895142 252.03675842]
[317.26220703 243.75537109]
[304.68670654 235.57878113]
[292.04333496 227.50755310]
[279.39993286 219.43630981]
[261.86029053 219.60969543]
[253.49087524 203.21774292]
[240.71438599 195.35890198]
[227.93789673 187.50006104]
[215.16140747 179.64122009]
[200.26701355 179.56347656]
[192.56623840 165.74288940]
[179.78974915 157.88404846]
[167.01325989 150.02520752]
[154.23678589 142.16636658]
[141.46029663 134.30754089]
[128.68380737 126.44869232]
[123.37224579 131.24151611]
[117.27484894 134.98390198]
[110.59661865 137.55004883]
[103.56210327 138.85363770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 97]
[9 96]
[10 95]
[11 94]
[13 48]
[14 47]
[15 46]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[59 84]
[60 83]
[62 81]
[63 80]
[65 78]
[66 77]
[67 76]
[99 126]
[100 125]
[101 124]
[104 121]
[105 120]
[106 119]
[108 117]
[109 116]
[110 115]
[132 183]
[133 182]
[134 181]
[135 180]
[136 179]
[137 178]
[139 176]
[140 175]
[141 174]
[142 173]
[145 171]
[146 170]
[147 169]
[149 168]
[150 167]
[151 166]
[152 165]
[153 164]
[154 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
