%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAGCGCGGAGGCCGCUGGGACGCGGUUCAGCUCAUUCCCUGAGGCCGGCCCGCGUCCCGUCAGGCGCCGCGCGGGGUUAGCGCGGGGUCAGCGGAGGUCAGCGGGGGUCAGCAGCAGCGGCUCCGAGGGCGCGGCGGACGCAGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[87.16726685 338.57272339]
[96.93815613 325.84835815]
[96.32633209 310.86083984]
[85.27879333 305.66741943]
[77.45979309 296.19876099]
[74.41378784 284.22805786]
[76.78377533 272.03161621]
[84.17675781 261.95596313]
[95.22734833 255.96646118]
[95.22734833 240.96646118]
[95.22734833 225.96646118]
[83.08892822 217.37596130]
[78.27961731 203.11640930]
[82.84236908 188.58938599]
[95.22734833 179.42868042]
[95.22734833 164.42868042]
[95.22734833 149.42868042]
[95.22734833 134.42868042]
[95.22734833 119.42867279]
[85.28932190 108.19321442]
[70.40154266 106.36179352]
[55.51376343 104.53038025]
[40.62598801 102.69896698]
[25.73820877 100.86755371]
[10.85043144 99.03614044]
[-4.03734636 97.20472717]
[-18.92512321 95.37330627]
[-33.81290054 93.54189301]
[-48.70067978 91.71047974]
[-63.34228516 97.70497131]
[-75.02965546 88.47162628]
[-89.91743469 86.64021301]
[-104.55904388 92.63470459]
[-116.24641418 83.40136719]
[-131.13418579 81.56994629]
[-146.03987122 79.89048004]
[-160.96191406 78.36313629]
[-175.88395691 76.83579254]
[-189.18208313 85.81015015]
[-204.44602966 80.87137604]
[-209.96659851 65.80808258]
[-201.50888062 52.17552948]
[-185.56089783 50.43144989]
[-174.35661316 61.91375351]
[-159.43457031 63.44110107]
[-144.51252747 64.96844482]
[-137.49595642 62.50603104]
[-129.30278015 66.68217468]
[-114.41500092 68.51358795]
[-100.83826447 62.38809967]
[-88.08602142 71.75243378]
[-73.19824219 73.58385468]
[-59.62150955 67.45836639]
[-46.86926270 76.82270050]
[-31.98148727 78.65411377]
[-17.09370995 80.48553467]
[-2.20593166 82.31694794]
[12.68184566 84.14836121]
[27.56962395 85.97977448]
[42.45740128 87.81118774]
[57.34517670 89.64260864]
[72.23295593 91.47402191]
[87.12073517 93.30543518]
[84.96621704 88.23802948]
[84.35633087 82.24829102]
[85.53676605 75.75180817]
[88.64965820 69.21908569]
[90.48107147 54.33130646]
[92.31248474 39.44352722]
[86.31799316 24.80192184]
[95.55133057 13.11454964]
[97.38275146 -1.77322805]
[99.21416473 -16.66100502]
[101.04557800 -31.54878235]
[102.87699127 -46.43656158]
[104.70840454 -61.32433701]
[93.91455841 -72.63922882]
[92.97064972 -88.24829865]
[102.32238007 -100.78142548]
[117.55413818 -104.32083893]
[131.47396851 -97.19535065]
[137.50932312 -82.76938629]
[132.81053162 -67.85445404]
[119.59618378 -59.49292374]
[117.76477051 -44.60514450]
[115.93335724 -29.71736908]
[114.10194397 -14.82959080]
[112.27052307 0.05818673]
[110.43910980 14.94596386]
[116.56459808 28.52269745]
[107.20026398 41.27494431]
[105.36884308 56.16271973]
[103.53742981 71.05049896]
[108.27317047 76.86623383]
[111.46150208 62.20899963]
[124.90881348 55.56296158]
[138.48922729 61.93261719]
[141.97662354 76.52159119]
[132.74497986 88.34431458]
[117.74465179 88.49770355]
[122.48039246 94.31343842]
[137.43048096 95.53607941]
[152.38056946 96.75872040]
[164.36465454 86.80786896]
[179.50875854 88.26076508]
[188.92150879 99.74708557]
[203.87159729 100.96972656]
[218.82168579 102.19236755]
[233.77177429 103.41500854]
[248.72186279 104.63764191]
[257.59118652 102.20793915]
[263.96340942 106.04075623]
[278.88543701 107.56809998]
[287.80249023 105.31982422]
[294.09521484 109.28182983]
[308.98297119 111.11324310]
[323.86041260 104.21437836]
[337.11621094 113.86920166]
[335.11398315 130.14566040]
[319.91342163 136.29992676]
[307.15158081 126.00102234]
[292.26379395 124.16960907]
[277.35809326 122.49014282]
[262.43606567 120.96279907]
[247.49922180 119.58773041]
[232.54913330 118.36509705]
[217.59904480 117.14245605]
[202.64895630 115.91981506]
[187.69886780 114.69717407]
[176.54493713 124.50151825]
[161.36599731 123.47456360]
[151.15792847 111.70880890]
[136.20783997 110.48616791]
[121.25775146 109.26352692]
[110.22734833 119.42867279]
[110.22734833 134.42868042]
[110.22734833 149.42868042]
[110.22734833 164.42868042]
[110.22734833 179.42868042]
[122.61231995 188.58938599]
[127.17507172 203.11640930]
[122.36576080 217.37596130]
[110.22734833 225.96646118]
[110.22734833 240.96646118]
[110.22734833 255.96646118]
[125.18214417 266.13015747]
[131.03533936 283.07281494]
[125.63841248 300.00210571]
[111.31384277 310.24902344]
[111.92567444 325.23654175]
[122.70121002 337.12213135]
[119.98499298 352.93356323]
[105.86067200 360.54165649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[9 145]
[10 144]
[11 143]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[31 52]
[32 51]
[34 49]
[35 48]
[36 46]
[37 45]
[38 44]
[67 93]
[68 92]
[69 91]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[101 134]
[102 133]
[103 132]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[112 124]
[113 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
