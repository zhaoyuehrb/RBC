%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCACCCUGGGCUGCGGCUCUGAGGCUGCCGUGGCCAUGGAGCUCUGGAAGCUGGGCUGGGGGAGGAAGCCUGGUGGCUCUGACCUCCCCUGGAGGCGAAGGAGGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[137.74453735 139.77592468]
[125.08813477 148.75817871]
[110.42198181 153.83453369]
[94.92095184 154.59832764]
[79.82678986 150.98838806]
[66.34864807 143.29388428]
[55.56624222 132.13122559]
[48.34331894 118.39459991]
[33.65705490 121.44644165]
[24.97335243 134.37823486]
[10.03592110 137.26402283]
[-2.23904467 128.90573120]
[-16.92530632 131.95758057]
[-31.61156654 135.00941467]
[-46.29782867 138.06126404]
[-60.98408890 141.11309814]
[-75.67034912 144.16493225]
[-90.35661316 147.21678162]
[-105.04287720 150.26861572]
[-119.72913361 153.32046509]
[-125.15869904 167.76080322]
[-137.54701233 176.95500183]
[-152.94099426 177.96923828]
[-166.42849731 170.47985840]
[-173.70570374 156.87669373]
[-172.45048523 141.50048828]
[-163.06336975 129.25770569]
[-148.53974915 124.05498505]
[-133.51408386 127.55249786]
[-122.78097534 138.63420105]
[-108.09471130 135.58235168]
[-93.40845490 132.53051758]
[-78.72219086 129.47868347]
[-64.03592682 126.42683411]
[-49.34967041 123.37500000]
[-34.66340637 120.32315826]
[-19.97714615 117.27131653]
[-5.29088497 114.21947479]
[2.63790536 101.66281128]
[17.48838806 98.35859680]
[30.60521507 106.76018524]
[45.29147720 103.70834351]
[46.21002197 89.35045624]
[50.83158112 75.72571564]
[58.83799744 63.77206039]
[69.67808533 54.31241226]
[82.60559845 47.99798965]
[96.73057556 45.26349258]
[111.08063507 46.29717255]
[124.66786957 51.02786255]
[136.55693054 59.12989426]
[145.92932129 70.04550934]
[152.13984680 83.02325439]
[166.90399170 80.37370300]
[181.66813660 77.72415161]
[196.43228149 75.07460785]
[211.19642639 72.42505646]
[225.96055603 69.77550507]
[240.72470093 67.12595367]
[255.48884583 64.47640991]
[269.62277222 59.45321274]
[282.74755859 52.19102859]
[295.87237549 44.92884064]
[308.99719238 37.66665268]
[322.12200928 30.40446663]
[335.24682617 23.14228058]
[348.37161255 15.88009357]
[361.49642944 8.61790657]
[371.16741943 -10.40254116]
[391.71795654 -9.68525124]
[404.20422363 -17.99749756]
[416.69049072 -26.30974579]
[429.17672729 -34.62199020]
[435.96615601 -49.54967880]
[452.31253052 -50.86417770]
[461.40011597 -37.21324921]
[453.88037109 -22.63979721]
[437.48898315 -22.13573647]
[425.00271606 -13.82349014]
[412.51647949 -5.51124382]
[400.03021240 2.80100322]
[399.70019531 11.91016197]
[395.07681274 19.92652512]
[387.12216187 24.92178917]
[377.61614990 25.62484360]
[368.75860596 21.74271584]
[355.63381958 29.00490379]
[342.50900269 36.26708984]
[329.38418579 43.52927780]
[316.25936890 50.79146576]
[303.13458252 58.05364990]
[290.00976562 65.31583405]
[276.88494873 72.57802582]
[291.66821289 75.11872101]
[303.97561646 83.69355774]
[311.48019409 96.68128967]
[312.76309204 111.62632751]
[307.58172607 125.70302582]
[296.91571045 136.24989319]
[282.78170776 141.27285767]
[267.85202026 139.82221985]
[254.94940186 132.17224121]
[246.51332092 119.76931763]
[244.13880920 104.95845032]
[248.27479553 90.53993988]
[258.13839722 79.24054718]
[243.37425232 81.89009857]
[228.61010742 84.53964996]
[213.84597778 87.18920135]
[199.08183289 89.83874512]
[184.31768799 92.48829651]
[169.55354309 95.13784790]
[154.78939819 97.78739166]
[153.21481323 113.22714996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
