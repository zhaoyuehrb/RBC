%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAACCAGAAUUUGCCAAAACAGGAAAUAGGUGUUUCAUAUAUACGGCUCUAACCUUCUCUCUCUGCACCUUCCUUCUGUCAAUAG\
) } def
/len { sequence length } bind def

/coor [
[67.73557281 294.59390259]
[56.48901749 304.60433960]
[43.40674973 312.05740356]
[29.06066513 316.62722778]
[14.07791233 318.11410522]
[-0.88652664 316.45303345]
[-15.17847157 311.71655273]
[-28.17313766 304.11181641]
[-39.30245590 293.97119141]
[-48.07990265 281.73803711]
[-54.12176132 267.94711304]
[-57.16390991 253.20130920]
[-57.07335663 238.14521790]
[-53.85406113 223.43707275]
[-47.64675903 209.71981812]
[-38.72280502 197.59312439]
[-27.47231865 187.58711243]
[-14.38712025 180.13920593]
[-0.03923824 175.57499695]
[14.94409847 174.09402466]
[29.90788269 175.76100159]
[44.19796371 180.50308228]
[51.77425766 167.55705261]
[59.35055161 154.61102295]
[66.92684174 141.66497803]
[74.50313568 128.71894836]
[82.07942963 115.77291870]
[76.23698425 102.29141998]
[79.39575195 87.94195557]
[90.35922241 78.15996552]
[104.97453308 76.65078735]
[112.55082703 63.70475388]
[120.12712097 50.75872421]
[127.70341492 37.81269073]
[135.27970886 24.86665726]
[142.85600281 11.92062378]
[132.46023560 1.65360856]
[124.85531616 -10.81116009]
[120.48711395 -24.73402786]
[119.60962677 -39.29011154]
[122.27015686 -53.61818314]
[128.30682373 -66.87160492]
[137.35839844 -78.26837158]
[148.88589478 -87.13726044]
[162.20468140 -92.95732880]
[176.52514648 -95.38855743]
[190.99949646 -94.29167175]
[204.77197266 -89.73613739]
[212.80043030 -102.40673065]
[209.09782410 -117.77117157]
[217.41514587 -131.20983887]
[232.81787109 -134.74980164]
[246.16784668 -126.29086304]
[249.54476929 -110.85156250]
[240.94515991 -97.59176636]
[225.47102356 -94.37827301]
[217.44256592 -81.70767975]
[227.99845886 -70.44168091]
[235.31463623 -56.83414459]
[238.89596558 -41.79396057]
[238.49700928 -26.32735825]
[234.13883972 -11.47059059]
[226.10797119 1.77948558]
[214.93750000 12.53230572]
[201.37184143 20.06344795]
[186.31700134 23.86344147]
[170.78010559 23.67221832]
[155.80203247 19.49691772]
[148.22573853 32.44295120]
[140.64944458 45.38898468]
[133.07315063 58.33501816]
[125.49686432 71.28105164]
[117.92057037 84.22708130]
[123.76301575 97.70858002]
[120.60424805 112.05804443]
[109.64077759 121.84003448]
[95.02546692 123.34921265]
[87.44917297 136.29524231]
[79.87287903 149.24127197]
[72.29658508 162.18731689]
[64.72029114 175.13334656]
[57.14399719 188.07937622]
[68.27730560 198.21560669]
[77.05956268 210.44531250]
[83.10684204 224.23385620]
[86.15479279 238.97846985]
[86.07015991 254.03459167]
[82.85665894 268.74401855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[27 77]
[31 73]
[32 72]
[33 71]
[34 70]
[35 69]
[36 68]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
