%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGUCAUUUCGGAGCGACUCAGCGCCUGCCCGCCCUCUCGCCGCGUCGCCGGUGCCUGCGCCUCCCGCUCCACCUCGCUUCUUCUCUCCCGGCCGAGGCCCGGGGGACCAGAGCGAGAAGCGGGGACC\
) } def
/len { sequence length } bind def

/coor [
[120.06575775 158.58506775]
[109.99124146 147.47183228]
[109.97038269 132.46992493]
[104.02307129 146.24052429]
[98.07575989 160.01112366]
[104.13651276 174.60711670]
[98.02405548 189.18153381]
[83.36480713 195.08761597]
[68.85583496 188.82142639]
[63.10505676 174.10054016]
[69.52430725 159.65863037]
[84.30516052 154.06381226]
[90.25247192 140.29321289]
[96.19978333 126.52261353]
[83.28096771 115.70888519]
[80.97234344 101.52609253]
[66.75161743 96.75420380]
[52.53088760 91.98232269]
[43.30123138 100.58026123]
[31.34861183 104.37773132]
[18.99279976 102.70288849]
[8.60404110 95.93970490]
[2.14837146 85.44219208]
[0.81566203 73.26375580]
[-13.15992451 67.81555176]
[-27.13550949 62.36734009]
[-41.11109543 56.91912842]
[-55.08668137 51.47092056]
[-70.75467682 53.66739273]
[-79.80245209 41.83578110]
[-93.77803802 36.38756943]
[-111.85782623 39.62905502]
[-122.35310364 25.61737061]
[-136.45532227 20.50585175]
[-150.55752563 15.39433479]
[-162.75892639 24.83517838]
[-178.12947083 26.15798569]
[-191.76448059 18.94065285]
[-199.31307983 5.48620462]
[-198.36653137 -9.91209412]
[-189.22688293 -22.34070206]
[-174.81054688 -27.83369446]
[-159.71774292 -24.63827896]
[-148.76451111 -13.77409935]
[-145.44601440 1.29212260]
[-131.34379578 6.40364075]
[-117.24158478 11.51515865]
[-106.09201050 6.66526461]
[-94.26137543 10.88562202]
[-88.32983398 22.41198540]
[-74.35424805 27.86019516]
[-59.68587875 25.27403069]
[-49.63847351 37.49533463]
[-35.66288757 42.94354248]
[-21.68729973 48.39175415]
[-7.71171427 53.83996201]
[6.26387215 59.28817368]
[20.57250786 49.07281876]
[38.30604553 49.41941071]
[52.45119858 60.37704086]
[57.30277252 77.76158905]
[71.52349854 82.53347778]
[85.74423218 87.30536652]
[109.82331848 79.26844025]
[126.46202850 104.20140076]
[141.37477112 102.58578491]
[156.28750610 100.97016144]
[171.20024109 99.35454559]
[186.11297607 97.73892975]
[201.02572632 96.12330627]
[215.93846130 94.50769043]
[220.91255188 86.28987885]
[229.02322388 81.40647888]
[238.33663940 80.87126160]
[246.70103455 84.67868042]
[252.24392700 91.83466339]
[267.23422241 91.29518890]
[282.22451782 90.75572205]
[297.21481323 90.21624756]
[312.20510864 89.67678070]
[327.19540405 89.13731384]
[335.75726318 85.67276001]
[342.55072021 88.76899719]
[357.54962158 88.58913422]
[368.55133057 77.56187439]
[383.76492310 77.59313965]
[394.20993042 88.14952850]
[409.20886230 87.96967316]
[424.20779419 87.78981018]
[439.20669556 87.60995483]
[454.20562744 87.43009949]
[469.20455933 87.25023651]
[484.20346069 87.07038116]
[499.19915771 86.71069336]
[514.18945312 86.17121887]
[527.79266357 77.01235962]
[542.40527344 84.45576477]
[542.99505615 100.84430695]
[528.95532227 109.31884766]
[514.72894287 101.16152191]
[499.73861694 101.70098877]
[493.10144043 105.11937714]
[484.38333130 102.06930542]
[469.38439941 102.24916077]
[454.38546753 102.42901611]
[439.38656616 102.60887909]
[424.38763428 102.78873444]
[409.38870239 102.96858978]
[394.38980103 103.14845276]
[384.20092773 113.95227051]
[368.99243164 114.34833527]
[357.72949219 103.58805847]
[342.73056030 103.76791382]
[327.73489380 104.12760925]
[312.74459839 104.66707611]
[297.75430298 105.20655060]
[282.76400757 105.74601746]
[267.77371216 106.28548431]
[252.78340149 106.82495880]
[236.46086121 119.36647034]
[217.55407715 109.42042542]
[202.64134216 111.03604889]
[187.72860718 112.65166473]
[172.81585693 114.26728058]
[157.90312195 115.88290405]
[142.99038696 117.49851990]
[128.07765198 119.11414337]
[142.40275574 123.56287384]
[150.04666138 136.46910095]
[147.06277466 151.16932678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[16 63]
[17 62]
[18 61]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[30 51]
[31 50]
[33 47]
[34 46]
[35 45]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[71 121]
[76 119]
[77 118]
[78 117]
[79 116]
[80 115]
[81 114]
[83 113]
[84 112]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
