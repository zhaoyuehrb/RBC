%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCGGCCCGCGGGCGCAGCGCCCAGCAGCACCCGGAGUCGCUUGGACGCCGGUUCGGGGCUAUUGCGGGGUGGCGUCGCUGGGCCCGGGAAAGUUCGGGACUGGAGAGUGGCGACGCCGGGCGGCGGGACCC\
) } def
/len { sequence length } bind def

/coor [
[80.68966675 278.99169922]
[83.32801819 259.79040527]
[83.67705536 244.79446411]
[84.02608490 229.79852295]
[76.26070404 222.98614502]
[73.51741791 212.79824829]
[76.95262146 202.58920288]
[85.64568329 195.86164856]
[86.69202423 180.89817810]
[87.73837280 165.93472290]
[88.78472137 150.97125244]
[89.83106995 136.00779724]
[76.50581360 129.12030029]
[64.90373993 138.62776184]
[53.30166626 148.13522339]
[41.69959259 157.64270020]
[30.09751892 167.15016174]
[21.67875671 181.86616516]
[5.20731497 177.85020447]
[4.50657845 160.91075134]
[20.59005547 155.54808044]
[32.19212723 146.04061890]
[43.79420090 136.53315735]
[55.39627457 127.02568817]
[66.99835205 117.51822662]
[64.19902039 107.27221680]
[64.43447113 96.89077759]
[67.55046844 87.23435974]
[73.15951538 79.06526947]
[80.68350983 72.98760223]
[89.41085815 69.40312958]
[98.56259155 68.48625946]
[107.36149597 70.17962646]
[114.40357208 56.93541336]
[121.44564819 43.69119644]
[128.48771667 30.44698334]
[135.52978516 17.20277023]
[135.17695618 1.38549900]
[147.98367310 -6.21957254]
[155.02574158 -19.46378708]
[162.06782532 -32.70800018]
[169.10989380 -45.95221329]
[176.15196228 -59.19642639]
[183.19404602 -72.44064331]
[174.37658691 -83.54763031]
[170.48680115 -97.13999176]
[172.08366394 -111.14379883]
[178.89161682 -123.43550110]
[189.84739685 -132.16397095]
[203.26605225 -136.02923584]
[217.09996033 -134.47604370]
[224.44830322 -147.55281067]
[231.79666138 -160.62957764]
[239.14500427 -173.70634460]
[246.49334717 -186.78311157]
[253.84169006 -199.85987854]
[261.19003296 -212.93664551]
[261.20535278 -228.75784302]
[274.18554688 -236.06285095]
[281.53390503 -249.13961792]
[288.88226318 -262.21640015]
[296.23059082 -275.29315186]
[303.57894897 -288.36993408]
[303.59423828 -304.19113159]
[316.57446289 -311.49612427]
[323.92282104 -324.57290649]
[323.93811035 -340.39410400]
[336.91833496 -347.69912720]
[344.26669312 -360.77587891]
[351.61502075 -373.85263062]
[358.96337891 -386.92941284]
[358.28424072 -405.28854370]
[373.63262939 -413.71600342]
[380.67471313 -426.96020508]
[387.71676636 -440.20443726]
[394.75885010 -453.44863892]
[396.85626221 -470.27233887]
[413.60311890 -472.91415405]
[420.77767944 -457.55310059]
[408.00305176 -446.40655518]
[400.96099854 -433.16235352]
[393.91891479 -419.91812134]
[386.87683105 -406.67391968]
[390.11224365 -394.95858765]
[384.27804565 -383.84045410]
[372.04013062 -379.58105469]
[364.69180298 -366.50430298]
[357.34344482 -353.42752075]
[349.99508667 -340.35076904]
[350.50540161 -325.46490479]
[336.99957275 -317.22454834]
[329.65124512 -304.14779663]
[330.16152954 -289.26193237]
[316.65570068 -281.02157593]
[309.30737305 -267.94482422]
[301.95901489 -254.86804199]
[294.61065674 -241.79127502]
[287.26232910 -228.71450806]
[287.77261353 -213.82864380]
[274.26681519 -205.58830261]
[266.91845703 -192.51153564]
[259.57009888 -179.43476868]
[252.22177124 -166.35800171]
[244.87342834 -153.28123474]
[237.52507019 -140.20446777]
[230.17672729 -127.12770081]
[239.56579590 -114.24948120]
[242.43074036 -98.51266479]
[238.15179443 -83.03995514]
[227.53187561 -70.92398071]
[212.64649963 -64.60914612]
[196.43824768 -65.39856720]
[189.39617920 -52.15435410]
[182.35411072 -38.91014099]
[175.31202698 -25.66592789]
[168.26995850 -12.42171288]
[161.22789001 0.82250077]
[162.08442688 15.69245720]
[148.77400208 24.24484444]
[141.73193359 37.48905945]
[134.68986511 50.73327255]
[127.64778900 63.97748566]
[120.60571289 77.22170258]
[132.83570862 97.49140930]
[127.26454926 122.18042755]
[104.79453278 137.05413818]
[103.74818420 152.01760864]
[102.70183563 166.98106384]
[101.65548706 181.94453430]
[100.60913849 196.90798950]
[110.30619812 214.51171875]
[99.02202606 230.14756775]
[98.67298889 245.14350891]
[98.32395935 260.13943481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 134]
[3 133]
[4 132]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[65 92]
[66 91]
[68 89]
[69 88]
[70 87]
[71 86]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
