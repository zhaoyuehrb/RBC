%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUACUUCCGCCUCGGGGGAGCUGGGAGCCCGACGUUUCCGGGAGCGCCGCGUGGUUAGCGUCGGCGGCUUUUGGC\
) } def
/len { sequence length } bind def

/coor [
[121.09665680 144.78144836]
[104.97603607 149.25125122]
[88.28713226 148.09631348]
[72.93589783 141.44853210]
[60.67551804 130.06712341]
[52.90619659 115.25188446]
[38.10044098 117.65805817]
[23.29468727 120.06422424]
[8.48893356 122.47039032]
[-6.31682062 124.87656403]
[-21.12257385 127.28273010]
[-33.50288773 137.13354492]
[-47.30649567 131.53804016]
[-62.11224747 133.94419861]
[-76.91800690 136.35037231]
[-89.27174377 147.13542175]
[-104.69907379 141.57398987]
[-107.32968140 125.38720703]
[-94.45742035 115.22663879]
[-79.32417297 121.54461670]
[-64.51841736 119.13845062]
[-49.71266556 116.73227692]
[-38.39135742 107.05357361]
[-23.52874374 112.47697449]
[-8.72299004 110.07080841]
[6.08276415 107.66464233]
[20.88851738 105.25846863]
[35.69427109 102.85230255]
[50.50002670 100.44612885]
[52.16073227 87.27793121]
[57.26054001 75.02430725]
[65.43283081 64.56615448]
[76.09011078 56.65529251]
[88.46623993 51.86042404]
[101.67151642 50.52624512]
[114.75662994 52.74866867]
[126.78090668 58.36792755]
[136.87994385 66.98006439]
[144.32772827 77.96595764]
[148.58885193 90.53585052]
[163.57669067 89.93186188]
[178.56451416 89.32787323]
[193.55235291 88.72388458]
[208.54019165 88.11989594]
[223.52803040 87.51589966]
[238.51585388 86.91191101]
[253.50369263 86.30792236]
[268.47631836 85.40224457]
[283.42767334 84.19525146]
[298.37905884 82.98825073]
[313.33041382 81.78125000]
[328.25442505 80.27342224]
[343.14505005 78.46537018]
[358.03570557 76.65731812]
[369.02178955 64.96607971]
[384.99978638 66.40955353]
[393.71270752 79.88043213]
[388.47674561 95.04501343]
[373.30850220 100.27032471]
[359.84375000 91.54795837]
[344.95312500 93.35600281]
[330.06246948 95.16405487]
[323.62579346 99.20831299]
[314.53741455 96.73261261]
[299.58605957 97.93961334]
[284.63467407 99.14660645]
[269.68331909 100.35360718]
[263.08901978 104.13540649]
[254.10768127 101.29576111]
[239.11984253 101.89974976]
[224.13201904 102.50373840]
[209.14418030 103.10772705]
[194.15634155 103.71171570]
[179.16850281 104.31570435]
[164.18067932 104.91969299]
[149.19284058 105.52368164]
[144.54396057 121.59357452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 67]
[49 66]
[50 65]
[51 64]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
