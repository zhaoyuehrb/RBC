%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUGCUGUCACUCUGGAAUUCUGCUGUGUGGGAGCUGAGGCCCCACCUGCAGACCUGCUGCUCACCUGGGCAGGUGCCUCCUCACAGCCCAUCUGCACAGCUGGCCUGCGGAGUCCUCCUCAGGGGCCACUGGCCCUCACCUGCCACUGUUGAAGGG\
) } def
/len { sequence length } bind def

/coor [
[70.56315613 151.65216064]
[60.23796844 162.53289795]
[45.65235519 159.03149414]
[41.39176941 144.64930725]
[51.71728516 133.76821899]
[44.42451096 132.01737976]
[33.21188736 141.98115540]
[21.99926186 151.94494629]
[16.82303810 166.89544678]
[2.16977620 169.56587219]
[-9.04284859 179.52964783]
[-20.25547409 189.49343872]
[-31.46809769 199.45722961]
[-25.85870934 213.53950500]
[-25.40713501 228.69113159]
[-30.16790199 243.08247375]
[-39.56612778 254.97572327]
[-52.46692657 262.93469238]
[-67.31246948 265.99829102]
[-82.31008148 263.79660034]
[-95.64872742 256.59545898]
[-105.71770477 245.26448059]
[-111.30113220 231.17189026]
[-111.72478485 216.01943970]
[-106.93750000 201.63690186]
[-97.51737213 189.76100159]
[-84.60192871 181.82582092]
[-69.75077057 178.78956604]
[-54.75724030 181.01890564]
[-41.43188477 188.24459839]
[-30.21925926 178.28080750]
[-19.00663567 168.31703186]
[-7.79401016 158.35324097]
[-3.41978908 144.11541748]
[12.03547478 140.73231506]
[23.24810028 130.76853943]
[34.46072388 120.80474854]
[94.02893066 86.51189423]
[94.61782837 71.52346039]
[95.20672607 56.53502655]
[95.79562378 41.54658890]
[96.38451385 26.55815315]
[84.93360138 18.83311272]
[78.85540771 6.55012274]
[79.64727783 -7.02299070]
[86.99448395 -18.33398628]
[98.88080597 -24.47586441]
[99.76387024 -39.44984818]
[100.49988556 -54.43178177]
[101.08878326 -69.42021942]
[101.67768097 -84.40865326]
[102.26657867 -99.39708710]
[102.85546875 -114.38552094]
[103.44436646 -129.37396240]
[96.25482941 -143.46725464]
[104.48583221 -155.88095093]
[105.07472992 -170.86938477]
[97.88518524 -184.96269226]
[106.11619568 -197.37637329]
[106.70508575 -212.36482239]
[107.29398346 -227.35325623]
[107.88288116 -242.34169006]
[97.43381500 -253.89395142]
[98.24455261 -269.08596802]
[109.32226562 -278.97634888]
[109.91116333 -293.96478271]
[99.46208954 -305.51705933]
[100.27283478 -320.70907593]
[111.35054016 -330.59945679]
[111.93943787 -345.58789062]
[112.52833557 -360.57635498]
[113.11723328 -375.56478882]
[113.70613098 -390.55322266]
[105.52393341 -400.56768799]
[106.35346985 -413.07070923]
[115.20188141 -421.36642456]
[116.08493805 -436.34042358]
[116.96800232 -451.31439209]
[106.28393555 -462.96026611]
[107.04749298 -478.74609375]
[118.80567169 -489.30642700]
[134.58255005 -488.37603760]
[145.01799011 -476.50686646]
[143.92082214 -460.74069214]
[131.94198608 -450.43133545]
[131.05892944 -435.45733643]
[130.17585754 -420.48336792]
[138.88459778 -405.27319336]
[128.69456482 -389.96432495]
[128.10566711 -374.97589111]
[127.51676941 -359.98745728]
[126.92787170 -344.99899292]
[126.33897400 -330.01055908]
[136.60655212 -319.28152466]
[136.22283936 -304.07272339]
[124.89959717 -293.37588501]
[124.31069946 -278.38745117]
[134.57826233 -267.65841675]
[134.19456482 -252.44961548]
[122.87132263 -241.75279236]
[122.28242493 -226.76435852]
[121.69352722 -211.77592468]
[121.10462952 -196.78747559]
[128.33628845 -183.76625061]
[120.06316376 -170.28048706]
[119.47426605 -155.29205322]
[126.70593262 -142.27082825]
[118.43280792 -128.78506470]
[117.84391022 -113.79662323]
[117.25501251 -98.80818939]
[116.66611481 -83.81975555]
[116.07721710 -68.83132172]
[115.48831940 -53.84288406]
[118.38311005 -47.00022507]
[114.73785400 -38.56678772]
[113.85478973 -23.59280396]
[126.85935211 -13.61386395]
[131.41711426 2.30436802]
[125.54828644 17.96452522]
[111.37295532 27.14705086]
[110.78405762 42.13548660]
[110.19515991 57.12392044]
[109.60626221 72.11235809]
[109.01736450 87.10079193]
[116.60222626 100.04180908]
[129.96731567 106.85166931]
[143.33241272 113.66152191]
[156.69752502 120.47138214]
[170.06262207 127.28124237]
[183.42771912 134.09109497]
[200.28546143 135.89457703]
[203.21914673 152.59278870]
[187.98564148 160.03433228]
[176.61785889 147.45619202]
[163.25276184 140.64633179]
[149.88766479 133.83648682]
[136.52256775 127.02661896]
[123.15746307 120.21676636]
[109.79236603 113.40690613]
[104.23523712 118.44359589]
[93.12096405 128.51698303]
[87.56383514 133.55368042]
[93.03089142 147.52189636]
[98.49794769 161.49012756]
[112.70081329 167.88671875]
[118.04620361 182.13035583]
[111.86051178 195.63119507]
[117.32756805 209.59942627]
[130.47015381 219.40780640]
[128.27867126 235.65988159]
[113.00754547 241.63688660]
[100.36638641 231.19020081]
[103.35934448 215.06648254]
[97.89228058 201.09825134]
[84.18560791 195.38314819]
[78.44224548 181.29525757]
[84.52972412 166.95718384]
[79.06266785 152.98895264]
[73.59561157 139.02073669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[10 33]
[11 32]
[12 31]
[13 30]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[47 116]
[48 115]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[56 106]
[57 105]
[59 103]
[60 102]
[61 101]
[62 100]
[65 97]
[66 96]
[69 93]
[70 92]
[71 91]
[72 90]
[73 89]
[76 87]
[77 86]
[78 85]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
[142 159]
[143 158]
[144 157]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
