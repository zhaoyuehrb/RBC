%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACGGCGAGUCUGGGCGACUGCGCACGCGCGGCUGGUGAGUGGCGGGUUCGGGCGCAGCUGUAGGGUUGGCUGCGCGCCGCCGAGGCGUUUUGGACUGGGUUAUAAACAACUUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[113.60532379 194.99067688]
[121.90764618 180.84841919]
[121.52142334 165.85339355]
[121.13520813 150.85836792]
[120.74898529 135.86334229]
[102.20480347 139.72627258]
[84.66989899 134.92536926]
[71.80886841 123.17812347]
[60.04707336 132.48725891]
[48.28527451 141.79640198]
[36.64431000 151.25621033]
[25.12610245 160.86511230]
[13.60789585 170.47399902]
[2.08968878 180.08290100]
[-0.78050083 195.86712646]
[-14.97829819 203.33720398]
[-29.61236763 196.76274109]
[-33.45670319 181.18710327]
[-23.56226158 168.55857849]
[-7.51920891 168.56469727]
[3.99899793 158.95579529]
[15.51720428 149.34689331]
[27.03541183 139.73800659]
[30.19342613 132.95684814]
[38.97613525 130.03460693]
[50.73793030 120.72546387]
[62.49972916 111.41632080]
[60.95741272 96.49582672]
[47.54010773 89.78942108]
[31.73673248 90.54035950]
[23.81164932 77.92916107]
[10.39434433 71.22275543]
[-3.02296233 64.51634979]
[-18.82633781 65.26729584]
[-26.75141907 52.65609360]
[-40.16872406 45.94968796]
[-53.58602905 39.24327850]
[-69.91417694 40.76760483]
[-79.17633057 27.23450851]
[-71.84437561 12.56568336]
[-55.46080017 11.85115719]
[-46.87962341 25.82597351]
[-33.46231842 32.53237915]
[-20.04501152 39.23878860]
[-5.20133209 38.00815582]
[3.68344474 51.09904099]
[17.10074997 57.80545044]
[30.51805687 64.51185608]
[45.36173630 63.28122711]
[54.24651337 76.37210846]
[67.66381836 83.07852173]
[86.89072418 64.18183899]
[115.01544952 63.15472031]
[137.38031006 82.12790680]
[142.67160034 68.09215546]
[147.78172302 53.98944092]
[152.70986938 39.82210541]
[157.63800049 25.65476608]
[162.56613159 11.48742676]
[167.49427795 -2.67991161]
[172.42240906 -16.84724998]
[177.35054016 -31.01458931]
[182.27868652 -45.18192673]
[187.20681763 -59.34926605]
[180.09866333 -73.46485138]
[185.13293457 -88.44589233]
[199.32289124 -95.40441132]
[214.24986267 -90.21202850]
[221.05796814 -75.94930267]
[215.70805359 -61.07805634]
[201.37416077 -54.42113113]
[196.44601440 -40.25379181]
[191.51788330 -26.08645248]
[186.58975220 -11.91911411]
[181.66160583 2.24822426]
[176.73347473 16.41556168]
[171.80534363 30.58290100]
[166.87719727 44.75024033]
[161.94906616 58.91757965]
[162.73254395 66.35688019]
[156.70735168 73.38343811]
[151.41606140 87.41918945]
[159.30288696 100.17842102]
[174.22338867 101.72074127]
[189.14389038 103.26305389]
[203.66647339 96.98571014]
[215.53073120 105.99063110]
[230.45123291 107.53294373]
[239.39250183 95.04498291]
[253.38647461 88.71533966]
[268.66882324 90.24665833]
[281.12872314 99.22702789]
[287.41445923 113.24076843]
[285.83523560 128.51826477]
[276.81585693 140.94992065]
[262.78247070 147.19171143]
[247.51002502 145.56462097]
[235.10668945 136.50631714]
[228.90892029 122.45344543]
[213.98841858 120.91113281]
[200.53305054 127.29878998]
[187.60157776 118.18355560]
[172.68107605 116.64123535]
[157.76057434 115.09892273]
[152.25643921 120.19347382]
[164.61097717 128.70025635]
[176.96551514 137.20703125]
[190.53230286 143.60565186]
[195.65374756 157.70425415]
[189.35682678 171.31854248]
[175.29692078 176.54533386]
[161.63591003 170.35044861]
[156.30403137 156.33099365]
[148.77609253 143.35678101]
[141.24815369 130.38256836]
[135.74401855 135.47712708]
[136.13023376 150.47215271]
[136.51644897 165.46717834]
[136.90266418 180.46220398]
[145.92201233 194.15832520]
[138.32962036 208.69406128]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[5 116]
[8 27]
[9 26]
[10 25]
[11 23]
[12 22]
[13 21]
[14 20]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[54 82]
[55 81]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[83 104]
[84 103]
[85 102]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
