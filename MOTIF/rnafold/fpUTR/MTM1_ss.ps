%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGGGCGGAGCAGGGCCCGGCAGCCGAGCAGCCUGGCAACGGCGGUGGCGCCCGGAGCCCGAGAGUUUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[78.28765106 331.79235840]
[70.53610992 318.21121216]
[73.37872314 302.83416748]
[85.47330475 292.92178345]
[85.47330475 277.92178345]
[85.47330475 262.92178345]
[85.47330475 247.92178345]
[85.47330475 232.92178345]
[85.47330475 217.92178345]
[73.65189362 212.65931702]
[64.73847198 203.21369934]
[60.13614655 191.01855469]
[60.58985519 177.94432068]
[66.06604767 166.01135254]
[75.75224304 157.07772827]
[88.17735291 152.54995728]
[89.39999390 137.59986877]
[90.62262726 122.64978027]
[91.84526825 107.69969177]
[92.76269531 92.72777557]
[93.37451935 77.74025726]
[93.98635101 62.75274277]
[94.59818268 47.76522446]
[84.16680145 36.19699097]
[85.00078583 21.00623322]
[96.09361267 11.13279629]
[96.70543671 -3.85472035]
[97.31726837 -18.84223747]
[97.92910004 -33.82975388]
[88.07464600 -41.06327057]
[83.11070251 -52.10105896]
[84.21556091 -64.03093719]
[90.98329926 -73.76948547]
[101.56003571 -78.85897064]
[103.39144897 -93.74674225]
[105.22286224 -108.63452148]
[94.42900848 -119.94940948]
[93.48510742 -135.55848694]
[102.83683777 -148.09159851]
[118.06859589 -151.63102722]
[131.98841858 -144.50553894]
[138.02378845 -130.07957458]
[133.32498169 -115.16464233]
[120.11064148 -106.80310822]
[118.27922821 -91.91532898]
[116.44781494 -77.02754974]
[128.56385803 -63.58875275]
[127.27240753 -45.22834778]
[112.91661072 -33.21792603]
[112.30478668 -18.23040771]
[111.69295502 -3.24289155]
[111.08112335 11.74462509]
[121.33226776 22.48937798]
[120.92528534 37.69756699]
[109.58570099 48.37705231]
[108.97386932 63.36457062]
[108.36203766 78.35208893]
[107.75021362 93.33960724]
[110.65814209 101.12317657]
[106.79535675 108.92233276]
[105.57271576 123.87242126]
[104.35008240 138.82250977]
[103.12744141 153.77259827]
[117.65937805 163.20869446]
[125.52463531 178.54968262]
[124.71218109 195.68310547]
[115.52429199 210.06428528]
[100.47330475 217.92178345]
[100.47330475 232.92178345]
[100.47330475 247.92178345]
[100.47330475 262.92178345]
[100.47330475 277.92178345]
[100.47330475 292.92178345]
[112.56789398 302.83416748]
[115.41050720 318.21121216]
[107.65896606 331.79235840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[16 63]
[17 62]
[18 61]
[19 60]
[20 58]
[21 57]
[22 56]
[23 55]
[26 52]
[27 51]
[28 50]
[29 49]
[34 46]
[35 45]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
