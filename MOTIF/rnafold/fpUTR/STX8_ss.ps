%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAUUAUAGUUCUGAGGCCCUAGCUACUCACUUUGCAAACUCCAGGCUCCGGUCGCGCACGGGACGAACUGCGGGGAGUGAGCCGCGCGGGCCGCCGUAGUCAGCUGCUAAGAGCAGGAAGAGUCCGAGCGGCGGGCGGAGUCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[-141.09117126 388.88830566]
[-141.36407471 401.17843628]
[-143.94789124 413.19171143]
[-148.74807739 424.49780273]
[-155.59069824 434.69198608]
[-164.22880554 443.40979004]
[-174.35122681 450.33993530]
[-185.59388733 455.23556519]
[-197.55287170 457.92285156]
[-209.79888916 458.30734253]
[-221.89274597 456.37716675]
[-233.40106201 452.20346069]
[-243.91181946 445.93771362]
[-253.04907227 437.80627441]
[-265.12905884 446.69863892]
[-277.20904541 455.59097290]
[-289.28903198 464.48333740]
[-287.50857544 479.73867798]
[-293.60903931 493.83407593]
[-305.94946289 502.97790527]
[-321.21029663 504.71054077]
[-335.28649902 498.56591797]
[-344.39160156 486.19689941]
[-346.07641602 470.93069458]
[-339.88769531 456.87384033]
[-327.49020386 447.80752563]
[-312.21878052 446.17059326]
[-298.18139648 452.40335083]
[-286.10140991 443.51098633]
[-274.02142334 434.61865234]
[-261.94143677 425.72628784]
[-268.61450195 409.08288574]
[-270.45660400 391.23428345]
[-267.31924438 373.55505371]
[-259.43762207 357.40850830]
[-247.41304016 344.04162598]
[-232.16706848 334.48873901]
[-214.87086487 329.49151611]
[-196.85523987 329.44128418]
[-179.50827026 334.34863281]
[-164.16830444 343.84176636]
[-153.28947449 333.51455688]
[-149.38594055 319.14056396]
[-134.05032349 315.25091553]
[-123.17149353 304.92373657]
[-112.29267120 294.59652710]
[-101.41384125 284.26931763]
[-90.53501892 273.94210815]
[-79.65618896 263.61489868]
[-68.77736664 253.28770447]
[-57.89854050 242.96049500]
[-47.01971817 232.63328552]
[-43.11617661 218.25929260]
[-27.78055382 214.36965942]
[-16.90172958 204.04246521]
[-6.02290392 193.71525574]
[4.85592127 183.38804626]
[15.62672997 172.94824219]
[26.28835678 162.39694214]
[29.89201736 147.94485474]
[45.14340210 143.73703003]
[55.80502701 133.18574524]
[66.46665192 122.63445282]
[77.12828064 112.08316040]
[73.43254089 82.90809631]
[102.18508911 62.75025177]
[105.28340912 48.07372665]
[96.92339325 34.93036270]
[100.27460480 20.09041786]
[112.85631561 12.20142078]
[115.95463562 -2.47510433]
[119.05295563 -17.15163040]
[122.15128326 -31.82815552]
[125.24960327 -46.50468063]
[120.52964783 -61.60543060]
[130.72897339 -72.46006012]
[133.82730103 -87.13658905]
[124.99236298 -100.24076843]
[128.09313965 -115.73788452]
[141.28999329 -124.43377686]
[156.75346375 -121.16932678]
[165.30934143 -107.88127136]
[161.88159180 -92.45317841]
[148.50381470 -84.03826904]
[145.40550232 -69.36174011]
[150.34706116 -55.31075668]
[139.92613220 -43.40636063]
[136.82780457 -28.72983360]
[133.72947693 -14.05330849]
[130.63116455 0.62321734]
[127.53283691 15.29974270]
[135.85221863 27.60110855]
[132.91914368 42.52933121]
[119.95993805 51.17204666]
[116.86161041 65.84857178]
[121.73543549 71.54907990]
[131.49076843 60.15463638]
[141.24610901 48.76018524]
[149.36439514 36.14696503]
[164.32998657 35.13154221]
[174.07765198 46.53254700]
[170.74885559 61.15851974]
[157.02720642 67.21803284]
[144.25514221 75.08406830]
[131.48309326 82.95010376]
[136.35691833 88.65061188]
[151.33662415 87.87077332]
[166.31634521 87.09092712]
[181.29606628 86.31108093]
[196.27577209 85.53123474]
[211.77914429 78.66960144]
[222.66438293 91.66759491]
[213.18768311 105.72563934]
[197.05561829 100.51094818]
[182.07591248 101.29079437]
[167.09619141 102.07064056]
[152.11647034 102.85048676]
[137.13676453 103.63033295]
[133.14871216 113.19559479]
[126.88894653 120.87905884]
[119.07101440 126.20276642]
[110.48717499 128.93084717]
[101.93220520 129.07360840]
[94.13143158 126.86911011]
[87.67957306 122.74478912]
[77.01794434 133.29608154]
[66.35631561 143.84736633]
[55.69469070 154.39865112]
[51.32844162 169.60545349]
[36.83964539 173.05857849]
[26.17802048 183.60986328]
[22.24524689 191.92762756]
[15.18312645 194.26687622]
[4.30430079 204.59408569]
[-6.57452440 214.92127991]
[-17.45335007 225.24848938]
[-22.13501549 240.36116028]
[-36.69251251 243.51211548]
[-47.57133865 253.83932495]
[-58.45016098 264.16653442]
[-69.32898712 274.49374390]
[-80.20780945 284.82092285]
[-91.08663940 295.14813232]
[-101.96546173 305.47534180]
[-112.84429169 315.80255127]
[-123.72311401 326.12976074]
[-128.40478516 341.24243164]
[-142.96228027 344.39337158]
[-153.84109497 354.72058105]
[-147.44169617 365.23477173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 31]
[15 30]
[16 29]
[17 28]
[41 149]
[42 148]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[50 140]
[51 139]
[52 138]
[54 136]
[55 135]
[56 134]
[57 133]
[58 131]
[59 130]
[61 128]
[62 127]
[63 126]
[64 125]
[66 95]
[67 94]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[76 85]
[77 84]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
