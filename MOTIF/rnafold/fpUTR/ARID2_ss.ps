%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCAUGACUGAGCCCCGCCGCCGCCGGCCGAGGAAUGGGCUCCGGGCUCUGGUAGGAAGCGCUGGGAGCGGGGGGCGCUUUUAAAACACCGAUCUGGGUUUUUUAAAAACCUCCUUUGAAAAAAUA\
) } def
/len { sequence length } bind def

/coor [
[76.86391449 159.12956238]
[76.25192261 144.14204407]
[80.82810211 129.85714722]
[90.03671265 118.01351929]
[76.86755371 125.19496918]
[63.69839096 132.37641907]
[50.52923203 139.55786133]
[45.97087860 154.45280457]
[32.51317596 161.54820251]
[18.34121895 157.11073303]
[5.17205763 164.29217529]
[0.61370653 179.18711853]
[-12.84399891 186.28251648]
[-27.01595497 181.84503174]
[-40.18511581 189.02648926]
[-53.35427856 196.20793152]
[-57.77309799 208.39738464]
[-68.97421265 214.08734131]
[-80.65145111 210.69052124]
[-93.99158478 217.54916382]
[-102.41319275 231.62071228]
[-118.80384064 231.09263611]
[-126.30222321 216.50817871]
[-117.19465637 202.87059021]
[-100.85021973 204.20903015]
[-87.51008606 197.35038757]
[-78.87896729 182.12144470]
[-60.53572464 183.03877258]
[-47.36656189 175.85731506]
[-34.19740295 168.67587280]
[-30.25266075 154.35893250]
[-16.99956131 146.88833618]
[-2.00938940 151.12301636]
[11.15977192 143.94155884]
[15.10451221 129.62463379]
[28.35761261 122.15402222]
[43.34778595 126.38870239]
[56.51694489 119.20725250]
[69.68610382 112.02580261]
[82.85527039 104.84436035]
[87.69847870 90.64776611]
[81.66423798 76.91502380]
[75.63000488 63.18229294]
[69.59577179 49.44955826]
[63.56154251 35.71681976]
[50.92635727 26.19512558]
[52.89002228 11.43052959]
[46.85578918 -2.30220628]
[40.82155228 -16.03494263]
[28.18636894 -25.55663681]
[30.15003395 -40.32123184]
[24.11580086 -54.05397034]
[9.05544949 -58.26346588]
[0.26707429 -71.19785309]
[1.90027642 -86.74991608]
[13.18390751 -97.57644653]
[28.79018402 -98.56548309]
[41.35029602 -89.25003052]
[44.93374634 -74.02857208]
[37.84853745 -60.08820343]
[43.88277054 -46.35546875]
[56.08634567 -37.81602859]
[54.55429077 -22.06917572]
[60.58852386 -8.33644009]
[66.62275696 5.39629555]
[78.82633209 13.93573475]
[77.29427338 29.68258667]
[83.32850647 43.41532135]
[89.36274719 57.14805984]
[95.39698029 70.88079071]
[101.43121338 84.61353302]
[114.42159271 92.11353302]
[129.33160400 90.47296143]
[144.24162292 88.83238983]
[159.15164185 87.19182587]
[174.06164551 85.55125427]
[188.97166443 83.91069031]
[195.35784912 74.94557953]
[205.43878174 71.10924530]
[215.73875427 73.46235657]
[222.84971619 80.97515869]
[237.82192993 80.06246948]
[252.79414368 79.14978027]
[267.76635742 78.23709106]
[282.73855591 77.32439423]
[297.71075439 76.41170502]
[312.68295288 75.49901581]
[327.65518188 74.58632660]
[340.95898438 66.02368164]
[354.13348389 72.97224426]
[369.10568237 72.05955505]
[384.07788086 71.14685822]
[394.36352539 59.14765167]
[410.12747192 58.01929474]
[422.01727295 68.43122864]
[422.97891235 84.20623016]
[412.44186401 95.98528290]
[396.65756226 96.78007507]
[384.99057007 86.11907196]
[370.01837158 87.03176117]
[355.04617310 87.94445038]
[342.81326294 96.44181824]
[328.56787109 89.55854034]
[313.59567261 90.47122955]
[298.62344360 91.38391876]
[283.65124512 92.29660797]
[268.67904663 93.20929718]
[253.70683289 94.12198639]
[238.73461914 95.03467560]
[223.76240540 95.94736481]
[208.57524109 107.81705475]
[190.61222839 98.82070160]
[175.70222473 100.46127319]
[160.79220581 102.10183716]
[145.88218689 103.74240875]
[130.97216797 105.38297272]
[116.06215668 107.02354431]
[130.97024536 108.68157959]
[144.40039062 115.36222839]
[154.71647644 126.25159454]
[160.66174316 140.02308655]
[161.51187134 154.99897766]
[157.16331482 169.35481262]
[148.14584351 181.34169006]
[135.55801392 189.49929810]
[120.93334961 192.83381653]
[106.05350494 190.93902588]
[92.73123169 184.04576111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[7 37]
[10 34]
[11 33]
[14 30]
[15 29]
[16 28]
[19 26]
[20 25]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
