%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCGCCCUGCCGGAAAGCAGCACGCCGCCGCGGCAUUUUACGACGUCGGCGGUGACAGGCCCUGGGACUCUGGGAAUACCCAGCUUCCUCCCCGCAACCCGGUGAAAGCCAACGCA\
) } def
/len { sequence length } bind def

/coor [
[120.67959595 378.80505371]
[130.29708862 365.96438599]
[129.50546265 350.98529053]
[128.71383667 336.00619507]
[120.31562805 323.70498657]
[127.31384277 309.51571655]
[126.52220917 294.53662109]
[112.50730133 286.10067749]
[106.17691803 270.83807373]
[110.18633270 254.63812256]
[123.15933990 243.87882996]
[121.97258759 228.92584229]
[120.78582764 213.97286987]
[119.59907532 199.01988220]
[118.41231537 184.06690979]
[105.63229370 176.46368408]
[99.70988464 162.62933350]
[103.10900116 147.78684998]
[114.73038483 137.67500305]
[113.54363251 122.72201538]
[101.84593201 125.46827698]
[90.57661438 122.74297333]
[82.06991577 115.49968719]
[77.91150665 105.58514404]
[78.64865112 95.28142548]
[66.00073242 87.21729279]
[53.35281754 79.15316010]
[40.70490265 71.08902740]
[28.05698776 63.02489853]
[15.40907192 54.96076584]
[2.76115584 46.89663315]
[-9.88675976 38.83250046]
[-22.64001656 30.93601990]
[-35.49639130 23.20856285]
[-48.54116821 31.21433449]
[-63.81298828 32.22931290]
[-77.80249023 26.02026176]
[-87.29499817 14.01397705]
[-90.10920715 -1.03058469]
[-85.59841919 -15.65629482]
[-74.79918671 -26.50226974]
[-60.19309616 -31.07618713]
[-45.13652039 -28.32699203]
[-33.08934784 -18.88643074]
[-26.81993103 -4.92387247]
[-27.76893616 10.35218620]
[-14.91256046 18.07964325]
[-7.46524477 18.83806992]
[-1.82262754 26.18458557]
[10.82528782 34.24871826]
[23.47320366 42.31285095]
[36.12112045 50.37698364]
[48.76903534 58.44111633]
[61.41695023 66.50524902]
[74.06486511 74.56938171]
[86.71278381 82.63351440]
[96.84234619 77.20471191]
[108.91198730 77.54444122]
[119.71624756 84.13642120]
[126.10552216 95.73130035]
[138.31022644 87.01091003]
[137.95361328 74.97806549]
[143.44737244 64.40242004]
[153.29576111 57.90834808]
[164.93971252 57.04256058]
[175.42129517 61.90715027]
[188.06921387 53.84301758]
[200.71713257 45.77888489]
[213.36503601 37.71475220]
[216.89541626 22.54326248]
[229.83708191 14.54525948]
[244.27902222 18.00443459]
[256.92694092 9.94030190]
[269.57485962 1.87617004]
[282.22277832 -6.18796206]
[294.87069702 -14.25209427]
[301.95349121 -29.04283905]
[318.32263184 -30.03438568]
[327.13894653 -16.20671654]
[319.33297729 -1.78455269]
[302.93481445 -1.60417879]
[290.28689575 6.45995331]
[277.63897705 14.52408600]
[264.99108887 22.58821869]
[252.34315491 30.65234947]
[249.38548279 45.20527649]
[236.67356873 53.56362915]
[221.42916870 50.36267090]
[208.78126526 58.42680359]
[196.13334656 66.49093628]
[183.48542786 74.55506897]
[180.71110535 92.55651093]
[165.47212219 103.09834290]
[147.03060913 99.21560669]
[134.82591248 107.93600464]
[128.49661255 121.53526306]
[129.68336487 136.48825073]
[142.75428772 144.64036560]
[148.45207214 158.76087952]
[144.78601074 173.35621643]
[133.36529541 182.88015747]
[134.55204773 197.83312988]
[135.73881531 212.78611755]
[136.92556763 227.73908997]
[138.11231995 242.69207764]
[150.42965698 249.03524780]
[157.91732788 260.56298828]
[158.69233704 274.17831421]
[152.65802002 286.28671265]
[141.50131226 293.74499512]
[142.29293823 308.72409058]
[150.74775696 322.09667969]
[143.69293213 335.21453857]
[144.48455811 350.19363403]
[145.27618408 365.17272949]
[156.19357300 376.92819214]
[153.66728210 392.77108765]
[139.63528442 400.54812622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[6 111]
[7 110]
[11 105]
[12 104]
[13 103]
[14 102]
[15 101]
[19 97]
[20 96]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 47]
[34 46]
[60 95]
[61 94]
[66 91]
[67 90]
[68 89]
[69 88]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
