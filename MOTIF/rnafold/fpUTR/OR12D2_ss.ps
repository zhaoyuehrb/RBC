%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:50:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGAAGGAUUCUGAUUGCGAUUAGUGUUCCAUAGAUUAUUUUGUCUUUUGUCUGAAGUG\
) } def
/len { sequence length } bind def

/coor [
[87.01734161 186.81681824]
[89.62200165 171.51991272]
[100.74400330 160.69953918]
[98.47258759 145.87251282]
[96.20117188 131.04548645]
[93.92975616 116.21846008]
[88.49111938 108.99069214]
[88.18529510 101.34893036]
[74.40092468 95.43359375]
[60.61656189 89.51825714]
[46.83219528 83.60292053]
[31.09916878 85.27099609]
[22.45459175 73.14167023]
[8.67022419 67.22633362]
[-5.11414242 61.31099319]
[-18.89850998 55.39565277]
[-32.68287659 49.48031616]
[-48.89484787 51.95096207]
[-58.92780685 38.97900009]
[-52.46070480 23.90887451]
[-36.14634323 22.24343872]
[-26.76753998 35.69594955]
[-12.98317146 41.61128616]
[0.80119526 47.52662659]
[14.58556271 53.44196320]
[28.36993027 59.35729980]
[43.11700439 57.26612091]
[52.74753189 69.81855011]
[66.53189850 75.73389435]
[80.31626892 81.64923096]
[94.10063171 87.56456757]
[109.09581757 87.18457794]
[122.56288910 80.57866669]
[132.22904968 65.12263489]
[149.55047607 66.53367615]
[162.66567993 59.25414658]
[175.78086853 51.97461700]
[188.89607239 44.69508743]
[193.00225830 29.43354034]
[206.73883057 21.61802101]
[221.95610046 25.88533401]
[229.62596130 39.70376205]
[225.19799805 54.87507248]
[211.29925537 62.39839935]
[196.17559814 57.81028366]
[183.06040955 65.08981323]
[169.94520569 72.36934662]
[156.83000183 79.64887238]
[153.06198120 91.39962006]
[141.86308289 97.48652649]
[129.16879272 94.04573059]
[115.70172882 100.65164185]
[108.75678253 113.94704437]
[111.02819824 128.77406311]
[113.29961395 143.60108948]
[115.57102966 158.42811584]
[129.42219543 165.42274475]
[136.48672485 179.23838806]
[134.04817200 194.56265259]
[123.04419708 205.50305176]
[107.70606232 207.85276794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[6 53]
[8 31]
[9 30]
[10 29]
[11 28]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[32 52]
[33 51]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
