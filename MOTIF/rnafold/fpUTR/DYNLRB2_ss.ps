%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCAGCCCUGACGCUUCCGUGGGGCCACUUCCUUUUUUGUCUCCUAGCAACGGCGGGUAGCGUUGUUGACAUCCCGGGAGGCUGUGCCGCCGGCCUGAGCCCAGAGUUUCGCGGCCUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[188.20034790 190.82499695]
[186.60964966 185.62106323]
[175.61387634 175.41847229]
[164.61808777 165.21588135]
[153.62231445 155.01329041]
[142.62654114 144.81069946]
[131.63076782 134.60810852]
[120.63497925 124.40552521]
[109.63920593 114.20293427]
[94.65785217 113.45524597]
[82.70086670 122.51231384]
[70.74387360 131.56938171]
[64.41512299 146.06964111]
[49.59798813 147.58676147]
[37.64099884 156.64382935]
[25.68401146 165.70089722]
[19.81607819 181.01426697]
[3.58006096 183.32160950]
[-6.32181644 170.24931335]
[0.29664814 155.24504089]
[16.62694550 153.74391174]
[28.58393288 144.68684387]
[40.54092026 135.62977600]
[46.01442719 121.77734375]
[61.68680954 119.61238861]
[73.64379883 110.55532074]
[85.60078430 101.49826050]
[70.93804932 98.33530426]
[67.29927826 83.78334808]
[78.74754333 74.09123230]
[92.50028992 80.08221436]
[88.07896423 65.74862671]
[83.65763855 51.41503143]
[79.23630524 37.08143997]
[74.81497955 22.74784851]
[60.97760773 20.32733345]
[49.60129166 12.20018101]
[42.88960266 0.01114736]
[42.11198044 -13.81533527]
[47.36402512 -26.55731964]
[57.55994415 -35.73119736]
[53.49733734 -50.17055893]
[49.43473053 -64.60992432]
[45.37212372 -79.04928589]
[41.95566177 -82.12313080]
[39.96618271 -85.77677155]
[39.40658951 -89.46626282]
[40.09483337 -92.70694733]
[41.70155716 -95.13108826]
[39.09683228 -109.90320587]
[36.49211121 -124.67532349]
[33.88738632 -139.44743347]
[31.28266525 -154.21955872]
[28.67794228 -168.99166870]
[26.07321930 -183.76379395]
[12.06805706 -190.44473267]
[4.69420815 -204.09779358]
[6.78706932 -219.47308350]
[17.54189301 -230.65849304]
[32.82322693 -233.35299683]
[46.75509262 -226.52052307]
[53.98039627 -212.78826904]
[51.72086716 -197.43659973]
[40.84533691 -186.36851501]
[43.45005798 -171.59638977]
[46.05478287 -156.82427979]
[48.65950394 -142.05215454]
[51.26422882 -127.28004456]
[53.86894989 -112.50792694]
[56.47367096 -97.73580933]
[59.81148529 -83.11189270]
[63.87409210 -68.67253113]
[67.93669891 -54.23316574]
[71.99930573 -39.79380417]
[87.70612335 -36.21957779]
[99.55694580 -25.17155838]
[104.27654266 -9.57460594]
[100.49611664 6.37231588]
[89.14857483 18.32652092]
[93.56990051 32.66011429]
[97.99122620 46.99370575]
[102.41255951 61.32729721]
[106.83388519 75.66088867]
[119.84179688 103.20715332]
[130.83757019 113.40974426]
[141.83335876 123.61233521]
[152.82913208 133.81492615]
[163.82490540 144.01751709]
[174.82067871 154.22010803]
[185.81646729 164.42269897]
[196.81224060 174.62528992]
[208.18182373 184.40960693]
[219.90928650 193.76194763]
[239.89660645 195.74687195]
[246.40698242 213.88543701]
[258.58605957 222.64160156]
[270.76513672 231.39775085]
[282.94418335 240.15391541]
[295.23147583 248.75755310]
[307.62506104 257.20736694]
[320.01864624 265.65716553]
[332.41223145 274.10696411]
[346.97381592 268.74600220]
[361.89627075 273.00039673]
[371.44161987 285.23419189]
[371.93948364 300.74328613]
[363.19839478 313.56408691]
[348.57949829 318.76675415]
[333.70407104 314.35073853]
[324.29199219 302.01409912]
[323.96243286 286.50054932]
[311.56884766 278.05075073]
[299.17526245 269.60095215]
[286.78167725 261.15112305]
[279.40197754 259.96975708]
[274.18804932 252.33297729]
[262.00897217 243.57682800]
[249.82989502 234.82066345]
[237.65083313 226.06451416]
[227.62126160 228.62884521]
[217.64733887 225.11997986]
[211.16699219 216.48759460]
[210.55694580 205.48942566]
[198.82946777 196.13706970]
[195.20011902 196.21620178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[41 74]
[42 73]
[43 72]
[44 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[92 124]
[93 123]
[95 119]
[96 118]
[97 117]
[98 116]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
