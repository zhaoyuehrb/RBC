%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGUCUCAGCUCUGGGAGGGAACGGGAGAUGUUGCAGGCGCCGAGAGGGCGGGCCAGGGCCGCACUCCGGAGACUCGCGGUUGCUACGCGCACC\
) } def
/len { sequence length } bind def

/coor [
[118.09314728 193.53077698]
[130.94386292 185.79389954]
[145.80078125 187.85636902]
[137.87976074 175.11833191]
[129.95874023 162.38031006]
[122.03772736 149.64227295]
[114.11671448 136.90423584]
[106.19569397 124.16620636]
[98.00712585 124.86806488]
[90.03483582 122.87110901]
[83.14401245 118.39205933]
[70.15363312 125.89205933]
[57.16325378 133.39205933]
[44.17287064 140.89205933]
[33.47895050 154.04791260]
[17.87686348 147.41381836]
[19.93260956 130.58496094]
[36.67287064 127.90167999]
[49.66325378 120.40167999]
[62.65363312 112.90167999]
[75.64401245 105.40167999]
[75.11675262 98.20665741]
[76.67029572 91.16160583]
[80.17475128 84.85563660]
[85.33704376 79.81609344]
[91.72550964 76.46438599]
[91.23471832 61.47241974]
[90.74393463 46.48045349]
[90.25315094 31.48848343]
[86.78933716 22.82046509]
[89.99968719 15.99970436]
[89.99968719 0.99970478]
[89.99968719 -14.00029564]
[82.26239014 -27.80046844]
[89.99968719 -40.52774048]
[89.99968719 -55.52774048]
[79.05034637 -72.29691315]
[88.96629333 -88.76100159]
[87.98524475 -103.72888184]
[87.00419617 -118.69676971]
[83.25863647 -127.24681091]
[86.24410248 -134.16896057]
[85.75331116 -149.16093445]
[85.26252747 -164.15289307]
[73.55766296 -174.77229309]
[72.87358856 -190.56178284]
[83.61614990 -202.15371704]
[99.41197968 -202.67080688]
[110.88968658 -191.80628967]
[111.23975372 -176.00588989]
[100.25449371 -164.64367676]
[100.74528503 -149.65171814]
[101.23606873 -134.65974426]
[101.97208405 -119.67781067]
[102.95313263 -104.70993042]
[103.93418121 -89.74204254]
[112.36360168 -83.55566406]
[115.97120667 -73.50557709]
[113.29169464 -62.94005966]
[104.99968719 -55.52774048]
[104.99968719 -40.52774048]
[112.73699188 -27.80046844]
[104.99968719 -14.00029564]
[104.99968719 0.99970478]
[104.99968719 15.99970436]
[105.24511719 30.99769592]
[105.73590088 45.98966599]
[106.22669220 60.98163605]
[106.71747589 75.97360229]
[123.87354279 92.75804138]
[118.93372345 116.24518585]
[126.85474396 128.98321533]
[134.77575684 141.72125244]
[142.69677734 154.45928955]
[150.61779785 167.19732666]
[158.53881836 179.93534851]
[167.86372375 191.68466187]
[178.47032166 202.29125977]
[189.07693481 212.89785767]
[199.68353271 223.50445557]
[215.24479675 221.96139526]
[228.12805176 230.82458496]
[232.25019836 245.90907288]
[225.66490173 260.09243774]
[211.48153687 266.67773438]
[196.39704895 262.55557251]
[187.53387451 249.67233276]
[189.07693481 234.11106873]
[178.47032166 223.50445557]
[167.86372375 212.89785767]
[157.25712585 202.29125977]
[155.89178467 217.22898865]
[145.43862915 227.98684692]
[130.54627991 229.78071594]
[117.83751678 221.81283569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[11 21]
[12 20]
[13 19]
[14 18]
[26 69]
[27 68]
[28 67]
[29 66]
[31 65]
[32 64]
[33 63]
[35 61]
[36 60]
[38 56]
[39 55]
[40 54]
[42 53]
[43 52]
[44 51]
[77 91]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
