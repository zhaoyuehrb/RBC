%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGGCGGAACCCGGAAGGCACGGCGCUCAGCUCAGGACCGCGCGCCGUGGUCUGAGGUCCGCGGCAGGGUCCCGC\
) } def
/len { sequence length } bind def

/coor [
[83.39360809 263.20724487]
[72.65184784 274.57159424]
[57.11244202 276.32116699]
[44.11263275 267.62985229]
[39.79052734 252.60142517]
[46.18689346 238.33184814]
[60.28156281 231.55879211]
[63.82672882 216.98374939]
[67.37189484 202.40872192]
[70.91706085 187.83367920]
[66.40698242 173.63830566]
[77.18667603 162.05776978]
[80.73184204 147.48272705]
[84.27700806 132.90768433]
[87.82217407 118.33264923]
[80.90995026 112.63471985]
[76.62889099 104.37037659]
[75.90744781 94.74051666]
[79.13256836 85.26805115]
[86.04564667 77.55708313]
[95.74380493 73.02252960]
[88.85434723 59.69829178]
[75.64305878 50.99356079]
[76.67036438 36.13442230]
[69.78090668 22.81018448]
[62.89144516 9.48594570]
[48.10058975 4.60042334]
[41.30350876 -9.01039314]
[46.05225754 -23.08110619]
[39.16279984 -36.40534592]
[24.02902985 -40.95996857]
[16.62214279 -54.92111206]
[21.33651352 -70.00588226]
[35.37518692 -77.26474762]
[50.40927124 -72.39115906]
[57.51930618 -58.27651978]
[52.48703766 -43.29480362]
[59.37649536 -29.97056580]
[73.60301208 -25.71124458]
[80.77971649 -12.29671383]
[76.21568298 2.59648633]
[83.10514832 15.92072582]
[89.99460602 29.24496460]
[102.71311188 36.99665833]
[102.17858887 52.80883026]
[109.06804657 66.13307190]
[122.39228821 73.02252960]
[137.24722290 70.94149780]
[152.10217285 68.86046600]
[166.95710754 66.77943420]
[181.81205750 64.69840240]
[196.66699219 62.61736679]
[211.52194214 60.53633118]
[218.69366455 46.77603149]
[232.59880066 39.88930130]
[247.89051819 42.52423477]
[258.68884277 53.66764450]
[260.84161377 69.03466034]
[253.52104187 82.71635437]
[239.54202271 89.45183563]
[224.27978516 86.65116882]
[213.60296631 75.39127350]
[198.74803162 77.47230530]
[183.89308167 79.55333710]
[169.03814697 81.63437653]
[154.18319702 83.71540833]
[139.32826233 85.79644012]
[124.47332001 87.87747192]
[121.63079834 111.84153748]
[102.39721680 121.87781525]
[98.85205078 136.45285034]
[95.30688477 151.02789307]
[91.76171112 165.60293579]
[96.01821899 180.84080505]
[85.49210358 191.37884521]
[81.94693756 205.95388794]
[78.40176392 220.52891541]
[74.85659790 235.10395813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 78]
[8 77]
[9 76]
[10 75]
[12 73]
[13 72]
[14 71]
[15 70]
[21 46]
[22 45]
[24 43]
[25 42]
[26 41]
[29 38]
[30 37]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
