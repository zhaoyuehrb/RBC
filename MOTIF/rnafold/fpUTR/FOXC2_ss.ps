%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUCUCUCGCUCUCAGGGCCCCCCUCGCUCCCCCGGCCGCAGUCCGUGCGCGAGGGCGCCGGCGAGCCGUCUCGGAAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[102.17893982 136.35093689]
[88.31562042 136.55633545]
[80.50151825 149.36022949]
[72.68741608 162.16412354]
[76.64804840 177.46409607]
[68.55804443 191.04081726]
[53.21706009 194.83947754]
[39.72662735 186.60638428]
[36.09038162 171.22608948]
[44.46564484 157.82345581]
[59.88351822 154.35002136]
[67.69762421 141.54612732]
[75.51172638 128.74223328]
[72.20480347 122.01064301]
[58.74151993 128.62426758]
[52.12812042 115.16087341]
[65.59095764 108.54747009]
[62.28403473 101.81588745]
[47.37401962 100.17531586]
[32.46400452 98.53475189]
[17.55399132 96.89418030]
[1.14858282 101.17190552]
[-7.50343370 86.59181213]
[4.11174202 74.24175262]
[19.19455910 81.98416901]
[34.10457230 83.62473297]
[49.01458740 85.26530457]
[63.92460251 86.90586853]
[91.04248810 68.76709747]
[116.39674377 79.04732513]
[128.59609985 70.31944275]
[140.79544067 61.59156036]
[152.83334351 52.64232254]
[164.70579529 43.47471619]
[166.23335266 24.78108597]
[180.54219055 13.14474106]
[198.53373718 15.38287830]
[209.70532227 5.37309647]
[220.87690735 -4.63668585]
[232.04849243 -14.64646816]
[243.03538513 -24.85861969]
[253.83393860 -35.26973343]
[264.63250732 -45.68084335]
[265.76983643 -50.44977570]
[268.23690796 -54.11687851]
[271.46707153 -56.38093185]
[274.85482788 -57.17919159]
[277.84542847 -56.67673492]
[290.04476929 -65.40461731]
[295.36135864 -73.12911987]
[302.85287476 -74.21885681]
[315.36282349 -82.49537659]
[327.87280273 -90.77188873]
[340.38275146 -99.04840851]
[347.21484375 -113.95661926]
[363.56491089 -115.22438049]
[372.61343384 -101.54753113]
[365.05206299 -86.99563599]
[348.65927124 -86.53843689]
[336.14932251 -78.26192474]
[323.63934326 -69.98540497]
[311.12936401 -61.70888901]
[298.77264404 -53.20527267]
[286.57330322 -44.47738647]
[275.04360962 -34.88229370]
[264.24505615 -24.47117996]
[253.44650269 -14.06006718]
[250.75396729 -6.98474932]
[242.05827332 -3.47488523]
[230.88668823 6.53489685]
[219.71510315 16.54467964]
[208.54351807 26.55446053]
[210.40924072 38.08820343]
[206.33071899 49.16633224]
[197.24667358 56.89422989]
[185.41972351 59.19065475]
[173.87339783 55.34716415]
[162.00094604 64.51477051]
[158.55072021 71.25315857]
[149.52331543 73.79090881]
[137.32397461 82.51879120]
[125.12463379 91.24667358]
[128.55136108 100.97080231]
[128.08146667 111.97949219]
[123.27070618 122.67610168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[18 28]
[19 27]
[20 26]
[21 25]
[30 82]
[31 81]
[32 80]
[33 78]
[34 77]
[37 72]
[38 71]
[39 70]
[40 69]
[41 67]
[42 66]
[43 65]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
