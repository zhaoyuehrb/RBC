%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAGGUCCCAGAAGGUGGCGAGUUUCGCGGCCAGAGGCUUACAGGUCCAGGUGGAGAGGCCGGGCUGGCCAGGGCUUCGGCCUCCGGCGUCGGGAA\
) } def
/len { sequence length } bind def

/coor [
[224.15225220 213.10102844]
[213.88404846 202.16650391]
[203.61584473 191.23197937]
[193.34764099 180.29743958]
[183.07942200 169.36291504]
[168.72676086 165.38168335]
[164.92015076 150.02523804]
[154.65193176 139.09071350]
[144.38372803 128.15617371]
[134.11552429 117.22164917]
[123.84732056 106.28712463]
[118.54152679 115.19539642]
[110.24240112 120.90927887]
[100.60388184 122.58555603]
[91.42915344 120.15765381]
[84.33369446 114.30476379]
[80.46102905 106.28553772]
[65.49063110 105.34368134]
[50.52022934 104.40182495]
[36.26145935 111.25733948]
[24.04513168 102.73615265]
[9.07473087 101.79429626]
[-5.89567041 100.85243988]
[-20.86607170 99.91058350]
[-37.05360031 104.95043945]
[-46.37765884 90.79069519]
[-35.35243988 77.91122437]
[-19.92421341 84.94017792]
[-4.95381260 85.88203430]
[10.01658821 86.82389832]
[24.98698997 87.76575470]
[38.17497635 80.84287262]
[51.46208572 89.43142700]
[66.43248749 90.37328339]
[81.40289307 91.31513977]
[86.32495117 83.33269501]
[94.62275696 78.05558777]
[104.84436035 76.87404633]
[114.98965454 80.41600800]
[116.40128326 65.48258209]
[117.81290436 50.54915237]
[119.22453308 35.61572266]
[110.80603790 30.01997185]
[105.12529755 21.72966957]
[102.97103119 11.97353172]
[104.61317444 2.17778587]
[109.76994324 -6.24231100]
[117.65503693 -12.08694077]
[127.09721375 -14.54263306]
[130.36935425 -29.18138504]
[133.64151001 -43.82013702]
[128.22384644 -59.29853821]
[139.12335205 -71.55140686]
[155.12754822 -67.97404480]
[159.77268982 -52.24653244]
[148.28025818 -40.54798889]
[145.00811768 -25.90923500]
[141.73596191 -11.27048397]
[154.22656250 4.70246696]
[151.21049500 25.04048347]
[134.15795898 37.02734756]
[132.74633789 51.96077728]
[131.33471680 66.89420319]
[129.92308044 81.82763672]
[134.78184509 96.01891327]
[145.05004883 106.95344543]
[155.31825256 117.88797760]
[165.58647156 128.82250977]
[175.85467529 139.75703430]
[190.94178772 144.52038574]
[194.01396179 159.09471130]
[204.28216553 170.02923584]
[214.55036926 180.96376038]
[224.81857300 191.89830017]
[235.08679199 202.83282471]
[247.62390137 211.06816101]
[261.73712158 216.14923096]
[275.85031128 221.23030090]
[291.88568115 217.79531860]
[302.67587280 230.14456177]
[297.12084961 245.57420349]
[280.93515015 248.21154785]
[270.76925659 235.34352112]
[256.65603638 230.26245117]
[242.54283142 225.18138123]
[232.98146057 236.73907471]
[240.61708069 249.65020752]
[248.25271606 262.56134033]
[255.88833618 275.47247314]
[270.43334961 283.04708862]
[270.87561035 299.44027710]
[256.76016235 307.78811646]
[242.60777283 299.50308228]
[242.97720337 283.10809326]
[235.34158325 270.19696045]
[227.70596313 257.28582764]
[220.07034302 244.37469482]
[216.47576904 234.88609314]
[216.44171143 225.79205322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[17 35]
[18 34]
[19 33]
[21 31]
[22 30]
[23 29]
[24 28]
[39 64]
[40 63]
[41 62]
[42 61]
[49 58]
[50 57]
[51 56]
[76 85]
[77 84]
[78 83]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
