%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCGCAAGGGGCGUGGUUCAUUUAAGCCGGUAGUUGAAGCGCUGGGGGCAGCUGUAGUGGGAGUGUUCCAGGAUUCGCCUUGUAUAUUUAAAGUUGGAGUUCGUUGCUAAAG\
) } def
/len { sequence length } bind def

/coor [
[83.23159790 326.20095825]
[71.78680420 316.03851318]
[66.38651276 301.71737671]
[68.27167511 286.52841187]
[77.00908661 273.96194458]
[90.59096527 266.90563965]
[90.59096527 251.90565491]
[90.59096527 236.90565491]
[90.59096527 221.90565491]
[82.85366821 209.17837524]
[90.59096527 195.37820435]
[90.59096527 180.37820435]
[90.59096527 165.37820435]
[90.59096527 150.37820435]
[80.20388794 139.55653381]
[65.21648407 138.94204712]
[50.22907257 138.32756042]
[36.12351990 145.49302673]
[23.72389793 137.24082947]
[8.73649025 136.62634277]
[-6.25091791 136.01185608]
[-21.23832512 135.39736938]
[-35.34387970 142.56283569]
[-47.74350357 134.31065369]
[-62.73091125 133.69616699]
[-77.71831512 133.08168030]
[-89.17078400 143.97279358]
[-104.96777344 143.49235535]
[-115.73719788 131.92538452]
[-115.08976746 116.13435364]
[-103.40957642 105.48782349]
[-87.62628174 106.30216980]
[-77.10382843 118.09426880]
[-62.11642075 118.70875549]
[-47.12901306 119.32324219]
[-34.09546280 112.11382294]
[-20.62383842 120.40996552]
[-5.63643026 121.02445221]
[9.35097790 121.63893890]
[24.33838654 122.25342560]
[37.37194061 115.04400635]
[50.84356308 123.34014130]
[65.83097076 123.95463562]
[80.81837463 124.56912231]
[71.25035095 104.52333069]
[77.62203979 84.82765961]
[94.47487640 75.64923859]
[95.70281982 60.69958496]
[96.93076324 45.74993134]
[98.15870667 30.80027962]
[99.38665009 15.85062504]
[100.61459351 0.90097070]
[98.17530823 -8.04617596]
[102.08573151 -14.43840504]
[103.72156525 -29.34893990]
[92.14739227 -39.68422699]
[88.89153290 -54.85587692]
[95.20592499 -69.03008270]
[108.66255951 -76.75656891]
[124.08708191 -75.06434631]
[135.54846191 -64.60411072]
[138.63954163 -49.39803314]
[132.17176819 -35.29316330]
[118.63210297 -27.71310806]
[116.99626923 -12.80257320]
[115.56424713 2.12891388]
[114.33630371 17.07856750]
[113.10836029 32.02822113]
[111.88041687 46.97787476]
[110.65247345 61.92752838]
[109.42453003 76.87718201]
[119.05259705 82.00133514]
[125.96737671 91.10107422]
[128.55604553 102.76866913]
[125.92224121 114.96143341]
[118.12434387 125.35910797]
[133.05583191 126.79113007]
[147.98731995 128.22314453]
[162.91880798 129.65516663]
[177.39460754 123.27068329]
[189.32508850 132.18769836]
[204.25657654 133.61972046]
[219.18806458 135.05174255]
[228.64863586 122.86563110]
[243.20326233 117.75034332]
[258.20764160 121.33815765]
[268.87390137 132.48419189]
[271.79849243 147.63182068]
[266.04818726 161.94744873]
[253.45790100 170.86305237]
[238.04512024 171.53366089]
[224.72801208 163.74531555]
[217.75604248 149.98323059]
[202.82455444 148.55120850]
[187.89306641 147.11918640]
[174.48526001 153.60609436]
[161.48678589 144.58665466]
[146.55529785 143.15463257]
[131.62380981 141.72261047]
[116.69232178 140.29058838]
[105.59096527 150.37820435]
[105.59096527 165.37820435]
[105.59096527 180.37820435]
[105.59096527 195.37820435]
[113.32826996 209.17837524]
[105.59096527 221.90565491]
[105.59096527 236.90565491]
[105.59096527 251.90565491]
[105.59096527 266.90563965]
[119.17284393 273.96194458]
[127.91026306 286.52841187]
[129.79542542 301.71737671]
[124.39513397 316.03851318]
[112.95033264 326.20095825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 109]
[7 108]
[8 107]
[9 106]
[11 104]
[12 103]
[13 102]
[14 101]
[15 44]
[16 43]
[17 42]
[19 40]
[20 39]
[21 38]
[22 37]
[24 35]
[25 34]
[26 33]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[54 65]
[55 64]
[76 100]
[77 99]
[78 98]
[79 97]
[81 95]
[82 94]
[83 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
