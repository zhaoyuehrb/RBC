%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUUCAGGGGAGGGAGCAACUGGAGCCUCAGGCCCUCCAGAGUAGUCUGCCUGACCACCCUGGAGCCCACAGAAGCCCAGGACGUCUCCCGCGAAGCCUCCCCGUGUGUGGCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[215.34205627 358.37692261]
[210.39689636 350.41183472]
[209.73757935 340.92053223]
[213.64631653 332.09426880]
[206.43388367 318.94204712]
[199.22146606 305.78982544]
[184.89529419 301.87878418]
[177.39350891 288.64331055]
[181.59289551 273.64321899]
[174.38047791 260.49099731]
[167.16806030 247.33876038]
[159.95564270 234.18653870]
[152.74322510 221.03431702]
[145.53079224 207.88209534]
[132.80580139 208.95968628]
[120.58673859 205.08863831]
[110.73146820 196.81993103]
[104.75272369 185.37593079]
[103.58603668 172.46989441]
[107.44348145 160.04942322]
[115.77623749 150.00259399]
[109.26798248 136.48806763]
[102.75972748 122.97352600]
[96.25146484 109.45899200]
[90.11944580 104.05958557]
[89.75507355 95.50072479]
[83.60582733 81.81909943]
[70.89119720 72.40375519]
[72.73091125 57.62320709]
[66.58166504 43.94158554]
[49.71747208 33.05141830]
[52.18666458 13.94843960]
[45.32393265 0.61041349]
[33.23177338 -4.10834408]
[27.81774139 -15.46120739]
[31.51853752 -27.06035233]
[25.01028061 -40.57488251]
[18.50202560 -54.08941650]
[11.99376869 -67.60395050]
[5.48551273 -81.11848450]
[-1.02274334 -94.63301849]
[-13.98148060 -103.70944977]
[-12.53256989 -118.53341675]
[-19.04082680 -132.04795837]
[-31.99956322 -141.12438965]
[-30.55065346 -155.94834900]
[-37.05891037 -169.46289062]
[-43.56716537 -182.97741699]
[-58.17409515 -189.61195374]
[-61.95439529 -205.20326233]
[-52.00814438 -217.79103088]
[-35.96525192 -217.71897888]
[-26.13245392 -205.04240417]
[-30.05263138 -189.48567200]
[-23.54437637 -175.97114563]
[-17.03611946 -162.45660400]
[-4.54289675 -154.34681702]
[-5.52629328 -138.55621338]
[0.98196298 -125.04167175]
[13.47518635 -116.93188477]
[12.49178982 -101.14127350]
[19.00004578 -87.62673950]
[25.50830269 -74.11220551]
[32.01655960 -60.59767532]
[38.52481461 -47.08314133]
[45.03306961 -33.56860733]
[60.02880096 -24.55707169]
[58.66196060 -6.25231600]
[65.52468872 7.08571005]
[75.64139557 9.37156487]
[82.93250275 17.05590439]
[84.75930786 27.71454239]
[80.26328278 37.79233932]
[86.41252899 51.47396088]
[98.68732452 59.91070175]
[97.28745270 75.66985321]
[103.43669891 89.35147858]
[109.76599884 102.95073700]
[116.27425385 116.46527100]
[122.78251648 129.97981262]
[129.29077148 143.49433899]
[146.73562622 144.34548950]
[161.31460571 153.80215454]
[169.12457275 169.22691345]
[168.12783813 186.39912415]
[158.68302917 200.66967773]
[165.89544678 213.82189941]
[173.10786438 226.97412109]
[180.32028198 240.12634277]
[187.53269958 253.27856445]
[194.74513245 266.43078613]
[209.65075684 270.95407104]
[216.77781677 284.39505005]
[212.37368774 298.57739258]
[219.58612061 311.72961426]
[226.79853821 324.88183594]
[245.78089905 334.64282227]
[244.94621277 355.19485474]
[253.17658997 367.73522949]
[261.40695190 380.27560425]
[269.63732910 392.81597900]
[286.24261475 400.63882446]
[286.70291138 418.12789917]
[295.26144409 430.44662476]
[310.85794067 433.00106812]
[320.01208496 445.88424683]
[317.29290771 461.45288086]
[304.31365967 470.47030640]
[288.77465820 467.58666992]
[279.89495850 454.51281738]
[282.94268799 439.00515747]
[274.38415527 426.68643188]
[262.46624756 424.19662476]
[255.25044250 413.89459229]
[257.09698486 401.04635620]
[248.86659241 388.50598145]
[240.63621521 375.96560669]
[232.40583801 363.42523193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 96]
[5 95]
[6 94]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[21 81]
[22 80]
[23 79]
[24 78]
[26 77]
[27 76]
[29 74]
[30 73]
[32 69]
[33 68]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[43 59]
[44 58]
[46 56]
[47 55]
[48 54]
[98 118]
[99 117]
[100 116]
[101 115]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
