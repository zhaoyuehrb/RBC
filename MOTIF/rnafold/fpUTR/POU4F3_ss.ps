%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGAGCAGCGCUCACUUGGAGAGCGGCAAGCAAGCUAGACAAGCCUGAUUCCAUGUCACCCGCUGCCACCCUGCCAGGAGCGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[44.00625229 479.92767334]
[29.16672134 483.22262573]
[14.19672203 480.58300781]
[1.37907004 472.41134644]
[-7.33163643 459.95373535]
[-10.60707760 445.10989380]
[-7.94777298 430.14337158]
[0.24075356 417.33648682]
[12.70981121 408.64215088]
[27.55795860 405.38626099]
[30.16268158 390.61413574]
[32.76740265 375.84201050]
[35.37212753 361.06991577]
[37.97684860 346.29779053]
[40.58156967 331.52566528]
[38.59912109 324.23361206]
[43.54360962 316.28732300]
[46.66228485 301.61511230]
[44.93553162 294.25830078]
[50.15432739 286.48937988]
[53.78315735 271.93496704]
[57.15742111 257.31939697]
[60.27609634 242.64718628]
[50.18899918 231.72068787]
[48.44950867 216.77284241]
[55.93289566 203.51190186]
[69.95185089 197.12637329]
[73.07052612 182.45414734]
[76.18920135 167.78193665]
[79.30787659 153.10972595]
[77.58112335 145.75291443]
[82.79991913 137.98402405]
[86.42874908 123.42958832]
[74.66160583 109.54411316]
[74.34395599 91.34600067]
[85.61933136 77.05831909]
[81.48477173 62.63939285]
[77.35021210 48.22046661]
[64.07220459 39.21635056]
[62.97690964 23.21073151]
[74.90454865 12.48174763]
[90.70524597 15.25975800]
[98.25807190 29.41371155]
[91.76913452 44.08590698]
[95.90369415 58.50482941]
[100.03826141 72.92375946]
[104.70174408 73.33507538]
[109.22467041 74.54357147]
[118.04145050 62.40831375]
[126.85823059 50.27305984]
[135.67500305 38.13780594]
[134.59558105 22.13110542]
[146.53385925 11.41395760]
[162.33180237 14.20763969]
[169.87057495 28.36907768]
[163.36709595 43.03482819]
[147.81025696 46.95458221]
[138.99348450 59.08983612]
[130.17669678 71.22509003]
[121.35992432 83.36035156]
[126.90438080 96.95388794]
[124.53943634 111.44292450]
[114.96034241 122.56795502]
[100.98318481 127.05841064]
[97.35435486 141.61285400]
[93.98008728 156.22839355]
[90.86141205 170.90061951]
[87.74273682 185.57283020]
[84.62406158 200.24504089]
[94.83377838 211.78054810]
[96.27648163 226.93878174]
[88.60754395 239.88681030]
[74.94831085 245.76586914]
[71.82963562 260.43807983]
[73.11460114 269.70849609]
[68.33759308 275.56378174]
[64.70876312 290.11822510]
[61.33449936 304.73376465]
[58.21582413 319.40597534]
[55.35368729 334.13040161]
[52.74896622 348.90249634]
[50.14424133 363.67462158]
[47.53952026 378.44674683]
[44.93479538 393.21887207]
[42.33007431 407.99096680]
[55.16918182 416.12890625]
[63.91263199 428.56353760]
[67.22711182 443.39874268]
[64.60719299 458.37219238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[17 79]
[18 78]
[20 77]
[21 76]
[22 74]
[23 73]
[27 69]
[28 68]
[29 67]
[30 66]
[32 65]
[33 64]
[36 46]
[37 45]
[38 44]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
