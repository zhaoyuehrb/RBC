%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGACAAUGCGCGUCCGCCACGACGCAGGAAGGCCGCCUCAUUGGUCCGCGCUGUCGGGCUUCGGCGGCUUUUCUCUUUAGCGCUCAGGGCGCUGACCCACUGCUCUUCCUCUUAAGAAAGUGCUCCAUUCCUUCCGGCGCCCGGAGCUGCUGGCCCAAAGGGAUCCGGAGCGAGCUAGGGCAGACACC\
) } def
/len { sequence length } bind def

/coor [
[142.73124695 138.79191589]
[148.16491699 124.81066895]
[160.70938110 116.58744812]
[145.87173462 114.38649750]
[131.03408813 112.18553925]
[128.00831604 119.38227844]
[123.30431366 125.81899261]
[117.11524200 131.10290527]
[109.72627258 134.89080811]
[101.50184631 136.91067505]
[92.86775970 136.97981262]
[84.28916931 135.01861572]
[76.24551392 131.05888367]
[66.92060852 142.80818176]
[57.59569931 154.55747986]
[48.27079010 166.30677795]
[38.94588089 178.05607605]
[41.00086975 193.72619629]
[31.30739594 206.20867920]
[15.61642742 208.09786987]
[3.23713732 198.27296448]
[1.51393831 182.56289673]
[11.46917343 170.28817749]
[27.19657898 168.73117065]
[36.52148819 156.98187256]
[45.84639740 145.23257446]
[55.17130661 133.48327637]
[64.49621582 121.73397064]
[59.09778976 107.73907471]
[44.29813766 105.29564667]
[29.49848747 102.85221100]
[14.69883823 100.40878296]
[-0.10081200 97.96534729]
[-14.90046215 95.52191925]
[-29.70011139 93.07848358]
[-44.49976349 90.63505554]
[-59.29941177 88.19161987]
[-74.09906006 85.74819183]
[-88.89871216 83.30475616]
[-103.69836426 80.86132050]
[-110.56597137 89.06250763]
[-120.14899445 93.63044739]
[-130.68286133 93.79847717]
[-140.25859070 89.60337067]
[-147.16879272 81.86653137]
[-150.21199036 72.03404999]
[-164.87393188 68.86737823]
[-179.53585815 65.70070648]
[-194.19778442 62.53403473]
[-208.85971069 59.36735916]
[-223.52165222 56.20068741]
[-236.66685486 64.97446442]
[-252.14935303 61.80150986]
[-260.78366089 48.56428146]
[-257.44720459 33.11618805]
[-244.11941528 24.62231445]
[-228.70745850 28.12192154]
[-220.35496521 41.53875732]
[-205.69303894 44.70542908]
[-191.03111267 47.87210464]
[-176.36918640 51.03877640]
[-161.70726013 54.20545197]
[-147.04531860 57.37212372]
[-131.51296997 45.63616562]
[-112.05293274 49.13586044]
[-101.25492859 66.06167603]
[-86.45527649 68.50510406]
[-71.65563202 70.94853973]
[-56.85597992 73.39196777]
[-42.05633163 75.83540344]
[-27.25667953 78.27883148]
[-12.45703030 80.72226715]
[2.34262013 83.16569519]
[17.14226913 85.60913086]
[31.94191933 88.05256653]
[46.74156952 90.49599457]
[61.54122162 92.93943024]
[67.24031830 82.41452789]
[75.52826691 74.61357117]
[85.31908417 70.06552124]
[81.91293335 55.45737076]
[78.50679016 40.84921265]
[75.10064697 26.24106026]
[71.69450378 11.63290501]
[68.28836060 -2.97524977]
[64.88221741 -17.58340454]
[61.47607422 -32.19155884]
[51.99098969 -46.24394608]
[62.86847305 -59.24843597]
[78.37593079 -52.39604950]
[76.08422852 -35.59770203]
[79.49037170 -20.98954773]
[82.89651489 -6.38139343]
[86.30265808 8.22676086]
[89.70880127 22.83491516]
[93.11494446 37.44306946]
[96.52109528 52.05122375]
[99.92723846 66.65937805]
[122.59159851 75.48017883]
[133.23504639 97.34789276]
[148.07269287 99.54884338]
[162.91033936 101.74980164]
[177.86016846 102.97561646]
[192.85816956 103.22104645]
[207.85615540 103.46646881]
[222.85415649 103.71189880]
[237.85214233 103.95732117]
[252.85012817 104.20275116]
[267.84811401 104.44817352]
[279.15802002 93.73723602]
[294.36462402 94.19979095]
[304.50616455 105.04804230]
[319.50415039 105.29347229]
[334.50213623 105.53889465]
[322.63357544 96.36625671]
[316.84124756 82.52975464]
[318.63552856 67.63745880]
[327.54858398 55.57273865]
[341.25619507 49.48163986]
[356.18389893 50.95249557]
[368.43911743 59.60176849]
[374.82611084 73.17403412]
[373.67938232 88.13013458]
[365.29794312 100.57006836]
[351.86975098 107.24945831]
[366.62744141 109.93470764]
[381.38513184 112.61996460]
[396.14282227 115.30521393]
[410.90051270 117.99047089]
[425.70016479 120.43389893]
[440.53781128 122.63485718]
[455.37545776 124.83581543]
[470.21310425 127.03677368]
[485.05075073 129.23773193]
[499.88839722 131.43869019]
[514.72601318 133.63964844]
[529.62774658 135.35394287]
[544.57757568 136.57975769]
[559.52740479 137.80557251]
[574.47723389 139.03140259]
[589.42706299 140.25721741]
[604.38641357 141.36068726]
[619.35430908 142.34172058]
[632.31561279 132.88742065]
[647.74987793 137.26512146]
[653.81713867 152.11663818]
[645.86322021 166.04913330]
[629.98968506 168.37481689]
[618.37329102 157.30961609]
[603.40539551 156.32856750]
[596.51409912 159.03263855]
[588.20123291 155.20704651]
[573.25140381 153.98121643]
[558.30157471 152.75540161]
[543.35174561 151.52958679]
[528.40191650 150.30377197]
[526.17309570 152.02893066]
[523.12115479 152.96783447]
[519.54486084 152.80052185]
[515.85382080 151.32192993]
[512.52508545 148.47729492]
[497.68743896 146.27633667]
[482.84979248 144.07537842]
[468.01214600 141.87442017]
[453.17449951 139.67346191]
[438.33685303 137.47250366]
[423.49920654 135.27154541]
[419.18618774 137.35650635]
[413.51599121 136.74291992]
[408.21524048 132.74815369]
[393.45755005 130.06291199]
[378.69985962 127.37765503]
[363.94216919 124.69239807]
[349.18447876 122.00714874]
[334.25671387 120.53688812]
[319.25872803 120.29146576]
[304.26074219 120.04603577]
[293.76968384 130.55667114]
[278.55609131 130.52142334]
[267.60269165 119.44616699]
[252.60470581 119.20074463]
[237.60671997 118.95531464]
[222.60871887 118.70989227]
[207.61073303 118.46446228]
[192.61274719 118.21903992]
[177.61474609 117.97360992]
[188.65240479 128.13088989]
[191.73570251 142.81057739]
[185.71731567 156.55026245]
[172.83674622 164.23733521]
[157.88693237 163.01135254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 102]
[4 101]
[5 100]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[29 77]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[103 186]
[104 185]
[105 184]
[106 183]
[107 182]
[108 181]
[109 180]
[112 177]
[113 176]
[114 175]
[125 174]
[126 173]
[127 172]
[128 171]
[129 170]
[130 167]
[131 166]
[132 165]
[133 164]
[134 163]
[135 162]
[136 161]
[137 156]
[138 155]
[139 154]
[140 153]
[141 152]
[142 150]
[143 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
