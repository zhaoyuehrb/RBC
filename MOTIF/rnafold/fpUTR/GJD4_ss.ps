%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAAACCCACCUCCUACUCCUGGCUCAGACCUUUGCUUUCUUAUCUCCAGCUCACACCUUUAAGUCUUAUGUAGUUAAAGGACAUUUAUCCGCCUCCUUGGAGAACACAGCCCUCCAGUGUCUCCUGCAGCCUGGAGCCUGGGACAUUCUGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[112.84727478 485.74203491]
[97.74808502 487.72558594]
[83.14936066 483.39001465]
[71.58042145 473.48648071]
[65.04565430 459.73089600]
[64.67723846 444.50643921]
[70.53901672 430.45083618]
[81.61539459 419.99935913]
[95.98732758 414.96273804]
[97.17160034 400.00955200]
[98.35587311 385.05636597]
[84.64743042 371.27838135]
[85.41932678 351.55450439]
[100.62225342 338.49490356]
[100.91860962 323.49783325]
[101.21496582 308.50076294]
[101.51132202 293.50369263]
[101.80768585 278.50662231]
[101.80768585 263.50662231]
[101.51132202 248.50955200]
[101.21496582 233.51248169]
[100.91860962 218.51539612]
[92.93136597 205.94348145]
[100.39450073 191.99313354]
[100.09814453 176.99606323]
[99.80178833 161.99899292]
[99.50543213 147.00192261]
[99.06092834 132.00851440]
[98.46833038 117.02021790]
[91.80261993 130.45779419]
[90.96349335 145.43429565]
[81.17379761 156.79924011]
[66.48673248 159.84719849]
[52.98314667 153.31626892]
[46.25389862 139.91040039]
[49.08539581 125.17945099]
[63.44812775 120.85372925]
[48.76978302 117.76404572]
[34.09143448 114.67436981]
[24.38888359 126.51155853]
[10.29216194 132.47319031]
[-4.95940399 131.18931580]
[-17.86111832 122.95497894]
[-25.44825935 109.66236115]
[-25.97735977 94.36599731]
[-19.32683372 80.58089447]
[-7.02492666 71.47476196]
[8.10147572 69.14012146]
[22.57643700 74.11346436]
[33.07371521 85.25193787]
[37.18111420 99.99601746]
[51.85946274 103.08570099]
[66.53781128 106.17537689]
[71.48986053 100.54269409]
[57.71538925 94.60434723]
[59.10673141 79.66901398]
[73.74106598 76.37716675]
[81.39396667 89.27731323]
[86.34602356 83.64463043]
[81.40182495 69.48288727]
[76.45763397 55.32114410]
[71.51344299 41.15940094]
[66.56924438 26.99765778]
[61.62505341 12.83591652]
[56.68085861 -1.32582617]
[41.53214645 -3.51101828]
[29.14093781 -12.49525928]
[22.35464668 -26.21403694]
[22.73271179 -41.51487350]
[30.18825531 -54.88175201]
[43.00804901 -63.24306107]
[58.24619675 -64.67743683]
[72.40108490 -58.85525894]
[82.22002411 -47.11443329]
[85.44669342 -32.15290833]
[81.33963013 -17.40873718]
[70.84259796 -6.27002001]
[75.78679657 7.89172220]
[80.73098755 22.05346489]
[85.67518616 36.21520615]
[90.61937714 50.37694931]
[95.56356812 64.53868866]
[100.50776672 78.70043182]
[102.95832825 63.90196228]
[105.40888977 49.10349274]
[107.85945129 34.30502319]
[105.87818146 19.43644524]
[109.42448425 4.86168003]
[118.01541138 -7.43449306]
[130.48107910 -15.77759075]
[145.12390137 -19.03145790]
[159.94984436 -16.75298309]
[172.93991089 -9.25244999]
[182.32513428 2.44872665]
[186.82745361 16.75708961]
[185.83370972 31.72413635]
[179.47926331 45.31166840]
[168.62944031 55.66934204]
[154.76504517 61.38597870]
[143.17446899 70.90746307]
[131.58390808 80.42894745]
[119.99333191 89.95043182]
[134.72985840 87.15135956]
[149.46638489 84.35228729]
[164.20291138 81.55321503]
[178.93943787 78.75414276]
[186.83605957 74.05525970]
[193.99459839 76.04836273]
[208.78353882 73.54098511]
[223.57249451 71.03360748]
[229.53166199 56.80364227]
[242.25106812 48.07322693]
[257.67199707 47.62820816]
[270.87371826 55.61058807]
[277.64358521 69.47322083]
[275.82135010 84.79258728]
[265.98849487 96.68033600]
[251.28265381 101.34313202]
[236.39639282 97.29308319]
[226.07986450 85.82256317]
[211.29092407 88.32993317]
[196.50196838 90.83731079]
[181.73851013 93.49066162]
[167.00198364 96.28974152]
[152.26545715 99.08881378]
[137.52893066 101.88788605]
[122.79241180 104.68695831]
[113.45661926 116.42761993]
[114.04922485 131.41590881]
[117.53069305 139.91976929]
[114.50250244 146.70556641]
[114.79885864 161.70263672]
[115.09522247 176.69970703]
[115.39157867 191.69677734]
[123.40001678 205.34138489]
[115.91567993 218.21903992]
[116.21204376 233.21612549]
[116.50839996 248.21319580]
[116.80475616 263.21026611]
[119.93089294 269.13354492]
[119.60498047 274.87448120]
[116.80475616 278.80297852]
[116.50839996 293.80004883]
[116.21204376 308.79711914]
[115.91567993 323.79418945]
[115.61932373 338.79125977]
[124.77384949 344.44866943]
[130.68507385 353.34420776]
[132.32945251 363.81533813]
[129.47340393 373.93856812]
[122.70384979 381.88284302]
[113.30905151 386.24066162]
[112.12477875 401.19381714]
[110.94050598 416.14700317]
[124.34044647 423.38311768]
[133.63357544 435.44784546]
[137.20977783 450.25091553]
[134.44947815 465.22760010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 154]
[10 153]
[11 152]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[19 139]
[20 138]
[21 137]
[22 136]
[24 134]
[25 133]
[26 132]
[27 131]
[28 129]
[29 128]
[37 53]
[38 52]
[39 51]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[102 127]
[103 126]
[104 125]
[105 124]
[106 123]
[108 122]
[109 121]
[110 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
