%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGCUCCCUCCCACCCCACUGCUCCCGCUCCAUUGUCUGGGAAUUGCAGCCGCGGGGCGGGCGGCGGCGGCGGCGGCGGCGGCCGGGACCCAGCGGGCCAGGUGGGGACGGCGCGGAGCGGGUGCGGGAGAUGCCGUGCGGGACUGGGGCCACCUGAGCCGCCCGCCUCGUCCCCGCCUUCUGUGGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[105.62693787 271.79534912]
[99.25471497 285.94363403]
[85.76663971 293.61511230]
[70.34915924 291.85992432]
[58.93059540 281.35296631]
[55.90163040 266.13436890]
[62.42695618 252.05604553]
[75.99745941 244.53134155]
[77.69416809 229.62760925]
[71.44615173 216.10682678]
[80.69478607 203.27041626]
[82.39149475 188.36668396]
[84.08820343 173.46295166]
[85.78491211 158.55921936]
[87.48162079 143.65550232]
[89.17832184 128.75177002]
[78.62079620 125.58898926]
[69.12674713 118.45458221]
[62.19820786 107.77075958]
[59.14953232 94.52288818]
[60.90006638 80.17267609]
[45.99633789 81.86938477]
[31.09260559 83.56609344]
[16.18887520 85.26280212]
[1.28514457 86.95951080]
[-13.60435963 88.77683258]
[-28.47866058 90.71465302]
[-43.35296249 92.65247345]
[-58.22726440 94.59030151]
[-73.10156250 96.52812195]
[-87.97586823 98.46594238]
[-102.85016632 100.40376282]
[-117.72447205 102.34158325]
[-126.20185089 112.07489777]
[-138.64047241 113.37590027]
[-148.30732727 106.08930206]
[-163.21105957 107.78600311]
[-176.04747009 117.03463745]
[-189.56825256 110.78662872]
[-204.47198486 112.48333740]
[-219.37571716 114.18003845]
[-227.85639954 127.31822968]
[-242.81321716 131.88195801]
[-257.18402100 125.71638489]
[-264.18334961 111.73269653]
[-260.50631714 96.53356171]
[-247.88914490 87.29555511]
[-232.28924561 88.38057709]
[-221.07241821 99.27631378]
[-206.16870117 97.57960510]
[-191.26496887 95.88289642]
[-179.49456787 86.75562286]
[-164.90777588 92.88227844]
[-150.00404358 91.18556976]
[-136.48809814 80.00193787]
[-119.66229248 87.46728516]
[-104.78799438 85.52946472]
[-89.91368866 83.59164429]
[-75.03939056 81.65381622]
[-60.16508484 79.71599579]
[-45.29078293 77.77817535]
[-30.41648293 75.84035492]
[-15.54218197 73.90252686]
[-9.30664539 69.91519928]
[-0.41156289 72.05577850]
[14.49216747 70.35906982]
[29.39589882 68.66236115]
[44.29962921 66.96565247]
[59.20335770 65.26894379]
[65.44462585 51.62905884]
[56.98527145 39.24199677]
[48.52591705 26.85493469]
[40.06655884 14.46787167]
[25.89436150 7.43513727]
[25.10622215 -7.43860102]
[16.64686584 -19.82566261]
[1.63991761 -26.43804169]
[0.13215911 -42.76773071]
[13.67464256 -52.01614380]
[28.33602333 -44.66930771]
[29.03392792 -28.28501892]
[37.49328232 -15.89795685]
[51.06041336 -9.75122738]
[52.45362091 6.00851631]
[60.91297913 18.39557838]
[69.37232971 30.78264046]
[77.83168793 43.16970062]
[91.97266388 38.16641617]
[90.75945282 23.21555901]
[86.94148254 14.90125370]
[89.64965820 8.01310921]
[88.67871094 -6.95543289]
[87.70776367 -21.92397499]
[80.64884186 -37.33851242]
[93.50686646 -48.38873672]
[107.68470001 -39.09221649]
[102.67630768 -22.89492226]
[103.64725494 -7.92638016]
[104.61820221 7.04216194]
[105.71031189 22.00235176]
[106.92351532 36.95320892]
[118.58580017 46.38672256]
[133.46009827 44.44889832]
[148.33441162 42.51107788]
[163.20870972 40.57325363]
[178.08300781 38.63543320]
[192.95730591 36.69761276]
[207.83160400 34.75978851]
[222.70591736 32.82196808]
[237.58021545 30.88414574]
[252.45451355 28.94632339]
[267.32882690 27.00850105]
[282.20312500 25.07067871]
[294.88809204 15.61539745]
[308.50827026 21.64364815]
[323.38256836 19.70582581]
[338.25686646 17.76800346]
[353.13116455 15.83018112]
[361.25024414 11.61295509]
[368.26177979 13.98342800]
[383.16552734 12.28672123]
[398.06924438 10.59001350]
[412.97299194 8.89330578]
[424.44705200 -33.36272430]
[438.13702393 -39.49334717]
[451.82699585 -45.62397003]
[465.51696777 -51.75459290]
[479.20693970 -57.88521576]
[492.89691162 -64.01583862]
[498.29391479 -78.87006378]
[512.64886475 -85.48154449]
[527.44519043 -79.92781067]
[533.90454102 -65.50378418]
[528.19464111 -50.76699448]
[513.70312500 -44.46051025]
[499.02755737 -50.32586288]
[485.33755493 -44.19524002]
[471.64758301 -38.06461716]
[457.95761108 -31.93399429]
[444.26763916 -25.80337143]
[430.57766724 -19.67274857]
[431.24478149 -12.20247650]
[446.18533325 -13.53646660]
[447.51910400 1.40411866]
[432.57897949 2.73806739]
[433.24609375 10.20833969]
[447.80575562 13.81621361]
[463.06179810 9.62534332]
[473.55441284 20.19672585]
[488.11407471 23.80459976]
[502.67370605 27.41247559]
[519.50213623 25.35334396]
[526.13940430 40.95409775]
[512.98565674 51.65066147]
[499.06582642 41.97211838]
[484.50619507 38.36424637]
[469.94656372 34.75637054]
[455.73190308 39.20529938]
[444.19787598 28.37585831]
[429.63824463 24.76798439]
[414.66967773 23.79703712]
[399.76596069 25.49374390]
[384.86221313 27.19045067]
[369.95849609 28.88715935]
[355.06900024 30.70448303]
[340.19470215 32.64230347]
[325.32040405 34.58012772]
[310.44607544 36.51794815]
[298.82504272 45.83462524]
[284.14093018 39.94498062]
[269.26663208 41.88280106]
[254.39233398 43.82062531]
[239.51803589 45.75844574]
[224.64373779 47.69626999]
[209.76943970 49.63409042]
[194.89512634 51.57191086]
[180.02082825 53.50973511]
[165.14653015 55.44755554]
[150.27223206 57.38537979]
[135.39791870 59.32320023]
[120.52362061 61.26102448]
[136.46345520 82.23667908]
[136.69812012 106.56288147]
[123.51112366 124.56152344]
[104.08205414 130.44847107]
[102.38534546 145.35220337]
[100.68863678 160.25593567]
[98.99193573 175.15966797]
[97.29522705 190.06340027]
[95.59851837 204.96713257]
[101.72517395 219.55392456]
[92.59790039 231.32431030]
[90.90119171 246.22804260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 193]
[9 192]
[11 190]
[12 189]
[13 188]
[14 187]
[15 186]
[16 185]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[36 54]
[37 53]
[39 51]
[40 50]
[41 49]
[70 87]
[71 86]
[72 85]
[73 84]
[75 82]
[76 81]
[88 101]
[89 100]
[91 99]
[92 98]
[93 97]
[102 181]
[103 180]
[104 179]
[105 178]
[106 177]
[107 176]
[108 175]
[109 174]
[110 173]
[111 172]
[112 171]
[113 170]
[115 168]
[116 167]
[117 166]
[118 165]
[120 164]
[121 163]
[122 162]
[123 161]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[146 160]
[147 159]
[149 157]
[150 156]
[151 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
