%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUGCAAGCGCUGCCACCUGAGGAGCCUGGUAGCCAAGGCAGCGGCAGGCUCAACCCAGAUCUCGCGAGACGGAGCACGCCUCGCGAGAUUUGACCUCUCGUCCCUGAGAGGCGGGUGGGUGUUAGUUCAGAGGGUU\
) } def
/len { sequence length } bind def

/coor [
[122.14669037 368.39108276]
[134.25035095 359.02304077]
[131.57200623 344.26409912]
[128.89364624 329.50515747]
[126.21529388 314.74621582]
[123.53694153 299.98727417]
[120.77956390 297.66632080]
[119.04847717 293.85858154]
[119.04643250 289.07995605]
[121.21006012 284.14764404]
[119.53058624 269.24197388]
[117.85112000 254.33628845]
[116.17165375 239.43060303]
[112.99753571 235.76194763]
[112.14889526 230.03717041]
[114.76672363 223.82055664]
[113.75769043 208.85453796]
[112.74865723 193.88851929]
[111.73962402 178.92250061]
[110.73058319 163.95646667]
[109.72154999 148.99044800]
[108.71251678 134.02442932]
[88.90836334 131.45321655]
[74.70808411 118.91236115]
[70.23049164 101.56026459]
[55.53535843 98.55142212]
[40.84022903 95.54257965]
[26.14509773 92.53373718]
[11.44996643 89.52489471]
[-3.24516487 86.51605988]
[-17.94029617 83.50721741]
[-32.69924164 80.82886505]
[-47.51456451 78.48234558]
[-62.35521317 83.96556091]
[-73.71541595 74.33254242]
[-88.53073883 71.98602295]
[-103.63842010 78.36489868]
[-116.55149078 68.25626373]
[-113.98609924 52.05901718]
[-98.58129883 46.43549728]
[-86.18421936 57.17069626]
[-71.36889648 59.51721191]
[-57.58793640 53.86615753]
[-45.16804886 63.66701889]
[-30.35272217 66.01353455]
[-25.97183228 63.92980194]
[-20.22759247 64.63475037]
[-14.93145466 68.81208801]
[-0.23632374 71.82092285]
[14.45880699 74.82976532]
[29.15393829 77.83860779]
[43.84906769 80.84745026]
[58.54420090 83.85629272]
[73.23933411 86.86513519]
[77.03075409 80.99810791]
[82.08344269 76.17448425]
[88.11994171 72.65914917]
[94.80877686 70.64511108]
[101.78267670 70.24298096]
[106.41793060 55.97713089]
[111.05318451 41.71128464]
[115.68843842 27.44543648]
[120.32369232 13.17958927]
[124.95894623 -1.08625841]
[129.59420776 -15.35210609]
[134.22946167 -29.61795425]
[138.86471558 -43.88380051]
[143.49996948 -58.14965057]
[148.13522339 -72.41549683]
[152.77047729 -86.68134308]
[157.40573120 -100.94718933]
[154.31161499 -116.46289062]
[165.60316467 -126.17629242]
[170.23841858 -140.44213867]
[164.26548767 -155.33186340]
[172.30767822 -169.21359253]
[188.19570923 -171.43847656]
[199.74163818 -160.29975891]
[198.08842468 -144.34211731]
[184.50427246 -135.80688477]
[179.86901855 -121.54103851]
[183.29467773 -107.04572296]
[171.67158508 -96.31193542]
[167.03633118 -82.04608917]
[162.40107727 -67.78024292]
[157.76582336 -53.51439285]
[153.13056946 -39.24854660]
[148.49530029 -24.98269844]
[143.86004639 -10.71685123]
[139.22479248 3.54899645]
[134.58953857 17.81484413]
[129.95428467 32.08069229]
[125.31903076 46.34653854]
[120.68377686 60.61238861]
[116.04852295 74.87823486]
[129.92543030 87.40917969]
[134.38104248 107.17724609]
[149.37727356 107.51381683]
[164.37348938 107.85038757]
[179.36972046 108.18695831]
[194.36593628 108.52352905]
[209.36216736 108.86009979]
[224.35838318 109.19667053]
[238.47308350 100.84757233]
[252.62620544 109.13135529]
[252.25823975 125.52637482]
[237.74772644 133.16683960]
[224.02182007 124.19289398]
[209.02558899 123.85632324]
[194.02937317 123.51975250]
[179.03314209 123.18318176]
[164.03692627 122.84661102]
[149.04069519 122.51004028]
[134.04447937 122.17346954]
[123.67853546 133.01539612]
[124.68757629 147.98141479]
[125.69660950 162.94743347]
[126.70564270 177.91345215]
[127.71467590 192.87948608]
[128.72370911 207.84550476]
[129.73274231 222.81152344]
[131.07733154 237.75114441]
[132.75680542 252.65682983]
[134.43627930 267.56250000]
[136.11573792 282.46820068]
[138.29588318 297.30889893]
[140.97424316 312.06784058]
[143.65258789 326.82681274]
[146.33094788 341.58575439]
[149.00929260 356.34469604]
[163.63285828 360.86242676]
[174.47369385 371.66683960]
[179.04064941 386.27508545]
[176.28428650 401.33035278]
[166.83798218 413.37304688]
[152.87245178 419.63580322]
[137.59684753 418.67953491]
[124.52139282 410.72393799]
[116.65074921 397.59719849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[10 125]
[11 124]
[12 123]
[13 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[22 115]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 45]
[33 44]
[35 42]
[36 41]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[73 81]
[74 80]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
