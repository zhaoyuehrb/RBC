%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUACGAGCGCGGAGCUUGCGCAGAAGACCCCCAUCAGGGUGCGGGGUGCAGUUGCGGCUCCAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[86.81109619 286.38806152]
[79.48886871 271.71438599]
[88.75998688 258.18743896]
[89.42348480 243.20211792]
[90.08698273 228.21679688]
[78.24967194 216.47778320]
[78.41368866 199.47401428]
[90.95752716 187.50495911]
[90.95752716 172.50495911]
[90.95752716 157.50495911]
[90.95752716 142.50495911]
[87.70353699 135.59790039]
[91.30403900 126.84512329]
[91.96753693 111.85980225]
[85.69007874 99.36640167]
[93.04714203 87.47669220]
[93.71063995 72.49137878]
[94.37414551 57.50605774]
[95.03764343 42.52074051]
[92.22480011 33.48400497]
[96.07649994 26.89156532]
[97.40220642 11.95026302]
[98.72790527 -2.99103928]
[100.05361176 -17.93234253]
[87.01691437 -25.79401398]
[78.72019196 -38.48461914]
[76.76422119 -53.45774078]
[81.48384857 -67.73661041]
[91.89210510 -78.50590515]
[105.88604736 -83.66680908]
[107.21175385 -98.60810852]
[108.53745270 -113.54941559]
[109.86315918 -128.49072266]
[99.52832794 -140.44758606]
[100.75859070 -156.20391846]
[112.82406616 -166.41175842]
[128.56651306 -165.01496887]
[138.64620972 -152.84225464]
[137.08306885 -137.11546326]
[124.80445862 -127.16501617]
[123.47875977 -112.22370911]
[122.15305328 -97.28240967]
[120.82735443 -82.34111023]
[133.69401550 -74.79692841]
[142.04353333 -62.36331177]
[144.17536926 -47.47652817]
[139.61366272 -33.08170319]
[129.21214294 -22.05014420]
[114.99491119 -16.60663986]
[113.66921234 -1.66533780]
[112.34350586 13.27596474]
[111.01780701 28.21726608]
[110.02296448 43.18423843]
[109.35945892 58.16955948]
[108.69596100 73.15487671]
[108.03246307 88.14019775]
[114.30992126 100.63359833]
[106.95285797 112.52330780]
[106.28936005 127.50862122]
[105.95752716 142.50495911]
[105.95752716 157.50495911]
[105.95752716 172.50495911]
[105.95752716 187.50495911]
[116.64072418 196.01762390]
[120.31585693 208.96978760]
[115.82849121 221.45475769]
[105.07230377 228.88029480]
[104.40880585 243.86561584]
[103.74530029 258.85092163]
[111.78462982 273.14434814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[8 63]
[9 62]
[10 61]
[11 60]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[23 50]
[24 49]
[30 43]
[31 42]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
