%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCCCUGGUUACGGAAGCCGAGGAAGGCUGAGCGCGGGCUCUCAAGGAAAGUAGUCGCGGAAUCUCAGUUAGCGGUGGAGAGGCAGU\
) } def
/len { sequence length } bind def

/coor [
[63.40713882 323.05685425]
[55.65559769 309.47567749]
[58.49821854 294.09863281]
[70.59279633 284.18627930]
[70.59279633 269.18627930]
[70.59279633 254.18627930]
[70.33101654 239.18856812]
[69.80751801 224.19769287]
[62.35404205 221.54968262]
[55.83831787 217.02578735]
[50.72373199 210.93350220]
[47.37775803 203.69227600]
[46.04555511 195.80474854]
[46.83206177 187.82182312]
[49.69381332 180.30418396]
[54.44118118 173.78292847]
[60.75089264 168.72203064]
[68.18802643 165.48536682]
[76.23597717 164.31053162]
[79.86480713 149.75610352]
[83.49363708 135.20166016]
[87.12246704 120.64723206]
[79.59934998 113.26470947]
[75.90386963 103.39342499]
[76.72937012 92.88545227]
[81.92097473 83.71234131]
[90.50462341 77.59516144]
[100.86982727 75.68164825]
[106.00012970 61.58625793]
[111.13042450 47.49086761]
[116.26072693 33.39547729]
[121.39102936 19.30008888]
[126.52133179 5.20469904]
[131.65164185 -8.89069080]
[135.78619385 -23.30961609]
[138.90487671 -37.98183060]
[142.02354431 -52.65404510]
[145.14222717 -67.32625580]
[148.26089478 -81.99847412]
[150.86561584 -96.77059174]
[152.95321655 -111.62461090]
[155.04081726 -126.47863007]
[149.29942322 -141.22132874]
[158.73272705 -152.74790955]
[160.82031250 -167.60192871]
[157.03720093 -184.12840271]
[171.87054443 -192.33865356]
[183.86621094 -180.35783386]
[175.67433167 -165.51434326]
[173.58674622 -150.66030884]
[179.47744751 -136.98008728]
[169.89483643 -124.39103699]
[167.80723572 -109.53701019]
[165.71963501 -94.68299103]
[167.96807861 -90.24230194]
[167.29084778 -84.31880951]
[162.93310547 -78.87979889]
[159.81443787 -64.20758057]
[156.69575500 -49.53536987]
[153.57708740 -34.86315536]
[150.45840454 -20.19094086]
[152.09567261 -17.65933228]
[152.71206665 -14.25807095]
[151.94288635 -10.42016983]
[149.60618591 -6.71242571]
[145.74702454 -3.76038837]
[140.61672974 10.33500099]
[135.48641968 24.43038940]
[130.35612488 38.52577972]
[125.22581482 52.62117004]
[120.09551239 66.71656036]
[114.96520996 80.81195068]
[124.19988251 97.44958496]
[118.63643646 115.64678955]
[101.67690277 124.27605438]
[98.04807281 138.83049011]
[94.41924286 153.38493347]
[90.79041290 167.93936157]
[105.45365906 186.28303528]
[102.83011627 209.38125610]
[84.79838562 223.67420959]
[85.32187653 238.66506958]
[88.81138611 247.34924316]
[85.59279633 254.18627930]
[85.59279633 269.18627930]
[85.59279633 284.18627930]
[97.68737793 294.09863281]
[100.52999878 309.47567749]
[92.77845764 323.05685425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 86]
[5 85]
[6 84]
[7 82]
[8 81]
[19 78]
[20 77]
[21 76]
[22 75]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 67]
[34 66]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 54]
[41 53]
[42 52]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
