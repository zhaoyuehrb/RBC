%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGAGAGCCACAAGCCACAGCGCUGAGCUGCAGGCGCGGCGAAACUUCCCUCUACCCGCCCGGCCCGCGGCGCGCACCGUUGGCGCUGGACGCUUCCUCCUUGGAAGCGCCUCUCCCUCAGGUCUCAAGAACUGUUUUGAGAUGCAGGAAUUCAUCUAAUUUUCACUGCCGGGCGAGGUGUGAGAGCCCUAGCAUCUGAAAGUGGUCGACUUGCGAGUUGUU\
) } def
/len { sequence length } bind def

/coor [
[36.08073807 554.83349609]
[48.61172867 545.95263672]
[47.14147186 531.02490234]
[45.67121506 516.09710693]
[44.20095444 501.16934204]
[42.73069763 486.24157715]
[30.35255051 471.37957764]
[38.97886276 453.15332031]
[37.09051514 438.27264404]
[35.20216751 423.39199829]
[33.31381989 408.51132202]
[31.42547417 393.63067627]
[25.21574974 389.05651855]
[20.24881363 383.75918579]
[16.58866310 378.00723267]
[5.98206234 388.61383057]
[-4.62453938 399.22042847]
[-5.96991301 404.24450684]
[-8.81891346 407.89056396]
[-12.39733410 409.81710815]
[-15.90744114 410.03833008]
[-26.95079613 420.18939209]
[-37.99415207 430.34045410]
[-49.03750610 440.49154663]
[-60.08086014 450.64260864]
[-58.16654587 466.04116821]
[-65.69831848 479.60772705]
[-79.78005981 486.12573242]
[-94.99705505 483.08880615]
[-105.49805450 471.66479492]
[-107.24520874 456.24636841]
[-99.56671143 442.76229858]
[-85.41508484 436.39746094]
[-70.23193359 439.59927368]
[-59.18857956 429.44818115]
[-48.14522552 419.29711914]
[-37.10187149 409.14602661]
[-26.05851555 398.99496460]
[-15.23114109 388.61383057]
[-4.62453938 378.00723267]
[5.98206234 367.40063477]
[2.26761556 360.38003540]
[0.11311417 352.71878052]
[-0.37810957 344.75967407]
[0.82268804 336.86041260]
[3.66806984 329.37731934]
[8.03625584 322.64941406]
[13.73632336 316.98297119]
[20.51654053 312.63763428]
[28.07548523 309.81448364]
[36.07543945 308.64675903]
[38.58803177 293.85867310]
[41.10062408 279.07061768]
[43.50945663 264.26528931]
[45.81440735 249.44345093]
[48.11935806 234.62159729]
[50.42430878 219.79975891]
[52.62526703 204.96211243]
[54.72212219 190.10939026]
[56.81897736 175.25666809]
[58.91583252 160.40396118]
[61.01268768 145.55123901]
[63.10954285 130.69851685]
[56.50667572 117.22995758]
[43.48137283 109.79077148]
[30.45607376 102.35158539]
[14.63536358 102.22615814]
[7.42087603 89.19540405]
[-5.60442543 81.75621796]
[-18.62972641 74.31703186]
[-31.65502739 66.87783813]
[-46.83359146 71.28087616]
[-60.63940430 63.58833694]
[-64.88171387 48.36407089]
[-57.04364395 34.64036179]
[-41.77537537 30.55924606]
[-28.13530350 38.54197311]
[-24.21583939 53.85253906]
[-11.19053841 61.29172516]
[1.83476293 68.73091888]
[14.86006451 76.17010498]
[29.74911690 75.76342773]
[37.89525986 89.32627869]
[50.92056274 96.76547241]
[63.94586563 104.20465851]
[69.74344635 99.44670868]
[67.29998016 84.64706421]
[81.33860016 89.93080902]
[87.13617706 85.17285919]
[82.38104248 70.94651794]
[76.69782257 63.80772400]
[77.66049194 56.48720169]
[73.10534668 42.19557571]
[68.55019379 27.90394974]
[63.99504089 13.61232281]
[59.43988800 -0.67930400]
[54.88473892 -14.97093105]
[50.32958603 -29.26255798]
[36.79352570 -37.87386322]
[35.22985840 -53.84053421]
[46.83809662 -64.91429901]
[62.71339417 -62.60032272]
[70.67758179 -48.67368317]
[64.62121582 -33.81770706]
[69.17636871 -19.52608109]
[73.73151398 -5.23445511]
[78.28666687 9.05717182]
[82.84181976 23.34879875]
[87.39697266 37.64042664]
[91.95211792 51.93205261]
[96.60737610 66.19138336]
[101.36251831 80.41772461]
[108.78887177 81.46614838]
[110.88572693 66.61343384]
[112.98258209 51.76071548]
[115.07943726 36.90800095]
[117.17652130 22.05531502]
[132.02917480 24.15262985]
[129.93215942 39.00485611]
[127.83530426 53.85757065]
[125.73844910 68.71028900]
[123.64159393 83.56300354]
[131.06794739 84.61143494]
[139.57559204 72.25749207]
[148.08325195 59.90354538]
[156.59089661 47.54960251]
[165.09854126 35.19565964]
[173.60618591 22.84171486]
[182.11383057 10.48777103]
[190.62149048 -1.86617255]
[199.12913513 -14.22011566]
[199.89099121 -30.60155678]
[214.58094788 -37.89109802]
[228.08721924 -28.58988762]
[226.51573181 -12.26621056]
[211.48307800 -5.71246815]
[202.97543335 6.64147568]
[194.46778870 18.99541855]
[185.96012878 31.34936333]
[177.45248413 43.70330811]
[168.94483948 56.05725098]
[160.43719482 68.41119385]
[151.92953491 80.76513672]
[143.42189026 93.11907959]
[152.27267456 105.22956085]
[166.62678528 100.87528992]
[180.98088074 96.52101898]
[195.33499146 92.16674805]
[209.65820312 87.71192932]
[223.94982910 83.15677643]
[238.24147034 78.60162354]
[240.84001160 63.51831818]
[250.15968323 51.37738037]
[264.05886841 44.96871185]
[279.34365845 45.76497269]
[292.50170898 53.58319092]
[300.50936890 66.62679291]
[301.52658081 81.89846802]
[295.31958008 95.88887787]
[283.31469727 105.38314056]
[268.27053833 108.19954681]
[253.64416504 103.69089508]
[242.79661560 92.89324951]
[228.50498962 97.44840240]
[214.21336365 102.00355530]
[208.80010986 107.02484894]
[199.68925476 106.52085114]
[185.33515930 110.87512207]
[170.98104858 115.22939301]
[156.62695312 119.58366394]
[77.96225739 132.79537964]
[75.86540222 147.64808655]
[73.76854706 162.50080872]
[71.67169189 177.35353088]
[69.57483673 192.20623779]
[67.47798157 207.05895996]
[69.37599945 215.98414612]
[65.24615479 222.10470581]
[62.94120789 236.92655945]
[60.63625717 251.74839783]
[58.33130646 266.57025146]
[60.10395813 275.52117920]
[55.88869095 281.58322144]
[53.37609863 296.37127686]
[50.86350250 311.15933228]
[76.32239532 329.72671509]
[80.99629974 364.38958740]
[93.10677338 373.24035645]
[109.46040344 374.46136475]
[116.33508301 389.34997559]
[106.65872955 402.59008789]
[90.38555145 400.56137085]
[84.25598907 385.35083008]
[72.14551544 376.50006104]
[65.68566895 380.31060791]
[73.30680084 393.23031616]
[80.92793274 406.14999390]
[88.54885101 419.06982422]
[75.62890625 426.69052124]
[68.00823975 413.77111816]
[60.38711166 400.85144043]
[52.76598358 387.93176270]
[46.30613708 391.74230957]
[48.19448471 406.62298584]
[50.08283234 421.50363159]
[51.97117615 436.38430786]
[53.85952377 451.26495361]
[62.81914139 457.41113281]
[66.83928680 467.26852417]
[64.81812286 477.49691772]
[57.65847015 484.77130127]
[59.12872696 499.69906616]
[60.59898376 514.62683105]
[62.06924057 529.55462646]
[63.53949738 544.48236084]
[77.56227875 550.74792480]
[86.56059265 563.19488525]
[88.11392975 578.47503662]
[81.80445862 592.47808838]
[69.32938385 601.43731689]
[54.04444885 602.94274902]
[40.06122208 596.58941650]
[31.14111710 584.08636475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 215]
[3 214]
[4 213]
[5 212]
[6 211]
[8 207]
[9 206]
[10 205]
[11 204]
[12 203]
[15 41]
[16 40]
[17 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[51 185]
[52 184]
[53 183]
[54 181]
[55 180]
[56 179]
[57 178]
[58 176]
[59 175]
[60 174]
[61 173]
[62 172]
[63 171]
[64 85]
[65 84]
[66 83]
[68 81]
[69 80]
[70 79]
[71 78]
[89 112]
[90 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[123 144]
[124 143]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
[130 137]
[131 136]
[145 170]
[146 169]
[147 168]
[148 167]
[149 165]
[150 164]
[151 163]
[187 194]
[188 193]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
