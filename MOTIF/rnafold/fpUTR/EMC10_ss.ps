%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCCUCCCGGCGUGCUCCGCGGCUCUUGGCUCACAGCCGUCCCUUCGCUGGUGGGAAGAAGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[99.14435577 195.77731323]
[104.48255920 181.47814941]
[115.50223541 170.91738892]
[110.80207062 156.67279053]
[106.10191345 142.42819214]
[101.40175629 128.18360901]
[96.70159149 113.93901062]
[86.39741516 104.48831940]
[89.05381012 90.76115417]
[84.35365295 76.51655579]
[79.65348816 62.27196121]
[74.95333099 48.02736664]
[70.25317383 33.78277206]
[65.55300903 19.53817558]
[51.30728912 18.19847107]
[38.71601105 11.49435425]
[29.70729446 0.49061868]
[25.64590073 -13.09252739]
[27.12656784 -27.14834023]
[33.88717651 -39.51028442]
[44.85438919 -48.28598022]
[40.80743790 -62.72974014]
[36.76048279 -77.17350006]
[32.71353149 -91.61725616]
[28.66658211 -106.06101990]
[24.61963081 -120.50477600]
[9.72011280 -124.23304749]
[-1.30795050 -134.92311096]
[-5.49806690 -149.69938660]
[-1.72311640 -164.58714294]
[9.00145912 -175.58164978]
[23.79080200 -179.72541809]
[38.66665268 -175.90382385]
[49.62748337 -165.14483643]
[53.72488785 -150.34257507]
[49.85667801 -135.47879028]
[39.06338882 -124.55172729]
[43.11034012 -110.10797119]
[47.15729141 -95.66420746]
[51.20424271 -81.22045135]
[55.25119400 -66.77669525]
[59.29814529 -52.33293152]
[74.93574524 -49.91162872]
[88.04454803 -40.94618988]
[96.02925873 -27.15150452]
[97.28317261 -11.20432568]
[91.51125336 3.77606821]
[79.79760742 14.83801556]
[84.49776459 29.08261108]
[89.19792938 43.32720566]
[93.89808655 57.57180023]
[98.59824371 71.81639862]
[103.29840851 86.06098938]
[113.60258484 95.51168060]
[110.94618988 109.23884583]
[115.64634705 123.48344421]
[120.34651184 137.72804260]
[125.04666901 151.97264099]
[129.74682617 166.21722412]
[144.88757324 168.14607239]
[157.68736267 176.46041870]
[165.60476685 189.50946045]
[167.06777954 204.70230103]
[161.78593445 219.02238464]
[150.80792236 229.62644958]
[136.31346130 234.40905762]
[121.18042755 232.42060852]
[108.41349030 224.05592346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
