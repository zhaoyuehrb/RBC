%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUUUCCCUUUCGGAUUCCCGACGCUGUGGUUGCUGUAAGGGGUCCUCCCUGCGCCACACGGCCGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[-9.82781315 252.79502869]
[-16.93175697 261.12500000]
[-26.01273155 267.20837402]
[-36.38583755 270.59771729]
[-47.27180099 271.04843140]
[-57.85551834 268.53625488]
[-67.34709930 263.25842285]
[-75.04080200 255.61822510]
[-88.43468475 262.37127686]
[-101.82857513 269.12432861]
[-108.19626617 283.84954834]
[-123.71621704 287.91290283]
[-136.48284912 278.19729614]
[-136.70269775 262.15576172]
[-124.20710754 252.09394836]
[-108.58163452 255.73045349]
[-95.18774414 248.97740173]
[-81.79385376 242.22433472]
[-82.43342590 222.53294373]
[-73.48982239 204.89967346]
[-57.10874557 193.70372009]
[-37.29216003 191.76174927]
[-18.92069244 199.61962891]
[-7.66060686 189.70950317]
[3.59947753 179.79937744]
[14.85956192 169.88926697]
[26.11964607 159.97914124]
[37.16684723 149.83226013]
[47.99618912 139.45317078]
[58.82553101 129.07408142]
[69.65486908 118.69500732]
[80.48421478 108.31592560]
[79.26356506 95.52553558]
[85.64981079 84.37654114]
[97.30022430 78.95880890]
[109.94101715 81.25975800]
[121.20110321 71.34963989]
[125.75243378 63.07455826]
[133.15582275 61.27029800]
[144.82635498 51.84700012]
[156.49688721 42.42369843]
[161.39532471 34.34923553]
[168.86860657 32.86081314]
[180.92857361 23.94131470]
[192.98852539 15.02181721]
[196.77604675 -0.56773758]
[211.38604736 -7.19550991]
[225.61099243 0.22275923]
[228.53871155 15.99640942]
[217.92330933 28.02524567]
[201.90802002 27.08177376]
[189.84806824 36.00127029]
[177.78811646 44.92076874]
[165.92019653 54.09423447]
[154.24964905 63.51753616]
[142.57911682 72.94083405]
[131.11122131 82.60972595]
[119.85114288 92.51984406]
[119.26672363 108.87770844]
[107.21179962 119.95020294]
[90.86329651 119.14526367]
[80.03395844 129.52435303]
[69.20461273 139.90342712]
[58.37527466 150.28251648]
[47.54593277 160.66159058]
[43.34990311 169.12239075]
[36.02976608 171.23922729]
[24.76968384 181.14935303]
[13.50959873 191.05946350]
[2.24951386 200.96958923]
[-9.01057053 210.87971497]
[-4.80551243 221.06352234]
[-3.51964521 231.98843384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 18]
[9 17]
[10 16]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[36 58]
[37 57]
[39 56]
[40 55]
[41 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
