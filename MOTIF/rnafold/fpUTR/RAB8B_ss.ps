%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAUUGGCGGGCACGCCCCCUCGCCCGCGGCCCCCUCCCCGCCUCUCUCCACCGCCUCCUCUGGCUCCCCGGUCAGAGGGCCGGAGCGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[88.84062958 108.05142212]
[73.85832214 108.77985382]
[58.87602234 109.50829315]
[43.89371872 110.23672485]
[28.91141701 110.96515656]
[20.36296082 123.78038788]
[6.07464457 129.04321289]
[-8.40162373 124.93206024]
[-17.57146454 113.22513580]
[-32.55376816 113.95356750]
[-41.16212082 117.55327606]
[-48.03143692 114.45502472]
[-63.02947235 114.69792175]
[-78.02750397 114.94081879]
[-93.02553558 115.18371582]
[-101.74594116 118.50278473]
[-108.51132965 115.18371582]
[-123.50936127 114.94081879]
[-138.50740051 114.69792175]
[-146.33229065 127.91407776]
[-159.72477722 135.43316650]
[-175.08236694 135.23258972]
[-188.27392578 127.36631775]
[-195.75099182 113.95032501]
[-195.50228882 98.59344482]
[-187.59469604 85.42660522]
[-174.15533447 77.99162292]
[-158.79931641 78.28846741]
[-145.65731812 86.23728180]
[-138.26449585 99.69989014]
[-123.26646423 99.94278717]
[-108.26843262 100.18568420]
[-93.26843262 100.18568420]
[-78.27040100 99.94278717]
[-63.27236557 99.69989014]
[-48.27433395 99.45699310]
[-33.28219986 98.97126770]
[-18.29989815 98.24283600]
[-10.30899429 85.70156097]
[3.70017242 80.20545197]
[18.43164253 84.05735016]
[28.18298340 95.98285675]
[43.16528702 95.25441742]
[58.14758682 94.52598572]
[73.12989044 93.79755402]
[88.11219025 93.06912231]
[102.98649597 91.13130188]
[117.65533447 87.99678802]
[129.53398132 77.54651642]
[143.59712219 82.45340729]
[158.26596069 79.31889343]
[172.93479919 76.18437958]
[187.60363770 73.04987335]
[193.11689758 63.39581299]
[202.88401794 58.56740189]
[213.46220398 59.99016190]
[221.27438354 66.93296051]
[236.11535645 64.75453186]
[250.95632935 62.57610321]
[256.62451172 58.59978867]
[262.54257202 58.28388214]
[266.82528687 60.76951218]
[281.77615356 59.55630493]
[296.72698975 58.34309769]
[311.67785645 57.12989044]
[326.62872314 55.91668320]
[341.57955933 54.70347977]
[356.53042603 53.49027252]
[371.48129272 52.27706528]
[384.65875244 42.51558304]
[399.59136963 49.29416275]
[400.91772461 65.63958740]
[387.27340698 74.73707581]
[372.69448853 67.22792053]
[357.74362183 68.44113159]
[342.79278564 69.65433502]
[327.84191895 70.86753845]
[312.89105225 72.08074951]
[297.94021606 73.29395294]
[282.98934937 74.50716400]
[268.03848267 75.72036743]
[253.13476562 77.41707611]
[238.29379272 79.59550476]
[223.45281982 81.77393341]
[209.42886353 94.91960907]
[190.73814392 87.71871185]
[176.06930542 90.85321808]
[161.40046692 93.98773193]
[146.73162842 97.12224579]
[135.90219116 107.34832001]
[120.78984833 102.66562653]
[106.12100983 105.80014038]
[104.62548828 108.09187317]
[102.29029846 109.94838715]
[99.25994873 111.07193756]
[95.78083038 111.21743011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[9 38]
[10 37]
[12 36]
[13 35]
[14 34]
[15 33]
[17 32]
[18 31]
[19 30]
[47 92]
[48 91]
[50 89]
[51 88]
[52 87]
[53 86]
[57 84]
[58 83]
[59 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
