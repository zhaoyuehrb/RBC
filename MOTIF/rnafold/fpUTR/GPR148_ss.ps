%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCCUGUGGGGCAGAUCAACACUCAAGGCAGGUGCAGAAUCAACAACCUGUGACAAAGCCAGCCAUCCCUGCCAGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[56.86131668 202.81433105]
[38.81581497 204.84580994]
[21.32190323 200.09147644]
[12.78296947 212.42382812]
[4.24403572 224.75616455]
[-4.29489803 237.08850098]
[-8.34048367 253.55268860]
[-25.28117752 254.22294617]
[-30.61489296 238.12985229]
[-16.62723732 228.54957581]
[-8.08830452 216.21722412]
[0.45062885 203.88488770]
[8.98956203 191.55255127]
[1.29678750 182.17982483]
[-3.82409525 171.17541504]
[-6.04482460 159.23040771]
[-5.21948433 147.09663391]
[-1.39407742 135.53935242]
[5.19599676 125.28897095]
[14.14041710 116.99485016]
[24.87948799 111.18424225]
[36.73915482 108.22872162]
[48.97332001 108.32043457]
[60.81076813 111.45964813]
[71.50379181 117.45430756]
[82.21028137 106.94854736]
[82.45233917 92.46104431]
[92.79447174 82.31281281]
[107.28395081 82.34496307]
[117.99044800 71.83920288]
[128.69692993 61.33343887]
[139.40342712 50.82767868]
[150.10992432 40.32191467]
[160.81640625 29.81615448]
[168.15191650 16.73218346]
[171.52926636 2.11734247]
[174.90660095 -12.49749851]
[178.28393555 -27.11233902]
[181.66128540 -41.72718048]
[170.37611389 -52.14546967]
[165.82734680 -66.81530762]
[169.23857117 -81.79059601]
[179.69218445 -93.04304504]
[194.37620544 -97.54580688]
[209.34072876 -94.08766174]
[220.56036377 -83.59883118]
[225.01707458 -68.90075684]
[221.51203918 -53.94715500]
[210.98808289 -42.76045990]
[196.27612305 -38.34984207]
[192.89878845 -23.73500061]
[189.52143860 -9.12015915]
[186.14410400 5.49468184]
[182.76676941 20.10952187]
[195.14755249 11.64097881]
[209.70916748 8.04109192]
[224.60975647 9.76520634]
[237.96455383 16.59524155]
[248.08433533 27.66727638]
[253.68907166 41.58082962]
[254.06982422 56.57599640]
[249.17843628 70.75606537]
[239.63360596 82.32741547]
[226.64263916 89.82641602]
[211.84875488 92.30452728]
[197.12321472 89.44828796]
[184.32859802 81.61899567]
[175.08329773 69.80694580]
[170.55673218 55.50624084]
[171.32217407 40.52264786]
[160.61567688 51.02840805]
[149.90919495 61.53417206]
[139.20269775 72.03993225]
[128.49620056 82.54569244]
[117.78971863 93.05145264]
[117.54766083 107.53895569]
[107.20552826 117.68718719]
[92.71604919 117.65503693]
[82.00955200 128.16079712]
[89.62165833 144.81866455]
[90.55678558 163.07839966]
[84.70613098 180.36795044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[25 79]
[26 78]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
