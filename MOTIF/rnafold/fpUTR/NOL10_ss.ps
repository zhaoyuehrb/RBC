%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCGUCAUCAGUCGGCGCCAGCGGCCGCACGCCGCGGAGCAGGGGCUCGGAGGUCCCGGGAUUACGGUGCUCGAGCACGCUGGUGGGAAAGGACCCGGGACUUGAACAGUGUUGUGCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-8.66174221 320.37075806]
[-14.20142746 328.41720581]
[-22.27727318 333.80947876]
[-31.71828270 335.81768799]
[-41.17456436 334.19885254]
[-50.17047882 346.20190430]
[-59.16639328 358.20498657]
[-68.16230774 370.20803833]
[-77.15821838 382.21109009]
[-73.42481232 397.39648438]
[-80.37216949 411.40606689]
[-94.71997833 417.62493896]
[-109.69363403 413.11676025]
[-118.22303009 400.01013184]
[-116.28086090 384.49362183]
[-104.78414154 373.89364624]
[-89.16128540 373.21517944]
[-80.16536713 361.21212769]
[-71.16945648 349.20907593]
[-62.17354202 337.20599365]
[-53.17762756 325.20294189]
[-57.91019440 305.41491699]
[-46.53455734 288.20013428]
[-25.90818405 284.69808960]
[-18.14201164 271.86508179]
[-10.37583828 259.03204346]
[-9.59600544 251.60081482]
[-2.25552011 245.98100281]
[5.82569456 233.34399414]
[13.90690899 220.70698547]
[21.98812294 208.06997681]
[30.06933784 195.43298340]
[38.15055084 182.79597473]
[46.23176575 170.15896606]
[46.57013321 155.26820374]
[60.52336502 147.81045532]
[68.60457611 135.17344666]
[76.68579102 122.53644562]
[67.99229431 105.19133759]
[70.75793457 85.98767853]
[59.09685516 76.55268097]
[47.43577576 67.11767578]
[35.77469635 57.68267822]
[19.50078964 55.65981674]
[13.36578178 40.45147324]
[23.68084526 27.70268822]
[39.83472443 30.52831841]
[45.20969391 46.02159882]
[56.87077713 55.45659637]
[68.53185272 64.89159393]
[80.19293976 74.32659912]
[92.17334747 68.53276062]
[105.47203827 68.03908539]
[117.84905243 72.92871094]
[128.77850342 62.65509415]
[139.70794678 52.38147736]
[150.63739014 42.10786438]
[161.56684875 31.83424759]
[172.49629211 21.56063271]
[183.42573547 11.28701782]
[194.35519409 1.01340270]
[205.28463745 -9.26021194]
[216.21408081 -19.53382683]
[225.93463135 -30.95797157]
[234.32594299 -43.39122772]
[242.71725464 -55.82448578]
[251.10856628 -68.25774384]
[248.30633545 -83.58045197]
[256.99343872 -96.07000732]
[271.61856079 -98.64706421]
[280.00988770 -111.08032227]
[288.40118408 -123.51358032]
[296.79251099 -135.94683838]
[297.40057373 -152.33470154]
[312.02145386 -159.76181030]
[325.61444092 -150.58779907]
[324.19622803 -134.25009155]
[309.22576904 -127.55552673]
[300.83444214 -115.12226868]
[292.44314575 -102.68901062]
[284.05181885 -90.25575256]
[287.13311768 -75.72849274]
[278.80023193 -62.99986267]
[263.54180908 -59.86643219]
[255.15051270 -47.43317413]
[246.75920105 -34.99991608]
[238.36788940 -22.56665993]
[252.93132019 -26.15918922]
[267.18103027 -21.47455597]
[276.77182007 -9.94125938]
[278.77911377 4.92382383]
[272.59085083 18.58784485]
[260.09405518 26.88419914]
[245.09934998 27.28305626]
[232.17913818 19.66279221]
[225.27323914 6.34707355]
[226.48770142 -8.60437965]
[215.55824280 1.66923559]
[204.62879944 11.94285107]
[193.69935608 22.21646500]
[182.76991272 32.49008179]
[171.84045410 42.76369476]
[160.91101074 53.03731155]
[149.98156738 63.31092453]
[139.05210876 73.58454132]
[128.12266541 83.85815430]
[132.20617676 96.23091125]
[131.08984375 109.21221161]
[124.95393372 120.70615387]
[114.78909302 128.85699463]
[102.23649597 132.34875488]
[89.32279968 130.61766052]
[81.24158478 143.25466919]
[73.16036987 155.89167786]
[72.24398041 171.68630981]
[58.86877441 178.24017334]
[50.78755951 190.87718201]
[42.70634460 203.51419067]
[34.62512970 216.15119934]
[26.54391670 228.78820801]
[18.46270180 241.42521667]
[10.38148785 254.06222534]
[2.45718813 266.79821777]
[-5.30898476 279.63122559]
[-13.07515717 292.46426392]
[-8.00990772 301.02169800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[24 125]
[25 124]
[26 123]
[28 122]
[29 121]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[36 114]
[37 113]
[38 112]
[40 51]
[41 50]
[42 49]
[43 48]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[64 87]
[65 86]
[66 85]
[67 84]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
