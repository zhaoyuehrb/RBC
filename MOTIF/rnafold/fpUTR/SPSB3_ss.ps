%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGAUUGUUUACGUCUCGCUCCGGGGCGGAAAGUGGGUCAGGGCCGGGCCGGCGGAGCGCGCAGCGGGGGCUGCAGAUUCUUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[98.35451508 300.71563721]
[97.98196411 284.91574097]
[108.95104980 273.53790283]
[108.43892670 258.54666138]
[107.92681122 243.55540466]
[107.41469574 228.56414795]
[106.90258026 213.57289124]
[95.87567902 203.62588501]
[95.14276123 188.42991638]
[105.65086365 176.93132019]
[105.13874817 161.94006348]
[104.62663269 146.94880676]
[104.11451721 131.95756531]
[92.28096771 130.39106750]
[82.14745331 124.71779633]
[75.03463745 115.94973755]
[71.76698303 105.48069000]
[72.58142853 94.86784363]
[77.12524414 85.60085297]
[84.53890991 78.89276886]
[79.51571655 64.75885010]
[74.49252319 50.62493896]
[69.46932983 36.49102402]
[64.44612885 22.35711098]
[59.42293930 8.22319794]
[54.39974213 -5.91071558]
[40.13045883 -17.39373970]
[43.72768021 -34.47753525]
[38.22486496 -48.43171310]
[32.72205353 -62.38588715]
[23.79979134 -62.88781738]
[15.49517918 -66.09400177]
[8.60374546 -71.67469788]
[3.77867675 -79.07381439]
[1.46892989 -87.56427765]
[1.87752581 -96.31943512]
[4.94387960 -104.49357605]
[10.35169697 -111.30358124]
[17.56147194 -116.10398865]
[15.01281548 -130.88587952]
[12.46415997 -145.66777039]
[1.56063306 -157.91706848]
[6.97322035 -173.39724731]
[23.13391685 -176.18362427]
[33.41798401 -163.40982056]
[27.24605370 -148.21643066]
[29.79470825 -133.43453979]
[32.34336472 -118.65264130]
[51.57906723 -108.43137360]
[57.71669769 -87.26245117]
[46.67622757 -67.88870239]
[52.17904282 -53.93452454]
[57.68185425 -39.98035049]
[68.75163269 -34.78572845]
[73.38289642 -23.03369713]
[68.53366089 -10.93391037]
[73.55685425 3.20000386]
[78.58004761 17.33391762]
[83.60324097 31.46783066]
[88.62643433 45.60174561]
[93.64962769 59.73566055]
[98.67282104 73.86957550]
[122.08907318 80.91367340]
[131.60227966 106.28578186]
[146.52363586 107.81974792]
[161.44499207 109.35370636]
[176.36634827 110.88767242]
[191.28770447 112.42163086]
[206.02450562 105.22725677]
[219.47033691 114.61563873]
[217.79328918 130.92880249]
[202.71856689 137.38517761]
[189.75375366 127.34299469]
[174.83238220 125.80902863]
[159.91102600 124.27507019]
[144.98966980 122.74110413]
[130.06831360 121.20714569]
[119.10577393 131.44543457]
[119.61788940 146.43669128]
[120.13000488 161.42794800]
[120.64212036 176.41920471]
[131.91041565 187.17388916]
[132.21621704 202.38444519]
[121.89383698 213.06077576]
[122.40595245 228.05203247]
[122.91806793 243.04328918]
[123.43018341 258.03454590]
[123.94229889 273.02578735]
[135.66226196 283.62854004]
[136.36880493 299.41702271]
[125.64274597 311.02423096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[10 81]
[11 80]
[12 79]
[13 78]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[28 53]
[29 52]
[30 51]
[39 48]
[40 47]
[41 46]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
