%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGGAGACACCCAUUAGAGAACCCAAGCACAAAGACAAAGCAAAUAGUUGGUCCUGCUCGGAGAACUCUUGGGAUUAUUUAAAGAUCUCCUCUCCUCGGAUUUAGAAAGGCAAAGGCGCAGAGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[238.14633179 218.48840332]
[223.83834839 224.24736023]
[208.60375977 226.69798279]
[193.19766235 225.71565247]
[178.38436890 221.34605408]
[164.89942932 213.80294800]
[153.41319275 203.45777893]
[144.49739075 190.82135010]
[138.59672546 176.51861572]
[136.00669861 161.25779724]
[136.85882568 145.79525757]
[141.11387634 130.89810181]
[127.94869232 123.70936584]
[114.78350830 116.52062988]
[101.61832428 109.33189392]
[96.27666473 109.64746094]
[91.16024017 106.89509583]
[88.00965881 101.47492981]
[75.20143890 93.66790771]
[62.39321899 85.86089325]
[49.58499908 78.05387878]
[34.11428833 84.77543640]
[17.83886528 81.02383423]
[7.08698702 68.45969391]
[5.91896629 52.13034821]
[-7.07141447 44.63034821]
[-22.89136505 44.43096161]
[-30.04485512 31.36662674]
[-43.03523636 23.86662674]
[-56.02561569 16.36662674]
[-69.01599884 8.86662674]
[-77.87900543 12.56163979]
[-87.30502319 11.71649361]
[-95.13655090 6.65409565]
[-99.64138031 -1.35229206]
[-99.89517212 -10.39689255]
[-112.31741333 -18.80450630]
[-124.73965454 -27.21212006]
[-137.59396362 -25.54676437]
[-147.78691101 -32.88483810]
[-150.12995911 -44.81439590]
[-162.34860229 -53.51525116]
[-174.56723022 -62.21610260]
[-190.56292725 -60.98435593]
[-201.39324951 -72.82006073]
[-198.75007629 -88.64387512]
[-184.66105652 -96.31713104]
[-169.93405151 -89.95355988]
[-165.86637878 -74.43474579]
[-153.64773560 -65.73388672]
[-141.42910767 -57.03303528]
[-123.93482208 -56.35612869]
[-116.33203888 -39.63436127]
[-103.90979767 -31.22674561]
[-91.48755646 -22.81913185]
[-70.90802002 -23.31329727]
[-61.51599884 -4.12375402]
[-48.52561569 3.37624598]
[-35.53523636 10.87624550]
[-22.54485512 18.37624550]
[-7.65406418 18.03918266]
[0.42858535 31.63996887]
[13.41896629 39.13996887]
[25.11125565 32.58487701]
[38.62385559 32.68873596]
[50.40176010 39.53183365]
[57.29302979 51.40731049]
[57.39201736 65.24565887]
[70.20023346 73.05267334]
[83.00845337 80.85968781]
[95.81667328 88.66670990]
[108.80705261 96.16670990]
[121.97224426 103.35544586]
[135.13742065 110.54417419]
[148.30261230 117.73291016]
[157.89242554 106.68972778]
[169.57427979 97.89923859]
[182.83030701 91.74794006]
[197.07350159 88.50540924]
[211.67376709 88.31249237]
[225.98573303 91.17517090]
[239.37728882 96.96441650]
[251.25758362 105.42199707]
[261.10293579 116.17203522]
[268.48010254 128.73764038]
[273.06515503 142.56213379]
[274.65789795 157.03367615]
[273.19046021 171.51232910]
[268.73019409 185.35841370]
[281.72058105 192.85841370]
[294.71096802 200.35841370]
[307.78967285 207.70330811]
[320.95486450 214.89204407]
[334.12005615 222.08078003]
[347.28521729 229.26951599]
[360.45040894 236.45825195]
[375.44293213 232.23185730]
[388.69189453 239.70980835]
[392.62869263 254.02893066]
[405.79388428 261.21765137]
[420.78640747 256.99127197]
[434.03536987 264.46920776]
[437.97216797 278.78833008]
[451.13735962 285.97708130]
[464.30255127 293.16580200]
[478.26568604 286.39746094]
[493.53445435 289.16220093]
[504.23776245 300.39694214]
[506.25988770 315.78167725]
[498.82336426 329.40069580]
[484.78762817 336.01718140]
[469.54974365 333.08694458]
[458.96896362 321.73675537]
[457.11383057 306.33099365]
[443.94863892 299.14224243]
[430.78344727 291.95352173]
[416.60903931 296.38314819]
[403.15527344 289.28030396]
[398.60516357 274.38284302]
[385.43997192 267.19412231]
[371.26556396 271.62374878]
[357.81179810 264.52090454]
[353.26168823 249.62342834]
[340.09649658 242.43469238]
[326.93130493 235.24595642]
[313.76611328 228.05722046]
[300.60095215 220.86848450]
[293.15017700 220.41961670]
[287.21096802 213.34880066]
[274.22058105 205.84880066]
[261.23019409 198.34880066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 75]
[13 74]
[14 73]
[15 72]
[18 71]
[19 70]
[20 69]
[21 68]
[25 63]
[26 62]
[28 60]
[29 59]
[30 58]
[31 57]
[36 55]
[37 54]
[38 53]
[41 51]
[42 50]
[43 49]
[89 131]
[90 130]
[91 129]
[92 127]
[93 126]
[94 125]
[95 124]
[96 123]
[99 120]
[100 119]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
