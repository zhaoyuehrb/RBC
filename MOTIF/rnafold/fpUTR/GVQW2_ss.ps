%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAUUUCAUUGCUUCCCCUGUCCUUCCUUUAGCUGUAACUCCGGCGGGCGUGUUGGGUGUGUCGUUUUAGGCUCUGUGACCCAGGAGCAAGACGCAAUAAGCGGGUGCAGUGGAGGUAGAAACGGGAA\
) } def
/len { sequence length } bind def

/coor [
[22.52213097 444.33755493]
[17.20305824 458.36279297]
[11.88398552 472.38806152]
[6.56491184 486.41329956]
[13.27893066 500.72055054]
[7.83120012 515.55621338]
[-6.54623795 522.11859131]
[-21.32350540 516.51434326]
[-27.73350906 502.06832886]
[-21.97331047 487.35113525]
[-7.46033192 481.09420776]
[-2.14125848 467.06896973]
[3.17781496 453.04373169]
[8.49688816 439.01849365]
[13.47550583 424.86880493]
[18.11076164 410.60296631]
[22.74601555 396.33712769]
[27.38127136 382.07125854]
[31.32188225 367.59814453]
[34.55864334 352.95150757]
[37.79540634 338.30490112]
[36.15021515 331.02108765]
[41.29139328 323.34548950]
[44.88113022 308.78137207]
[48.47086334 294.21725464]
[52.06060028 279.65310669]
[55.65033340 265.08898926]
[59.06383133 250.48254395]
[62.30059433 235.83593750]
[57.49192047 221.73890686]
[68.02479553 209.93344116]
[71.26155853 195.28683472]
[66.45288849 181.18980408]
[76.98576355 169.38433838]
[80.22252655 154.73773193]
[83.45928955 140.09111023]
[86.69605255 125.44449615]
[74.87442780 116.67083740]
[68.51409149 102.60629272]
[69.84547424 86.51097107]
[79.22041321 72.49178314]
[69.00517273 61.50775528]
[58.78993607 50.52372360]
[48.57469940 39.53969574]
[38.35946274 28.55566597]
[28.14422417 17.57163620]
[17.92898560 6.58760548]
[2.10249710 2.29175949]
[-1.82827914 -13.62932777]
[10.18030262 -24.79740715]
[25.77484322 -19.72371674]
[28.91301537 -3.62763238]
[39.12825394 7.35639763]
[49.34349060 18.34042740]
[59.55873108 29.32445717]
[69.77396393 40.30848694]
[79.98920441 51.29251862]
[90.20444489 62.27654648]
[105.17707825 61.37086868]
[113.99385834 49.23561478]
[122.81063080 37.10036087]
[131.62741089 24.96510506]
[140.44419861 12.82985020]
[149.26097107 0.69459552]
[144.98973083 -7.44651127]
[143.65966797 -16.49905205]
[145.39198303 -25.43867874]
[149.96301270 -33.26348877]
[156.83261108 -39.10631943]
[165.20782471 -42.33080673]
[174.13444519 -42.60063553]
[182.60562134 -39.91436768]
[192.82086182 -50.89839935]
[203.03610229 -61.88242722]
[213.25134277 -72.86645508]
[223.46658325 -83.85048676]
[220.35328674 -99.05203247]
[226.80046082 -113.16633606]
[240.32904053 -120.76615143]
[255.73699951 -118.92920685]
[267.09967041 -108.36183167]
[270.04788208 -93.12740326]
[263.44796753 -79.08386993]
[249.83773804 -71.63126373]
[234.45060730 -73.63525391]
[224.23536682 -62.65121841]
[214.02012634 -51.66719055]
[203.80488586 -40.68315887]
[193.58966064 -29.69913101]
[196.53128052 -8.74003983]
[183.05790710 7.93957567]
[161.39622498 9.51137447]
[152.57945251 21.64662933]
[143.76266479 33.78188324]
[134.94589233 45.91713715]
[126.12911224 58.05239487]
[117.31233215 70.18765259]
[128.73471069 83.12747192]
[132.16502380 99.44664001]
[127.27166748 114.77620697]
[115.87702942 125.29506683]
[101.34266663 128.68125916]
[98.10590363 143.32788086]
[94.86914062 157.97448730]
[91.63237762 172.62110901]
[96.20954132 187.76574707]
[85.90818024 198.52359009]
[82.67141724 213.17021179]
[87.24857330 228.31484985]
[76.94721222 239.07269287]
[73.71044922 253.71931458]
[74.91738129 262.87844849]
[70.21446228 268.67871094]
[66.62472534 283.24285889]
[63.03499222 297.80697632]
[59.44525528 312.37109375]
[55.85552216 326.93524170]
[52.44202423 341.54165649]
[49.20526123 356.18829346]
[45.96849823 370.83489990]
[47.52043152 375.13964844]
[47.55237961 379.28298950]
[46.31551361 382.78915405]
[44.19426346 385.31979370]
[41.64711761 386.70651245]
[37.01186371 400.97238159]
[32.37660980 415.23822021]
[27.74135399 429.50405884]
[28.76564026 436.20230103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[15 128]
[16 127]
[17 126]
[18 125]
[19 120]
[20 119]
[21 118]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[28 111]
[29 110]
[31 108]
[32 107]
[34 105]
[35 104]
[36 103]
[37 102]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
