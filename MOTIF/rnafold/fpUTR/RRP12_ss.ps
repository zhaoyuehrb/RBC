%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAUGCACACGAAUCCGGAAGUGACGCCAGAAGAAGAGGAAGUGAAGGCUACAGGGUAUCCACGUGGGUUCUGAGCGUGUUUCUACGUCCCUGGAAGCCGGUCAUUUAAGCUCAUUCCUCGCCACGGCUUAGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[31.18044853 377.49771118]
[30.84711647 392.55880737]
[27.17022514 407.16799927]
[20.33420944 420.59246826]
[10.68195820 432.15887451]
[-1.30237484 441.28704834]
[-15.01766014 447.51913452]
[-29.77594566 450.54248047]
[-44.83695984 450.20550537]
[-59.44525146 446.52508545]
[-72.86807251 439.68582153]
[-84.43214417 430.03076172]
[-93.55741119 418.04421997]
[-99.78615570 404.32742310]
[-102.80594635 389.56838989]
[-102.46531677 374.50747681]
[-98.78134918 359.90008545]
[-91.93882751 346.47891235]
[-82.28096771 334.91717529]
[-70.29221344 325.79483032]
[-56.57390976 319.56939697]
[-41.81416321 316.55319214]
[-26.75331306 316.89746094]
[-12.14680672 320.58496094]
[-5.33694887 307.21987915]
[1.47290862 293.85476685]
[8.28276634 280.48968506]
[14.63898277 266.90295410]
[20.53435898 253.11004639]
[26.42973328 239.31713867]
[17.05779457 230.19621277]
[11.35210037 218.39326477]
[10.01907444 205.31927490]
[13.24095154 192.54547119]
[20.65122414 181.61456299]
[31.37619781 173.85441589]
[44.13795090 170.21673584]
[57.40659714 171.16036987]
[63.91485214 157.64584351]
[70.42311096 144.13130188]
[76.93136597 130.61677551]
[83.43962097 117.10224152]
[89.94787598 103.58770752]
[95.06060028 89.48593903]
[98.72570801 74.94058990]
[102.39081573 60.39525223]
[106.05592346 45.84990692]
[100.59234619 28.30500221]
[113.20617676 16.15498543]
[116.54399109 1.53106594]
[119.88180542 -13.09285259]
[123.21961975 -27.71677208]
[117.36373901 -45.13466644]
[129.70176697 -57.56465530]
[132.71061707 -72.25978851]
[135.71945190 -86.95491791]
[138.72830200 -101.65004730]
[141.73713684 -116.34517670]
[127.78949738 -110.82581329]
[114.66521454 -118.08895111]
[111.93452454 -132.83830261]
[121.58864594 -144.31861877]
[136.58779907 -144.15846252]
[145.99449158 -132.47489929]
[150.62974548 -146.74075317]
[155.26499939 -161.00659180]
[159.90025330 -175.27244568]
[164.53550720 -189.53828430]
[169.17076111 -203.80413818]
[173.80601501 -218.06999207]
[162.46054077 -228.22871399]
[156.23377991 -242.12646484]
[156.20455933 -257.35534668]
[162.37794495 -271.27688599]
[173.68437195 -281.47906494]
[188.16491699 -286.19433594]
[203.31074524 -284.60571289]
[216.49775696 -276.98843384]
[225.44120789 -264.66226196]
[228.59159851 -249.76277161]
[225.40310669 -234.87138367]
[216.42816162 -222.56813049]
[203.22171021 -214.98461914]
[188.07186890 -213.43473816]
[183.43661499 -199.16888428]
[178.80136108 -184.90303040]
[174.16610718 -170.63719177]
[169.53085327 -156.37133789]
[164.89559937 -142.10549927]
[160.26034546 -127.83964539]
[156.43226624 -113.33634186]
[153.42343140 -98.64120483]
[150.41458130 -83.94607544]
[147.40574646 -69.25094604]
[144.39689636 -54.55581665]
[150.81188965 -44.23949432]
[148.36680603 -31.92987251]
[137.84353638 -24.37895775]
[134.50572205 -9.75503826]
[131.16790771 4.86887980]
[127.83009338 19.49279785]
[134.01199341 29.95046043]
[131.29132080 42.20212173]
[120.60126495 49.51501465]
[116.93615723 64.06035614]
[113.27104950 78.60569763]
[109.60594940 93.15103912]
[121.95317841 84.63365173]
[136.93910217 83.98419952]
[149.97691345 91.40145874]
[157.07600403 104.61519623]
[156.06355286 119.58098602]
[147.24940491 131.71815491]
[133.33140564 137.31181335]
[118.56948853 134.64987183]
[107.48194885 124.54707336]
[103.46240997 110.09597015]
[96.95415497 123.61049652]
[90.44589996 137.12503052]
[83.93764496 150.63957214]
[77.42938995 164.15409851]
[70.92112732 177.66862488]
[81.85094452 190.82057190]
[85.95962524 207.36369324]
[82.47572327 223.99339294]
[72.13957977 237.40913391]
[57.04660034 244.96958923]
[40.22265244 245.21250916]
[34.32727432 259.00543213]
[28.43190002 272.79833984]
[29.08558846 278.14453125]
[27.70929718 282.72067261]
[24.95624161 285.86965942]
[21.64786339 287.29953003]
[14.83800602 300.66464233]
[8.02814865 314.02972412]
[1.21829140 327.39483643]
[12.78703785 337.04428101]
[21.91811180 349.02639771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 137]
[25 136]
[26 135]
[27 134]
[28 130]
[29 129]
[30 128]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[44 107]
[45 106]
[46 105]
[47 104]
[49 101]
[50 100]
[51 99]
[52 98]
[54 95]
[55 94]
[56 93]
[57 92]
[58 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
