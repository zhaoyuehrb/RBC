%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUGGCUAGAGAAGCCGCAGCCCGCAGUGUCCGACCCAGUCGUCCCGCGCCGGAGCCGGCCCCGUAGCGUGCC\
) } def
/len { sequence length } bind def

/coor [
[71.46017456 360.43377686]
[56.87262726 356.06076050]
[45.32913589 346.12759399]
[38.82968521 332.35528564]
[38.50034332 317.12991333]
[44.39817047 303.08941650]
[55.50133133 292.66638184]
[69.88613892 287.66665649]
[71.10877228 272.71658325]
[72.33141327 257.76647949]
[73.55405426 242.81639099]
[61.72038651 235.70260620]
[54.12078476 224.09506226]
[52.31594086 210.27162170]
[56.72250748 196.97531128]
[66.51876831 186.87001038]
[79.79717255 182.00682068]
[81.62859344 167.11904907]
[83.46000671 152.23126221]
[85.29141998 137.34349060]
[82.92308044 132.89680481]
[83.53220367 126.88175964]
[87.92737579 121.33540344]
[90.96618652 106.64644623]
[93.70473480 91.89855194]
[96.14187622 77.09786224]
[98.57901764 62.29717636]
[89.63809967 49.54187775]
[92.32054901 34.56659317]
[104.53587341 26.12139511]
[106.97301483 11.32070827]
[109.41015625 -3.47997880]
[98.97488403 -17.34910393]
[101.60694885 -34.16692352]
[115.23538208 -43.79890060]
[117.06679535 -58.68667984]
[118.89820862 -73.57445526]
[120.72962952 -88.46223450]
[116.66239166 -104.92108917]
[131.35211182 -113.38564301]
[143.55236816 -101.61322784]
[135.61740112 -86.63082123]
[133.78599548 -71.74304199]
[131.95457458 -56.85526657]
[130.12315369 -41.96748734]
[139.48678589 -32.87947845]
[141.85421753 -19.84771729]
[136.11790466 -7.69183159]
[124.21084595 -1.04283667]
[121.77370453 13.75785065]
[119.33656311 28.55853653]
[128.19912720 40.47451019]
[125.93836975 55.51922989]
[113.37970734 64.73431396]
[110.94256592 79.53500366]
[108.50542450 94.33569336]
[110.44126892 102.41606903]
[105.65515137 109.68525696]
[102.61634064 124.37422180]
[100.17919922 139.17491150]
[98.34778595 154.06268311]
[96.51636505 168.95045471]
[94.68495178 183.83824158]
[107.90726471 193.53881836]
[114.47189331 208.46524048]
[112.70550537 224.58203125]
[103.17356873 237.58239746]
[88.50414276 244.03903198]
[87.28150177 258.98913574]
[86.05886078 273.93920898]
[84.83622742 288.88931274]
[98.21755981 296.15979004]
[107.47969055 308.24832153]
[111.01789856 323.06051636]
[108.21917725 338.03005981]
[99.56841278 350.56335449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 71]
[9 70]
[10 69]
[11 68]
[17 63]
[18 62]
[19 61]
[20 60]
[23 59]
[24 58]
[25 56]
[26 55]
[27 54]
[30 51]
[31 50]
[32 49]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
