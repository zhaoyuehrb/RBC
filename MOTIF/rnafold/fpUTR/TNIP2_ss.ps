%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUCCGGGAAGGGCGGCAGCCGGCGGGGCCCGGGCGCGGAAGUUGCCGGCGGCCGCGCGGCCUCCCGGGCGGGCCUACAGCC\
) } def
/len { sequence length } bind def

/coor [
[132.61502075 270.93991089]
[128.90542603 256.40585327]
[115.01957703 251.08409119]
[106.83317566 238.45686340]
[107.66156769 223.25268555]
[117.39633179 211.31364441]
[113.68672943 196.77958679]
[108.87290955 190.94590759]
[110.11399841 181.66050720]
[106.92552185 167.00331116]
[103.73704529 152.34609985]
[100.54856110 137.68890381]
[97.36008453 123.03170013]
[94.17160797 108.37449646]
[89.41855621 101.61932373]
[91.14078522 93.13753510]
[88.47748566 78.37586975]
[84.76789093 63.84180832]
[80.03089905 49.60941696]
[75.29389954 35.37702942]
[70.55690765 21.14464188]
[65.81991577 6.91225243]
[54.12047577 -3.73827243]
[57.44255829 -18.25767326]
[52.70556641 -32.49006271]
[47.96857071 -46.72245026]
[43.23157883 -60.95484161]
[38.49458313 -75.18723297]
[33.75759125 -89.41961670]
[29.02059555 -103.65200806]
[24.28360176 -117.88439178]
[9.63946724 -122.66513824]
[0.72258008 -135.00784302]
[0.78262097 -150.05645752]
[9.58698750 -162.04064941]
[4.84999371 -176.27304077]
[0.11299999 -190.50543213]
[-12.50447655 -200.98069763]
[-9.47502899 -217.09761047]
[6.08490658 -222.27644348]
[18.16860390 -211.18968201]
[14.34538841 -195.24243164]
[19.08238220 -181.01004028]
[23.81937599 -166.77764893]
[38.04949951 -162.46005249]
[47.11585617 -150.44902039]
[47.37422943 -135.22447205]
[38.51599121 -122.62139130]
[43.25298309 -108.38899994]
[47.98997879 -94.15660858]
[52.72697067 -79.92422485]
[57.46396637 -65.69183350]
[62.20095825 -51.45944595]
[66.93795013 -37.22705841]
[71.67494965 -22.99466705]
[83.03556824 -13.36213875]
[80.05229950 2.17525864]
[84.78929901 16.40764809]
[89.52629089 30.64003563]
[94.26328278 44.87242508]
[99.00027466 59.10481262]
[101.70403290 60.45807266]
[103.96596527 63.08728790]
[105.24650574 66.80181122]
[105.09738922 71.20001221]
[103.23915863 75.71257019]
[105.90245056 90.47423553]
[108.82881165 105.18601990]
[112.01728821 119.84321594]
[115.20576477 134.50042725]
[118.39424896 149.15762329]
[121.58272552 163.81483459]
[124.77120209 178.47203064]
[128.22079468 193.06999207]
[131.93038940 207.60404968]
[146.19615173 213.41731262]
[154.20980835 226.36470032]
[153.07637024 241.37066650]
[143.43948364 252.69624329]
[147.14907837 267.23031616]
[161.61753845 272.83776855]
[169.99845886 285.89685059]
[169.06922913 301.38607788]
[159.18713379 313.34951782]
[144.15206909 317.18698120]
[129.74530029 311.42291260]
[121.50653076 298.27368164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[6 75]
[7 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[16 67]
[17 66]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
