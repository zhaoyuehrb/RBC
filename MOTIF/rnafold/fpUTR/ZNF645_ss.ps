%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUUAGCAGAAGAAUUCCUUUAAACGUCAUUUUUGAGGAAGUAGACAAACCUAAAUAUGUGUCUGAACUCCAAGGAAU\
) } def
/len { sequence length } bind def

/coor [
[66.39562225 227.31619263]
[65.08646393 242.43739319]
[58.39979172 256.06283569]
[47.23992538 266.34982300]
[33.11614227 271.90707397]
[17.93857193 271.98306274]
[3.75985312 266.56750488]
[-7.50245714 256.39279175]
[-14.32522488 242.83497620]
[-15.78572559 227.72764587]
[-11.68644047 213.11393738]
[-2.58176231 200.97024536]
[10.29697514 192.93890381]
[25.20802879 190.10606384]
[40.13479996 192.85487366]
[47.97227859 180.06527710]
[55.80975723 167.27566528]
[63.64723587 154.48606873]
[71.48471069 141.69645691]
[79.32218933 128.90686035]
[87.15966797 116.11725616]
[75.25305939 125.24044037]
[60.30243683 124.02428436]
[50.02685547 113.09668732]
[49.73161316 98.09959412]
[59.56914520 86.77603912]
[74.46031189 84.97238922]
[86.71791077 93.62159729]
[78.38436127 81.14955139]
[70.05080414 68.67750549]
[55.11154938 61.91358185]
[53.76913834 45.56946945]
[67.40453339 36.45859146]
[81.99080658 43.95343781]
[82.52285004 60.34395218]
[90.85639954 72.81599426]
[99.18995667 85.28804016]
[113.54405975 89.64231110]
[127.40225220 83.90206146]
[141.26045227 78.16181183]
[147.54176331 61.97302246]
[163.22853088 55.34255981]
[178.60108948 61.85804367]
[192.22323608 55.57814789]
[205.84538269 49.29825211]
[219.46752930 43.01835632]
[233.08967590 36.73846054]
[246.71182251 30.45856285]
[246.91717529 15.19682693]
[253.73170471 1.53940845]
[265.80236816 -7.80200243]
[280.73251343 -10.97266102]
[295.55780029 -7.34303188]
[307.33459473 2.36622047]
[313.72463989 16.22731590]
[313.45919800 31.48812485]
[306.59094238 45.11860275]
[294.48358154 54.41240692]
[279.54107666 57.52424622]
[264.73019409 53.83626556]
[252.99172974 44.08071136]
[239.36958313 50.36060715]
[225.74742126 56.64050293]
[212.12527466 62.92039871]
[198.50312805 69.20029449]
[184.88098145 75.48019409]
[182.08749390 88.21656036]
[172.26605225 97.08863831]
[158.92233276 98.62239075]
[147.00070190 92.02000427]
[133.14250183 97.76025391]
[119.28431702 103.50050354]
[99.94927216 123.95473480]
[92.11179352 136.74433899]
[84.27431488 149.53393555]
[76.43683624 162.32354736]
[68.59935760 175.11314392]
[60.76187897 187.90275574]
[52.92440414 200.69235229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[28 37]
[29 36]
[30 35]
[38 72]
[39 71]
[40 70]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
