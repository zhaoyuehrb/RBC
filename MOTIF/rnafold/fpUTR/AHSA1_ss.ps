%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUUAAGGAGGGGAGGGGGUGGAGGGAAAAGCAAGCCAGGAGGUGCUUGCGGCCGCUUCUAGUAGUUUCCAGGCGCUGCCGGGCGGCUGGCACUAAGCGGUCCUGAGGCUGUGGCUACGGCUGCUCCGGAGCUGGUGGCGCCGCGAUAGGAGAGCCG\
) } def
/len { sequence length } bind def

/coor [
[79.76759338 92.34642029]
[64.88808441 94.24384308]
[50.00857162 96.14125824]
[35.12906265 98.03868103]
[20.24955368 99.93610382]
[5.37004423 101.83352661]
[-9.50946522 103.73094177]
[-24.38897514 105.62836456]
[-28.64644623 115.50685883]
[-36.57855988 122.65216827]
[-46.69183350 125.80998993]
[-57.11965179 124.46833038]
[-65.96675110 118.93923187]
[-71.65365601 110.28956604]
[-86.61869049 111.31320190]
[-101.58372498 112.33683777]
[-116.54875183 113.36047363]
[-131.51377869 114.38410950]
[-144.75376892 123.04512787]
[-157.97938538 116.19440460]
[-172.94441223 117.21804047]
[-174.91250610 123.67888641]
[-178.22682190 129.54598999]
[-182.72389221 134.54357910]
[-188.18484497 138.43846130]
[-194.34608459 141.05082703]
[-200.91194153 142.26258850]
[-207.56890869 142.02268982]
[-214.00061035 140.34924316]
[-219.90283203 137.32832336]
[-224.99790955 133.10957336]
[-229.04776001 127.89878845]
[-231.86506653 121.94792938]
[-233.32188416 115.54288483]
[-248.20138550 113.64546204]
[-263.08090210 111.74804688]
[-277.96041870 109.85062408]
[-292.83990479 107.95320129]
[-307.71942139 106.05577850]
[-318.25637817 117.44667053]
[-333.48284912 120.43560791]
[-347.54400635 113.87327576]
[-355.03298950 100.28303528]
[-353.07015991 84.89060211]
[-342.41024780 73.61469269]
[-327.15225220 70.79110718]
[-313.16311646 77.50558472]
[-305.82202148 91.17626953]
[-290.94250488 93.07369232]
[-276.06298828 94.97111511]
[-261.18347168 96.86853790]
[-246.30397034 98.76595306]
[-231.42446899 100.66337585]
[-214.61137390 83.51140594]
[-190.35511780 84.03244781]
[-173.96804810 102.25301361]
[-159.00302124 101.22937775]
[-146.83343506 92.64157104]
[-132.53741455 99.41908264]
[-117.57238770 98.39544678]
[-102.60736084 97.37181091]
[-87.64232635 96.34816742]
[-72.67729187 95.32453156]
[-61.05713272 79.74195862]
[-41.43042755 77.61713409]
[-26.28639412 90.74885559]
[-11.40688515 88.85143280]
[3.47262359 86.95401764]
[18.35213280 85.05659485]
[33.23164368 83.15917206]
[48.11115265 81.26174927]
[62.99066162 79.36433411]
[77.87017059 77.46691132]
[90.76188660 69.79856110]
[99.53124237 57.62899399]
[101.32183838 41.90943909]
[115.03981018 36.10715103]
[123.80916595 23.93758202]
[132.57852173 11.76801109]
[134.36911011 -3.95154190]
[148.08708191 -9.75382996]
[156.85643005 -21.92340088]
[165.62579346 -34.09297180]
[174.03523254 -46.51396942]
[182.07757568 -59.17575073]
[190.11993408 -71.83753204]
[198.16227722 -84.49931335]
[199.03012085 -100.29669952]
[212.38513184 -106.89162445]
[220.42747498 -119.55340576]
[228.46981812 -132.21517944]
[223.57513428 -147.06698608]
[229.42012024 -161.57113647]
[243.24496460 -168.87919617]
[258.52197266 -165.54054260]
[268.03784180 -153.13157654]
[267.29943848 -137.51144409]
[256.65542603 -126.05547333]
[241.13159180 -124.17284393]
[233.08924866 -111.51106262]
[225.04690552 -98.84928131]
[224.75430298 -83.95755005]
[210.82405090 -76.45697021]
[202.78170776 -63.79518509]
[194.73936462 -51.13340378]
[186.69702148 -38.47162247]
[187.13117981 -34.92438507]
[185.83659363 -30.99071693]
[182.65093994 -27.50037956]
[177.79536438 -25.32361794]
[169.02600098 -13.15404797]
[160.25665283 -0.98447734]
[159.09329224 13.86462593]
[144.74809265 20.53736305]
[135.97872925 32.70693588]
[127.20938110 44.87650299]
[126.04602814 59.72560883]
[111.70081329 66.39834595]
[102.93145752 78.56791687]
[116.31510162 89.73372650]
[116.10648346 105.18709564]
[126.86716461 115.63734436]
[137.62785339 126.08758545]
[148.38853455 136.53782654]
[159.14921570 146.98808289]
[167.53076172 150.74781799]
[170.01541138 157.74876404]
[180.57014465 168.40698242]
[191.12487793 179.06520081]
[201.67961121 189.72341919]
[218.33650208 186.92550659]
[233.23960876 194.51510620]
[240.62501526 209.33534241]
[237.76861572 225.47718811]
[248.52929688 235.92742920]
[256.91082764 239.68716431]
[259.39547729 246.68812561]
[269.95022583 257.34634399]
[280.50497437 268.00454712]
[295.94635010 275.00451660]
[293.49456787 291.78024292]
[276.69570923 294.06823730]
[269.84674072 278.55929565]
[259.29202271 267.90106201]
[248.73727417 257.24285889]
[238.07905579 246.68812561]
[227.31837463 236.23786926]
[214.40399170 239.73161316]
[201.34820557 236.34832764]
[191.60049438 226.87106323]
[187.79098511 213.70735168]
[191.02139282 200.27815247]
[180.46665955 189.61993408]
[169.91192627 178.96171570]
[159.35719299 168.30349731]
[148.69897461 157.74876404]
[137.93829346 147.29852295]
[127.17760468 136.84826660]
[116.41691589 126.39802551]
[105.65623474 115.94777679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[20 57]
[21 56]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[74 119]
[75 118]
[77 116]
[78 115]
[79 114]
[81 112]
[82 111]
[83 110]
[84 106]
[85 105]
[86 104]
[87 103]
[89 101]
[90 100]
[91 99]
[121 160]
[122 159]
[123 158]
[124 157]
[125 156]
[127 155]
[128 154]
[129 153]
[130 152]
[134 147]
[135 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
