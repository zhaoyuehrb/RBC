%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGGACGGGGCGGGGCCUCGCGCUAACGGUCGCGCGGCCGUCGCACCUGCACGAGGCUGUGGCCCGAGCGUCCUGUGGAGAAGCCGCGAAGCGCGGGCGACCCGGGGGUCGGGCGGGCCAGGUCCGCGAGGCCGCGGCGGCAGCUGUGCAGGCCCGGGGAGCAGCCGGCCGGGCGAGCCUCGGAUUAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[93.58715057 113.87961578]
[81.14859772 122.26308441]
[68.71005249 130.64654541]
[70.81780243 145.72363281]
[66.18924713 160.16189575]
[55.79343414 171.11393738]
[41.73115921 176.44436646]
[26.81057930 175.14599609]
[13.98647308 167.52970886]
[1.54792249 175.91317749]
[-10.89062786 184.29663086]
[-23.32917786 192.68009949]
[-35.70014191 201.16297913]
[-48.00272751 209.74473572]
[-60.30530930 218.32647705]
[-72.60789490 226.90823364]
[-84.84130859 235.58830261]
[-97.00476074 244.36613464]
[-109.16822052 253.14396667]
[-121.33168030 261.92178345]
[-127.99441528 276.27166748]
[-142.84269714 277.44534302]
[-155.00616455 286.22317505]
[-167.16961670 295.00100708]
[-179.33306885 303.77883911]
[-191.42579651 312.65386963]
[-203.44699097 321.62554932]
[-212.52430725 335.94470215]
[-228.79673767 331.18606567]
[-228.72872925 314.23226929]
[-212.41865540 309.60433960]
[-200.39744568 300.63269043]
[-196.91293335 294.10437012]
[-188.11090088 291.61538696]
[-175.94744873 282.83755493]
[-163.78399658 274.05972290]
[-151.62052917 265.28189087]
[-145.82780457 251.55989075]
[-130.10951233 249.75833130]
[-117.94605255 240.98049927]
[-105.78259277 232.20266724]
[-93.61914062 223.42483521]
[-90.03043365 216.95323181]
[-81.18964386 214.60565186]
[-68.88706207 206.02389526]
[-56.58447647 197.44213867]
[-44.28189468 188.86039734]
[-40.58992386 182.44712830]
[-31.71264267 180.24154663]
[-19.27409172 171.85809326]
[-6.83554125 163.47462463]
[5.60300922 155.09115601]
[3.35581303 140.34614563]
[7.75152969 126.02877045]
[17.96949577 114.99454498]
[32.02233505 109.46842957]
[47.14234543 110.59634399]
[60.32658386 118.20799255]
[72.76513672 109.82453156]
[85.20368958 101.44107056]
[85.62905884 96.11698914]
[87.91053772 91.27982330]
[80.97246552 77.98083496]
[67.72946930 69.32440948]
[68.70250702 54.46162033]
[61.76443100 41.16263199]
[54.82635498 27.86364174]
[47.88828278 14.56465244]
[40.95020676 1.26566315]
[27.70721436 -7.39076233]
[28.68025017 -22.25355148]
[21.74217415 -35.55253983]
[9.90917397 -36.84473801]
[0.27121171 -43.62398911]
[-4.83943748 -54.10813904]
[-4.25483370 -65.63683319]
[1.76379895 -75.34629822]
[-4.74445724 -88.86083221]
[-11.25271320 -102.37536621]
[-17.76096916 -115.88990021]
[-24.26922607 -129.40443420]
[-38.87615585 -136.03897095]
[-42.65645599 -151.63027954]
[-32.71020126 -164.21804810]
[-16.66731071 -164.14599609]
[-6.83451462 -151.46942139]
[-10.75469208 -135.91268921]
[-4.24643612 -122.39815521]
[2.26181984 -108.88362122]
[8.77007580 -95.36908722]
[15.27833176 -81.85456085]
[32.88347626 -76.87001038]
[41.41180801 -60.32211304]
[35.04116440 -42.49061584]
[41.97924042 -29.19162560]
[54.72597504 -21.48643112]
[54.24919891 -5.67241144]
[61.18727112 7.62657833]
[68.12534332 20.92556763]
[75.06342316 34.22455597]
[82.00149536 47.52354813]
[94.74822998 55.22874069]
[94.27145386 71.04276276]
[101.20952606 84.34175110]
[114.21990204 91.80702209]
[129.20256042 91.08601379]
[144.18522644 90.36500549]
[159.16787720 89.64400482]
[174.15054321 88.92299652]
[189.13320923 88.20198822]
[202.54551697 79.81030273]
[215.62998962 86.92689514]
[230.61265564 86.20588684]
[245.59530640 85.48487854]
[260.55630493 84.40389252]
[275.48699951 82.96354675]
[290.41769409 81.52320099]
[303.41113281 72.49652100]
[316.82254028 78.97595978]
[331.75323486 77.53561401]
[346.68392944 76.09526825]
[352.77862549 63.72435760]
[364.10217285 56.04399872]
[377.63406372 54.97351074]
[389.82821655 60.68605423]
[397.54202271 71.59123993]
[412.49389648 70.39038086]
[427.44573975 69.18952942]
[440.58218384 60.37226486]
[453.88803101 67.06582642]
[468.83990479 65.86496735]
[477.15557861 62.05446625]
[484.04067993 64.76665497]
[499.00985718 63.80560303]
[513.97906494 62.84454727]
[528.94824219 61.88349533]
[543.88995361 60.56285477]
[558.79565430 58.88338852]
[573.70135498 57.20391846]
[588.60705566 55.52445221]
[603.51269531 53.84498596]
[616.37896729 43.67678833]
[631.51593018 49.98577881]
[633.35205078 66.28181458]
[619.99847412 75.80092621]
[605.19219971 68.75067139]
[590.28649902 70.43013763]
[575.38079834 72.10960388]
[560.47515869 73.78907013]
[545.56945801 75.46853638]
[543.09265137 77.99452209]
[539.26440430 79.44022369]
[534.60864258 79.18137360]
[529.90930176 76.85267639]
[514.94012451 77.81372833]
[499.97091675 78.77478027]
[485.00173950 79.73583984]
[470.04074097 80.81682587]
[455.08889771 82.01767731]
[443.02188110 90.74904633]
[428.64657593 84.14138031]
[413.69473267 85.34223938]
[398.74288940 86.54309082]
[390.64639282 100.81675720]
[375.48745728 107.52319336]
[359.15515137 103.84058380]
[348.12426758 91.02595520]
[333.19357300 92.46630096]
[318.26287842 93.90664673]
[306.33740234 102.83029938]
[291.85803223 96.45388794]
[276.92733765 97.89423370]
[261.99664307 99.33457947]
[259.47967529 101.82054138]
[255.62875366 103.20469666]
[250.97776794 102.87126923]
[246.31631470 100.46754456]
[231.33364868 101.18855286]
[216.35099792 101.90955353]
[204.01034546 110.24967194]
[189.85421753 103.18465424]
[174.87155151 103.90565491]
[159.88888550 104.62666321]
[144.90623474 105.34767151]
[129.92356873 106.06867981]
[114.94090271 106.78968048]
[129.21691895 111.39353943]
[139.51829529 122.29682159]
[143.30493164 136.81100464]
[139.64312744 151.35717773]
[129.43580627 162.34855652]
[115.19986725 167.07489014]
[100.44562531 164.37075806]
[88.81116486 154.90295410]
[83.16531372 141.00604248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[9 52]
[10 51]
[11 50]
[12 49]
[13 47]
[14 46]
[15 45]
[16 44]
[17 42]
[18 41]
[19 40]
[20 39]
[22 37]
[23 36]
[24 35]
[25 34]
[26 32]
[27 31]
[62 104]
[63 103]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[71 95]
[72 94]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[105 186]
[106 185]
[107 184]
[108 183]
[109 182]
[110 181]
[112 179]
[113 178]
[114 177]
[115 173]
[116 172]
[117 171]
[119 169]
[120 168]
[121 167]
[126 163]
[127 162]
[128 161]
[130 159]
[131 158]
[133 157]
[134 156]
[135 155]
[136 154]
[137 150]
[138 149]
[139 148]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
