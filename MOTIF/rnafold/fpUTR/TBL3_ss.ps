%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUGUGGCGUUCUGUGAAGAGUUCGGUGCUAACCUCCCUCACGCGGCGGUGGCUGCCGGGACCCUAGCAGGUUUCAGCUGGAGCGGCGGCGGCGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[69.81262207 116.82661438]
[55.43792725 121.11242676]
[41.06323624 125.39823914]
[26.68854141 129.68405151]
[12.31384850 133.96986389]
[4.75763273 147.59121704]
[-9.88140297 151.73287964]
[-22.82071877 144.44523621]
[-37.19541168 148.73104858]
[-51.57010651 153.01686096]
[-65.94480133 157.30267334]
[-80.31948853 161.58848572]
[-94.32592773 166.95687866]
[-107.88271332 173.37667847]
[-121.43949127 179.79646301]
[-134.99627686 186.21624756]
[-143.87246704 200.00556946]
[-160.23715210 198.94306946]
[-167.25575256 184.12174988]
[-157.70812988 170.78852844]
[-141.41606140 172.65946960]
[-127.85928345 166.23968506]
[-114.30249786 159.81988525]
[-100.74571991 153.40010071]
[-100.01281738 151.01124573]
[-98.33713531 148.74786377]
[-95.75718689 146.94725037]
[-92.42418671 145.92866516]
[-88.59352112 145.95762634]
[-84.60530853 147.21379089]
[-70.23061371 142.92797852]
[-55.85591888 138.64216614]
[-41.48122406 134.35635376]
[-27.10653114 130.07054138]
[-20.27071190 116.88694763]
[-5.75378180 112.33574677]
[8.02803612 119.59517670]
[22.40272903 115.30936432]
[36.77742386 111.02354431]
[51.15211487 106.73773193]
[65.52680969 102.45191956]
[66.77082825 90.50080109]
[72.03147888 79.69791412]
[80.67287445 71.34908295]
[91.65047455 66.46347809]
[103.63734436 65.63166046]
[115.18453217 68.95418549]
[124.89627075 76.02942657]
[131.59861755 86.00215149]
[146.30479431 83.04776001]
[158.31071472 72.74394226]
[172.31260681 77.82292175]
[187.01878357 74.86852264]
[199.02470398 64.56471252]
[213.02659607 69.64369202]
[227.73277283 66.68929291]
[242.43894958 63.73490143]
[257.14511108 60.78050613]
[271.85128784 57.82611084]
[286.55746460 54.87171555]
[301.26364136 51.91732025]
[304.88391113 41.56626129]
[312.48532104 33.77625656]
[322.59170532 29.96117020]
[333.28173828 30.77241898]
[342.55419922 35.98883820]
[348.70260620 44.57110596]
[363.61721802 42.97284698]
[378.53179932 41.37459183]
[393.44641113 39.77633286]
[408.36102295 38.17807388]
[415.97518921 24.65755653]
[430.09631348 18.22533226]
[445.29455566 21.35472488]
[455.72586060 32.84241486]
[457.37921143 48.27115631]
[449.61883545 61.70828247]
[435.42877197 67.98693848]
[420.26538086 64.69286346]
[409.95928955 53.09268570]
[395.04467773 54.69094086]
[380.13006592 56.28919983]
[365.21545410 57.88745880]
[350.30084229 59.48571396]
[339.45828247 75.49027252]
[320.08871460 78.67472076]
[304.21804810 66.62349701]
[289.51187134 69.57788849]
[274.80569458 72.53228760]
[260.09951782 75.48667908]
[245.39334106 78.44107056]
[230.68716431 81.39546967]
[215.98098755 84.34986115]
[205.02696228 94.44235992]
[189.97317505 89.57469940]
[175.26699829 92.52909088]
[164.31297302 102.62158966]
[149.25918579 97.75392914]
[134.55302429 100.70832825]
[129.58895874 117.85793304]
[116.72855377 130.24183655]
[99.40382385 134.55513000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 24]
[14 23]
[15 22]
[16 21]
[49 99]
[50 98]
[52 96]
[53 95]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
