%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACAGGAAACUCCCCUGAAACCUGUUUCUCAGCUUCCCGGCCCAGCUGGGGCACCCACUGGAAGGAGAGGCCAGGCGGAAGACCCUGGCUCCGUC\
) } def
/len { sequence length } bind def

/coor [
[126.35243988 352.82116699]
[124.43428040 337.94433594]
[112.52170563 329.07720947]
[110.36449432 314.01727295]
[119.74593353 301.58239746]
[117.82777405 286.70553589]
[115.90961456 271.82870483]
[113.99145508 256.95184326]
[100.19338989 251.34124756]
[90.99507141 239.49864197]
[88.94594574 224.54313660]
[94.69553375 210.47760010]
[106.79240417 201.11743164]
[104.87425232 186.24058533]
[102.95609283 171.36372375]
[100.79973602 156.51953125]
[98.40573883 141.71180725]
[96.01174164 126.90408325]
[93.61774445 112.09635162]
[85.99842072 125.01711273]
[74.11318970 134.16813660]
[59.67398453 138.23130798]
[44.76063156 136.62136841]
[31.52124596 129.57022095]
[21.86283112 118.09349823]
[17.17658234 103.84432220]
[18.13750458 88.87512970]
[24.60718727 75.34209442]
[35.65373993 65.19449615]
[49.68601608 59.89400482]
[64.68280792 60.20410156]
[78.48398590 66.08011627]
[89.10162354 76.67567444]
[95.00650787 90.46526337]
[99.27442169 76.08524323]
[103.54233551 61.70522308]
[107.81024933 47.32520676]
[112.07816315 32.94519043]
[116.11504364 18.49861336]
[119.91986084 3.98918962]
[111.78002930 -6.88215971]
[111.45371246 -20.26342201]
[118.83497620 -31.19410324]
[131.00254822 -35.75347900]
[135.27046204 -50.13349915]
[139.53837585 -64.51351166]
[143.80628967 -78.89353180]
[143.25619507 -88.20426178]
[148.44831848 -93.66201019]
[153.17494202 -107.89784241]
[157.90156555 -122.13368225]
[162.62818909 -136.36952209]
[161.88092041 -153.30699158]
[177.94960022 -158.71382141]
[187.59338379 -144.76986694]
[176.86402893 -131.64289856]
[172.13740540 -117.40705872]
[167.41078186 -103.17121887]
[162.68415833 -88.93538666]
[158.18630981 -74.62561798]
[153.91839600 -60.24560165]
[149.65048218 -45.86558533]
[145.38256836 -31.48556519]
[154.02769470 -17.15930557]
[149.63787842 -0.66564983]
[134.42929077 7.79400826]
[130.62446594 22.30343056]
[131.99853516 29.70998573]
[126.45817566 37.21310425]
[122.19026184 51.59312057]
[117.92234802 65.97313690]
[113.65443420 80.35315704]
[109.38652039 94.73317719]
[108.42546844 109.70235443]
[110.81946564 124.51007843]
[113.21346283 139.31781006]
[115.60746765 154.12553406]
[120.14285278 162.27554321]
[117.83293915 169.44557190]
[119.75109863 184.32241821]
[121.66925812 199.19926453]
[135.74475098 205.18489075]
[144.87408447 217.33200073]
[146.68550110 232.31816101]
[140.79196167 246.10664368]
[128.86830139 255.03369141]
[130.78646851 269.91052246]
[132.70462036 284.78738403]
[134.62278748 299.66424561]
[146.85156250 309.31280518]
[148.58491516 324.42736816]
[139.31112671 336.02618408]
[141.22929382 350.90301514]
[153.00148010 361.80233765]
[151.67625427 377.79055786]
[138.27018738 386.60290527]
[123.06729889 381.47927856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[5 89]
[6 88]
[7 87]
[8 86]
[13 81]
[14 80]
[15 79]
[16 77]
[17 76]
[18 75]
[19 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 67]
[40 66]
[44 63]
[45 62]
[46 61]
[47 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
