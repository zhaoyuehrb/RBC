%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUGUUUCCUUAUUUCUUUGAGCCGUAGACUUCUAAUACAUCUAGAGAUGUCAUAUAGUUGAUUAGAAAGUUGAGUUCAGUGGGUGCAGACCUGCAAGAUCAUAUUCUUCCUCCUGUAC\
) } def
/len { sequence length } bind def

/coor [
[-25.60007477 212.05278015]
[-37.98748779 203.59394836]
[-48.65999222 193.05366516]
[-57.27258682 180.77264404]
[-63.54685593 167.14791870]
[-67.27998352 152.61987305]
[-68.35128784 137.65818787]
[-66.72614288 122.74648285]
[-62.45707321 108.36680603]
[-55.68209076 94.98399353]
[-46.62020111 83.03066254]
[-35.56433868 72.89321136]
[-22.87189674 64.89934540]
[-8.95316792 59.30747604]
[5.74190760 56.29836655]
[20.73829651 55.96928406]
[35.55122757 58.33087158]
[49.70185471 63.30678940]
[62.73274612 70.73618317]
[74.22266388 80.37888336]
[83.79615021 91.91733551]
[76.40793610 78.86306000]
[69.01971436 65.80877686]
[61.63148880 52.75449753]
[54.24327087 39.70022202]
[42.24800110 38.79063797]
[32.31356430 32.22306442]
[26.88862991 21.75704956]
[27.24149513 10.09457397]
[33.16552734 0.18279818]
[26.45911789 -13.23450851]
[19.75271225 -26.65181351]
[13.04630470 -40.06912231]
[6.33989811 -53.48642731]
[-0.53870118 -66.81627655]
[-7.58835220 -80.05645752]
[-14.63800335 -93.29663849]
[-21.68765450 -106.53681946]
[-28.73730659 -119.77700043]
[-35.61482239 -125.97177887]
[-35.79302979 -133.45010376]
[-42.49943542 -146.86740112]
[-55.59032440 -155.75218201]
[-54.35969162 -170.59585571]
[-61.06609726 -184.01316833]
[-67.77250671 -197.43046570]
[-83.07614136 -197.66986084]
[-96.51004028 -205.00395203]
[-104.98718262 -217.74745178]
[-106.55959320 -232.97196960]
[-100.86593628 -247.17904663]
[-89.21457672 -257.10397339]
[-74.28290558 -260.46609497]
[-59.50212097 -256.49282837]
[-48.26873398 -246.09718323]
[-43.16409302 -231.66799927]
[-45.36120605 -216.52101135]
[-54.35519791 -204.13687134]
[-47.64879227 -190.71957397]
[-40.94238663 -177.30226135]
[-28.33118629 -169.37718201]
[-29.08213043 -153.57380676]
[-22.37572289 -140.15650940]
[-15.49712372 -126.82665253]
[-8.44747257 -113.58647156]
[-1.39782155 -100.34629059]
[5.65182972 -87.10610962]
[12.70148087 -73.86592865]
[18.69326782 -69.38758850]
[19.75720406 -60.19283295]
[26.46361160 -46.77552795]
[33.17001724 -33.35822296]
[39.87642670 -19.94091415]
[46.58283234 -6.52360868]
[64.20249939 -1.88803899]
[73.09593201 14.37440014]
[67.29754639 32.31200027]
[74.68576813 45.36627960]
[82.07398987 58.42055511]
[89.46221161 71.47483826]
[96.85043335 84.52911377]
[110.18028259 91.40771484]
[125.10077667 89.86539459]
[140.02127075 88.32308197]
[154.94177246 86.78076935]
[169.86227417 85.23845673]
[184.78277588 83.69613647]
[197.74197388 73.64669800]
[212.82029724 80.09462738]
[214.50648499 96.40686035]
[201.06590271 105.80276489]
[186.32508850 98.61663818]
[171.40458679 100.15895081]
[156.48408508 101.70126343]
[141.56359863 103.24358368]
[126.64309692 104.78589630]
[111.72259521 106.32820892]
[107.53031158 120.73046112]
[119.29210663 130.03959656]
[131.05390930 139.34873962]
[142.81570435 148.65788269]
[158.48304749 146.58187866]
[170.97851562 156.25860596]
[172.88874817 171.94702148]
[163.08045959 184.33947754]
[147.37272644 186.08375549]
[135.08465576 176.14498901]
[133.50656128 160.41967773]
[121.74476624 151.11053467]
[109.98296356 141.80139160]
[98.22116852 132.49226379]
[98.07904816 147.49157715]
[95.25334930 162.22302246]
[89.83541107 176.21037292]
[82.00038910 189.00148010]
[72.00153351 200.18284607]
[60.16209412 209.39303589]
[46.86477280 216.33432007]
[32.53942871 220.78228760]
[17.64914322 222.59320068]
[2.67525721 221.70848083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[30 74]
[31 73]
[32 72]
[33 71]
[34 70]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[41 63]
[42 62]
[44 60]
[45 59]
[46 58]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
