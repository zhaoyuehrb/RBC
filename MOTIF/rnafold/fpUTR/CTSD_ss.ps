%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCACGCCGGCCGCGCCCACGUGACCGGUCCGGGUGCAAACACGCGGGUCAGCUGAUCCGGCCCAACUGCGGCGUCAUCCCGGCUAUAAGCGCACGGCCUCGGCGACCCUCUCCGACCCGGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[237.38174438 205.93034363]
[225.49931335 196.77569580]
[213.61686707 187.62104797]
[201.73443604 178.46638489]
[182.75079346 182.46801758]
[166.61268616 171.16596985]
[163.79847717 151.36145020]
[151.30206299 143.06448364]
[138.80564880 134.76751709]
[126.30924225 126.47055054]
[113.81282806 118.17358398]
[96.39746094 122.54096222]
[81.21085358 112.96307373]
[77.64840698 95.36540985]
[64.77683258 87.66329193]
[51.90525436 79.96118164]
[39.03367615 72.25907135]
[26.16210175 64.55695343]
[13.20112610 57.00625229]
[0.15253073 49.60800171]
[-8.94901180 48.07206345]
[-13.11230469 41.88027954]
[-25.98388100 34.17816544]
[-44.08052826 39.53053665]
[-60.11847687 30.19975662]
[-64.26507568 12.43945789]
[-77.48352051 5.34913063]
[-90.70196533 -1.74119711]
[-103.92041016 -8.83152485]
[-117.81200409 -14.49045277]
[-132.22229004 -18.65505219]
[-146.63256836 -22.81965256]
[-161.04284668 -26.98425293]
[-176.44863892 -23.38262367]
[-186.52735901 -34.34933090]
[-200.93763733 -38.51393127]
[-215.34791565 -42.67853165]
[-231.12969971 -38.22124481]
[-242.69038391 -49.85235596]
[-238.13731384 -65.60677338]
[-222.15431213 -69.27770233]
[-211.18331909 -57.08880997]
[-196.77304077 -52.92420959]
[-182.36276245 -48.75960922]
[-167.98767090 -52.65911865]
[-156.87823486 -41.39453125]
[-142.46795654 -37.22993088]
[-128.05767822 -33.06533051]
[-113.64740753 -28.90073013]
[-121.64989471 -41.58774185]
[-121.68968201 -56.58768845]
[-113.75461578 -69.31697845]
[-100.26944733 -75.88585663]
[-85.35489655 -74.28706360]
[-73.56846619 -65.00913239]
[-68.51177979 -50.88716125]
[-71.73004150 -36.23646927]
[-82.23982239 -25.53392220]
[-96.83007812 -22.04996872]
[-83.61163330 -14.95964050]
[-70.39318848 -7.86931324]
[-57.17474747 -0.77898574]
[-47.12388611 -6.40413332]
[-35.48555756 -6.43642807]
[-25.19271088 -0.75069076]
[-18.89605522 9.32254601]
[-18.28176689 21.30658913]
[-5.41019201 29.00870323]
[7.55078411 36.55940628]
[20.59938049 43.95765686]
[28.03906059 44.52544022]
[33.86421585 51.68537903]
[46.73579025 59.38749313]
[59.60736465 67.08960724]
[72.47894287 74.79171753]
[85.35051727 82.49382782]
[95.62155914 77.59681702]
[106.98054504 78.26649475]
[116.60501862 84.33645630]
[122.10352325 94.29846191]
[122.10979462 105.67716980]
[134.60620117 113.97413635]
[147.10261536 122.27110291]
[159.59902954 130.56806946]
[172.09544373 138.86503601]
[181.84608459 134.14790344]
[192.59483337 133.95657349]
[202.35839844 138.25819397]
[209.36386108 146.19715881]
[212.37045288 156.26438904]
[210.88908386 166.58395386]
[222.77153015 175.73860168]
[234.65396118 184.89326477]
[246.53640747 194.04791260]
[257.83349609 195.91047668]
[263.19146729 204.55192566]
[276.57250977 211.33042908]
[289.95352173 218.10894775]
[303.33456421 224.88745117]
[316.71557617 231.66595459]
[330.32666016 237.96978760]
[344.15097046 243.79116821]
[357.97528076 249.61254883]
[371.79959106 255.43392944]
[387.52090454 253.65879822]
[396.24783325 265.72900391]
[410.07214355 271.55038452]
[427.01635742 272.12500000]
[431.15481567 288.56607056]
[416.50192261 297.09417725]
[404.25076294 285.37469482]
[390.42645264 279.55331421]
[375.69396973 281.74481201]
[365.97821045 269.25823975]
[352.15390015 263.43685913]
[338.32958984 257.61547852]
[324.50527954 251.79409790]
[321.04617310 252.84298706]
[316.89724731 252.20895386]
[312.88327026 249.58242798]
[309.93707275 245.04698181]
[296.55606079 238.26847839]
[283.17501831 231.48997498]
[269.79400635 224.71145630]
[256.41296387 217.93295288]
[261.12884521 232.17234802]
[257.77688599 246.79302979]
[247.32890320 257.55593872]
[232.81417847 261.34048462]
[218.44107056 257.04937744]
[208.37684631 245.92683411]
[205.53950500 231.19761658]
[210.75169373 217.13230896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 70]
[20 69]
[22 68]
[23 67]
[26 62]
[27 61]
[28 60]
[29 59]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 117]
[102 116]
[103 115]
[104 114]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
