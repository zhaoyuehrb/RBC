%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCUCAGACCUUGCCAGACUGCCUGCUUUCAUGGAUAGACAUAAAAACCUUCAGCUUGAAUGUUAACACCUUGAUGGGAAAGGUGGCUCAUGGAAUGUUUUCUUAUCCUUUGAACACUCCUCAUUUCAGAAGCUUUGCUUCUGUUGCAACCAAAC\
) } def
/len { sequence length } bind def

/coor [
[105.24342346 261.20086670]
[104.05915070 246.24768066]
[92.59702301 236.80548096]
[91.18298340 221.65769958]
[101.16455078 209.69918823]
[99.98027802 194.74601746]
[86.65872955 193.80201721]
[73.60224915 190.99432373]
[61.07024765 186.37870789]
[49.31172180 180.04690552]
[38.56028748 172.12467957]
[29.02956581 162.76945496]
[20.90891075 152.16711426]
[7.77288675 159.40899658]
[3.28302574 174.32472229]
[-10.14193439 181.48188782]
[-24.33413124 177.10957336]
[-37.47015381 184.35145569]
[-50.60617828 191.59333801]
[-63.67001724 198.96464539]
[-76.66040039 206.46464539]
[-76.58016205 221.82331848]
[-84.20394897 235.15649414]
[-97.48100281 242.87759399]
[-112.83986664 242.90968323]
[-126.14907074 235.24414062]
[-133.82852173 221.94296265]
[-133.81246948 206.58407593]
[-126.10524750 193.29895020]
[-112.78005219 185.66123962]
[-97.42128754 185.72543335]
[-84.16040039 193.47425842]
[-71.17002106 185.97425842]
[-66.92713928 179.87385559]
[-57.84806061 178.45732117]
[-44.71203613 171.21543884]
[-31.57601357 163.97355652]
[-27.69710159 149.63864136]
[-14.47846794 142.10720825]
[0.53100377 146.27296448]
[13.66702747 139.03108215]
[9.24498844 127.20910645]
[6.43360043 114.90425110]
[5.28275728 102.33487701]
[5.81288338 89.72406769]
[8.01457119 77.29562378]
[11.84874535 65.27012634]
[17.24736214 53.86098862]
[24.11460876 43.27068710]
[12.84923267 33.36658096]
[1.58385789 23.46247292]
[-13.88915253 20.16148758]
[-18.33891678 5.94709826]
[-29.60429192 -3.95700836]
[-40.86966705 -13.86111450]
[-52.13504028 -23.76522064]
[-68.02286530 -29.68243217]
[-66.73508453 -46.58740234]
[-50.13428116 -50.02971268]
[-42.23093414 -35.03059769]
[-30.96555901 -25.12648964]
[-19.70018387 -15.22238350]
[-8.43480968 -5.31827688]
[6.23242617 -2.72569919]
[11.48796463 12.19709873]
[22.75333977 22.10120392]
[34.01871490 32.00531006]
[50.75392532 19.05784798]
[69.94520569 10.14724731]
[90.63542938 5.71791029]
[90.33906555 -9.27916241]
[90.04270935 -24.27623367]
[89.74635315 -39.27330780]
[89.44999695 -54.27037811]
[89.15364075 -69.26744843]
[76.86557770 -78.93893433]
[73.71970367 -94.25681305]
[81.20140839 -107.98846436]
[95.77805328 -113.65020752]
[110.56700134 -108.56875610]
[118.58535004 -95.14340210]
[116.04709625 -79.71319580]
[104.15071106 -69.56380463]
[104.44706726 -54.56673431]
[104.74342346 -39.56966400]
[105.03977966 -24.57259178]
[105.33614349 -9.57551956]
[105.63249969 5.42155266]
[119.39857483 7.26110220]
[132.74781799 11.09337425]
[145.39340210 16.83602333]
[157.06359863 24.36565590]
[167.50762939 33.52047729]
[176.50111389 44.10377121]
[183.85076904 55.88813782]
[197.63702393 49.97719193]
[211.42326355 44.06624603]
[221.05780029 31.51688576]
[235.80419922 33.61276245]
[249.59045410 27.70181847]
[263.37670898 21.79087448]
[277.16296387 15.87992954]
[290.94921875 9.96898460]
[292.08242798 -5.29451513]
[300.18896484 -18.27691078]
[313.40600586 -25.99493980]
[328.69641113 -26.67505836]
[342.54650879 -20.16098022]
[351.77368164 -7.94959116]
[354.25756836 7.15302038]
[349.42739868 21.67638397]
[338.39312744 32.28313828]
[323.69030762 36.53592682]
[308.69760132 33.45749283]
[296.86016846 23.75523567]
[283.07391357 29.66618156]
[269.28765869 35.57712555]
[255.50140381 41.48807144]
[241.71514893 47.39901352]
[233.06671143 59.52558517]
[217.33421326 57.85249710]
[203.54795837 63.76344299]
[189.76171875 69.67438507]
[193.13392639 82.59658051]
[194.65571594 95.86454773]
[194.29685974 109.21468353]
[192.06446838 122.38173676]
[188.00289917 135.10409546]
[182.19285583 147.12899780]
[174.74977112 158.21751404]
[185.81727600 168.34226990]
[196.88476562 178.46701050]
[207.95227051 188.59175110]
[219.01976013 198.71650696]
[230.08726501 208.84124756]
[241.15476990 218.96598816]
[256.92257690 225.19593811]
[255.30105591 242.07217407]
[238.63548279 245.18582153]
[231.03001404 230.03349304]
[219.96252441 219.90873718]
[208.89501953 209.78399658]
[197.82751465 199.65925598]
[186.76002502 189.53451538]
[175.69252014 179.40975952]
[164.62503052 169.28501892]
[149.77809143 180.61605835]
[132.99688721 188.81448364]
[114.93345642 193.56173706]
[116.11772919 208.51492310]
[127.85725403 218.75314331]
[128.84526062 233.93466187]
[119.01232910 245.06341553]
[120.19660187 260.01660156]
[131.41857910 271.48159790]
[129.30873108 287.38531494]
[115.48555756 295.52777100]
[100.55300140 289.66275024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[5 150]
[6 149]
[13 41]
[14 40]
[17 37]
[18 36]
[19 35]
[20 33]
[21 32]
[49 67]
[50 66]
[51 65]
[53 63]
[54 62]
[55 61]
[56 60]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[95 123]
[96 122]
[97 121]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[130 146]
[131 145]
[132 144]
[133 143]
[134 142]
[135 141]
[136 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
