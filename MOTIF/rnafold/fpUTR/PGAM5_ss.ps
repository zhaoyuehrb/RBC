%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGUGUUCCUCGCGGAGCGCCGUCGGGGCCGUGGGCGCCUGCGCGGGCCGGCGCGGGAGCAAGCGGC\
) } def
/len { sequence length } bind def

/coor [
[113.84864807 125.07820892]
[99.48954010 128.64334106]
[85.26658630 124.56884003]
[74.97325897 113.94144440]
[60.41526413 117.55596161]
[45.85726547 121.17047882]
[31.38279343 125.10616302]
[16.99892807 129.36108398]
[2.61506152 133.61601257]
[-11.76880455 137.87094116]
[-26.15266991 142.12586975]
[-40.53653717 146.38079834]
[-51.43085098 158.63827515]
[-67.43656921 155.06770325]
[-72.08837891 139.34216309]
[-60.60089874 127.63874054]
[-44.79146194 131.99693298]
[-30.40759659 127.74200439]
[-16.02373123 123.48707581]
[-1.63986516 119.23214722]
[12.74400043 114.97722626]
[27.12786674 110.72229767]
[32.82817841 105.64269257]
[42.24275208 106.61248016]
[56.80074692 102.99796295]
[71.35874939 99.38344574]
[75.48590088 85.17568207]
[86.15135193 74.92179108]
[100.51045990 71.35665894]
[114.73341370 75.43115997]
[125.02674103 86.05855560]
[139.58473206 82.44403839]
[154.14273071 78.82952118]
[168.70072937 75.21500397]
[183.25872803 71.60049438]
[191.43855286 58.34424210]
[206.25392151 54.88599396]
[218.84132385 62.76590729]
[233.39932251 59.15139008]
[244.92840576 48.31668854]
[259.14508057 52.75913239]
[273.70309448 49.14461899]
[288.26107788 45.53010178]
[302.81906128 41.91558838]
[317.37707520 38.30107117]
[331.93505859 34.68655777]
[346.49307251 31.07204056]
[354.43045044 17.40553665]
[369.72793579 13.43525887]
[383.30975342 21.51670074]
[387.11807251 36.85528564]
[378.89349365 50.35090637]
[363.51550293 53.99684525]
[350.10757446 45.63003922]
[335.54959106 49.24455261]
[320.99157715 52.85906982]
[306.43359375 56.47358322]
[291.87557983 60.08810043]
[277.31759644 63.70261765]
[262.75961304 67.31713104]
[252.27180481 77.89329529]
[237.01383972 73.70938873]
[222.45584106 77.32390594]
[215.01593018 90.17626953]
[200.30354309 94.04928589]
[186.87324524 86.15848541]
[172.31524658 89.77300262]
[157.75724792 93.38751984]
[143.19924927 97.00203705]
[128.64125061 100.61655426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 26]
[5 25]
[6 24]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[38 63]
[39 62]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
