%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCCCGCGAGCACGUGCGCGUCCUCGCUGCUCACAUUUCGGCGGAGGGCGCGCUCCCUGGAAAAUUCCACUCCUGUGCUAGCUCCACCCUAUGCGGCUUUUCUCCUACCCGACGCUCUUCACUCUCAGCUCCCUUCCCGGCGGCCUUUGCGGGAACAAG\
) } def
/len { sequence length } bind def

/coor [
[80.77416229 246.08985901]
[78.04436493 230.90592957]
[83.97806549 216.66532898]
[96.68183899 207.91218567]
[96.10021210 192.92346191]
[95.51857758 177.93473816]
[94.93695068 162.94602966]
[94.35531616 147.95730591]
[93.77368927 132.96858215]
[93.19205475 117.97986603]
[83.55023956 106.48919678]
[68.89023590 103.31364441]
[54.23022461 100.13808441]
[39.57021713 96.96252441]
[24.91020966 93.78696442]
[10.25020218 90.61141205]
[-11.81287575 108.64640045]
[-43.22628021 94.56752014]
[-58.04612732 96.88530731]
[-72.86597443 99.20308685]
[-87.68582153 101.52086639]
[-102.50566864 103.83864594]
[-117.32551575 106.15643311]
[-132.14537048 108.47421265]
[-146.96520996 110.79199219]
[-161.78506470 113.10977936]
[-176.60490417 115.42755890]
[-191.40158081 117.88892365]
[-206.17370605 120.49365234]
[-220.94581604 123.09837341]
[-235.71794128 125.70309448]
[-241.58325195 139.97200012]
[-254.24487305 148.78599548]
[-269.66256714 149.33256531]
[-282.91656494 141.43731689]
[-289.77755737 127.61956787]
[-288.05627441 112.28852844]
[-278.30194092 100.33628082]
[-263.62710571 95.57673645]
[-248.71449280 99.52864838]
[-238.32266235 110.93097687]
[-223.55053711 108.32625580]
[-208.77842712 105.72153473]
[-194.00630188 103.11681366]
[-187.93525696 98.83727264]
[-178.92268372 100.60771179]
[-164.10284424 98.28993225]
[-149.28298950 95.97214508]
[-134.46315002 93.65436554]
[-119.64330292 91.33658600]
[-104.82344818 89.01879883]
[-90.00360107 86.70101929]
[-75.18375397 84.38323975]
[-60.36390686 82.06545258]
[-45.54405975 79.74767303]
[-42.57346344 72.86105347]
[-56.34661102 66.91964722]
[-50.40499115 53.14658737]
[-36.63226700 59.08781052]
[-33.66166687 52.20119095]
[-42.14577103 39.83106613]
[-50.62987518 27.46094131]
[-59.11397552 15.09081554]
[-74.13411713 8.50845337]
[-75.67451477 -7.81818771]
[-62.15055084 -17.09365845]
[-47.47451019 -9.77614975]
[-46.74385071 6.60671234]
[-38.25975037 18.97683716]
[-29.77564621 31.34696198]
[-21.29154205 43.71708679]
[-8.82795525 44.59935379]
[1.76378477 49.53952026]
[9.31315994 57.37672806]
[13.20694637 66.67359161]
[13.42576027 75.95140076]
[28.08576775 79.12696075]
[42.74577713 82.30251312]
[57.40578461 85.47807312]
[72.06579590 88.65363312]
[86.72579956 91.82919312]
[99.99723053 84.83853912]
[105.67022705 70.95267487]
[111.34322357 57.06681824]
[117.01622009 43.18095779]
[115.07283783 27.47956276]
[127.04889679 18.62386894]
[132.72189331 4.73800898]
[127.86142731 -10.55105400]
[136.90383911 -23.80301476]
[152.91255188 -24.85210228]
[163.60705566 -12.89354706]
[160.78344727 2.89907098]
[146.60775757 10.41100693]
[140.93475342 24.29686546]
[143.28390503 39.00505447]
[130.90208435 48.85395813]
[125.22908020 62.73981857]
[119.55608368 76.62567902]
[113.88308716 90.51153564]
[125.51884460 81.04532623]
[137.15460205 71.57911682]
[148.79035950 62.11291122]
[160.42613220 52.64670181]
[172.06188965 43.18049622]
[183.69764709 33.71428680]
[195.33340454 24.24807930]
[203.64367676 11.76051044]
[214.93159485 1.88210618]
[228.41081238 -4.69897604]
[243.14233398 -7.52428055]
[258.09991455 -6.39698792]
[272.24157715 -1.39562869]
[284.58215332 7.13138819]
[294.26199341 18.59004784]
[300.60675049 32.18210602]
[303.17443848 46.96070480]
[301.78616333 61.89632416]
[296.53869629 75.94850922]
[287.79751587 88.13834381]
[276.17163086 97.61665344]
[262.47085571 103.72315216]
[247.65435791 106.03233337]
[232.80102539 103.93986511]
[217.94769287 101.84740448]
[203.09434509 99.75493622]
[188.24101257 97.66247559]
[173.38768005 95.57000732]
[158.53434753 93.47754669]
[143.68101501 91.38507843]
[155.71286011 100.34246063]
[167.74470520 109.29984283]
[183.43453979 111.33446503]
[189.02297974 125.14093018]
[201.05482483 134.09831238]
[217.07299805 133.20520020]
[227.65052795 145.26736450]
[224.67321777 161.03172302]
[210.42501831 168.40522766]
[195.83593750 161.73155212]
[192.09745789 146.13015747]
[180.06559753 137.17277527]
[165.23637390 135.77883911]
[158.78732300 121.33168793]
[146.75547791 112.37430573]
[134.72363281 103.41693115]
[128.08792114 106.91225433]
[127.50659943 121.90098572]
[114.81649017 113.90290833]
[108.18077850 117.39823151]
[108.76240540 132.38694763]
[109.34403992 147.37567139]
[109.92566681 162.36439514]
[110.50730133 177.35311890]
[111.08892822 192.34182739]
[111.67055511 207.33055115]
[125.01443481 215.07293701]
[132.03382874 228.81089783]
[130.48887634 244.16070557]
[120.87257385 256.22430420]
[106.25344086 261.15222168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 44]
[29 43]
[30 42]
[31 41]
[60 71]
[61 70]
[62 69]
[63 68]
[82 100]
[83 99]
[84 98]
[85 97]
[87 95]
[88 94]
[130 146]
[131 145]
[132 144]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
