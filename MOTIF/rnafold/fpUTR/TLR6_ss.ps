%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGUAUUUCCGUUCAUUUACAAGUUAUUUUCUCUUCUUCUGAAAAAGAGAUCUUGAAUUUGGACUCAUAUCAAGAUGCUCUGAAGAAGAACAACCCUUUAGGAUAGCCACUGCAACAUC\
) } def
/len { sequence length } bind def

/coor [
[55.63299179 383.52239990]
[51.32772827 369.15350342]
[52.38007355 354.18817139]
[42.77117538 365.70635986]
[33.16227722 377.22457886]
[23.55338097 388.74276733]
[13.94448280 400.26098633]
[20.30864906 414.13397217]
[20.01471138 429.39428711]
[13.12103081 443.01190186]
[0.99635208 452.28308105]
[-13.95196056 455.36703491]
[-28.75590897 451.65139771]
[-40.47615814 441.87396240]
[-46.78564453 427.97601318]
[-46.43161392 412.71701050]
[-39.48436356 399.12661743]
[-27.32326698 389.90325928]
[-12.36292553 386.87820435]
[2.42627621 390.65209961]
[12.03517437 379.13388062]
[21.64407158 367.61566162]
[31.25296974 356.09747314]
[40.86186600 344.57925415]
[48.08140182 331.43093872]
[52.64312363 317.14141846]
[57.20484543 302.85186768]
[61.76656723 288.56234741]
[66.32829285 274.27282715]
[70.89001465 259.98327637]
[75.45173645 245.69375610]
[80.01345825 231.40422058]
[77.66389465 221.93646240]
[83.66620636 212.72663879]
[84.82383728 197.77137756]
[85.98146820 182.81610107]
[87.13909912 167.86083984]
[88.29673004 152.90557861]
[89.45436096 137.95031738]
[90.61199188 122.99505615]
[91.76963043 108.03979492]
[79.25041962 116.30232239]
[64.50969696 113.52544403]
[55.85492325 101.27411652]
[58.16369629 86.45286560]
[70.13484955 77.41452789]
[85.02177429 79.25287628]
[94.43428040 90.93079376]
[97.87960052 76.33182526]
[101.32491302 61.73286057]
[104.77023315 47.13389206]
[108.02729797 32.49177933]
[111.09558105 17.80894470]
[114.16386414 3.12610888]
[117.23213959 -11.55672646]
[120.30042267 -26.23956108]
[123.36870575 -40.92239761]
[126.43698883 -55.60523224]
[117.77929688 -66.01554108]
[116.75164795 -79.32053375]
[123.50745392 -90.60163116]
[135.36427307 -95.81907654]
[138.80958557 -110.41804504]
[133.57563782 -125.95953369]
[144.61952209 -138.08242798]
[160.58021545 -134.31575012]
[165.03875732 -118.53432465]
[153.40855408 -106.97272491]
[149.96324158 -92.37376404]
[159.40800476 -78.52345276]
[155.90055847 -61.78676605]
[141.11982727 -52.53695297]
[138.05154419 -37.85411453]
[134.98326111 -23.17127991]
[131.91497803 -8.48844528]
[128.84669495 6.19438982]
[125.77841949 20.87722588]
[122.71013641 35.56005859]
[124.44231415 42.83718872]
[119.36919403 50.57920837]
[115.92388153 65.17817688]
[112.47856140 79.77713776]
[109.03324890 94.37610626]
[106.72489166 109.19742584]
[105.56726074 124.15268707]
[104.40962982 139.10795593]
[103.25199127 154.06321716]
[102.09436035 169.01847839]
[100.93672943 183.97373962]
[99.77909851 198.92900085]
[98.62146759 213.88426208]
[109.64640808 203.71319580]
[124.20455933 200.09930420]
[138.70619202 203.93373108]
[149.57548523 214.27096558]
[154.13229370 228.56207275]
[151.25302124 243.28312683]
[141.64761353 254.80424500]
[127.68457031 260.28454590]
[112.80690765 258.37268066]
[100.68315125 249.54011536]
[94.30298615 235.96594238]
[89.74126434 250.25547791]
[85.17954254 264.54501343]
[80.61782074 278.83453369]
[76.05609894 293.12408447]
[71.49437714 307.41360474]
[66.93265533 321.70312500]
[62.37093353 335.99267578]
[74.43143463 327.07391357]
[88.86593628 322.99404907]
[103.81072235 324.27987671]
[117.33619690 330.76535034]
[127.69602203 341.61312866]
[133.55259705 355.42254639]
[134.14971924 370.41067505]
[129.41032410 384.64227295]
[119.94632721 396.27981567]
[106.97967529 403.82077026]
[92.18454742 406.29144287]
[77.47122192 403.37283325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[30 104]
[31 103]
[32 102]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[41 84]
[48 83]
[49 82]
[50 81]
[51 80]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
