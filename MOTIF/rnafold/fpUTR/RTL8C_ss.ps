%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAUUUCCGGCGACGCCUCGGUACUGACCUCUGCAGAGCCGGGUGGAGCCCAUUGACGUCCAGCGAAGCGAGGAGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[91.14976501 221.70521545]
[91.14976501 206.70521545]
[91.14976501 191.70521545]
[80.46889496 181.38754272]
[80.25521088 166.17539978]
[91.14976501 155.04228210]
[91.14976501 140.04228210]
[91.14976501 125.04228210]
[91.14976501 110.04228210]
[85.27704620 96.23970032]
[74.46922302 85.83821869]
[63.66139984 75.43672943]
[48.08510590 75.56642151]
[37.27260590 64.86386871]
[37.24496078 50.01345444]
[26.43713570 39.61196899]
[15.62931156 29.21047974]
[4.82148743 18.80899239]
[-3.76111412 14.98143673]
[-6.19145060 7.79605436]
[-16.59293747 -3.01176953]
[-26.99442482 -13.81959343]
[-37.39591217 -24.62741661]
[-52.54029465 -29.20544434]
[-55.79090500 -43.74101257]
[-66.19239044 -54.54883575]
[-76.59387970 -65.35665894]
[-92.18184662 -64.11196136]
[-104.89295959 -73.22029114]
[-108.72541809 -88.38097382]
[-101.86965179 -102.43560028]
[-87.56274414 -108.74800110]
[-72.55998230 -104.33766174]
[-63.94520950 -91.28700256]
[-65.78605652 -75.75814819]
[-55.38456726 -64.95032501]
[-44.98308182 -54.14250183]
[-30.58268547 -50.33752060]
[-26.58808899 -35.02890396]
[-16.18660164 -24.22108078]
[-5.78511429 -13.41325665]
[4.61637306 -2.60543299]
[15.22297478 8.00116825]
[26.03079796 18.40265656]
[36.83862305 28.80414391]
[47.64644623 39.20563126]
[62.48702240 38.66444778]
[73.59586334 49.05907440]
[74.06288910 64.62890625]
[84.87071228 75.03039551]
[95.67853546 85.43187714]
[93.64311981 70.57061768]
[102.09861755 58.18092728]
[116.67944336 54.65962601]
[129.85748291 61.82477570]
[134.82887268 75.97698975]
[129.02690125 89.80945587]
[115.44506073 96.18057251]
[130.05049133 99.59838104]
[144.65592957 103.01618195]
[156.30860901 92.76949310]
[171.76176453 91.36254120]
[185.07334900 99.33634186]
[191.12477112 113.62478638]
[187.58915710 128.73368835]
[175.82600403 138.85337830]
[160.35848999 140.09260559]
[147.13418579 131.97486877]
[141.23811340 117.62161255]
[126.63269043 114.20381165]
[112.02725983 110.78601074]
[108.93917084 110.72967529]
[106.14976501 110.04228210]
[106.14976501 125.04228210]
[106.14976501 140.04228210]
[106.14976501 155.04228210]
[117.04431915 166.17539978]
[116.83064270 181.38754272]
[106.14976501 191.70521545]
[106.14976501 206.70521545]
[106.14976501 221.70521545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[6 76]
[7 75]
[8 74]
[9 73]
[10 51]
[11 50]
[12 49]
[15 46]
[16 45]
[17 44]
[18 43]
[20 42]
[21 41]
[22 40]
[23 39]
[25 37]
[26 36]
[27 35]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
