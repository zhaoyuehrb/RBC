%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCCCGCGAGCAGGCAGCGCCGGCCCCCCGCCCCGCGGCCCCGGGCCCCGGCUCCGGCGCCGUCCCUCCUCCCCGGCCGGGCGCCGCGGCCCCGGCAUGAGGAGCGGGCG\
) } def
/len { sequence length } bind def

/coor [
[134.69381714 120.65016174]
[130.95423889 120.10544586]
[127.24676514 118.09428406]
[124.13628387 114.61917877]
[109.70226288 110.53762817]
[96.10240173 113.78347015]
[86.21618652 103.89639282]
[71.78216553 99.81484222]
[57.34814835 95.73329163]
[48.09613037 96.40533447]
[42.57556534 91.33530426]
[28.25948906 86.85758209]
[13.94341469 82.37985992]
[-0.37266046 77.90213776]
[-15.85331249 81.16709900]
[-25.69058609 69.98329926]
[-40.00666046 65.50557709]
[-51.86487961 70.80497742]
[-63.75557327 66.68021393]
[-69.40998840 55.88873672]
[-83.59724426 51.01824570]
[-92.87223816 51.17959595]
[-98.10511780 45.81314468]
[-112.15278625 40.55358124]
[-126.20045471 35.29401779]
[-140.24812317 30.03445625]
[-150.04638672 37.05387115]
[-161.90345764 38.39237213]
[-172.79722595 33.82725906]
[-180.00868225 24.62556267]
[-181.80039978 13.19502831]
[-195.53700256 7.16959667]
[-209.27359009 1.14416516]
[-223.01019287 -4.88126612]
[-239.94403076 -5.70669651]
[-243.83862305 -22.20726013]
[-229.06103516 -30.51745033]
[-216.98477173 -18.61786652]
[-203.24816895 -12.59243488]
[-189.51156616 -6.56700325]
[-175.77496338 -0.54157197]
[-159.28416443 -8.25248241]
[-142.04846191 -1.47574711]
[-134.98857117 15.98678684]
[-120.94089508 21.24635124]
[-106.89322662 26.50591278]
[-92.84555817 31.76547623]
[-78.72675323 36.83098602]
[-64.53949738 41.70147705]
[-47.59584427 37.36544418]
[-35.52893829 51.18950272]
[-21.21286392 55.66722488]
[-6.75619316 52.08198929]
[4.10506153 63.58606339]
[18.42113686 68.06378174]
[32.73721313 72.54150391]
[47.05328751 77.01922607]
[61.42969894 81.29927063]
[75.86371613 85.38082123]
[90.29773712 89.46237183]
[103.89759827 86.21652985]
[113.78381348 96.10360718]
[128.21783447 100.18515778]
[142.85478210 103.46537018]
[157.65019226 105.93428802]
[172.44561768 108.40321350]
[187.24104309 110.87213135]
[202.03645325 113.34104919]
[216.86448669 115.60587311]
[231.72232056 117.66617584]
[246.58015442 119.72647858]
[261.43798828 121.78678131]
[276.29580688 123.84708405]
[291.15365601 125.90739441]
[299.17974854 116.91517639]
[310.45712280 113.01615143]
[322.08551025 115.08851624]
[331.13467407 122.49048615]
[335.38265991 133.25254822]
[350.10443115 136.12820435]
[364.82620239 139.00386047]
[379.54797363 141.87953186]
[394.26974487 144.75518799]
[408.99151611 147.63084412]
[418.15643311 146.19706726]
[424.07684326 150.79389954]
[438.71377563 154.07411194]
[454.19515991 148.66497803]
[466.44201660 159.57124329]
[462.85583496 175.57347107]
[447.12576294 180.20994568]
[435.43356323 168.71105957]
[420.79663086 165.43084717]
[406.11587524 162.35261536]
[391.39410400 159.47695923]
[376.67233276 156.60130310]
[361.95056152 153.72564697]
[347.22879028 150.84997559]
[332.50701904 147.97431946]
[318.10156250 159.10482788]
[299.80108643 156.26123047]
[289.09335327 140.76522827]
[274.23550415 138.70492554]
[259.37768555 136.64462280]
[244.51985168 134.58430481]
[229.66201782 132.52400208]
[214.80418396 130.46369934]
[207.64785767 132.69277954]
[199.56753540 128.13647461]
[184.77212524 125.66754913]
[169.97669983 123.19863129]
[155.18127441 120.72971344]
[140.38586426 118.26079559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[7 60]
[8 59]
[9 58]
[11 57]
[12 56]
[13 55]
[14 54]
[16 52]
[17 51]
[20 49]
[21 48]
[23 47]
[24 46]
[25 45]
[26 44]
[31 41]
[32 40]
[33 39]
[34 38]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 107]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
