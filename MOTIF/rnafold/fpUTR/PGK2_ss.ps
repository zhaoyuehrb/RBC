%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGUGGCCGUUGUGCUGGAGACAGUGAGGAGAAGAAAGGGGCGGGACAAGGGCAAAGGCGUUAGAAGUCACCACCGACCCAGCCCCUCAACAGCAAGUUGGUUCUUCAGCAUUAAGAUCCAGGUGUCAGCCUAUGUCUUUAUAUUGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[87.96303558 211.78092957]
[98.62034607 200.11056519]
[97.70291901 185.13864136]
[96.78549194 170.16673279]
[95.86807251 155.19480896]
[94.95064545 140.22288513]
[94.03321838 125.25097656]
[86.88258362 122.38632202]
[80.88813019 117.54851532]
[76.57821655 111.16396332]
[74.33272552 103.79541016]
[74.34957886 96.09232330]
[76.62728882 88.73366547]
[80.96509552 82.36802673]
[73.37693024 69.42894745]
[65.78877258 56.48986816]
[58.20061111 43.55078506]
[50.61244965 30.61170387]
[43.02429199 17.67262268]
[35.43613052 4.73354149]
[27.84796906 -8.20553970]
[20.25980949 -21.14462090]
[12.67164898 -34.08370209]
[13.87035465 -19.13167572]
[9.74188232 -4.71100569]
[0.81212986 7.34135962]
[-11.78140545 15.49015522]
[-26.43452263 18.69736290]
[-41.28066254 16.55443764]
[-54.42868042 9.33435440]
[-64.20374298 -2.04317307]
[-69.36067963 -16.12884140]
[-69.24256897 -31.12837601]
[-63.86447525 -45.13109207]
[-53.91146469 -56.35328293]
[-40.65138245 -63.36543274]
[-25.77334023 -65.27431488]
[-11.17254353 -61.83676529]
[1.28940856 -53.49232483]
[-6.29875183 -66.43140411]
[-13.88691235 -79.37048340]
[-21.47507286 -92.30957031]
[-29.06323242 -105.24864960]
[-36.65139389 -118.18772888]
[-44.37113571 -131.04873657]
[-52.22165298 -143.83033752]
[-60.07217407 -156.61193848]
[-72.02315521 -157.08195496]
[-82.14517212 -163.22439575]
[-87.96065521 -173.39944458]
[-88.11258698 -184.99790955]
[-82.67941284 -195.10992432]
[-90.00205994 -208.20109558]
[-104.01261902 -207.66929626]
[-116.81914520 -213.21160889]
[-125.93476868 -223.68939209]
[-129.61633301 -237.01185608]
[-127.19754028 -250.55303955]
[-119.20871735 -261.66940308]
[-126.26279449 -274.90722656]
[-133.31687927 -288.14505005]
[-148.65211487 -291.20520020]
[-158.39218140 -303.43896484]
[-157.93811035 -319.06994629]
[-147.50430298 -330.71768188]
[-132.01728821 -332.88244629]
[-118.78955078 -324.54214478]
[-114.06683350 -309.63476562]
[-120.07905579 -295.19912720]
[-113.02497101 -281.96130371]
[-105.97089386 -268.72348022]
[-89.84027863 -268.57946777]
[-75.89421844 -260.28753662]
[-67.97219849 -246.02079773]
[-68.31029510 -229.61196899]
[-76.91088104 -215.52374268]
[-69.58824158 -202.43257141]
[-51.73829269 -198.57310486]
[-42.16167831 -182.65107727]
[-47.29057312 -164.46246338]
[-39.44005203 -151.68086243]
[-31.58953285 -138.89926147]
[-25.37147331 -134.82107544]
[-23.71231270 -125.77589417]
[-16.12415123 -112.83680725]
[-8.53599072 -99.89772797]
[-0.94783086 -86.95864868]
[6.64032936 -74.01956940]
[14.22848988 -61.08048630]
[29.11626816 -59.24906921]
[39.61413193 -69.96330261]
[50.11199570 -80.67754364]
[60.60986328 -91.39177704]
[61.88468170 -107.38410187]
[75.26288605 -116.23865509]
[90.48185730 -111.16299438]
[95.86691284 -96.05072021]
[87.28708649 -82.49468231]
[71.32409668 -80.89391327]
[60.82623291 -70.17967224]
[50.32836914 -59.46543884]
[39.83050156 -48.75120544]
[35.31947327 -45.01911926]
[30.47132874 -42.66176987]
[25.61073112 -41.67186356]
[33.19889069 -28.73278236]
[40.78705215 -15.79370022]
[48.37520981 -2.85461903]
[55.96337128 10.08446217]
[63.55153275 23.02354431]
[71.13969421 35.96262360]
[78.72785187 48.90170670]
[86.31600952 61.84078598]
[93.90417480 74.77986908]
[118.34685516 81.65314484]
[125.22013092 106.09582520]
[138.15921021 113.68399048]
[151.09829712 121.27214813]
[164.03736877 128.86030579]
[176.97645569 136.44847107]
[192.09126282 132.68276978]
[205.10522461 140.56256104]
[208.60211182 154.99542236]
[221.54118347 162.58357239]
[234.48027039 170.17173767]
[247.41935730 177.75990295]
[263.81286621 177.33027649]
[272.14981079 191.45214844]
[263.85385132 205.59814453]
[247.45916748 205.21607971]
[239.83119202 190.69897461]
[226.89210510 183.11082458]
[213.95303345 175.52265930]
[201.01394653 167.93449402]
[186.71064758 171.92839050]
[173.48048401 164.41725159]
[169.38829041 149.38754272]
[156.44921875 141.79939270]
[143.51013184 134.21122742]
[130.57104492 126.62306976]
[117.63197327 119.03490448]
[114.99647522 121.17356110]
[112.10437012 122.94991302]
[109.00514221 124.33354950]
[109.92256165 139.30546570]
[110.83998871 154.27738953]
[111.75741577 169.24929810]
[112.67483521 184.22122192]
[113.59226227 199.19314575]
[125.59472656 209.47499084]
[126.72807312 225.23858643]
[116.31990051 237.13166809]
[100.54519653 238.09829712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 82]
[46 81]
[47 80]
[52 77]
[53 76]
[59 71]
[60 70]
[61 69]
[90 102]
[91 101]
[92 100]
[93 99]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
