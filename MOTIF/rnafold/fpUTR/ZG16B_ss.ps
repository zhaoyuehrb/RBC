%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCCUUCCCCCAGGAAGAGCCCCACGGCCAGCUCCUUCCUGUUCCCCUGGCGGCCCCUCGCUUCUUCCUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[66.24238586 136.46389771]
[60.79058838 130.52563477]
[47.69941330 137.84828186]
[34.60823822 145.17092896]
[21.51706123 152.49356079]
[8.57798004 160.08172607]
[-4.20362186 167.93225098]
[-16.98522377 175.78276062]
[-29.76682472 183.63328552]
[-42.54842758 191.48381042]
[-49.87868881 206.15347290]
[-66.26217651 206.86990356]
[-74.84497070 192.89607239]
[-66.79782104 178.60707092]
[-50.39894485 178.70220947]
[-37.61734390 170.85168457]
[-24.83574295 163.00115967]
[-12.05414200 155.15065002]
[0.72746003 147.30012512]
[4.89474964 140.93716431]
[14.19441795 139.40238953]
[27.28559494 132.07974243]
[40.37677002 124.75710297]
[53.46794510 117.43446350]
[51.00493622 91.71289825]
[61.79010391 68.23215485]
[82.90715790 53.34137726]
[108.64608765 51.06700897]
[113.45560455 36.85896301]
[118.26512146 22.65091896]
[123.07463837 8.44287395]
[122.88578033 -0.98069704]
[128.38098145 -6.23963118]
[133.76602173 -20.23967934]
[139.15106201 -34.23972702]
[127.89035797 -44.41622543]
[121.06974030 -57.97511673]
[119.61163330 -73.08267975]
[123.71323395 -87.69573212]
[132.81983948 -99.83798218]
[145.69984436 -107.86728668]
[160.61134338 -110.69776154]
[175.53767395 -107.94658661]
[188.46018982 -99.98585510]
[197.63119507 -87.89218140]
[201.81040955 -73.30113983]
[200.43263245 -58.18603897]
[193.68417358 -44.59108353]
[182.47772217 -34.35487747]
[168.32887268 -28.86177826]
[153.15110779 -28.85468674]
[147.76606750 -14.85463810]
[142.38102722 -0.85459065]
[137.28268433 13.25239086]
[132.47317505 27.46043587]
[127.66365051 41.66847992]
[122.85413361 55.87652588]
[129.68792725 60.15254593]
[135.74037170 65.47727966]
[140.85220337 71.71059418]
[144.88885498 78.68843842]
[147.74412537 86.22716522]
[149.34284973 94.12837219]
[149.64294434 102.18410492]
[148.63653564 110.18236542]
[146.35008240 117.91263580]
[142.84378052 125.17147827]
[138.20989990 131.76785278]
[132.57040405 137.52813721]
[126.07369995 142.30076599]
[118.89078522 145.96009827]
[111.21070099 148.40983582]
[103.23557281 149.58551025]
[95.17528534 149.45619202]
[87.24197388 148.02525330]
[79.64443207 145.33038330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[28 57]
[29 56]
[30 55]
[31 54]
[33 53]
[34 52]
[35 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
