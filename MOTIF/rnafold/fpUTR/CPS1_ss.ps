%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAUCGCUGUGCAGUCAGCCUUAAACACUGACUGCACCCCUCCCAGAUUUCUUUUACAUUAACUAAAAAGUCUUAUCACACAAUCUCAUAAAAUUUAUGUAAUUUCAUUUAAUUUUAGCCACAAAUCAUCAAA\
) } def
/len { sequence length } bind def

/coor [
[76.31176758 210.08201599]
[66.76758575 207.58619690]
[57.47848129 204.26458740]
[48.51575470 200.14266968]
[39.94820023 195.25210571]
[31.84158134 189.63043213]
[24.25812149 183.32077026]
[17.25602722 176.37158203]
[10.88904381 168.83618164]
[5.20604324 160.77243042]
[0.25064462 152.24221802]
[-13.47126293 158.30102539]
[-27.19317055 164.35984802]
[-40.91508102 170.41865540]
[-54.63698578 176.47747803]
[-68.35889435 182.53628540]
[-82.08080292 188.59510803]
[-95.80271149 194.65391541]
[-109.52462006 200.71273804]
[-123.24652863 206.77154541]
[-125.53265381 222.02859497]
[-135.72161865 233.61257935]
[-150.56214905 237.82710266]
[-165.31867981 233.32731628]
[-175.28248596 221.54910278]
[-177.27412415 206.25083923]
[-170.65808105 192.31414795]
[-157.54550171 184.18617249]
[-142.12059021 184.46051025]
[-129.30534363 193.04965210]
[-115.58343506 186.99082947]
[-101.86152649 180.93202209]
[-88.13961792 174.87319946]
[-74.41770935 168.81437683]
[-60.69580078 162.75556946]
[-46.97389603 156.69674683]
[-33.25198746 150.63793945]
[-19.53007889 144.57911682]
[-5.80817032 138.52030945]
[-11.04799747 118.64203644]
[-12.58655548 98.14241791]
[-10.37256622 77.70471191]
[-4.47982025 58.01011658]
[4.89527321 39.71505737]
[17.44024086 23.42931938]
[32.73695374 9.69570541]
[50.27556610 -1.02803421]
[69.47151184 -8.38447475]
[66.37543488 -23.06147385]
[63.27935791 -37.73847198]
[47.05400848 -47.38148117]
[43.00666428 -65.49240112]
[53.22850418 -80.59994507]
[49.45789719 -95.11830139]
[45.68728638 -109.63665009]
[41.91667938 -124.15499878]
[38.14607239 -138.67335510]
[23.32040977 -142.68524170]
[12.49833488 -153.58378601]
[8.59093380 -168.43733215]
[12.64927673 -183.25035095]
[23.58168983 -194.03820801]
[38.44741058 -197.89903259]
[53.24763107 -193.79428101]
[64.00116730 -182.82809448]
[67.81537628 -167.95034790]
[63.66425323 -153.16307068]
[52.66442490 -142.44395447]
[56.43503189 -127.92560577]
[60.20563889 -113.40725708]
[63.97624588 -98.88890839]
[67.74685669 -84.37055206]
[78.69718933 -80.81365967]
[86.62237549 -72.29658508]
[89.44049835 -60.88499832]
[86.32814789 -49.42526627]
[77.95635986 -40.83454895]
[81.05242920 -26.15755081]
[84.14850616 -11.48055172]
[100.83567047 -12.59877777]
[117.50439453 -11.23299503]
[133.78695679 -7.41333437]
[149.32415771 -1.22405899]
[163.77323914 7.19829082]
[176.81542969 17.66791153]
[188.16302490 29.95383835]
[197.56567383 43.78503036]
[204.81594849 58.85636520]
[209.75392151 74.83535767]
[212.27064514 91.36949921]
[212.31059265 108.09403992]
[227.16674805 110.16638947]
[242.02290344 112.23873138]
[256.87905884 114.31107330]
[271.73522949 116.38342285]
[286.59136963 118.45576477]
[301.44754028 120.52811432]
[318.29522705 113.19967651]
[331.73965454 124.41888428]
[346.63970947 126.14752960]
[361.53976440 127.87617493]
[373.77133179 117.86795807]
[389.48870850 119.52321625]
[399.36703491 131.85990906]
[397.54571533 147.55889893]
[385.10525513 157.30624390]
[369.42642212 155.31903076]
[359.81112671 142.77622986]
[344.91107178 141.04759216]
[330.01101685 139.31893921]
[320.28280640 146.60249329]
[307.80392456 145.22470093]
[299.37518311 135.38426208]
[284.51904297 133.31192017]
[269.66287231 131.23957825]
[254.80671692 129.16723633]
[239.95056152 127.09488678]
[225.09440613 125.02254486]
[210.23825073 122.95019531]
[207.80642700 132.51089478]
[204.54711914 141.82203674]
[200.48535156 150.81217957]
[195.65229797 159.41230774]
[190.08503723 167.55641174]
[183.82633972 175.18196106]
[176.92420959 182.23045349]
[169.43164062 188.64778137]
[161.40614319 194.38467407]
[152.90931702 199.39710999]
[144.00637817 203.64662170]
[134.76567078 207.10057068]
[125.25810242 209.73245239]
[115.55666351 211.52207947]
[105.73582458 212.45568848]
[95.87095642 212.52615356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[48 79]
[49 78]
[50 77]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
