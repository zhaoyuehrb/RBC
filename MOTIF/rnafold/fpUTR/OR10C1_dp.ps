%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:34 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (OR10C1)
} def

/sequence { (\
UGCCCAUUUCACGAUUCCAUAGUUGUGAUUUUUCCUUGCCAUUUCUUUUGUCUUCCAGUCAAAGGUAUGCAGGCAGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 75 0.297568690 ubox
2 74 0.330303296 ubox
3 73 0.329180122 ubox
3 77 0.041906512 ubox
4 72 0.325529334 ubox
4 73 0.023521941 ubox
4 76 0.042415954 ubox
4 77 0.067832342 ubox
5 27 0.004568562 ubox
5 38 0.004142766 ubox
5 69 0.016102899 ubox
5 72 0.032398091 ubox
5 76 0.068863032 ubox
6 26 0.004257368 ubox
6 29 0.043092741 ubox
6 37 0.004293572 ubox
6 68 0.015774961 ubox
7 25 0.003902405 ubox
7 28 0.022153392 ubox
7 67 0.014201741 ubox
8 27 0.007941044 ubox
8 28 0.043589567 ubox
8 71 0.003259954 ubox
9 27 0.007910157 ubox
9 28 0.933853177 ubox
10 27 0.999438814 ubox
11 23 0.003858630 ubox
11 26 0.999653935 ubox
12 22 0.004273950 ubox
12 25 0.999829129 ubox
13 24 0.998737194 ubox
13 30 0.007186034 ubox
13 31 0.004638850 ubox
14 20 0.003954129 ubox
14 23 0.998645193 ubox
14 29 0.007680852 ubox
14 30 0.004880760 ubox
15 19 0.005265755 ubox
15 22 0.983168483 ubox
15 28 0.007619073 ubox
16 21 0.749717620 ubox
16 27 0.007164928 ubox
16 28 0.007175582 ubox
17 27 0.007581152 ubox
18 25 0.010785863 ubox
18 27 0.004544426 ubox
19 24 0.010446843 ubox
19 26 0.004573742 ubox
20 25 0.004358237 ubox
27 34 0.010930327 ubox
28 32 0.004107281 ubox
28 33 0.017304918 ubox
29 76 0.010405860 ubox
29 77 0.022030448 ubox
30 75 0.012893491 ubox
30 76 0.032726538 ubox
30 77 0.046721929 ubox
31 75 0.034079065 ubox
31 76 0.074405573 ubox
31 77 0.079852755 ubox
32 75 0.078379945 ubox
32 76 0.128222407 ubox
32 77 0.013332908 ubox
33 73 0.004471734 ubox
33 75 0.137555992 ubox
33 76 0.017769002 ubox
33 77 0.030432439 ubox
34 72 0.006133265 ubox
34 73 0.134673488 ubox
34 76 0.047233884 ubox
34 77 0.390620193 ubox
35 72 0.136030947 ubox
35 73 0.225799303 ubox
35 76 0.398126200 ubox
35 77 0.786214087 ubox
36 71 0.098844292 ubox
36 72 0.230416688 ubox
36 75 0.281437401 ubox
36 76 0.803906923 ubox
36 77 0.004267748 ubox
37 67 0.010820470 ubox
37 71 0.389624038 ubox
37 72 0.004003607 ubox
37 75 0.858415692 ubox
37 76 0.003380367 ubox
38 66 0.012087231 ubox
38 70 0.419460131 ubox
38 74 0.905155606 ubox
39 65 0.012140599 ubox
39 69 0.335122928 ubox
39 73 0.905166076 ubox
40 64 0.012059326 ubox
40 69 0.291455238 ubox
40 72 0.893838306 ubox
41 66 0.020608205 ubox
41 68 0.450083572 ubox
42 63 0.004343283 ubox
42 65 0.011426175 ubox
42 67 0.444881833 ubox
43 62 0.004180117 ubox
43 64 0.008158183 ubox
43 65 0.009327802 ubox
43 71 0.012085582 ubox
44 61 0.003565466 ubox
44 63 0.005263783 ubox
44 64 0.005428734 ubox
44 65 0.157871800 ubox
44 71 0.013817597 ubox
45 64 0.171899100 ubox
45 65 0.982474748 ubox
46 63 0.150148680 ubox
46 64 0.983043770 ubox
46 65 0.006926510 ubox
47 62 0.123623699 ubox
47 63 0.985803415 ubox
47 64 0.006677928 ubox
47 65 0.004501186 ubox
48 58 0.013715866 ubox
48 61 0.089371310 ubox
48 62 0.990201389 ubox
48 63 0.006157819 ubox
48 64 0.003460428 ubox
49 57 0.021268548 ubox
49 61 0.994622644 ubox
49 62 0.005224416 ubox
49 71 0.025639764 ubox
50 56 0.021432222 ubox
50 59 0.020009484 ubox
50 60 0.997652368 ubox
50 70 0.025967535 ubox
51 58 0.060296900 ubox
51 65 0.003333618 ubox
51 69 0.025539376 ubox
52 58 0.967509583 ubox
52 64 0.003877948 ubox
53 57 0.872683285 ubox
53 63 0.003851438 ubox
54 62 0.003634429 ubox
55 65 0.025839597 ubox
56 64 0.025840109 ubox
9 28 0.9500000 lbox
10 27 0.9500000 lbox
11 26 0.9500000 lbox
12 25 0.9500000 lbox
13 24 0.9500000 lbox
14 23 0.9500000 lbox
15 22 0.9500000 lbox
16 21 0.9500000 lbox
35 77 0.9500000 lbox
36 76 0.9500000 lbox
37 75 0.9500000 lbox
38 74 0.9500000 lbox
39 73 0.9500000 lbox
40 72 0.9500000 lbox
45 65 0.9500000 lbox
46 64 0.9500000 lbox
47 63 0.9500000 lbox
48 62 0.9500000 lbox
49 61 0.9500000 lbox
50 60 0.9500000 lbox
52 58 0.9500000 lbox
53 57 0.9500000 lbox
showpage
end
%%EOF
