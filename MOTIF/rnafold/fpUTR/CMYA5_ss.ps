%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGAGGGAGAACACCAGGCGCGGCGCGGGCGGCUCCGGCUCCGGCCCCGGCCCAGGCCCGGGAGAGGCG\
) } def
/len { sequence length } bind def

/coor [
[164.71643066 165.01100159]
[179.15652466 160.94383240]
[166.61764526 152.71119690]
[154.07876587 144.47854614]
[141.53988647 136.24589539]
[129.00100708 128.01325989]
[116.46212006 119.78060913]
[103.92323303 111.54796600]
[91.04177856 103.86239624]
[77.84159088 96.73812866]
[64.64141083 89.61386108]
[51.44122696 82.48960114]
[39.32792664 89.42188263]
[25.48057938 89.38270569]
[13.59575558 82.49159241]
[6.79171562 70.68264008]
[6.79049206 57.16302490]
[-6.09096718 49.47745132]
[-18.96898651 51.86978149]
[-29.61347008 44.95485306]
[-32.47253418 33.00370026]
[-45.01141739 24.77105522]
[-57.55030060 16.53841019]
[-74.10912323 12.89950371]
[-75.19636536 -4.01954603]
[-59.23949814 -9.74795723]
[-49.31765747 3.99952817]
[-36.77877426 12.23217297]
[-24.23989105 20.46481705]
[-6.82428169 20.38158798]
[1.59460402 36.59599304]
[14.47606373 44.28156281]
[29.19520760 37.34141159]
[45.33322906 40.46476364]
[56.62350464 52.63631821]
[58.56549454 69.28941345]
[71.76567841 76.41368103]
[84.96585846 83.53794861]
[98.16604614 90.66221619]
[103.73703003 90.28440857]
[109.04928589 93.22763062]
[112.15588379 99.00908661]
[124.69476318 107.24172974]
[137.23364258 115.47437286]
[149.77252197 123.70701599]
[162.31141663 131.93966675]
[174.85029602 140.17230225]
[187.38917542 148.40495300]
[201.27804565 154.07057190]
[215.99765015 156.95735168]
[230.71723938 159.84411621]
[245.43684387 162.73089600]
[260.21514893 165.30029297]
[275.04528809 167.55111694]
[290.11148071 161.07485962]
[303.08953857 171.09991455]
[300.62878418 187.31338501]
[285.26058960 193.03623962]
[272.79446411 182.38128662]
[257.96429443 180.13044739]
[250.65687561 182.30796814]
[242.55006409 177.45048523]
[227.83045959 174.56372070]
[213.11087036 171.67694092]
[198.39126587 168.79017639]
[205.86592102 181.79515076]
[205.42495728 196.78866577]
[197.19891357 209.33187866]
[183.62312317 215.71138000]
[168.71670532 214.03849792]
[156.89270020 204.80851746]
[151.65159607 190.75393677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[9 39]
[10 38]
[11 37]
[12 36]
[17 32]
[18 31]
[21 29]
[22 28]
[23 27]
[49 65]
[50 64]
[51 63]
[52 62]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
