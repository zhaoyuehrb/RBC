%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGCGCAUCUGCGCAGGCGCCCGGCUCCUAAGUCUACCCAGGAACUGACCCUGCUCUCUCCUUUCCCUGUUAGAC\
) } def
/len { sequence length } bind def

/coor [
[143.16049194 165.79370117]
[133.77487183 154.09284973]
[124.38924408 142.39198303]
[115.00362396 130.69113159]
[105.61800385 118.99026489]
[90.72462463 117.20499420]
[78.83946991 126.35612488]
[66.95431519 135.50724792]
[55.06916046 144.65837097]
[49.32223511 160.01757812]
[33.10492706 162.45294189]
[23.10021591 149.45918274]
[29.60008812 134.40316772]
[45.91803360 132.77322388]
[57.80318832 123.62209320]
[69.68833923 114.47097015]
[81.57349396 105.31983948]
[79.78822327 90.42646027]
[66.07696533 84.34358215]
[52.36570740 78.26070404]
[36.61352158 79.73692322]
[28.11739922 67.50315094]
[14.40614319 61.42027283]
[-2.52409554 60.52396393]
[-6.34957218 44.00724030]
[8.46267223 35.75898361]
[20.48902321 47.70901489]
[34.20027924 53.79189301]
[48.97174454 51.88058472]
[58.44858551 64.54944611]
[72.15984344 70.63232422]
[85.87110138 76.71520233]
[76.75463104 64.80344391]
[71.17820740 50.87852097]
[74.43019867 36.23527908]
[85.37663269 25.97976494]
[100.20053101 23.68804169]
[113.73284912 30.15922737]
[121.25492096 43.13684082]
[120.14382172 58.09563446]
[110.78902435 69.81813812]
[106.99702454 84.33091736]
[117.28261566 73.41273499]
[127.56819916 62.49455643]
[137.85379028 51.57637405]
[135.84736633 36.06804276]
[144.32241821 22.92621613]
[159.27726746 18.35606194]
[173.65071106 24.51546669]
[180.65603638 38.49614716]
[176.98554993 53.69685364]
[164.37232971 62.94028091]
[148.77197266 61.86196136]
[138.48638916 72.78014374]
[128.20079041 83.69832611]
[117.91520691 94.61650848]
[117.31886292 109.60464478]
[126.70448303 121.30550385]
[136.09010315 133.00636292]
[145.47572327 144.70722961]
[154.86134338 156.40808105]
[169.00305176 151.03523254]
[184.11300659 150.29739380]
[198.71089172 154.26686096]
[211.36657715 162.55473328]
[220.84016418 174.34906006]
[226.20355225 188.49435425]
[226.93125916 203.60481262]
[222.95201111 218.20004272]
[214.65565491 230.85015869]
[202.85498047 240.31585693]
[188.70610046 245.66975403]
[173.59516907 246.38734436]
[159.00260925 242.39831543]
[146.35804749 234.09347534]
[136.90026855 222.28646851]
[131.55584717 208.13400269]
[130.84838867 193.02258301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[6 17]
[7 16]
[8 15]
[9 14]
[18 32]
[19 31]
[20 30]
[22 28]
[23 27]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
