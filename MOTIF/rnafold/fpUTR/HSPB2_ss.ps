%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCGAGCCCUGGCUCUCCGGGCAGCUGGAGGGGUCGCGCUGCGCCUGUUGGGGCUGCACCUCGGACCAGGGCUUCUGCUGCAUCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[170.07781982 359.96038818]
[163.92764282 353.76849365]
[159.95504761 345.95935059]
[158.56098938 337.27471924]
[159.90029907 328.54675293]
[163.86491394 320.61834717]
[170.09223938 314.26162720]
[164.75532532 300.24316406]
[159.41842651 286.22467041]
[154.08151245 272.20620728]
[148.74461365 258.18774414]
[143.40769958 244.16928101]
[138.07080078 230.15081787]
[132.73388672 216.13235474]
[127.39698029 202.11387634]
[121.96778870 196.87973022]
[122.12378693 187.54267883]
[117.25329590 173.35542297]
[112.38280487 159.16816711]
[98.93050385 152.87759399]
[93.78903198 138.55908203]
[100.47837067 124.49172211]
[95.60787201 110.30445862]
[90.50347900 96.19966888]
[85.16657257 82.18120575]
[79.82966614 68.16273499]
[74.49275208 54.14426804]
[69.15584564 40.12580109]
[63.81893921 26.10733604]
[49.29594803 14.93778133]
[52.52561188 -2.22452116]
[46.72812653 -16.05886841]
[34.25833893 -25.79616547]
[36.47528839 -40.52485657]
[30.67780304 -54.35920334]
[24.88031578 -68.19355011]
[18.55443954 -75.06291962]
[19.12823486 -82.58244324]
[13.79132843 -96.60090637]
[8.45442009 -110.61937714]
[-2.83173966 -123.27081299]
[6.20095682 -137.61817932]
[22.48811531 -132.91021729]
[22.47288704 -115.95628357]
[27.80979538 -101.93781281]
[33.14670181 -87.91934967]
[38.71466064 -73.99103546]
[44.51214981 -60.15669250]
[50.30963516 -46.32234573]
[62.36474991 -37.57457352]
[60.56247330 -21.85635567]
[66.35996246 -8.02200890]
[77.53154755 -3.06819296]
[82.41463470 8.57332420]
[77.83740997 20.77042770]
[83.17431641 34.78889465]
[88.51122284 48.80736160]
[93.84812927 62.82582855]
[99.18503571 76.84429169]
[104.52194214 90.86276245]
[110.21284485 96.81419373]
[109.79513550 105.43396759]
[114.66562653 119.62123108]
[128.58480835 126.61367035]
[133.32206726 141.07095337]
[126.57006073 154.29766846]
[131.44055176 168.48492432]
[136.31105042 182.67218018]
[141.41545105 196.77697754]
[146.75234985 210.79544067]
[152.08926392 224.81390381]
[157.42616272 238.83238220]
[162.76307678 252.85084534]
[168.09999084 266.86932373]
[173.43688965 280.88778687]
[178.77380371 294.90625000]
[184.11070251 308.92471313]
[205.32554626 315.83303833]
[214.99629211 335.65173340]
[207.56329346 356.13827515]
[215.55876160 368.82971191]
[223.55424500 381.52111816]
[231.54971313 394.21255493]
[239.54519653 406.90399170]
[254.29733276 414.06683350]
[255.20016479 430.44110107]
[241.32492065 439.18237305]
[226.94526672 431.29837036]
[226.85375977 414.89947510]
[218.85829163 402.20803833]
[210.86280823 389.51660156]
[202.86734009 376.82516479]
[194.87185669 364.13375854]
[186.33869934 365.38421631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[17 68]
[18 67]
[19 66]
[22 63]
[23 62]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[38 46]
[39 45]
[40 44]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
