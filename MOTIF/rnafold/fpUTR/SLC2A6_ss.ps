%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGCGGAGCCUGGCCGGUGCCCUCGGAGCUGCUGGCCCCGGGCGGCUGCUCCAGUCUGAGCGCCCUCCGCUCGCCCCGAGAGAGACCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[100.21401215 201.68464661]
[107.70617676 188.54225159]
[118.89424133 178.35980225]
[112.70362854 164.69683838]
[106.51302338 151.03387451]
[100.32241821 137.37092590]
[94.13181305 123.70796967]
[80.90229034 100.12599945]
[67.67346954 93.05504608]
[54.44464874 85.98409271]
[41.21583176 78.91314697]
[27.98701286 71.84219360]
[14.53392124 65.20786285]
[0.87096351 59.01725769]
[-12.79199409 52.82665253]
[-28.55530930 54.17885208]
[-36.95488358 41.87858963]
[-50.61783981 35.68798447]
[-64.28079987 29.49737740]
[-77.94375610 23.30677223]
[-93.70706940 24.65897179]
[-102.10664368 12.35871029]
[-115.76959991 6.16810465]
[-129.43255615 -0.02250074]
[-144.06958008 5.30623484]
[-157.83757019 -1.16655350]
[-162.82749939 -15.15355396]
[-176.49046326 -21.34415817]
[-192.74871826 -19.19915771]
[-202.51950073 -32.36972809]
[-195.75144958 -47.30711746]
[-179.40696716 -48.64501953]
[-170.29985046 -35.00711823]
[-156.63690186 -28.81651115]
[-142.83082581 -34.28715134]
[-128.88645935 -28.20363045]
[-123.24195099 -13.68545818]
[-109.57899475 -7.49485254]
[-95.91603851 -1.30424726]
[-81.12998962 -3.09923959]
[-71.75315094 9.64381504]
[-58.09019089 15.83442116]
[-44.42723465 22.02502632]
[-30.76427841 28.21563148]
[-15.97822762 26.42063904]
[-6.60138845 39.16369629]
[7.06156874 45.35430145]
[20.72452545 51.54490662]
[25.59821892 50.64989853]
[31.06580925 52.94888687]
[35.05796432 58.61337280]
[48.28678131 65.68432617]
[61.51560211 72.75527954]
[74.74442291 79.82622528]
[87.97323608 86.89717865]
[82.25627136 73.02936554]
[88.63893127 59.45506668]
[102.96576691 55.01189041]
[115.90922546 62.59259033]
[119.04239655 77.26171112]
[110.32581329 89.46863556]
[124.81470490 85.58634949]
[139.30358887 81.70406342]
[153.79248047 77.82177734]
[168.28135681 73.93949127]
[177.51583862 60.82065201]
[193.53813171 60.00485992]
[204.05732727 72.11792755]
[201.00396729 87.86773682]
[186.72036743 95.17239380]
[172.16365051 88.42838287]
[157.67475891 92.31066895]
[143.18586731 96.19294739]
[128.69699097 100.07523346]
[114.20809937 103.95751953]
[107.79477692 117.51736450]
[113.98538208 131.18031311]
[120.17598724 144.84327698]
[126.36659241 158.50624084]
[132.55718994 172.16918945]
[147.58956909 170.47132874]
[162.41047668 173.50379944]
[175.56791687 180.96952820]
[185.77284241 192.13710022]
[192.02548218 205.91242981]
[193.71328735 220.94593811]
[190.67088318 235.76481628]
[183.19633484 248.91723633]
[172.02192688 259.11468506]
[158.24241638 265.35809326]
[143.20777893 267.03582764]
[128.39094543 263.98348999]
[115.24353027 256.50012207]
[105.05357361 245.31889343]
[98.81939697 231.53520203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[13 48]
[14 47]
[15 46]
[17 44]
[18 43]
[19 42]
[20 41]
[22 39]
[23 38]
[24 37]
[27 34]
[28 33]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
