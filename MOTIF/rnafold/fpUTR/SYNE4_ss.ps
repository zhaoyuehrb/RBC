%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAGCCUCAGGCCCGGGUGACUCCAGCGGAGGAGCUCUGGGACACCCUUGUCUAGGGAAGAGGUCUUACUGGCUGCCCUCACCUGACUUUGUGUCCCCAGGCCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[94.95460510 277.51208496]
[79.76341248 281.22174072]
[65.76470947 274.25250244]
[59.56826019 259.89498901]
[64.09983063 244.92840576]
[77.21975708 236.41949463]
[78.88442230 221.51216125]
[66.81055450 212.78935242]
[60.68317032 199.10317993]
[62.23925781 184.08836365]
[71.16051483 171.78762817]
[85.13209534 165.56329346]
[86.79676056 150.65596008]
[88.46142578 135.74861145]
[90.12609100 120.84127045]
[82.91896820 115.49486542]
[78.29804230 107.80242157]
[63.29949570 108.01092529]
[48.30094528 108.21942902]
[33.30239487 108.42794037]
[22.32178307 119.47619629]
[7.10814905 119.47399139]
[-3.35700393 108.93756866]
[-18.35555458 109.14607239]
[-33.35410690 109.35457611]
[-48.35265732 109.56308746]
[-64.10620880 115.82901001]
[-74.48828125 102.42568970]
[-64.48281097 88.73895264]
[-48.56116104 94.56453705]
[-33.56261063 94.35602570]
[-18.56406021 94.14752197]
[-3.56551003 93.93901825]
[6.60270643 83.11575317]
[21.81040001 82.69064331]
[33.09388733 93.42938995]
[48.09243774 93.22087860]
[63.09098816 93.01237488]
[78.08953857 92.80387115]
[90.65893555 78.91452789]
[109.39133453 78.93687439]
[119.62300873 67.96814728]
[129.85467529 56.99942017]
[140.08634949 46.03069687]
[150.31800842 35.06196976]
[160.54968262 24.09324455]
[170.78135681 13.12451935]
[167.14668274 -0.25385639]
[170.60556030 -13.56646633]
[180.14091492 -23.32800293]
[193.15969849 -27.03833389]
[206.19737244 -23.82227898]
[216.73001099 -34.50234222]
[227.26263428 -45.18240738]
[231.13410950 -53.61531448]
[238.23960876 -56.00785065]
[249.06504822 -66.39099884]
[259.89050293 -76.77415466]
[260.38391113 -92.34317017]
[271.51034546 -102.71894836]
[286.35000610 -102.15261078]
[297.17544556 -112.53575897]
[301.75897217 -132.06954956]
[320.56600952 -136.18766785]
[330.79766846 -147.15640259]
[341.02935791 -158.12512207]
[351.26101685 -169.09384155]
[352.14285278 -185.11264038]
[365.29965210 -194.29296875]
[380.63864136 -189.59245300]
[386.39306641 -174.61694336]
[378.14862061 -160.85435486]
[362.22973633 -158.86218262]
[351.99807739 -147.89344788]
[341.76638794 -136.92472839]
[331.53472900 -125.95600128]
[332.80416870 -115.64343262]
[328.01950073 -106.17156219]
[318.58001709 -100.85626221]
[307.55859375 -101.71031952]
[296.73315430 -91.32716370]
[296.68032837 -76.47682190]
[285.84970093 -65.79261780]
[270.27365112 -65.94870758]
[259.44821167 -55.56555939]
[248.62275696 -45.18240738]
[237.94268799 -34.64978409]
[227.41006470 -23.96971703]
[216.87744141 -13.28965282]
[220.09243774 2.74202037]
[213.09436035 17.70230865]
[198.43750000 25.66768837]
[181.75007629 23.35618973]
[171.51840210 34.32491302]
[161.28674316 45.29364014]
[151.05506897 56.26236343]
[140.82339478 67.23108673]
[130.59173584 78.19981384]
[120.36006165 89.16854095]
[122.88396454 102.85951233]
[117.06871033 115.50844574]
[105.03343201 122.50593567]
[103.36876678 137.41328430]
[101.70410156 152.32061768]
[100.03943634 167.22796631]
[112.29386902 176.38088989]
[118.28202820 190.34651184]
[116.48775482 205.33474731]
[107.49234009 217.33218384]
[93.79176331 223.17681885]
[92.12709808 238.08416748]
[103.04692078 249.27754211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 111]
[7 110]
[12 105]
[13 104]
[14 103]
[15 102]
[17 39]
[18 38]
[19 37]
[20 36]
[23 33]
[24 32]
[25 31]
[26 30]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[52 89]
[53 88]
[54 87]
[56 86]
[57 85]
[58 84]
[61 81]
[62 80]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
