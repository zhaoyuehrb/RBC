%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCCCCGCGCGCCGUGGCCGUUUGAAGUGACUAAUUUCUGUCAUAUGACUGAGGCGCCCAUGGGGGUGGCGGGGCGGCUGUAGGAGCAGGGGCCUAGCAAGCGCCCAGCGGAGCGACCCCUGCCUGGCCGUGGCUAGC\
) } def
/len { sequence length } bind def

/coor [
[144.36711121 162.85278320]
[131.83815002 154.60505676]
[119.30918884 146.35731506]
[106.78022766 138.10958862]
[94.25126648 129.86186218]
[80.67605591 123.48113251]
[66.33094788 119.09730530]
[51.98583984 114.71348572]
[37.64073181 110.32965851]
[23.29562759 105.94583130]
[8.95052052 101.56201172]
[-5.39458609 97.17818451]
[-19.78698158 92.95219421]
[-34.22492599 88.88455200]
[-51.91769791 93.85730743]
[-63.70989990 80.90535736]
[-78.23371887 77.15586090]
[-92.75753784 73.40636444]
[-107.28134918 69.65686798]
[-121.80516815 65.90737152]
[-136.32899475 62.15787506]
[-151.62513733 66.19997406]
[-162.01431274 55.52690506]
[-176.53811646 51.77740860]
[-191.06193542 48.02791214]
[-205.58575439 44.27841568]
[-220.10957336 40.52892303]
[-234.70877075 54.05132675]
[-254.35717773 56.12297821]
[-271.21105957 46.08812714]
[-278.64474487 28.08997917]
[-293.44158936 25.62961578]
[-308.23843384 23.16925049]
[-323.03527832 20.70888519]
[-337.83212280 18.24852180]
[-348.79348755 29.23160172]
[-364.12237549 31.64091682]
[-377.92449951 24.55003738]
[-384.89270020 10.68554878]
[-382.34753418 -4.62136745]
[-371.26763916 -15.48489189]
[-355.91354370 -17.72777557]
[-342.18911743 -10.48758602]
[-335.37176514 3.45167685]
[-320.57492065 5.91204166]
[-305.77807617 8.37240601]
[-290.98123169 10.83277130]
[-276.18438721 13.29313564]
[-270.49267578 4.45469570]
[-262.12948608 -1.97808468]
[-252.05337524 -5.23524618]
[-241.43035889 -4.91269827]
[-231.49880981 -1.02216423]
[-223.42526245 6.00717545]
[-218.16731262 15.37587738]
[-216.36007690 26.00510406]
[-201.83625793 29.75460052]
[-187.31243896 33.50409698]
[-172.78862000 37.25359344]
[-158.26481628 41.00308990]
[-144.00750732 36.69280243]
[-132.57949829 47.63405991]
[-118.05567169 51.38355255]
[-103.53185272 55.13304901]
[-89.00804138 58.88254547]
[-74.48422241 62.63204193]
[-59.96040344 66.38153839]
[-49.33557510 60.49821854]
[-37.16807175 63.56003189]
[-30.15728569 74.44660950]
[-15.71933842 78.51425171]
[-8.37135410 77.29108429]
[-1.01076138 82.83307648]
[13.33434486 87.21690369]
[27.67945099 91.60072327]
[42.02455902 95.98455048]
[56.36966324 100.36837769]
[70.71476746 104.75219727]
[85.05987549 109.13602448]
[86.38875580 91.46137238]
[101.43920898 85.44750977]
[110.36228943 73.39019775]
[119.28536987 61.33289337]
[118.34664917 45.31732559]
[130.37863159 34.70549774]
[146.15141296 37.63789749]
[153.56546021 51.86503983]
[146.93334961 66.47307587]
[131.34268188 70.25596619]
[122.41959381 82.31327820]
[113.49652100 94.37058258]
[113.97400665 107.93104553]
[102.49899292 117.33289337]
[115.02796173 125.58062744]
[127.55692291 133.82835388]
[140.08589172 142.07609558]
[152.61485291 150.32382202]
[165.32196045 158.29434204]
[178.20111084 165.98377991]
[191.08026123 173.67323303]
[203.95941162 181.36268616]
[216.83854675 189.05212402]
[229.56437683 186.66004944]
[240.15226746 193.39201355]
[243.18324280 205.15269470]
[255.89036560 213.12321472]
[268.59747314 221.09371948]
[284.39953613 221.87210083]
[291.06997681 235.18954468]
[303.77709961 243.16006470]
[316.48422241 251.13056946]
[329.19134521 259.10107422]
[341.98526001 266.93154907]
[354.86441040 274.62097168]
[367.74353027 282.31042480]
[381.95651245 276.08377075]
[397.10772705 279.43334961]
[407.37127686 291.07119751]
[408.80059814 306.52230835]
[400.84609985 319.84539795]
[386.56640625 325.91751099]
[371.45242310 322.40377808]
[361.31570435 310.65527344]
[360.05410767 295.18957520]
[347.17495728 287.50012207]
[334.29580688 279.81069946]
[326.88293457 279.07681274]
[321.22082520 271.80819702]
[308.51370239 263.83770752]
[295.80657959 255.86717224]
[283.09945679 247.89666748]
[268.20632935 247.68840027]
[260.62698364 233.80084229]
[247.91986084 225.83032227]
[235.21273804 217.85981750]
[217.70005798 218.19914246]
[209.14910889 201.93127441]
[196.26995850 194.24182129]
[183.39080811 186.55238342]
[170.51167297 178.86293030]
[157.63252258 171.17347717]
[152.79551697 171.47636414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 71]
[14 70]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[81 91]
[82 90]
[83 89]
[98 141]
[99 140]
[100 139]
[101 138]
[102 137]
[105 135]
[106 134]
[107 133]
[109 131]
[110 130]
[111 129]
[112 128]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
