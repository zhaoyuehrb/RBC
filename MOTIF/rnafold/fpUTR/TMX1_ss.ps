%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCAUUGAGAGUCCUCUAGACAGGCGCUCCUCGCAGCACCGUAGUGCGCUUGCGCUGAGCAGCCCGCGAGGGCGGAAGUGGGAGCUGCGACCGCGCUCCCUGUGAGGUGGGCAAGCGGCGAA\
) } def
/len { sequence length } bind def

/coor [
[71.70418549 422.47903442]
[60.87163162 410.97116089]
[61.43265915 395.17681885]
[73.05442810 384.46655273]
[73.42839050 369.47119141]
[73.80234528 354.47586060]
[71.13999176 350.39056396]
[71.09228516 344.56872559]
[74.58731842 338.74752808]
[75.70826721 323.78945923]
[64.24575806 314.31588745]
[60.51551437 299.73681641]
[66.15111542 285.59136963]
[79.18604279 277.38180542]
[80.30699158 262.42373657]
[81.42794037 247.46569824]
[82.54889679 232.50764465]
[75.78433990 219.23774719]
[84.53129578 206.05436707]
[85.65224457 191.09631348]
[75.77227783 180.00929260]
[76.69599915 164.82373047]
[88.39206696 154.53588867]
[89.51302338 139.57783508]
[90.63397217 124.61977386]
[91.75492096 109.66172028]
[92.31578827 94.67221069]
[92.31578827 79.67221069]
[92.31578827 64.67221069]
[92.31578827 49.67220688]
[81.71524048 41.25709915]
[77.98548889 28.44978714]
[82.28286743 16.02805328]
[92.81210327 8.49099636]
[93.18606567 -6.50434160]
[93.56002808 -21.49967957]
[93.93398285 -36.49501801]
[94.30794525 -51.49035645]
[94.68190765 -66.48569489]
[95.05587006 -81.48103333]
[85.86110687 -97.37643433]
[95.45932770 -112.01185608]
[95.45932770 -127.01185608]
[95.45932770 -142.01185608]
[81.67131805 -151.71815491]
[76.39905548 -167.56022644]
[81.51856995 -183.27833557]
[94.84009552 -192.78422546]
[94.46613312 -207.77955627]
[94.09217834 -222.77488708]
[86.01322937 -236.37788391]
[93.43082428 -249.29409790]
[93.05686951 -264.28942871]
[92.68290710 -279.28475952]
[92.30894470 -294.28012085]
[91.93498993 -309.27545166]
[91.18730164 -324.25680542]
[90.06634521 -339.21484375]
[88.94539642 -354.17291260]
[79.26538849 -367.41033936]
[86.13596344 -382.30084229]
[102.48925781 -383.52636719]
[111.50240326 -369.82617188]
[103.90345001 -355.29385376]
[105.02440643 -340.33581543]
[106.14535522 -325.37774658]
[109.20124817 -321.57781982]
[109.82837677 -315.78967285]
[106.93032074 -309.64941406]
[107.30428314 -294.65405273]
[107.67824554 -279.65872192]
[108.05220795 -264.66339111]
[108.42616272 -249.66806030]
[116.47836304 -237.13763428]
[109.08751678 -223.14884949]
[109.46147156 -208.15351868]
[109.83543396 -193.15817261]
[121.53085327 -186.59474182]
[128.48776245 -175.00215149]
[128.78234863 -161.37687683]
[122.22938538 -149.30352783]
[110.45932770 -142.01185608]
[110.45932770 -127.01185608]
[110.45932770 -112.01185608]
[118.82149506 -103.17631531]
[118.87902832 -90.60894775]
[110.05120850 -81.10707092]
[109.67724609 -66.11173248]
[109.30328369 -51.11639404]
[108.92932129 -36.12105560]
[108.55536652 -21.12571907]
[108.18140411 -6.13038111]
[107.80744171 8.86495686]
[119.89620209 20.48531151]
[119.89331818 37.58975983]
[107.31578827 49.67220688]
[107.31578827 64.67221069]
[107.31578827 79.67221069]
[107.31578827 94.67221069]
[109.72595978 97.83943939]
[110.67551422 102.07805634]
[109.70899200 106.68653870]
[106.71298218 110.78266907]
[105.59202576 125.74073029]
[104.47107697 140.69879150]
[103.35012817 155.65684509]
[113.38224030 167.57298279]
[112.03234863 182.72660828]
[100.61029816 192.21726990]
[99.48934937 207.17532349]
[106.17372894 221.51510620]
[97.50695038 233.62858582]
[96.38600159 248.58663940]
[95.26505280 263.54470825]
[94.14409637 278.50274658]
[105.80986023 288.56338501]
[109.27424622 303.39077759]
[103.41277313 317.25103760]
[90.66632080 324.91043091]
[89.54537201 339.86846924]
[88.79768372 354.84982300]
[88.42372131 369.84515381]
[88.04976654 384.84051514]
[99.12322235 396.11676025]
[98.89627075 411.91943359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[9 120]
[10 119]
[14 115]
[15 114]
[16 113]
[17 112]
[19 110]
[20 109]
[23 106]
[24 105]
[25 104]
[26 103]
[27 99]
[28 98]
[29 97]
[30 96]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[39 88]
[40 87]
[42 84]
[43 83]
[44 82]
[48 77]
[49 76]
[50 75]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
