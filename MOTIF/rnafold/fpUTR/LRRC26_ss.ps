%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCCGCAGGAACGGGCUCCGCGGACGACGGGCUCCAGGGACGCACAGGCAGCGGGCCUCCCACCGCGGGUGCCGGGGGCGGGGGGGCUGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[283.38311768 335.43911743]
[273.94961548 323.77682495]
[264.51608276 312.11456299]
[255.08258057 300.45227051]
[245.64906311 288.78997803]
[236.21556091 277.12771606]
[226.59443665 265.61972046]
[216.78822327 254.26901245]
[209.90246582 251.20748901]
[206.85549927 242.38832092]
[197.42199707 230.72602844]
[181.15522766 232.13433838]
[167.07754517 223.54222107]
[160.76812744 208.12580872]
[164.86274719 191.80920410]
[155.05654907 180.45851135]
[145.25033569 169.10781860]
[135.44412231 157.75712585]
[128.55836487 154.69560242]
[125.51140594 145.87641907]
[116.07789612 134.21414185]
[106.64437866 122.55185699]
[97.21086884 110.88957977]
[85.24922943 101.83866119]
[71.46176910 95.93051910]
[57.67431641 90.02238464]
[44.41580582 98.08412170]
[28.95367432 96.77949524]
[17.23342133 86.61016083]
[13.76172638 71.48644257]
[19.87352562 57.22370911]
[33.21870804 49.30627823]
[48.66577911 50.77856064]
[60.27502441 61.07443619]
[63.58245468 76.23493195]
[77.36991119 82.14306641]
[91.15736389 88.05120087]
[97.28159332 83.72178650]
[83.65863800 77.44363403]
[82.28431702 62.50672150]
[94.53295898 53.84815979]
[108.15577698 60.12661362]
[109.53004456 75.06295776]
[115.65427399 70.73354340]
[114.68332672 55.76499939]
[105.13650513 42.43119812]
[112.15600586 27.61030960]
[128.52076721 26.54879570]
[137.39611816 40.33864975]
[129.65187073 54.79405212]
[130.62281799 69.76259613]
[124.78787994 92.10868835]
[108.87315369 101.45606232]
[118.30666351 113.11834717]
[127.74017334 124.78063202]
[137.17369080 136.44291687]
[146.79481506 147.95091248]
[156.60102844 159.30160522]
[166.40724182 170.65229797]
[176.21343994 182.00299072]
[189.93345642 179.82702637]
[202.81726074 184.72271729]
[211.49189758 195.29257202]
[213.74409485 208.66915894]
[209.08427429 221.29252625]
[218.51779175 232.95480347]
[228.13891602 244.46279907]
[237.94512939 255.81349182]
[246.08485413 260.37490845]
[247.87783813 267.69418335]
[257.31134033 279.35647583]
[266.74487305 291.01876831]
[276.17837524 302.68103027]
[285.61187744 314.34332275]
[295.04541016 326.00561523]
[304.66653442 337.51361084]
[314.47274780 348.86428833]
[324.27893066 360.21499634]
[334.08514404 371.56567383]
[343.89135742 382.91638184]
[353.69757080 394.26705933]
[363.50378418 405.61776733]
[373.30999756 416.96844482]
[389.14138794 419.56585693]
[396.85534668 433.63265991]
[390.53436279 448.37799072]
[375.02737427 452.49050903]
[362.23001099 442.81542969]
[361.95932007 426.77465820]
[352.15310669 415.42398071]
[342.34689331 404.07327271]
[332.54067993 392.72259521]
[322.73446655 381.37188721]
[312.92825317 370.02120972]
[303.12203979 358.67050171]
[293.31582642 347.31982422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 68]
[8 67]
[10 66]
[11 65]
[15 60]
[16 59]
[17 58]
[18 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 37]
[25 36]
[26 35]
[44 51]
[45 50]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
