%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUAGGCCGCGUCACGUGACGGGCUCAGCGCUCCGCAGUCACGUGACGCUCGUCCGCAACCUCUGCUGUCCUCCGCGGCGCCCCCUUCCGCCUGACGCGCCCCCGGCGGCGGCCGCGCAGCCCUGGCUCCUCGCGGGCUCGGGCGGCGGCUGCGGCGGGGCU\
) } def
/len { sequence length } bind def

/coor [
[213.80932617 136.51373291]
[209.24755859 123.81109619]
[195.03593445 119.01218414]
[180.82429504 114.21327209]
[166.61267090 109.41436005]
[152.40103149 104.61544800]
[138.18940735 99.81653595]
[123.97777557 95.01762390]
[110.71517181 118.63288879]
[87.63778687 113.76103210]
[73.95023346 119.89706421]
[60.26268005 126.03308868]
[46.57512665 132.16912842]
[32.88757324 138.30514526]
[19.20001793 144.44117737]
[5.51246405 150.57720947]
[-8.17508984 156.71324158]
[-21.86264420 162.84927368]
[-35.55019760 168.98530579]
[-49.23775482 175.12132263]
[-62.92530823 181.25735474]
[-76.36779022 187.91316223]
[-89.54547119 195.07894897]
[-102.72315979 202.24475098]
[-115.90084076 209.41055298]
[-121.80811310 224.32643127]
[-137.19436646 228.86984253]
[-150.25660706 219.55545044]
[-150.97457886 203.52847290]
[-138.79751587 193.08343506]
[-123.06664276 196.23286438]
[-109.88895416 189.06706238]
[-96.71127319 181.90127563]
[-83.53358459 174.73547363]
[-82.62153625 172.03788757]
[-80.56089783 169.54821777]
[-77.42875671 167.71527100]
[-73.46648407 166.95024109]
[-69.06134033 167.56980896]
[-55.37378311 161.43377686]
[-41.68622971 155.29774475]
[-27.99867439 149.16171265]
[-14.31112003 143.02568054]
[-0.62356550 136.88966370]
[13.06398869 130.75363159]
[26.75154305 124.61759949]
[40.43909836 118.48156738]
[54.12665176 112.34553528]
[67.81420898 106.20951080]
[81.50176239 100.07347870]
[84.29872894 85.32112122]
[98.45060730 75.55910492]
[90.05741882 63.12711716]
[82.62618256 57.73369598]
[81.62519836 50.37563324]
[73.47168732 37.78515244]
[65.31817627 25.19466972]
[57.16466141 12.60418797]
[42.47631454 16.28266144]
[27.38963509 14.99004078]
[13.54111767 8.86654091]
[2.43294215 -1.42360830]
[-4.72995806 -14.76420689]
[-7.17060566 -29.70816803]
[-4.62425709 -44.63447952]
[2.63287854 -57.92405319]
[13.81360149 -68.13533020]
[27.70511055 -74.16066742]
[42.80056000 -75.34648132]
[57.46250534 -71.56414795]
[70.10053253 -63.22394180]
[79.34375763 -51.23054886]
[84.18955231 -36.88492203]
[84.11227417 -21.74316597]
[79.12030792 -7.44774771]
[69.75514221 4.45067453]
[77.90865326 17.04115677]
[86.06217194 29.63163757]
[94.21568298 42.22211838]
[102.48941040 54.73392868]
[110.88259888 67.16592407]
[107.44564056 52.56498337]
[112.07862854 38.29840088]
[123.43828583 28.50257492]
[138.23103333 26.01767731]
[152.16790771 31.56417274]
[161.20808411 43.53392410]
[162.73051453 58.45646667]
[156.29376221 72.00520325]
[143.76408386 80.25185394]
[128.77668762 80.80599213]
[142.98831177 85.60490417]
[157.19995117 90.40381622]
[171.41157532 95.20272827]
[185.62321472 100.00164032]
[199.83483887 104.80055237]
[214.04647827 109.59946442]
[229.55287170 101.55017090]
[245.77160645 107.07505035]
[252.85501099 122.30519104]
[267.15594482 126.83100128]
[281.45690918 131.35681152]
[295.75784302 135.88261414]
[310.05880737 140.40843201]
[316.66101074 139.34733582]
[321.98852539 141.48886108]
[324.81488037 145.39118958]
[338.93197632 150.46144104]
[354.53521729 147.84425354]
[363.89801025 159.42816162]
[378.01510620 164.49841309]
[392.13220215 169.56866455]
[406.24932861 174.63891602]
[420.36642456 179.70918274]
[434.48352051 184.77943420]
[448.60061646 189.84968567]
[462.71771240 194.91993713]
[472.32525635 189.69650269]
[483.00000000 190.63031006]
[491.20999146 197.16848755]
[494.37368774 206.94451904]
[508.28622437 212.55177307]
[522.19873047 218.15902710]
[536.11126709 223.76628113]
[551.80334473 221.74865723]
[560.71557617 233.68269348]
[574.62811279 239.28994751]
[588.54064941 244.89720154]
[602.45318604 250.50445557]
[616.36572266 256.11172485]
[631.63159180 251.17898560]
[644.92620850 260.15863037]
[646.05096436 276.16220093]
[634.14312744 286.91314697]
[618.33734131 284.16424561]
[610.75848389 270.02426147]
[596.84594727 264.41699219]
[582.93341064 258.80975342]
[569.02081299 253.20248413]
[555.10827637 247.59523010]
[540.41137695 250.01391602]
[530.50402832 237.67881775]
[516.59149170 232.07156372]
[502.67895508 226.46430969]
[488.76641846 220.85705566]
[469.90716553 225.00041199]
[457.64746094 209.03703308]
[443.53036499 203.96678162]
[429.41326904 198.89653015]
[415.29617310 193.82627869]
[401.17904663 188.75602722]
[387.06195068 183.68577576]
[372.94485474 178.61552429]
[358.82775879 173.54525757]
[344.23428345 176.52511597]
[333.86172485 164.57853699]
[319.74462891 159.50828552]
[305.53298950 154.70938110]
[291.23205566 150.18356323]
[276.93109131 145.65776062]
[262.63015747 141.13194275]
[248.32920837 136.60614014]
[237.81100464 144.09576416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[10 50]
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 34]
[23 33]
[24 32]
[25 31]
[52 81]
[53 80]
[55 79]
[56 78]
[57 77]
[58 76]
[100 162]
[101 161]
[102 160]
[103 159]
[104 158]
[107 157]
[108 156]
[110 154]
[111 153]
[112 152]
[113 151]
[114 150]
[115 149]
[116 148]
[117 147]
[121 145]
[122 144]
[123 143]
[124 142]
[126 140]
[127 139]
[128 138]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
