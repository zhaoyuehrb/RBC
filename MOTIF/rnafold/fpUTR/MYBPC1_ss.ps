%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCAGUAUAAAAGCACUGGGUUUCUCCCCAACUGCUUGUCACACCGACCUGCACCAUCUCUCGCCUGCCUGUGGGGUUUCUGUCAACUAGUCGUGGAGGGAAGGAGACUCUUUAAAGAAUAACAUCUUAUUGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[176.31454468 97.18194580]
[189.49151611 90.01485443]
[204.45654297 89.03583527]
[189.56903076 87.20226288]
[174.68151855 85.36869812]
[159.79400635 83.53512573]
[144.90649414 81.70156097]
[130.01898193 79.86798859]
[135.04786682 95.41787720]
[132.67512512 111.21931458]
[123.71823883 124.00925446]
[110.31983948 131.29278564]
[95.44349670 131.82748413]
[82.22038269 125.82487488]
[68.22267151 131.21598816]
[54.22496033 136.60710144]
[40.22725296 141.99822998]
[26.22954369 147.38934326]
[15.04281616 161.96882629]
[-2.15727544 158.66508484]
[-16.03140259 164.36671448]
[-29.90552902 170.06835938]
[-43.77965546 175.76998901]
[-49.63628387 190.44906616]
[-64.19000244 196.61064148]
[-78.80634308 190.59913635]
[-84.81369019 175.98109436]
[-78.64799500 161.42912292]
[-63.96725464 155.57666016]
[-49.48128891 161.89585876]
[-35.60716248 156.19422913]
[-21.73303413 150.49259949]
[-7.85890818 144.79096985]
[-2.87718415 133.71240234]
[8.70126057 128.87329102]
[20.83842659 133.39163208]
[34.83613586 128.00051880]
[48.83384705 122.60939789]
[62.83155441 117.21828461]
[76.82926178 111.82716370]
[77.66436005 96.85042572]
[64.35277557 89.93655396]
[51.04118729 83.02268219]
[35.37305069 86.47073364]
[22.99954796 76.25917053]
[23.41257095 60.22143173]
[36.29528427 50.66030121]
[51.76517487 54.91025543]
[57.95506287 69.71109009]
[71.26664734 76.62496948]
[84.57823944 83.53884125]
[89.96941376 78.32489777]
[100.75177002 67.89701080]
[106.14294434 62.68306732]
[99.67774200 49.14788818]
[84.35948181 48.03138351]
[71.66075897 39.39205933]
[64.99745178 25.55385208]
[66.16197205 10.23917103]
[74.84105682 -2.43241310]
[88.70008087 -9.05230713]
[104.01103210 -7.83979368]
[116.65534973 0.87896848]
[123.23177338 14.75867558]
[121.97127533 30.06575584]
[113.21292114 42.68268204]
[119.67812347 56.21786118]
[131.85255432 64.98047638]
[146.74006653 66.81404877]
[161.62757874 68.64761353]
[176.51509094 70.48118591]
[191.40260315 72.31475067]
[206.29011536 74.14832306]
[208.89662170 62.47006607]
[218.42613220 51.96881485]
[233.95394897 46.50860214]
[247.26553345 39.59472656]
[260.57711792 32.68085480]
[273.88870239 25.76697922]
[287.20028687 18.85310555]
[300.51187134 11.93923187]
[313.82348633 5.02535772]
[327.13507080 -1.88851655]
[340.44665527 -8.80239105]
[349.94317627 -24.53516197]
[367.40393066 -23.16410828]
[380.55816650 -30.37283516]
[385.08563232 -45.27719116]
[398.52862549 -52.40047455]
[412.70974731 -47.99237442]
[425.86398315 -55.20110321]
[439.01824951 -62.40982819]
[447.06509399 -76.69898987]
[463.46395874 -76.60419464]
[471.34509277 -62.22296143]
[462.60107422 -48.34947205]
[446.22695923 -49.25558090]
[433.07272339 -42.04685211]
[419.91845703 -34.83812714]
[416.00341797 -20.51304626]
[402.76580811 -13.01498604]
[387.76690674 -17.21858597]
[374.61264038 -10.00986004]
[370.89346313 1.55386376]
[359.92477417 7.65019512]
[347.36053467 4.50919628]
[334.04891968 11.42306995]
[320.73733521 18.33694458]
[307.42575073 25.25081825]
[294.11416626 32.16469193]
[280.80258179 39.07856750]
[267.49099731 45.99243927]
[254.17941284 52.90631485]
[240.86782837 59.82019043]
[239.53804016 67.20136261]
[250.99284363 76.88575745]
[236.87847900 81.96369934]
[235.54870605 89.34487152]
[245.61047363 100.46965790]
[255.67224121 111.59443665]
[265.73400879 122.71921539]
[281.52902222 123.26076508]
[292.25363159 134.86930847]
[291.54513550 150.65771484]
[279.82382202 161.25898743]
[264.04382324 160.38359070]
[253.56704712 148.55087280]
[254.60923767 132.78099060]
[244.54747009 121.65620422]
[234.48568726 110.53142548]
[224.42391968 99.40664673]
[232.23031616 112.21524048]
[233.94375610 127.11705780]
[229.24816895 141.36315918]
[219.00971985 152.32556152]
[205.11712646 157.98204041]
[190.13314819 157.28913879]
[176.82185364 150.37467957]
[167.63880920 138.51417542]
[164.27798462 123.89553070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[20 33]
[21 32]
[22 31]
[23 30]
[41 51]
[42 50]
[43 49]
[54 67]
[55 66]
[76 114]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[86 103]
[87 102]
[90 99]
[91 98]
[92 97]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
