%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:08 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (F2)
} def

/sequence { (\
AUGUUAGUUCAACAUUAACCCAGAGGGGUCAGGACAGACAAUUCCUCAGUGACCCAGGAGCUGACACACU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 15 0.007256133 ubox
2 14 0.008515422 ubox
2 66 0.869173542 ubox
2 68 0.021900391 ubox
3 13 0.008884922 ubox
3 19 0.017216811 ubox
3 65 0.999085783 ubox
3 67 0.021793324 ubox
3 69 0.004055328 ubox
4 12 0.008852189 ubox
4 18 0.017289073 ubox
4 64 0.999265550 ubox
4 66 0.017743149 ubox
4 68 0.003303151 ubox
5 11 0.008364008 ubox
5 17 0.017322064 ubox
5 63 0.999154121 ubox
6 16 0.017299120 ubox
6 62 0.999292451 ubox
7 15 0.017075783 ubox
7 61 0.999779081 ubox
8 14 0.016574950 ubox
8 59 0.012874039 ubox
8 60 0.999203245 ubox
9 24 0.008894290 ubox
9 58 0.015377669 ubox
9 59 0.998677392 ubox
10 23 0.010197782 ubox
10 25 0.004296495 ubox
10 57 0.024178000 ubox
10 58 0.996966230 ubox
12 50 0.003495186 ubox
13 49 0.003935346 ubox
13 51 0.052719913 ubox
14 50 0.052766918 ubox
15 23 0.029852328 ubox
15 24 0.111753529 ubox
15 25 0.033927383 ubox
15 49 0.052385767 ubox
15 52 0.083008842 ubox
15 57 0.029149543 ubox
16 22 0.040363590 ubox
16 23 0.117107722 ubox
16 24 0.042020609 ubox
16 25 0.040828937 ubox
16 31 0.007755531 ubox
16 48 0.048444245 ubox
16 51 0.084405511 ubox
16 56 0.028967768 ubox
16 57 0.006501887 ubox
17 50 0.070322414 ubox
18 29 0.074292933 ubox
18 50 0.361322599 ubox
19 26 0.100450902 ubox
19 27 0.055606620 ubox
19 28 0.079004363 ubox
19 49 0.366448836 ubox
19 58 0.028657389 ubox
20 25 0.161694115 ubox
20 26 0.073856183 ubox
20 27 0.079569685 ubox
20 57 0.034642613 ubox
20 58 0.044182815 ubox
21 25 0.098942667 ubox
21 26 0.079908164 ubox
21 51 0.017689722 ubox
21 57 0.053497800 ubox
21 63 0.019145412 ubox
22 46 0.017735405 ubox
22 50 0.016568279 ubox
22 62 0.019186091 ubox
23 44 0.026608983 ubox
23 45 0.014932714 ubox
23 47 0.379211932 ubox
23 61 0.019178677 ubox
24 43 0.028440964 ubox
24 46 0.379476099 ubox
25 42 0.027980266 ubox
25 43 0.003692216 ubox
25 44 0.009665556 ubox
25 45 0.379498560 ubox
25 46 0.003956070 ubox
25 47 0.005245051 ubox
25 55 0.045581584 ubox
26 42 0.004411840 ubox
26 43 0.009668701 ubox
26 44 0.379263660 ubox
26 45 0.006911740 ubox
26 46 0.005124667 ubox
26 54 0.037938991 ubox
26 55 0.910987344 ubox
27 42 0.023204348 ubox
27 43 0.366432001 ubox
27 44 0.008810764 ubox
27 45 0.005133877 ubox
27 53 0.028163124 ubox
27 54 0.918628212 ubox
27 55 0.010797709 ubox
28 35 0.005214102 ubox
28 39 0.358045857 ubox
28 42 0.125938351 ubox
28 43 0.003743904 ubox
28 44 0.004912977 ubox
28 53 0.920571748 ubox
28 54 0.008048038 ubox
29 34 0.004894502 ubox
29 38 0.363139750 ubox
29 41 0.108895729 ubox
29 52 0.920873195 ubox
30 37 0.364925356 ubox
30 51 0.920777880 ubox
30 57 0.005230913 ubox
31 46 0.605614109 ubox
31 50 0.690226826 ubox
32 44 0.027213904 ubox
32 45 0.857832131 ubox
32 46 0.041399836 ubox
32 47 0.038961659 ubox
32 54 0.009861227 ubox
32 55 0.009724825 ubox
33 43 0.026883829 ubox
33 44 0.858085080 ubox
33 45 0.042010984 ubox
33 46 0.033768976 ubox
33 47 0.205683432 ubox
33 53 0.009896478 ubox
33 54 0.009695917 ubox
34 42 0.034837760 ubox
34 43 0.843734918 ubox
34 46 0.198427602 ubox
34 50 0.024477125 ubox
35 49 0.032859063 ubox
35 51 0.009367440 ubox
36 43 0.029306031 ubox
36 46 0.144597792 ubox
36 50 0.008992561 ubox
37 42 0.033151701 ubox
37 43 0.066225802 ubox
37 44 0.254052179 ubox
37 45 0.150658623 ubox
37 47 0.051512235 ubox
38 42 0.060498511 ubox
38 43 0.230474545 ubox
38 46 0.049524362 ubox
38 50 0.008154516 ubox
39 49 0.009011813 ubox
42 49 0.003996616 ubox
43 48 0.003215065 ubox
43 52 0.003577207 ubox
43 59 0.003587799 ubox
44 51 0.003848661 ubox
44 58 0.004088514 ubox
45 57 0.004660033 ubox
46 52 0.005442061 ubox
46 56 0.004435305 ubox
47 51 0.007874700 ubox
47 57 0.008812117 ubox
50 56 0.014299045 ubox
51 55 0.015698043 ubox
55 63 0.003270520 ubox
56 62 0.003291310 ubox
57 61 0.003222510 ubox
2 66 0.9500000 lbox
3 65 0.9500000 lbox
4 64 0.9500000 lbox
5 63 0.9500000 lbox
6 62 0.9500000 lbox
7 61 0.9500000 lbox
8 60 0.9500000 lbox
9 59 0.9500000 lbox
10 58 0.9500000 lbox
26 55 0.9500000 lbox
27 54 0.9500000 lbox
28 53 0.9500000 lbox
29 52 0.9500000 lbox
30 51 0.9500000 lbox
31 50 0.9500000 lbox
32 45 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
showpage
end
%%EOF
