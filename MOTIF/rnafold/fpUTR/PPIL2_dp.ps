%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:25 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PPIL2)
} def

/sequence { (\
GUUUCCGGGGCGCGCCGCGGAACCCGGAAGUGGUCACGGAACUCGGCUGCGGCUCCAUGGUCUGAGUUGUCAGCCGUUGUUUUUUCGUGCUCGCUAGUCGCCGCCGCCGCUCCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 115 0.069553233 ubox
2 114 0.040809796 ubox
6 114 0.963809428 ubox
7 113 0.999797353 ubox
7 116 0.006723753 ubox
8 112 0.999858340 ubox
8 113 0.010657627 ubox
8 115 0.006736726 ubox
9 111 0.999242018 ubox
9 112 0.010764249 ubox
9 113 0.006835357 ubox
9 116 0.005859724 ubox
10 110 0.999933568 ubox
10 112 0.006828656 ubox
10 115 0.005934101 ubox
11 109 0.999924210 ubox
11 114 0.005940637 ubox
12 107 0.077168332 ubox
12 108 0.996410454 ubox
12 110 0.007294104 ubox
12 113 0.005887558 ubox
13 106 0.109124501 ubox
13 109 0.007347514 ubox
14 104 0.013430729 ubox
14 105 0.106142286 ubox
14 107 0.993140956 ubox
14 108 0.006281537 ubox
14 110 0.005914428 ubox
15 103 0.018027983 ubox
15 106 0.992228980 ubox
15 109 0.005915496 ubox
16 103 0.009209771 ubox
16 106 0.032645711 ubox
17 101 0.019119975 ubox
17 102 0.007365416 ubox
17 104 0.998110058 ubox
17 105 0.031839102 ubox
17 107 0.033328367 ubox
18 26 0.003508941 ubox
18 100 0.019899769 ubox
18 103 0.999189585 ubox
18 106 0.033403361 ubox
19 25 0.005109934 ubox
19 99 0.019587186 ubox
19 102 0.999176461 ubox
19 105 0.033678109 ubox
20 24 0.005212290 ubox
20 98 0.018257837 ubox
20 99 0.008208698 ubox
20 101 0.998492177 ubox
20 104 0.033665092 ubox
21 98 0.011226770 ubox
22 98 0.112295374 ubox
23 97 0.115134414 ubox
24 33 0.005374285 ubox
25 32 0.005491742 ubox
25 93 0.006841245 ubox
25 100 0.923102709 ubox
25 103 0.011044106 ubox
26 31 0.004920623 ubox
26 92 0.006814065 ubox
26 95 0.029527444 ubox
26 99 0.921057581 ubox
26 102 0.011171759 ubox
27 91 0.003675878 ubox
27 92 0.004511772 ubox
27 94 0.024555457 ubox
27 98 0.848266768 ubox
27 99 0.107835843 ubox
27 101 0.011075720 ubox
28 91 0.003508188 ubox
28 98 0.129703778 ubox
29 91 0.003650569 ubox
29 95 0.965157863 ubox
30 90 0.004296362 ubox
30 94 0.998605113 ubox
31 93 0.998652504 ubox
31 96 0.026543396 ubox
32 91 0.042018530 ubox
32 92 0.998034453 ubox
32 95 0.027977255 ubox
33 90 0.344002750 ubox
33 91 0.885926351 ubox
33 94 0.028084653 ubox
34 89 0.067463264 ubox
34 93 0.027880251 ubox
35 89 0.996943093 ubox
36 88 0.999683896 ubox
37 87 0.999909129 ubox
38 82 0.007733878 ubox
38 83 0.108113072 ubox
38 84 0.015173815 ubox
38 85 0.015817103 ubox
38 86 0.992720483 ubox
39 80 0.004745001 ubox
39 81 0.034951281 ubox
39 82 0.516080395 ubox
39 83 0.064284215 ubox
39 84 0.062037742 ubox
39 85 0.843508227 ubox
39 86 0.017823143 ubox
40 78 0.009558990 ubox
40 80 0.042756111 ubox
40 81 0.657057402 ubox
40 82 0.072541721 ubox
40 83 0.076885372 ubox
40 84 0.735820119 ubox
40 85 0.023560995 ubox
41 77 0.015197257 ubox
41 80 0.861717396 ubox
41 81 0.073309550 ubox
41 82 0.065112319 ubox
41 83 0.462180305 ubox
41 84 0.015187222 ubox
42 76 0.012964143 ubox
42 79 0.912791420 ubox
44 76 0.997250293 ubox
44 79 0.020984000 ubox
45 75 0.999952971 ubox
46 74 0.999990106 ubox
47 73 0.999983579 ubox
48 72 0.999295851 ubox
49 70 0.195612601 ubox
49 71 0.980414704 ubox
50 69 0.999053626 ubox
51 68 0.996503589 ubox
52 67 0.999401659 ubox
53 66 0.999975979 ubox
54 65 0.999693555 ubox
55 64 0.987905650 ubox
56 64 0.149714212 ubox
57 63 0.197736876 ubox
59 63 0.018466104 ubox
6 114 0.9500000 lbox
7 113 0.9500000 lbox
8 112 0.9500000 lbox
9 111 0.9500000 lbox
10 110 0.9500000 lbox
11 109 0.9500000 lbox
12 108 0.9500000 lbox
14 107 0.9500000 lbox
15 106 0.9500000 lbox
17 104 0.9500000 lbox
18 103 0.9500000 lbox
19 102 0.9500000 lbox
20 101 0.9500000 lbox
25 100 0.9500000 lbox
26 99 0.9500000 lbox
27 98 0.9500000 lbox
29 95 0.9500000 lbox
30 94 0.9500000 lbox
31 93 0.9500000 lbox
32 92 0.9500000 lbox
33 91 0.9500000 lbox
35 89 0.9500000 lbox
36 88 0.9500000 lbox
37 87 0.9500000 lbox
38 86 0.9500000 lbox
39 85 0.9500000 lbox
40 84 0.9500000 lbox
41 80 0.9500000 lbox
42 79 0.9500000 lbox
44 76 0.9500000 lbox
45 75 0.9500000 lbox
46 74 0.9500000 lbox
47 73 0.9500000 lbox
48 72 0.9500000 lbox
49 71 0.9500000 lbox
50 69 0.9500000 lbox
51 68 0.9500000 lbox
52 67 0.9500000 lbox
53 66 0.9500000 lbox
54 65 0.9500000 lbox
55 64 0.9500000 lbox
showpage
end
%%EOF
