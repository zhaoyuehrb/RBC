%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCAAACUGCUGCUCCUCCGGCUGGCGGGGAUCAGCGCUGGCGCGGCUGCGGCCGCUGCUGCCUACGCGCC\
) } def
/len { sequence length } bind def

/coor [
[117.39170837 124.91917419]
[110.08243561 128.66673279]
[102.03650665 130.31979370]
[93.84178925 129.75756836]
[86.09700775 127.02117157]
[79.36802673 122.31050110]
[74.14649200 115.96974945]
[70.81390381 108.46219635]
[69.61376190 100.33635712]
[70.63373566 92.18595123]
[57.53852463 84.87052155]
[44.44331360 77.55509949]
[31.34810257 70.23967743]
[18.25288963 62.92425156]
[2.43170261 62.94874954]
[-4.90594339 49.98694992]
[-18.00115585 42.67152786]
[-31.09636688 35.35610199]
[-40.41498566 33.82151031]
[-44.58254242 27.44210052]
[-57.35547638 19.57749176]
[-70.12841797 11.71288204]
[-86.00599670 14.01114559]
[-97.60326385 2.92589211]
[-96.02379608 -13.03922081]
[-82.47921753 -21.63712502]
[-67.35977173 -16.27224350]
[-62.26380539 -1.06005502]
[-49.49086761 6.80455399]
[-36.71792984 14.66916370]
[-23.78094292 22.26089096]
[-10.68573093 29.57631493]
[2.40948081 36.89173889]
[17.29401207 36.34399414]
[25.56831360 49.82904053]
[38.66352463 57.14446259]
[51.75873566 64.45988464]
[64.85395050 71.77531433]
[77.94915771 79.09073639]
[98.65625763 69.64162445]
[120.11722565 77.22426605]
[130.29196167 97.58462524]
[145.07620239 100.11963654]
[159.86044312 102.65464783]
[174.64466858 105.18965912]
[189.42890930 107.72467041]
[204.21315002 110.25968170]
[215.33515930 99.60102081]
[230.42434692 97.55898285]
[243.66600037 104.70899200]
[250.08154297 118.12461090]
[264.86578369 120.65962219]
[279.65002441 123.19463348]
[294.43426514 125.72964478]
[309.21850586 128.26466370]
[324.40618896 122.07871246]
[337.18948364 132.35098267]
[334.41799927 148.51423645]
[318.94284058 153.94111633]
[306.68347168 143.04888916]
[291.89923096 140.51388550]
[277.11499023 137.97886658]
[262.33074951 135.44386292]
[247.54652405 132.90884399]
[237.02818298 143.42086792]
[222.16096497 145.75111389]
[208.61399841 138.79891968]
[201.67814636 125.04392242]
[186.89390564 122.50891113]
[172.10966492 119.97389984]
[157.32542419 117.43888855]
[142.54118347 114.90387726]
[127.75695038 112.36885834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[16 33]
[17 32]
[18 31]
[20 30]
[21 29]
[22 28]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
