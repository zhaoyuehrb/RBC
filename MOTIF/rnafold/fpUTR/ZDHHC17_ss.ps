%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACCCGCGCCCUCCGAGGGGGGAGGGGACAGAGGGGGCGUCACGGGGGCAGGAGAAGAAGGAGGAGGAGGCCCGCGUCGCCUCCGGCGGGGCUCGCGCUCGCCCCGCGCUCGCCCUCCGCCUCGCCCGAGCCCCGGGAGGGUGAAACGCUUUCUCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[138.02020264 755.83807373]
[136.29994202 740.93707275]
[134.57969666 726.03601074]
[132.85945129 711.13500977]
[131.13919067 696.23394775]
[115.13104248 690.00048828]
[104.40789795 676.46575928]
[101.97637939 659.28051758]
[108.59105682 643.13800049]
[122.52354431 632.49267578]
[120.23380280 617.66845703]
[117.94406891 602.84423828]
[115.65432739 588.02001953]
[113.36458588 573.19586182]
[111.07484436 558.37164307]
[108.78511047 543.54742432]
[106.49536896 528.72320557]
[96.90684509 521.30065918]
[94.90061188 508.93521118]
[102.09656525 498.19424438]
[100.09120178 483.32891846]
[98.08583832 468.46356201]
[96.08047485 453.59820557]
[82.90254974 446.70761108]
[76.23004150 433.21905518]
[78.80970001 418.21243286]
[89.85879517 407.47817993]
[87.85343170 392.61285400]
[85.84806824 377.74749756]
[79.67049408 375.36093140]
[74.50896454 371.12948608]
[70.90169525 365.45254517]
[69.23777008 358.88211060]
[69.71543884 352.06924438]
[72.31906891 345.69943237]
[76.81750488 340.42376709]
[82.78421021 336.79235840]
[82.49688721 321.79510498]
[82.20956421 306.79785156]
[81.92224121 291.80059814]
[81.63491821 276.80337524]
[81.34759521 261.80612183]
[79.37375641 259.75360107]
[78.11373138 256.77752686]
[77.93028259 253.15312195]
[79.07715607 249.28407288]
[81.65692902 245.66000366]
[82.51847839 230.68475342]
[83.38002777 215.70951843]
[84.24157715 200.73428345]
[85.10311890 185.75904846]
[85.96466827 170.78381348]
[83.48040771 166.65527344]
[83.59564209 160.91458130]
[87.15689850 155.25486755]
[88.59140778 140.32360840]
[90.02591705 125.39236450]
[83.98480225 122.08547211]
[78.96432495 117.37109375]
[75.28442383 111.54967499]
[73.17962646 104.99220276]
[72.78405762 98.11658478]
[74.12294006 91.36100006]
[77.11093903 85.15596008]
[81.55763245 79.89692688]
[87.17964172 75.91903687]
[84.04222870 61.25081253]
[80.90481567 46.58259583]
[77.76741028 31.91437531]
[74.62999725 17.24615669]
[64.17738342 5.36956501]
[69.08149719 -8.69453526]
[65.94409180 -23.36275482]
[62.80667877 -38.03097534]
[51.42229462 -49.83469391]
[56.21185684 -65.51882935]
[72.24827576 -68.94888306]
[83.03466034 -56.59631729]
[77.47489929 -41.16838455]
[80.61230469 -26.50016403]
[83.74971771 -11.83194542]
[93.97792816 -1.00452316]
[89.29821777 14.10874653]
[92.43563080 28.77696609]
[95.57303619 43.44518280]
[98.71044922 58.11340332]
[101.84785461 72.78162384]
[106.21607971 73.43658447]
[110.42134857 74.78789520]
[119.74156952 63.03487396]
[129.06178284 51.28185272]
[138.38200378 39.52883148]
[147.70222473 27.77581024]
[157.02244568 16.02278900]
[166.34266663 4.26976681]
[162.04406738 -10.64002037]
[167.36183167 -25.21743584]
[180.25115967 -33.85716629]
[195.75584412 -33.23705673]
[207.91400146 -23.59555244]
[212.05059814 -8.64001179]
[206.57501221 5.87885809]
[193.59272766 14.37825394]
[178.09568787 13.58998585]
[168.77546692 25.34300804]
[159.45524597 37.09602737]
[150.13502502 48.84905243]
[140.81480408 60.60207367]
[131.49458313 72.35509491]
[122.17436981 84.10811615]
[125.30322266 110.19811249]
[104.95716095 126.82687378]
[103.52265167 141.75811768]
[102.08814240 156.68937683]
[100.93991089 171.64535522]
[100.07836151 186.62059021]
[99.21681213 201.59584045]
[98.35526276 216.57107544]
[97.49371338 231.54631042]
[96.63216400 246.52154541]
[96.34484100 261.51879883]
[96.63216400 276.51605225]
[96.91948700 291.51327515]
[97.20681763 306.51052856]
[97.49414062 321.50778198]
[97.78146362 336.50503540]
[112.08876038 355.59225464]
[100.71341705 375.74212646]
[102.71878052 390.60748291]
[104.72414398 405.47283936]
[118.22264099 412.89553833]
[124.68656158 426.68215942]
[121.82679749 441.45666504]
[110.94581604 451.59283447]
[112.95117950 466.45819092]
[114.95654297 481.32354736]
[116.96190643 496.18887329]
[128.55540466 510.46749878]
[121.31957245 526.43347168]
[123.60931396 541.25769043]
[125.89905548 556.08190918]
[128.18879700 570.90606689]
[130.47853088 585.73028564]
[132.76826477 600.55450439]
[135.05801392 615.37872314]
[137.34774780 630.20294189]
[149.82411194 633.73150635]
[159.99223328 641.70068359]
[166.35368347 652.89093018]
[167.98818970 665.61157227]
[164.68664551 677.95611572]
[156.97697449 688.08795166]
[146.04022217 694.51373291]
[147.76048279 709.41473389]
[149.48072815 724.31579590]
[151.20097351 739.21679688]
[152.92123413 754.11785889]
[166.07279968 762.57775879]
[170.66015625 777.52734375]
[164.51728821 791.90789795]
[150.54467773 798.92926025]
[135.33975220 795.27630615]
[126.08182526 782.67370605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[10 146]
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[20 137]
[21 136]
[22 135]
[23 134]
[27 130]
[28 129]
[29 128]
[37 126]
[38 125]
[39 124]
[40 123]
[41 122]
[42 121]
[47 120]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
[55 114]
[56 113]
[57 112]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[72 81]
[73 80]
[74 79]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
