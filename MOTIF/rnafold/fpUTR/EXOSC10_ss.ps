%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCGCAUGCGUGGUGCGCACGCGUCCCGUCUCCUCGGCCGACAAGCUCUCGCGAGACGAGCCGUGCAGGCUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[-29.00055122 171.34545898]
[-37.97398758 165.04002380]
[-44.19757462 156.05706787]
[-58.90935135 158.98342896]
[-73.62113190 161.90977478]
[-88.33290863 164.83613586]
[-101.72324371 177.29408264]
[-118.10594177 171.33180237]
[-132.69148254 174.83348083]
[-147.27703857 178.33515930]
[-161.86257935 181.83683777]
[-176.44813538 185.33851624]
[-191.03367615 188.84019470]
[-205.61923218 192.34188843]
[-215.19395447 205.21449280]
[-231.23211670 205.61059570]
[-241.43061829 193.22631836]
[-237.96603394 177.56182861]
[-223.49609375 170.63357544]
[-209.12091064 177.75633240]
[-194.53536987 174.25465393]
[-179.94981384 170.75297546]
[-165.36425781 167.25129700]
[-150.77871704 163.74961853]
[-136.19316101 160.24792480]
[-121.60762024 156.74624634]
[-114.89163971 146.48600769]
[-102.56586456 143.56468201]
[-91.25926208 150.12435913]
[-76.54748535 147.19799805]
[-61.83570862 144.27163696]
[-47.12392807 141.34529114]
[-40.54309082 123.26733398]
[-24.50202560 112.39984894]
[-4.99835825 113.00035095]
[10.56105423 125.00166321]
[24.63392448 119.80990601]
[38.70679474 114.61814880]
[52.77966309 109.42639923]
[66.85253143 104.23464203]
[80.92540741 99.04288483]
[87.08673859 85.92861176]
[100.68068695 80.91354370]
[113.88284302 86.88424683]
[127.95571136 81.69248962]
[139.23233032 67.29321289]
[156.34603882 70.61927032]
[170.20422363 64.87901306]
[184.06242371 59.13876343]
[197.92060852 53.39851379]
[211.66343689 47.38727951]
[225.28558350 41.10738373]
[234.30323792 27.41016769]
[250.65612793 28.64106750]
[257.52178955 43.53384018]
[247.83743286 56.76807785]
[231.56547546 54.72953415]
[217.94332886 61.00942993]
[213.05908203 66.82341766]
[203.66087341 67.25670624]
[189.80267334 72.99695587]
[175.94447327 78.73721313]
[162.08628845 84.47746277]
[157.05804443 95.66198730]
[145.34101868 100.47553253]
[133.14746094 95.76535797]
[119.07459259 100.95711517]
[112.91326141 114.07138824]
[99.31931305 119.08645630]
[86.11715698 113.11575317]
[72.04428864 118.30751038]
[57.97142029 123.49926758]
[43.89855194 128.69102478]
[29.82567978 133.88278198]
[15.75281048 139.07453918]
[14.98017597 150.24937439]
[10.41418076 160.43527222]
[2.64053869 168.39147949]
[-7.36615276 173.15907288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[44 67]
[45 66]
[47 63]
[48 62]
[49 61]
[50 60]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
