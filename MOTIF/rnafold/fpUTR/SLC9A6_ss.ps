%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCGUGAGCCCUCGGGGAGUGGUCCGACCGCGGGCGGCCGCCGGUGAGGUAGGGGCGGGAGGCGGGGGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[114.41751099 233.71769714]
[111.98036194 218.91700745]
[109.54322052 204.11631775]
[107.10607910 189.31562805]
[104.66893768 174.51495361]
[102.23179626 159.71426392]
[99.79465485 144.91357422]
[97.35751343 130.11288452]
[81.91914368 124.22501373]
[71.88286591 111.09933472]
[70.24725342 94.65747070]
[56.60277176 88.42623901]
[42.95829391 82.19501495]
[29.31381226 75.96379089]
[13.54654312 77.26908875]
[5.18360043 64.94389343]
[-8.46087933 58.71266937]
[-22.10536003 52.48144150]
[-35.99264908 46.81194305]
[-50.09962845 41.71360397]
[-64.20661163 36.61526489]
[-80.24617004 40.03062439]
[-91.02122498 27.66817665]
[-85.44732666 12.24534416]
[-69.25843048 9.62781715]
[-59.10827255 22.50828171]
[-45.00128937 27.60662079]
[-30.89430809 32.70495987]
[-26.03210831 31.38547897]
[-20.30341148 33.31781006]
[-15.87413406 38.83696365]
[-2.22965431 45.06818771]
[11.41482544 51.29941559]
[26.20615005 49.54841614]
[35.54503632 62.31931305]
[49.18951797 68.55053711]
[62.83399582 74.78176117]
[76.47847748 81.01298523]
[89.97550964 71.48196411]
[106.46759796 70.47138977]
[121.02734375 78.28319550]
[133.80894470 70.43267822]
[146.59054565 62.58215714]
[159.37214661 54.73163605]
[172.15374756 46.88111496]
[171.05813599 31.61487198]
[177.19322205 17.59277153]
[189.14921570 8.03699398]
[204.17871094 5.14338493]
[218.82803345 9.57687473]
[229.73088074 20.31867981]
[234.38186646 34.90041351]
[231.71221924 49.97129822]
[222.33540344 62.06815720]
[208.40615845 68.41121674]
[193.12528992 67.54289246]
[180.00427246 59.66271591]
[167.22267151 67.51323700]
[154.44107056 75.36375427]
[141.65945435 83.21427917]
[128.87785339 91.06479645]
[130.16639709 101.93826294]
[127.49691010 112.55741882]
[121.21963501 121.52895355]
[112.15820312 127.67574310]
[114.59534454 142.47642517]
[117.03248596 157.27711487]
[119.46962738 172.07780457]
[121.90676880 186.87849426]
[124.34391022 201.67918396]
[126.78105164 216.47987366]
[129.21820068 231.28054810]
[141.36427307 241.76159668]
[140.59886169 257.78637695]
[127.50912476 267.06207275]
[112.13638306 262.47314453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[11 38]
[12 37]
[13 36]
[14 35]
[16 33]
[17 32]
[18 31]
[19 28]
[20 27]
[21 26]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
