%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAGACUCGGGGUUCCGAGGGCCGCAGACCGCUAGCCCUACGUCACUUCCGCUUCCUUUCCCGCAGGGCGGGUAAUUCGAACGUUUUUUGCAGCGAGUGGCCUUCCCGGUUGGCGCGCGCCCGGGGCGGCGGCGCUGGAGGAGCUCGAGACGGAGCCUAAGUU\
) } def
/len { sequence length } bind def

/coor [
[63.08787155 344.04370117]
[50.96004486 354.17736816]
[35.22646332 352.68408203]
[25.22157288 340.44979858]
[26.88110542 324.73287964]
[39.22048569 314.85791016]
[40.63776398 299.92501831]
[42.05503845 284.99212646]
[43.47231674 270.05923462]
[35.99855423 260.51257324]
[37.08579636 248.03430176]
[46.69404602 239.38626099]
[48.39366150 224.48286438]
[50.09327698 209.57946777]
[51.79289246 194.67605591]
[53.49250412 179.77265930]
[55.19211960 164.86926270]
[56.89173508 149.96586609]
[58.59135056 135.06246948]
[46.50635147 126.17692566]
[32.78781509 132.24337769]
[19.06928253 138.30982971]
[5.35074949 144.37628174]
[-8.36778355 150.44273376]
[-18.85375595 165.55482483]
[-36.20398712 163.04934692]
[-49.80526352 169.37432861]
[-56.63665009 183.89024353]
[-72.27763367 187.45944214]
[-84.72978973 177.34393311]
[-84.44088745 161.30348206]
[-71.63255310 151.64294434]
[-56.13023758 155.77305603]
[-42.52896500 149.44807434]
[-38.06924438 138.17393494]
[-26.75275040 132.80487061]
[-14.43423557 136.72419739]
[-0.71570247 130.65774536]
[13.00283051 124.59130096]
[26.72136497 118.52484894]
[40.43989944 112.45839691]
[42.60854340 105.27877045]
[27.66098404 104.02557373]
[12.71342659 102.77236938]
[-2.23413110 101.51916504]
[-17.18168831 100.26596069]
[-30.95776367 106.20058441]
[-45.94090652 105.48963165]
[-59.09315491 98.27725983]
[-67.74777222 86.02582550]
[-70.14997101 71.21942902]
[-65.81267548 56.86018753]
[-55.61531067 45.85956192]
[-41.62548447 40.44802094]
[-26.67975235 41.72280884]
[-13.80849171 49.42544937]
[-5.62147236 61.99412918]
[7.52035332 69.22547913]
[20.66217995 76.45682526]
[33.80400467 83.68817902]
[46.94583130 90.91952515]
[49.11447525 83.73990631]
[41.04833221 71.09326935]
[32.98218918 58.44664001]
[24.91604424 45.80000687]
[16.84990120 33.15337372]
[3.23479700 23.05063629]
[9.17367935 7.17089987]
[26.07687569 8.48174000]
[29.49653435 25.08722878]
[37.56267548 37.73386383]
[45.62882233 50.38049698]
[53.69496536 63.02713013]
[61.76110840 75.67375946]
[75.42433167 64.89856720]
[91.28994751 60.57258987]
[106.63612366 62.67876816]
[119.10304260 70.15492249]
[127.05574036 81.16915894]
[140.99400330 75.62618256]
[154.93228149 70.08320618]
[168.87054443 64.54022980]
[173.30937195 59.54451752]
[178.78645325 57.83172226]
[183.44264221 59.06224060]
[197.58067322 54.05067825]
[211.71871948 49.03911591]
[225.85676575 44.02755356]
[239.99481201 39.01599121]
[254.13284302 34.00442886]
[268.27090454 28.99286652]
[275.35162354 23.15095711]
[282.72418213 24.02300072]
[296.95452881 19.27988625]
[311.18487549 14.53677177]
[325.41522217 9.79365635]
[330.13037109 5.05787849]
[335.69583130 3.65864015]
[340.27468872 5.15139341]
[354.67431641 0.95017326]
[365.75509644 -10.34262276]
[380.14004517 -6.47966909]
[394.53967285 -10.68088913]
[408.93933105 -14.88210964]
[420.02008057 -26.17490578]
[434.40502930 -22.31195259]
[448.80468750 -26.51317215]
[463.20431519 -30.71439362]
[477.60397339 -34.91561508]
[492.00363159 -39.11683273]
[506.40325928 -43.31805420]
[517.48400879 -54.61085129]
[531.86895752 -50.74789810]
[546.26861572 -54.94911575]
[555.21124268 -68.26863861]
[571.21160889 -69.43796539]
[581.99566650 -57.56008911]
[579.29077148 -41.74670410]
[565.17187500 -34.12848282]
[550.46984863 -40.54947281]
[536.07019043 -36.34825134]
[526.01940918 -25.35595703]
[510.60449219 -28.91840935]
[496.20483398 -24.71718979]
[481.80520630 -20.51597023]
[467.40554810 -16.31474876]
[453.00592041 -12.11352825]
[438.60626221 -7.91230822]
[428.55545044 3.07998776]
[413.14053345 -0.48246586]
[398.74090576 3.71875453]
[384.34124756 7.91997480]
[374.29046631 18.91227150]
[358.87554932 15.34981728]
[344.47589111 19.55103683]
[330.15832520 24.02400589]
[315.92797852 28.76712036]
[301.69763184 33.51023483]
[287.46728516 38.25335312]
[273.28244019 43.13090897]
[259.14440918 48.14247131]
[245.00636292 53.15403366]
[230.86833191 58.16559601]
[216.73028564 63.17715836]
[202.59223938 68.18872070]
[188.45419312 73.20028687]
[174.41352844 78.47850037]
[160.47525024 84.02147675]
[146.53698730 89.56445312]
[132.59870911 95.10742950]
[129.90902710 121.92227936]
[106.43419647 140.69635010]
[73.49475098 136.76208496]
[71.79513550 151.66548157]
[70.09552002 166.56887817]
[68.39590454 181.47227478]
[66.69628906 196.37567139]
[64.99667358 211.27906799]
[63.29705811 226.18247986]
[61.59744644 241.08587646]
[69.33679199 257.77218628]
[58.40521240 271.47650146]
[56.98793411 286.40939331]
[55.57065582 301.34228516]
[54.15338135 316.27517700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 165]
[7 164]
[8 163]
[9 162]
[12 160]
[13 159]
[14 158]
[15 157]
[16 156]
[17 155]
[18 154]
[19 153]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[26 34]
[27 33]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
[79 150]
[80 149]
[81 148]
[82 147]
[85 146]
[86 145]
[87 144]
[88 143]
[89 142]
[90 141]
[91 140]
[93 139]
[94 138]
[95 137]
[96 136]
[99 135]
[100 134]
[102 132]
[103 131]
[104 130]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
