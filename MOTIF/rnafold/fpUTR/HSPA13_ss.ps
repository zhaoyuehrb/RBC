%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCGGGAGGAGUGGGGGCGGUGCCUCACGUCUGGUACAGUCAUCACAAGCCUGUUCGGCGGGACUGUG\
) } def
/len { sequence length } bind def

/coor [
[148.44081116 243.54576111]
[143.17019653 229.50224304]
[137.89956665 215.45872498]
[132.62895203 201.41519165]
[127.35832214 187.37167358]
[122.08769989 173.32815552]
[116.81707764 159.28463745]
[111.23267365 145.36289978]
[105.33730316 131.56999207]
[99.44192505 117.77706909]
[83.97552490 107.71697998]
[85.75337219 89.35250092]
[78.64533997 76.14356232]
[71.53730774 62.93463135]
[64.42928314 49.72570038]
[51.07638168 41.23979187]
[51.85875702 26.36574936]
[44.75072861 13.15681744]
[37.64269638 -0.05211594]
[24.28979492 -8.53802204]
[25.07217216 -23.41206551]
[17.96414185 -36.62099838]
[10.85611248 -49.82992935]
[3.74808264 -63.03886414]
[-3.35994720 -76.24779510]
[-18.75408745 -78.19718170]
[-30.03930855 -88.84722137]
[-32.87621307 -104.10276794]
[-26.17395592 -118.09774017]
[-12.50968933 -125.45079803]
[2.86239743 -123.33453369]
[14.03142262 -112.56269073]
[16.70266724 -97.27727509]
[9.84898567 -83.35582733]
[16.95701599 -70.14689636]
[24.06504631 -56.93796158]
[31.17307472 -43.72902679]
[38.28110504 -30.52009392]
[51.12559128 -22.97898102]
[50.85163116 -7.16014576]
[57.95965958 6.04878712]
[65.06768799 19.25772095]
[77.91217804 26.79883385]
[77.63821411 42.61766815]
[84.74624634 55.82660294]
[91.85427094 69.03553772]
[98.96230316 82.24446869]
[109.01909637 84.67056274]
[116.02447510 92.28302002]
[117.60835266 102.50634003]
[113.23484039 111.88169861]
[119.13021851 125.67461395]
[125.02558899 139.46752930]
[131.48071289 146.39871216]
[130.86061096 154.01400757]
[136.13122559 168.05752563]
[141.40185547 182.10105896]
[146.67247009 196.14457703]
[151.94309998 210.18809509]
[157.21371460 224.23162842]
[162.48434448 238.27514648]
[177.58711243 241.42311096]
[188.57443237 252.25282288]
[191.94027710 267.30853271]
[186.61061096 281.78604126]
[174.28611755 291.06561279]
[158.89950562 292.18618774]
[145.36058044 284.79019165]
[137.98956299 271.23764038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[7 55]
[8 53]
[9 52]
[10 51]
[12 47]
[13 46]
[14 45]
[15 44]
[17 42]
[18 41]
[19 40]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
