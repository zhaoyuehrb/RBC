%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCGGCCGCCUGUCAGAGGGAGGUGGCGAUGGUGCGCCCGGUGGCGGUGGCGGCGGCGGUUGCGGAGGCUUCCUUGGUCGGAUUGCAACGAGGAGAAGAUGACUGACCAACCGACUGGCUGAAUGA\
) } def
/len { sequence length } bind def

/coor [
[98.03717041 206.03343201]
[103.13716125 191.47343445]
[115.31332397 182.00007629]
[113.86561584 167.07009888]
[112.41790009 152.14012146]
[110.97019196 137.21014404]
[92.63992310 135.56414795]
[78.33230591 125.99596405]
[66.41364288 135.10339355]
[54.49497604 144.21083069]
[42.57631302 153.31826782]
[30.65764618 162.42570496]
[18.73898125 171.53314209]
[6.82031679 180.64057922]
[0.55280638 195.16741943]
[-14.25779819 196.74705505]
[-26.17646408 205.85449219]
[-35.09077454 220.27571106]
[-51.41612625 215.70196533]
[-51.54043198 198.74847412]
[-35.28390121 193.93582153]
[-23.36523628 184.82838440]
[-17.95022774 170.95298767]
[-2.28712106 168.72192383]
[9.63154411 159.61448669]
[21.55020905 150.50704956]
[33.46887589 141.39961243]
[45.38753891 132.29217529]
[57.30620575 123.18473053]
[69.22486877 114.07729340]
[66.36470795 108.45117188]
[64.55162048 102.24744415]
[63.90108490 95.66436768]
[64.49047089 88.92297363]
[66.35458374 82.25969696]
[69.48271942 75.91806030]
[73.81726074 70.13985443]
[64.70982361 58.22119141]
[55.60239029 46.30252838]
[41.07555389 40.03501511]
[39.49591827 25.22441292]
[30.38848114 13.30574703]
[21.28104401 1.38708174]
[6.75421095 -4.88042831]
[5.17457438 -19.69103432]
[-3.93286300 -31.60969925]
[-18.45969582 -37.87720871]
[-20.03933334 -52.68781281]
[-29.14677048 -64.60647583]
[-44.48476791 -70.40974426]
[-46.86058426 -86.63588715]
[-33.83018875 -96.59283447]
[-18.79813194 -90.03773499]
[-17.22810555 -73.71391296]
[-8.12066746 -61.79524994]
[5.75474119 -56.38024521]
[7.98580217 -40.71713638]
[17.09323883 -28.79847145]
[30.96864891 -23.38346291]
[33.19971085 -7.72035599]
[42.30714798 4.19830942]
[51.41458511 16.11697388]
[65.28999329 21.53198242]
[67.52105713 37.19509125]
[76.62849426 49.11375427]
[85.73593140 61.03242111]
[100.52182007 58.50706482]
[105.15707397 44.24121475]
[109.79232788 29.97536850]
[105.85535431 14.05581379]
[117.85958099 2.88305640]
[133.45610046 7.95067167]
[136.60054016 24.04553223]
[124.05818176 34.61062241]
[119.42292023 48.87647247]
[114.78766632 63.14231873]
[130.00450134 74.45336151]
[138.14584351 91.41390228]
[137.46435547 110.06785583]
[152.42495728 111.15437317]
[167.38555908 112.24089813]
[182.34614563 113.32742310]
[197.30674744 114.41394043]
[212.26734924 115.50046539]
[221.15599060 112.98280334]
[227.57490540 116.79829407]
[242.50488281 118.24600220]
[257.43487549 119.69371033]
[264.49328613 109.23678589]
[275.28659058 102.84553528]
[287.70468140 101.69722748]
[299.35061646 105.95111847]
[308.00311279 114.72971344]
[312.04022217 126.29895020]
[326.88281250 128.46629333]
[336.34045410 116.36470032]
[350.58779907 110.62812042]
[365.79241943 112.79965973]
[377.86428833 122.29519653]
[383.55618286 136.56047058]
[381.33700562 151.75817871]
[371.80368042 163.80024719]
[357.52062988 169.44740295]
[342.32995605 167.18058777]
[330.31781006 157.60955811]
[324.71548462 143.30888367]
[309.87286377 141.14155579]
[298.22842407 154.31123352]
[280.87292480 157.96180725]
[264.62649536 150.46858215]
[255.98715210 134.62368774]
[241.05717468 133.17597961]
[226.12719727 131.72827148]
[211.18083191 130.46105957]
[196.22023010 129.37454224]
[181.25962830 128.28802490]
[166.29902649 127.20149231]
[151.33843994 126.11497498]
[136.37783813 125.02845001]
[125.90016937 135.76243591]
[127.34787750 150.69241333]
[128.79559326 165.62239075]
[130.24330139 180.55235291]
[144.01269531 187.50987244]
[151.81504822 200.81878662]
[151.16061401 216.23225403]
[142.25825500 228.83192444]
[127.94866943 234.59725952]
[112.79798889 231.68858337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[16 22]
[17 21]
[37 66]
[38 65]
[39 64]
[41 62]
[42 61]
[43 60]
[45 58]
[46 57]
[48 55]
[49 54]
[67 76]
[68 75]
[69 74]
[79 119]
[80 118]
[81 117]
[82 116]
[83 115]
[84 114]
[86 113]
[87 112]
[88 111]
[94 107]
[95 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
