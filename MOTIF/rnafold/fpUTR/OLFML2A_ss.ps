%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCGGGGCGCGGGGCAGGCAGAGCGGGCGAAGGCGCGGAGCUCGCAGUGCAGCCCGCGCUUCCCAGCGUCCGUGCCCGGCCGCCUGUGCCUACCGUGCCCGUGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[85.20939636 470.30877686]
[68.86625671 468.95455933]
[62.11314392 454.01040649]
[71.89707184 440.84960938]
[73.13576508 425.90084839]
[74.37445068 410.95205688]
[75.61314392 396.00329590]
[76.85183716 381.05453491]
[67.25530243 364.36227417]
[78.63841248 347.83724976]
[79.05172729 332.84295654]
[79.46504211 317.84863281]
[79.87835693 302.85433960]
[80.29167175 287.86004639]
[80.70498657 272.86572266]
[81.11830139 257.87142944]
[81.53161621 242.87712097]
[73.75811005 235.98759460]
[71.07685852 225.72354126]
[74.63272095 215.49415588]
[83.45559692 208.83952332]
[84.69428253 193.89076233]
[85.93297577 178.94198608]
[87.17166901 163.99322510]
[88.41035461 149.04444885]
[81.75049591 135.72171021]
[90.60097504 122.60761261]
[91.83966827 107.65885162]
[92.87226868 92.69443512]
[93.69858551 77.71720886]
[94.52490234 62.73998642]
[87.55957031 48.53454208]
[95.98623657 36.25282669]
[96.81255341 21.27560234]
[94.08216095 15.00764179]
[94.90795135 9.20745182]
[98.11950684 5.50302792]
[99.76963043 -9.40593243]
[101.41975403 -24.31489182]
[103.06987762 -39.22385406]
[104.72000122 -54.13281250]
[106.37012482 -69.04177094]
[108.02024841 -83.95072937]
[109.67037201 -98.85969543]
[111.11491394 -113.78997040]
[112.35360718 -128.73873901]
[113.59229279 -143.68751526]
[100.65976715 -154.48593140]
[96.70105743 -170.69215393]
[103.07127380 -185.93174744]
[117.10205078 -194.32986450]
[117.92836761 -209.30708313]
[118.75468445 -224.28430176]
[119.58100128 -239.26153564]
[120.40731049 -254.23875427]
[110.81957245 -267.10168457]
[115.03754425 -282.58032227]
[129.82556152 -288.80078125]
[143.83952332 -280.99127197]
[146.32911682 -265.14257812]
[135.38453674 -253.41244507]
[134.55822754 -238.43521118]
[133.73190308 -223.45799255]
[132.90559387 -208.48077393]
[132.07926941 -193.50354004]
[143.22364807 -186.01438904]
[149.22879028 -173.88368225]
[148.41384888 -160.26362610]
[140.88612366 -148.75355530]
[128.54106140 -142.44882202]
[127.30236816 -127.50005341]
[126.06368256 -112.55128479]
[128.68359375 -105.52861023]
[124.57933044 -97.20957184]
[122.92920685 -82.30060577]
[121.27908325 -67.39164734]
[119.62895966 -52.48268890]
[117.97883606 -37.57373047]
[116.32871246 -22.66476822]
[114.67858887 -7.75580883]
[113.02846527 7.15315151]
[111.78977966 22.10191917]
[110.96346283 37.07913971]
[117.98789215 50.21331787]
[109.50212097 63.56630325]
[108.67580414 78.54352570]
[107.84948730 93.52075195]
[110.61486053 101.22071838]
[106.78842926 108.89753723]
[105.54974365 123.84630585]
[112.12100983 138.23828125]
[103.35912323 150.28314209]
[102.12042999 165.23191833]
[100.88174438 180.18067932]
[99.64305115 195.12945557]
[98.40436554 210.07821655]
[107.90048981 227.75517273]
[96.52591705 243.29043579]
[96.11260223 258.28472900]
[95.69928741 273.27905273]
[95.28597260 288.27334595]
[94.87265778 303.26763916]
[94.45934296 318.26196289]
[94.04602814 333.25625610]
[93.63271332 348.25057983]
[101.66997528 355.83538818]
[104.07894135 366.39389038]
[100.28483582 376.30065918]
[91.80060577 382.29321289]
[90.56191254 397.24200439]
[89.32321930 412.19076538]
[88.08453369 427.13952637]
[86.84584045 442.08828735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 113]
[5 112]
[6 111]
[7 110]
[8 109]
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[15 100]
[16 99]
[17 98]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[27 90]
[28 89]
[29 87]
[30 86]
[31 85]
[33 83]
[34 82]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 72]
[46 71]
[47 70]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
