%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGAACUCUGAUUCCUGGAAUUGUUACCAGGCGACCACGGCGUCAUCAAAUGACCUGGCAAUUCCGUCUACUGAUGUCUCGAAC\
) } def
/len { sequence length } bind def

/coor [
[113.97289276 385.58596802]
[124.87290192 374.95065308]
[119.63094330 360.89642334]
[114.38897705 346.84216309]
[109.14701843 332.78793335]
[103.90505219 318.73367310]
[92.20786285 309.51278687]
[94.63465881 293.87881470]
[89.39270020 279.82455444]
[83.23551178 293.50259399]
[71.20227051 302.45812988]
[56.33233261 304.42910767]
[42.38152695 298.91775513]
[32.87355042 287.31610107]
[30.20992088 272.55447388]
[35.06341553 258.36138916]
[46.20814514 248.32173157]
[60.82917404 244.97128296]
[75.23352814 249.15631104]
[85.78364563 259.82092285]
[85.78364563 244.82092285]
[85.78364563 229.82092285]
[85.78364563 214.82092285]
[85.78364563 199.82092285]
[85.78364563 184.82092285]
[85.78364563 169.82092285]
[83.34316254 166.98127747]
[82.28614044 162.73612976]
[83.29616547 157.81443787]
[86.67245483 153.23899841]
[88.27587891 138.32495117]
[89.87931061 123.41088867]
[91.48273468 108.49683380]
[89.61336517 93.61377716]
[84.37139893 79.55953217]
[69.57536316 74.49876404]
[61.53824997 61.08463669]
[64.05492401 45.65089798]
[75.93710327 35.48488235]
[91.57437897 35.38667297]
[103.58330536 45.40264130]
[106.29364014 60.80355072]
[98.42564392 74.31756592]
[103.66761017 88.37181091]
[118.62939453 89.44190216]
[125.81812286 76.27671814]
[133.00686646 63.11153412]
[140.19560242 49.94634628]
[147.38432312 36.78116226]
[149.66847229 19.98178673]
[166.44363403 17.52613449]
[173.44714355 32.96592712]
[160.54951477 43.96989822]
[153.36077881 57.13508224]
[146.17204285 70.30027008]
[138.98330688 83.46545410]
[131.79457092 96.63063812]
[106.39678955 110.10026550]
[104.79336548 125.01432037]
[103.18993378 139.92837524]
[101.58650970 154.84242249]
[100.78364563 169.82092285]
[100.78364563 184.82092285]
[100.78364563 199.82092285]
[100.78364563 214.82092285]
[100.78364563 229.82092285]
[100.78364563 244.82092285]
[100.78364563 259.82092285]
[103.44694519 274.58258057]
[108.68890381 288.63684082]
[120.76103210 298.86300659]
[117.95929718 313.49172974]
[123.20126343 327.54595947]
[128.44322205 341.60021973]
[133.68518066 355.65444946]
[138.92715454 369.70870972]
[154.12947083 370.60833740]
[167.64857483 377.61932373]
[177.14219666 389.52691650]
[180.96551514 404.26806641]
[178.45611572 419.28881836]
[170.04876709 431.98669434]
[157.20007324 440.16174316]
[142.13618469 442.39755249]
[127.46697998 438.30679321]
[115.73400116 428.59817505]
[108.97005463 414.95379639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[8 70]
[9 69]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 44]
[35 43]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
