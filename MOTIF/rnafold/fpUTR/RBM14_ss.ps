%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGCUAGGCCAGGGCGCCUGCGCGGCGGGGUUCUCGGUCGCCAGCCAUUCCUGAGGAGGACUGCCGGUCGUUCGGACGUCUUGCCUGUCGCUGGAGGAGAGGUCCGGGCUCUCCAGGAAGGUGGCUGCGGCGACAAA\
) } def
/len { sequence length } bind def

/coor [
[122.71540833 125.87046051]
[115.14927673 131.86970520]
[106.00547028 135.64404297]
[95.94124603 136.78248596]
[90.67061615 150.82600403]
[85.39999390 164.86953735]
[85.49531555 181.82321167]
[69.23058319 186.60806274]
[60.13020706 172.30352783]
[71.35647583 159.59890747]
[76.62709808 145.55538940]
[81.89772034 131.51187134]
[70.71308899 121.51667023]
[57.34798813 128.32652283]
[43.98289108 135.13638306]
[30.61779404 141.94624329]
[17.25269508 148.75610352]
[10.96310806 155.49630737]
[3.51043248 155.56500244]
[-10.00410080 162.07325745]
[-23.51863289 168.58152771]
[-37.03316498 175.08978271]
[-50.54769897 181.59803772]
[-62.19485474 193.91793823]
[-77.25755310 186.13644409]
[-73.94992828 169.50827026]
[-57.05595398 168.08349609]
[-43.54142380 161.57524109]
[-30.02688980 155.06698608]
[-16.51235580 148.55873108]
[-2.99782372 142.05047607]
[10.44283772 135.39100647]
[23.80793571 128.58114624]
[37.17303467 121.77128601]
[50.53813171 114.96142578]
[63.90322876 108.15156555]
[70.46860504 81.75247192]
[92.23832703 68.52008057]
[115.33203125 74.06136322]
[125.93863678 63.45476532]
[136.54524231 52.84816360]
[147.15184021 42.24156189]
[157.75843811 31.63495827]
[168.36503601 21.02835655]
[178.73098755 10.18643379]
[188.85104370 -0.88535100]
[198.97109985 -11.95713615]
[209.09115601 -23.02892113]
[219.21121216 -34.10070419]
[229.33126831 -45.17248917]
[239.20034790 -56.46856308]
[248.81349182 -67.98323059]
[258.42663574 -79.49790192]
[268.03976440 -91.01257324]
[269.57592773 -97.58063507]
[273.62741089 -101.71325684]
[278.35171509 -102.81557465]
[288.47177124 -113.88735962]
[298.59182739 -124.95914459]
[308.71188354 -136.03092957]
[312.86444092 -150.44468689]
[310.18606567 -165.20362854]
[307.50772095 -179.96257019]
[304.82937622 -194.72151184]
[296.05200195 -209.22648621]
[307.56030273 -221.67620850]
[322.70928955 -214.06407166]
[319.58831787 -197.39987183]
[322.26666260 -182.64093018]
[324.94500732 -167.88198853]
[327.62338257 -153.12304688]
[341.48156738 -147.38278198]
[353.81158447 -155.92504883]
[366.14163208 -164.46733093]
[378.47164917 -173.00959778]
[390.80169678 -181.55186462]
[403.13171387 -190.09413147]
[415.46176147 -198.63639832]
[427.79177856 -207.17866516]
[434.72927856 -221.39772034]
[449.59741211 -222.28562927]
[461.92742920 -230.82789612]
[474.25744629 -239.37016296]
[486.58749390 -247.91242981]
[494.01651001 -264.71969604]
[511.50958252 -265.57040405]
[523.64483643 -274.38717651]
[524.55511475 -289.99826050]
[535.32452393 -301.33636475]
[550.86816406 -303.04803467]
[563.84674072 -294.32507324]
[568.13220215 -279.28616333]
[561.70104980 -265.03222656]
[547.58990479 -258.29354858]
[532.46160889 -262.25192261]
[520.32635498 -253.43515015]
[518.10125732 -241.49247742]
[507.99157715 -234.05613708]
[495.12976074 -235.58239746]
[482.79974365 -227.04013062]
[470.46969604 -218.49786377]
[458.13967896 -209.95559692]
[452.08410645 -196.34753418]
[436.33404541 -194.84863281]
[424.00402832 -186.30636597]
[411.67398071 -177.76409912]
[399.34396362 -169.22183228]
[387.01391602 -160.67956543]
[374.68389893 -152.13729858]
[362.35385132 -143.59503174]
[350.02383423 -135.05276489]
[335.21484375 -123.36048126]
[319.78369141 -125.91086578]
[309.66363525 -114.83908081]
[299.54357910 -103.76729584]
[289.42349243 -92.69551086]
[279.55441284 -81.39944458]
[269.94128418 -69.88477325]
[260.32815552 -58.37009811]
[250.71502686 -46.85542679]
[250.25685120 -42.02591324]
[246.70547485 -37.45634460]
[240.40306091 -35.05243301]
[230.28300476 -23.98064804]
[220.16293335 -12.90886307]
[210.04287720 -1.83707786]
[199.92282104 9.23470688]
[189.80276489 20.30649185]
[189.12837219 25.11058807]
[185.37556458 29.51622581]
[178.97164917 31.63495827]
[168.36503601 42.24156189]
[157.75843811 52.84816360]
[147.15184021 63.45476532]
[136.54524231 74.06136322]
[125.93863678 84.66796875]
[129.97242737 92.12212372]
[131.84353638 100.63036346]
[131.28077698 109.56022644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[6 10]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[39 136]
[40 135]
[41 134]
[42 133]
[43 132]
[44 131]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[51 120]
[52 119]
[53 118]
[54 117]
[57 116]
[58 115]
[59 114]
[60 113]
[61 71]
[62 70]
[63 69]
[64 68]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[81 102]
[82 101]
[83 100]
[84 99]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
