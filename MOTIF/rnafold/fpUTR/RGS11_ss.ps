%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGUCAUCCCCGCCGGCCUCGCCCCGCAGCCAUGGCCGCCGGCCCCGCGCCGCCCCCCGGCCGCCCCCGGGCGCAGAUGCCGCAUCUGAGGAAGGUGCGAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[12.31232071 313.92709351]
[9.46576309 314.72131348]
[1.90228581 327.67483521]
[-5.66119194 340.62838745]
[-13.22466946 353.58190918]
[-7.77830410 368.24038696]
[-13.07710361 382.95285034]
[-26.61913681 390.77252197]
[-42.01026917 388.00720215]
[-51.98328018 375.96258545]
[-51.82921600 360.32574463]
[-41.62082672 348.47994995]
[-26.17819405 346.01843262]
[-18.61471748 333.06491089]
[-11.05123901 320.11135864]
[-3.48776126 307.15783691]
[3.30246854 293.78277588]
[9.29604340 280.03222656]
[15.28961754 266.28170776]
[21.28319168 252.53117371]
[27.27676582 238.78065491]
[33.27033997 225.03012085]
[39.26391602 211.27958679]
[37.25657272 196.52087402]
[49.86352921 186.96182251]
[55.85710526 173.21130371]
[49.40126038 163.58224487]
[48.45823288 151.90641785]
[53.38565445 141.14624023]
[63.03662491 134.08964539]
[75.02433777 132.62797546]
[81.81456757 119.25289917]
[71.51284027 103.80282593]
[73.55061340 83.83873749]
[88.87588501 68.66362762]
[84.95816040 54.18428040]
[81.04043579 39.70493698]
[77.12271118 25.22559166]
[73.20498657 10.74624538]
[56.02981949 -3.51199937]
[61.54109955 -24.37802696]
[55.95377350 -38.29858017]
[50.36645126 -52.21913147]
[44.77912521 -66.13968658]
[30.64998627 -73.73883057]
[27.92374611 -89.54854584]
[38.69174194 -101.44097900]
[54.69368744 -100.29325867]
[63.65426254 -86.98583221]
[58.69968033 -71.72701263]
[64.28700256 -57.80645752]
[69.87432861 -43.88590240]
[75.46165466 -29.96535110]
[83.53874207 -28.41244698]
[90.36873627 -23.66091919]
[94.73211670 -16.46511650]
[95.81197357 -8.02333832]
[93.34591675 0.22150564]
[87.68432617 6.82852125]
[91.60205078 21.30786705]
[95.51977539 35.78721237]
[99.43750000 50.26655579]
[103.35522461 64.74590302]
[117.64804840 69.29730988]
[129.21696472 59.74952698]
[140.78588867 50.20174789]
[146.01016235 34.65700912]
[162.13584900 31.67466164]
[172.57421875 44.32268906]
[166.58715820 59.58988571]
[150.33366394 61.77066803]
[138.76473999 71.31844330]
[127.19582367 80.86622620]
[127.52492523 88.40370178]
[126.03485870 95.14508820]
[140.95571899 96.68380737]
[155.87658691 98.22253418]
[170.79745483 99.76126099]
[185.71833801 101.29998016]
[200.63920593 102.83870697]
[217.01501465 98.44906616]
[225.76638794 112.96974182]
[214.23580933 125.39881897]
[199.10047913 117.75957489]
[184.17961121 116.22084808]
[169.25874329 114.68212891]
[154.33787537 113.14340210]
[139.41700745 111.60467529]
[124.49613190 110.06595612]
[112.67675018 123.25260925]
[95.18965149 126.04312897]
[88.39942169 139.41821289]
[95.01602936 157.03652954]
[86.93992615 173.68594360]
[69.60763550 179.20487976]
[63.61405945 192.95539856]
[65.19270325 208.69764709]
[53.01444626 217.27316284]
[47.02087021 231.02369690]
[41.02729416 244.77421570]
[35.03372192 258.52474976]
[29.04014778 272.27526855]
[23.04657173 286.02581787]
[17.05299759 299.77633667]
[17.78007698 304.43099976]
[16.96931648 308.61087036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[17 104]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[25 96]
[26 95]
[31 92]
[32 91]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[41 53]
[42 52]
[43 51]
[44 50]
[64 73]
[65 72]
[66 71]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
