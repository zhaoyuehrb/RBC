%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAUUGACAGCCUCAAGGUUCCUGGCUUUUUGAACCACCACAGACAUCUCCUUUCCCGGCUACCCCACCCUGAGCGCCAGACACC\
) } def
/len { sequence length } bind def

/coor [
[89.23667908 292.41900635]
[74.21770477 290.80429077]
[60.26255417 285.02239990]
[48.50250244 275.54199219]
[39.89088440 263.13165283]
[35.12580490 248.79740906]
[34.59354782 233.70127869]
[38.33725739 219.06701660]
[46.05345535 206.08099365]
[57.11661911 195.79589844]
[70.62990570 189.04551697]
[85.49786377 186.37705994]
[87.10128784 171.46301270]
[88.43825531 156.52270508]
[89.50834656 141.56092834]
[90.57843018 126.59914398]
[91.64852142 111.63735962]
[85.71254730 98.97814178]
[93.38969421 87.29254913]
[94.45978546 72.33076477]
[95.52986908 57.36898804]
[82.49837494 46.75824356]
[78.31874847 30.65145683]
[84.42443848 15.34907532]
[98.26452637 6.71813869]
[98.79991150 -8.27230358]
[99.33529663 -23.26274681]
[99.87068176 -38.25318909]
[100.40606689 -53.24362946]
[90.56393433 -60.38236618]
[85.54035950 -71.32115936]
[86.51934052 -83.19671631]
[93.13046265 -92.96418762]
[103.57463837 -98.17785645]
[105.17806244 -113.09191132]
[106.78148651 -128.00596619]
[92.96864319 -134.17527771]
[81.73962402 -144.31256104]
[74.19454193 -157.42465210]
[71.07258606 -172.22695923]
[72.67961121 -187.26931763]
[78.85818481 -201.07803345]
[89.00298309 -212.30026245]
[102.12012482 -219.83654785]
[116.92453003 -222.94859314]
[131.96580505 -221.33148193]
[145.77037048 -215.14366150]
[156.98579407 -204.99134827]
[164.51330566 -191.86915588]
[167.61541748 -177.06266785]
[165.98823547 -162.02247620]
[159.79116821 -148.22206116]
[149.63133240 -137.01344299]
[136.50410461 -129.49473572]
[121.69554138 -126.40253448]
[120.09211731 -111.48847961]
[118.48869324 -96.57442474]
[130.81092834 -83.26579285]
[129.70286560 -64.84880829]
[115.39651489 -52.70824432]
[114.86112976 -37.71780396]
[114.32574463 -22.72736168]
[113.79035950 -7.73691893]
[113.25497437 7.25352383]
[124.57808685 14.55999756]
[130.81072998 26.63066864]
[130.20191956 40.31093216]
[122.80487823 51.96430588]
[110.49165344 58.43907547]
[109.42156982 73.40085602]
[108.35147858 88.36264038]
[114.28745270 101.02185822]
[106.61030579 112.70745087]
[105.54021454 127.66923523]
[104.47013092 142.63101196]
[103.40003967 157.59278870]
[105.94994354 166.60705566]
[102.01534271 173.06643677]
[100.41191864 187.98048401]
[114.37287140 193.74836731]
[126.14244080 203.21694946]
[134.76652527 215.61863708]
[139.54600525 229.94808960]
[140.09342957 245.04368591]
[136.36441040 259.68170166]
[128.66127014 272.67547607]
[117.60844421 282.97164917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 79]
[13 78]
[14 76]
[15 75]
[16 74]
[17 73]
[19 71]
[20 70]
[21 69]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[34 57]
[35 56]
[36 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
