%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUUGCGCAGCCGGUGGUUGAUAUCCGCUGUAUCCAUCCCCGAGAGGGACCUGGUACCUCUACCCAGGUUUCUAUCGCUCUGUCUCCUGCGCUGUGCCCUUCUGUAGUCACAGGAGCUGUAGAGAGGACCCCAGGACAUCUGAAAGCCAGGAA\
) } def
/len { sequence length } bind def

/coor [
[103.17868042 192.90866089]
[98.42865753 178.68060303]
[93.67863464 164.45256042]
[88.92861938 150.22451782]
[84.17859650 135.99647522]
[79.84764862 113.71774292]
[90.57076263 100.36440277]
[77.89291382 92.34741211]
[65.21505737 84.33042908]
[52.53720856 76.31343842]
[39.85935593 68.29645538]
[27.18150520 60.27946472]
[14.50365448 52.26247787]
[-0.48418063 52.86646652]
[-12.47582245 61.87760162]
[-24.46746445 70.88873291]
[-36.45910645 79.89987183]
[-48.45074463 88.91100311]
[-60.44238663 97.92213440]
[-61.10103226 113.54584503]
[-71.68641663 125.05599213]
[-87.20044708 127.01785278]
[-100.31787109 118.50508881]
[-104.84504700 103.53716278]
[-98.64437103 89.18148041]
[-84.64362335 82.21634674]
[-69.45352173 85.93049622]
[-57.46187973 76.91936493]
[-45.47023773 67.90822601]
[-33.47859573 58.89709473]
[-21.48695564 49.88595963]
[-9.49531460 40.87482452]
[-8.59128952 33.42950821]
[-23.43511200 35.58842468]
[-36.55437469 42.86063004]
[-51.17145157 39.49298859]
[-59.78617477 27.21347237]
[-57.97823334 12.32282543]
[-46.67530823 2.46159601]
[-31.67704201 2.68968391]
[-20.67906570 12.89033508]
[-6.78323936 18.53887558]
[-5.87921429 11.09355927]
[-15.36589527 -0.52551532]
[-24.85257530 -12.14458942]
[-39.57378006 -17.94085121]
[-41.62973404 -32.69287872]
[-51.11641693 -44.31195450]
[-60.60309601 -55.93103027]
[-70.08977509 -67.55010223]
[-79.57645416 -79.16917419]
[-89.06314087 -90.78825378]
[-98.54981995 -102.40732574]
[-108.03649902 -114.02639771]
[-117.52317810 -125.64547729]
[-127.00985718 -137.26455688]
[-142.32595825 -135.41505432]
[-156.20062256 -142.16023254]
[-164.20648193 -155.34771729]
[-163.78890991 -170.76942444]
[-155.08114624 -183.50436401]
[-140.86180115 -189.48883057]
[-125.66822815 -186.81323242]
[-114.34863281 -176.33132935]
[-110.51506042 -161.38786316]
[-115.39078522 -146.75123596]
[-105.90410614 -135.13215637]
[-96.41742706 -123.51308441]
[-86.93074799 -111.89400482]
[-77.44406128 -100.27493286]
[-67.95738220 -88.65586090]
[-58.47070312 -77.03678131]
[-48.98402023 -65.41770935]
[-39.49734116 -53.79863358]
[-30.01066017 -42.17956161]
[-15.96800518 -37.21437073]
[-13.23350143 -21.63126945]
[-3.74682045 -10.01219559]
[5.73986006 1.60687852]
[10.27804852 -12.69014359]
[19.70278358 -24.35952187]
[32.72464371 -31.80473328]
[47.56206894 -34.00718307]
[62.18511581 -30.66554642]
[74.59316254 -22.23699951]
[83.08863068 -9.87467861]
[86.50923157 4.73009729]
[84.38698578 19.57920837]
[77.01224518 32.64110565]
[65.39396667 42.12875748]
[51.12167358 46.74413300]
[36.14800262 45.85578918]
[22.52064133 39.58462524]
[35.19849396 47.60161209]
[47.87634277 55.61860275]
[60.55419540 63.63558960]
[73.23204803 71.65257263]
[85.90989685 79.66956329]
[98.58774567 87.68655396]
[113.18728638 91.12945557]
[128.11131287 89.62162781]
[143.03532410 88.11380005]
[157.94340515 86.45577240]
[172.83404541 84.64772034]
[187.72468567 82.83967590]
[202.61531067 81.03162384]
[217.50595093 79.22357178]
[232.39657593 77.41551971]
[247.28721619 75.60746765]
[262.17785645 73.79942322]
[270.56008911 60.59821701]
[285.48239136 55.92282486]
[299.89886475 61.98082352]
[307.00250244 75.91180420]
[303.43917847 91.13799286]
[290.89138794 100.47004700]
[275.28384399 99.50164795]
[263.98590088 88.69005585]
[249.09526062 90.49810791]
[234.20462036 92.30615234]
[219.31399536 94.11420441]
[204.42335510 95.92225647]
[189.53273010 97.73030853]
[174.64208984 99.53835297]
[159.75146484 101.34640503]
[153.45433044 105.29733276]
[144.54315186 103.03781891]
[129.61914062 104.54564667]
[114.69511414 106.05348206]
[110.62299347 112.35172272]
[125.11962128 116.20500183]
[125.93445587 131.18286133]
[111.94139862 136.58604431]
[102.47875977 124.94820404]
[98.40664673 131.24644470]
[103.15666199 145.47450256]
[107.90668488 159.70254517]
[112.65670013 173.93058777]
[117.40672302 188.15863037]
[134.64079285 195.91770935]
[140.68434143 213.48980713]
[132.16505432 229.64573669]
[137.48413086 243.67098999]
[142.80320740 257.69622803]
[156.78385925 265.56518555]
[159.20611572 281.42434692]
[148.21180725 293.10787964]
[132.23484802 291.65319824]
[123.53137207 278.17620850]
[128.77795410 263.01528931]
[123.45888519 248.99006653]
[118.13980865 234.96481323]
[106.90475464 232.62615967]
[98.12017059 225.05642700]
[94.06389618 214.06463623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 139]
[2 138]
[3 137]
[4 136]
[5 135]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 94]
[13 93]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[43 79]
[44 78]
[45 77]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[100 129]
[101 128]
[102 127]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
[142 152]
[143 151]
[144 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
