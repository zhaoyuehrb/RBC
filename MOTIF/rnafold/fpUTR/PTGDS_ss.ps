%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCUCCUGCACACCUCCCUCGCUCUCCCACACCACUGGCACCAGGCCCCGGACACCCGCUCUGCUGCAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[82.16108704 335.48352051]
[66.47816467 333.52865601]
[56.83703995 321.00570679]
[58.95761490 305.34432983]
[71.58179474 295.83615112]
[73.43717957 280.95132446]
[75.29257202 266.06652832]
[77.14795685 251.18171692]
[79.00334930 236.29690552]
[80.85874176 221.41209412]
[82.71412659 206.52728271]
[84.56951904 191.64248657]
[86.11688995 176.72250366]
[87.35557556 161.77374268]
[79.29577637 159.55847168]
[71.59980011 156.29658508]
[64.40290833 152.04539490]
[57.83155823 146.87962341]
[52.00123596 140.89002991]
[47.01438904 134.18188477]
[42.95865631 126.87306213]
[39.90531158 119.09199524]
[37.90800476 110.97543335]
[37.00183487 102.66600037]
[37.20273209 94.30971527]
[38.50716400 86.05342102]
[40.89220047 78.04221344]
[44.31594086 70.41687012]
[48.71821213 63.31138611]
[54.02165604 56.85063171]
[60.13307190 51.14813995]
[66.94506836 46.30411530]
[74.33794403 42.40369034]
[82.18177032 39.51539993]
[90.33871460 37.69000244]
[98.66544342 36.95957565]
[107.01561737 37.33695602]
[115.24250793 38.81550980]
[123.20154572 41.36925507]
[130.34075928 28.17714691]
[137.47996521 14.98504066]
[134.29882812 -0.73945767]
[144.71929932 -12.93754578]
[160.74768066 -12.25189304]
[170.08839417 0.79152530]
[165.57601929 16.18691635]
[150.67207336 22.12425232]
[143.53286743 35.31635666]
[136.39364624 48.50846481]
[152.06312561 64.42884827]
[161.19844055 84.81358337]
[176.08325195 82.95819092]
[190.96804810 81.10280609]
[203.71330261 70.78336334]
[218.92375183 76.91313934]
[220.95219421 93.18635559]
[207.71195984 102.86251068]
[192.82344055 95.98760986]
[177.93862915 97.84300232]
[163.05383301 99.69838715]
[158.55715942 123.38665771]
[145.49822998 143.65531921]
[125.78655243 157.54067993]
[102.30434418 163.01243591]
[101.06565857 177.96119690]
[103.52400208 187.06669617]
[99.45432281 193.49786377]
[97.59893799 208.38267517]
[95.74354553 223.26748657]
[93.88816071 238.15229797]
[92.03276825 253.03710938]
[90.17737579 267.92190552]
[88.32199097 282.80673218]
[86.46659851 297.69152832]
[96.37036133 310.00781250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 65]
[14 64]
[39 49]
[40 48]
[41 47]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
