%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGGCAGAGGCCGCCCGCGGUCAGGCCAGGCCGGGUCCAAUUAGGGGACUCACAGCCUGCCCCGCUGUGCACCCCGAGGAGGCCCGGCCCCUGUGUCCAAUCCGGAAGUCGCAGGGAAGUGGGGAGGUCAGG\
) } def
/len { sequence length } bind def

/coor [
[97.51814270 327.47210693]
[85.17439270 336.34341431]
[70.37419891 339.81082153]
[55.37450409 337.34558105]
[42.46263885 329.32357788]
[33.60757446 316.96817017]
[30.15964317 302.16342163]
[32.64463043 287.16699219]
[40.68358994 274.26568604]
[53.05064011 265.42687988]
[67.85990143 261.99844360]
[70.29257202 247.19700623]
[72.72523499 232.39558411]
[75.15790558 217.59416199]
[68.06491852 201.58526611]
[79.73882294 187.39939880]
[81.82642365 172.54537964]
[83.91401672 157.69136047]
[86.00161743 142.83734131]
[88.08921051 127.98332214]
[76.16239929 118.88655853]
[62.38915634 124.82775116]
[48.61591721 130.76895142]
[36.46700287 142.59436035]
[21.74058342 134.19381714]
[25.73613930 117.71742249]
[42.67472076 116.99570465]
[56.44795990 111.05451202]
[70.22119904 105.11331177]
[79.08326721 80.49522400]
[102.69985962 73.15050507]
[98.23090363 58.83169174]
[93.76194763 44.51287842]
[89.29299164 30.19406319]
[84.82403564 15.87524796]
[80.35508728 1.55643392]
[75.88613129 -12.76238060]
[71.41717529 -27.08119583]
[66.94821930 -41.40000916]
[52.85033035 -42.93695831]
[40.44888306 -49.72568893]
[31.61182594 -60.70580292]
[27.65571594 -74.18850708]
[29.14966583 -88.11630249]
[35.83371353 -100.37697601]
[46.66333008 -109.12390900]
[42.52877045 -123.54283142]
[38.39421082 -137.96176147]
[34.25965118 -152.38067627]
[21.75943375 -157.54180908]
[14.64302349 -168.81163025]
[15.33595467 -181.92680359]
[23.35839653 -192.07769775]
[19.56046867 -206.58892822]
[15.76254082 -221.10014343]
[11.96461391 -235.61137390]
[8.16668606 -250.12260437]
[4.36875868 -264.63381958]
[-9.84148884 -271.16091919]
[-16.48487663 -285.31716919]
[-12.42459869 -300.41842651]
[0.42220435 -309.33435059]
[15.98966599 -307.85510254]
[26.92730522 -296.67916870]
[28.07070541 -281.08343506]
[18.87998772 -268.43176270]
[22.67791367 -253.92053223]
[26.47584152 -239.40930176]
[30.27376938 -224.89807129]
[34.07169724 -210.38685608]
[37.86962509 -195.87562561]
[52.71089172 -188.05355835]
[57.43849945 -171.60659790]
[48.67857742 -156.51524353]
[52.81313705 -142.09631348]
[56.94769669 -127.67739105]
[61.08225632 -113.25846863]
[76.84169769 -110.88291168]
[90.04785919 -101.85780334]
[98.04415894 -87.93755341]
[99.19554901 -71.86727905]
[93.22257996 -56.84146118]
[81.26703644 -45.86896515]
[85.73599243 -31.55014992]
[90.20494843 -17.23133469]
[94.67389679 -2.91252017]
[99.14285278 11.40629387]
[103.61180878 25.72510910]
[108.08076477 40.04392242]
[112.54971313 54.36273956]
[117.01866913 68.68154907]
[128.39637756 78.45641327]
[143.22509766 80.71669769]
[158.05383301 82.97698212]
[172.88255310 85.23726654]
[187.71127319 87.49755096]
[202.54000854 89.75783539]
[217.43858337 91.49922943]
[232.38885498 92.71961212]
[247.33912659 93.93999481]
[260.45004272 84.69425964]
[275.81225586 89.31832123]
[281.64120483 104.26499176]
[273.46539307 118.06846619]
[257.55664062 120.13990021]
[246.11874390 108.89026642]
[231.16847229 107.66988373]
[216.21820068 106.44950867]
[213.25962830 108.52297974]
[209.12232971 109.21407318]
[204.49215698 107.97238922]
[200.27972412 104.58656311]
[185.45098877 102.32627869]
[170.62226868 100.06599426]
[155.79353333 97.80570984]
[140.96481323 95.54542542]
[126.13608551 93.28513336]
[127.34480286 104.96737671]
[123.42738342 116.40438080]
[114.83441162 125.39138794]
[102.94322968 130.07092285]
[100.85563660 144.92494202]
[98.76803589 159.77896118]
[96.68044281 174.63298035]
[94.59284973 189.48699951]
[101.74035645 200.29542542]
[99.63662720 212.67384338]
[89.95932770 220.02684021]
[87.52666473 234.82826233]
[85.09399414 249.62968445]
[82.66132355 264.43109131]
[95.59424591 272.41909790]
[104.48178864 284.75115967]
[107.96865845 299.54678345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 131]
[12 130]
[13 129]
[14 128]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 29]
[22 28]
[23 27]
[31 91]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[46 77]
[47 76]
[48 75]
[49 74]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
