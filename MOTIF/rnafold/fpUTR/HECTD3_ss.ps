%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGGGGAAGGGCGUGGUGGGAAGCUCUGUCCGCGGUCGCGCCAGCUGUUCCCCGGGCAGGGUCGCCUCUAGGUGCUCACCUCCGCCACUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[71.17706299 416.36911011]
[54.85216904 414.81027222]
[48.28677368 399.78271484]
[58.23478699 386.74548340]
[59.66062546 371.81341553]
[61.08646774 356.88134766]
[62.51231003 341.94924927]
[63.93814850 327.01718140]
[65.36399078 312.08511353]
[66.78983307 297.15301514]
[59.46641922 289.70867920]
[57.50748825 279.22549438]
[61.82410049 269.23132324]
[71.17229462 263.23059082]
[73.54232025 248.41902161]
[75.91233826 233.60743713]
[78.28236389 218.79585266]
[71.09852600 202.87135315]
[82.59499359 188.59690857]
[84.49387360 173.71757507]
[86.39276123 158.83825684]
[88.29164886 143.95893860]
[90.19053650 129.07960510]
[92.08942413 114.20028687]
[84.17280579 106.48626709]
[82.76808929 94.95787811]
[89.18859863 84.61462402]
[86.34983063 69.88569641]
[83.51106262 55.15676498]
[80.67229462 40.42783356]
[77.83352661 25.69890404]
[74.99475861 10.96997452]
[72.15599060 -3.75895619]
[69.31722260 -18.48788643]
[66.47845459 -33.21681595]
[63.63968277 -47.94574738]
[53.43050766 -60.03223801]
[58.61933136 -73.99380493]
[55.78056335 -88.72274017]
[39.75883102 -98.55629730]
[35.88964844 -116.63130188]
[46.12783813 -131.64247131]
[42.36061859 -146.16169739]
[30.47766495 -157.46334839]
[34.58621979 -173.33949280]
[50.45975113 -177.45809937]
[61.76893616 -165.58232117]
[56.87985229 -149.92890930]
[60.64707184 -135.40968323]
[71.69593048 -131.80177307]
[79.65043640 -123.16182709]
[82.39080048 -111.61750793]
[79.10159302 -100.09148407]
[70.50949097 -91.56150818]
[73.34825897 -76.83257294]
[83.35439301 -65.79959869]
[78.36861420 -50.78451538]
[81.20738220 -36.05558395]
[84.04615021 -21.32665443]
[86.88491821 -6.59772491]
[89.72368622 8.13120556]
[92.56245422 22.86013603]
[95.40122986 37.58906555]
[98.23999786 52.31799698]
[101.07876587 67.04692841]
[103.91753387 81.77585602]
[115.99658966 90.66947937]
[130.90415955 89.00690460]
[145.81173706 87.34432983]
[160.71931458 85.68175507]
[173.59706116 75.52814484]
[188.72689819 81.85429382]
[190.54454041 98.15239716]
[177.18017578 107.65636444]
[162.38189697 100.58933258]
[147.47431946 102.25190735]
[132.56674194 103.91448212]
[117.65915680 105.57705688]
[106.96875000 116.09917450]
[105.06986237 130.97850037]
[103.17097473 145.85781860]
[101.27208710 160.73713684]
[99.37319946 175.61647034]
[97.47431183 190.49578857]
[104.78182220 201.26953125]
[102.77584076 213.72387695]
[93.09394073 221.16587830]
[90.72392273 235.97746277]
[88.35390472 250.78903198]
[85.98387909 265.60061646]
[94.13935852 283.90042114]
[81.72190857 298.57885742]
[80.29606628 313.51095581]
[78.87023163 328.44302368]
[77.44438934 343.37509155]
[76.01854706 358.30718994]
[74.59270477 373.23925781]
[73.16686249 388.17132568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[14 90]
[15 89]
[16 88]
[17 87]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[38 55]
[39 54]
[42 49]
[43 48]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
