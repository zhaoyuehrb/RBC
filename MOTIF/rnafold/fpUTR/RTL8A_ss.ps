%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCGACAUGCGCUUCCGGCGACGCCUUAGCGCUGACCCCCACGCAACCCAGCGAAACUCCGCGGAGCGCGCGCGGCACG\
) } def
/len { sequence length } bind def

/coor [
[74.51026154 324.58746338]
[69.23003387 309.99639893]
[73.56698608 295.09771729]
[85.85346222 285.62026978]
[85.29259491 270.63076782]
[77.08481598 258.20169067]
[84.30070496 244.12187195]
[83.73983002 229.13235474]
[81.17584229 226.37870789]
[79.95541382 222.15151978]
[80.80081177 217.16630554]
[84.05177307 212.45317078]
[85.17272186 197.49510193]
[86.29367065 182.53704834]
[87.41462708 167.57899475]
[88.53557587 152.62094116]
[89.65652466 137.66287231]
[90.77748108 122.70481873]
[91.89842987 107.74676514]
[92.73948669 92.77036285]
[93.30035400 77.78085327]
[93.86122131 62.79133987]
[79.37333679 52.23915482]
[73.98507690 35.30646515]
[79.61200714 18.61406708]
[93.89958954 8.57612324]
[93.33872223 -6.41338730]
[92.77785492 -21.40289688]
[77.20454407 -29.07354927]
[67.58497620 -43.41951752]
[66.41323853 -60.56482315]
[73.91503143 -75.92920685]
[88.01059723 -85.45172119]
[86.33112335 -100.35739899]
[84.65165710 -115.26308441]
[80.49217224 -123.67835236]
[83.19882965 -130.75608826]
[82.07788086 -145.71414185]
[70.90454102 -157.22657776]
[73.08170319 -173.12121582]
[86.93923187 -181.20504761]
[101.84681702 -175.27685547]
[106.36863708 -159.88423157]
[97.03593445 -146.83508301]
[98.15689087 -131.87702942]
[99.55734253 -116.94255066]
[101.23680878 -102.03687286]
[102.91627502 -87.13118744]
[115.21618652 -83.24239349]
[125.11248016 -74.89390564]
[131.06105042 -63.34071732]
[132.11552429 -50.34140396]
[128.07759094 -37.89046478]
[119.53311920 -27.91229248]
[107.76736450 -21.96376610]
[108.32823181 -6.97425508]
[108.88910675 8.01525593]
[120.09387207 13.36028004]
[127.93246460 23.08106041]
[130.81481934 35.30646515]
[128.11285400 47.64786530]
[120.29591370 57.66580963]
[108.85073090 63.35220718]
[108.28986359 78.34172058]
[107.72899628 93.33123016]
[110.65491486 101.07293701]
[106.85648346 108.86771393]
[105.73553467 123.82577515]
[104.61458588 138.78382874]
[103.49362946 153.74188232]
[102.37268066 168.69995117]
[101.25173187 183.65800476]
[100.13077545 198.61605835]
[99.00982666 213.57411194]
[98.72934723 228.57148743]
[99.29021454 243.56100464]
[107.53810883 257.06222534]
[100.28210449 270.06988525]
[100.84297180 285.05941772]
[113.80334473 293.59219360]
[119.24154663 308.12509155]
[115.06647491 323.06994629]
[102.88352966 332.68011475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 79]
[5 78]
[7 76]
[8 75]
[12 74]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[20 65]
[21 64]
[22 63]
[26 57]
[27 56]
[28 55]
[33 48]
[34 47]
[35 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
