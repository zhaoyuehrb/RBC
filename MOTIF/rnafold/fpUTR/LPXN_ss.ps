%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCGCGACGCGUGCCGUACAUCCGGGCUCAAGCGUCGAGCCAAUUGCUGGUCUGAUGGGAGGGUUUUUCCUACUUUUUCUUACUUUUUAUCUGGGCGUUGGCGUACCUUUCUCGGGGUGUCUGCGUAACUGCCCAGACUUGCCUUGGUUUGGUCAGAUGACACCUCCUCUGGGACUGGCUAGCCAGCGUUC\
) } def
/len { sequence length } bind def

/coor [
[104.69551849 140.32849121]
[79.02372742 134.76249695]
[69.03499603 145.95291138]
[59.04626846 157.14332581]
[58.99445343 170.05070496]
[50.43251419 179.16690063]
[38.35388184 179.97273254]
[28.18525505 190.99992371]
[18.01663017 202.02711487]
[7.84800434 213.05432129]
[-2.32062149 224.08151245]
[-12.48924732 235.10870361]
[-10.99236584 253.98338318]
[-23.54093552 267.73287964]
[-41.83546829 267.95449829]
[-51.64167786 279.30520630]
[-61.44789124 290.65588379]
[-56.98118973 305.42248535]
[-61.22895432 320.25354004]
[-72.83573914 330.41650391]
[-88.09786224 332.66845703]
[-102.14523315 326.29077148]
[-110.49538422 313.31854248]
[-110.48381805 297.89117432]
[-102.11422729 284.93148804]
[-88.05731201 278.57485962]
[-72.79858398 280.84970093]
[-62.99237061 269.49899292]
[-53.18616104 258.14831543]
[-56.46595764 247.20349121]
[-54.02349854 235.91917419]
[-46.35365295 227.12945557]
[-35.27872086 223.09896851]
[-23.51644325 224.94007874]
[-13.34781742 213.91288757]
[-3.17919159 202.88569641]
[6.98943424 191.85848999]
[17.15806007 180.83129883]
[27.32668495 169.80410767]
[30.24310493 152.50529480]
[47.85585785 147.15458679]
[57.84458542 135.96417236]
[67.83331299 124.77376556]
[64.69542694 120.05049133]
[62.24621582 114.93609619]
[60.53345871 109.53034973]
[59.59057236 103.93869019]
[59.43593979 98.27020264]
[60.07258224 92.63545227]
[61.48807907 87.14437103]
[63.65482330 81.90405273]
[51.69318008 72.85313416]
[39.73153687 63.80221939]
[24.27979279 65.77233124]
[12.27792072 56.42301941]
[10.49493980 41.68000031]
[-1.46670246 32.62908173]
[-19.78119659 30.78018951]
[-25.98320198 14.37015247]
[-38.08983994 5.51411676]
[-50.19647598 -3.34191871]
[-62.37442017 -12.09963894]
[-74.62287140 -20.75847054]
[-86.87133026 -29.41730118]
[-99.11978149 -38.07612991]
[-115.49062347 -39.03925705]
[-122.59908295 -53.81768036]
[-113.13258362 -67.20863342]
[-96.82945251 -65.43663788]
[-90.46095276 -50.32458496]
[-78.21250153 -41.66575623]
[-65.96404266 -33.00692368]
[-53.71558762 -24.34809303]
[-46.42851257 -23.05224419]
[-41.34043884 -15.44855499]
[-29.23380280 -6.59251881]
[-17.12716675 2.26351666]
[-5.12026787 0.72173190]
[5.04089975 8.01300144]
[7.58421564 20.66744041]
[19.54585838 29.71835899]
[34.21839905 27.42660713]
[46.47813797 36.43512726]
[48.78245544 51.84057617]
[60.74409866 60.89149475]
[72.70574188 69.94241333]
[80.29145050 64.50340271]
[88.91882324 60.94052124]
[98.13188171 59.44207382]
[107.44367981 60.08725739]
[116.36205292 62.84197617]
[124.41562653 67.56063080]
[131.17874146 73.99382782]
[136.29396057 81.80154419]
[139.49090576 90.57110596]
[154.47320557 89.84267426]
[169.45550537 89.11424255]
[184.43780518 88.38581085]
[199.42010498 87.65737915]
[214.40242004 86.92893982]
[229.38471985 86.20050812]
[244.36701965 85.47207642]
[259.34933472 84.74364471]
[274.33163452 84.01521301]
[282.88006592 71.19998169]
[297.16839600 65.93714905]
[311.64465332 70.04830933]
[320.81451416 81.75523376]
[335.79681396 81.02679443]
[346.38772583 69.60444641]
[361.59228516 69.07913971]
[372.41650391 79.24636078]
[387.39880371 78.51792908]
[402.38110352 77.78949738]
[417.36340332 77.06106567]
[432.31423950 75.84785461]
[447.21798706 74.15115356]
[462.12170410 72.45444489]
[477.02545166 70.75773621]
[491.92916870 69.06102753]
[506.83291626 67.36431885]
[521.73663330 65.66761017]
[536.64038086 63.97090530]
[539.68011475 55.54554367]
[545.26995850 48.60271835]
[552.77886963 43.88119125]
[561.37347412 41.87146378]
[570.11090088 42.76496124]
[578.04187012 46.43615723]
[584.31420898 52.45932770]
[588.26391602 60.15773392]
[603.25604248 59.67200851]
[618.24816895 59.18627930]
[631.79058838 51.00616074]
[644.76171875 58.32727051]
[659.75384521 57.84154129]
[674.74597168 57.35581207]
[689.73815918 56.87008667]
[704.73028564 56.38435745]
[719.72241211 55.89862823]
[734.71453857 55.41289902]
[745.33789062 43.71162033]
[761.12756348 43.03287125]
[772.71588135 53.77934265]
[773.22766113 69.57534027]
[762.35931396 81.04938507]
[746.55877686 81.39412689]
[735.20025635 70.40503693]
[720.20812988 70.89076233]
[705.21600342 71.37648773]
[690.22387695 71.86222076]
[675.23175049 72.34794617]
[660.23956299 72.83367157]
[645.24743652 73.31940460]
[632.77740479 81.46478271]
[618.73394775 74.17841339]
[603.74182129 74.66413879]
[588.74963379 75.14987183]
[575.75744629 91.94427490]
[554.31317139 93.70724487]
[538.33709717 78.87463379]
[523.43334961 80.57134247]
[508.52960205 82.26805115]
[493.62588501 83.96475983]
[478.72213745 85.66146851]
[463.81842041 87.35816956]
[448.91470337 89.05487823]
[434.01095581 90.75158691]
[432.15933228 92.87423706]
[429.34936523 94.38590240]
[425.81155396 94.91566467]
[421.90698242 94.18353271]
[418.09182739 92.04336548]
[403.10952759 92.77179718]
[388.12722778 93.50023651]
[373.14492798 94.22866821]
[363.35809326 105.39798737]
[348.17428589 106.35015106]
[336.52523804 96.00910187]
[321.54293823 96.73753357]
[313.55203247 109.27880096]
[299.54287720 114.77491760]
[284.81140137 110.92301178]
[275.06005859 98.99751282]
[260.07775879 99.72594452]
[245.09544373 100.45437622]
[230.11314392 101.18281555]
[215.13084412 101.91124725]
[200.14854431 102.63967896]
[185.16624451 103.36811066]
[170.18394470 104.09654236]
[155.20162964 104.82498169]
[140.21932983 105.55341339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[15 29]
[16 28]
[17 27]
[51 86]
[52 85]
[53 84]
[56 81]
[57 80]
[59 77]
[60 76]
[61 75]
[62 73]
[63 72]
[64 71]
[65 70]
[95 193]
[96 192]
[97 191]
[98 190]
[99 189]
[100 188]
[101 187]
[102 186]
[103 185]
[104 184]
[108 180]
[109 179]
[112 176]
[113 175]
[114 174]
[115 173]
[116 168]
[117 167]
[118 166]
[119 165]
[120 164]
[121 163]
[122 162]
[123 161]
[131 158]
[132 157]
[133 156]
[135 154]
[136 153]
[137 152]
[138 151]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
