%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGACCACAGGUGUCCCCGUCGUGCUCACCUGCACCGGCUGCGAGGAGCAGGGAGCUCCUCAAAGAGCUCAGGAACGGACAGGAC\
) } def
/len { sequence length } bind def

/coor [
[-37.78453064 193.00361633]
[-50.94971466 200.19235229]
[-64.11489868 207.38108826]
[-77.28008270 214.56982422]
[-83.48477936 221.58840942]
[-91.04595947 221.77061462]
[-104.45933533 228.48487854]
[-113.33645630 241.58096313]
[-128.18084717 240.35902405]
[-141.59422302 247.07327271]
[-150.47134399 260.16937256]
[-165.31573486 258.94741821]
[-178.72912598 265.66168213]
[-187.30210876 279.64151001]
[-203.68609619 278.93658447]
[-211.02664185 264.27203369]
[-201.77241516 250.73353577]
[-185.44337463 252.24829102]
[-172.02999878 245.53404236]
[-164.11230469 232.91819763]
[-148.30848694 233.65989685]
[-134.89511108 226.94563293]
[-126.97740936 214.32980347]
[-111.17359924 215.07150269]
[-97.76021576 208.35723877]
[-84.46881866 201.40463257]
[-71.30363464 194.21589661]
[-58.13845062 187.02716064]
[-44.97326279 179.83842468]
[-36.42105484 162.64910889]
[-16.41721153 162.82626343]
[-3.79840803 154.71665955]
[8.82039452 146.60704041]
[21.43919754 138.49743652]
[24.38908577 126.61969757]
[35.03170013 119.79575348]
[47.85067749 122.22084045]
[60.75089264 114.56678772]
[73.65110779 106.91273499]
[77.90486908 84.06715393]
[98.23801422 72.81644440]
[101.42649078 58.15924454]
[104.61497498 43.50204086]
[107.80345154 28.84483719]
[100.37444305 14.62550640]
[106.99118042 0.01050306]
[122.57787323 -3.78879309]
[135.17773438 6.14211321]
[135.12524414 22.18508148]
[122.46065521 32.03331757]
[119.27217102 46.69052124]
[116.08369446 61.34772491]
[112.89521790 76.00492859]
[119.60275269 81.08486176]
[124.44004822 87.96944427]
[139.20170593 85.30614471]
[153.96337891 82.64284515]
[168.72505188 79.97954559]
[183.48672485 77.31624603]
[198.24838257 74.65295410]
[207.05491638 61.52967072]
[222.57756042 58.55928802]
[235.60699463 67.50408173]
[238.41310120 83.05725861]
[229.33105469 95.99139404]
[213.74908447 98.63290405]
[200.91168213 89.41461945]
[186.15000916 92.07791901]
[171.38835144 94.74121857]
[156.62667847 97.40451050]
[141.86500549 100.06781006]
[127.10334015 102.73110962]
[124.26769257 112.37454224]
[118.12778473 120.33306885]
[109.51961517 125.52307129]
[99.61526489 127.23787689]
[89.76330566 125.24401093]
[81.30515289 119.81295013]
[68.40494537 127.46700287]
[55.50473022 135.12104797]
[46.99847031 151.33283997]
[29.54881096 151.11622620]
[16.93000793 159.22584534]
[4.31120396 167.33546448]
[-8.30759907 175.44506836]
[-10.07023144 186.46786499]
[-17.55354118 194.44860840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[6 25]
[7 24]
[9 22]
[10 21]
[12 19]
[13 18]
[31 85]
[32 84]
[33 83]
[34 82]
[37 80]
[38 79]
[39 78]
[41 53]
[42 52]
[43 51]
[44 50]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
