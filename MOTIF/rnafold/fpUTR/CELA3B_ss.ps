%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGAGAACUGUGGCCUUGGACCAUGGGAGACCUGCAUUUCCACCACCUGUUCUGGGAGUGGGGCCCAGUCAGCCCCCUUUGCUUACCUUCUGCCCUAUAUUAGAGCCCCAGGUUCUGUGCCCUUUUCCUAUCAUCGCAAAACUC\
) } def
/len { sequence length } bind def

/coor [
[87.11473846 187.08262634]
[93.39040375 173.06436157]
[105.84381866 164.07502747]
[104.24401855 149.16058350]
[102.64421082 134.24613953]
[101.04441071 119.33170319]
[88.65082550 110.88189697]
[74.18288422 114.84154510]
[59.71495056 118.80118561]
[45.24700928 122.76082611]
[32.64781952 136.14494324]
[15.86507988 131.12031555]
[1.48506176 135.38822937]
[-12.89495564 139.65614319]
[-27.27497292 143.92405701]
[-30.95721436 147.82214355]
[-35.33775330 149.68247986]
[-39.50421524 149.58642578]
[-42.71449661 147.97277832]
[-57.33841705 151.31059265]
[-71.96233368 154.64840698]
[-86.58625031 157.98622131]
[-91.32995605 174.84466553]
[-103.86467743 186.94822693]
[-120.70670319 191.05717468]
[-137.23738098 186.13664246]
[-148.96968079 173.61543274]
[-163.43760681 177.57507324]
[-174.58052063 189.60700989]
[-190.50979614 185.70959473]
[-194.83879089 169.89213562]
[-183.11418152 158.42628479]
[-167.39724731 163.10713196]
[-152.92932129 159.14749146]
[-151.03752136 146.57803345]
[-144.48727417 135.63002014]
[-134.23065186 127.96419525]
[-121.78501129 124.75910187]
[-109.00856781 126.53009033]
[-97.82292175 133.04676819]
[-89.92406464 143.36230469]
[-75.30014801 140.02449036]
[-60.67622757 136.68667603]
[-46.05231094 133.34886169]
[-31.54288673 129.54403687]
[-17.16287041 125.27613068]
[-2.78285217 121.00821686]
[11.59716606 116.74030304]
[17.67012024 106.22743225]
[29.67113495 102.58136749]
[41.28736877 108.29288483]
[55.75530624 104.33324432]
[70.22324371 100.37360382]
[84.69118500 96.41396332]
[97.91527557 89.33417511]
[109.23241425 79.48925781]
[120.54955292 69.64434052]
[131.86668396 59.79942703]
[143.18382263 49.95450974]
[154.50096130 40.10959244]
[159.83465576 25.21455002]
[174.51528931 22.69889259]
[185.83241272 12.85397625]
[197.14955139 3.00905895]
[208.46669006 -6.83585835]
[219.78382874 -16.68077469]
[225.11752319 -31.57581902]
[239.79815674 -34.09147644]
[251.11528015 -43.93638992]
[262.43243408 -53.78130722]
[261.98699951 -66.64685822]
[268.75772095 -77.28868866]
[280.12164307 -82.13198853]
[283.61553955 -96.71940613]
[287.10943604 -111.30682373]
[277.65637207 -123.76368713]
[278.47363281 -139.37989807]
[289.17538452 -150.78195190]
[304.70852661 -152.58616638]
[317.73883057 -143.94061279]
[322.11373901 -128.92749023]
[315.76760864 -114.63552094]
[301.69683838 -107.81293488]
[298.20297241 -93.22551727]
[294.70907593 -78.63809967]
[296.31945801 -77.39849091]
[297.80020142 -76.00658417]
[311.64300537 -81.78383636]
[325.48580933 -87.56108856]
[339.32861328 -93.33834076]
[343.01254272 -108.29611206]
[354.66152954 -118.10195923]
[369.67330933 -119.15573120]
[382.27621460 -111.26237488]
[396.11901855 -117.03962708]
[405.87454224 -129.49516296]
[420.59997559 -127.25667572]
[434.44277954 -133.03393555]
[448.28558350 -138.81118774]
[460.57403564 -150.49151611]
[475.19967651 -141.91673279]
[471.00878906 -125.48892975]
[454.06283569 -124.96837616]
[440.22003174 -119.19112396]
[426.37722778 -113.41387177]
[417.61181641 -101.37155914]
[401.89627075 -103.19682312]
[388.05346680 -97.41957092]
[384.80078125 -82.90895081]
[373.49362183 -72.97859192]
[358.32995605 -71.59425354]
[345.10586548 -79.49553680]
[331.26306152 -73.71828461]
[317.42025757 -67.94103241]
[303.57745361 -62.16377640]
[293.96282959 -43.44231796]
[272.27734375 -42.46417236]
[260.96020508 -32.61925507]
[249.64306641 -22.77433777]
[245.11885071 -8.58346844]
[229.62875366 -5.36363745]
[218.31161499 4.48127937]
[206.99447632 14.32619667]
[195.67733765 24.17111397]
[184.36019897 34.01602936]
[179.83598328 48.20689774]
[164.34588623 51.42673111]
[153.02874756 61.27164841]
[141.71160889 71.11656189]
[130.39447021 80.96147919]
[119.07733154 90.80639648]
[107.76019287 100.65131378]
[111.36966705 103.17475128]
[114.17105865 107.03614044]
[115.80036163 111.99695587]
[115.95884705 117.73189545]
[117.55865479 132.64634705]
[119.15846252 147.56079102]
[120.75826263 162.47521973]
[134.83491516 168.61878967]
[143.94094849 180.98713684]
[145.62689209 196.25320435]
[139.43923950 210.31053162]
[127.04241943 219.37776184]
[111.77112579 221.01583862]
[97.73326874 214.78414917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 139]
[4 138]
[5 137]
[6 136]
[7 54]
[8 53]
[9 52]
[10 51]
[12 48]
[13 47]
[14 46]
[15 45]
[19 44]
[20 43]
[21 42]
[22 41]
[27 34]
[28 33]
[55 132]
[56 131]
[57 130]
[58 129]
[59 128]
[60 127]
[62 125]
[63 124]
[64 123]
[65 122]
[66 121]
[68 119]
[69 118]
[70 117]
[73 85]
[74 84]
[75 83]
[87 115]
[88 114]
[89 113]
[90 112]
[94 108]
[95 107]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
