%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUUUGCCACUCGGAAGCUGGGGCGAUACUUAUUCAAAACUCACAACGUAUUUUCUUACAGAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[147.85293579 105.35848236]
[132.86804199 106.03145599]
[117.88314819 106.70442963]
[108.03028107 117.32832336]
[93.55535126 117.97839355]
[82.78982544 108.28047180]
[67.80493164 108.95344543]
[52.82003403 109.62641144]
[37.83513641 110.29938507]
[22.85024261 110.97235870]
[16.61255455 114.47015381]
[10.52058697 114.08354187]
[6.50429726 110.97235870]
[-8.48059845 110.29938507]
[-23.46549416 109.62641144]
[-38.45038986 108.95344543]
[-54.54484177 114.28307343]
[-64.12157440 100.29299164]
[-53.32933426 87.21767426]
[-37.77742004 93.96854401]
[-22.79252243 94.64151764]
[-7.80762625 95.31449127]
[7.17726946 95.98746490]
[22.17726898 95.98746490]
[37.16216660 95.31449127]
[52.14706039 94.64151764]
[67.13195801 93.96854401]
[82.11685181 93.29557037]
[91.96971893 82.67167664]
[106.44464874 82.02160645]
[117.21017456 91.71952820]
[132.19506836 91.04655457]
[147.17996216 90.37358856]
[148.78840637 83.16880035]
[151.59947205 76.34861755]
[155.52919006 70.11199951]
[160.46096802 64.64054108]
[166.24906921 60.09319687]
[172.72293091 56.60166550]
[179.69218445 54.26654434]
[186.95219421 53.15446854]
[194.29016113 53.29618835]
[201.49131775 54.68573761]
[208.34518433 57.28063965]
[214.65176392 61.00322723]
[220.22735596 65.74295044]
[224.90992737 71.35966492]
[228.56379700 77.68778229]
[231.08358765 84.54113007]
[232.39721680 91.71844482]
[232.46804810 99.00929260]
[231.29582214 106.20021820]
[228.91665649 113.08100128]
[225.40191650 119.45080566]
[236.24383545 129.81674194]
[247.08575439 140.18267822]
[257.92767334 150.54862976]
[268.76962280 160.91456604]
[279.61154175 171.28050232]
[295.23837280 177.85607910]
[293.24572754 194.69252014]
[276.51562500 197.43852234]
[269.24560547 182.12242126]
[258.40365601 171.75648499]
[247.56175232 161.39054871]
[236.71981812 151.02461243]
[225.87789917 140.65867615]
[215.03598022 130.29272461]
[188.69218445 138.66352844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[13 23]
[14 22]
[15 21]
[16 20]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
