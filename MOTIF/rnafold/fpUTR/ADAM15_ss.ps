%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCUGGUGGCCGCGCGGCGCUGCUGGGUUCUCCGAGGCGACCUGGCCGCCGGCCGCUCCUCCGCGCGCUGUUCCGCACUUGCUGCCCUCGCCCGGCCCGGAGCGCCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[13.61562920 360.82028198]
[11.11433315 363.03900146]
[8.35654640 364.03176880]
[1.69187117 377.46984863]
[-4.97280455 390.90792847]
[-11.63747978 404.34600830]
[-10.06241798 420.66934204]
[-23.56666183 429.97351074]
[-38.25820160 422.68716431]
[-39.02364349 406.30590820]
[-25.07556343 397.68133545]
[-18.41088867 384.24325562]
[-11.74621296 370.80517578]
[-5.08153725 357.36706543]
[0.84584093 343.58789062]
[6.01853561 329.50799561]
[11.00010109 315.35934448]
[15.78962421 301.14456177]
[20.57914734 286.92974854]
[25.36866951 272.71496582]
[30.15819359 258.50015259]
[34.94771576 244.28536987]
[39.73723984 230.07057190]
[44.52676010 215.85577393]
[43.66907501 208.41352844]
[49.64323807 201.32395935]
[54.81593323 187.24407959]
[59.98862457 173.16418457]
[65.16132355 159.08430481]
[70.33401489 145.00440979]
[69.15821838 142.31956482]
[69.04886627 138.97781372]
[70.27342224 135.41177368]
[72.92678833 132.14659119]
[76.90319824 129.73324585]
[83.56787109 116.29515839]
[90.23255157 102.85707092]
[90.72646332 94.69506836]
[97.26397705 89.14901733]
[104.29010773 75.89633179]
[111.31623077 62.64365387]
[118.34236145 49.39097214]
[125.36848450 36.13829041]
[121.53497314 25.78032875]
[124.05820465 15.25521946]
[131.84657288 8.06178284]
[142.10151672 6.45009899]
[149.83482361 -6.40275860]
[157.56813049 -19.25561714]
[158.05310059 -35.06938934]
[171.24446106 -41.98584747]
[178.97776794 -54.83870316]
[184.90515137 -68.61789703]
[188.91807556 -83.07115173]
[192.93099976 -97.52439880]
[196.94392395 -111.97764587]
[200.76077271 -126.48390961]
[204.38084412 -141.04052734]
[208.00090027 -155.59715271]
[199.63920593 -169.00823975]
[203.29101562 -184.38484192]
[216.78977966 -192.60427856]
[232.12690735 -188.79011536]
[240.20317078 -175.20521545]
[236.22705078 -159.90925598]
[222.55752563 -151.97708130]
[218.93745422 -137.42045593]
[215.31738281 -122.86384583]
[216.77624512 -115.51575470]
[211.39717102 -107.96472168]
[207.38424683 -93.51147461]
[203.37132263 -79.05821991]
[199.35839844 -64.60497284]
[211.89306641 -72.84403992]
[226.85655212 -73.88992310]
[240.41549683 -67.47468567]
[249.09631348 -55.24180603]
[250.67514038 -40.32512665]
[244.74749756 -26.54604340]
[232.83195496 -17.43451500]
[217.98106384 -15.32475853]
[203.99937439 -20.75725365]
[194.46871948 -32.34029388]
[191.83062744 -47.10539627]
[184.09732056 -34.25254059]
[184.16548157 -19.35808945]
[170.42098999 -11.52230835]
[162.68768311 1.33054924]
[154.95437622 14.18340683]
[156.15716553 33.40319061]
[138.62117004 43.16441727]
[131.59504700 56.41709900]
[124.56891632 69.66977692]
[117.54278564 82.92246246]
[110.51666260 96.17514038]
[103.67063141 109.52174377]
[97.00595856 122.95983124]
[90.34127808 136.39791870]
[84.41390228 150.17710876]
[79.24121094 164.25698853]
[74.06851196 178.33688354]
[68.89582062 192.41676331]
[63.72312546 206.49665833]
[58.74155807 220.64529419]
[53.95203781 234.86009216]
[49.16251373 249.07489014]
[44.37298965 263.28970337]
[39.58346558 277.50448608]
[34.79394531 291.71929932]
[30.00442123 305.93408203]
[25.21489906 320.14889526]
[25.42955780 329.41744995]
[20.09842300 334.68069458]
[14.92572880 348.76058960]
[15.90822029 353.30709839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[15 114]
[16 113]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[26 103]
[27 102]
[28 101]
[29 100]
[30 99]
[35 98]
[36 97]
[37 96]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[47 89]
[48 88]
[49 87]
[51 85]
[52 84]
[53 73]
[54 72]
[55 71]
[56 70]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
