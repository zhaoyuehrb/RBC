%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUGUCUGGCGGUGCCGACGGUGAGGGGCGGUGGCCCAACGGCGGGAGAUUCAAACCUGGAAGAAGGAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[202.34869385 184.79513550]
[200.51072693 171.27833557]
[187.62490845 163.60006714]
[174.73910522 155.92178345]
[161.85328674 148.24351501]
[148.96748352 140.56523132]
[141.39273071 139.82667542]
[135.71716309 132.29397583]
[123.15966797 124.08975983]
[110.60217285 115.88553619]
[96.39986420 118.75621033]
[84.26972198 110.83119202]
[81.19360352 96.67195892]
[68.63610840 88.46774292]
[59.45801926 86.29605103]
[55.73892212 79.65597534]
[43.53118896 70.93982697]
[31.32345963 62.22367477]
[22.24295235 59.67455673]
[18.80143356 52.88646317]
[6.96432543 43.67327499]
[-8.67829800 41.30284882]
[-13.96955585 27.37977982]
[-25.80666351 18.16658974]
[-41.84030151 18.71618271]
[-52.15686798 6.43009329]
[-48.84238052 -9.26683998]
[-34.43942642 -16.33327484]
[-19.99672318 -9.34844685]
[-16.59347153 6.32948160]
[-4.75636482 15.54267216]
[10.03958893 17.25410652]
[16.17751694 31.83616638]
[28.01462364 41.04935837]
[40.03961182 50.01594162]
[52.24734116 58.73209381]
[64.45507050 67.44824982]
[76.84033203 75.91024017]
[89.39782715 84.11446381]
[103.60013580 81.24378967]
[115.73027802 89.16880798]
[118.80639648 103.32804108]
[131.36389160 111.53225708]
[143.92138672 119.73648071]
[156.64575195 127.67942810]
[169.53157043 135.35771179]
[182.41737366 143.03598022]
[195.30319214 150.71424866]
[208.18899536 158.39253235]
[224.90945435 153.74777222]
[239.60144043 162.33947754]
[243.59204102 178.54113770]
[256.78414917 185.68034363]
[269.97625732 192.81954956]
[282.52874756 187.47943115]
[295.65383911 190.39407349]
[304.50381470 200.25306702]
[305.94635010 213.22520447]
[318.83215332 220.90348816]
[331.71795654 228.58175659]
[346.97518921 224.45956421]
[360.63668823 232.40554810]
[364.59735107 247.70550537]
[356.50738525 261.28225708]
[341.16641235 265.08093262]
[327.67596436 256.84783936]
[324.03970337 241.46757507]
[311.15386963 233.78929138]
[298.26806641 226.11102295]
[282.30725098 230.97625732]
[267.40591431 222.75302124]
[262.83703613 206.01165771]
[249.64494324 198.87245178]
[236.45283508 191.73323059]
[224.57064819 197.13426208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[8 44]
[9 43]
[10 42]
[13 39]
[14 38]
[16 37]
[17 36]
[18 35]
[20 34]
[21 33]
[23 31]
[24 30]
[52 74]
[53 73]
[54 72]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
