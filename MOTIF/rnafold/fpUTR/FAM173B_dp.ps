%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:15 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (FAM173B)
} def

/sequence { (\
UUUUUUUUUUUUAAAAACGCUGUUGGAAAUCUCGCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 14 0.016886770 ubox
1 15 0.038540841 ubox
1 16 0.160753596 ubox
1 17 0.179321943 ubox
1 27 0.007757255 ubox
1 28 0.014485392 ubox
1 29 0.022903253 ubox
2 13 0.018866926 ubox
2 14 0.043827972 ubox
2 15 0.184495527 ubox
2 16 0.220012530 ubox
2 17 0.342192209 ubox
2 25 0.003343981 ubox
2 26 0.008257340 ubox
2 27 0.016550721 ubox
2 28 0.027370796 ubox
2 29 0.027524577 ubox
3 13 0.043732666 ubox
3 14 0.189327257 ubox
3 15 0.227516771 ubox
3 16 0.400921428 ubox
3 17 0.267273054 ubox
3 25 0.007677953 ubox
3 26 0.016543875 ubox
3 27 0.028157193 ubox
3 28 0.031473428 ubox
3 29 0.027797120 ubox
4 13 0.189392041 ubox
4 14 0.227935438 ubox
4 15 0.413230690 ubox
4 16 0.312974391 ubox
4 17 0.298082094 ubox
4 25 0.014517815 ubox
4 26 0.027753116 ubox
4 27 0.032165053 ubox
4 28 0.031743851 ubox
4 29 0.030280255 ubox
5 13 0.223782385 ubox
5 14 0.415660707 ubox
5 15 0.322365890 ubox
5 16 0.349618411 ubox
5 17 0.131365502 ubox
5 25 0.025281933 ubox
5 26 0.031900266 ubox
5 27 0.032441345 ubox
5 28 0.034527803 ubox
5 29 0.034051713 ubox
6 13 0.404466805 ubox
6 14 0.323710204 ubox
6 15 0.360709243 ubox
6 16 0.153793219 ubox
6 17 0.090655279 ubox
6 25 0.029691215 ubox
6 26 0.032220076 ubox
6 27 0.035240443 ubox
6 28 0.038742784 ubox
6 29 0.036243418 ubox
7 13 0.317618555 ubox
7 14 0.360454307 ubox
7 15 0.158123073 ubox
7 16 0.106119401 ubox
7 17 0.063134829 ubox
7 25 0.030158105 ubox
7 26 0.034987408 ubox
7 27 0.039459543 ubox
7 28 0.040896753 ubox
7 29 0.045496643 ubox
8 13 0.344783454 ubox
8 14 0.155951262 ubox
8 15 0.106972618 ubox
8 16 0.073797398 ubox
8 17 0.043621493 ubox
8 25 0.032560241 ubox
8 26 0.039142597 ubox
8 27 0.041356169 ubox
8 28 0.050342757 ubox
8 29 0.258142636 ubox
9 13 0.130395680 ubox
9 14 0.093937250 ubox
9 15 0.074567712 ubox
9 16 0.049949839 ubox
9 17 0.030396598 ubox
9 25 0.036141432 ubox
9 26 0.040775256 ubox
9 27 0.049768224 ubox
9 28 0.296669851 ubox
9 29 0.035872923 ubox
10 14 0.062673020 ubox
10 15 0.044903513 ubox
10 16 0.034872181 ubox
10 17 0.020682389 ubox
10 25 0.037490457 ubox
10 26 0.047558155 ubox
10 27 0.305461061 ubox
10 28 0.040624683 ubox
10 29 0.026893891 ubox
11 15 0.030002165 ubox
11 16 0.021091234 ubox
11 17 0.014598631 ubox
11 25 0.043089967 ubox
11 26 0.306631295 ubox
11 27 0.041010946 ubox
11 28 0.030754225 ubox
11 29 0.010236709 ubox
12 16 0.014222332 ubox
12 22 0.022591596 ubox
12 25 0.307176789 ubox
12 26 0.038019550 ubox
12 27 0.030841880 ubox
12 28 0.010994137 ubox
13 21 0.023431385 ubox
13 24 0.306221901 ubox
14 23 0.296335357 ubox
14 24 0.022688034 ubox
15 23 0.023199225 ubox
15 24 0.029895613 ubox
16 23 0.027941927 ubox
16 24 0.069352977 ubox
17 23 0.077585503 ubox
18 22 0.078777332 ubox
18 25 0.057165008 ubox
18 34 0.069339705 ubox
18 36 0.775176088 ubox
19 24 0.039051522 ubox
19 33 0.070057433 ubox
19 35 0.814073360 ubox
20 26 0.036534053 ubox
20 34 0.809046816 ubox
21 25 0.033686897 ubox
21 34 0.086083351 ubox
21 36 0.197206894 ubox
22 30 0.252610318 ubox
22 33 0.390121842 ubox
22 35 0.355624678 ubox
23 29 0.253931660 ubox
23 34 0.346151385 ubox
24 28 0.211808455 ubox
24 34 0.088546704 ubox
24 36 0.052167695 ubox
25 31 0.305908824 ubox
25 32 0.439952567 ubox
25 33 0.186431872 ubox
25 35 0.089494998 ubox
26 30 0.198816154 ubox
26 31 0.459763730 ubox
26 32 0.152281375 ubox
26 33 0.251629925 ubox
27 32 0.236288572 ubox
18 36 0.9500000 lbox
19 35 0.9500000 lbox
20 34 0.9500000 lbox
showpage
end
%%EOF
