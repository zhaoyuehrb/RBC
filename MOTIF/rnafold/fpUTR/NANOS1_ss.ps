%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGCCGGCGGGCAGGCUCGGCGUGUCCCUUCCGUCCGGCCCGCGCCGGCGGCGGGGAGGCGGCGCGCGGCCCGCAGCCCGCCC\
) } def
/len { sequence length } bind def

/coor [
[94.58061218 350.43286133]
[94.03907776 335.44265747]
[93.49754333 320.45242310]
[85.30580139 308.01278687]
[92.53983307 293.94229126]
[91.99829865 278.95205688]
[91.45676422 263.96185303]
[82.74202728 255.36508179]
[82.30136871 242.72747803]
[90.92958069 232.93782043]
[90.92958069 217.93782043]
[90.92958069 202.93782043]
[90.92958069 187.93782043]
[90.92958069 172.93782043]
[90.92958069 157.93782043]
[82.53089142 149.03205872]
[82.54676056 136.38676453]
[91.52277374 126.91500092]
[92.06431580 111.92477417]
[85.68539429 99.48287201]
[92.94546509 87.53369141]
[93.48699951 72.54346466]
[86.25296783 58.47295380]
[94.44470978 46.03331757]
[94.98624420 31.04309464]
[95.52777863 16.05287361]
[88.29373932 1.98236167]
[96.48548126 -10.45727825]
[97.02701569 -25.44750023]
[97.56855774 -40.43772125]
[98.11009216 -55.42794418]
[98.65162659 -70.41816711]
[91.41759491 -84.48867798]
[99.60932922 -96.92831421]
[100.15087128 -111.91853333]
[100.69240570 -126.90876007]
[97.82508087 -135.83198547]
[101.53381348 -142.42758179]
[102.61618042 -157.38848877]
[103.69854736 -172.34938049]
[104.78091431 -187.31028748]
[105.86327362 -202.27117920]
[98.22686768 -216.78384399]
[107.20465088 -230.50723267]
[123.56105042 -229.32391357]
[130.47000122 -214.45117188]
[120.82417297 -201.18881226]
[119.74180603 -186.22792053]
[118.65943909 -171.26701355]
[117.57707977 -156.30612183]
[116.49471283 -141.34523010]
[115.68262482 -126.36721802]
[115.14109039 -111.37699890]
[114.59955597 -96.38677979]
[121.87232208 -83.38846588]
[113.64184570 -69.87662506]
[113.10031128 -54.88640594]
[112.55877686 -39.89618301]
[112.01724243 -24.90596390]
[111.47570801 -9.91574192]
[118.74847412 3.08256841]
[110.51799774 16.59440994]
[109.97646332 31.58463097]
[109.43492889 46.57485199]
[116.70769501 59.57316208]
[108.47722626 73.08499908]
[107.93568420 88.07522583]
[114.31460571 100.51712799]
[107.05453491 112.46630859]
[106.51300049 127.45653534]
[115.54647064 143.37812805]
[105.92958069 157.93782043]
[105.92958069 172.93782043]
[105.92958069 187.93782043]
[105.92958069 202.93782043]
[105.92958069 217.93782043]
[105.92958069 232.93782043]
[115.53196716 248.52291870]
[106.44698334 263.42031860]
[106.98851776 278.41052246]
[107.53005981 293.40075684]
[115.76053619 306.91259766]
[108.48776245 319.91088867]
[109.02929688 334.90112305]
[109.57083130 349.89132690]
[112.45549011 369.05715942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[5 81]
[6 80]
[7 79]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[18 70]
[19 69]
[21 67]
[22 66]
[24 64]
[25 63]
[26 62]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[36 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
