%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCACUUCCGGCGCGCAGCGGGCGGCCAUGUUGGAGCAGCGGAGGCGGCGCAGAGGCGCGUCUUGGGUCCCCGCGGCGGCGCCGGUGCCAAGCGCUGGUUUGCGGAUACCCAGGCAGAUCUGCAGUGCCUAAUGCC\
) } def
/len { sequence length } bind def

/coor [
[122.25331116 224.85014343]
[120.22541809 209.98785400]
[116.17028046 203.73303223]
[118.32357025 194.76719666]
[116.63207245 179.86286926]
[114.94057465 164.95855713]
[113.24906921 150.05422974]
[111.55757141 135.14990234]
[78.85862732 121.60385895]
[77.56703186 93.15802765]
[65.37227631 84.42373657]
[53.17751694 75.68943787]
[40.98276138 66.95514679]
[28.78800392 58.22085190]
[16.59324646 49.48655701]
[4.39848948 40.75226212]
[-7.89419031 32.15633011]
[-20.28322220 23.69986153]
[-36.04329300 22.31032562]
[-42.19318008 8.74462795]
[-54.58221436 0.28815931]
[-66.97124481 -8.16830921]
[-79.36028290 -16.62477875]
[-91.74931335 -25.08124733]
[-100.68291473 -27.36453629]
[-104.31981659 -33.87145233]
[-116.51457214 -42.60574722]
[-128.70933533 -51.34004211]
[-140.90408325 -60.07433701]
[-153.68788147 -56.85191345]
[-165.66233826 -61.66634369]
[-172.36267090 -72.37068176]
[-187.28515625 -73.89364624]
[-202.20764160 -75.41661072]
[-217.13012695 -76.93957520]
[-233.50129700 -72.53263855]
[-242.26800537 -87.04405975]
[-230.75054932 -99.48531342]
[-215.60716248 -91.86206055]
[-200.68467712 -90.33909607]
[-185.76219177 -88.81613159]
[-170.83970642 -87.29316711]
[-170.58775330 -87.75943756]
[-170.32365417 -88.21893311]
[-179.46627808 -100.11063385]
[-188.60890198 -112.00232697]
[-197.75152588 -123.89402008]
[-206.89414978 -135.78572083]
[-216.03677368 -147.67741394]
[-223.81639099 -152.62718201]
[-225.24801636 -159.94274902]
[-234.11955261 -172.03802490]
[-242.99110413 -184.13330078]
[-258.21212769 -190.23675537]
[-260.26873779 -206.50643921]
[-247.04525757 -216.20547485]
[-232.14486694 -209.35635376]
[-230.89582825 -193.00483704]
[-222.02427673 -180.90956116]
[-213.15274048 -168.81428528]
[-204.14508057 -156.82003784]
[-195.00245667 -144.92834473]
[-185.85983276 -133.03665161]
[-176.71720886 -121.14495087]
[-167.57458496 -109.25325775]
[-158.43196106 -97.36155701]
[-138.26455688 -92.74842072]
[-132.16979980 -72.26909637]
[-119.97503662 -63.53480148]
[-107.78028107 -54.80050659]
[-95.58552551 -46.06621170]
[-83.29284668 -37.47027969]
[-70.90380859 -29.01381111]
[-58.51477814 -20.55734253]
[-46.12574387 -12.10087299]
[-33.73671341 -3.64440441]
[-18.86279106 -2.85973024]
[-11.82675457 11.31082916]
[0.56227863 19.76729774]
[7.92216539 20.95013046]
[13.13278389 28.55750465]
[25.32754135 37.29180145]
[37.52229691 46.02609253]
[49.71705627 54.76038742]
[61.91181183 63.49468231]
[74.10656738 72.22898102]
[86.30132294 80.96327209]
[106.47264862 70.47392273]
[132.19403076 81.76162720]
[144.95252991 73.87362671]
[155.24520874 60.40153122]
[171.04010010 66.56251526]
[169.49234009 83.44567108]
[152.84053040 86.63212585]
[140.08203125 94.52013397]
[142.10992432 109.38241577]
[156.51527405 113.56403351]
[171.92532349 109.98059082]
[181.99108887 120.95919037]
[196.39643860 125.14080811]
[210.80178833 129.32241821]
[225.20713806 133.50402832]
[239.61248779 137.68563843]
[254.01783752 141.86724854]
[268.42318726 146.04885864]
[282.91937256 149.90385437]
[297.49896240 153.43025208]
[313.06930542 148.28276062]
[325.13064575 159.39384460]
[321.27529907 175.33335876]
[305.46932983 179.70411682]
[293.97256470 168.00984192]
[279.39297485 164.48344421]
[274.85781860 166.21034241]
[269.18649292 165.04614258]
[264.24157715 160.45420837]
[249.83622742 156.27259827]
[235.43087769 152.09098816]
[221.02552795 147.90937805]
[206.62017822 143.72776794]
[192.21482849 139.54615784]
[177.80947876 135.36454773]
[163.42979431 139.24708557]
[152.33366394 127.96938324]
[137.92831421 123.78777313]
[126.46189880 133.45840454]
[128.15339661 148.36273193]
[129.84489441 163.26705933]
[131.53639221 178.17137146]
[133.22789001 193.07569885]
[135.08770752 207.95996094]
[137.11560059 222.82225037]
[150.43922424 231.00851440]
[155.33462524 245.86007690]
[149.49032593 260.36450195]
[135.66583252 267.67321777]
[120.38865662 264.33529663]
[110.87220001 251.92678833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 79]
[18 78]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[26 71]
[27 70]
[28 69]
[29 68]
[32 42]
[33 41]
[34 40]
[35 39]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[51 60]
[52 59]
[53 58]
[89 95]
[90 94]
[96 125]
[97 124]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
