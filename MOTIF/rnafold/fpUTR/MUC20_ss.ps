%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUUGUGAUCACCUGGUCACACACCUGGGCAGGAGGCUGCCCCUCCUCCCUGGUUUGAGGAAGCAGGAAAAGGUACCCGCGAGAGACAGCCAGCAGUUCUGUGGAGCAGCGGUGGCCGGCUAGG\
) } def
/len { sequence length } bind def

/coor [
[62.00153732 316.36383057]
[63.10662842 331.52453613]
[58.32110214 345.95254517]
[48.37471008 357.44766235]
[34.78421402 364.25698853]
[19.62206078 365.34213257]
[5.20036983 360.53762817]
[-6.28165674 350.57611084]
[-13.07309246 336.97668457]
[-14.13829231 321.81311035]
[-9.31482220 307.39776611]
[0.66177434 295.92883301]
[14.27013874 289.15530396]
[29.43509483 288.11004639]
[34.17609024 273.87899780]
[38.91708374 259.64794922]
[43.65807724 245.41688538]
[48.39907074 231.18582153]
[53.14006805 216.95475769]
[57.88106155 202.72370911]
[49.08006287 190.73703003]
[49.02425385 175.68841553]
[57.94461060 163.34820557]
[72.59008789 158.57157898]
[77.33108521 144.34053040]
[82.07207489 130.10946655]
[86.81307220 115.87841034]
[82.00154114 107.14025879]
[82.04942322 97.79192352]
[68.43310547 91.49939728]
[54.81678772 85.20686340]
[45.60501099 84.42703247]
[40.94447327 78.58660126]
[27.48796654 71.95920563]
[14.03145790 65.33181000]
[0.57494950 58.70441055]
[-12.88155842 52.07701492]
[-26.33806801 45.44961929]
[-41.92882156 49.23220825]
[-54.51803589 39.28780365]
[-54.44834900 23.24490166]
[-41.77321243 13.41024303]
[-26.21590996 17.32813835]
[-19.71067047 31.99311066]
[-6.25416231 38.62050629]
[7.20234585 45.24790192]
[20.65885353 51.87529755]
[34.11536407 58.50269699]
[47.57187271 65.13008881]
[61.10931778 71.59054565]
[74.72563171 77.88307953]
[88.34194946 84.17560577]
[102.57300568 79.43461609]
[109.69503784 66.23322296]
[116.81707001 53.03183365]
[123.93909454 39.83044434]
[131.06112671 26.62905502]
[121.03929901 15.28055954]
[115.51521301 1.21441400]
[115.13761902 -13.86463261]
[119.93279266 -28.13615417]
[129.30369568 -39.88381577]
[142.10424805 -47.70178986]
[156.77940369 -50.66296387]
[171.55418396 -48.42886353]
[178.67622375 -61.63025284]
[178.41902161 -77.44937134]
[191.27149963 -84.97686005]
[198.39352417 -98.17825317]
[191.55461121 -112.10695648]
[194.24206543 -127.38953400]
[205.42250061 -138.14952087]
[220.79681396 -140.24949646]
[234.45327759 -132.88195801]
[241.14070129 -118.87988281]
[238.28762817 -103.62735748]
[226.99111938 -92.98928833]
[211.59492493 -91.05622101]
[204.47288513 -77.85483551]
[205.23950195 -62.97996902]
[191.87760925 -54.50822449]
[184.75558472 -41.30683517]
[194.73591614 -30.18577194]
[200.31967163 -16.29509735]
[200.81498718 -1.30412769]
[196.14282227 12.97845840]
[186.84870911 24.82284355]
[174.03919983 32.78757477]
[159.25015259 35.89496231]
[144.26251221 33.75108337]
[137.14048767 46.95247269]
[130.01846313 60.15386581]
[122.89643097 73.35525513]
[115.77439880 86.55664062]
[120.69104004 100.72797394]
[134.45883179 106.68178558]
[150.19645691 105.05766296]
[158.80712891 117.21108246]
[172.57492065 123.16489410]
[186.34271240 129.11871338]
[200.11050415 135.07252502]
[216.32931519 132.64717102]
[226.32600403 145.64709473]
[219.81683350 160.69909668]
[203.49789429 162.31896973]
[194.15669250 148.84031677]
[180.38890076 142.88650513]
[166.62110901 136.93269348]
[152.85331726 130.97888184]
[138.10044861 133.02885437]
[128.50502014 120.44957733]
[114.73722839 114.49576569]
[101.04412842 120.61940765]
[96.30313110 134.85046387]
[91.56214142 149.08152771]
[86.82114410 163.31257629]
[95.67584229 175.91815186]
[95.41318512 191.14262390]
[86.34345245 203.15110779]
[72.11212158 207.46470642]
[67.37112427 221.69575500]
[62.63013077 235.92681885]
[57.88913345 250.15786743]
[53.14813995 264.38891602]
[48.40714645 278.61999512]
[43.66615295 292.85104370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[24 116]
[25 115]
[26 114]
[27 113]
[29 52]
[30 51]
[31 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[53 94]
[54 93]
[55 92]
[56 91]
[57 90]
[65 82]
[66 81]
[68 79]
[69 78]
[95 112]
[96 111]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
