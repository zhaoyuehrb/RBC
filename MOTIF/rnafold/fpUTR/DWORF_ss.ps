%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAGACGCUGGAUAACAAAAGAAAGAGGUAAGCGUGGCCUGACCUAGCCACCCACCAACAGGAAUA\
) } def
/len { sequence length } bind def

/coor [
[29.49732971 292.26324463]
[15.27771091 297.13180542]
[0.48153844 299.77258301]
[-14.54434490 300.12368774]
[-29.44771004 298.17684937]
[-43.87920380 293.97775269]
[-57.50052643 287.62478638]
[-69.99237823 279.26690674]
[-81.06192780 269.10003662]
[-90.44969177 257.36248779]
[-97.93561554 244.32939148]
[-103.34420013 230.30627441]
[-106.54867554 215.62187195]
[-107.47392273 200.62039185]
[-106.09825134 185.65350342]
[-102.45390320 171.07203674]
[-96.62631226 157.21780396]
[-88.75208282 144.41557312]
[-79.01580048 132.96545410]
[-67.64569855 123.13584900]
[-54.90830612 115.15717316]
[-41.10220718 109.21646118]
[-26.55103493 105.45297241]
[-11.59589291 103.95492554]
[3.41265202 104.75743866]
[18.12277603 107.84169769]
[32.18965530 113.13541412]
[45.28353882 120.51448059]
[57.09748840 129.80592346]
[68.06002808 119.56763458]
[79.02256775 109.32933044]
[77.14499664 97.82332611]
[81.16073608 86.87859344]
[90.03430939 79.31729889]
[101.47760010 77.08917236]
[112.53987885 80.76876068]
[124.38801575 71.56976318]
[136.23616028 62.37075806]
[148.08428955 53.17175674]
[159.93243408 43.97275543]
[159.30339050 28.46843529]
[167.93568420 15.57413483]
[182.51004028 10.24797344]
[197.42230225 14.53796959]
[206.93840027 26.79453278]
[207.39921570 42.30476379]
[198.62754822 55.10466385]
[183.99627686 60.27240753]
[169.13143921 55.82089233]
[157.28329468 65.01989746]
[145.43516541 74.21889496]
[133.58702087 83.41790009]
[121.73888397 92.61689758]
[120.49407196 110.34805298]
[106.96488190 121.87646484]
[89.26086426 120.29187012]
[78.29832458 130.53016663]
[67.33578491 140.76846313]
[75.79936218 153.18894958]
[82.26766968 166.75587463]
[86.58908081 181.15121460]
[88.66230011 196.03752136]
[88.43872070 211.06584167]
[85.92359161 225.88389587]
[81.17587280 240.14431763]
[74.30684662 253.51281738]
[65.47753906 265.67602539]
[54.89492035 276.34881592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 58]
[30 57]
[31 56]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
