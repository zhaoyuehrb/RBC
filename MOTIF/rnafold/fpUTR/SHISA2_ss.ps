%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCGGGGGUCGCCGGGGCCACGACUUCUCGGAGACCGUCCUGCGCUCUCUGGAGACGCGCUGUCCGCGCCCAGGGUGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[85.18988800 125.13671875]
[72.01453400 113.33296204]
[60.48482895 122.92806244]
[48.95512009 132.52314758]
[37.42541504 142.11825562]
[25.89570808 151.71334839]
[20.23758698 166.48818970]
[5.50546312 168.68223572]
[-6.02424383 178.27732849]
[-8.91333675 194.05810547]
[-23.12006950 201.51116943]
[-37.74625397 194.91918945]
[-41.57193375 179.33895874]
[-31.66237259 166.72229004]
[-15.61933899 166.74761963]
[-4.08963203 157.15252686]
[0.74380684 143.06398010]
[16.30061150 140.18363953]
[27.83031845 130.58854675]
[39.36002731 120.99344635]
[50.88973236 111.39835358]
[62.41944122 101.80326080]
[50.77999115 111.26493073]
[36.02432251 113.96127319]
[21.79088593 109.22743225]
[11.58935356 98.23067474]
[7.93521595 83.68257141]
[11.72951031 69.17038727]
[22.03663826 58.27254105]
[36.31507492 53.67621231]
[51.04404831 56.51476288]
[62.59169388 66.08826447]
[68.11044312 80.03487396]
[62.75197983 66.02463531]
[57.39351654 52.01438904]
[43.39079666 44.18473816]
[40.92399216 28.33246803]
[51.88541794 16.61808968]
[67.86640930 18.02786827]
[76.60771179 31.48034286]
[71.40375519 46.65592575]
[76.76222229 60.66616821]
[82.12068176 74.67641449]
[108.52695465 74.01194763]
[122.48529053 92.50000000]
[137.48529053 92.50000000]
[152.48529053 92.50000000]
[167.48529053 92.50000000]
[182.48529053 92.50000000]
[197.48278809 92.22603607]
[212.47277832 91.67820740]
[227.46276855 91.13037872]
[242.45277405 90.58255005]
[257.44274902 90.03472137]
[272.43273926 89.48688507]
[276.46221924 86.69409180]
[280.74673462 85.60924530]
[284.66333008 86.07860565]
[287.71911621 87.74478912]
[289.61114502 90.11469269]
[304.52114868 91.75526428]
[319.43118286 93.39583588]
[334.34118652 95.03639984]
[347.70706177 86.16324615]
[362.93307495 91.21773529]
[368.33914185 106.32250214]
[359.77819824 119.89046478]
[343.81744385 121.51343536]
[332.70062256 109.94641113]
[317.79061890 108.30584717]
[302.88058472 106.66527557]
[287.97058105 105.02471161]
[272.98059082 104.47688293]
[257.99060059 105.02471161]
[243.00059509 105.57254028]
[228.01060486 106.12036896]
[213.02061462 106.66820526]
[198.03062439 107.21603394]
[191.30380249 110.68875122]
[182.48529053 107.50000000]
[167.48529053 107.50000000]
[152.48529053 107.50000000]
[137.48529053 107.50000000]
[122.48529053 107.50000000]
[115.55194092 120.24285126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[8 16]
[9 15]
[33 43]
[34 42]
[35 41]
[45 84]
[46 83]
[47 82]
[48 81]
[49 80]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
