%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGAAACUCCAUCAGGCUCCGCCCCACGGUCUGCGGAGUGAGCCAAUCAGGGCACAGCCUGCGUUGACCGCGUGCCGGGUGUC\
) } def
/len { sequence length } bind def

/coor [
[-9.20120049 243.26046753]
[-16.85525131 256.16067505]
[-24.50930214 269.06088257]
[-18.24363518 283.25671387]
[-21.55159378 298.41708374]
[-33.16120148 308.71255493]
[-48.60832214 310.18429565]
[-61.95322800 302.26638794]
[-68.06452942 288.00344849]
[-64.59230042 272.87985229]
[-52.87169647 262.71093750]
[-37.40951538 261.40682983]
[-29.75546455 248.50662231]
[-22.10141373 235.60641479]
[-28.21815109 227.94517517]
[-31.88581657 218.82780457]
[-32.78263855 209.01737976]
[-30.81937981 199.33924866]
[-26.14800262 190.61163330]
[-19.15000153 183.57635498]
[-10.40528202 178.83590698]
[-0.64411104 176.80175781]
[9.31385612 177.65873718]
[18.62840652 181.34834290]
[28.84967422 170.36993408]
[39.07094574 159.39151001]
[49.29221344 148.41310120]
[59.51348114 137.43467712]
[69.33639526 126.09843445]
[78.74842834 114.41880798]
[88.16046143 102.73918915]
[97.14962769 90.73107147]
[105.70446777 78.40975952]
[114.25930786 66.08844757]
[122.81414795 53.76713181]
[130.92375183 41.14833069]
[138.57780457 28.24811745]
[146.23185730 15.34790325]
[153.88591003 2.44768977]
[161.53996277 -10.45252419]
[157.85139465 -25.58633423]
[165.79745483 -38.55994797]
[180.24795532 -41.98317337]
[187.90200806 -54.88338852]
[188.28964233 -70.69984436]
[201.43817139 -77.69736481]
[209.09222412 -90.59757996]
[216.74627686 -103.49779510]
[212.59541321 -118.74725342]
[220.51571655 -132.42366028]
[235.80819702 -136.41307068]
[249.40011597 -128.34861755]
[253.22761536 -113.01480103]
[245.01991272 -99.50891113]
[229.64648438 -95.84374237]
[221.99243164 -82.94352722]
[214.33837891 -70.04331970]
[214.49822998 -55.14957047]
[200.80223083 -47.22933578]
[193.14817810 -34.32912445]
[197.06907654 -20.00564194]
[189.49053955 -6.81395531]
[174.44017029 -2.79847336]
[166.78611755 10.10173988]
[159.13208008 23.00195312]
[151.47802734 35.90216827]
[143.82397461 48.80237961]
[144.18902588 53.77458954]
[141.27149963 58.98691559]
[135.13545227 62.32197189]
[126.58061981 74.64328766]
[118.02577972 86.96459961]
[109.47093964 99.28591156]
[109.21980286 104.77435303]
[105.79214478 109.66471100]
[99.84008789 112.15122223]
[90.42805481 123.83084869]
[81.01601410 135.51046753]
[79.54476929 142.33753967]
[75.36554718 146.60537720]
[70.49189758 147.65594482]
[60.27062988 158.63436890]
[50.04936218 169.61277771]
[39.82809448 180.59120178]
[29.60682297 191.56961060]
[35.47619629 211.79333496]
[28.52122879 231.53649902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[29 78]
[30 77]
[31 76]
[32 73]
[33 72]
[34 71]
[35 70]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[43 60]
[44 59]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
