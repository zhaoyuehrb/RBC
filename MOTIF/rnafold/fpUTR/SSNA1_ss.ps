%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGCGCACAAGGCGCUCAGCGAUGACGCGCUAGUUCGGCGCGCCGUGGGGGAGUCGUGCGCAGGCGCGGACAGCGCUGCUUCCGCGGCGGUUGGGGUGGUGGGGCCCCGGGCGGCGUUGACC\
) } def
/len { sequence length } bind def

/coor [
[116.52583313 227.35192871]
[109.35193634 240.52520752]
[95.88860321 247.13871765]
[81.07761383 244.76495361]
[70.35543823 234.27520752]
[67.65764618 219.52012634]
[59.20784378 231.91371155]
[50.75804138 244.30729675]
[42.30823898 256.70086670]
[43.86602402 272.66812134]
[32.25370407 283.73760986]
[16.37926102 281.41778564]
[8.42020798 267.48822021]
[14.48204899 252.63446045]
[29.91465950 248.25106812]
[38.36445999 235.85749817]
[46.81425858 223.46391296]
[55.26406097 211.07032776]
[62.43787003 197.89700317]
[68.26439667 184.07485962]
[74.09091187 170.25271606]
[79.91743469 156.43057251]
[85.74395752 142.60842896]
[91.57048035 128.78628540]
[88.31635284 122.02902222]
[74.80171967 128.53706360]
[68.29388428 115.02233887]
[81.80809784 108.51448822]
[78.55397034 101.75722504]
[64.11460114 97.69461823]
[49.67523956 93.63201141]
[35.23587799 89.56940460]
[20.79651451 85.50679779]
[6.35715008 81.44419098]
[-8.28250408 88.00621033]
[-22.47394371 80.52405548]
[-25.33071327 64.73740387]
[-14.66134167 52.75641632]
[1.34954154 53.77188492]
[10.41975689 67.00482178]
[24.85912132 71.06743622]
[39.29848480 75.13004303]
[53.73784637 79.19264984]
[68.17721558 83.25525665]
[82.61657715 87.31786346]
[95.60695648 79.81786346]
[99.30831909 65.28170013]
[103.00968170 50.74554062]
[106.71103668 36.20938110]
[110.41239929 21.67322350]
[114.11376190 7.13706398]
[117.81512451 -7.39909506]
[121.51647949 -21.93525505]
[125.21784210 -36.47141266]
[128.73770142 -51.05258560]
[132.07551575 -65.67650604]
[135.41333008 -80.30042267]
[128.52951050 -99.16959381]
[142.04705811 -112.90527344]
[144.65177917 -127.67739105]
[139.42840576 -142.61148071]
[149.25822449 -153.80181885]
[151.86294556 -168.57394409]
[154.46766663 -183.34605408]
[148.35342407 -198.56275940]
[158.68588257 -211.29745483]
[174.83589172 -208.44976807]
[180.18971252 -192.94917297]
[169.23977661 -180.74133301]
[166.63505554 -165.96922302]
[164.03033447 -151.19709778]
[169.44001770 -137.31962585]
[159.42388916 -125.07266998]
[156.81916809 -110.30055237]
[163.48121643 -102.37685394]
[164.64736938 -91.86820984]
[159.68156433 -82.28417206]
[150.03724670 -76.96260834]
[146.69943237 -62.33869171]
[143.36161804 -47.71477127]
[144.95802307 -40.41360092]
[139.75399780 -32.77005386]
[136.05264282 -18.23389435]
[132.35128784 -3.69773412]
[128.64991760 10.83842468]
[124.94856262 25.37458420]
[121.24720001 39.91074371]
[117.54583740 54.44690323]
[113.84447479 68.98306274]
[110.14311218 83.51921844]
[116.48239136 97.11383820]
[129.99691772 103.62209320]
[145.78753662 102.63869476]
[153.89732361 115.13191986]
[167.41184998 121.64017487]
[180.92639160 128.14843750]
[194.44091797 134.65669250]
[207.95545959 141.16494751]
[221.46998596 147.67320251]
[234.98452759 154.18145752]
[249.81727600 148.72572327]
[264.12814331 155.43202209]
[269.42675781 170.32162476]
[262.56954956 184.56079102]
[247.62474060 189.70169067]
[233.45886230 182.69430542]
[228.47627258 167.69598389]
[214.96173096 161.18772888]
[201.44720459 154.67947388]
[187.93266296 148.17121887]
[174.41813660 141.66296387]
[160.90359497 135.15470886]
[147.38906860 128.64645386]
[132.56510925 130.09536743]
[123.48867035 117.13662720]
[109.97413635 110.62837219]
[110.88001251 122.28926849]
[105.39262390 134.61280823]
[99.56610107 148.43495178]
[93.73957825 162.25709534]
[87.91305542 176.07923889]
[82.08653259 189.90138245]
[76.26001740 203.72352600]
[90.11867523 197.98440552]
[104.74756622 201.30033875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[19 123]
[20 122]
[21 121]
[22 120]
[23 119]
[24 118]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[55 80]
[56 79]
[57 78]
[59 74]
[60 73]
[62 71]
[63 70]
[64 69]
[91 116]
[92 115]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
