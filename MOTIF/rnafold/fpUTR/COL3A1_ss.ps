%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGAGUUUUAUGACGGGCCCGGUGCUGAAGGGCAGGGAACAACUUGAUGGUGCUACUUUGAACUGCUUUUCUUUUCUCCUUUUUGCACAAAGAGUCUCAUGUCUGAUAUUUAGAC\
) } def
/len { sequence length } bind def

/coor [
[88.60671234 392.04260254]
[85.24782562 376.35510254]
[95.52959442 364.03988647]
[95.52959442 349.03988647]
[95.52959442 334.03988647]
[95.52959442 319.03988647]
[95.52959442 304.03988647]
[95.52959442 289.03988647]
[87.79229736 276.31259155]
[95.52959442 262.51242065]
[95.52959442 247.51243591]
[95.52959442 232.51243591]
[92.34220886 225.73703003]
[95.73458099 217.11445618]
[96.13388824 202.11976624]
[96.53320312 187.12509155]
[96.33352661 172.12641907]
[95.53519440 157.14767456]
[94.73686218 142.16893005]
[93.93852997 127.19019318]
[78.97699738 118.27788544]
[72.23117065 102.22264862]
[76.33731079 85.29881287]
[89.69073486 74.12014008]
[88.09633636 59.20512009]
[86.50193024 44.29010010]
[84.90753174 29.37507629]
[75.74719238 16.47550964]
[82.08783722 2.99791527]
[80.49343109 -11.91710663]
[78.89903259 -26.83212852]
[77.30462646 -41.74715042]
[75.71022797 -56.66217422]
[74.11582184 -71.57719421]
[70.04630280 -79.90161133]
[72.68294525 -86.90972900]
[71.48615265 -101.86190796]
[70.28936005 -116.81408691]
[69.09256744 -131.76626587]
[67.89577484 -146.71844482]
[66.69898987 -161.67062378]
[55.58446884 -151.59751892]
[40.59250641 -152.08851624]
[30.16089821 -162.86727905]
[30.16077995 -177.86727905]
[40.59221649 -188.64619446]
[55.58416748 -189.13743591]
[66.69898987 -179.06420898]
[67.89577484 -194.01638794]
[56.73774719 -202.23158264]
[51.17086029 -214.80142212]
[52.56396484 -228.36883545]
[60.44258118 -239.36839294]
[72.64219666 -244.96334839]
[74.23659515 -259.87835693]
[61.48170090 -268.33834839]
[54.12951660 -281.76235962]
[53.86952209 -297.06564331]
[60.76146698 -310.73165894]
[73.22162628 -319.62002563]
[88.38674927 -321.68826294]
[102.77200317 -316.46112061]
[113.07176208 -305.13973999]
[116.91921234 -290.32571411]
[113.43023682 -275.42315674]
[103.40658569 -263.85662842]
[89.15161896 -258.28396606]
[87.55721283 -243.36894226]
[100.05603790 -232.81788635]
[103.88641357 -216.74581909]
[97.36070251 -201.38710022]
[82.84796143 -192.81959534]
[81.65116882 -177.86741638]
[81.65116882 -162.86741638]
[82.84796143 -147.91523743]
[84.04474640 -132.96305847]
[85.24153900 -118.01087952]
[86.43833160 -103.05870056]
[87.63512421 -88.10652161]
[89.03084564 -73.17160034]
[90.62524414 -58.25657654]
[92.21965027 -43.34155273]
[93.81404877 -28.42653084]
[95.40845490 -13.51150894]
[97.00285339 1.40351307]
[106.04914856 13.23625755]
[99.82254791 27.78067398]
[101.41695404 42.69569778]
[103.01135254 57.61071777]
[104.60575867 72.52574158]
[115.90628815 77.12997437]
[124.15486145 86.12229919]
[127.76882935 97.77735138]
[126.05476379 109.85885620]
[119.34156036 120.04874420]
[108.91726685 126.39186096]
[109.71560669 141.37060547]
[110.51393890 156.34933472]
[111.31227112 171.32807922]
[114.31415558 175.91220093]
[115.08694458 180.70549011]
[113.94406128 184.79133606]
[111.52788544 187.52439880]
[111.12857819 202.51907349]
[110.72927094 217.51376343]
[110.52959442 232.51243591]
[110.52959442 247.51243591]
[110.52959442 262.51242065]
[118.26689911 276.31259155]
[110.52959442 289.03988647]
[110.52959442 304.03988647]
[110.52959442 319.03988647]
[110.52959442 334.03988647]
[110.52959442 349.03988647]
[110.52959442 364.03988647]
[120.81136322 376.35510254]
[117.45248413 392.04260254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[10 108]
[11 107]
[12 106]
[14 105]
[15 104]
[16 103]
[17 99]
[18 98]
[19 97]
[20 96]
[24 90]
[25 89]
[26 88]
[27 87]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[34 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[48 73]
[49 72]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
