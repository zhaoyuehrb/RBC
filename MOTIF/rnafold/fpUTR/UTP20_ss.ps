%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUGGCGGCGCCCAGGGGCUCAAGCCGCACGUGAGAAAGUCUGGGCAUCUGGGAAUCGGAGAGUAUAGCCUGUGAGCCGCUUUCCCCUCCUUACUGUCGGUUGCAUCCCUUCGACACUCCCGAGGCCGUCGCGGGCCACUGGCCCUCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[102.94446564 114.74134827]
[99.01519012 117.08677673]
[94.10168457 118.26917267]
[83.76367188 129.13772583]
[73.42565918 140.00628662]
[63.08764648 150.87483215]
[52.85889053 161.84628296]
[42.74041748 172.91950989]
[32.62194061 183.99273682]
[22.50346565 195.06597900]
[12.38498974 206.13920593]
[2.71765161 217.60841370]
[-6.48306751 229.45521545]
[-15.68378639 241.30201721]
[-17.38190842 257.61300659]
[-32.46495819 264.04989624]
[-45.41679382 253.99096680]
[-42.91366959 237.78398132]
[-27.53059006 232.10130310]
[-18.32987213 220.25448608]
[-9.12915230 208.40768433]
[-9.38102627 205.56228638]
[-8.48882866 202.44367981]
[-6.34185743 199.49920654]
[-2.99768400 197.20812988]
[1.31175840 196.02073669]
[11.43023396 184.94749451]
[21.54870987 173.87426758]
[31.66718483 162.80104065]
[41.78565979 151.72779846]
[43.98843765 144.62881470]
[52.21909332 140.53681946]
[62.55710220 129.66827393]
[72.89511871 118.79971313]
[83.23313141 107.93115997]
[71.45839691 117.22393799]
[56.66537094 119.70714569]
[42.50170517 114.76847839]
[32.45986557 103.62570190]
[29.01597214 89.02639771]
[33.01921463 74.57046509]
[43.48247910 63.82243347]
[57.82573318 59.43255615]
[72.51222229 62.48328018]
[83.92056274 72.22236633]
[89.23755646 86.24713135]
[85.96247864 71.60903931]
[82.68740082 56.97094345]
[79.41232300 42.33284378]
[65.32601929 36.09727859]
[57.70154572 22.91695976]
[59.28141403 7.95139980]
[69.25132751 -3.08212924]
[65.97624969 -17.72022629]
[62.70117569 -32.35832214]
[59.42609787 -46.99641800]
[47.27014542 -52.87436676]
[40.82891083 -64.51918030]
[42.26714706 -77.55268860]
[50.83401871 -87.22096252]
[47.85248947 -101.92165375]
[44.87095642 -116.62235260]
[41.88942719 -131.32304382]
[38.90789413 -146.02374268]
[35.92636490 -160.72444153]
[32.94483185 -175.42514038]
[23.48824501 -180.94047546]
[18.75406837 -190.56642151]
[20.10231972 -200.98640442]
[26.84218216 -208.75737000]
[24.45120811 -223.56558228]
[11.49234676 -232.61231995]
[8.80835438 -248.18704224]
[17.99159622 -261.04953003]
[33.59381485 -263.56869507]
[46.35849380 -254.24998474]
[48.71257401 -238.62200928]
[39.25942230 -225.95655823]
[41.65039825 -211.14834595]
[54.94874954 -197.15615845]
[47.64553070 -178.40666199]
[50.62705994 -163.70597839]
[53.60859299 -149.00527954]
[56.59012222 -134.30458069]
[59.57165527 -119.60388184]
[62.55318451 -104.90318298]
[65.53471375 -90.20249176]
[79.92433167 -81.54633331]
[83.70194244 -64.83847809]
[74.06419373 -50.27149582]
[77.33927155 -35.63339996]
[80.61434937 -20.99530411]
[83.88942719 -6.35720682]
[97.61061859 -0.62424630]
[105.41730499 12.24119949]
[104.13645172 27.41396332]
[94.05041504 39.05776596]
[97.32549286 53.69586563]
[100.60057068 68.33396149]
[103.87564850 82.97205353]
[113.31156921 94.63239288]
[126.94469452 100.88842773]
[140.57781982 107.14446259]
[154.21093750 113.40049744]
[167.84405518 119.65653992]
[181.47717285 125.91257477]
[195.11030579 132.16860962]
[206.18862915 121.19850922]
[222.76112366 117.20364380]
[240.41378784 122.76143646]
[253.67236328 137.69392395]
[268.65359497 138.44398499]
[283.63482666 139.19406128]
[298.61605835 139.94412231]
[313.59732056 140.69419861]
[324.10205078 129.11041260]
[339.60202026 127.04026031]
[352.77856445 135.46122742]
[357.41012573 150.39717102]
[351.30987549 164.79580688]
[337.35809326 171.85853577]
[322.14242554 168.25054932]
[312.84722900 155.67543030]
[297.86599731 154.92536926]
[282.88476562 154.17529297]
[267.90353394 153.42523193]
[252.92230225 152.67515564]
[249.39096069 159.29177856]
[262.62420654 166.35446167]
[277.39224243 168.98219299]
[279.45666504 183.83944702]
[265.96450806 190.39396667]
[255.56152344 179.58769226]
[242.32827759 172.52500916]
[238.79693604 179.14163208]
[247.75877380 191.17016602]
[256.72061157 203.19868469]
[265.68246460 215.22721863]
[274.64428711 227.25575256]
[288.95605469 236.34475708]
[284.18411255 252.61328125]
[267.23037720 252.53143311]
[262.61575317 236.21759033]
[253.65393066 224.18905640]
[244.69209290 212.16052246]
[235.73025513 200.13200378]
[226.76841736 188.10346985]
[202.65875244 182.91891479]
[188.71635437 165.60580444]
[188.85426331 145.80172729]
[175.22114563 139.54570007]
[161.58802795 133.28965759]
[147.95489502 127.03362274]
[134.32177734 120.77758789]
[120.68865204 114.52155304]
[107.05553436 108.26551819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 21]
[13 20]
[14 19]
[46 100]
[47 99]
[48 98]
[49 97]
[53 93]
[54 92]
[55 91]
[56 90]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[70 79]
[71 78]
[101 156]
[102 155]
[103 154]
[104 153]
[105 152]
[106 151]
[107 150]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[135 147]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
