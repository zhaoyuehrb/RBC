%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGCGUUUUUGGAGAAAGCUGCACUCUGUUGAGCUCCAGGGCGCAGUGGAGGGAGGGAGUGAAGGAGCUCUCUGUACCCAAGGAAAGUGCAGCUGAGACUCAGACAAGAUUACA\
) } def
/len { sequence length } bind def

/coor [
[102.79821777 443.33691406]
[87.64657593 442.11373901]
[74.11864471 435.18096924]
[64.27734375 423.59573364]
[59.62339401 409.12475586]
[60.86649323 393.97476196]
[67.81707001 380.45596313]
[79.41522217 370.62988281]
[93.89231110 365.99499512]
[95.09931183 351.04364014]
[96.30631256 336.09225464]
[97.51330566 321.14089966]
[98.72030640 306.18954468]
[99.32429504 291.20172119]
[99.32429504 276.20172119]
[99.32429504 261.20172119]
[85.63765717 249.18960571]
[84.93312836 230.67692566]
[98.10871887 217.20771790]
[97.30356598 202.22933960]
[96.49841309 187.25097656]
[95.69326782 172.27259827]
[94.88811493 157.29421997]
[94.08296967 142.31584167]
[93.27781677 127.33747101]
[92.47267151 112.35909271]
[84.79895020 99.47057343]
[72.01461029 91.62451172]
[59.23027039 83.77844238]
[46.44593048 75.93238068]
[33.66159439 68.08631897]
[20.87725449 60.24026108]
[8.09291649 52.39419937]
[-7.71597767 51.77014923]
[-14.51613903 38.51846695]
[-27.30047798 30.67240334]
[-40.08481598 22.82634163]
[-56.48365402 22.92718697]
[-64.53578949 8.64099884]
[-55.95787048 -5.33581829]
[-39.57413101 -4.62511206]
[-32.23875427 10.04200363]
[-19.45441437 17.88806534]
[-6.67007685 25.73412704]
[8.22439575 25.79697418]
[15.93897820 39.60985947]
[28.72331619 47.45592117]
[41.50765610 55.30198288]
[54.29199219 63.14804459]
[67.07633209 70.99411011]
[79.86067200 78.84017181]
[92.64501190 86.68623352]
[107.05278015 82.51296997]
[113.66452789 69.04876709]
[120.27626801 55.58455658]
[126.34049988 41.86504364]
[131.84738159 27.91247368]
[137.35427856 13.95990372]
[142.86116028 0.00733368]
[148.36804199 -13.94523621]
[153.87492371 -27.89780617]
[159.38182068 -41.85037613]
[152.86047363 -56.24647903]
[158.50689697 -71.00769806]
[172.97113037 -77.37646484]
[187.67182922 -71.57430267]
[193.88731384 -57.04353333]
[187.93005371 -42.40500259]
[173.33438110 -36.34349060]
[167.82749939 -22.39092064]
[162.32061768 -8.43835068]
[156.81373596 5.51421928]
[151.30683899 19.46678925]
[145.79995728 33.41936111]
[140.29307556 47.37192917]
[141.44726562 50.83499527]
[140.89747620 55.04519653]
[138.30477905 59.15512085]
[133.74047852 62.19630051]
[127.12873077 75.66050720]
[120.51698303 89.12471771]
[135.35760498 86.94385529]
[148.55500793 94.07327271]
[154.86653137 107.68079376]
[151.78491211 122.36083221]
[140.53434753 132.28175354]
[125.58409882 133.50245667]
[112.87316132 125.53802490]
[107.45104218 111.55393982]
[108.25619507 126.53231812]
[109.06134033 141.51069641]
[109.86649323 156.48907471]
[110.67164612 171.46743774]
[111.47679138 186.44581604]
[112.28194427 201.42419434]
[113.08708954 216.40257263]
[123.43511200 222.56503296]
[129.40863037 232.88400269]
[129.59533691 244.68508911]
[124.06547546 254.97520447]
[114.32429504 261.20172119]
[114.32429504 276.20172119]
[114.32429504 291.20172119]
[117.08077240 295.94338989]
[117.59644318 300.77532959]
[116.23414612 304.79681396]
[113.67166901 307.39654541]
[112.46466827 322.34790039]
[111.25766754 337.29925537]
[110.05066681 352.25064087]
[108.84367371 367.20199585]
[122.38979340 374.09915161]
[132.26153564 385.65844727]
[136.95355225 400.11712646]
[135.75030518 415.27035522]
[128.83532715 428.80740356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 103]
[15 102]
[16 101]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[53 81]
[54 80]
[55 79]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
