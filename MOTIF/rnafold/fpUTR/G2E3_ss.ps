%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGCUCUUUCCGGGUUUGCGAGCGGAAGUGGACGAAUUUGAAUCCUGUGGGCCGUUGAAUGUGGCUGCUCGCGGUCGGCGUGCCCCGACGUACAGCGGGCCGGGAAAAGUGGCACUGAGGCUCUGGAACUUCUGCCCAGCUCUCCUUGUAAA\
) } def
/len { sequence length } bind def

/coor [
[-15.59064960 476.91400146]
[-21.97970963 485.25949097]
[-31.70958328 488.60821533]
[-37.06144333 502.62100220]
[-42.41330338 516.63372803]
[-34.65137100 530.20898438]
[-37.48222733 545.58819580]
[-49.56922150 555.50982666]
[-65.20524597 555.28912354]
[-77.00745392 545.03039551]
[-79.40319824 529.57739258]
[-71.26127625 516.22662354]
[-56.42606735 511.28189087]
[-51.07420731 497.26913452]
[-45.72235107 483.25637817]
[-50.22086334 464.48599243]
[-34.51102448 451.91595459]
[-29.73143578 437.69781494]
[-24.95184898 423.47967529]
[-20.17226219 409.26153564]
[-15.39267540 395.04339600]
[-10.61308765 380.82525635]
[-5.83350086 366.60708618]
[-1.05391407 352.38894653]
[-4.33250952 337.85968018]
[7.39876747 327.24423218]
[12.17835426 313.02609253]
[16.95794106 298.80795288]
[10.12141514 285.62472534]
[14.76605320 271.13742065]
[28.64018822 264.05603027]
[33.41977692 249.83787537]
[38.19936371 235.61973572]
[34.92076874 221.09045410]
[46.65204239 210.47500610]
[51.43163300 196.25686646]
[36.94971848 200.16508484]
[24.74290085 191.44766235]
[23.74022865 176.48120117]
[34.67513657 166.21340942]
[49.54895401 168.15495300]
[57.48171234 180.88514709]
[63.67520142 167.22349548]
[69.86869049 153.56185913]
[75.78402710 139.77748108]
[81.41878510 125.87606049]
[87.05354309 111.97463989]
[82.62052155 102.99275208]
[83.79393005 93.04542542]
[90.19523621 85.34157562]
[99.75945282 82.36637115]
[105.95294189 68.70471954]
[112.14643097 55.04306793]
[118.33992004 41.38141632]
[124.53340912 27.71976852]
[116.01250458 17.92937469]
[111.86199951 5.68124247]
[112.66983032 -7.17880869]
[118.27948761 -18.72695923]
[127.81880951 -27.24918365]
[139.83537292 -31.49564362]
[152.51759338 -30.86389351]
[159.25964355 -44.26332474]
[166.00169373 -57.66275787]
[165.29275513 -73.46807098]
[177.92497253 -81.35960388]
[184.66702271 -94.75904083]
[191.40907288 -108.15847015]
[186.68101501 -123.00041199]
[193.70928955 -136.49330139]
[207.88795471 -140.90930176]
[214.63000488 -154.30874634]
[213.92106628 -170.11405945]
[226.55329895 -178.00558472]
[233.29534912 -191.40501404]
[240.03738403 -204.80444336]
[246.77943420 -218.20388794]
[253.52148438 -231.60331726]
[252.81256104 -247.40863037]
[265.44476318 -255.30015564]
[272.18682861 -268.69958496]
[278.79272461 -282.16665649]
[285.26184082 -295.69998169]
[291.73092651 -309.23330688]
[298.20004272 -322.76663208]
[292.70135498 -337.58352661]
[299.36621094 -351.91375732]
[314.24038696 -357.25546265]
[328.49935913 -350.43948364]
[333.68350220 -335.50964355]
[326.71716309 -321.32354736]
[311.73333740 -316.29751587]
[305.26425171 -302.76419067]
[298.79516602 -289.23089600]
[292.32604980 -275.69757080]
[292.27850342 -268.26269531]
[285.58624268 -261.95755005]
[278.84420776 -248.55812073]
[280.03536987 -233.71121216]
[266.92092896 -224.86126709]
[260.17886353 -211.46183777]
[253.43682861 -198.06240845]
[246.69477844 -184.66296387]
[239.95272827 -171.26353455]
[241.14389038 -156.41664124]
[228.02943420 -147.56669617]
[221.28738403 -134.16726685]
[226.19108582 -120.14978790]
[219.54455566 -106.46482086]
[204.80850220 -101.41641998]
[198.06645203 -88.01699066]
[191.32440186 -74.61755371]
[192.51557922 -59.77066040]
[179.40112305 -50.92071152]
[172.65907288 -37.52127838]
[165.91702271 -24.12184525]
[175.87350464 -10.13471222]
[177.41760254 7.05362368]
[170.03805542 22.75180054]
[155.67147827 32.62981415]
[138.19506836 33.91325760]
[132.00157166 47.57490921]
[125.80808258 61.23655701]
[119.61459351 74.89820862]
[113.42110443 88.55986023]
[116.20606995 106.95457458]
[100.95496368 117.60939789]
[95.32020569 131.51081848]
[89.68545532 145.41224670]
[90.22652435 152.09704590]
[87.65922546 157.25016785]
[83.53034210 159.75534058]
[77.33685303 173.41699219]
[71.14336395 187.07864380]
[65.64977264 201.03645325]
[60.87018585 215.25459290]
[63.80691147 230.80085754]
[52.41750336 240.39932251]
[47.63791656 254.61746216]
[42.85832977 268.83560181]
[49.63756561 282.85986328]
[44.58784485 297.21099854]
[31.17608261 303.58752441]
[26.39649582 317.80566406]
[21.61690903 332.02380371]
[24.55363655 347.57006836]
[13.16422749 357.16854858]
[8.38464069 371.38668823]
[3.60505342 385.60482788]
[-1.17453337 399.82296753]
[-5.95412016 414.04110718]
[-10.73370743 428.25924683]
[-15.51329422 442.47738647]
[-20.29288101 456.69552612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[17 154]
[18 153]
[19 152]
[20 151]
[21 150]
[22 149]
[23 148]
[24 147]
[26 145]
[27 144]
[28 143]
[31 140]
[32 139]
[33 138]
[35 136]
[36 135]
[42 134]
[43 133]
[44 132]
[45 129]
[46 128]
[47 127]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[62 116]
[63 115]
[64 114]
[66 112]
[67 111]
[68 110]
[71 107]
[72 106]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[80 98]
[81 97]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
