%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCGUCAAGCAGGCUAUUCCGGGUUUGUGGCUGCUUGGCUCCACACGUGGGCCGCCGUAGGUAUUCCGACCGGUAAUUCCUCCUAUUGGUGUGCAGCAGCCACAUUGAAGGAUAGAGUGGCAGCAGAGGCCAAGGAUCGUGAGUUG\
) } def
/len { sequence length } bind def

/coor [
[176.55773926 583.40789795]
[179.95989990 568.69982910]
[187.20509338 555.45562744]
[197.75569153 544.65802002]
[210.82878113 537.10839844]
[207.09843445 522.57965088]
[196.43907166 512.17639160]
[200.50132751 496.88562012]
[196.77098083 482.35687256]
[186.49319458 475.89950562]
[183.29386902 463.77484131]
[189.42753601 452.37933350]
[186.00227356 437.77566528]
[175.86198425 431.10449219]
[172.91728210 418.91546631]
[179.28825378 407.65090942]
[176.16958618 392.97869873]
[173.05090332 378.30648804]
[169.93223572 363.63427734]
[166.81355286 348.96206665]
[163.08320618 334.43331909]
[158.74772644 320.07351685]
[154.41226196 305.71374512]
[139.66136169 303.50546265]
[127.28112793 295.07699585]
[119.75726318 282.05575562]
[118.62846375 266.99765015]
[124.17201996 252.88540649]
[135.33825684 242.53762817]
[131.00279236 228.17784119]
[126.66731262 213.81803894]
[122.33183289 199.45825195]
[117.99635315 185.09846497]
[113.66088104 170.73866272]
[109.32540131 156.37887573]
[104.98992157 142.01907349]
[100.65444946 127.65928650]
[96.31896973 113.29949951]
[86.51766205 101.94457245]
[72.94525909 95.55788422]
[59.37285233 89.17118835]
[45.80044556 82.78450012]
[36.63624191 81.94911957]
[32.01282501 76.11930847]
[18.57714844 69.44977570]
[5.14147234 62.78025055]
[-11.18242931 64.34941864]
[-20.48171425 50.84181595]
[-13.19007683 36.15290833]
[3.19147277 35.39338303]
[11.81099987 49.34457397]
[25.24667549 56.01410294]
[38.68235397 62.68362808]
[52.18713379 69.21209717]
[65.75953674 75.59878540]
[79.33194733 81.98547363]
[92.90435028 88.37216187]
[99.65674591 85.10793304]
[87.25059509 76.67658997]
[88.34938812 61.71688843]
[101.85430908 55.18871689]
[114.26026917 63.62032700]
[113.16152191 78.57946777]
[119.91391754 75.31523132]
[123.33917999 60.71154785]
[126.76444244 46.10786438]
[130.18969727 31.50418091]
[125.80811310 16.30180550]
[136.24726868 5.67762089]
[139.67253113 -8.92606258]
[143.09779358 -23.52974701]
[146.52305603 -38.13343048]
[138.45860291 -51.46018600]
[142.14035034 -66.22160339]
[154.89506531 -73.82769775]
[158.32032776 -88.43138123]
[148.07960510 -100.08929443]
[146.68054199 -115.54316711]
[154.66113281 -128.85067749]
[168.95268250 -134.89480591]
[184.05978394 -131.35147095]
[194.17344666 -119.58314514]
[195.40476990 -104.11500549]
[187.28028870 -90.89485168]
[172.92401123 -85.00611115]
[169.49874878 -70.40242767]
[177.54138184 -57.91836929]
[174.27571106 -43.05936050]
[161.12673950 -34.70816803]
[157.70147705 -20.10448265]
[154.27621460 -5.50079966]
[150.85095215 9.10288429]
[155.47753906 23.26070595]
[144.79338074 34.92944336]
[141.36811829 49.53312683]
[137.94285583 64.13681030]
[134.51759338 78.74049377]
[110.67876434 108.96401978]
[115.01424408 123.32381439]
[119.34971619 137.68360901]
[123.68519592 152.04339600]
[128.02067566 166.40318298]
[132.35615540 180.76298523]
[136.69161987 195.12277222]
[141.02709961 209.48255920]
[145.36257935 223.84236145]
[149.69805908 238.20214844]
[164.72502136 240.64172363]
[177.15197754 249.32836914]
[184.54479980 262.49523926]
[185.48385620 277.50454712]
[179.83634949 291.37591553]
[168.77204895 301.37826538]
[173.10752869 315.73803711]
[177.44300842 330.09783936]
[180.83441162 333.04595947]
[182.86549377 336.57727051]
[183.52204895 340.17846680]
[182.96261597 343.38684082]
[181.48577881 345.84338379]
[184.60444641 360.51559448]
[187.72312927 375.18783569]
[190.84179688 389.86004639]
[193.96047974 404.53225708]
[206.59574890 417.88528442]
[200.60595703 434.35040283]
[204.03121948 448.95407104]
[216.94337463 462.03958130]
[211.29972839 478.62652588]
[215.03007507 493.15527344]
[225.95625305 504.59768677]
[221.62718201 518.84930420]
[225.35752869 533.37805176]
[240.45062256 533.69586182]
[254.89794922 538.07501221]
[267.62744141 546.19061279]
[277.69442749 557.44042969]
[284.35192871 570.98962402]
[287.10589600 585.83276367]
[285.75195312 600.86834717]
[280.39059448 614.98071289]
[271.41964722 627.12255859]
[259.50485229 636.39294434]
[245.53030396 642.10388184]
[230.53305054 643.83160400]
[215.62599182 641.44793701]
[201.91529846 635.12969971]
[190.41842651 625.34582520]
[181.98851013 612.82226562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 133]
[6 132]
[8 130]
[9 129]
[12 127]
[13 126]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[21 115]
[22 114]
[23 113]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 57]
[40 56]
[41 55]
[42 54]
[44 53]
[45 52]
[46 51]
[64 97]
[65 96]
[66 95]
[67 94]
[69 92]
[70 91]
[71 90]
[72 89]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
