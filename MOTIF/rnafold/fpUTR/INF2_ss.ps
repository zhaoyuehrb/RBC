%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCCGCGCCCGCCAGGAGCCACCGUCCGAGCCUUGCGGAGCGCGGCAGUGGGCGCCGGCUGCCCGCAGCCCCUGACCCGGCCCCGGACGGAGCGCCGGCCGCACCACCGCCCUCUGGCCGUUGCCUCACCGGCUCGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[83.08151245 174.91687012]
[68.55120087 171.19264221]
[58.12842178 160.40534973]
[54.90567398 145.75564575]
[59.83916855 131.59016418]
[71.46432495 122.11223602]
[80.35551453 110.03139496]
[66.76090240 116.37066650]
[53.16628265 122.70994568]
[39.57166672 129.04922485]
[26.04700661 135.53640747]
[12.59391594 142.17073059]
[-0.85917491 148.80506897]
[-14.31226635 155.43939209]
[-23.26714325 168.48243713]
[-38.10400772 167.17218018]
[-51.55709839 173.80651855]
[-65.01019287 180.44084167]
[-63.98108673 195.60690308]
[-68.83885193 210.01074219]
[-78.84272003 221.45587158]
[-92.46717072 228.19700623]
[-107.63456726 229.20616150]
[-122.03200531 224.32945251]
[-133.46397400 214.31053162]
[-140.18716431 200.67723083]
[-141.17637634 185.50851440]
[-136.28073120 171.11750793]
[-126.24678040 159.69873047]
[-112.60464478 152.99346924]
[-97.43463898 152.02423096]
[-83.05008698 156.93879700]
[-71.64452362 166.98774719]
[-58.19142914 160.35342407]
[-44.73833847 153.71910095]
[-36.74571609 141.15058899]
[-20.94659615 141.98631287]
[-7.49350548 135.35197449]
[5.95958567 128.71765137]
[19.41267776 122.08331299]
[24.05567551 116.25984955]
[33.23239136 115.45459747]
[46.82700729 109.11532593]
[60.42162704 102.77605438]
[74.01624298 96.43677521]
[96.62101746 79.68804169]
[101.44261169 65.48408508]
[106.26419830 51.28013229]
[103.37343597 35.72526169]
[114.79116821 26.16049767]
[119.61276245 11.95654583]
[124.43435669 -2.24740601]
[129.25595093 -16.45135880]
[133.92231750 -30.70705986]
[138.43289185 -45.01281357]
[142.94348145 -59.31856918]
[147.29776001 -73.67267609]
[151.49519348 -88.07341766]
[155.69262695 -102.47416687]
[159.89006042 -116.87491608]
[164.08749390 -131.27566528]
[163.48738098 -140.46807861]
[168.53675842 -145.94291687]
[173.04734802 -160.24867249]
[176.77136230 -174.77905273]
[179.69770813 -189.49082947]
[182.62406921 -204.20260620]
[174.11080933 -217.24723816]
[177.28813171 -232.12538147]
[189.77665710 -240.16107178]
[192.70300293 -254.87286377]
[195.62936401 -269.58462524]
[184.99786377 -280.88732910]
[183.07377625 -296.28466797]
[190.59692383 -309.85601807]
[204.67451477 -316.38293457]
[219.89343262 -313.35571289]
[230.40168762 -301.93835449]
[232.15864563 -286.52105713]
[224.48870850 -273.03210449]
[210.34114075 -266.65829468]
[207.41477966 -251.94650269]
[204.48843384 -237.23472595]
[212.95118713 -225.03155518]
[210.19302368 -210.07003784]
[197.33584595 -201.27624512]
[194.40948486 -186.56446838]
[191.48313904 -171.85269165]
[205.38482666 -177.48680115]
[218.56558228 -170.32666016]
[221.40567017 -155.59799194]
[211.83227539 -144.05024719]
[196.83241272 -144.11135864]
[187.35310364 -155.73808289]
[182.84251404 -141.43232727]
[178.48825073 -127.07823181]
[174.29081726 -112.67748260]
[170.09336853 -98.27673340]
[165.89593506 -83.87598419]
[161.69850159 -69.47523499]
[162.85525513 -62.11778259]
[157.24923706 -54.80797958]
[152.73864746 -40.50222778]
[148.22807312 -26.19647217]
[149.22402954 -18.81553268]
[143.45989990 -11.62976646]
[138.63830566 2.57418585]
[133.81671143 16.77813721]
[128.99511719 30.98209000]
[132.23075867 45.52099991]
[120.46815491 56.10172653]
[115.64656067 70.30567932]
[110.82496643 84.50962830]
[122.69071960 75.33335114]
[137.46868896 77.90468597]
[145.53759766 90.54954529]
[141.64416504 105.03543854]
[128.32322693 111.93126678]
[114.24774933 106.74776459]
[123.11739349 118.84443665]
[131.98703003 130.94110107]
[140.85667419 143.03776550]
[153.50880432 145.78810120]
[160.64085388 156.10943604]
[158.85598755 168.12149048]
[167.45964050 180.40876770]
[176.06329346 192.69604492]
[191.54934692 196.88670349]
[197.79588318 211.66372681]
[190.01109314 225.69143677]
[174.16680908 228.20898438]
[162.41740417 217.28511047]
[163.77600098 201.29969788]
[155.17236328 189.01240540]
[146.56871033 176.72512817]
[130.30412292 170.22152710]
[128.76000977 151.90740967]
[119.89036560 139.81074524]
[111.02072144 127.71408081]
[102.15107727 115.61740875]
[104.13546753 130.48556519]
[109.76887512 144.38754272]
[107.28030396 159.17967224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 45]
[8 44]
[9 43]
[10 42]
[11 40]
[12 39]
[13 38]
[14 37]
[16 35]
[17 34]
[18 33]
[46 113]
[47 112]
[48 111]
[50 109]
[51 108]
[52 107]
[53 106]
[54 104]
[55 103]
[56 102]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[63 95]
[64 94]
[65 88]
[66 87]
[67 86]
[70 83]
[71 82]
[72 81]
[119 140]
[120 139]
[121 138]
[122 137]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
