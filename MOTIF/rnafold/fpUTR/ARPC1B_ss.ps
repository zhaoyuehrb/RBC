%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGCCCCGCCCCCCGCCCACGAGGAAGUGGCUGCUGCUCCGGCGCGGAGCCCAGAGCCGGUUCGGCGCGUCGACUGCCCAGAGUCCGCGGCCGGGGCGCGGGAGGAGCCAAGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[118.59104156 400.46899414]
[117.42385864 385.51446533]
[116.25667572 370.55993652]
[105.54753113 356.72280884]
[113.46255493 340.15881348]
[111.90753937 325.23962402]
[110.35252380 310.32043457]
[101.33750916 298.46386719]
[107.60248566 283.93594360]
[106.04747009 269.01675415]
[96.81036377 261.08963013]
[95.45626068 248.58805847]
[103.26534271 238.22348022]
[102.09816742 223.26895142]
[100.93098450 208.31443787]
[92.22680664 196.22779846]
[98.86682892 181.86741638]
[97.69965363 166.91290283]
[96.53247070 151.95837402]
[95.36528778 137.00386047]
[94.19811249 122.04933929]
[85.45320129 118.74513245]
[78.46080017 111.99696350]
[74.55991364 102.69481659]
[74.65164185 92.23876190]
[79.01069641 82.32906342]
[87.19519043 74.68979645]
[77.22594452 63.48202133]
[67.25670624 52.27424622]
[52.30369186 47.10530472]
[49.62613297 32.45334244]
[39.65688705 21.24556923]
[29.68764496 10.03779602]
[19.71840096 -1.16997659]
[9.74915695 -12.37774944]
[-6.99836111 -10.46474838]
[-21.46518898 -18.78942871]
[-28.09396935 -33.92725754]
[-24.47332764 -49.88174057]
[-34.73017120 -60.82692719]
[-44.98701859 -71.77211761]
[-55.24386215 -82.71730042]
[-65.50070953 -93.66249084]
[-75.75755310 -104.60768127]
[-91.00007629 -112.03073883]
[-88.08666229 -128.73248291]
[-71.23110962 -130.55642700]
[-64.81236267 -114.86452484]
[-54.55551910 -103.91933441]
[-44.29867554 -92.97415161]
[-34.04182816 -82.02896118]
[-23.78498459 -71.08377075]
[-13.52813911 -60.13858795]
[-0.42396721 -63.02100754]
[12.48760033 -58.99032974]
[21.77263069 -49.00563812]
[24.90588951 -35.62419510]
[20.95693016 -22.34699440]
[30.92617416 -11.13922024]
[40.89541626 0.06855250]
[50.86466217 11.27632523]
[60.83390427 22.48409843]
[75.07385254 26.85138893]
[78.46447754 42.30500412]
[88.43372345 53.51277542]
[98.40296173 64.72055054]
[113.18986511 67.23999786]
[126.30810547 59.96596146]
[139.42636108 52.69192505]
[145.50489807 45.70830154]
[152.98092651 45.40437698]
[166.28359985 38.47335052]
[179.58625793 31.54232407]
[188.24971008 18.30392075]
[203.11196899 19.28483009]
[216.41464233 12.35380363]
[229.71730042 5.42277670]
[243.01995850 -1.50825000]
[247.52731323 -16.65616608]
[261.46527100 -24.10660553]
[276.56466675 -19.43935585]
[283.86734009 -5.42341328]
[279.04071045 9.62581253]
[264.94833374 16.77988243]
[249.95098877 11.79441357]
[236.64833069 18.72544098]
[223.34565735 25.65646744]
[210.04299927 32.58749390]
[202.33105469 45.33014679]
[186.51728821 44.84498978]
[173.21463013 51.77601624]
[159.91195679 58.70704269]
[146.70039368 65.81017303]
[133.58215332 73.08420563]
[120.46389771 80.35824585]
[125.09056854 104.99231720]
[109.15263367 120.88215637]
[110.31980896 135.83666992]
[111.48699188 150.79119873]
[112.65417480 165.74571228]
[113.82135010 180.70024109]
[122.60900879 193.85652161]
[115.88550568 207.14724731]
[117.05268860 222.10177612]
[118.21986389 237.05628967]
[128.99841309 251.91688538]
[120.96665192 267.46173096]
[122.52166748 282.38092041]
[131.64791870 295.30462646]
[125.27170563 308.76544189]
[126.82672119 323.68460083]
[128.38174438 338.60379028]
[137.93556213 347.38619995]
[138.86337280 359.92660522]
[131.21119690 369.39276123]
[132.37837219 384.34729004]
[133.54556274 399.30178833]
[143.26643372 412.50924683]
[136.44192505 427.42092896]
[120.09249115 428.69696045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[3 115]
[5 112]
[6 111]
[7 110]
[9 108]
[10 107]
[13 105]
[14 104]
[15 103]
[17 101]
[18 100]
[19 99]
[20 98]
[21 97]
[27 66]
[28 65]
[29 64]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[67 95]
[68 94]
[69 93]
[71 92]
[72 91]
[73 90]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
