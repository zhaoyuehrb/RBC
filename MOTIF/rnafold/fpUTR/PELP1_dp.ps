%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:35 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PELP1)
} def

/sequence { (\
ACAGGCAGCCUCAUCCGCCAUCACUCCGGGAACCGAGCACCCCGCUGCCUCGGCGCCCAGGCUGCUCUCUCCGCGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
3 50 0.008675351 ubox
3 66 0.047649387 ubox
3 68 0.495892491 ubox
3 70 0.060999736 ubox
4 19 0.016648984 ubox
4 49 0.009273633 ubox
4 65 0.036042531 ubox
4 66 0.798869274 ubox
4 67 0.526736440 ubox
4 68 0.011338184 ubox
4 69 0.059305466 ubox
4 70 0.005883789 ubox
4 71 0.010947035 ubox
4 72 0.014728235 ubox
5 18 0.016667090 ubox
5 48 0.009276534 ubox
5 65 0.997097213 ubox
5 66 0.058679129 ubox
5 67 0.006594930 ubox
5 68 0.008397349 ubox
5 71 0.010002932 ubox
6 17 0.016654399 ubox
6 47 0.009276554 ubox
6 64 0.999793478 ubox
7 46 0.009274229 ubox
7 63 0.999568339 ubox
8 45 0.009275848 ubox
8 62 0.999803494 ubox
9 44 0.009259706 ubox
9 61 0.999793001 ubox
10 37 0.009124545 ubox
10 60 0.999622810 ubox
11 36 0.009152330 ubox
11 59 0.984581910 ubox
12 28 0.003996879 ubox
12 30 0.003547098 ubox
12 35 0.009178497 ubox
13 21 0.059780109 ubox
14 20 0.061507658 ubox
14 30 0.019097412 ubox
14 31 0.027432623 ubox
15 28 0.003565771 ubox
15 29 0.037063716 ubox
15 30 0.029045665 ubox
15 53 0.007247838 ubox
16 28 0.043438161 ubox
16 29 0.028659233 ubox
16 52 0.007259445 ubox
16 55 0.371567193 ubox
17 27 0.079233801 ubox
17 51 0.007195153 ubox
17 54 0.373893815 ubox
17 56 0.005043411 ubox
18 29 0.020386904 ubox
18 30 0.006803531 ubox
18 53 0.373656549 ubox
18 55 0.004991709 ubox
19 28 0.024208873 ubox
19 29 0.006818034 ubox
19 52 0.372869759 ubox
21 29 0.004670757 ubox
21 30 0.003721650 ubox
21 31 0.007089695 ubox
22 28 0.012457914 ubox
22 29 0.006265066 ubox
22 30 0.007549557 ubox
22 47 0.130871630 ubox
23 46 0.129670285 ubox
24 30 0.004104839 ubox
24 37 0.007285718 ubox
24 60 0.007767778 ubox
25 29 0.003733227 ubox
25 31 0.004406335 ubox
25 36 0.010146639 ubox
25 59 0.014351628 ubox
26 30 0.004587225 ubox
26 35 0.008116953 ubox
26 53 0.006494829 ubox
26 60 0.012016114 ubox
26 61 0.006768940 ubox
27 35 0.060281321 ubox
27 44 0.364014818 ubox
27 52 0.008784965 ubox
27 60 0.008542044 ubox
27 73 0.009011017 ubox
27 75 0.010485206 ubox
28 34 0.063527259 ubox
28 41 0.003935576 ubox
28 42 0.026280994 ubox
28 43 0.366637691 ubox
28 50 0.008451797 ubox
28 51 0.015075282 ubox
28 57 0.006462417 ubox
28 58 0.924876419 ubox
28 72 0.009295750 ubox
28 74 0.010826974 ubox
29 33 0.062508642 ubox
29 40 0.003968714 ubox
29 41 0.029434759 ubox
29 42 0.366414230 ubox
29 43 0.003861006 ubox
29 49 0.009629877 ubox
29 50 0.014585547 ubox
29 56 0.006342338 ubox
29 57 0.925824579 ubox
29 58 0.008498979 ubox
29 71 0.009241040 ubox
29 72 0.011841623 ubox
30 40 0.032145943 ubox
30 41 0.365556605 ubox
30 42 0.003998401 ubox
30 48 0.009618369 ubox
30 49 0.014566175 ubox
30 51 0.006996134 ubox
30 56 0.926098379 ubox
30 57 0.008341725 ubox
30 69 0.008238073 ubox
30 70 0.004732808 ubox
30 71 0.011874987 ubox
31 50 0.006917970 ubox
31 68 0.008200971 ubox
31 70 0.011590310 ubox
33 53 0.927014523 ubox
34 44 0.006536683 ubox
34 47 0.011805109 ubox
34 52 0.927280998 ubox
35 43 0.006551900 ubox
35 46 0.005835148 ubox
35 51 0.927478281 ubox
35 67 0.015349902 ubox
36 46 0.059569193 ubox
36 50 0.925287912 ubox
36 66 0.015381270 ubox
37 45 0.070203425 ubox
37 48 0.654169714 ubox
37 49 0.656643931 ubox
37 65 0.015386273 ubox
38 44 0.072446230 ubox
38 47 0.922942982 ubox
38 64 0.015386132 ubox
39 46 0.831561569 ubox
39 63 0.015247489 ubox
40 61 0.007946763 ubox
41 60 0.007921629 ubox
41 61 0.013012846 ubox
42 60 0.013024455 ubox
43 55 0.010409481 ubox
44 54 0.010654581 ubox
44 56 0.011976030 ubox
45 53 0.010659357 ubox
45 55 0.011728427 ubox
46 52 0.010625455 ubox
46 55 0.005312151 ubox
47 51 0.011987208 ubox
47 54 0.014315159 ubox
48 53 0.014322408 ubox
53 76 0.008190255 ubox
54 75 0.008285387 ubox
55 74 0.008288602 ubox
56 73 0.008280982 ubox
59 70 0.007670315 ubox
60 69 0.007839502 ubox
61 68 0.006098005 ubox
63 75 0.003926398 ubox
64 74 0.006528360 ubox
65 73 0.006625225 ubox
4 66 0.9500000 lbox
5 65 0.9500000 lbox
6 64 0.9500000 lbox
7 63 0.9500000 lbox
8 62 0.9500000 lbox
9 61 0.9500000 lbox
10 60 0.9500000 lbox
11 59 0.9500000 lbox
28 58 0.9500000 lbox
29 57 0.9500000 lbox
30 56 0.9500000 lbox
33 53 0.9500000 lbox
34 52 0.9500000 lbox
35 51 0.9500000 lbox
36 50 0.9500000 lbox
37 49 0.9500000 lbox
38 47 0.9500000 lbox
39 46 0.9500000 lbox
showpage
end
%%EOF
