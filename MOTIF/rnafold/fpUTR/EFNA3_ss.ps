%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUGGGAAGCGGAGAAGCCGGGAGCGCGGGGCUCAGUCGGGGGGCGGCGGCGGCGGCGGCUCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[66.06376648 284.02374268]
[51.41275787 280.80691528]
[41.20134735 269.81933594]
[39.06470108 254.97149658]
[28.81586266 265.92416382]
[18.56702614 276.87686157]
[15.37956047 292.96325684]
[-0.23044941 297.98916626]
[-12.20476341 286.78433228]
[-8.22523499 270.87536621]
[7.61433935 266.62802124]
[17.86317635 255.67533875]
[28.11201477 244.72265625]
[36.27231979 232.13658142]
[42.08913422 218.31034851]
[47.90594482 204.48411560]
[53.72275925 190.65788269]
[47.87874603 177.00566101]
[53.58086014 162.90103149]
[67.94018555 156.86386108]
[73.75700378 143.03762817]
[79.57381439 129.21139526]
[85.39062500 115.38516235]
[79.18752289 104.12042999]
[80.63056946 91.34191895]
[89.18961334 81.74423981]
[101.72020721 78.85341644]
[108.14291382 65.29801941]
[109.05450439 55.87763214]
[115.16127777 51.29470062]
[122.17729187 38.03666306]
[117.75527954 23.10068130]
[125.05937958 9.75509262]
[139.32580566 5.63142300]
[146.34181213 -7.62661409]
[153.35783386 -20.88465118]
[160.37384033 -34.14268875]
[154.32017517 -48.56097794]
[159.00004578 -63.48186493]
[172.20376587 -71.86016083]
[187.69692993 -69.73989105]
[198.16416931 -58.12218857]
[198.66314697 -42.49256516]
[188.95826721 -30.23086166]
[173.63188171 -27.12667465]
[166.61587524 -13.86863708]
[159.59985352 -0.61059994]
[152.58384705 12.64743710]
[157.19839478 26.76272774]
[150.27203369 40.30820847]
[135.43533325 45.05267715]
[128.41931152 58.31071472]
[121.69831085 71.72071838]
[115.27561188 85.27611542]
[121.21002960 100.52115631]
[114.53404236 115.45634460]
[99.21685791 121.20197296]
[93.40004730 135.02821350]
[87.58322906 148.85443115]
[81.76641846 162.68066406]
[87.49117279 177.16738892]
[81.39514160 191.10629272]
[67.54898834 196.47468567]
[61.73217773 210.30091858]
[55.91536331 224.12715149]
[50.09855270 237.95338440]
[64.52490997 233.84484863]
[78.72324371 238.68296814]
[87.63925171 250.74551392]
[88.09904480 265.73846436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[14 66]
[15 65]
[16 64]
[17 63]
[20 60]
[21 59]
[22 58]
[23 57]
[27 54]
[28 53]
[30 52]
[31 51]
[34 48]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
