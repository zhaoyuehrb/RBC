%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCACGCCACCUAAUCCAUUCUCUCGGUCUUCGUCUGCUCCGGUAUUGCAACUGCCUCGAUUGGUCGAUCCUGGGCCAGCAUGGCGGCGCCCAUGUAACCCGGUCCGUGCCGCAAAGCGAACGGCGGCCGCGGCGCGGGCCCCGCGGGGGUUAGAGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[84.07200623 418.86227417]
[68.83377838 417.99093628]
[55.48684311 410.58673096]
[46.68123627 398.11981201]
[44.16532135 383.06549072]
[48.43863678 368.41278076]
[58.65270996 357.07101440]
[72.77952576 351.29211426]
[73.63585663 336.31658936]
[74.49219513 321.34106445]
[66.66537476 312.08062744]
[67.28472900 299.56958008]
[76.56344604 290.56771851]
[77.70473480 275.61120605]
[78.84603119 260.65466309]
[79.98732758 245.69815063]
[81.12861633 230.74163818]
[82.26991272 215.78512573]
[83.41120148 200.82859802]
[81.64299774 198.59805298]
[80.67255402 195.51705933]
[80.83424377 191.89366150]
[82.34194946 188.15310669]
[85.25126648 184.79170227]
[87.52723694 169.96537781]
[81.81064606 156.21147156]
[91.55228424 143.74507141]
[93.82825470 128.91874695]
[96.10421753 114.09241486]
[89.44820404 116.46656799]
[81.27796173 115.79312897]
[72.89975739 111.47601318]
[65.80678558 103.44450378]
[51.93497086 97.73725128]
[38.06315613 92.02999878]
[22.35700989 93.93461609]
[13.53090191 81.93673706]
[-0.34091389 76.22948456]
[-14.21272945 70.52223206]
[-29.91887474 72.42685699]
[-38.74498367 60.42897797]
[-52.61679840 54.72172546]
[-70.78219604 57.60749054]
[-80.97879028 43.34850693]
[-94.95675659 37.90639114]
[-108.93471527 32.46427917]
[-122.91267395 27.02216148]
[-136.53765869 34.69638443]
[-151.89830017 31.76640892]
[-161.74177551 19.61568069]
[-161.42027283 3.98140192]
[-151.08563232 -7.75439835]
[-135.61752319 -10.05043507]
[-122.31953430 -1.82258928]
[-117.47055817 13.04420185]
[-103.49259949 18.48631668]
[-89.51464081 23.92843246]
[-75.53667450 29.37054825]
[-64.31087494 24.78842735]
[-52.60355377 29.24360085]
[-46.90954590 40.84991074]
[-33.03773117 46.55716324]
[-18.32379150 44.24431992]
[-8.50547695 56.65041733]
[5.36633873 62.35767365]
[19.23815536 68.06492615]
[33.95209503 65.75208282]
[43.77040863 78.15818024]
[57.64222336 83.86543274]
[71.51403809 89.57268524]
[78.21272278 86.19960785]
[71.46678162 72.80213165]
[84.86436462 66.05641174]
[91.61008453 79.45343781]
[98.30876160 76.08036041]
[101.98375702 61.53751373]
[105.65875244 46.99466705]
[97.46037292 36.27399063]
[96.95547485 22.98228645]
[104.10446167 11.99728680]
[116.09998322 7.22071838]
[120.05118561 -7.24952555]
[124.00239563 -21.71976852]
[127.95360565 -36.19001389]
[131.90481567 -50.66025543]
[135.85601807 -65.13050079]
[127.80245209 -78.72886658]
[131.80409241 -94.01815796]
[145.48684692 -101.92750549]
[160.73298645 -97.76443481]
[168.49722290 -83.99882507]
[164.17320251 -68.79756165]
[150.32626343 -61.17929077]
[146.37506104 -46.70904922]
[142.42384338 -32.23880386]
[138.47264099 -17.76856041]
[134.52143860 -3.29831696]
[130.57022095 11.17192650]
[139.52665710 25.38224983]
[135.37396240 42.00594711]
[120.20159912 50.66966248]
[116.52660370 65.21250916]
[112.85160828 79.75535583]
[122.12399292 91.54615021]
[137.12332153 91.40335846]
[152.12263489 91.26055908]
[167.12194824 91.11775970]
[182.12127686 90.97496033]
[197.12059021 90.83216858]
[212.11991882 90.68936920]
[227.11923218 90.54656982]
[242.11856079 90.40377045]
[257.11788940 90.26097107]
[272.11718750 90.11817932]
[287.11651611 89.97537994]
[296.71948242 76.07765198]
[312.55139160 70.67977905]
[328.32806396 75.71571350]
[337.91070557 89.01865387]
[352.90460205 88.59031677]
[364.92120361 77.96106720]
[380.69821167 80.87060547]
[388.13287354 95.08698273]
[381.52194214 109.70461273]
[365.93676758 113.51010132]
[353.33294678 103.58419800]
[338.33905029 104.01253510]
[331.84176636 115.70426941]
[320.31738281 122.70510101]
[306.73025513 123.08879089]
[294.63781738 116.64757538]
[287.25930786 104.97470093]
[272.25997925 105.11750031]
[257.26068115 105.26029205]
[242.26135254 105.40309143]
[227.26203918 105.54589081]
[212.26271057 105.68869019]
[197.26339722 105.83148193]
[182.26406860 105.97428131]
[167.26475525 106.11708069]
[152.26542664 106.25988007]
[137.26611328 106.40267181]
[122.26679230 106.54547119]
[110.93054962 116.36838531]
[108.65457916 131.19471741]
[106.37860870 146.02104187]
[111.93240356 160.83541870]
[102.35356140 172.24133301]
[100.07759094 187.06767273]
[98.36772156 201.96989441]
[97.22643280 216.92640686]
[96.08513641 231.88293457]
[94.94384003 246.83944702]
[93.80255127 261.79595947]
[92.66125488 276.75247192]
[91.51996613 291.70901489]
[99.87789917 308.09356689]
[89.46772766 322.19738770]
[88.61139679 337.17291260]
[87.75506592 352.14846802]
[101.13105774 359.50003052]
[109.98568726 371.93215942]
[112.56086731 386.97647095]
[108.34528351 401.64590454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 160]
[9 159]
[10 158]
[13 156]
[14 155]
[15 154]
[16 153]
[17 152]
[18 151]
[19 150]
[24 149]
[25 148]
[27 146]
[28 145]
[29 144]
[33 70]
[34 69]
[35 68]
[37 66]
[38 65]
[39 64]
[41 62]
[42 61]
[44 58]
[45 57]
[46 56]
[47 55]
[75 103]
[76 102]
[77 101]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[104 143]
[105 142]
[106 141]
[107 140]
[108 139]
[109 138]
[110 137]
[111 136]
[112 135]
[113 134]
[114 133]
[115 132]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
