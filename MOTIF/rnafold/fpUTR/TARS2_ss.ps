%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUUGGACCAGAAGCCAAUGAAGAAUUACGUGGAGGAGAAGCGGCGAUAAUCUGUUUGAGGAUGUAGGCACUGGUGUGAAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[86.61294556 281.54421997]
[80.20475006 267.64480591]
[81.00154114 252.36004639]
[88.82021332 239.20227051]
[101.86409760 231.19505310]
[100.79400635 216.23326111]
[99.72392273 201.27148438]
[91.09838104 189.12861633]
[97.83147430 174.81163025]
[96.76139069 159.84985352]
[95.69129944 144.88806152]
[94.62121582 129.92628479]
[93.55112457 114.96450043]
[85.14575958 106.69893646]
[84.51478577 94.92729187]
[91.98844147 85.81059265]
[91.45305634 70.82015228]
[90.91767120 55.82970810]
[80.75605011 66.86336517]
[66.51045990 71.56049347]
[51.77903366 68.73469543]
[40.28263474 59.09971619]
[34.92501831 45.08915329]
[37.05940628 30.24178123]
[46.14669800 18.30774879]
[59.89162827 12.30134678]
[74.82250977 13.73966789]
[87.16810608 22.25942230]
[93.81044769 35.71001053]
[98.54743958 21.47761917]
[103.28443909 7.24523115]
[108.02143097 -6.98715734]
[112.75842285 -21.21954536]
[103.43003082 -29.37899399]
[97.50530243 -40.22439194]
[95.69010925 -52.41301346]
[98.18326569 -64.44531250]
[104.65501404 -74.84942627]
[114.29045105 -82.36122131]
[125.89205933 -86.07786560]
[138.02851868 -85.56629181]
[144.25975037 -99.21076965]
[150.49096680 -112.85525513]
[156.72219849 -126.49973297]
[162.95341492 -140.14421082]
[169.18464661 -153.78869629]
[162.30076599 -167.82957458]
[166.10289001 -182.99789429]
[178.79574585 -192.13163757]
[194.38618469 -190.91812134]
[205.51284790 -179.93034363]
[206.92208862 -164.35638428]
[197.94848633 -151.54980469]
[182.82911682 -147.55746460]
[176.59790039 -133.91299438]
[170.36666870 -120.26850891]
[164.13545227 -106.62402344]
[157.90422058 -92.97954559]
[151.67300415 -79.33506775]
[162.80026245 -65.36072540]
[165.51493835 -47.62125778]
[159.01644897 -30.80456161]
[144.94996643 -19.39609528]
[126.99081421 -16.48255157]
[122.25382233 -2.25016356]
[117.51682281 11.98222542]
[112.77983093 26.21461487]
[108.04283905 40.44700241]
[105.90811157 55.29432297]
[106.44349670 70.28476715]
[106.97888184 85.27520752]
[116.27156067 99.12782288]
[108.51290894 113.89441681]
[109.58299255 128.85620117]
[110.65308380 143.81797791]
[111.72316742 158.77975464]
[112.79325867 173.74154663]
[121.49533844 186.95457458]
[114.68569946 200.20140076]
[115.75579071 215.16317749]
[116.82588196 230.12495422]
[130.87654114 236.19435120]
[140.48817444 248.10548401]
[143.45210266 263.12124634]
[139.08723450 277.79116821]
[128.39657593 288.74420166]
[113.83677673 293.46337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 81]
[6 80]
[7 79]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[16 71]
[17 70]
[18 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
