%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAAAGAGCGCGGGUCCUCGGCCGUGGAGGGUCAAGUGGCUUCUUCUGAGCGCUGAGGGAGGGGAGCGUGCGUAGGGG\
) } def
/len { sequence length } bind def

/coor [
[113.63612366 407.88101196]
[122.91996002 394.79705811]
[121.74307251 379.84329224]
[120.56618500 364.88955688]
[108.46688080 358.90792847]
[100.89907837 347.60043335]
[99.96773529 333.91668701]
[106.02930450 321.49194336]
[117.56796265 313.68130493]
[116.97906494 298.69287109]
[116.39016724 283.70440674]
[115.80126953 268.71597290]
[99.82369995 259.57263184]
[92.24001312 242.63963318]
[96.11718750 224.34748840]
[110.13381195 211.75350952]
[107.78729248 196.93818665]
[105.44078064 182.12286377]
[103.09426117 167.30754089]
[100.74774170 152.49221802]
[98.40122223 137.67689514]
[96.05471039 122.86156464]
[93.70819092 108.04624176]
[89.33334351 100.99960327]
[91.57230377 92.60424042]
[89.80924225 77.70821381]
[87.17230225 62.94181824]
[83.67061615 48.35626984]
[80.16893768 33.77072144]
[76.66725922 19.18517113]
[73.16558075 4.59962273]
[69.37820435 -9.91436386]
[65.30659485 -24.35119247]
[61.23498917 -38.78802109]
[49.11708069 -49.83737946]
[52.89098358 -65.79637909]
[68.67443085 -70.24777222]
[80.23075867 -58.61234283]
[75.67182159 -42.85962677]
[79.74342346 -28.42279816]
[83.81503296 -13.98597050]
[88.79337311 -8.25235462]
[87.75112915 1.09794223]
[91.25280762 15.68349075]
[94.75448608 30.26903915]
[98.25616455 44.85458755]
[101.75785065 59.44013596]
[104.83612061 61.63854599]
[106.87631989 65.56802368]
[107.01362610 70.65808105]
[104.70526886 75.94515228]
[106.46833038 90.84117889]
[108.52351379 105.69972229]
[110.87003326 120.51504517]
[113.21655273 135.33036804]
[115.56306458 150.14569092]
[117.90958405 164.96102905]
[120.25610352 179.77635193]
[122.60261536 194.59167480]
[124.94913483 209.40699768]
[136.33486938 212.91517639]
[145.46415710 220.48854065]
[150.96626282 230.93792725]
[152.03511047 242.64642334]
[148.54713440 253.81958008]
[141.07408142 262.76040649]
[130.78970337 268.12707520]
[131.37860107 283.11550903]
[131.96749878 298.10397339]
[132.55639648 313.09240723]
[146.66839600 322.18206787]
[152.61537170 337.70330811]
[148.27687073 353.57815552]
[135.51994324 363.71264648]
[136.69682312 378.66641235]
[137.87371826 393.62017822]
[149.09002686 405.09072876]
[146.97233582 420.99340820]
[133.14512634 429.12902832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[9 70]
[10 69]
[11 68]
[12 67]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[25 52]
[26 51]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
