%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCUCAGCACAGAAGGAGGAAGGACAGCAGGGCCAACAGUCACAGCAGCCCUGACCAGAGCAUUCCUGGAGCUCAAGCUCCUCUACAAAGAGGUGGACAGAGAAGACAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[92.88564301 266.26806641]
[79.89141846 255.37832642]
[86.75843048 239.87733459]
[87.54346466 224.89788818]
[88.13236237 209.90945435]
[88.52501678 194.91459656]
[88.91767120 179.91973877]
[81.51618195 166.99429321]
[89.61208344 153.40138245]
[90.00473785 138.40652466]
[79.98236084 129.18064880]
[74.75060272 118.13558960]
[74.22711945 107.30560303]
[77.56665039 98.41706848]
[83.36955261 92.63098145]
[89.96756744 90.39251709]
[78.06726837 81.26109314]
[66.16696930 72.12967682]
[54.26667023 62.99825287]
[42.36636734 53.86683273]
[30.15211487 62.73768234]
[15.94744873 67.80223846]
[0.90642029 68.65811157]
[-13.75152302 65.24446106]
[-26.84040260 57.84627151]
[-37.30366898 47.07055283]
[-44.29948807 33.79654694]
[-47.26845932 19.10399628]
[-45.97835159 4.18531895]
[-40.54223251 -9.75117683]
[-52.44253540 -18.88259888]
[-64.34283447 -28.01401901]
[-76.24313354 -37.14544296]
[-88.14343262 -46.27686310]
[-100.04373169 -55.40828323]
[-113.19059753 -47.77753067]
[-128.25753784 -45.76367569]
[-142.94697571 -49.67382050]
[-155.01884460 -58.91168976]
[-162.63229370 -72.06858063]
[-164.62632751 -87.13816071]
[-160.69686890 -101.82243347]
[-151.44313049 -113.88214874]
[-138.27622986 -121.47828674]
[-123.20404053 -123.45249176]
[-108.52494812 -119.50371552]
[-96.47741699 -110.23411560]
[-88.89860535 -97.05723572]
[-86.94422913 -81.98246765]
[-90.91231537 -67.30858612]
[-79.01201630 -58.17716217]
[-67.11170959 -49.04574203]
[-55.21141052 -39.91431808]
[-43.31111145 -30.78289795]
[-31.41081238 -21.65147781]
[-19.35616302 -30.50939560]
[-5.27973080 -35.61678314]
[9.68060780 -36.55168533]
[24.31296539 -33.22980881]
[37.42960358 -25.91203117]
[47.96335602 -15.18393612]
[55.05444336 -1.90896773]
[58.12063980 12.84106541]
[56.90509415 27.87252426]
[51.49779129 41.96652985]
[63.39809036 51.09795380]
[75.29839325 60.22937393]
[87.19869232 69.36079407]
[99.09899139 78.49221802]
[114.09384918 78.09956360]
[125.49993896 68.35784149]
[136.90603638 58.61611938]
[148.31211853 48.87440109]
[159.71820068 39.13267899]
[164.67932129 23.50196075]
[180.75236511 20.24781227]
[191.40275574 32.71782303]
[185.67430115 48.08391190]
[169.45993042 50.53876877]
[158.05383301 60.28049088]
[146.64775085 70.02220917]
[135.24165344 79.76393127]
[123.83557129 89.50565338]
[128.47082520 103.77149963]
[143.42459106 104.94838715]
[158.37834167 106.12527466]
[173.33210754 107.30216217]
[188.28585815 108.47904205]
[200.13925171 98.02568817]
[215.90705872 99.09902954]
[226.23451233 111.06227875]
[224.99452209 126.81784821]
[212.92274475 137.01823425]
[197.18116760 135.61174011]
[187.10897827 123.43280792]
[172.15521240 122.25592041]
[157.20146179 121.07903290]
[142.24769592 119.90214539]
[127.29393768 118.72525787]
[121.72035217 123.74373627]
[134.27928162 131.94577026]
[149.19459534 133.53749084]
[160.02465820 143.91581726]
[162.25006104 158.74981689]
[154.94212341 171.84919739]
[141.15048218 177.74754333]
[126.63043976 173.98344421]
[117.44127655 162.12767029]
[117.41751099 147.12817383]
[110.57318115 133.78070068]
[104.99959564 138.79917908]
[104.60694122 153.79403687]
[111.98033905 167.79202271]
[103.91252899 180.31239319]
[103.51988220 195.30725098]
[103.12722778 210.30210876]
[106.05868530 219.08682251]
[102.52291107 225.68293762]
[101.73786926 240.66236877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 119]
[4 118]
[5 116]
[6 115]
[7 114]
[9 112]
[10 111]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
