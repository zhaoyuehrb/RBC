%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (IFNA2)
} def

/sequence { (\
GAGAACCUGGAGCCUAAGGUUUAGGCUCACCCAUUUCAACCAGUCUAGCAGCAUCUGCAACAUCUACA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 28 0.023151073 ubox
1 35 0.010600377 ubox
1 36 0.015566811 ubox
1 37 0.946914860 ubox
1 45 0.031259934 ubox
1 64 0.030914762 ubox
2 8 0.018940741 ubox
2 27 0.023160782 ubox
2 34 0.012167422 ubox
2 35 0.020004760 ubox
2 36 0.946418997 ubox
2 44 0.031056998 ubox
2 46 0.162698079 ubox
2 56 0.009930322 ubox
2 63 0.028187326 ubox
2 65 0.074768493 ubox
3 7 0.019126038 ubox
3 22 0.010790169 ubox
3 26 0.022871391 ubox
3 28 0.013143576 ubox
3 34 0.020224285 ubox
3 35 0.935799423 ubox
3 36 0.042429192 ubox
3 37 0.174577656 ubox
3 45 0.167817980 ubox
3 55 0.010200930 ubox
3 64 0.077042725 ubox
4 21 0.014722097 ubox
4 27 0.012945943 ubox
4 34 0.898619459 ubox
4 35 0.054240486 ubox
4 36 0.173770306 ubox
4 44 0.155988445 ubox
4 54 0.010102723 ubox
4 63 0.072531742 ubox
5 20 0.015848020 ubox
5 34 0.059612369 ubox
5 35 0.161245214 ubox
5 44 0.043105931 ubox
6 19 0.016007035 ubox
6 25 0.026541698 ubox
6 43 0.043218273 ubox
7 18 0.016008042 ubox
7 24 0.026650689 ubox
7 43 0.178727446 ubox
7 51 0.010153037 ubox
8 17 0.015719026 ubox
8 23 0.026026199 ubox
8 29 0.091794790 ubox
8 33 0.179860809 ubox
8 38 0.018070076 ubox
8 42 0.184442193 ubox
8 50 0.010164587 ubox
8 59 0.004983338 ubox
8 62 0.030978009 ubox
8 66 0.003995303 ubox
8 68 0.010384297 ubox
9 15 0.004084662 ubox
9 22 0.021091273 ubox
9 28 0.070888504 ubox
9 31 0.076866774 ubox
9 32 0.183678516 ubox
9 37 0.018957667 ubox
9 41 0.184560402 ubox
9 49 0.010119321 ubox
9 58 0.003618469 ubox
9 61 0.032047306 ubox
9 64 0.006235568 ubox
9 65 0.004202569 ubox
9 67 0.013645064 ubox
10 14 0.004134827 ubox
10 21 0.014450877 ubox
10 22 0.016132914 ubox
10 27 0.030708738 ubox
10 28 0.971375169 ubox
10 30 0.064646467 ubox
10 31 0.149280089 ubox
10 36 0.005027641 ubox
10 40 0.150034961 ubox
11 20 0.012461496 ubox
11 21 0.022217208 ubox
11 27 0.997982643 ubox
11 35 0.003385373 ubox
12 20 0.023676070 ubox
12 26 0.999497198 ubox
13 19 0.026091521 ubox
13 25 0.999505040 ubox
14 18 0.025908454 ubox
14 24 0.999495319 ubox
15 23 0.998609112 ubox
16 22 0.987426358 ubox
17 21 0.752790980 ubox
22 47 0.010757821 ubox
23 46 0.014623672 ubox
24 45 0.014967364 ubox
25 44 0.014969690 ubox
26 43 0.014978179 ubox
27 42 0.014144207 ubox
29 44 0.012089204 ubox
30 43 0.012964420 ubox
33 44 0.017036875 ubox
34 43 0.017949167 ubox
35 42 0.016032467 ubox
35 43 0.004439036 ubox
36 42 0.005485391 ubox
41 57 0.042478448 ubox
42 56 0.042821541 ubox
42 65 0.249798149 ubox
43 49 0.020050253 ubox
43 52 0.016732547 ubox
43 54 0.003612774 ubox
43 55 0.042684948 ubox
43 58 0.007892327 ubox
43 61 0.434680933 ubox
43 63 0.103163855 ubox
43 64 0.261713298 ubox
43 67 0.057201824 ubox
44 48 0.018783792 ubox
44 51 0.015555360 ubox
44 53 0.012647423 ubox
44 57 0.007098316 ubox
44 60 0.431015459 ubox
44 62 0.117887267 ubox
44 66 0.055187543 ubox
45 51 0.020639888 ubox
46 50 0.018681994 ubox
46 57 0.015023201 ubox
46 66 0.025973229 ubox
47 56 0.017119253 ubox
47 65 0.028582513 ubox
48 55 0.017094121 ubox
48 58 0.993083459 ubox
48 64 0.022779896 ubox
49 57 0.994083066 ubox
50 56 0.991632772 ubox
51 55 0.969899449 ubox
51 58 0.085634951 ubox
52 57 0.085606895 ubox
56 62 0.004144246 ubox
57 61 0.004556915 ubox
57 67 0.003258486 ubox
1 37 0.9500000 lbox
2 36 0.9500000 lbox
3 35 0.9500000 lbox
4 34 0.9500000 lbox
10 28 0.9500000 lbox
11 27 0.9500000 lbox
12 26 0.9500000 lbox
13 25 0.9500000 lbox
14 24 0.9500000 lbox
15 23 0.9500000 lbox
16 22 0.9500000 lbox
17 21 0.9500000 lbox
48 58 0.9500000 lbox
49 57 0.9500000 lbox
50 56 0.9500000 lbox
51 55 0.9500000 lbox
showpage
end
%%EOF
