%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCCUGCGCGGGUUUUAUACUCUGCUAUAUGUGUGUCCGCUGCUUUUAGGCAACCAGCCGCUGCCCCUGGGCCGCAAGGCAGGCUGGAAACGAUUCCGCCGUCAGGUCCCAAAU\
) } def
/len { sequence length } bind def

/coor [
[106.22434235 395.26119995]
[97.93807220 382.48394775]
[95.57157135 367.44003296]
[99.53485107 352.73587036]
[109.14124298 340.91906738]
[122.72638702 334.03692627]
[121.93475342 319.05783081]
[121.14312744 304.07873535]
[120.35149384 289.09963989]
[119.55986786 274.12054443]
[118.57058716 259.15319824]
[117.38383484 244.20022583]
[115.99980927 229.26420593]
[114.41875458 214.34776306]
[112.83769989 199.43132019]
[110.47162628 184.61911011]
[107.32713318 169.95240784]
[104.18264008 155.28570557]
[101.03814697 140.61900330]
[97.89365387 125.95229340]
[85.34730530 121.52340698]
[76.62701416 111.47440338]
[74.00978851 98.42924500]
[78.17903137 85.79424286]
[88.04607391 76.86859131]
[85.28983307 62.12399292]
[82.53359222 47.37939835]
[79.77735138 32.63479996]
[77.02110291 17.89020538]
[74.26486206 3.14560866]
[64.82242584 -2.56548524]
[60.24119949 -12.36120605]
[61.84457397 -22.83204842]
[68.84867859 -30.48158455]
[66.87442780 -45.35109329]
[64.90017700 -60.22060394]
[62.92592621 -75.09011841]
[58.64636993 -83.30570221]
[61.10118484 -90.37758636]
[59.52013397 -105.29402924]
[57.93907928 -120.21047211]
[56.35802460 -135.12690735]
[54.77696991 -150.04335022]
[40.99934387 -160.72450256]
[39.18215942 -177.72459412]
[49.95887756 -190.56159973]
[47.98462677 -205.43110657]
[36.17508698 -209.94818115]
[27.49383163 -219.04064941]
[23.57332802 -230.90847778]
[25.11200333 -243.23880005]
[31.75069618 -253.65666199]
[42.15401077 -260.18240356]
[40.96725464 -275.13537598]
[39.78049850 -290.08837891]
[28.55661392 -301.55151367]
[30.66382027 -317.45559692]
[44.48564529 -325.60031128]
[59.41917038 -319.73779297]
[64.00867462 -304.36520386]
[54.73347855 -291.27511597]
[55.92023468 -276.32214355]
[57.10699081 -261.36917114]
[72.52428436 -252.96385193]
[79.96141052 -236.88526917]
[76.32047272 -219.38920593]
[62.85413742 -207.40534973]
[64.82838440 -192.53584290]
[76.10972595 -186.16062927]
[81.70726776 -174.25765991]
[79.35343933 -161.11801147]
[69.69341278 -151.62440491]
[71.27446747 -136.70796204]
[72.85552216 -121.79152679]
[74.43657684 -106.87508392]
[76.01763153 -91.95864105]
[77.79543304 -77.06436920]
[79.76968384 -62.19485474]
[81.74393463 -47.32534409]
[83.71818542 -32.45583344]
[96.64557648 -18.17636299]
[89.00946045 0.38936588]
[91.76570129 15.13396263]
[94.52194214 29.87855911]
[97.27819061 44.62315369]
[100.03443146 59.36775208]
[102.79067230 74.11235046]
[117.55860901 80.77362061]
[125.52890778 94.87818146]
[123.61596680 110.96559906]
[112.56035614 122.80780029]
[115.70484924 137.47450256]
[118.84934235 152.14120483]
[121.99383545 166.80790710]
[125.13832855 181.47460938]
[128.38316345 184.78251648]
[130.14581299 188.58628845]
[130.45904541 192.33129883]
[129.54135132 195.53630066]
[127.75414276 197.85026550]
[129.33518982 212.76670837]
[130.91624451 227.68315125]
[134.97744751 236.00883484]
[132.33680725 243.01345825]
[133.52355957 257.96643066]
[137.36358643 266.39642334]
[134.53895569 273.32891846]
[135.33059692 288.30801392]
[136.12222290 303.28710938]
[136.91384888 318.26620483]
[137.70549011 333.24530029]
[151.94035339 338.65716553]
[162.73876953 349.39559937]
[168.22984314 363.60012817]
[167.46220398 378.80966187]
[160.56886292 392.38912964]
[148.74412537 401.98577881]
[134.03669739 405.93692017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 105]
[12 104]
[13 102]
[14 101]
[15 100]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[34 80]
[35 79]
[36 78]
[37 77]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[46 68]
[47 67]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
