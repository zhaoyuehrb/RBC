%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGCCCCCGCGCCGCCGGCCCUAGUCUGCCUGUUUUCGACUCGCGCUCCGGCUGCUGUCACUUGGCUCUCUGGCUGGAGCUUGAGGACGCAAGGAGGGUUUGUCACUGGCAGACUCGAGACUGUAGGCACUGCC\
) } def
/len { sequence length } bind def

/coor [
[98.20654297 510.49554443]
[84.36054230 516.26513672]
[69.37586975 515.58715820]
[56.10743332 508.59085083]
[47.08315277 496.60910034]
[44.02237701 481.92291260]
[37.73472977 495.54147339]
[39.76401520 511.81460571]
[26.52426910 521.49145508]
[11.63540459 514.61730957]
[10.41381168 498.26370239]
[24.11615944 489.25384521]
[30.40380669 475.63525391]
[34.77849579 461.28738403]
[37.15873337 446.47741699]
[39.53897476 431.66748047]
[30.63066673 419.78567505]
[32.83359528 404.73236084]
[45.35674286 395.46908569]
[47.73698044 380.65911865]
[50.11721802 365.84918213]
[37.35955048 355.99655151]
[31.25333977 340.97744751]
[33.54294968 324.83248901]
[43.70021439 311.95642090]
[59.04249573 305.90191650]
[61.08499527 291.04162598]
[63.12749481 276.18133545]
[65.16999054 261.32104492]
[67.21249390 246.46076965]
[69.25498962 231.60047913]
[71.29749298 216.74018860]
[73.33998871 201.87989807]
[67.40779114 188.21760559]
[76.95214844 175.59953308]
[78.99464417 160.73924255]
[77.32215881 158.38798523]
[76.52201843 155.20466614]
[76.92677307 151.53401184]
[78.73207092 147.83834839]
[81.95869446 144.64447021]
[85.34404755 130.03147888]
[88.72940063 115.41849518]
[81.14970398 103.06963348]
[84.41985321 88.95394897]
[96.65760803 81.19615173]
[100.04296875 66.58316803]
[95.61986542 51.39281464]
[106.02995300 40.74015427]
[109.41531372 26.12716866]
[112.80066681 11.51418114]
[116.18601990 -3.09880471]
[109.85010529 -12.07280445]
[109.55451202 -22.83336639]
[115.15411377 -31.76754570]
[124.56510925 -36.01063538]
[128.61206055 -50.45439529]
[132.65901184 -64.89815521]
[131.96330261 -74.09449005]
[136.96597290 -79.62265015]
[141.34065247 -93.97055054]
[145.71534729 -108.31844330]
[145.22915649 -117.52822876]
[150.35636902 -122.94108582]
[155.05651855 -137.18568420]
[159.75668335 -151.43028259]
[164.45684814 -165.67486572]
[168.99455261 -179.97204590]
[173.36924744 -194.31993103]
[177.74394226 -208.66783142]
[182.11862183 -223.01573181]
[186.49331665 -237.36361694]
[178.84278870 -251.19276428]
[183.29196167 -266.35787964]
[197.20121765 -273.86175537]
[212.31843567 -269.25250244]
[219.67483521 -255.26467896]
[214.90602112 -240.19703674]
[200.84121704 -232.98893738]
[196.46652222 -218.64103699]
[192.09182739 -204.29313660]
[187.71714783 -189.94525146]
[183.34245300 -175.59735107]
[184.40974426 -168.21846008]
[178.70143127 -160.97471619]
[174.00128174 -146.73011780]
[169.30111694 -132.48551941]
[164.60095215 -118.24092865]
[160.06323242 -103.94375610]
[155.68855286 -89.59585571]
[151.31385803 -75.24796295]
[147.10276794 -60.85120392]
[143.05581665 -46.40744400]
[139.00886536 -31.96368408]
[145.22860718 -13.70843315]
[130.79901123 0.28655097]
[127.41365051 14.89953709]
[124.02829742 29.51252365]
[120.64294434 44.12551117]
[125.30818939 58.27064133]
[114.65595245 69.96852112]
[111.27059937 84.58150482]
[118.85029602 96.93036652]
[115.58014679 111.04605103]
[103.34239197 118.80384827]
[99.95703125 133.41683960]
[96.57167816 148.02981567]
[93.85493469 162.78173828]
[91.81243134 177.64202881]
[97.59854889 192.36723328]
[88.20027924 203.92239380]
[86.15778351 218.78268433]
[84.11528015 233.64297485]
[82.07278442 248.50326538]
[80.03028107 263.36355591]
[77.98778534 278.22384644]
[75.94528198 293.08413696]
[73.90278625 307.94442749]
[85.41578674 315.97076416]
[92.29816437 328.12588501]
[93.24871826 341.99533081]
[88.13800812 354.85247803]
[78.02259827 364.19445801]
[64.92716217 368.22943115]
[62.54692459 383.03936768]
[60.16668701 397.84930420]
[69.15657043 410.57015991]
[66.53169250 425.55563354]
[54.34891891 434.04772949]
[51.96868134 448.85766602]
[49.58843994 463.66760254]
[60.32093430 453.18841553]
[74.49481964 448.27914429]
[89.40967560 449.87512207]
[102.22389221 457.67230225]
[110.49609375 470.18511963]
[112.65023804 485.02963257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 13]
[7 12]
[14 131]
[15 130]
[16 129]
[19 126]
[20 125]
[21 124]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
[35 109]
[36 108]
[41 107]
[42 106]
[43 105]
[46 102]
[47 101]
[49 99]
[50 98]
[51 97]
[52 96]
[56 94]
[57 93]
[58 92]
[60 91]
[61 90]
[62 89]
[64 88]
[65 87]
[66 86]
[67 85]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
