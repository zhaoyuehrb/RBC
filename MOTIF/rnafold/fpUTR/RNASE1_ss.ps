%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUAAGGUCCACACCCCGGGAGCUGAGUGAUUGCAGAAACUGGCCUUCCAUCUCUCUCAGACACCAAGCUGCAGAUCCAGGUCACUUUGUAGGUCACCACCUAGAGGGGAGGAAGACCUCGCUUUGGAGAGUGGGAAUAAAACGCUCGUGGAAAAGGGUACACGCUUUUCUGGGAAAGUGAGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[102.64009857 465.35858154]
[87.30010223 464.59701538]
[74.40475464 456.25402832]
[67.42285156 442.57379150]
[68.23248291 427.23626709]
[76.61585999 414.36712646]
[90.31790924 407.42813110]
[91.06166077 392.44659424]
[91.80541992 377.46505737]
[92.54917908 362.48348999]
[93.16905212 347.49630737]
[93.66500092 332.50451660]
[94.16094971 317.51272583]
[82.15652466 305.74578857]
[82.37226105 288.59988403]
[95.16258240 276.67822266]
[95.41059113 261.68026733]
[95.65859985 246.68232727]
[95.90660858 231.68437195]
[96.15461731 216.68641663]
[96.15461731 201.68641663]
[95.90660858 186.68847656]
[95.65859985 171.69052124]
[95.41059113 156.69256592]
[87.62605286 143.87068176]
[74.43394470 136.73147583]
[65.37924957 135.39472961]
[61.08416748 129.36360168]
[48.01190567 122.00724792]
[34.93964005 114.65089417]
[21.86737823 107.29454041]
[8.79511356 99.93818665]
[-4.33752012 92.69016266]
[-17.52962685 85.55094910]
[-30.72173309 78.41173553]
[-43.91383743 71.27252960]
[-57.10594559 64.13331604]
[-70.29804993 56.99410629]
[-80.54795837 60.70100021]
[-90.92994690 58.19642639]
[-98.06228638 50.54517365]
[-99.75957489 40.44659042]
[-112.70841980 32.87510681]
[-125.65726471 25.30362320]
[-138.60610962 17.73214149]
[-151.55496216 10.16065788]
[-164.50381470 2.58917499]
[-177.06404114 7.48256159]
[-189.95967102 4.28945589]
[-198.53033447 -5.60508108]
[-199.81225586 -18.43688393]
[-212.63415527 -26.22142792]
[-225.45603943 -34.00597000]
[-238.27793884 -41.79051590]
[-247.08773804 -38.34109116]
[-256.35861206 -39.32833481]
[-264.01473999 -44.40353775]
[-268.40084839 -52.31711197]
[-268.63937378 -61.22396469]
[-281.05950928 -69.63468933]
[-293.47964478 -78.04541779]
[-308.02429199 -72.63863373]
[-322.96005249 -76.84598541]
[-332.54388428 -89.04966736]
[-333.09057617 -104.55710602]
[-324.38992310 -117.40538025]
[-309.78750610 -122.65406799]
[-294.89822388 -118.28493500]
[-285.44735718 -105.97800446]
[-285.06890869 -90.46554565]
[-272.64877319 -82.05482483]
[-260.22866821 -73.64409637]
[-239.60226440 -73.99654388]
[-230.49339294 -54.61240768]
[-217.67149353 -46.82786179]
[-204.84960938 -39.04331970]
[-192.02770996 -31.25877571]
[-175.88578796 -35.94967270]
[-161.04919434 -27.35291100]
[-156.93232727 -10.35967255]
[-143.98347473 -2.78818917]
[-131.03462219 4.78329372]
[-118.08578491 12.35477638]
[-105.13693237 19.92625999]
[-92.18808746 27.49774361]
[-72.90791321 26.17121124]
[-63.15884018 43.80199814]
[-49.96673584 50.94120789]
[-36.77462769 58.08042145]
[-23.58252144 65.21963501]
[-10.39041519 72.35884094]
[2.80169082 79.49805450]
[10.19402122 79.91731262]
[16.15146637 86.86592865]
[29.22373009 94.22227478]
[42.29599380 101.57862854]
[55.36825562 108.93498230]
[68.44052124 116.29133606]
[81.57315826 123.53936768]
[94.76525879 130.67857361]
[74.18687439 93.63767242]
[106.81687927 79.03092194]
[116.03006744 67.19380951]
[125.24326324 55.35670471]
[134.45645142 43.51959610]
[143.66964722 31.68248940]
[152.88282776 19.84538269]
[152.06645203 6.96129704]
[159.99873352 -2.71085787]
[171.99855042 -4.32438755]
[181.40618896 -16.00754738]
[190.81384277 -27.69070625]
[200.22148132 -39.37386703]
[202.20620728 -55.65246964]
[217.40013123 -61.82310104]
[230.17304993 -51.53794098]
[227.38528442 -35.37748337]
[211.90464783 -29.96621895]
[202.49699402 -18.28306007]
[193.08935547 -6.59990120]
[183.68171692 5.08325768]
[181.93173218 22.53708839]
[164.71994019 29.05857277]
[155.50674438 40.89567947]
[146.29356384 52.73278809]
[137.08036804 64.56989288]
[127.86717987 76.40700531]
[118.65398407 88.24411011]
[126.08322144 94.85586548]
[130.65798950 105.35400391]
[145.55763245 103.62173462]
[160.45726013 101.88946533]
[175.35690308 100.15719604]
[190.25654602 98.42492676]
[196.95010376 84.52529907]
[210.10774231 76.47047424]
[225.53089905 76.83073425]
[238.29809570 85.49110413]
[244.33538818 99.68810272]
[241.71626282 114.89151764]
[231.27650452 126.24999237]
[216.34739685 130.13908386]
[201.69274902 125.31778717]
[191.98881531 113.32456970]
[177.08917236 115.05683899]
[162.18952942 116.78910828]
[147.28990173 118.52137756]
[132.39025879 120.25364685]
[129.79910278 135.02815247]
[143.22004700 141.72727966]
[156.64099121 148.42640686]
[169.40800476 139.88833618]
[184.73466492 138.89367676]
[198.49813843 145.70999146]
[206.99615479 158.50370789]
[207.94276428 173.83340454]
[201.08335876 187.57545471]
[188.26304626 196.03332520]
[172.93046570 196.93188477]
[159.20999146 190.02941895]
[150.79234314 177.18267822]
[149.94184875 161.84735107]
[136.52090454 155.14822388]
[123.09997559 148.44908142]
[110.40854645 156.44456482]
[110.65655518 171.44252014]
[110.90456390 186.44046021]
[111.15257263 201.43841553]
[114.23294830 207.32124329]
[113.91429901 213.01802063]
[111.15257263 216.93443298]
[110.90456390 231.93237305]
[110.65655518 246.93032837]
[110.40854645 261.92828369]
[110.16053772 276.92623901]
[120.58487701 285.47244263]
[124.12645721 298.27676392]
[119.70677948 310.59848022]
[109.15274811 318.00866699]
[108.65679932 333.00045776]
[108.16085052 347.99224854]
[111.00873566 356.69076538]
[107.53072357 363.22726440]
[106.78697205 378.20880127]
[106.04321289 393.19033813]
[105.29945374 408.17190552]
[118.24684906 416.43389893]
[125.31437683 430.07009888]
[124.60091400 445.41238403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 186]
[8 185]
[9 184]
[10 183]
[11 181]
[12 180]
[13 179]
[16 175]
[17 174]
[18 173]
[19 172]
[20 171]
[21 168]
[22 167]
[23 166]
[24 165]
[25 100]
[26 99]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[51 77]
[52 76]
[53 75]
[54 74]
[59 72]
[60 71]
[61 70]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
[110 121]
[111 120]
[112 119]
[113 118]
[130 148]
[131 147]
[132 146]
[133 145]
[134 144]
[149 164]
[150 163]
[151 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
