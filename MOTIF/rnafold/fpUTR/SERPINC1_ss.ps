%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCCCACCCUGUCCUCUGGAACCUCUGCGAGAUUUAGAGGAAAGAACCAGUUUUCAGGCGGAUUGCCUCAGAUCACACUAUCUCCACUUGCCCAGCCCUGUGGAAGAUUAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[94.53223419 204.33122253]
[80.49680328 196.56036377]
[77.96354675 180.71856689]
[88.87575531 168.95832825]
[89.66079712 153.97888184]
[90.44583130 138.99945068]
[83.39558411 136.55860901]
[76.91861725 132.85557556]
[71.23854828 128.01817322]
[66.55149078 122.21341705]
[63.01926041 115.64173126]
[60.76382065 108.53000641]
[45.76896286 108.92266083]
[32.17605591 117.01855469]
[19.25060654 109.61706543]
[4.25574732 110.00971985]
[-10.73911285 110.40237427]
[-25.73397255 110.79502869]
[-40.72883224 111.18768311]
[-55.72369385 111.58033752]
[-70.71855164 111.97299194]
[-85.71340942 112.36564636]
[-100.70827484 112.75830078]
[-110.20689392 121.60265350]
[-122.78298950 121.55326843]
[-131.62635803 113.18700409]
[-146.62635803 113.18700409]
[-161.62635803 113.18700409]
[-177.46549988 119.23334503]
[-187.66024780 105.68700409]
[-177.46549988 92.14066315]
[-161.62635803 98.18700409]
[-146.62635803 98.18700409]
[-131.62635803 98.18700409]
[-116.99935913 88.58665466]
[-101.10092926 97.76344299]
[-86.10606384 97.37078857]
[-71.11120605 96.97813416]
[-56.11634827 96.58547974]
[-41.12148666 96.19282532]
[-26.12662697 95.80017090]
[-11.13176632 95.40751648]
[3.86309314 95.01486206]
[18.85795212 94.62220764]
[31.37832451 86.55439758]
[45.37630844 93.92780304]
[60.37116623 93.53514862]
[63.29788208 83.71524811]
[68.61479950 74.95588684]
[75.97565460 67.82749939]
[84.90108490 62.79433441]
[94.80982208 60.18416214]
[105.05656433 60.16697693]
[109.69182587 45.90112686]
[102.77081299 31.94629478]
[107.67484283 17.54472733]
[121.02129364 11.03259945]
[125.65654755 -3.23324800]
[129.91677856 -17.61554337]
[133.79907227 -32.10443115]
[137.68135071 -46.59331894]
[141.56362915 -61.08220673]
[134.81962585 -75.63891602]
[142.12428284 -89.92253113]
[157.87408447 -92.97587585]
[169.98715210 -82.45669556]
[169.17137146 -66.43439484]
[156.05252075 -57.19992065]
[152.17024231 -42.71103287]
[148.28794861 -28.22214508]
[144.40567017 -13.73325825]
[146.04257202 -9.12661934]
[144.71363831 -3.44043040]
[139.92239380 1.40200698]
[135.28713989 15.66785431]
[142.25691223 28.78112411]
[137.75933838 43.31475449]
[123.95767212 50.53638077]
[119.32241821 64.80223083]
[136.46440125 83.18968201]
[139.31349182 108.16624451]
[153.17169189 113.90649414]
[167.02989197 119.64674377]
[180.96203613 125.20510864]
[194.96572876 130.58062744]
[208.96943665 135.95614624]
[223.04231262 141.14790344]
[237.18193054 146.15499878]
[251.32154846 151.16210938]
[265.46118164 156.16920471]
[281.04147339 148.34587097]
[297.16326904 154.04074097]
[304.09457397 169.30244446]
[318.36041260 173.93769836]
[335.29275513 173.08184814]
[340.80249023 189.11553955]
[326.92065430 198.84852600]
[313.72515869 188.20355225]
[299.45932007 183.56829834]
[288.84155273 190.99386597]
[275.68978882 190.90840149]
[264.85211182 183.11753845]
[260.45407104 170.30883789]
[246.31445312 165.30172729]
[232.17483521 160.29463196]
[218.03520203 155.28752136]
[210.58811951 156.02993774]
[203.59391785 149.95985413]
[189.59020996 144.58433533]
[175.58650208 139.20881653]
[168.12252808 139.75602722]
[161.28962708 133.50494385]
[147.43144226 127.76468658]
[133.57324219 122.02443695]
[121.42606354 133.95825195]
[105.42527771 139.78448486]
[104.64023590 154.76393127]
[103.85519409 169.74336243]
[113.47834778 182.57981873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 118]
[5 117]
[6 116]
[12 47]
[13 46]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[26 34]
[27 33]
[28 32]
[53 79]
[54 78]
[57 75]
[58 74]
[59 71]
[60 70]
[61 69]
[62 68]
[81 114]
[82 113]
[83 112]
[84 110]
[85 109]
[86 108]
[87 106]
[88 105]
[89 104]
[90 103]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
