%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGCGGGAACCUGACACCGAGGAUGAAUAAAUGAUGCUCGCUGACUACCCGUGGCCAAAGCCCGUGGCCACCGAGCGCCGGCUGGCAGGGGCAGUGACCGGCGGCCGGCCCGUUCGUCCCUGGGCUCCGCAAGCGGCGCGGUGGCACGAAG\
) } def
/len { sequence length } bind def

/coor [
[37.06457138 126.79861450]
[22.43111038 130.09434509]
[7.79764938 133.39007568]
[-6.72959423 137.12628174]
[-21.13736534 141.29953003]
[-35.54513931 145.47279358]
[-49.91015625 149.79092407]
[-64.23097229 154.25346375]
[-78.55178070 158.71601868]
[-92.87259674 163.17855835]
[-107.19341278 167.64109802]
[-108.32579041 179.70173645]
[-113.46662903 190.63206482]
[-121.98522949 199.14649963]
[-132.85517883 204.25245667]
[-144.77798462 205.36599731]
[-156.33816528 202.37863159]
[-166.17132568 195.66725159]
[-173.12518311 186.04689026]
[-187.68931580 189.63662720]
[-199.23681641 200.45169067]
[-213.44592285 195.98506165]
[-228.01004028 199.57479858]
[-242.57417297 203.16452026]
[-257.13830566 206.75425720]
[-268.68579102 217.56932068]
[-282.89489746 213.10269165]
[-297.45901489 216.69242859]
[-302.35400391 231.32263184]
[-314.39590454 240.96609497]
[-329.74218750 242.54560852]
[-343.49594116 235.55717468]
[-351.26834106 222.23077393]
[-350.57931519 206.81881714]
[-341.64865112 194.23918152]
[-327.32614136 188.50599670]
[-312.18203735 191.44871521]
[-301.04876709 202.12829590]
[-286.48464966 198.53857422]
[-275.97885132 187.98027039]
[-260.72802734 192.19013977]
[-246.16390991 188.60040283]
[-231.59977722 185.01066589]
[-217.03564453 181.42092896]
[-206.52986145 170.86262512]
[-191.27905273 175.07249451]
[-176.71492004 171.48275757]
[-172.52749634 153.91700745]
[-159.98312378 140.81021118]
[-142.45527649 135.81050110]
[-124.72031403 140.36907959]
[-111.65595245 153.32029724]
[-97.33514404 148.85774231]
[-83.01432800 144.39520264]
[-68.69351959 139.93264771]
[-54.37270355 135.47010803]
[-48.89089584 130.44880676]
[-39.71839905 131.06503296]
[-25.31062698 126.89176178]
[-10.90285587 122.71850586]
[-8.88028049 119.76435089]
[-5.29895830 117.66738892]
[-0.58914524 117.16190338]
[4.50192118 118.75661469]
[19.13538170 115.46088409]
[33.76884079 112.16515350]
[48.25772858 108.28286743]
[62.57854462 103.82032776]
[76.89935303 99.35778046]
[91.22016907 94.89523315]
[97.40852356 89.65261078]
[105.87447357 90.49015045]
[120.28224182 86.31688690]
[134.69001770 82.14363098]
[149.09779358 77.97036743]
[163.50555420 73.79710388]
[168.42111206 69.23795319]
[174.05603027 68.06639099]
[178.57797241 69.75846100]
[193.14210510 66.16873169]
[207.70622253 62.57899475]
[222.27035522 58.98925781]
[236.83448792 55.39952469]
[251.39860535 51.80978775]
[259.03411865 46.68988037]
[266.29214478 48.29755020]
[280.92559814 45.00181961]
[292.68856812 34.42147827]
[306.80484009 39.17333603]
[321.43829346 35.87760925]
[329.17535400 30.91249275]
[336.39953613 32.66599274]
[351.09640503 29.66560745]
[365.79327393 26.66522217]
[380.49011230 23.66483688]
[395.18698120 20.66445160]
[409.82043457 17.36872292]
[424.38458252 13.77898788]
[435.93206787 2.96392155]
[450.14117432 7.43055439]
[464.70529175 3.84081960]
[479.26943970 0.25108454]
[490.81692505 -10.56398106]
[505.02603149 -6.09734821]
[519.59014893 -9.68708324]
[534.15429688 -13.27681828]
[548.71838379 -16.86655235]
[563.28253174 -20.45628738]
[572.77929688 -33.38651276]
[588.81481934 -33.87949753]
[599.08795166 -21.55706406]
[595.71801758 -5.87193012]
[581.29022217 1.14361227]
[566.87225342 -5.89216089]
[552.30816650 -2.30242610]
[537.74401855 1.28730893]
[523.17987061 4.87704372]
[508.61575317 8.46677876]
[498.10998535 19.02508354]
[482.85916138 14.81521225]
[468.29504395 18.40494728]
[453.73089600 21.99468231]
[443.22512817 32.55298615]
[427.97430420 28.34311485]
[413.41018677 31.93284988]
[410.19253540 35.53255844]
[404.65859985 37.11386871]
[398.18737793 35.36130905]
[383.49050903 38.36169434]
[368.79364014 41.36207962]
[354.09677124 44.36246872]
[339.39993286 47.36285400]
[324.73400879 50.51107025]
[310.10055542 53.80679703]
[299.38430786 64.15140533]
[284.22134399 59.63528061]
[269.58789062 62.93100739]
[254.98834229 66.37391663]
[240.42422485 69.96365356]
[225.86009216 73.55338287]
[211.29595947 77.14311981]
[196.73184204 80.73285675]
[182.16770935 84.32259369]
[167.67881775 88.20487976]
[153.27105713 92.37813568]
[138.86328125 96.55139923]
[124.45550537 100.72466278]
[110.04773712 104.89792633]
[95.68271637 109.21604919]
[81.36190033 113.67858887]
[67.04109192 118.14113617]
[52.72027588 122.60368347]
[49.81428146 126.00447845]
[46.31784821 128.06111145]
[42.73807144 128.75469971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 60]
[5 59]
[6 58]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[19 47]
[20 46]
[22 44]
[23 43]
[24 42]
[25 41]
[27 39]
[28 38]
[67 152]
[68 151]
[69 150]
[70 149]
[72 148]
[73 147]
[74 146]
[75 145]
[76 144]
[79 143]
[80 142]
[81 141]
[82 140]
[83 139]
[84 138]
[86 137]
[87 136]
[89 134]
[90 133]
[92 132]
[93 131]
[94 130]
[95 129]
[96 128]
[97 125]
[98 124]
[100 122]
[101 121]
[102 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
