%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCCGCCCUGUGCUGAGGCUGCGCAGUCGGUGCCAUCUUCUACGCCCCUGGGAGCGUUGUGGCUGCUGUUUCCUUCGGCUUUCCUCCUCCUGCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[210.67550659 131.91606140]
[196.02278137 128.70706177]
[181.37005615 125.49806976]
[166.71733093 122.28907776]
[152.06460571 119.08007812]
[137.41188049 115.87108612]
[122.75916290 112.66208649]
[113.51197815 122.26509094]
[100.72441864 126.03427124]
[87.74705505 122.98201752]
[77.98017120 113.90808868]
[73.98285675 101.19000244]
[59.43590164 97.53129578]
[44.88894653 93.87258911]
[31.43474770 101.72257233]
[16.73418617 97.80490112]
[9.33334160 84.93000031]
[-5.21361208 81.27129364]
[-19.76056671 77.61258698]
[-34.30752182 73.95388031]
[-49.57811737 78.09143829]
[-60.03375626 67.48347473]
[-74.58071136 63.82476807]
[-83.84580994 64.76639557]
[-89.51583862 59.82291031]
[-103.94322205 55.71796799]
[-118.37060547 51.61302185]
[-133.02944946 58.13206863]
[-147.19888306 50.60832596]
[-150.00932312 34.81335831]
[-139.30485535 22.86371994]
[-123.29701996 23.92614746]
[-114.26566315 37.18563843]
[-99.83827209 41.29058075]
[-85.41088867 45.39552689]
[-70.92200470 49.27781296]
[-56.37504959 52.93651962]
[-42.14494705 48.53726578]
[-30.64881516 59.40692520]
[-16.10186005 63.06563187]
[-1.55490637 66.72433472]
[12.99204731 70.38304138]
[25.60331535 62.54138947]
[40.40811539 66.04460907]
[48.54765320 79.32563782]
[63.09460831 82.98434448]
[77.64156342 86.64305115]
[89.84237671 76.01811981]
[105.96286774 74.64744568]
[119.78237915 83.05994415]
[125.96815491 98.00936127]
[140.62088013 101.21836090]
[155.27360535 104.42735291]
[169.92633057 107.63635254]
[184.57905579 110.84534454]
[199.23178101 114.05434418]
[213.88450623 117.26333618]
[224.40695190 108.69016266]
[237.75524902 107.81208038]
[248.97688293 114.72776794]
[254.03964233 126.68605042]
[268.58660889 130.34475708]
[283.13354492 134.00346375]
[297.68051147 137.66217041]
[303.69552612 135.21762085]
[309.60339355 135.66470337]
[314.19692993 138.42576599]
[329.01940918 136.12489319]
[343.84188843 133.82402039]
[358.66436768 131.52314758]
[366.60421753 118.05121613]
[381.36325073 112.88352966]
[395.97268677 118.46009827]
[403.53442383 132.14784241]
[400.47799683 147.48382568]
[388.24661255 157.22686768]
[372.61550903 156.77659607]
[360.96524048 146.34562683]
[346.14276123 148.64649963]
[331.32028198 150.94737244]
[316.49780273 153.24824524]
[329.68591309 160.39482117]
[339.52432251 171.71762085]
[344.75979614 185.77427673]
[344.72543335 200.77423096]
[339.42556763 214.80676270]
[329.53536987 226.08433533]
[316.31463623 233.17037964]
[301.44747925 235.16227722]
[286.82772827 231.80628967]
[274.31765747 223.52989197]
[265.51089478 211.38737488]
[261.52920532 196.92549133]
[262.87985229 181.98641968]
[269.39074707 168.47315979]
[280.23251343 158.10705566]
[294.02178955 152.20912170]
[279.47485352 148.55041504]
[264.92788696 144.89170837]
[250.38093567 141.23300171]
[236.42385864 150.47369385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[12 47]
[13 46]
[14 45]
[17 42]
[18 41]
[19 40]
[20 39]
[22 37]
[23 36]
[25 35]
[26 34]
[27 33]
[61 100]
[62 99]
[63 98]
[64 97]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
