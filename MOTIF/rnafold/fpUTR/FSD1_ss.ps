%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCAAUGCGCGCGGUGAUGGAGCGCUAACCGGGGGCGCGGCGGCGGCGAGGGCUCGGCGGGCCAUUGGCUACCGGCCGCGGCAAAGGCAGCUUGGGGACCCAGCGUGCGCGGGGCCCGCGGGCCGGGCCGGGGUGACCUGGGCUGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[123.01293182 138.17730713]
[117.62788391 152.17735291]
[112.24284363 166.17739868]
[106.85780334 180.17744446]
[101.47276306 194.17749023]
[96.08772278 208.17753601]
[101.26287842 223.36297607]
[92.49605560 236.79884338]
[76.51242065 238.17828369]
[65.57324219 226.44313049]
[68.07012939 210.59556580]
[82.08767700 202.79249573]
[87.47271729 188.79244995]
[92.85775757 174.79240417]
[98.24279785 160.79235840]
[103.62783813 146.79231262]
[109.01287842 132.79226685]
[104.10142517 127.12413788]
[92.76518250 136.94705200]
[85.01905823 149.79219055]
[70.40896606 146.39437866]
[69.12590027 131.44935608]
[82.94226837 125.61080933]
[94.27851105 115.78789520]
[89.36705780 110.11977386]
[74.74314117 113.45758820]
[60.11922073 116.79540253]
[45.49530411 120.13321686]
[30.87138367 123.47103119]
[23.89883423 137.46809387]
[9.53986645 143.66114807]
[-5.42565584 139.12605286]
[-13.93146992 126.00411224]
[-11.96138954 110.49112701]
[-0.44562811 99.91184235]
[15.17842484 99.26147461]
[27.53356934 108.84711456]
[42.15748978 105.50930023]
[56.78140640 102.17148590]
[71.40532684 98.83367157]
[86.02924347 95.49585724]
[99.33833313 88.57717133]
[110.47183990 78.52506256]
[121.60535431 68.47294617]
[126.66323090 53.48200226]
[141.29492188 50.69583130]
[152.42843628 40.64371872]
[163.56195068 30.59160995]
[174.69546509 20.53949928]
[185.82897949 10.48739052]
[186.79147339 -5.05967855]
[198.22563171 -15.09534645]
[213.04145813 -14.08193588]
[224.17497253 -24.13404655]
[235.30848694 -34.18615723]
[246.02272034 -44.68402100]
[256.29983521 -55.61016846]
[266.57696533 -66.53631592]
[276.85409546 -77.46246338]
[287.13122559 -88.38861084]
[297.40835571 -99.31475830]
[281.77029419 -108.79337311]
[284.20184326 -125.34606171]
[278.81680298 -139.34611511]
[273.43176270 -153.34616089]
[268.04672241 -167.34620667]
[256.71716309 -179.95880127]
[265.70053101 -194.33711243]
[282.00375366 -189.68513489]
[282.04678345 -172.73124695]
[287.43182373 -158.73120117]
[292.81686401 -144.73115540]
[298.20190430 -130.73110962]
[309.22399902 -124.70606995]
[312.11544800 -111.29071045]
[324.89703369 -119.14122772]
[337.67864990 -126.99175262]
[350.46023560 -134.84226990]
[363.24185181 -142.69279480]
[376.02343750 -150.54330444]
[388.72430420 -158.52378845]
[401.34310913 -166.63340759]
[413.96191406 -174.74301147]
[426.49734497 -182.98091125]
[438.94808960 -191.34623718]
[437.64727783 -207.80090332]
[444.76531982 -222.58932495]
[458.28222656 -231.73214722]
[474.47055054 -232.82196045]
[488.92306519 -225.65661621]
[501.20059204 -234.27418518]
[513.47808838 -242.89173889]
[525.66711426 -251.63409424]
[537.76629639 -260.50030518]
[549.86547852 -269.36651611]
[554.97729492 -277.01095581]
[562.30310059 -278.28720093]
[574.58062744 -286.90478516]
[580.99993896 -301.99533081]
[597.30889893 -303.71243286]
[606.73028564 -290.28970337]
[599.57214355 -275.53527832]
[583.19818115 -274.62725830]
[570.92065430 -266.00970459]
[558.73168945 -257.26733398]
[546.63250732 -248.40112305]
[534.53332520 -239.53491211]
[530.97552490 -233.00512695]
[522.09564209 -230.61422729]
[509.81814575 -221.99665833]
[497.54061890 -213.37908936]
[499.63958740 -199.85174561]
[495.67404175 -186.68023682]
[486.36630249 -176.46221924]
[473.49804688 -171.23858643]
[459.56942749 -172.08598328]
[447.31344604 -178.89549255]
[434.86267090 -170.53016663]
[431.04153442 -164.15093994]
[422.07153320 -162.12420654]
[409.45272827 -154.01460266]
[396.83392334 -145.90498352]
[392.88342285 -139.60502625]
[383.87396240 -137.76170349]
[371.09237671 -129.91119385]
[358.31076050 -122.06066895]
[345.52917480 -114.21014404]
[332.74755859 -106.35962677]
[319.96597290 -98.50910950]
[308.33450317 -89.03762817]
[298.05737305 -78.11148071]
[287.78024292 -67.18533325]
[277.50311279 -56.25918961]
[267.22598267 -45.33304214]
[256.94885254 -34.40689468]
[256.93371582 -31.54633331]
[255.74983215 -28.52051926]
[253.32876587 -25.78775787]
[249.77388000 -23.82230568]
[245.36059570 -23.05264473]
[234.22708130 -13.00053406]
[223.09356689 -2.94842458]
[222.59312439 11.89358139]
[211.44535828 22.24645233]
[195.88108826 21.62090111]
[184.74757385 31.67301178]
[173.61405945 41.72512054]
[162.48054504 51.77723312]
[151.34703064 61.82934189]
[147.08549500 76.10129547]
[131.65747070 79.60646057]
[120.52394867 89.65856934]
[109.39044189 99.71067810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[42 153]
[43 152]
[44 151]
[46 149]
[47 148]
[48 147]
[49 146]
[50 145]
[53 142]
[54 141]
[55 140]
[56 135]
[57 134]
[58 133]
[59 132]
[60 131]
[61 130]
[63 73]
[64 72]
[65 71]
[66 70]
[75 129]
[76 128]
[77 127]
[78 126]
[79 125]
[80 124]
[81 122]
[82 121]
[83 120]
[84 118]
[85 117]
[90 111]
[91 110]
[92 109]
[93 107]
[94 106]
[95 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
