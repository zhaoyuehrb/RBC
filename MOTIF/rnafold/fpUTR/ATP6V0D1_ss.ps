%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGACAGCCCGCUGAGGACGCAGCGUCAGCUGACCUGGGGAGUCGCGAUUCGUGCCGGCCGGUCCUGGUUCUCCGGUCCCGCCGCUCCCGCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[0.83202517 233.45628357]
[-6.24050808 235.00927734]
[-13.46539211 234.91691589]
[-20.46570778 233.19107056]
[-26.87785530 229.92868042]
[-32.37043762 225.30624390]
[-36.66138077 219.57038879]
[-51.01124573 223.93861389]
[-65.36111450 228.30682373]
[-79.71097565 232.67504883]
[-92.58609009 248.03135681]
[-111.22417450 243.29481506]
[-125.27471161 248.54672241]
[-139.32524109 253.79861450]
[-153.37577820 259.05050659]
[-167.42631531 264.30239868]
[-173.75260925 278.78527832]
[-188.49719238 284.47497559]
[-202.91236877 277.99591064]
[-208.44587708 263.19201660]
[-201.81477356 248.84613037]
[-186.95317078 243.46946716]
[-172.67820740 250.25187683]
[-158.62768555 244.99996948]
[-144.57714844 239.74807739]
[-130.52661133 234.49618530]
[-116.47606659 229.24427795]
[-112.99075317 219.40919495]
[-104.43148041 213.06152344]
[-93.56500244 212.56103516]
[-84.07920074 218.32518005]
[-69.72933197 213.95695496]
[-55.37946701 209.58874512]
[-41.02960205 205.22052002]
[-33.29391861 182.43118286]
[-11.51464939 171.67156982]
[11.71305084 179.51968384]
[24.03738594 170.96919250]
[36.36172104 162.41871643]
[48.55158997 153.67759705]
[60.60404205 144.74795532]
[72.65650177 135.81832886]
[84.70895386 126.88869476]
[96.76140594 117.95906067]
[83.62546539 102.61984253]
[92.90464020 86.87872314]
[93.37113190 71.88597870]
[93.83763123 56.89323425]
[94.30413055 41.90048981]
[88.75331116 25.88097954]
[102.61015320 16.11244583]
[115.83288574 26.72355843]
[109.29687500 42.36698914]
[108.83037567 57.35973358]
[108.36387634 72.35247803]
[107.89738464 87.34522247]
[116.08470917 95.96627045]
[115.82348633 109.09031677]
[130.41716003 105.62267303]
[145.01083374 102.15502167]
[159.60452271 98.68737793]
[171.24218750 87.96939850]
[185.41337585 92.55486298]
[200.00706482 89.08721924]
[211.64472961 78.36923218]
[225.81593323 82.95470428]
[240.40960693 79.48705292]
[248.19754028 74.37426758]
[255.51098633 76.14600372]
[270.20544434 73.13389587]
[282.10589600 61.85066986]
[297.74859619 66.77391815]
[301.04165649 82.83902740]
[288.59747314 93.51959229]
[273.21755981 87.82836151]
[258.52310181 90.84046936]
[243.87724304 94.08073425]
[229.28356934 97.54837799]
[218.68974304 108.01833344]
[203.47470093 103.68089294]
[188.88102722 107.14854431]
[178.28720093 117.61849976]
[163.07215881 113.28105927]
[148.47848511 116.74870300]
[133.88481140 120.21634674]
[119.29113007 123.68399048]
[105.69104004 130.01152039]
[93.63858795 138.94114685]
[81.58612823 147.87078857]
[69.53367615 156.80041504]
[57.48122406 165.73005676]
[52.33290100 173.49455261]
[44.91220474 174.74304199]
[32.58787155 183.29353333]
[20.26353455 191.84400940]
[22.06686592 198.96926880]
[22.20585823 206.30230713]
[20.68031883 213.46034241]
[17.57675552 220.07135010]
[13.06351089 225.79333496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[8 33]
[9 32]
[10 31]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[37 95]
[38 94]
[39 93]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[46 56]
[47 55]
[48 54]
[49 53]
[58 86]
[59 85]
[60 84]
[61 83]
[63 81]
[64 80]
[66 78]
[67 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
