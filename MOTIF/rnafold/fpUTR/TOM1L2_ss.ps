%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGACGCGGCAAGGGGGCGGGGCCAAAGGCCCUAAGCUCGGCGUUCCAGAGAGUGGGGAGGGGGCAAGUGUCAGUCAGGACGGGAGUCCGGCGGGUUACAGCGGAGGCCUAGGUGGCAGACAGGGGGCCCGGGCCGCUGCGUGUUGUCCACCCAAG\
) } def
/len { sequence length } bind def

/coor [
[128.99600220 264.96789551]
[141.43508911 256.18215942]
[138.47216797 241.47769165]
[128.37333679 230.52951050]
[133.23226929 215.47291565]
[130.26936340 200.76844788]
[127.30644989 186.06399536]
[124.34354401 171.35952759]
[121.38063049 156.65507507]
[118.41771698 141.95060730]
[115.45481110 127.24614716]
[108.72551727 123.93456268]
[102.10211182 137.39303589]
[88.64374542 130.76940918]
[95.26693726 117.31137848]
[88.53764343 113.99978638]
[75.07906342 120.62297058]
[61.62047958 127.24614716]
[48.16189575 133.86933899]
[34.83765411 140.75878906]
[21.65302849 147.91180420]
[8.46840000 155.06481934]
[-4.71622801 162.21783447]
[-17.90085602 169.37084961]
[-31.08548355 176.52384949]
[-42.12438583 189.39160156]
[-57.54513168 182.34625244]
[-55.04400253 165.57781982]
[-38.23849487 163.33923340]
[-25.05386734 156.18621826]
[-11.86924076 149.03320312]
[1.31538749 141.88018799]
[14.50001526 134.72717285]
[27.68464279 127.57416534]
[29.88785744 123.28087616]
[34.83912277 120.35353851]
[41.53871155 120.41075134]
[54.99729538 113.78756714]
[68.45587921 107.16438293]
[81.91445923 100.54120636]
[82.06357574 93.04268646]
[67.06654358 92.74445343]
[52.06951141 92.44596863]
[52.36824417 77.44894409]
[67.36477661 77.74742126]
[82.36180878 78.04564667]
[82.51092529 70.54713440]
[69.32630157 63.39411926]
[56.14167023 56.24110794]
[40.41385269 59.40579605]
[28.22667503 48.97256851]
[28.92910194 32.94489670]
[41.98228836 23.61784744]
[57.37294769 28.14632988]
[63.29468536 43.05648041]
[76.47930908 50.20949173]
[89.66394043 57.36250687]
[104.42440033 54.69253540]
[114.26779175 43.37406921]
[110.93401337 28.33438301]
[117.02413940 14.37860203]
[130.01054382 6.77484989]
[144.80708313 8.25829887]
[154.65046692 -3.06016994]
[164.49385071 -14.37863922]
[174.33723450 -25.69710922]
[170.30744934 -42.09758759]
[176.76431274 -57.52319717]
[190.99044800 -65.99306488]
[207.29873657 -64.35092163]
[216.91514587 -75.86286163]
[226.53153992 -87.37480164]
[236.14794922 -98.88674164]
[239.05706787 -114.43819427]
[253.15452576 -119.24556732]
[262.77093506 -130.75750732]
[272.38732910 -142.26945496]
[282.00375366 -153.78138733]
[277.64984131 -166.89190674]
[280.33529663 -180.33238220]
[289.25070190 -190.59947205]
[301.97720337 -195.07127380]
[315.14199829 -192.67642212]
[324.98538208 -203.99488831]
[334.82876587 -215.31336975]
[333.91397095 -230.86331177]
[344.05780029 -242.20162964]
[358.88793945 -242.97792053]
[368.73132324 -254.29638672]
[378.57470703 -265.61486816]
[381.87026978 -274.19396973]
[388.72808838 -277.05801392]
[398.79455566 -288.17852783]
[395.47695923 -303.33679199]
[401.73358154 -317.53659058]
[415.15863037 -325.31781006]
[430.58993530 -323.68838501]
[442.09381104 -313.27490234]
[445.24676514 -298.08154297]
[438.83645630 -283.95046997]
[425.32778931 -276.31533813]
[409.91506958 -278.11206055]
[399.84860229 -266.99151611]
[389.89318848 -255.77146912]
[380.04980469 -244.45300293]
[370.20642090 -233.13453674]
[371.49508667 -218.34011841]
[361.67373657 -206.72135925]
[346.14724731 -205.46997070]
[336.30386353 -194.15150452]
[326.46047974 -182.83303833]
[330.66506958 -166.99073792]
[324.55554199 -151.60261536]
[310.34741211 -142.78385925]
[293.51568604 -144.16497803]
[283.89926147 -132.65304565]
[274.28286743 -121.14110565]
[264.66647339 -109.62916565]
[262.44519043 -94.90112305]
[247.65989685 -89.27033997]
[238.04348755 -77.75839996]
[228.42707825 -66.24645996]
[218.81068420 -54.73451996]
[223.26057434 -42.11525726]
[220.86106873 -28.84110260]
[212.13578796 -18.41196060]
[199.29035950 -13.63145828]
[185.65571594 -15.85372257]
[175.81233215 -4.53525305]
[165.96893311 6.78321600]
[156.12554932 18.10168457]
[159.64746094 32.54932022]
[153.91891479 46.46506119]
[140.94300842 54.43244934]
[125.58625793 53.21745300]
[115.74287415 64.53591919]
[130.15927124 124.28324127]
[133.12217712 138.98770142]
[136.08509827 153.69215393]
[139.04800415 168.39662170]
[142.01091003 183.10107422]
[144.97383118 197.80554199]
[147.93673706 212.51000977]
[158.24749756 224.50994873]
[153.17663574 238.51478577]
[156.13954163 253.21925354]
[171.01040649 256.50210571]
[183.25651550 265.55490112]
[190.75611877 278.80917358]
[192.20989990 293.96853638]
[187.36596680 308.40655518]
[177.06356812 319.62173462]
[163.08764648 325.67098999]
[147.85961914 325.50625610]
[134.01783752 319.15606689]
[123.96047211 307.72061157]
[119.43001556 293.18118286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 146]
[3 145]
[5 143]
[6 142]
[7 141]
[8 140]
[9 139]
[10 138]
[11 137]
[16 40]
[17 39]
[18 38]
[19 37]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[47 57]
[48 56]
[49 55]
[58 136]
[59 135]
[63 131]
[64 130]
[65 129]
[66 128]
[70 123]
[71 122]
[72 121]
[73 120]
[75 118]
[76 117]
[77 116]
[78 115]
[83 111]
[84 110]
[85 109]
[88 106]
[89 105]
[90 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
