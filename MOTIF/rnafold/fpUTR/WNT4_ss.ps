%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGCGCGCCCCGGCCCGCCCGCGGGCGCCCACCUGCAGCCCCGACGGGAGGCCCCCCGCGGCCGCAGCCGCUGCCCCGGGCCGGGCGCCCGCGGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[120.82499695 387.58267212]
[118.14663696 372.82373047]
[115.46828461 358.06478882]
[112.78993225 343.30584717]
[110.11157990 328.54690552]
[107.43322754 313.78796387]
[97.54772949 302.64675903]
[102.69657135 287.68682861]
[100.01821899 272.92788696]
[97.33985901 258.16894531]
[94.66150665 243.40998840]
[91.98315430 228.65104675]
[89.30480194 213.89210510]
[84.94227600 207.77284241]
[86.77401733 198.65202332]
[84.53838348 183.81956482]
[82.30274963 168.98709106]
[80.06711578 154.15463257]
[77.83148193 139.32217407]
[75.59584808 124.48970795]
[67.52058411 111.84889984]
[55.00198746 103.58544159]
[42.48338699 95.32198334]
[29.96478844 87.05853271]
[17.32397461 78.98327637]
[4.56377316 71.09801483]
[-8.19642735 63.21276093]
[-20.95662880 55.32750320]
[-30.06339264 53.42712402]
[-33.97564316 47.01064301]
[-46.49423981 38.74718857]
[-60.56297302 45.07761765]
[-75.81743622 42.77438354]
[-87.38998413 32.57244492]
[-91.58786774 17.72719765]
[-87.07154846 2.97570992]
[-75.28217316 -6.97487450]
[-59.98168564 -8.94935989]
[-46.05241394 -2.31769419]
[-37.93914413 10.80398178]
[-38.23078537 26.22858810]
[-25.71218681 34.49204254]
[-13.07137203 42.56730270]
[-0.31117117 50.45256042]
[12.44902992 58.33781433]
[25.20923042 66.22306824]
[32.67582703 67.07566833]
[38.22824478 74.53993225]
[50.74684143 82.80339050]
[63.26544189 91.06684113]
[75.78404236 99.33029938]
[81.06126404 81.04191589]
[99.21807098 70.64141846]
[105.31912231 56.93824005]
[111.42017365 43.23505783]
[117.52121735 29.53187561]
[111.62419891 14.86897469]
[117.89937592 0.36388230]
[132.62379456 -5.37778759]
[147.06173706 1.05039597]
[152.64741516 15.83470535]
[146.06694031 30.20387268]
[131.22439575 35.63292313]
[125.12335205 49.33610535]
[119.02230072 63.03928757]
[112.92125702 76.74246979]
[123.44821930 87.42810822]
[137.24113464 81.53273773]
[151.03405762 75.63735962]
[164.82696533 69.74198151]
[177.01513672 57.95703125]
[191.71354675 66.40647125]
[187.66323853 82.86950684]
[170.72235107 83.53490448]
[156.92942810 89.43027496]
[143.13652039 95.32565308]
[129.34359741 101.22103119]
[121.38595581 117.53301239]
[106.13931274 125.20282745]
[90.42830658 122.25407410]
[92.66394043 137.08653259]
[94.89957428 151.91900635]
[97.13520813 166.75146484]
[99.37084198 181.58392334]
[101.60647583 196.41638184]
[104.06374359 211.21374512]
[106.74209595 225.97268677]
[109.42045593 240.73162842]
[112.09880829 255.49058533]
[114.77716064 270.24951172]
[117.45551300 285.00845337]
[127.53258514 297.20532227]
[122.19216919 311.10958862]
[124.87052155 325.86856079]
[127.54887390 340.62750244]
[130.22723389 355.38644409]
[132.90557861 370.14538574]
[135.58393860 384.90432739]
[149.25407410 392.49783325]
[154.79669189 407.12017822]
[149.59472656 421.86718750]
[136.10440063 429.77569580]
[120.69541931 427.11163330]
[110.64344025 415.13281250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[15 85]
[16 84]
[17 83]
[18 82]
[19 81]
[20 80]
[21 51]
[22 50]
[23 49]
[24 48]
[25 46]
[26 45]
[27 44]
[28 43]
[30 42]
[31 41]
[53 66]
[54 65]
[55 64]
[56 63]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
