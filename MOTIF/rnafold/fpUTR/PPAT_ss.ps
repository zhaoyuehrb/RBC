%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGACAGCGCGCGCCGCCGCAGUAGCUGGGGCCACCCUCGGGAAGGAAGAGCCUGUCGCGAGCGCGAGCUUCUGAGCUCGACGGGCCGAGCUGGCAGCUGGUUGGUGCUUACACCUUGGCCGCAGCGGCAGGUCCUUCCACGUGCUUUCGGCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[92.35674286 358.25411987]
[85.44715118 371.76788330]
[74.11980438 381.87014771]
[59.90663910 387.19467163]
[44.72986603 387.02133179]
[30.64202309 381.37356567]
[19.54837227 371.01522827]
[12.94923878 357.34716797]
[11.73710155 342.21789551]
[16.07589149 327.67349243]
[25.37882423 315.68099976]
[38.38775635 307.86230469]
[53.34333038 305.27478027]
[56.26968765 290.56301880]
[59.19604111 275.85122681]
[62.12239456 261.13943481]
[65.04875183 246.42767334]
[67.97510529 231.71589661]
[70.90145874 217.00410461]
[73.82781219 202.29232788]
[67.28519440 186.03237915]
[79.47663116 172.26405334]
[82.11357117 157.49765015]
[84.75051880 142.73124695]
[87.38745880 127.96485138]
[78.73780823 122.11399078]
[72.55187225 113.70070648]
[57.90038300 116.91534424]
[43.24889755 120.12998199]
[28.59740829 123.34461975]
[13.94591904 126.55925751]
[-0.70556885 129.77389526]
[-12.44915390 141.22030640]
[-28.15830231 136.51342773]
[-31.67279053 120.49530029]
[-19.37721252 109.64399719]
[-3.92020607 115.12240601]
[10.73128223 111.90776825]
[25.38277054 108.69313049]
[40.03425980 105.47849274]
[54.68574524 102.26385498]
[69.33723450 99.04921722]
[72.81517029 85.78402710]
[81.72543335 75.35959625]
[94.28749847 69.85905457]
[107.99108887 70.38156891]
[115.32041168 57.29412842]
[122.64972687 44.20668793]
[129.97904968 31.11924553]
[137.30836487 18.03180695]
[137.30065918 2.21060181]
[150.27023315 -5.11328316]
[157.59956360 -18.20072365]
[164.92887878 -31.28816223]
[172.25819397 -44.37560272]
[179.58750916 -57.46304321]
[186.91683960 -70.55048370]
[194.24615479 -83.63792419]
[201.57546997 -96.72536469]
[208.90478516 -109.81280518]
[206.16087341 -122.45040131]
[212.57624817 -133.21409607]
[224.22642517 -136.58853149]
[231.81127930 -149.52954102]
[215.38269043 -154.14022827]
[202.80458069 -171.15864563]
[199.01719666 -185.67263794]
[195.22982788 -200.18661499]
[191.44245911 -214.70060730]
[187.65507507 -229.21459961]
[183.86770630 -243.72857666]
[171.96907043 -255.01373291]
[176.05557251 -270.89556885]
[191.92338562 -275.03619385]
[203.24903870 -263.17611694]
[198.38169861 -247.51594543]
[202.16906738 -233.00196838]
[205.95643616 -218.48797607]
[209.74382019 -203.97399902]
[213.53118896 -189.46000671]
[217.31855774 -174.94601440]
[224.40460205 -172.48880005]
[235.74649048 -182.30519104]
[238.57669067 -167.57434082]
[245.66273499 -165.11711121]
[257.62255859 -174.17045593]
[269.58236694 -183.22380066]
[281.54217529 -192.27713013]
[293.50198364 -201.33047485]
[305.46179199 -210.38380432]
[317.42160034 -219.43714905]
[323.75488281 -233.93544006]
[338.57247925 -235.44795227]
[350.53228760 -244.50128174]
[352.83349609 -259.90719604]
[365.09140015 -268.91821289]
[379.76440430 -266.62942505]
[391.72421265 -275.68276978]
[403.68402100 -284.73611450]
[403.24475098 -300.24694824]
[412.03417969 -313.03466797]
[426.67260742 -318.18209839]
[441.53125000 -313.70996094]
[450.89666748 -301.33786011]
[451.16766357 -285.82315063]
[442.24005127 -273.13156128]
[427.54663086 -268.14321899]
[412.73736572 -272.77627563]
[400.77755737 -263.72296143]
[388.81774902 -254.66961670]
[387.03775024 -239.92623901]
[375.03778076 -230.57449341]
[359.58563232 -232.54147339]
[347.62582397 -223.48814392]
[342.14801025 -209.63740540]
[326.47494507 -207.47734070]
[314.51513672 -198.42399597]
[302.55532837 -189.37066650]
[290.59552002 -180.31732178]
[278.63571167 -171.26397705]
[266.67590332 -162.21064758]
[254.71607971 -153.15730286]
[244.75228882 -141.94468689]
[237.16743469 -129.00366211]
[238.02169800 -111.49761200]
[221.99223328 -102.48348236]
[214.66290283 -89.39604187]
[207.33358765 -76.30860138]
[200.00427246 -63.22116470]
[192.67495728 -50.13372421]
[185.34564209 -37.04628372]
[178.01631165 -23.95884514]
[170.68699646 -10.87140465]
[163.35768127 2.21603560]
[163.88963318 17.10113907]
[150.39581299 25.36112404]
[143.06648254 38.44856644]
[135.73716736 51.53600693]
[128.40785217 64.62344360]
[121.07852936 77.71088409]
[129.83540344 92.86152649]
[128.88421631 110.33493805]
[118.53448486 124.44549561]
[102.15386200 130.60179138]
[99.51691437 145.36819458]
[96.87997437 160.13459778]
[94.24302673 174.90098572]
[100.97595215 185.94207764]
[98.44117737 198.21354675]
[88.53959656 205.21868896]
[85.61323547 219.93046570]
[82.68688202 234.64224243]
[79.76052856 249.35401917]
[76.83417511 264.06579590]
[73.90782166 278.77758789]
[70.98146820 293.48934937]
[68.05510712 308.20114136]
[80.88206482 316.31494141]
[89.90866089 328.51678467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 157]
[14 156]
[15 155]
[16 154]
[17 153]
[18 152]
[19 151]
[20 150]
[22 147]
[23 146]
[24 145]
[25 144]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[46 140]
[47 139]
[48 138]
[49 137]
[50 136]
[52 134]
[53 133]
[54 132]
[55 131]
[56 130]
[57 129]
[58 128]
[59 127]
[60 126]
[63 124]
[64 123]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[90 117]
[91 116]
[93 114]
[94 113]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
