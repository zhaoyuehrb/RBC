%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCAUUUCAACUGCCUAUUCAGAGCAUGCAGUAAGAGGAAAUCCACCAAGUCUCAAUAUAAUAAUAUUCUUUAUUCCUGGACAGCUCGGUUAAUGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[90.88953400 294.94403076]
[75.67002106 297.46792603]
[61.51110077 291.34188843]
[52.93082809 278.52069092]
[52.66713715 263.09558105]
[60.80417633 249.98864746]
[74.74543762 243.38223267]
[76.57096100 228.49372864]
[78.39647675 213.60522461]
[80.22199249 198.71672058]
[82.04750824 183.82821655]
[71.04479218 173.82431030]
[68.00663757 159.08546448]
[74.30342865 145.22171021]
[87.71121216 137.63636780]
[89.53672791 122.74785614]
[91.36225128 107.85935974]
[78.31311798 115.25667572]
[63.78302002 111.53160858]
[55.90238571 98.76855469]
[59.08089828 84.10918427]
[71.53999329 75.75628662]
[86.30807495 78.38378906]
[95.12140656 90.52093506]
[99.62593079 76.21327209]
[104.13045502 61.90560913]
[108.63497925 47.59794617]
[98.40615845 34.22990417]
[98.10044098 17.56530380]
[107.64118195 4.10053205]
[123.15139008 -1.03146255]
[127.21749115 -15.46984196]
[131.28359985 -29.90822220]
[120.65185547 -42.95810699]
[119.83806610 -59.60563278]
[128.96374512 -73.35509491]
[144.31024170 -78.95771027]
[147.93414307 -93.51337433]
[151.55802917 -108.06903839]
[155.18193054 -122.62470245]
[158.80581665 -137.18037415]
[162.42971802 -151.73603821]
[148.98452759 -158.53120422]
[137.38882446 -168.14825439]
[128.22425842 -180.10478210]
[121.95053101 -193.80105591]
[118.88231659 -208.55007935]
[119.17350769 -223.61206055]
[122.80951691 -238.23146057]
[129.60794067 -251.67501831]
[139.22779846 -263.26837158]
[151.18655396 -272.43005371]
[164.88435364 -278.70046997]
[179.63412476 -281.76510620]
[194.69601440 -281.47024536]
[209.31454468 -277.83071899]
[222.75645447 -271.02902222]
[234.34748840 -261.40637207]
[243.50625610 -249.44538879]
[249.77334595 -235.74607849]
[252.83441162 -220.99555969]
[252.53591919 -205.93373108]
[248.89283752 -191.31608582]
[242.08789062 -177.87583923]
[232.46241760 -166.28712463]
[220.49922180 -157.13127136]
[206.79838562 -150.86749268]
[192.04713440 -147.80999756]
[176.98538208 -148.11213684]
[173.36148071 -133.55647278]
[169.73759460 -119.00080872]
[166.11369324 -104.44514465]
[162.48980713 -89.88948059]
[158.86590576 -75.33380890]
[168.41574097 -65.87020874]
[172.02949524 -52.80737686]
[168.64746094 -39.57030487]
[159.05911255 -29.68563461]
[145.72196960 -25.84211922]
[141.65586853 -11.40373993]
[137.58976746 3.03463984]
[146.84657288 12.78507233]
[150.06027222 25.95203781]
[146.27612305 39.07981110]
[136.39079285 48.66747665]
[122.94264984 52.10247421]
[118.43811798 66.41013336]
[113.93359375 80.71780396]
[109.42906952 95.02546692]
[106.25074768 109.68487549]
[104.42523193 124.57337952]
[102.59971619 139.46188354]
[113.77776337 150.06175232]
[116.53864288 165.03610229]
[110.02967834 178.60435486]
[96.93601227 185.65374756]
[95.11049652 200.54223633]
[93.28498077 215.43074036]
[91.45945740 230.31924438]
[89.63394165 245.20774841]
[101.56616974 254.98657227]
[106.29562378 269.67111206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[15 92]
[16 91]
[17 90]
[24 89]
[25 88]
[26 87]
[27 86]
[31 81]
[32 80]
[33 79]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
