%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGCCGCAGCGACUCAUCCUAUCGAUAAGGUUCAGUUAGCCAAGGUGGAGGAUGGGAAAAGA\
) } def
/len { sequence length } bind def

/coor [
[53.08901978 249.00431824]
[46.78553772 250.71301270]
[40.27765656 250.78959656]
[33.97966766 249.24050903]
[28.28967667 246.17535400]
[16.49888039 255.44773865]
[4.70808363 264.72012329]
[-0.88121927 280.13735962]
[-17.07272911 282.73870850]
[-27.21001053 269.84811401]
[-20.86469460 254.72631836]
[-4.56430101 252.92932129]
[7.22649527 243.65693665]
[19.01729202 234.38455200]
[22.44667244 208.89396667]
[46.67758560 198.78282166]
[52.90880966 185.13835144]
[59.14003372 171.49386597]
[65.37126160 157.84938049]
[71.60248566 144.20491028]
[77.83370972 130.56042480]
[84.06493378 116.91594696]
[90.29615784 103.27146149]
[90.55469513 94.90046692]
[97.16227722 89.13696289]
[104.03567505 75.80443573]
[110.90907288 62.47190094]
[102.72635651 49.54942703]
[102.11454010 34.36645889]
[109.13787079 21.00460625]
[121.82151794 13.00578022]
[136.70567322 12.43348217]
[143.57907104 -0.89904976]
[150.45246887 -14.23158169]
[157.32586670 -27.56411362]
[153.83023071 -43.22170258]
[164.00415039 -55.62617493]
[180.04306030 -55.26187897]
[189.64329529 -42.40827560]
[185.44035339 -26.92554474]
[170.65840149 -20.69071579]
[163.78500366 -7.35818386]
[156.91160583 5.97434807]
[150.03820801 19.30687904]
[158.20567322 31.76312065]
[159.04725647 46.73468399]
[152.23695374 60.20635986]
[139.51438904 68.51497650]
[124.24160004 69.34529877]
[117.36820221 82.67783356]
[110.49480438 96.01036072]
[103.94064331 109.50269318]
[97.70941162 123.14717102]
[91.47818756 136.79165649]
[85.24696350 150.43612671]
[79.01573944 164.08061218]
[72.78451538 177.72509766]
[66.55329132 191.36956787]
[60.32206345 205.01405334]
[64.73499298 210.07147217]
[67.73174286 216.05206299]
[69.13171387 222.57019043]
[68.85690308 229.20863342]
[66.93610382 235.54542542]
[63.50240326 241.18055725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[25 51]
[26 50]
[27 49]
[32 44]
[33 43]
[34 42]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
