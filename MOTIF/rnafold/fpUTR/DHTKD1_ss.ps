%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGUUGUCUGGGGGCGGGGCUCCGGCCGCCUCUGACGAGUCCCGGAUUUACCAGGGCCGGUGGGAUCCCCUCGGGCUCCCGCCUUAGCAUGCUGGCCGGGACAUCUGGUGAAC\
) } def
/len { sequence length } bind def

/coor [
[91.60401154 122.34813690]
[80.10724640 113.19886017]
[65.63572693 117.14540100]
[51.16420746 121.09193420]
[36.69268799 125.03847504]
[22.22117043 128.98501587]
[14.65004635 134.32682800]
[7.31176329 132.83850098]
[-7.25968504 136.39839172]
[-21.83113289 139.95829773]
[-36.40258026 143.51820374]
[-50.97402954 147.07809448]
[-58.68467331 152.21647644]
[-65.98073578 150.53332520]
[-80.64178467 153.70405579]
[-95.30284119 156.87480164]
[-109.96389008 160.04553223]
[-124.62493896 163.21627808]
[-139.28599548 166.38700867]
[-153.94703674 169.55775452]
[-168.60809326 172.72850037]
[-174.74563599 186.98016357]
[-188.10510254 194.87347412]
[-203.54948425 193.37329102]
[-215.14012146 183.05647278]
[-218.42016602 167.89002991]
[-212.12837219 153.70578003]
[-198.68406677 145.95785522]
[-183.25686646 147.62548828]
[-171.77883911 158.06744385]
[-157.11778259 154.89669800]
[-142.45672607 151.72596741]
[-127.79567719 148.55522156]
[-113.13462830 145.38449097]
[-98.47357941 142.21374512]
[-83.81252289 139.04299927]
[-69.15147400 135.87226868]
[-54.53393173 132.50665283]
[-39.96248245 128.94674683]
[-25.39103317 125.38684845]
[-10.81958580 121.82695007]
[3.75186276 118.26704407]
[18.27463341 114.51349640]
[32.74615097 110.56695557]
[47.21767044 106.62041473]
[61.68918610 102.67388153]
[76.16070557 98.72734070]
[81.42102051 85.00822449]
[93.71888733 76.96786499]
[108.39598846 77.65186310]
[119.89275360 86.80113983]
[134.36427307 82.85459900]
[148.83580017 78.90806580]
[163.30731201 74.96152496]
[177.77882385 71.01498413]
[192.25035095 67.06845093]
[206.72186279 63.12191010]
[221.19338989 59.17537308]
[235.23489380 53.89940643]
[248.72457886 47.33979797]
[262.21426392 40.78018951]
[275.70394897 34.22057724]
[288.20364380 25.92857742]
[299.49221802 16.05090714]
[310.78079224 6.17323637]
[322.06933594 -3.70443416]
[333.35791016 -13.58210468]
[344.64645386 -23.45977592]
[355.93502808 -33.33744812]
[361.22552490 -48.24788284]
[375.89880371 -50.80606842]
[387.18737793 -60.68374252]
[398.47592163 -70.56140900]
[406.41439819 -85.54196167]
[423.00711060 -82.06074524]
[424.25524902 -65.15280151]
[408.35360718 -59.27285004]
[397.06503296 -49.39517975]
[385.77648926 -39.51750946]
[381.29339600 -25.31358910]
[365.81268311 -22.04888535]
[354.52413940 -12.17121410]
[343.23556519 -2.29354334]
[331.94702148 7.58412743]
[320.65844727 17.46179771]
[309.36987305 27.33946800]
[298.08132935 37.21714020]
[313.08123779 37.16233444]
[326.18521118 44.46202087]
[334.03384399 57.24478531]
[334.61495972 72.23352814]
[327.77957153 85.58559418]
[315.28009033 93.87792969]
[300.32098389 94.98464203]
[286.73727417 88.62199402]
[278.01144409 76.42118073]
[276.38049316 61.51011276]
[282.26354980 47.71026230]
[268.77386475 54.26987076]
[255.28419495 60.82947922]
[241.79450989 67.38909149]
[255.66340637 73.10343933]
[262.81173706 86.29061127]
[260.03036499 101.03049469]
[248.56797791 110.70590973]
[233.57037354 110.97327423]
[221.77040100 101.71257019]
[218.46543884 87.08119202]
[225.13992310 73.64688873]
[210.66839600 77.59342957]
[196.19688416 81.53996277]
[181.72537231 85.48650360]
[167.25384521 89.43304443]
[152.78233337 93.37958527]
[138.31080627 97.32611847]
[123.83929443 101.27265930]
[118.57897949 114.99177551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[51 116]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[59 101]
[60 100]
[61 99]
[62 98]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
