%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGCGCCUGACAUGCCUGAUCCUCUCUUUUCUGCAGUUCAAGGGAAAGACGAGAUCUUGCACAAGGCACUCUGCUUCUGCCCUUGGCUGGGGAAGGGUGGC\
) } def
/len { sequence length } bind def

/coor [
[206.10600281 230.12203979]
[207.14254761 219.08706665]
[196.93995667 208.09129333]
[186.73736572 197.09550476]
[176.53477478 186.09973145]
[166.33218384 175.10395813]
[147.54464722 170.96301270]
[142.95614624 151.44667053]
[132.11422729 141.08073425]
[121.27230072 130.71479797]
[110.43038177 120.34885406]
[99.24656677 122.85390472]
[88.25202179 119.61769104]
[80.20876312 111.45319366]
[77.13738251 100.41146851]
[79.80945587 89.26638031]
[69.60686493 78.27059937]
[59.40427399 67.27482605]
[43.84555435 66.52384186]
[33.65531540 55.22722244]
[34.46714401 40.39898682]
[24.26455116 29.40320969]
[14.06196022 18.40743065]
[3.85936928 7.41165304]
[-4.41364241 3.15702534]
[-6.47788382 -4.06902933]
[-16.34696388 -15.36510181]
[-26.38392448 -26.51227379]
[-36.58651352 -37.50805283]
[-46.78910446 -48.50382996]
[-56.99169540 -59.49960709]
[-67.19429016 -70.49538422]
[-77.39688110 -81.49116516]
[-87.59947205 -92.48693848]
[-97.80206299 -103.48271942]
[-112.97051239 -100.66819000]
[-127.24402618 -106.52229309]
[-136.06796265 -119.17700195]
[-136.62664795 -134.59423828]
[-128.74180603 -147.85443115]
[-114.92945099 -154.72630310]
[-99.59706116 -153.01704407]
[-87.63715363 -143.27209473]
[-82.86608124 -128.60101318]
[-86.80628204 -113.68531036]
[-76.60369110 -102.68953705]
[-66.40110016 -91.69375610]
[-56.19850922 -80.69797516]
[-45.99591827 -69.70220184]
[-35.79332733 -58.70642090]
[-25.59073639 -47.71064377]
[-15.38814545 -36.71486664]
[-8.41744804 -33.90660477]
[-5.05089283 -25.23418236]
[4.81818819 -13.93811035]
[14.85514736 -2.79093790]
[25.05773926 8.20483971]
[35.26033020 19.20061874]
[45.46292114 30.19639587]
[60.31035995 30.49495316]
[70.81387329 41.50089645]
[70.40005493 57.07223129]
[80.60264587 68.06800842]
[90.80523682 79.06378937]
[108.70716095 78.85634613]
[121.27153778 91.61010742]
[120.79631805 109.50692749]
[131.63824463 119.87287140]
[142.48016357 130.23881531]
[153.32208252 140.60475159]
[164.37133789 139.73338318]
[173.83673096 145.06135559]
[178.62422180 154.56370544]
[177.32797241 164.90136719]
[187.53056335 175.89714050]
[197.73315430 186.89291382]
[207.93574524 197.88870239]
[218.13833618 208.88447571]
[237.58384705 213.76441956]
[241.44326782 232.61180115]
[252.28520203 242.97773743]
[263.12710571 253.34367371]
[273.96905518 263.70962524]
[284.81097412 274.07556152]
[295.65289307 284.44149780]
[306.49481201 294.80743408]
[317.33673096 305.17337036]
[332.57983398 302.27029419]
[346.60375977 308.91177368]
[354.01602173 322.54400635]
[351.96649170 337.92510986]
[341.24322510 349.14077759]
[325.96954346 351.87832642]
[312.01846313 345.08511353]
[304.75451660 331.37329102]
[306.97079468 316.01528931]
[296.12887573 305.64935303]
[285.28695679 295.28341675]
[274.44503784 284.91748047]
[263.60308838 274.55154419]
[252.76118469 264.18560791]
[241.91925049 253.81965637]
[231.07733154 243.45372009]
[220.72145081 244.59518433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[8 70]
[9 69]
[10 68]
[11 67]
[16 64]
[17 63]
[18 62]
[21 59]
[22 58]
[23 57]
[24 56]
[26 55]
[27 54]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[80 103]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
