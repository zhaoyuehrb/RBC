%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCCAUCUUGUUAAAAGAGCCCGCCUCUCCCUCGGCCGGUCACUCUUUCGCCACGGGCGGGGUUGCACCAUCCGGCAGGGCGGGGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[67.55329132 229.54098511]
[68.39714050 244.51722717]
[61.21460724 257.68579102]
[48.16653061 265.08496094]
[33.17838287 264.48870850]
[20.75931740 256.07638550]
[14.64557266 242.37887573]
[16.67635155 227.51721191]
[4.68853188 236.53343201]
[-7.29928827 245.54965210]
[-19.28710747 254.56587219]
[-22.94911003 270.18539429]
[-37.50532913 276.93045044]
[-51.78947830 269.62686157]
[-54.84397888 253.87727356]
[-44.32568359 241.76342773]
[-28.30332565 242.57804871]
[-16.31550598 233.56182861]
[-4.32768536 224.54560852]
[7.66013432 215.52940369]
[18.17868614 204.83546448]
[26.99546432 192.70021057]
[35.81224442 180.56495667]
[36.60616684 163.11947632]
[53.30434418 155.57977295]
[61.71506882 143.15963745]
[70.12579346 130.73950195]
[78.53652191 118.31937408]
[86.94725037 105.89923859]
[88.13964844 91.96834564]
[100.63262177 85.69003296]
[109.04334259 73.26989746]
[117.45407104 60.84976578]
[125.86479950 48.42963409]
[126.75874329 41.55133820]
[130.53054810 36.96756744]
[135.26460266 35.49191284]
[144.47779846 23.65480614]
[153.69097900 11.81769943]
[162.90417480 -0.01940825]
[172.11737061 -11.85651588]
[163.14660645 -26.68257904]
[160.43357849 -43.76280594]
[164.35314941 -60.57178879]
[174.30142212 -74.63413239]
[188.78866577 -83.88897705]
[205.66235352 -86.99204254]
[222.42692566 -83.51078796]
[230.42239380 -96.20221710]
[238.41787720 -108.89364624]
[246.41334534 -121.58507538]
[254.40882874 -134.27650452]
[262.40429688 -146.96792603]
[270.39978027 -159.65936279]
[273.72674561 -176.28366089]
[290.62237549 -177.68876648]
[296.64974976 -161.84240723]
[283.09121704 -151.66387939]
[275.09573364 -138.97245789]
[267.10025024 -126.28102875]
[259.10476685 -113.58959961]
[251.10929871 -100.89817047]
[243.11383057 -88.20674133]
[235.11834717 -75.51531219]
[243.41522217 -65.64347839]
[248.54443359 -53.79226303]
[250.06668091 -40.95045853]
[247.84411621 -28.19273949]
[242.05270386 -16.58975410]
[233.16835022 -7.11826324]
[221.92779541 -0.57891607]
[209.26759338 2.47142124]
[196.24597168 1.76707625]
[183.95446777 -2.64332509]
[174.74128723 9.19378281]
[165.52809143 21.03088951]
[156.31489563 32.86799622]
[147.10171509 44.70510483]
[138.28492737 56.84035873]
[129.87420654 69.26049042]
[121.46347809 81.68062592]
[113.05274963 94.10076141]
[111.86035156 108.03165436]
[99.36737823 114.30996704]
[90.95665741 126.73010254]
[82.54592896 139.15023804]
[74.13520050 151.57035828]
[65.72447968 163.99049377]
[67.38130951 176.91238403]
[59.95762634 187.12309265]
[47.94749832 189.38174438]
[39.13071823 201.51699829]
[30.31394196 213.65225220]
[45.14023209 211.37605286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[21 93]
[22 92]
[23 91]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[31 82]
[32 81]
[33 80]
[34 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
