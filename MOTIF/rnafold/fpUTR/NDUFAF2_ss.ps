%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACUAGAAGGGCUCCAGGAUGGAGGCCGACCUGACUUCUCCGCCUCGGUGGGCUGGGUCGGCGGCUGGAGCAUUACCCCUACUGCGGGUCCCGCUGCUGGCAGCGCUGGAAACUGGGUGGACGGC\
) } def
/len { sequence length } bind def

/coor [
[-52.43540192 231.07562256]
[-64.48351288 240.01110840]
[-76.53162384 248.94659424]
[-88.57974243 257.88208008]
[-85.87957764 270.62973022]
[-88.22951508 283.39877319]
[-95.24014282 294.27096558]
[-105.82462311 301.62686157]
[-118.36707306 304.38699341]
[-130.96917725 302.17028809]
[-141.73753357 295.34613037]
[-154.20957947 303.67968750]
[-161.38539124 317.77996826]
[-176.26634216 318.41754150]
[-188.73838806 326.75109863]
[-201.21043396 335.08465576]
[-213.68247986 343.41821289]
[-226.15452576 351.75177002]
[-235.96511841 365.57885742]
[-251.96768188 359.97940063]
[-251.01699829 343.05212402]
[-234.48806763 339.27972412]
[-222.01603699 330.94616699]
[-209.54399109 322.61260986]
[-197.07194519 314.27905273]
[-184.59989929 305.94549561]
[-178.31617737 292.44128418]
[-162.54313660 291.20764160]
[-150.07109070 282.87408447]
[-151.85047913 265.83679199]
[-144.77732849 250.13839722]
[-130.69273376 240.08146667]
[-113.37251282 238.47129822]
[-97.51522827 245.83396912]
[-85.46711731 236.89848328]
[-73.41900635 227.96299744]
[-61.37088776 219.02749634]
[-62.41143799 201.48229980]
[-52.69314194 186.65074158]
[-35.89879227 180.49261475]
[-18.59742165 185.61473083]
[-7.00226545 176.09883118]
[4.59289169 166.58293152]
[16.18804741 157.06703186]
[27.78320503 147.55113220]
[39.37836075 138.03523254]
[42.58680725 131.28887939]
[51.37684631 128.43229675]
[63.20204163 119.20382690]
[75.02723694 109.97534943]
[86.85243225 100.74687958]
[98.21057129 90.94928741]
[109.07427216 80.60617828]
[119.81023407 70.13053131]
[130.41683960 59.52392960]
[141.02343750 48.91732788]
[143.15382385 42.47771835]
[147.59173584 38.71769333]
[152.42036438 38.06655502]
[163.53463745 27.99317169]
[174.64889526 17.91978645]
[185.76316833 7.84640217]
[196.87742615 -2.22698212]
[207.99169922 -12.30036640]
[219.10597229 -22.37375069]
[230.22023010 -32.44713593]
[241.33450317 -42.52051926]
[246.36369324 -57.52111053]
[260.99005127 -60.33526230]
[272.10430908 -70.40864563]
[283.21856689 -80.48203278]
[268.28738403 -81.91726685]
[257.62603760 -92.46882629]
[256.03631592 -107.38435364]
[264.23422241 -119.94596863]
[278.52746582 -124.49600983]
[292.47848511 -118.98516846]
[299.80377197 -105.89547729]
[297.20455933 -91.12322998]
[309.87734985 -99.14820099]
[322.55014038 -107.17316437]
[325.76791382 -122.64641571]
[339.03009033 -131.24237061]
[354.46844482 -127.86119080]
[362.92370605 -114.50888824]
[359.37948608 -99.10712433]
[345.93853760 -90.79351044]
[330.57510376 -94.50035858]
[317.90231323 -86.47539520]
[305.22952271 -78.45043182]
[293.29196167 -69.36776733]
[282.17770386 -59.29438019]
[271.06341553 -49.22099686]
[266.82919312 -34.94092178]
[251.40788269 -31.40625191]
[240.29360962 -21.33286858]
[229.17935181 -11.25948429]
[218.06507874 -1.18609965]
[206.95082092 8.88728428]
[195.83654785 18.96066856]
[184.72227478 29.03405380]
[173.60801697 39.10743713]
[162.49374390 49.18082047]
[151.63003540 59.52392960]
[141.02343750 70.13053131]
[130.41683960 80.73713684]
[127.88510132 87.76547241]
[119.41738129 91.46987915]
[108.55367279 101.81298828]
[108.25026703 104.96439362]
[106.74321747 108.06643677]
[104.05240631 110.65406799]
[100.37631989 112.27798462]
[96.08090973 112.57207489]
[84.25571442 121.80054474]
[72.43051910 131.02902222]
[60.60531998 140.25749207]
[48.89426041 149.63038635]
[37.29910278 159.14628601]
[25.70394707 168.66218567]
[14.10879040 178.17808533]
[2.51363397 187.69398499]
[-9.08152294 197.20988464]
[-6.69674778 209.60343933]
[-9.83108234 221.75399780]
[-17.82042694 231.33598328]
[-29.07768059 236.54296875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[11 29]
[12 28]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
[46 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 109]
[53 108]
[54 106]
[55 105]
[56 104]
[59 103]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[69 93]
[70 92]
[71 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
