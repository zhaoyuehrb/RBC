%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAACGUCUGACCUGGGGCCGUCGCUUAACCGUUUAGUUGCUGGGAUGGGGCGGCGUUGGGGGUGCGGCCCUGAACCGGAGGGAUUUAGAGACUGGAGACGCGGCCUCUAAGAGAGGUUGAAACUGUGUGUGUGUGGGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[182.13916016 386.88302612]
[189.19586182 373.58279419]
[198.86395264 362.04061890]
[210.72076416 352.76107788]
[204.12896729 339.28707886]
[197.53717041 325.81311035]
[184.99398804 317.78082275]
[185.87962341 301.98440552]
[179.28782654 288.51043701]
[172.69604492 275.03643799]
[158.99952698 274.99301147]
[146.60533142 269.00955200]
[137.96951294 258.20819092]
[134.83070374 244.67181396]
[137.86036682 231.04264832]
[146.52015686 220.00648499]
[140.22181702 206.39285278]
[133.92347717 192.77922058]
[127.62514496 179.16558838]
[121.32681274 165.55195618]
[115.02847290 151.93832397]
[108.73014069 138.32469177]
[103.02469635 133.53933716]
[102.44638824 124.34722900]
[96.44446564 110.60034180]
[90.29397583 96.91928101]
[83.99563599 83.30564880]
[77.69729614 69.69201660]
[62.47689056 69.37486267]
[48.95862198 62.50876236]
[39.79949951 50.50331879]
[36.77359772 35.77223206]
[40.42862320 21.24810600]
[49.98767853 9.79865456]
[43.68934250 -3.81497669]
[37.39100647 -17.42860794]
[31.09267044 -31.04224014]
[24.79433441 -44.65587234]
[5.94627571 -47.49378967]
[-7.34264374 -60.94971848]
[-9.90432930 -79.53717804]
[-0.89451915 -95.82588196]
[-8.06379795 -109.00167847]
[-15.23307705 -122.17746735]
[-22.40235519 -135.35325623]
[-37.29307556 -139.92536926]
[-44.37605286 -153.38961792]
[-39.92547989 -167.55746460]
[-47.09475708 -180.73326111]
[-54.26403427 -193.90904236]
[-61.43331528 -207.08483887]
[-68.60259247 -220.26063538]
[-75.77187347 -233.43641663]
[-89.16402435 -241.86024475]
[-88.45071411 -256.73776245]
[-95.61999512 -269.91354370]
[-102.78927612 -283.08932495]
[-118.15061951 -286.01559448]
[-127.99702454 -298.16394043]
[-127.67932129 -313.79827881]
[-117.34751129 -325.53659058]
[-101.87995911 -327.83636475]
[-88.57997894 -319.61175537]
[-83.72740936 -304.74612427]
[-89.61347961 -290.25860596]
[-82.44420624 -277.08282471]
[-75.27492523 -263.90704346]
[-62.39556503 -256.42562866]
[-62.59608078 -240.60569763]
[-55.42680359 -227.42990112]
[-48.25752640 -214.25411987]
[-41.08824539 -201.07832336]
[-33.91896820 -187.90254211]
[-26.74968910 -174.72674561]
[-12.43640327 -170.76878357]
[-4.97804117 -157.50878906]
[-9.22656536 -142.52253723]
[-2.05728698 -129.34674072]
[5.11199188 -116.17095184]
[12.28127098 -102.99516296]
[23.54145241 -103.66146851]
[34.27449799 -100.02780914]
[42.89225388 -92.59090424]
[48.10421371 -82.41321564]
[49.11069489 -70.97123718]
[45.72530365 -59.94134521]
[38.40796661 -50.95420837]
[44.70630264 -37.34057617]
[51.00463867 -23.72694397]
[57.30297470 -10.11331367]
[63.60131073 3.50031805]
[78.51605225 3.62698674]
[91.95200348 10.24398422]
[101.22055054 22.08691406]
[104.44115448 36.83980942]
[100.92269135 51.58794022]
[91.31092834 63.39368057]
[97.60926819 77.00730896]
[103.90760040 90.62094116]
[109.92484283 96.08082581]
[110.19135284 104.59841156]
[116.19327545 118.34529877]
[122.34377289 132.02636719]
[128.64210510 145.63999939]
[134.94044495 159.25361633]
[141.23878479 172.86724854]
[147.53710938 186.48088074]
[153.83544922 200.09451294]
[160.13378906 213.70814514]
[176.58142090 215.01435852]
[190.06127930 224.36546326]
[196.96589661 239.14425659]
[195.50529480 255.29685974]
[186.17002869 268.44464111]
[192.76181030 281.91864014]
[199.35360718 295.39260864]
[212.36828613 304.38867188]
[211.01116943 319.22131348]
[217.60295105 332.69531250]
[224.19474792 346.16928101]
[238.79811096 342.50387573]
[253.84446716 341.95516968]
[268.67602539 344.54718018]
[282.64443970 350.16653442]
[295.13903809 358.56762695]
[305.61364746 369.38320923]
[313.61035156 382.14041138]
[318.77954102 396.28161621]
[320.89526367 411.18856812]
[319.86502075 426.20962524]
[315.73388672 440.68814087]
[308.68240356 453.99114990]
[299.01885986 465.53713989]
[287.16571045 474.82135010]
[273.64111328 481.43789673]
[259.03628540 485.09756470]
[243.98973083 485.64031982]
[229.15919495 483.04251099]
[215.19299316 477.41763306]
[202.70169067 469.01162720]
[192.23135376 458.19195557]
[184.23966980 445.43157959]
[179.07604980 431.28836060]
[176.96617126 416.38058472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 120]
[5 119]
[6 118]
[8 116]
[9 115]
[10 114]
[16 109]
[17 108]
[18 107]
[19 106]
[20 105]
[21 104]
[22 103]
[24 102]
[25 101]
[26 99]
[27 98]
[28 97]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[42 80]
[43 79]
[44 78]
[45 77]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
