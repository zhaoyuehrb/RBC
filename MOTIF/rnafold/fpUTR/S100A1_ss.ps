%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUGUUGAAGACAGGUCUCCACACACAGCUCCAGCAGCCACAUUUGCAACCUUGGCCAUCUGUCCAGAACCUGCUCCCACCUCAGGCCCAGGCCAACCGUGCACUGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[-174.79711914 281.44104004]
[-187.12379456 289.98815918]
[-199.45045471 298.53530884]
[-211.65818787 307.25143433]
[-223.74465942 316.13497925]
[-235.83114624 325.01849365]
[-247.91761780 333.90203857]
[-259.62664795 343.27743530]
[-270.93826294 353.12872314]
[-276.26358032 368.02676392]
[-290.94277954 370.55068970]
[-302.25436401 380.40194702]
[-313.56597900 390.25323486]
[-318.37609863 405.93109131]
[-334.41702271 409.34011841]
[-345.18719482 396.97338867]
[-339.60720825 381.55276489]
[-323.41726685 378.94165039]
[-312.10565186 369.09036255]
[-300.79406738 359.23907471]
[-296.27783203 345.04568481]
[-280.78955078 341.81713867]
[-269.47793579 331.96585083]
[-268.91073608 328.35232544]
[-266.47814941 324.85989380]
[-262.27023315 322.40350342]
[-256.80114746 321.81555176]
[-244.71467590 312.93203735]
[-232.62818909 304.04849243]
[-220.54171753 295.16497803]
[-216.96650696 288.57711792]
[-207.99757385 286.20861816]
[-195.67091370 277.66149902]
[-183.34423828 269.11437988]
[-176.80343628 252.89382935]
[-158.51805115 251.35783386]
[-146.43157959 242.47430420]
[-134.34509277 233.59077454]
[-122.25862122 224.70724487]
[-110.17214203 215.82371521]
[-111.71067047 206.28456116]
[-109.57942200 196.80010986]
[-104.04149628 188.73973083]
[-95.85503387 183.28370667]
[-86.16961670 181.25047302]
[-76.36490631 182.97412109]
[-67.85415649 188.25038147]
[-54.86377335 180.75038147]
[-41.87339401 173.25038147]
[-28.88301277 165.75038147]
[-27.51262474 150.94296265]
[-17.56815338 139.64819336]
[-2.70599866 136.33613586]
[11.41989326 142.48149109]
[24.41027451 134.98149109]
[37.40065765 127.48149109]
[50.39103699 119.98149109]
[63.38141632 112.48149109]
[76.37179565 104.98149109]
[82.46105194 83.40203094]
[103.67230225 76.13325500]
[110.44530487 62.74944687]
[117.21830750 49.36563110]
[115.77513885 33.03010941]
[129.35409546 23.83532524]
[143.98631287 31.24008751]
[144.61940002 47.62701035]
[130.60212708 56.13863373]
[123.82911682 69.52244568]
[117.05612183 82.90625763]
[118.42665863 84.39341736]
[119.66794586 85.99004364]
[133.98402405 81.51232147]
[148.30009460 77.03459930]
[162.61618042 72.55687714]
[166.60307312 57.65357971]
[178.02976990 47.28852844]
[193.25003052 44.76916504]
[207.40713501 50.89941406]
[215.98359680 63.72313309]
[216.24270630 79.14832306]
[208.10177612 92.25285339]
[194.15855408 98.85512543]
[178.86225891 96.84838104]
[167.09390259 86.87294769]
[152.77781677 91.35066986]
[138.46174622 95.82839203]
[124.14566803 100.30611420]
[121.52291870 110.94856262]
[114.46569824 119.33522034]
[104.42803192 123.73815155]
[93.47804260 123.25019073]
[83.87179565 117.97187805]
[70.88141632 125.47187805]
[57.89103699 132.97187805]
[44.90065765 140.47187805]
[31.91027451 147.97187805]
[18.91989326 155.47187805]
[17.17897797 170.77793884]
[6.87957430 181.99290466]
[-7.87420654 184.95768738]
[-21.38301277 178.74076843]
[-34.37339401 186.24076843]
[-47.36377335 193.74076843]
[-60.35415649 201.24076843]
[-64.22724915 221.76792908]
[-81.58525848 232.86740112]
[-101.28861237 227.91020203]
[-113.37509155 236.79373169]
[-125.46157074 245.67726135]
[-137.54804993 254.56079102]
[-149.63452148 263.44430542]
[-152.38729858 276.13775635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 30]
[5 29]
[6 28]
[7 27]
[8 23]
[9 22]
[11 20]
[12 19]
[13 18]
[36 112]
[37 111]
[38 110]
[39 109]
[40 108]
[47 105]
[48 104]
[49 103]
[50 102]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[61 70]
[62 69]
[63 68]
[72 88]
[73 87]
[74 86]
[75 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
