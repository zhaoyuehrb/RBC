%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCUUGCGCGCUGGGGACAACCGUUGCUGGGUGUCCCAGGGCCUGAGGCAGGACGGUACUCCGCUGACACCUUCCCUUUCGGCCUUGAGGUUCCCAGCCUGGUGGCCCCAGGACGUUCCGGUCGCAUGGCAGAGUGCUACGGACGACGCCU\
) } def
/len { sequence length } bind def

/coor [
[114.59657288 125.12141418]
[110.69019318 110.63951874]
[103.44904327 112.59289551]
[98.38227844 126.71125031]
[93.31551361 140.82960510]
[88.24874878 154.94795227]
[91.69998932 170.97982788]
[79.36167908 181.78253174]
[63.92641449 176.24314880]
[61.27267456 160.06015015]
[74.13039398 149.88119507]
[79.19715881 135.76284790]
[84.26392365 121.64448547]
[89.33068848 107.52613831]
[87.81316376 92.60309601]
[80.00811005 79.79367828]
[72.20306396 66.98426056]
[64.39801025 54.17484283]
[56.59296036 41.36542130]
[42.80487061 33.60661316]
[42.78975677 18.71201515]
[34.98470688 5.90259695]
[27.80380821 0.16013311]
[27.15431404 -7.24647045]
[19.61047554 -20.21144295]
[12.06663609 -33.17641449]
[-0.21492681 -37.24064636]
[-6.22114563 -48.24293518]
[-3.19683599 -59.99333191]
[-10.47636509 -73.10852814]
[-17.75589561 -86.22373199]
[-25.03542519 -99.33892822]
[-32.31495285 -112.45412445]
[-39.59448242 -125.56932831]
[-52.91785431 -127.77175903]
[-62.38855743 -137.12277222]
[-64.69164276 -150.03323364]
[-59.20396042 -161.72914124]
[-66.21618652 -174.98918152]
[-73.36243439 -188.17747498]
[-80.64196014 -201.29267883]
[-87.92149353 -214.40788269]
[-95.20101929 -227.52307129]
[-102.48055267 -240.63827515]
[-109.76007843 -253.75347900]
[-117.03961182 -266.86868286]
[-133.03337097 -275.93948364]
[-132.12057495 -293.43963623]
[-139.66441345 -306.40460205]
[-147.20825195 -319.36956787]
[-154.75209045 -332.33453369]
[-170.92640686 -341.07934570]
[-170.36846924 -358.59439087]
[-178.17352295 -371.40380859]
[-185.97857666 -384.21322632]
[-204.07893372 -392.99856567]
[-203.84207153 -412.29901123]
[-212.15982056 -424.78158569]
[-220.47755432 -437.26419067]
[-228.79530334 -449.74679565]
[-244.18051147 -454.29376221]
[-250.08432007 -469.21102905]
[-241.97782898 -483.05532837]
[-226.07965088 -485.20648193]
[-214.58551025 -474.01434326]
[-216.31271362 -458.06454468]
[-207.99496460 -445.58193970]
[-199.67721558 -433.09933472]
[-191.35948181 -420.61676025]
[-181.12998962 -419.50225830]
[-173.05380249 -412.77603149]
[-169.98078918 -402.49481201]
[-173.16915894 -392.01828003]
[-165.36410522 -379.20886230]
[-157.55905151 -366.39944458]
[-145.84902954 -363.22241211]
[-139.25172424 -352.56405640]
[-141.78712463 -339.87838745]
[-134.24328613 -326.91342163]
[-126.69944000 -313.94842529]
[-119.15560150 -300.98345947]
[-107.51236725 -297.56976318]
[-101.13243103 -286.77990723]
[-103.92440796 -274.14819336]
[-96.64488220 -261.03298950]
[-89.36534882 -247.91780090]
[-82.08582306 -234.80261230]
[-74.80629730 -221.68740845]
[-67.52676392 -208.57220459]
[-60.24723434 -195.45700073]
[-54.21586990 -191.10932922]
[-52.95615005 -182.00140381]
[-45.94392014 -168.74137878]
[-29.69635010 -164.50302124]
[-21.35222244 -149.54463196]
[-26.47928429 -132.84886169]
[-19.19975471 -119.73365784]
[-11.92022514 -106.61845398]
[-4.64069557 -93.50325775]
[2.63883376 -80.38806152]
[9.91836357 -67.27285767]
[25.42135048 -59.10307693]
[25.03160667 -40.72025299]
[32.57544708 -27.75528145]
[40.11928558 -14.79030991]
[47.79412460 -1.90245330]
[55.59917450 10.90696430]
[68.82899475 17.74955940]
[69.40237427 33.56037140]
[77.20742798 46.36978912]
[85.01248169 59.17920685]
[92.81752777 71.98862457]
[100.62258148 84.79804230]
[142.06840515 93.29959106]
[153.54820251 102.95433807]
[162.18458557 106.10936737]
[165.16026306 112.92295837]
[176.44203186 122.80838013]
[187.72380066 132.69380188]
[199.20359802 142.34855652]
[210.87672424 151.76866150]
[222.54983521 161.18875122]
[234.22296143 170.60885620]
[247.39788818 167.64506531]
[259.68768311 172.75354004]
[266.67190552 183.85330200]
[265.97970581 196.75407410]
[277.45950317 206.40882874]
[288.93930054 216.06356812]
[300.41912842 225.71832275]
[316.14126587 224.10908508]
[328.34347534 234.15306091]
[329.78640747 249.89134216]
[319.61398315 261.98669434]
[303.86132812 263.26312256]
[291.87420654 252.96339417]
[290.76437378 237.19812012]
[279.28457642 227.54336548]
[267.80477905 217.88862610]
[256.32495117 208.23388672]
[239.67520142 210.40934753]
[226.32305908 199.68096924]
[224.80285645 182.28198242]
[213.12973022 172.86187744]
[201.45661926 163.44177246]
[189.78350830 154.02166748]
[184.96917725 153.63961792]
[180.35964966 150.19027710]
[177.83837891 143.97557068]
[166.55661011 134.09014893]
[155.27482605 124.20472717]
[143.89346313 114.43414307]
[132.41366577 104.77939606]
[125.17250061 106.73277283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[21 107]
[22 106]
[24 105]
[25 104]
[26 103]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[38 93]
[39 92]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[48 81]
[49 80]
[50 79]
[51 78]
[53 75]
[54 74]
[55 73]
[57 69]
[58 68]
[59 67]
[60 66]
[114 153]
[115 152]
[117 151]
[118 150]
[119 149]
[120 146]
[121 145]
[122 144]
[123 143]
[127 140]
[128 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
