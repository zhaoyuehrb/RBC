%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGCUGACUGAGCUAGUCUUGGGGUCCUGGAGAAGGGGGCUGGAGGCAUGCCCACAGCCUCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.68105316 116.40731812]
[65.95358276 125.75966644]
[64.04199982 141.21876526]
[52.01544571 150.53630066]
[37.28934097 148.61863708]
[25.56186867 157.97097778]
[13.83439636 167.32333374]
[10.61654377 183.04035950]
[-3.74266171 190.19526672]
[-18.22806549 183.29942322]
[-21.72770691 167.64273071]
[-11.55696011 155.23565674]
[4.48204947 155.59585571]
[16.20952225 146.24351501]
[27.93699455 136.89115906]
[29.34426689 122.10755157]
[41.10436249 112.45587921]
[56.60123444 114.03219604]
[68.32870483 104.67984772]
[69.67329407 89.74023438]
[59.80421448 78.44416046]
[49.93513489 67.14808655]
[35.02872467 61.84624100]
[32.48170090 47.17102814]
[22.61262131 35.87495422]
[7.63811636 27.92507744]
[11.13195419 11.33503723]
[28.04084015 10.09975433]
[33.90869141 26.00587463]
[43.77777481 37.30194473]
[57.97827911 41.79582214]
[61.23120499 57.27900696]
[71.10028839 68.57508087]
[80.96936798 79.87115479]
[97.72917938 74.71510315]
[112.60996246 80.67826080]
[119.67311859 93.37596130]
[134.65800476 94.04893494]
[149.64291382 94.72190857]
[164.62780762 95.39487457]
[179.61270142 96.06784821]
[186.13880920 93.14328003]
[192.17160034 94.07440948]
[195.89283752 97.53308868]
[210.75708008 99.54659271]
[225.62133789 101.56008911]
[240.48558044 103.57358551]
[255.34982300 105.58708954]
[270.21408081 107.60058594]
[279.47497559 105.61418915]
[285.69424438 110.05240631]
[300.45318604 112.73075867]
[315.70019531 106.69247437]
[328.38320923 117.08831024]
[325.45501709 133.22390747]
[309.92791748 138.50036621]
[297.77484131 127.48970032]
[283.01589966 124.81134796]
[268.20056152 122.46482849]
[253.33633423 120.45133209]
[238.47207642 118.43783569]
[223.60783386 116.42433167]
[208.74359131 114.41083527]
[193.87933350 112.39733887]
[178.93972778 111.05274963]
[163.95483398 110.37977600]
[148.96994019 109.70680237]
[133.98503113 109.03382874]
[119.00014496 108.36085510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[5 15]
[6 14]
[7 13]
[20 34]
[21 33]
[22 32]
[24 30]
[25 29]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
