%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAACUUAGCGAGCGCAACAGGCUGCCGCUGAGGAGCUGGAGCUGGUGGGGACUGGGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[102.27111816 127.11116028]
[92.74378204 126.22061157]
[84.11407471 122.08643341]
[77.44953918 115.22003937]
[73.57460785 106.47085571]
[72.96864319 96.92118835]
[59.11045456 91.18093872]
[45.25226212 85.44068909]
[31.39406776 79.70043182]
[17.53587532 73.96018219]
[3.67768192 68.21993256]
[-10.18051052 62.47967911]
[-19.68896866 62.02969742]
[-24.56673241 56.10270691]
[-38.12657166 49.68938065]
[-51.83971786 43.61075974]
[-65.69791412 37.87051010]
[-81.01036072 42.65679169]
[-94.21832275 33.55024719]
[-95.18978882 17.53663254]
[-83.17952728 6.90022564]
[-67.40077972 9.80036640]
[-59.95766068 24.01231575]
[-46.09946823 29.75256729]
[-38.43214798 29.38642883]
[-31.71324539 36.12953949]
[-18.15340614 42.54286575]
[-4.44025946 48.62148666]
[9.41793346 54.36173630]
[23.27612686 60.10198975]
[37.13431931 65.84223938]
[50.99251175 71.58248901]
[64.85070801 77.32274628]
[78.70890045 83.06299591]
[96.75348663 72.98827362]
[116.67143250 78.50031281]
[126.96934509 96.41845703]
[141.80699158 98.61941528]
[151.13983154 96.74554443]
[157.31155396 101.30971527]
[172.02333069 104.23606873]
[183.39755249 97.65451050]
[195.77557373 100.64971924]
[202.44264221 111.02102661]
[216.99310303 114.66573334]
[231.54357910 118.31043243]
[246.09403992 121.95513916]
[260.64450073 125.59983826]
[276.25613403 120.57898712]
[288.22683716 131.78765869]
[284.24218750 147.69535828]
[268.40121460 151.93757629]
[256.99981689 140.15031433]
[242.44934082 136.50559998]
[227.89888000 132.86090088]
[213.34840393 129.21620178]
[198.79794312 125.57149506]
[182.41888428 131.40394592]
[169.09698486 118.94784546]
[154.38520813 116.02149200]
[139.60603333 113.45706177]
[124.76838684 111.25611115]
[119.33912659 119.13560486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[14 27]
[15 26]
[16 24]
[17 23]
[37 62]
[38 61]
[40 60]
[41 59]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
