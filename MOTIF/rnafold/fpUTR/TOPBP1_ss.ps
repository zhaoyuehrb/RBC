%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUAGGGGCGGCGCCGAGUCGGGGGAGGGGGCUGUGCGCCGGGCUGGCGCCCGACCCCAGCCACCGCCCUGCGGCCAGCGCGUCCCCCGACUCGCCGCCCGGAGACCCCGAGGCUCCAACGAGUUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[277.70233154 441.22363281]
[270.56314087 428.03152466]
[263.42391968 414.83944702]
[256.28469849 401.64733887]
[249.14550781 388.45523071]
[231.37107849 384.37597656]
[221.97888184 368.37564087]
[227.25860596 350.25924683]
[219.50437927 337.41900635]
[211.75013733 324.57876587]
[203.99591064 311.73852539]
[196.24166870 298.89828491]
[188.48742676 286.05804443]
[180.73320007 273.21780396]
[177.31694031 272.03118896]
[174.33326721 269.07577515]
[172.63282776 264.58688354]
[172.92187500 259.18234253]
[166.09623718 245.82528687]
[159.27059937 232.46824646]
[152.44496155 219.11119080]
[145.61932373 205.75415039]
[138.79368591 192.39710999]
[131.96806335 179.04005432]
[125.14241791 165.68301392]
[118.31678009 152.32595825]
[111.49114227 138.96891785]
[104.66550446 125.61187744]
[91.41736603 124.57790375]
[80.40541077 117.14022064]
[74.49877930 105.23668671]
[75.23643494 91.96875000]
[82.42618561 80.79333496]
[75.91793060 67.27880096]
[69.40967560 53.76426697]
[62.90141678 40.24973297]
[48.25528336 34.94610596]
[41.84750366 21.14773369]
[46.99396515 7.21756744]
[40.48570633 -6.29696560]
[33.97745132 -19.81149864]
[21.01871490 -28.88793564]
[22.46762466 -43.71189880]
[15.95936871 -57.22643280]
[9.45111179 -70.74096680]
[2.94285607 -84.25550079]
[-3.88278151 -97.61254883]
[-11.02199268 -110.80464935]
[-18.16120338 -123.99675751]
[-25.30041504 -137.18885803]
[-40.60374069 -136.93041992]
[-54.26904678 -143.82374573]
[-63.15614700 -156.28482056]
[-65.22284698 -171.45014954]
[-59.99423981 -185.83486938]
[-48.67181778 -196.13348389]
[-33.85738754 -199.97943115]
[-18.95520401 -196.48893738]
[-7.38967419 -186.46412659]
[-1.81847394 -172.20858765]
[-3.52182436 -156.99815369]
[-12.10830784 -144.32807922]
[-4.96909714 -131.13597107]
[2.17011404 -117.94386292]
[9.30932522 -104.75175476]
[13.63840103 -102.53625488]
[16.57307434 -97.52913666]
[16.45738983 -90.76375580]
[22.96564484 -77.24922180]
[29.47390175 -63.73468781]
[35.98215866 -50.22015762]
[48.47537994 -42.11037064]
[47.49198532 -26.31975555]
[54.00024033 -12.80522156]
[60.50849533 0.70931113]
[74.60830688 5.37096405]
[81.40112305 18.98390961]
[76.41594696 33.74147797]
[82.92420197 47.25601196]
[89.43246460 60.77054596]
[95.94071960 74.28507996]
[111.94795227 76.87033844]
[123.32019806 88.42832947]
[125.64578247 104.47534943]
[118.02255249 118.78623962]
[124.84819031 132.14328003]
[131.67382812 145.50032043]
[138.49946594 158.85737610]
[145.32510376 172.21441650]
[152.15074158 185.57147217]
[158.97637939 198.92851257]
[165.80201721 212.28555298]
[172.62765503 225.64260864]
[179.45329285 238.99964905]
[186.27893066 252.35668945]
[193.57344055 265.46356201]
[201.32768250 278.30380249]
[209.08190918 291.14404297]
[216.83615112 303.98428345]
[224.59037781 316.82452393]
[232.34461975 329.66476440]
[240.09884644 342.50503540]
[252.08757019 343.07104492]
[262.18759155 349.32897949]
[267.91433716 359.60165405]
[267.92633057 371.24227905]
[262.33761597 381.31600952]
[269.47680664 394.50811768]
[276.61602783 407.70022583]
[283.75524902 420.89233398]
[290.89443970 434.08444214]
[311.33639526 438.59701538]
[321.83654785 456.37307739]
[316.08480835 475.90081787]
[324.43676758 488.36053467]
[332.78872681 500.82028198]
[341.14068604 513.28002930]
[349.49264526 525.73974609]
[364.44186401 532.48156738]
[365.80841064 548.82373047]
[352.18649292 557.95471191]
[337.58917236 550.48138428]
[337.03292847 534.09167480]
[328.68096924 521.63195801]
[320.32901001 509.17224121]
[311.97705078 496.71249390]
[303.62509155 484.25277710]
[294.12380981 485.36984253]
[284.82568359 482.88256836]
[277.05755615 477.10122681]
[271.94427490 468.80932617]
[270.24609375 459.15756226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[13 97]
[14 96]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[33 81]
[34 80]
[35 79]
[36 78]
[39 75]
[40 74]
[41 73]
[43 71]
[44 70]
[45 69]
[46 68]
[47 65]
[48 64]
[49 63]
[50 62]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
