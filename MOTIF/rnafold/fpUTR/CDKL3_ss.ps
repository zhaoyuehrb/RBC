%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACUACGCAGAGCCAGACCAGCGGGACCACAGAAUGGGCUGAGGCGGCGGCGGCUGUUUGGAUAAAGUCAACAGCGGGACGUGGGGCGUGACGCCGUAGUAAAAGCCCAGCUUGAAA\
) } def
/len { sequence length } bind def

/coor [
[-128.64608765 360.51651001]
[-139.52670288 370.84182739]
[-140.66752625 383.77029419]
[-150.04643250 392.14862061]
[-162.21646118 391.84866333]
[-173.36363220 401.88562012]
[-177.71794128 410.05902100]
[-184.93646240 412.03472900]
[-196.34255981 421.77642822]
[-207.74864197 431.51815796]
[-203.80363464 446.26263428]
[-206.65512085 461.25701904]
[-215.73695374 473.52416992]
[-229.24592590 480.62844849]
[-244.49980164 481.15927124]
[-258.46994019 475.01126099]
[-268.38253784 463.40509033]
[-272.26947021 448.64520264]
[-269.35894775 433.66213989]
[-260.22888184 421.43084717]
[-246.69203186 414.37982178]
[-231.43617249 413.90908813]
[-217.49035645 420.11206055]
[-206.08427429 410.37036133]
[-194.67817688 400.62863159]
[-183.40058899 390.73843384]
[-172.25341797 380.70147705]
[-167.80732727 363.77966309]
[-149.85202026 359.96121216]
[-138.97140503 349.63589478]
[-135.07861328 329.43719482]
[-114.36274719 324.28634644]
[-104.32578278 313.13919067]
[-94.28882599 301.99200439]
[-95.32238770 287.17758179]
[-85.30227661 275.72979736]
[-69.75653076 274.74615479]
[-59.71957397 263.59896851]
[-49.68261337 252.45179749]
[-39.64565659 241.30462646]
[-29.60869598 230.15745544]
[-19.57173729 219.01028442]
[-22.84416771 204.50410461]
[-16.87668610 190.68914795]
[-3.76541901 182.94653320]
[11.56812096 184.42596436]
[21.60507965 173.27879333]
[24.37135315 158.64332581]
[39.35540390 153.56506348]
[49.39236450 142.41789246]
[59.42932510 131.27072144]
[69.46628571 120.12354279]
[79.50324249 108.97637177]
[89.54019928 97.82920074]
[97.04019928 84.83881378]
[101.67545319 70.57296753]
[106.31070709 56.30712128]
[110.94596863 42.04127121]
[115.58122253 27.77542496]
[120.21647644 13.50957775]
[119.90072632 4.25404072]
[125.16429138 -1.06622243]
[130.17140198 -15.20584488]
[123.14211273 -29.36086845]
[128.25988770 -44.31359100]
[142.48843384 -51.19282532]
[157.38621521 -45.91724777]
[164.11463928 -31.61676025]
[158.68183899 -16.77559090]
[144.31101990 -10.19874191]
[139.30390930 3.94088054]
[134.48233032 18.14483261]
[129.84706116 32.41067886]
[125.21181488 46.67652893]
[120.57656097 60.94237518]
[115.94129944 75.20822144]
[111.30604553 89.47406769]
[116.32453156 95.04766083]
[130.99667358 91.92868042]
[126.36148834 106.19483185]
[131.37995911 111.76841736]
[146.05218506 108.64974213]
[160.72439575 105.53106689]
[175.39660645 102.41239166]
[189.63250732 93.20503998]
[202.42092896 104.33574677]
[195.26539612 119.70567322]
[178.51528931 117.08460236]
[163.84306335 120.20327759]
[149.17085266 123.32195282]
[134.49864197 126.44062805]
[118.88439178 125.34793854]
[107.02725220 118.46035004]
[100.68737030 107.86615753]
[90.65041351 119.01332855]
[80.61345673 130.16050720]
[70.57649231 141.30767822]
[60.53953552 152.45484924]
[50.50257874 163.60202026]
[47.01839447 179.03480530]
[32.75225449 183.31575012]
[22.71529388 194.46292114]
[25.78941727 209.55781555]
[19.45971870 223.40658569]
[6.34420872 230.78543091]
[-8.42456436 229.04724121]
[-18.46152306 240.19441223]
[-28.49848366 251.34158325]
[-38.53544235 262.48876953]
[-48.57239914 273.63592529]
[-58.60935974 284.78311157]
[-57.96264267 300.34649658]
[-68.30034637 311.50833130]
[-83.14165497 312.02896118]
[-93.17861176 323.17614746]
[-103.21557617 334.32333374]
[-101.43633270 343.80661011]
[-104.25242615 352.89001465]
[-110.88764191 359.50750732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[5 27]
[6 26]
[8 25]
[9 24]
[10 23]
[32 116]
[33 115]
[34 114]
[37 111]
[38 110]
[39 109]
[40 108]
[41 107]
[42 106]
[46 102]
[47 101]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[62 71]
[63 70]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
