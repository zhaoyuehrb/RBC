%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUAACGUACUAUCCUCCUUACUUUUGGGUCGGGCCCUCCGGGAAGAUGGCGGCCGUGCAGGCGGCCGAGGUGAAAGUGGAUGGCAGCGAGCCGAAACUGAGCAAGAAGUGGUGGUAAUCAUUAGUUCCAGGGUGCUCUGCC\
) } def
/len { sequence length } bind def

/coor [
[103.44607544 299.87542725]
[93.87027740 311.88372803]
[79.56738281 317.48040771]
[64.38479614 315.15994263]
[52.40655136 305.54656982]
[46.85474396 291.22619629]
[49.22277832 276.05093384]
[58.87366867 264.10290527]
[73.21137238 258.59600830]
[75.47760773 243.76818848]
[77.74384308 228.94036865]
[69.36544800 211.56172180]
[82.02223969 195.93476868]
[83.64402771 181.02270508]
[85.26580811 166.11062622]
[86.88759613 151.19856262]
[88.50938416 136.28649902]
[90.13116455 121.37442017]
[76.81004333 104.06024170]
[83.45612335 83.25007629]
[76.86433411 69.77609253]
[70.27254486 56.30210495]
[63.68075180 42.82811737]
[50.66607666 33.83207321]
[52.02319336 18.99942398]
[45.43140411 5.52543879]
[38.83961487 -7.94854736]
[32.24782562 -21.42253304]
[25.65603447 -34.89651871]
[19.06424332 -48.37050629]
[6.04956913 -57.36655045]
[7.40668678 -72.19920349]
[0.81489670 -85.67318726]
[-5.77689362 -99.14717102]
[-21.27786255 -109.02335358]
[-19.47948837 -126.44818115]
[-26.36163712 -139.77619934]
[-33.24378586 -153.10421753]
[-46.45030212 -161.81619263]
[-45.41484451 -176.67475891]
[-52.29699326 -190.00277710]
[-59.17914200 -203.33079529]
[-66.06129456 -216.65881348]
[-81.28115082 -216.31632996]
[-95.08415985 -222.59039307]
[-104.75475311 -234.18780518]
[-108.41593933 -248.77398682]
[-105.39351654 -263.44281006]
[-96.33940887 -275.29559326]
[-103.22155762 -288.62362671]
[-118.00972748 -293.51724243]
[-124.79934692 -307.13180542]
[-120.04287720 -321.19989014]
[-126.92502594 -334.52792358]
[-133.80717468 -347.85592651]
[-140.68933105 -361.18395996]
[-147.57147217 -374.51196289]
[-154.45362854 -387.83999634]
[-161.33578491 -401.16799927]
[-175.42214966 -409.56478882]
[-174.92298889 -425.95632935]
[-160.35179138 -433.48043823]
[-146.69815063 -424.39691162]
[-148.00776672 -408.05014038]
[-141.12561035 -394.72213745]
[-134.24346924 -381.39410400]
[-127.36131287 -368.06610107]
[-120.47916412 -354.73806763]
[-113.59701538 -341.41006470]
[-106.71486664 -328.08206177]
[-92.49068451 -323.81494141]
[-85.32134247 -310.39645386]
[-89.89353943 -295.50576782]
[-83.01139069 -282.17776489]
[-68.10516357 -282.69729614]
[-54.39518738 -276.66851807]
[-44.62231827 -265.23822021]
[-40.76565933 -250.63868713]
[-43.64194870 -235.75198364]
[-52.73327637 -223.54095459]
[-45.85112762 -210.21293640]
[-38.96897888 -196.88493347]
[-32.08682632 -183.55691528]
[-19.37257004 -175.79824829]
[-19.91577148 -159.98635864]
[-13.03362083 -146.65834045]
[-6.15147161 -133.33033752]
[5.31344652 -129.32960510]
[11.13901043 -118.21958160]
[7.69709253 -105.73896027]
[14.28888321 -92.26497650]
[20.88067245 -78.79099274]
[33.42385864 -70.75869751]
[32.53823090 -54.96229553]
[39.13002014 -41.48830795]
[45.72180939 -28.01432419]
[52.31359863 -14.54033756]
[58.90539169 -1.06635141]
[65.49718475 12.40763474]
[78.04036713 20.43992996]
[77.15473938 36.23632812]
[83.74652863 49.71031570]
[90.33831787 63.18429947]
[96.93010712 76.65828705]
[107.50861359 77.68676758]
[116.55680847 83.26285553]
[122.23058319 92.25010681]
[123.37359619 102.81685638]
[136.91819763 109.26229858]
[150.46279907 115.70773315]
[166.24868774 114.65103912]
[174.41638184 127.10647583]
[187.96098328 133.55192566]
[201.50559998 139.99736023]
[215.05020142 146.44279480]
[228.59480286 152.88824463]
[244.13316345 148.89587402]
[256.85525513 158.66972351]
[257.00177002 174.71209717]
[244.46034241 184.71669006]
[228.85163879 181.00881958]
[222.14935303 166.43284607]
[208.60475159 159.98741150]
[195.06015015 153.54196167]
[181.51554871 147.09652710]
[167.97094727 140.65107727]
[153.15386963 142.16879272]
[144.01736450 129.25233459]
[130.47276306 122.80690002]
[116.92815399 116.36145782]
[111.47564697 120.55648804]
[105.04323578 122.99620819]
[103.42144775 137.90827942]
[101.79966736 152.82034302]
[100.17787933 167.73242188]
[98.55609894 182.64448547]
[96.93431091 197.55654907]
[104.28424072 205.70046997]
[105.86435699 216.33337402]
[101.38744354 225.86335754]
[92.57166290 231.20660400]
[90.30542755 246.03442383]
[88.03919220 260.86224365]
[100.07746124 270.40036011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 143]
[10 142]
[11 141]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[20 104]
[21 103]
[22 102]
[23 101]
[25 99]
[26 98]
[27 97]
[28 96]
[29 95]
[30 94]
[32 92]
[33 91]
[34 90]
[36 87]
[37 86]
[38 85]
[40 83]
[41 82]
[42 81]
[43 80]
[49 74]
[50 73]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[108 130]
[109 129]
[110 128]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
