%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGCAGCCCUACACUCGGCCUGGAAGAAUUGUUUUUCUUCUCUGGAAAGGUGAACAUUUAUAGCAUUUAUUUCCCAAAUCUGUUAAC\
) } def
/len { sequence length } bind def

/coor [
[91.47578430 199.24206543]
[101.61527252 187.11911011]
[100.04734802 172.20127869]
[98.47942352 157.28344727]
[96.91149139 142.36561584]
[86.36470795 140.23013306]
[76.69295502 135.51289368]
[68.51691437 128.51664734]
[55.79619217 136.46543884]
[43.07546997 144.41423035]
[42.12742996 159.90231323]
[32.23082733 171.85375977]
[17.19110870 175.67297363]
[2.79134822 169.89140320]
[-5.43144894 156.73217773]
[-4.31545019 141.25529480]
[5.71021986 129.41191101]
[20.79048729 125.75607300]
[35.12667847 131.69351196]
[47.84740067 123.74472046]
[60.56812286 115.79593658]
[57.59140396 102.42804718]
[59.02295303 88.80776978]
[64.71396637 76.35089874]
[53.92386627 65.93102264]
[43.13376999 55.51114655]
[32.34367371 45.09127045]
[21.55357552 34.67139435]
[10.76347828 24.25152016]
[-0.02661869 13.83164406]
[-15.82213879 14.35802746]
[-27.30623055 3.50025535]
[-27.66558456 -12.29994774]
[-16.68700218 -23.66860199]
[-0.88388300 -23.86088562]
[10.36806297 -12.76272202]
[10.39325714 3.04154706]
[21.18335342 13.46142292]
[31.97345161 23.88129807]
[42.76354599 34.30117416]
[53.55364609 44.72105026]
[64.34374237 55.14092636]
[75.13384247 65.56079865]
[95.60150909 57.75029373]
[117.23908997 61.17734909]
[134.29142761 74.93044281]
[147.77333069 68.35487366]
[161.25524902 61.77930832]
[174.73715210 55.20373917]
[188.21907043 48.62817383]
[201.46327209 41.58609772]
[214.45365906 34.08609772]
[227.44404602 26.58609962]
[240.43441772 19.08609962]
[239.75440979 3.79570436]
[246.26858521 -10.05435467]
[258.48004150 -19.28143692]
[273.58267212 -21.76522446]
[288.10598755 -16.93496323]
[298.71267700 -5.90060949]
[302.96536255 8.80222034]
[299.88681030 23.79492569]
[290.18447876 35.63228989]
[276.08786011 41.59417725]
[260.83627319 40.31058884]
[247.93441772 32.07648087]
[234.94404602 39.57648087]
[221.95365906 47.07648087]
[208.96327209 54.57648087]
[206.84823608 59.08223343]
[201.76351929 62.19543076]
[194.79463196 62.11008453]
[181.31272888 68.68565369]
[167.83081055 75.26121521]
[154.34890747 81.83678436]
[140.86698914 88.41235352]
[142.47296143 99.34244537]
[141.20611572 110.31702423]
[137.15213013 120.59376526]
[130.58523560 129.47756958]
[121.94960022 136.36755371]
[111.82932281 140.79768372]
[113.39724731 155.71551514]
[114.96517944 170.63334656]
[116.53310394 185.55117798]
[128.97152710 195.30110168]
[130.78961182 211.00047302]
[120.90871429 223.33511353]
[105.19100189 224.98712158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 82]
[8 21]
[9 20]
[10 19]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[51 69]
[52 68]
[53 67]
[54 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
