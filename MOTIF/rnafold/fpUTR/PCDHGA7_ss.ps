%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGAUUGCGAUAAGCCCUCUUCCAGGCUGCACUAAACUCAAGCCUCUAUCCUGCUGGAUUCUGAGCUCCCCUUCCUAAGACAGAGGGGUCCACCCGGAUACACCCGCAUUCUGAAGCACUUCCCGAGAUCGGCGCCUAAGCAAGAGAAGCAGGACGACU\
) } def
/len { sequence length } bind def

/coor [
[209.55744934 247.89178467]
[210.07418823 229.27055359]
[217.33633423 212.35348511]
[206.03479004 202.49066162]
[194.73326111 192.62783813]
[183.43171692 182.76502991]
[168.75509644 180.22613525]
[163.44499207 165.32266235]
[152.14344788 155.45983887]
[140.84191895 145.59701538]
[129.54037476 135.73420715]
[112.81027222 146.44436646]
[92.40364075 149.41339111]
[71.85914612 143.50028992]
[54.99684525 129.15965271]
[43.50617981 138.80146790]
[32.01551437 148.44328308]
[20.52484703 158.08509827]
[21.74155998 173.55439758]
[13.60458851 186.76686096]
[-0.75723392 192.64204407]
[-15.82149506 188.92079163]
[-25.79567909 177.03402710]
[-26.84450722 161.55242920]
[-18.56468582 148.42901611]
[-4.13997412 142.70999146]
[10.88303185 146.59442139]
[22.37369919 136.95262146]
[33.86436462 127.31079865]
[45.35503006 117.66898346]
[44.99156570 110.17779541]
[30.28502274 113.13037109]
[15.57848263 116.08293915]
[3.67601371 125.21153259]
[-11.28589821 124.14325714]
[-21.77068710 113.41622925]
[-22.49699020 98.43382263]
[-13.09895802 86.74292755]
[1.68946612 84.23244476]
[14.41802502 92.16552734]
[29.34132576 93.68047333]
[44.26462936 95.19542694]
[43.90116119 87.70423889]
[31.53103638 79.22013092]
[19.16090965 70.73603058]
[10.26631832 68.44536591]
[6.63535166 61.96553802]
[-5.56792927 53.24315643]
[-25.66953468 52.25012207]
[-33.00098419 34.38869858]
[-45.53330231 26.14606285]
[-58.06561661 17.90342903]
[-70.59793854 9.66079330]
[-86.99188232 9.24795723]
[-94.59260559 -5.28342581]
[-85.58112335 -18.98471451]
[-69.22768402 -17.76119614]
[-62.35530090 -2.87152338]
[-49.82298279 5.37111139]
[-37.29066467 13.61374569]
[-24.75834846 21.85638046]
[-14.91768646 18.88894653]
[-4.86523485 21.91671181]
[1.98109889 30.16406250]
[3.15445185 41.03987503]
[15.35773277 49.76225662]
[27.64501381 58.36590576]
[40.01514053 66.85000610]
[52.38526535 75.33411407]
[69.05895233 57.65652084]
[91.36463165 49.46993637]
[91.07376099 34.47275543]
[90.78289032 19.47557831]
[90.49201965 4.47839832]
[90.20114899 -10.51878166]
[89.91027832 -25.51596069]
[77.10565186 -34.28072739]
[71.93002319 -48.90921021]
[76.37351990 -63.77645493]
[88.72753143 -73.16570282]
[104.24168396 -73.46659851]
[116.95047760 -64.56344604]
[121.96711731 -49.87967682]
[117.36260223 -35.06151199]
[104.90746307 -25.80683136]
[105.19833374 -10.80965137]
[105.48919678 4.18752813]
[105.78006744 19.18470764]
[106.07093811 34.18188858]
[106.36180878 49.17906570]
[120.81237030 53.20165634]
[128.81044006 40.51185989]
[136.80850220 27.82206345]
[136.90336609 11.42319012]
[151.28462219 3.54211593]
[165.15808105 12.28621387]
[164.25190735 28.66030502]
[149.49830627 35.82012939]
[141.50022888 48.50992584]
[133.50216675 61.19972229]
[140.04924011 69.13499451]
[144.79727173 78.10230255]
[147.60134888 87.70734406]
[148.40061951 97.54014587]
[147.21853638 107.19252777]
[144.15968323 116.27503204]
[139.40319824 124.43266296]
[150.70474243 134.29548645]
[162.00627136 144.15830994]
[173.30781555 154.02111816]
[188.79280090 157.26547241]
[193.29454041 171.46348572]
[204.59608459 181.32630920]
[215.89761353 191.18913269]
[227.19915771 201.05194092]
[237.17315674 194.11317444]
[248.64384460 189.81002808]
[260.92160034 188.45434570]
[273.25500488 190.17915344]
[284.87698364 194.92741394]
[295.05233765 202.45249939]
[303.12429810 212.33059692]
[308.55685425 223.98435974]
[310.97006226 236.71656799]
[310.16632080 249.75178528]
[324.45004272 254.33168030]
[338.73376465 258.91156006]
[354.63793945 254.91287231]
[365.85714722 266.87368774]
[360.85006714 282.48971558]
[344.76751709 285.69656372]
[334.15386963 273.19528198]
[319.87014771 268.61538696]
[305.58642578 264.03549194]
[296.62905884 276.06735229]
[305.11315918 288.43746948]
[313.71679688 300.72476196]
[322.43917847 312.92803955]
[331.16156006 325.13131714]
[337.08297729 328.24710083]
[340.05914307 333.16122437]
[339.97470093 337.98120117]
[348.21734619 350.51351929]
[363.76916504 352.14907837]
[374.59396362 363.43438721]
[375.58059692 379.04080200]
[366.26321411 391.59948730]
[351.04122925 395.18060303]
[337.10192871 388.09326172]
[331.02706909 373.68389893]
[335.68502808 358.75613403]
[327.44238281 346.22381592]
[318.95828247 333.85369873]
[310.23590088 321.65042114]
[301.51351929 309.44714355]
[295.03369141 305.81616211]
[292.74304199 296.92156982]
[284.25894165 284.55145264]
[265.36215210 290.19198608]
[245.93481445 288.48513794]
[228.70161438 279.83184814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[5 113]
[6 112]
[8 110]
[9 109]
[10 108]
[11 107]
[15 30]
[16 29]
[17 28]
[18 27]
[43 69]
[44 68]
[45 67]
[47 66]
[48 65]
[50 61]
[51 60]
[52 59]
[53 58]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[91 100]
[92 99]
[93 98]
[125 134]
[126 133]
[127 132]
[135 158]
[136 157]
[137 155]
[138 154]
[139 153]
[142 152]
[143 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
