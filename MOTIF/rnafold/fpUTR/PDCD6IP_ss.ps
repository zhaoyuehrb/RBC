%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGAGCUCCCGGAAGUUGCCGGACCCGGAACGCAGGCGGAGCGCAAGUCUGUCAGCCAGUCAGUCCGCCAGUCCGCCAGCCCAGUACCUCUCUCUCCUCGGCCCUCGUAAGCUGUCCGCGGUCUGUUUGGCCCGAACGGCGGCGGAGGCGCUGAUC\
) } def
/len { sequence length } bind def

/coor [
[164.66958618 118.55707550]
[149.88063049 116.04969788]
[135.09169006 113.54232025]
[120.30273438 111.03495026]
[105.51377869 108.52757263]
[97.62569427 110.39843750]
[90.45862579 105.82179260]
[75.72209930 103.02272034]
[60.98557281 100.22364807]
[48.01502228 108.84934235]
[33.10996628 105.80075073]
[24.96661568 93.38215637]
[10.23009109 90.58308411]
[-4.50643492 87.78401184]
[-19.24295998 84.98493958]
[-25.68314552 86.82397461]
[-31.23383331 85.32254028]
[-34.50131226 81.77317047]
[-49.11575317 78.39409637]
[-63.73019028 75.01501465]
[-78.91864014 79.44464111]
[-89.57577515 69.03912354]
[-104.19020844 65.66004944]
[-118.80464935 62.28097153]
[-133.41908264 58.90188980]
[-148.03352356 55.52281189]
[-159.40132141 61.68999100]
[-171.52981567 58.53797531]
[-178.02551270 48.29397202]
[-192.57034302 44.62681198]
[-204.48091125 54.39638138]
[-219.68260193 55.26914597]
[-232.33367920 47.11964035]
[-237.69593811 33.24938202]
[-252.24076843 29.58222198]
[-267.51376343 33.71090698]
[-277.96322632 23.09686470]
[-292.50805664 19.42970657]
[-307.05288696 15.76254749]
[-321.59771729 12.09538841]
[-336.14254761 8.42822933]
[-350.68734741 4.76107073]
[-363.25579834 14.06529427]
[-378.86117554 13.06231689]
[-390.13513184 2.22571397]
[-391.75442505 -13.32780170]
[-382.95449829 -26.25433540]
[-367.89041138 -30.45037460]
[-353.67492676 -23.93467712]
[-347.02020264 -9.78375435]
[-332.47537231 -6.11659575]
[-317.93054199 -2.44943690]
[-303.38571167 1.21772206]
[-288.84091187 4.88488102]
[-274.29608154 8.55204010]
[-260.06341553 4.16105604]
[-248.57360840 15.03739643]
[-234.02877808 18.70455551]
[-222.73138428 9.03466129]
[-207.72877502 7.85742331]
[-194.75805664 15.83324718]
[-188.90318298 30.08198547]
[-174.35835266 33.74914551]
[-157.78887939 28.03739929]
[-144.65444946 40.90837479]
[-130.04000854 44.28745270]
[-115.42556763 47.66653061]
[-100.81113434 51.04560852]
[-86.19669342 54.42468643]
[-72.05356598 49.75336456]
[-60.35111237 60.40057755]
[-45.73667145 63.77965546]
[-31.12223434 67.15873718]
[-16.44388580 70.24841309]
[-1.70736098 73.04748535]
[13.02916431 75.84655762]
[27.76568985 78.64563751]
[39.89524460 70.07769775]
[54.88005066 72.70642853]
[63.78464508 85.48712158]
[78.52117157 88.28619385]
[93.25769806 91.08526611]
[108.02115631 93.73861694]
[122.81010437 96.24599457]
[137.59906006 98.75337219]
[152.38801575 101.26074982]
[167.17695618 103.76811981]
[171.03863525 96.57917023]
[176.38769531 90.43389130]
[182.95407104 85.63356018]
[190.40823364 82.41180420]
[198.37771606 80.92317963]
[206.46569824 81.23583221]
[214.27081299 83.32834625]
[221.40698242 87.09113312]
[227.52262878 92.33213806]
[232.31790161 98.78665161]
[235.55941772 106.13066101]
[237.09158325 113.99710083]
[236.84411621 121.99425507]
[250.95631409 127.07810974]
[265.06851196 132.16197205]
[279.18072510 137.24581909]
[293.29293823 142.32968140]
[307.45468140 147.27388000]
[321.66458130 152.07792664]
[335.87448120 156.88197327]
[350.08438110 161.68601990]
[361.63909912 151.66424561]
[376.56018066 148.79061890]
[390.82147217 153.73854065]
[400.62573242 165.08457947]
[403.41561890 179.71612549]
[417.62551880 184.52017212]
[431.83541870 189.32421875]
[446.04531860 194.12826538]
[460.25521851 198.93231201]
[475.80648804 196.02233887]
[485.38534546 207.42825317]
[499.59524536 212.23229980]
[508.78173828 212.02050781]
[514.03680420 217.27418518]
[528.14898682 222.35804749]
[542.26123047 227.44189453]
[556.37341309 232.52575684]
[571.44451904 227.02644348]
[585.06512451 235.50340271]
[586.78668213 251.45381165]
[575.28857422 262.64190674]
[559.39117432 260.48510742]
[551.28955078 246.63796997]
[537.17736816 241.55410767]
[523.06512451 236.47024536]
[508.95294189 231.38639832]
[494.79119873 226.44219971]
[480.58129883 221.63815308]
[466.04641724 224.89173889]
[455.45117188 213.14221191]
[441.24127197 208.33816528]
[427.03137207 203.53411865]
[412.82147217 198.73007202]
[398.61157227 193.92602539]
[387.51559448 203.86305237]
[372.83786011 206.93228149]
[358.49981689 202.21139526]
[348.38342285 190.87316895]
[345.28033447 175.89591980]
[331.07043457 171.09187317]
[316.86053467 166.28781128]
[302.65063477 161.48376465]
[295.26760864 162.32519531]
[288.20907593 156.44189453]
[274.09686279 151.35803223]
[259.98468018 146.27416992]
[245.87246704 141.19032288]
[231.76025391 136.10646057]
[214.59536743 150.68823242]
[192.00292969 152.21319580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[7 82]
[8 81]
[9 80]
[12 77]
[13 76]
[14 75]
[15 74]
[18 73]
[19 72]
[20 71]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[29 63]
[30 62]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[100 156]
[101 155]
[102 154]
[103 153]
[104 152]
[105 150]
[106 149]
[107 148]
[108 147]
[113 142]
[114 141]
[115 140]
[116 139]
[117 138]
[119 136]
[120 135]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
