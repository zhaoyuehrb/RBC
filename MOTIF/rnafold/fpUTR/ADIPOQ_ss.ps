%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGUUGAGGCUGGGCCAUCUCCUCCUCACUUCCAUUCUGACUGCAGUCUGUGGUUCUGAUUCCAUACCAGAGGAGACGGGAUUUCACCAUGUUGUCCAGGCUGGUCUGAAACUCCUGACAUCAGGGCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[111.33786011 164.66986084]
[104.77463531 178.15779114]
[90.42539978 182.52809143]
[77.45790863 174.98858643]
[74.15710449 160.35627747]
[82.63185120 147.97976685]
[88.48552704 134.16909790]
[81.03549957 133.30477905]
[69.27722931 142.61837769]
[57.51895905 151.93196106]
[45.76068878 161.24555969]
[34.00241470 170.55915833]
[31.72127533 183.31352234]
[21.66067314 190.82385254]
[9.58326530 189.47317505]
[-2.38699269 198.51269531]
[-14.35725117 207.55221558]
[-17.98886299 223.17883301]
[-32.53193283 229.95220947]
[-46.83026123 222.67640686]
[-49.91539383 206.93278503]
[-39.42068481 194.79850769]
[-23.39677048 195.58195496]
[-11.42651272 186.54243469]
[0.54374611 177.50291443]
[6.45060396 161.01861572]
[24.68881989 158.80088806]
[36.44709015 149.48728943]
[48.20536423 140.17369080]
[59.96363449 130.86009216]
[71.72190094 121.54650116]
[67.48414612 104.52359009]
[71.98162079 88.98283386]
[82.71121216 78.76342010]
[95.81772614 75.69541168]
[97.89007568 60.83925629]
[99.96241760 45.98309708]
[94.20589447 31.24630547]
[103.62734985 19.71004105]
[105.69969940 4.85388422]
[107.77204132 -10.00227261]
[109.84439087 -24.85842896]
[111.74501038 -39.73752975]
[113.47365570 -54.63758850]
[107.37828064 -69.23748779]
[116.53076172 -80.98828888]
[118.25940704 -95.88835144]
[119.98806000 -110.78840637]
[108.74130249 -121.31536102]
[105.88309479 -136.27143860]
[112.30367279 -149.88172913]
[125.35121155 -157.01612854]
[127.07986450 -171.91618347]
[120.98448944 -186.51608276]
[130.13696289 -198.26689148]
[131.86561584 -213.16694641]
[133.59425354 -228.06701660]
[135.32290649 -242.96707153]
[137.05155945 -257.86712646]
[138.78019714 -272.76718140]
[140.50885010 -287.66723633]
[134.41346741 -302.26715088]
[143.56594849 -314.01794434]
[145.29460144 -328.91799927]
[147.02323914 -343.81805420]
[148.75189209 -358.71813965]
[137.24229431 -369.12527466]
[134.08097839 -384.31692505]
[140.48350525 -398.45153809]
[153.98799133 -406.09408569]
[169.40168762 -404.30584717]
[180.79769897 -393.77444458]
[183.79403687 -378.54940796]
[177.23855591 -364.48507690]
[163.65194702 -356.98947144]
[161.92330933 -342.08941650]
[160.19465637 -327.18936157]
[158.46600342 -312.28930664]
[164.68502808 -298.75515747]
[155.40890503 -285.93859863]
[153.68025208 -271.03854370]
[151.95161438 -256.13848877]
[150.22296143 -241.23841858]
[148.49432373 -226.33836365]
[146.76567078 -211.43830872]
[145.03703308 -196.53823853]
[151.25604248 -183.00410461]
[141.97991943 -170.18754578]
[140.25128174 -155.28749084]
[151.31881714 -145.35534668]
[154.45277405 -130.63656616]
[148.24627686 -116.73214722]
[134.88812256 -109.05976105]
[133.15946960 -94.15970612]
[131.43081665 -79.25964355]
[137.64984131 -65.72550201]
[128.37371826 -52.90894318]
[126.64507294 -38.00888443]
[129.02027893 -30.93873405]
[124.70054626 -22.78608322]
[122.62819672 -7.92992687]
[120.55585480 6.92622948]
[118.48351288 21.78238678]
[124.38825989 35.45656586]
[114.81857300 48.05544281]
[112.74623108 62.91159821]
[110.67388153 77.76775360]
[129.88813782 96.37968445]
[122.59388733 127.44847107]
[131.90748596 139.20674133]
[141.22108459 150.96501160]
[150.53468323 162.72328186]
[161.50575256 163.36604309]
[170.10485840 169.84913635]
[173.59544373 179.80332947]
[171.03750610 189.80931091]
[179.79812622 201.98516846]
[188.55874634 214.16102600]
[197.31936646 226.33688354]
[206.07998657 238.51274109]
[221.24459839 244.75506592]
[223.15240479 261.04284668]
[209.84082031 270.62063599]
[195.00366211 263.63562012]
[193.90412903 247.27336121]
[185.14350891 235.09750366]
[176.38288879 222.92164612]
[167.62226868 210.74578857]
[158.86164856 198.56993103]
[140.71658325 192.04212952]
[138.77641296 172.03688049]
[129.46281433 160.27861023]
[120.14921570 148.52033997]
[110.83561707 136.76206970]
[103.38558960 135.89775085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[15 25]
[16 24]
[17 23]
[35 107]
[36 106]
[37 105]
[39 103]
[40 102]
[41 101]
[42 100]
[43 98]
[44 97]
[46 95]
[47 94]
[48 93]
[52 89]
[53 88]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[63 78]
[64 77]
[65 76]
[66 75]
[109 134]
[110 133]
[111 132]
[112 131]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
