%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGGCCAACUCUGCAGCUCGGUCCAGCCCUGCCCUUGGGGAGCCGGGGAGGGGCGGGAGAGGCUUUUCUGGAGCUCCUUCAAAGAAGAACUUGUACUUUUCUGAGAACGACGCUCCCAGACCUUGGGGUGUGCCCUUGUCUGGCAAAGGGCGGAGGCCCUGGCUGUGCCUCCGCGUGCUUCCGCCGCAGG\
) } def
/len { sequence length } bind def

/coor [
[141.16378784 473.27917480]
[137.09002686 466.27893066]
[136.11224365 458.14413452]
[138.46446228 450.19754028]
[143.83305359 443.76113892]
[139.73501587 429.33178711]
[135.63697815 414.90243530]
[128.30905151 427.99066162]
[114.33184052 433.43472290]
[100.08182526 428.75100708]
[92.05992126 416.07629395]
[93.92575073 401.19277954]
[104.82811737 390.89044189]
[119.79331207 389.86920166]
[131.99484253 398.59600830]
[129.56396484 383.79428101]
[127.13307190 368.99258423]
[124.70219421 354.19085693]
[122.27130890 339.38912964]
[119.84042358 324.58743286]
[110.14282990 313.28228760]
[115.54141235 298.41064453]
[113.11052704 283.60891724]
[110.89799500 281.86428833]
[109.24867249 279.13150024]
[108.54489136 275.62268066]
[109.08444977 271.68505859]
[111.03591919 267.76770020]
[109.57325745 252.83920288]
[108.11059570 237.91067505]
[106.52648163 222.99456787]
[104.82102203 208.09182739]
[103.11556244 193.18910217]
[101.41009521 178.28636169]
[99.70463562 163.38363647]
[97.99917603 148.48091125]
[96.29371643 133.57817078]
[94.58825684 118.67544556]
[87.70592499 115.06369781]
[82.78810120 109.04487610]
[80.62062073 101.58074951]
[81.54982758 93.86402893]
[85.42723846 87.12779236]
[91.63327026 82.44844818]
[90.90106964 67.46633148]
[90.16886139 52.48421097]
[89.43666077 37.50209427]
[88.70445251 22.51997375]
[87.97224426 7.53785610]
[79.57053375 -5.86817932]
[86.67734528 -18.95796585]
[85.94514465 -33.94008255]
[85.21293640 -48.92220306]
[84.48073578 -63.90431976]
[83.74852753 -78.88643646]
[83.01632690 -93.86856079]
[82.28411865 -108.85067749]
[65.84581757 -118.62322998]
[58.65852356 -136.18322754]
[63.45121384 -154.38697815]
[78.11833954 -165.94561768]
[76.65567017 -180.87413025]
[75.19300842 -195.80265808]
[73.73034668 -210.73117065]
[71.05565643 -214.19526672]
[69.76210022 -217.95326233]
[69.77146149 -221.53196716]
[70.85900116 -224.53291321]
[72.69084167 -226.67381287]
[72.20259857 -241.66586304]
[71.71435547 -256.65789795]
[71.22610474 -271.64996338]
[70.73786163 -286.64199829]
[70.12761688 -301.62960815]
[69.39541626 -316.61172485]
[68.66320801 -331.59384155]
[67.80909729 -346.56948853]
[66.83312225 -361.53771973]
[58.21431351 -374.80520630]
[65.10712433 -388.00894165]
[64.13114929 -402.97717285]
[63.15517807 -417.94537354]
[51.55933762 -428.34606934]
[50.78279114 -443.53985596]
[60.76971436 -454.53063965]
[59.79374313 -469.49884033]
[58.81777191 -484.46707153]
[57.84180069 -499.43527222]
[56.86582947 -514.40350342]
[55.88985825 -529.37170410]
[42.69804382 -537.54211426]
[36.85926056 -551.91876221]
[40.61864853 -566.97357178]
[52.53064346 -576.91760254]
[68.01483917 -577.92724609]
[81.11724854 -569.61419678]
[86.79972076 -555.17504883]
[82.87724304 -540.16192627]
[70.85807800 -530.34765625]
[71.83404541 -515.37945557]
[72.81002045 -500.41125488]
[73.78598785 -485.44302368]
[74.76196289 -470.47482300]
[75.73793030 -455.50659180]
[87.06748962 -445.90573120]
[88.27049255 -430.73974609]
[78.12339783 -418.92135620]
[79.09936523 -403.95312500]
[80.07534027 -388.98492432]
[88.62433624 -376.78802490]
[81.80133820 -362.51367188]
[82.77730560 -347.54547119]
[86.35517883 -341.06552124]
[83.64532471 -332.32604980]
[84.37753296 -317.34390259]
[85.10973358 -302.36178589]
[88.58165741 -295.82446289]
[85.72991180 -287.13024902]
[86.21816254 -272.13821411]
[86.70640564 -257.14614868]
[87.19464874 -242.15409851]
[87.68289185 -227.16204834]
[88.65886688 -212.19383240]
[90.12152863 -197.26531982]
[91.58419037 -182.33680725]
[93.04685211 -167.40827942]
[103.58495331 -163.67091370]
[112.00091553 -156.23167419]
[117.04943848 -146.14010620]
[117.96441650 -134.84179688]
[114.57495117 -123.97129822]
[107.33570099 -115.11569977]
[97.26623535 -109.58287811]
[97.99844360 -94.60076141]
[98.73064423 -79.61864471]
[99.46285248 -64.63652802]
[100.19505310 -49.65440750]
[100.92726135 -34.67228699]
[101.65946198 -19.69017029]
[110.00880432 -7.35575581]
[102.95436859 6.80565119]
[103.68656921 21.78776932]
[104.41877747 36.76988983]
[105.15097809 51.75200653]
[105.88318634 66.73412323]
[106.61538696 81.71624756]
[119.37937927 98.41925049]
[109.49098969 116.96997833]
[111.19644928 131.87271118]
[112.90190887 146.77545166]
[114.60736847 161.67817688]
[116.31282806 176.58090210]
[118.01828766 191.48364258]
[119.72375488 206.38636780]
[121.42921448 221.28910828]
[125.51955414 229.47389221]
[123.03910828 236.44801331]
[124.50177765 251.37654114]
[125.96443939 266.30505371]
[127.91224670 281.17803955]
[130.34312439 295.97976685]
[140.21458435 308.34362793]
[134.64213562 322.15655518]
[137.07302856 336.95825195]
[139.50390625 351.75997925]
[141.93478394 366.56170654]
[144.36567688 381.36340332]
[146.79655457 396.16513062]
[150.06632996 410.80441284]
[154.16436768 425.23376465]
[158.26240540 439.66311646]
[175.45883179 454.01898193]
[169.43927002 474.80319214]
[174.46746826 488.93533325]
[179.61051941 503.02606201]
[184.86807251 517.07446289]
[190.12562561 531.12292480]
[196.07328796 538.07611084]
[195.35238647 545.44299316]
[200.38058472 559.57513428]
[213.21046448 569.78918457]
[210.51254272 585.96484375]
[195.06221008 591.46209717]
[182.75344849 580.62573242]
[186.24844360 564.60333252]
[181.22026062 550.47119141]
[176.07720947 536.38049316]
[170.81965637 522.33203125]
[165.56208801 508.28363037]
[160.26513672 503.11322021]
[160.33532715 493.96353149]
[155.30712891 479.83139038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 171]
[6 170]
[7 169]
[15 168]
[16 167]
[17 166]
[18 165]
[19 164]
[20 163]
[22 161]
[23 160]
[28 159]
[29 158]
[30 157]
[31 155]
[32 154]
[33 153]
[34 152]
[35 151]
[36 150]
[37 149]
[38 148]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[51 139]
[52 138]
[53 137]
[54 136]
[55 135]
[56 134]
[57 133]
[61 126]
[62 125]
[63 124]
[64 123]
[69 122]
[70 121]
[71 120]
[72 119]
[73 118]
[74 116]
[75 115]
[76 114]
[77 112]
[78 111]
[80 109]
[81 108]
[82 107]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[173 192]
[174 191]
[175 189]
[176 188]
[177 187]
[179 186]
[180 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
