%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAUGGAGCGGCGCGGGCCGGGGGCCGCCACGGCGAGGGGCCGGGCCAGGCCGGGCGGAGCCAGAGCAGCUGAGUUCCAGAUAAAAACUGUCAGACCCGGCCUGUAGGCUGCUCCAUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[68.95645142 432.48049927]
[77.26464844 418.34170532]
[76.88465881 403.34649658]
[76.50466919 388.35131836]
[75.93476105 373.36215210]
[75.17501831 358.38140869]
[74.41528320 343.40066528]
[73.65554810 328.41989136]
[72.89580536 313.43914795]
[72.13607025 298.45840454]
[71.37633514 283.47766113]
[70.61659241 268.49691772]
[69.85685730 253.51617432]
[68.71785736 238.55947876]
[67.20033264 223.63642883]
[65.68280792 208.71339417]
[64.16528320 193.79035950]
[62.64776230 178.86730957]
[61.13023758 163.94427490]
[59.61271286 149.02124023]
[58.09518814 134.09819031]
[56.57766342 119.17515564]
[55.06013870 104.25211334]
[46.02954102 92.27512360]
[32.09974289 86.71088409]
[18.16995049 81.14663696]
[4.24015474 75.58238983]
[-9.82612705 70.37281036]
[-24.01986885 65.52124786]
[-38.21360779 60.66967392]
[-47.46337891 60.84549713]
[-52.70276260 55.51123810]
[-66.76904297 50.30165863]
[-80.83532715 45.09207916]
[-94.90161133 39.88249969]
[-110.02114868 45.24710846]
[-123.56557465 36.64896011]
[-125.14475250 20.68382072]
[-113.54728699 9.59877586]
[-97.66974640 11.89732552]
[-89.69203186 25.81621933]
[-75.62574768 31.02579880]
[-61.55946732 36.23537827]
[-47.49318314 41.44495392]
[-33.36203766 46.47593307]
[-19.16829872 51.32750320]
[-4.97455740 56.17907333]
[-0.27547073 54.86150360]
[5.29782152 56.56436157]
[9.80439854 61.65259933]
[23.73419380 67.21684265]
[37.66399002 72.78108215]
[51.59378433 78.34532928]
[58.40882874 75.21401215]
[52.14640427 61.58382416]
[65.77668762 55.32160950]
[72.03892517 68.95137787]
[78.85396576 65.82006073]
[83.70553589 51.62631989]
[88.55710602 37.43257904]
[93.40867615 23.23883820]
[98.26024628 9.04509735]
[102.93163300 -5.20896053]
[107.42207336 -19.52104950]
[111.91252136 -33.83313751]
[105.78900909 -48.66156006]
[113.69010925 -62.62408829]
[129.55477905 -65.00986481]
[141.21299744 -53.98872757]
[139.72157288 -38.01514816]
[126.22460938 -29.34269142]
[121.73416901 -15.03060246]
[117.24372101 -0.71851373]
[118.25486755 6.68979597]
[112.45398712 13.89666748]
[107.60241699 28.09040833]
[102.75084686 42.28414917]
[97.89927673 56.47789001]
[93.04770660 70.67163086]
[109.05139923 75.14086151]
[118.26846313 86.40774536]
[132.58055115 81.91729736]
[146.89263916 77.42684937]
[161.20472717 72.93640137]
[169.87718201 59.43944168]
[185.85076904 57.94802475]
[196.87190247 69.60624695]
[194.48612976 85.47090912]
[180.52360535 93.37200928]
[165.69517517 87.24848938]
[151.38308716 91.73893738]
[137.07099915 96.22938538]
[122.75891113 100.71983337]
[117.38659668 117.42143250]
[100.78340912 126.44410706]
[81.23083496 121.17826843]
[69.98317719 102.73458862]
[71.50070190 117.65763092]
[73.01822662 132.58067322]
[74.53575134 147.50370789]
[76.05327606 162.42675781]
[77.57080078 177.34979248]
[79.08832550 192.27282715]
[80.60585022 207.19587708]
[82.12337494 222.11891174]
[83.64089966 237.04194641]
[87.29307556 242.77439880]
[87.39704132 248.60110474]
[84.83760834 252.75642395]
[85.59734344 267.73718262]
[86.35707855 282.71792603]
[87.11681366 297.69866943]
[87.87655640 312.67941284]
[88.63629150 327.66015625]
[89.39602661 342.64093018]
[90.15576935 357.62167358]
[90.91550446 372.60241699]
[94.50998688 381.12701416]
[91.49985504 387.97131348]
[91.87984467 402.96652222]
[92.25983429 417.96170044]
[101.27348328 431.66156006]
[93.67506409 446.19415283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 121]
[3 120]
[4 119]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 97]
[24 53]
[25 52]
[26 51]
[27 50]
[28 47]
[29 46]
[30 45]
[32 44]
[33 43]
[34 42]
[35 41]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[63 73]
[64 72]
[65 71]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
