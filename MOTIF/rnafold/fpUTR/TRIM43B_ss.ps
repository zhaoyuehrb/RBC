%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCUUUGCAACUGGCUUUGGGGACUUCCGAAAGCUACCAGCACUGCACUGUGAGACUCUCAUCCCUGAGCUGAAUCCAUCUGAUUCGACAGCAAGCUUUGGUGAGAACAUAGAUAUAUUUCUGAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[79.76987457 136.92512512]
[84.80505371 122.79547119]
[93.53559113 110.60395813]
[79.56000519 116.05216980]
[73.14425659 130.24639893]
[58.89341736 135.57257080]
[45.40092850 129.36866760]
[31.42534447 134.81687927]
[17.44975853 140.26507568]
[13.41307259 155.13153076]
[1.53540742 164.65910339]
[-13.49709797 165.35749817]
[-25.90976715 157.16825867]
[-39.88535309 162.61647034]
[-53.86093903 168.06468201]
[-67.83652496 173.51289368]
[-81.81211090 178.96110535]
[-95.78769684 184.40930176]
[-109.76328278 189.85751343]
[-119.81068420 202.07882690]
[-134.47904968 199.49266052]
[-148.45463562 204.94087219]
[-156.19432068 218.99351501]
[-172.03044128 221.56193542]
[-183.81489563 210.67587280]
[-182.50762939 194.68617249]
[-169.11149597 185.85876465]
[-153.90284729 190.96528625]
[-139.92726135 185.51707458]
[-130.87948608 173.68545532]
[-115.21149445 175.88192749]
[-101.23590851 170.43371582]
[-87.26032257 164.98550415]
[-73.28473663 159.53730774]
[-59.30914688 154.08909607]
[-45.33356094 148.64088440]
[-31.35797691 143.19267273]
[-27.76299477 128.76304626]
[-16.22410583 119.10292053]
[-1.03193104 118.07763672]
[12.00154781 126.28949738]
[25.97713470 120.84128571]
[39.95272064 115.39307404]
[45.68632126 101.69412231]
[59.78194046 95.96977234]
[74.11179352 102.07658386]
[88.08737946 96.62837219]
[92.99469757 89.84642792]
[101.06920624 87.75578308]
[111.22146606 76.71351624]
[121.37371826 65.67124176]
[131.52597046 54.62897873]
[141.67823792 43.58670807]
[140.00430298 34.12775040]
[142.88688660 25.10991287]
[149.53944397 18.57008553]
[158.33987427 15.92201900]
[167.22463989 17.65192032]
[178.14439392 7.36799145]
[189.06413269 -2.91593814]
[199.98387146 -13.19986820]
[210.90361023 -23.48379707]
[221.82336426 -33.76772690]
[232.74310303 -44.05165482]
[232.44706726 -55.04967499]
[238.18376160 -64.17787170]
[247.81900024 -68.50025177]
[258.01577759 -66.78807068]
[269.41601562 -76.53662872]
[280.81625366 -86.28518677]
[292.21649170 -96.03374481]
[303.61676025 -105.78230286]
[314.15957642 -116.45230103]
[323.77072144 -127.96862030]
[333.38189697 -139.48493958]
[342.99304199 -151.00125122]
[352.60421753 -162.51757812]
[352.60125732 -178.56062317]
[365.23171997 -188.45259094]
[380.80661011 -184.60519409]
[387.37820435 -169.96983337]
[379.90530396 -155.77349854]
[364.12054443 -152.90641785]
[354.50936890 -141.39009094]
[344.89822388 -129.87377930]
[335.28704834 -118.35746002]
[325.67590332 -106.84114075]
[340.65985107 -107.53472137]
[352.70523071 -98.59557343]
[356.38232422 -84.05325317]
[350.03350830 -70.46308136]
[336.52072144 -63.95118332]
[321.93521118 -67.45296478]
[312.85174561 -79.38991547]
[313.36529541 -94.38205719]
[301.96505737 -84.63349915]
[290.56481934 -74.88494110]
[279.16458130 -65.13638306]
[267.76431274 -55.38782501]
[262.78881836 -36.76316833]
[243.02703857 -33.13191223]
[232.10728455 -22.84798431]
[221.18754578 -12.56405449]
[210.26780701 -2.28012466]
[199.34806824 8.00380516]
[188.42831421 18.28773499]
[177.50857544 28.57166481]
[173.49574280 48.76106644]
[152.72050476 53.73896790]
[142.56823730 64.78123474]
[132.41598511 75.82350159]
[122.26373291 86.86576843]
[112.11147308 97.90803528]
[126.64627075 94.20133972]
[141.63975525 94.64347839]
[155.93087769 99.20021057]
[168.41299438 107.51867676]
[178.11952209 118.95472717]
[184.29882812 132.62280273]
[186.47242737 147.46447754]
[184.47196960 162.33049011]
[178.45239258 176.06965637]
[168.87980652 187.61805725]
[156.49551392 196.08145142]
[142.25846863 200.80444336]
[127.27115631 201.42131042]
[112.69413757 197.88427734]
[99.65620422 190.46725464]
[89.16696930 179.74456787]
[82.03868103 166.54655457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 47]
[4 46]
[7 43]
[8 42]
[9 41]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[21 29]
[22 28]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[58 107]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
