%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCCUUGUGCGAUCUCCCAGACAUGAGAGCCCUGCUGGGCUUUCUGGCUCCUCCUCCGUGCAGAGUUGUCCCGUCAGGAGCCAGGAGGGGCGACGCUGGCUCCGUGGGAGGGUGAACAGUGGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[96.27227783 283.58578491]
[86.66683960 295.92553711]
[71.36605072 299.15350342]
[57.59447479 291.74554443]
[51.85463333 277.19949341]
[56.85670090 262.38348389]
[70.23885345 254.29325867]
[72.37357330 239.44593811]
[74.50830078 224.59861755]
[76.64302063 209.75129700]
[70.79575348 196.05242920]
[80.41827393 183.49386597]
[82.55299377 168.64654541]
[76.70572662 154.94767761]
[86.32823944 142.38909912]
[88.46296692 127.54178619]
[81.91591644 123.76171112]
[76.52801514 118.45857239]
[72.64460754 111.97228241]
[70.51461792 104.71860504]
[55.58253860 103.29276276]
[40.65045929 101.86692047]
[25.71837997 100.44107819]
[10.78630066 99.01523590]
[17.68470001 112.33485413]
[11.79557419 126.13043976]
[-2.59517193 130.36203003]
[-15.01443958 121.95003510]
[-16.42390633 107.01640320]
[-5.79720545 96.42911530]
[-20.45440865 93.24063110]
[-35.11161041 90.05215454]
[-49.76881409 86.86367798]
[-64.42601776 83.67519379]
[-79.08322144 80.48671722]
[-94.53042603 85.99270630]
[-106.84535217 75.16336823]
[-103.35945892 59.13899612]
[-87.65873718 54.40408707]
[-75.89473724 65.82951355]
[-61.23753738 69.01799011]
[-46.58033371 72.20647430]
[-31.92313194 75.39495087]
[-17.26592827 78.58343506]
[-2.60872602 81.77191162]
[12.21214199 84.08316040]
[27.14422035 85.50900269]
[42.07629776 86.93484497]
[57.00837708 88.36067963]
[71.94046021 89.78652191]
[90.57004547 71.66752625]
[116.34210968 75.00823212]
[127.44138336 64.91832733]
[138.54064941 54.82842255]
[149.63992310 44.73851776]
[160.73919678 34.64860916]
[171.83847046 24.55870628]
[182.93772888 14.46879959]
[187.94461060 -0.53925520]
[202.56675720 -3.37516069]
[213.66603088 -13.46506596]
[218.81166077 -31.09861946]
[236.03155518 -34.25833511]
[246.88755798 -44.60951996]
[257.61962891 -55.08915329]
[268.22622681 -65.69575500]
[272.51333618 -80.92504883]
[286.98394775 -84.45349121]
[297.59057617 -95.06009674]
[308.19717407 -105.66669464]
[318.80377197 -116.27330017]
[329.41036987 -126.87989807]
[340.01696777 -137.48649597]
[350.62356567 -148.09310913]
[361.23016357 -158.69970703]
[365.51727295 -173.92900085]
[379.98791504 -177.45744324]
[390.59451294 -188.06404114]
[388.03417969 -203.36843872]
[394.98864746 -217.23980713]
[408.78378296 -224.34434509]
[424.11502075 -221.95019531]
[435.08724976 -210.97796631]
[437.48141479 -195.64669800]
[430.37689209 -181.85157776]
[416.50549316 -174.89712524]
[401.20111084 -177.45744324]
[390.59451294 -166.85084534]
[387.06607056 -152.38020325]
[371.83676147 -148.09310913]
[361.23016357 -137.48649597]
[350.62356567 -126.87989807]
[340.01696777 -116.27330017]
[329.41036987 -105.66669464]
[318.80377197 -95.06009674]
[308.19717407 -84.45349121]
[297.59057617 -73.84689331]
[294.06213379 -59.37625122]
[278.83282471 -55.08915329]
[268.22622681 -44.48255157]
[265.69641113 -37.46007538]
[257.23873901 -33.75350952]
[246.38273621 -23.40232468]
[245.76129150 -11.26073837]
[236.71640015 -2.54674888]
[223.75593567 -2.36579585]
[212.65666199 7.72410965]
[208.44367981 22.01046753]
[193.02764893 25.56806946]
[181.92837524 35.65797424]
[170.82910156 45.74788284]
[159.72982788 55.83778763]
[148.63055420 65.92769623]
[137.53129578 76.01760101]
[126.43202209 86.10750580]
[129.22767639 93.88478088]
[129.78445435 102.13048553]
[128.05972290 110.21298981]
[124.18556976 117.51317596]
[118.45877838 123.47182465]
[111.31801605 127.63250732]
[103.31028748 129.67651367]
[101.17556763 144.52383423]
[106.87014008 159.28466797]
[97.40031433 170.78126526]
[95.26559448 185.62858582]
[100.96016693 200.38941956]
[91.49034119 211.88601685]
[89.35562134 226.73333740]
[87.22090149 241.58065796]
[85.08617401 256.42797852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 131]
[8 130]
[9 129]
[10 128]
[12 126]
[13 125]
[15 123]
[16 122]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[60 107]
[61 106]
[63 103]
[64 102]
[65 100]
[66 99]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
