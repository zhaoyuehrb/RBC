%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGAGGGGAGAGGUGGAGAGAGGGGAGUGUUGGAGGCGCAGAAGCCGAGCCGGGCCGGCCGGGCGGGCGGGGAGGAGGAGGAGCCGGGCGGGCUGGCGGGCGGCCGGGUGGCGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[108.75875854 201.54588318]
[107.28247070 216.47305298]
[103.67304993 231.03231812]
[98.00567627 244.92047119]
[90.39836884 257.84829712]
[81.00954437 269.54660034]
[70.03472137 279.77172852]
[57.70245361 288.31076050]
[44.26955795 294.98590088]
[30.01576614 299.65808105]
[15.23791409 302.23007202]
[0.24374484 302.64825439]
[-14.65449142 300.90396118]
[-29.14654160 297.03350830]
[-42.93061066 291.11746216]
[-55.71965408 283.27908325]
[-67.24733734 273.68154907]
[-77.27360535 262.52474976]
[-85.58965302 250.04104614]
[-92.02230835 236.49035645]
[-96.43761444 222.15490723]
[-98.74362183 207.33322144]
[-98.89230347 192.33396912]
[-96.88056946 177.46948242]
[-92.75030518 163.04931641]
[-86.58753967 149.37377930]
[-78.52059174 136.72766113]
[-68.71746063 125.37430573]
[-57.38230133 115.55014801]
[-44.75115585 107.45977020]
[-31.08707047 101.27165985]
[-16.67459297 97.11467743]
[-1.81386352 95.07538605]
[13.18564987 95.19626617]
[28.01158333 97.47478485]
[42.35519409 101.86351013]
[55.91777420 108.27103424]
[68.42482758 116.57006073]
[56.17974091 107.90647125]
[43.93465424 99.24288177]
[28.40151596 102.15787506]
[15.40406704 93.16666412]
[12.65346432 77.60357666]
[21.78158951 64.70191193]
[37.37289047 62.11600494]
[50.17732239 71.38002777]
[52.59824371 86.99779510]
[64.84333038 95.66138458]
[77.08842468 104.32497406]
[80.69660950 89.69855499]
[91.96719360 81.20014954]
[105.12467194 81.69583893]
[114.54003906 70.01890564]
[123.95541382 58.34197235]
[133.37078857 46.66503906]
[142.78614807 34.98810196]
[145.78495789 26.23857498]
[152.58781433 23.13993645]
[162.29364014 11.70329762]
[165.32388306 -3.82500648]
[179.45838928 -8.52235317]
[189.16423035 -19.95899010]
[198.87007141 -31.39562798]
[201.90029907 -46.92393112]
[216.03480530 -51.62128067]
[225.74064636 -63.05791855]
[235.44648743 -74.49455261]
[227.48614502 -87.35877228]
[223.89263916 -102.05373383]
[225.01803589 -117.13977814]
[230.75205994 -131.13893127]
[240.53295898 -142.67968750]
[253.40251160 -150.63140869]
[268.09988403 -154.21505737]
[283.18518066 -153.07955933]
[297.18048096 -147.33615112]
[308.71466064 -137.54751587]
[316.65777588 -124.67264557]
[320.23156738 -109.97287750]
[319.08596802 -94.88835907]
[313.33319092 -80.89690399]
[303.53680420 -69.36927032]
[290.65661621 -61.43480301]
[275.95446777 -57.87084579]
[260.87072754 -59.02655792]
[246.88311768 -64.78871918]
[237.17729187 -53.35207748]
[227.47145081 -41.91543961]
[225.13543701 -27.20516014]
[210.30670166 -21.68978882]
[200.60086060 -10.25315189]
[190.89501953 1.18348622]
[188.55902100 15.89376545]
[173.73028564 21.40913773]
[164.02444458 32.84577560]
[154.46308899 44.40347290]
[145.04771423 56.08041000]
[135.63233948 67.75733948]
[126.21697235 79.43428040]
[116.80160522 91.11121368]
[119.81449890 105.03447723]
[112.11053467 118.22294617]
[96.54164124 123.05831146]
[105.66059113 134.96817017]
[120.19348145 141.22163391]
[121.78742981 156.03070068]
[130.90638733 167.94055176]
[140.02534485 179.85041809]
[149.14430237 191.76026917]
[164.79472351 195.28784180]
[171.66470337 209.78552246]
[164.48417664 224.13194275]
[148.76142883 227.32174683]
[136.55761719 216.90798950]
[137.23443604 200.87922668]
[128.11547852 188.96936035]
[118.99652863 177.05950928]
[109.87757874 165.14965820]
[95.99694061 159.74806213]
[93.75074005 144.08711243]
[84.63178253 132.17726135]
[93.39105225 144.35409546]
[100.30648804 157.66487122]
[105.23406982 171.83239746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[38 49]
[39 48]
[40 47]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[58 95]
[59 94]
[61 92]
[62 91]
[63 90]
[65 88]
[66 87]
[67 86]
[103 121]
[104 120]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
