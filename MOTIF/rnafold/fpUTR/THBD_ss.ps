%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCCUCGCAGGGGCUGCGCGCAGCGGCAAGAAGUGUCUGGGCUGGGACGGACAGGAGAGGCUGUCGCCAUCGGCGUCCUGUGCCCCUCUGCUCCGGCACGGCCCUGUCGCAGUGCCCGCGCUUUCCCCGGCGCCUGCACGCGGCGCGCCUGGGUAAC\
) } def
/len { sequence length } bind def

/coor [
[107.41366577 116.84259796]
[100.00485992 118.00862885]
[93.76153564 131.64756775]
[95.05284882 147.41600037]
[82.72023773 155.76800537]
[76.47691345 169.40695190]
[70.23358917 183.04589844]
[63.99026489 196.68484497]
[57.74694061 210.32379150]
[56.65206528 227.24235535]
[40.09159851 230.87377930]
[32.01768875 215.96578979]
[44.10799408 204.08047485]
[50.35131836 190.44151306]
[56.59464264 176.80256653]
[62.83796692 163.16362000]
[69.08129120 149.52467346]
[67.34341431 134.73181152]
[80.12258911 125.40425110]
[86.36591339 111.76529694]
[87.24349976 96.79099274]
[82.63608551 82.51612854]
[78.02867889 68.24126434]
[73.42127228 53.96639633]
[63.41305923 49.54689026]
[57.63234329 40.51862335]
[57.79980850 30.01980782]
[63.61659241 21.54382133]
[59.56964111 7.10006142]
[55.52268982 -7.34369755]
[51.47573853 -21.78745651]
[40.12174988 -25.51010704]
[32.07432938 -34.17915344]
[29.26299095 -45.54492569]
[32.27861404 -56.73377609]
[40.25374603 -64.97455597]
[36.77341461 -79.56521606]
[33.29308319 -94.15587616]
[19.12059975 -100.19300079]
[11.31177139 -113.26493835]
[12.68130970 -128.25120544]
[22.49528885 -139.42367554]
[19.01495743 -154.01432800]
[15.53462696 -168.60498047]
[12.05429554 -183.19564819]
[8.57396507 -197.78630066]
[5.09363365 -212.37695312]
[-9.07884979 -218.41407776]
[-16.88767815 -231.48602295]
[-15.51813984 -246.47229004]
[-5.70416069 -257.64474487]
[-9.18449116 -272.23541260]
[-12.66482258 -286.82608032]
[-16.14515305 -301.41671753]
[-29.32553101 -309.71826172]
[-32.64723206 -324.56484985]
[-24.65176582 -337.07916260]
[-28.13209724 -351.66979980]
[-31.61242676 -366.26046753]
[-35.09275818 -380.85113525]
[-45.82085800 -392.47946167]
[-41.24771118 -406.65466309]
[-44.72804260 -421.24530029]
[-48.20837402 -435.83596802]
[-66.13996124 -442.37301636]
[-76.47853088 -458.23861694]
[-75.23626709 -476.98519897]
[-63.08897018 -491.12161255]
[-67.41697693 -505.48364258]
[-71.74497986 -519.84570312]
[-76.07298279 -534.20776367]
[-86.43228912 -547.62866211]
[-76.40361023 -561.29840088]
[-60.49187088 -555.44580078]
[-61.71093750 -538.53576660]
[-57.38293076 -524.17370605]
[-53.05492783 -509.81164551]
[-48.72692108 -495.44961548]
[-37.60640335 -493.81179810]
[-27.86804771 -488.09576416]
[-20.95384598 -479.10311890]
[-17.90433693 -468.12380981]
[-19.20216370 -456.75119019]
[-24.69613647 -446.65075684]
[-33.61771393 -439.31628418]
[-30.13738441 -424.72564697]
[-26.65705299 -410.13497925]
[-16.17789268 -399.55026245]
[-20.50209999 -384.33145142]
[-17.02177048 -369.74081421]
[-13.54143810 -355.15014648]
[-10.06110764 -340.55947876]
[2.72221947 -333.00155640]
[6.45961952 -318.25415039]
[-1.55449605 -304.89706421]
[1.92583501 -290.30639648]
[5.40616608 -275.71572876]
[8.88649750 -261.12509155]
[22.68685150 -255.58538818]
[30.67344666 -242.83085632]
[29.60580254 -227.64158630]
[19.68429184 -215.85728455]
[23.16462326 -201.26663208]
[26.64495277 -186.67597961]
[30.12528419 -172.08531189]
[33.60561752 -157.49465942]
[37.08594894 -142.90400696]
[50.88629913 -137.36430359]
[58.87289429 -124.60976410]
[57.80525208 -109.42050934]
[47.88373947 -97.63620758]
[51.36407089 -83.04554749]
[54.84440231 -68.45488739]
[70.97157288 -59.87063980]
[75.83547211 -41.93077850]
[65.91949463 -25.83440781]
[69.96644592 -11.39064884]
[74.01339722 3.05311012]
[78.06034851 17.49687004]
[92.85163116 29.90528870]
[87.69613647 49.35898972]
[92.30354309 63.63385391]
[96.91094971 77.90872192]
[101.51836395 92.18358612]
[108.54324341 86.26046753]
[119.41989136 85.23475647]
[131.29074097 90.81085968]
[140.70198059 103.21364594]
[150.83283997 114.27555084]
[160.96369934 125.33745575]
[175.99014282 130.28884888]
[178.88008118 144.90040588]
[189.01092529 155.96231079]
[199.14178467 167.02421570]
[209.27264404 178.08612061]
[219.40350342 189.14802551]
[229.64179993 200.11056519]
[239.98655701 210.97268677]
[250.33131409 221.83482361]
[266.20764160 225.94270325]
[270.32693481 241.81605530]
[258.45159912 253.12574768]
[242.79800415 248.23731995]
[239.46919250 232.17958069]
[229.12443542 221.31745911]
[218.77966309 210.45532227]
[211.85443115 207.76684570]
[208.34158325 199.27888489]
[198.21073914 188.21697998]
[188.07987976 177.15505981]
[177.94902039 166.09315491]
[167.81816101 155.03125000]
[153.51634216 150.87109375]
[149.90179443 135.46830750]
[139.77093506 124.40641022]
[129.64007568 113.34450531]
[122.23126984 114.51053619]
[131.65962219 126.17699432]
[126.27023315 140.17536926]
[111.45257568 142.50711060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[21 124]
[22 123]
[23 122]
[24 121]
[28 119]
[29 118]
[30 117]
[31 116]
[36 113]
[37 112]
[38 111]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[51 98]
[52 97]
[53 96]
[54 95]
[57 92]
[58 91]
[59 90]
[60 89]
[62 87]
[63 86]
[64 85]
[68 78]
[69 77]
[70 76]
[71 75]
[128 156]
[129 155]
[130 154]
[132 152]
[133 151]
[134 150]
[135 149]
[136 148]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
