%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCGGUAAAGUCUCGCGGUGCUGCCGGGCUCAGCCCCGUCUCCUCCUCUUGCUCCCUCGGCCGGGCGGCGGUGACUGUGCACCGACGUCGGCGCGGGCUGCACCGCCGCGUCCGCCCGCCCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[42.04961777 241.69805908]
[38.92342758 249.47285461]
[33.00388718 255.26950073]
[25.34241104 258.16485596]
[17.25786400 257.74191284]
[8.49939060 269.91931152]
[-0.25908235 282.09671021]
[6.64689779 295.75561523]
[6.40262890 311.05917358]
[-0.93575776 324.49075317]
[-13.68195438 332.96380615]
[-28.90697861 334.53137207]
[-43.11223221 328.83316040]
[-53.03345108 317.17864990]
[-56.39081192 302.24591064]
[-52.41281509 287.46640015]
[-42.01358032 276.23632812]
[-27.58277321 271.13629150]
[-12.43648529 273.33822632]
[-3.67801261 261.16082764]
[5.08046007 248.98342896]
[4.86964130 227.37741089]
[25.13707352 217.94055176]
[32.68893433 204.98025513]
[40.24079514 192.01995850]
[47.79265976 179.05966187]
[47.51511383 164.16763306]
[61.14809799 156.13941956]
[68.69995880 143.17910767]
[76.25182343 130.21881104]
[83.80368042 117.25851440]
[91.35554504 104.29821014]
[87.24358368 103.47415161]
[83.25354767 101.18041229]
[79.80425262 97.45912170]
[67.52270508 88.84729004]
[55.24115753 80.23545837]
[42.83261490 88.94200134]
[28.19377899 92.87650299]
[13.09236336 91.56385803]
[-0.64806491 85.16257477]
[-11.36828136 74.44563293]
[-17.77376747 60.70716476]
[-19.09103012 45.60615158]
[-15.16100311 30.96611404]
[-6.45825672 18.55490875]
[5.96631050 9.87125015]
[20.61237144 5.96373081]
[35.71134186 7.30420351]
[49.43994904 13.73079872]
[60.14039993 24.46747589]
[66.52055359 38.21772766]
[67.80998993 53.32114410]
[63.85298538 67.95391083]
[76.13453674 76.56574249]
[88.41607666 85.17757416]
[82.94072723 71.21260071]
[89.55809021 57.75115204]
[103.95990753 53.55737305]
[116.76979828 61.36163712]
[119.64783478 76.08294678]
[110.72064209 88.13670349]
[124.82285309 83.02518463]
[135.16043091 71.04832458]
[149.76255798 73.98548126]
[163.86477661 68.87396240]
[177.96699524 63.76244354]
[191.94258118 58.31423569]
[205.78349304 52.53246689]
[219.62442017 46.75069809]
[233.46534729 40.96892929]
[247.30627441 35.18716049]
[261.14718628 29.40539360]
[274.98812866 23.62362480]
[288.82904053 17.84185600]
[302.66995239 12.06008816]
[304.58856201 -4.31526947]
[314.42379761 -17.43111610]
[329.43362427 -23.78753471]
[345.51144409 -21.74759865]
[358.30960083 -11.95774078]
[372.00790405 -18.06974220]
[385.70620728 -24.18174362]
[395.15609741 -36.87071228]
[409.93161011 -34.99079514]
[423.62991333 -41.10279846]
[437.32821655 -47.21480179]
[446.51351929 -60.80015564]
[462.85006714 -59.36836624]
[469.53216553 -44.39233780]
[459.68588257 -31.27812004]
[443.44021606 -33.51649857]
[429.74191284 -27.40449715]
[416.04360962 -21.29249573]
[407.57348633 -9.04069805]
[391.81820679 -10.48344326]
[378.11990356 -4.37144184]
[364.42160034 1.74056005]
[363.89166260 15.44035435]
[357.46109009 27.62381935]
[346.34268188 35.87022781]
[332.68695068 38.51315689]
[319.16622925 34.97697449]
[308.45172119 25.90101051]
[294.61080933 31.68277931]
[280.76989746 37.46455002]
[266.92895508 43.24631500]
[253.08804321 49.02808380]
[239.24711609 54.80985260]
[225.40618896 60.59162140]
[211.56526184 66.37339020]
[197.72434998 72.15515900]
[195.08520508 76.24411774]
[189.80409241 78.66311646]
[183.07850647 77.86465454]
[168.97630310 82.97617340]
[154.87408447 88.08769226]
[145.54519653 99.69894409]
[129.93437195 97.12739563]
[115.83216095 102.23891449]
[104.31584167 111.85007477]
[96.76398468 124.81037140]
[89.21212006 137.77067566]
[81.66026306 150.73097229]
[74.10839844 163.69126892]
[73.84577942 179.51029968]
[60.75296021 186.61151123]
[53.20109558 199.57182312]
[45.64923477 212.53211975]
[38.09737396 225.49241638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 21]
[6 20]
[7 19]
[23 130]
[24 129]
[25 128]
[26 127]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[35 56]
[36 55]
[37 54]
[62 120]
[63 119]
[65 117]
[66 116]
[67 115]
[68 112]
[69 111]
[70 110]
[71 109]
[72 108]
[73 107]
[74 106]
[75 105]
[76 104]
[81 98]
[82 97]
[83 96]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
