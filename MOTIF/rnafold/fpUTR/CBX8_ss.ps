%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCGCCGGGAGGGGGAGGAGAACUGACGUCAGCGGGAGAGUAUUAUGGUCUGUCGUGCGCUGGCUGCUGCUUUUCUGCUCCUGGAAGCGGCCAAGGGGGGAAGCGGCGAGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[80.75057220 142.50546265]
[74.72071838 128.77081299]
[78.71711731 114.31298065]
[90.94290924 105.62565613]
[76.31898499 102.28784180]
[61.69506836 98.95002747]
[47.07114792 95.61221313]
[32.44723129 92.27439880]
[17.78052902 89.12990570]
[3.07359791 86.17927551]
[-11.63333225 83.22865295]
[-26.68586922 88.10017395]
[-37.64248657 78.01048279]
[-52.34941483 75.05986023]
[-67.05634308 72.10923004]
[-73.77847290 85.60916901]
[-83.75830841 96.90023804]
[-96.31105804 105.21675873]
[-110.57772064 109.99681854]
[-125.58388519 110.92027283]
[-140.30625916 107.93017578]
[-153.74246216 101.23622894]
[-164.97927856 91.30010986]
[-173.25469971 78.80364227]
[-178.00964355 64.60197449]
[-178.92565918 49.66509247]
[-193.63258362 46.71446991]
[-206.69123840 55.20618439]
[-221.56413269 52.00432587]
[-229.57920837 39.50256348]
[-244.28613281 36.55193710]
[-259.64212036 42.30744171]
[-272.13085938 31.67901421]
[-268.90499878 15.60027313]
[-253.28305054 10.61164665]
[-241.33551025 21.84500694]
[-226.62858582 24.79563141]
[-214.41146851 16.35301590]
[-199.45451355 19.13586235]
[-190.68196106 32.00753784]
[-175.97503662 34.95816422]
[-169.36830139 21.53055954]
[-159.50332642 10.26205730]
[-147.04804993 1.92474890]
[-132.84817505 -2.90804791]
[-117.86972046 -3.90121245]
[-103.13331604 -0.98105091]
[-89.64466095 5.65927029]
[-78.32588959 15.57249165]
[-69.95250702 28.08738136]
[-65.10030365 42.35417938]
[-64.10572052 57.40230179]
[-49.39879227 60.35292816]
[-34.69186020 63.30355453]
[-20.69126129 58.22098541]
[-8.68270779 68.52172089]
[6.02422333 71.47235107]
[20.73115349 74.42297363]
[27.99937630 72.63114166]
[35.78504562 77.65048218]
[50.40896225 80.98829651]
[65.03288269 84.32611084]
[79.65679932 87.66391754]
[94.28072357 91.00173187]
[109.15023041 92.97598267]
[124.13847351 93.56983185]
[139.12670898 94.16367340]
[154.11494446 94.75751495]
[169.10972595 95.15346527]
[184.10841370 95.35146332]
[199.10711670 95.54945374]
[214.10580444 95.74745178]
[229.10449219 95.94544220]
[244.10319519 96.14344025]
[259.10189819 96.34143066]
[274.10058594 96.53942871]
[289.09927368 96.73741913]
[304.09796143 96.93540955]
[319.09664917 97.13340759]
[332.99774170 89.57893372]
[345.62179565 97.48355865]
[360.62048340 97.68154907]
[366.74987793 94.70006561]
[372.56433105 95.27198029]
[376.39999390 98.30674744]
[391.36734009 99.29602814]
[406.33468628 100.28530121]
[418.05606079 89.68413544]
[433.83609009 90.55966949]
[444.31274414 102.39247131]
[443.27041626 118.16235352]
[431.32751465 128.51332092]
[415.56951904 127.30432129]
[405.34542847 115.25264740]
[390.37808228 114.26336670]
[375.41073608 113.27408600]
[360.42248535 112.68024445]
[345.42379761 112.48225403]
[332.59548950 120.05088043]
[318.89865112 112.13210297]
[303.89996338 111.93410492]
[288.90127563 111.73611450]
[273.90258789 111.53811646]
[258.90390015 111.34012604]
[243.90519714 111.14212799]
[228.90650940 110.94413757]
[213.90780640 110.74614716]
[198.90911865 110.54814911]
[183.91043091 110.35015869]
[168.91172791 110.15216064]
[162.09651184 113.24901581]
[153.52110291 109.74575806]
[138.53286743 109.15191650]
[123.54462433 108.55806732]
[108.55638885 107.96422577]
[118.09243011 119.54282379]
[118.17626190 134.54258728]
[108.77023315 146.22705078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 58]
[10 57]
[11 56]
[13 54]
[14 53]
[15 52]
[26 41]
[27 40]
[30 37]
[31 36]
[65 115]
[66 114]
[67 113]
[68 112]
[69 110]
[70 109]
[71 108]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[79 100]
[81 98]
[82 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
