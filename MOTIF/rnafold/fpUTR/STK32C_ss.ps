%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCACGCACGCGGCCAACGGUAGCAUCCGUUUUUCCGCGCCCGCGGCCUUGAAGGGGUGGUGGUCGACGGGCAAGUAGAGACCGCGAGGGUCUGGAGGGGCGACCGGCCUGGCACAGAGGGGAAGGAAGAGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[118.19184875 124.87979126]
[114.52674103 139.42514038]
[110.86164093 153.97047424]
[115.86059570 169.58914185]
[104.63513184 181.54409790]
[88.73305511 177.53712463]
[84.51304626 161.69024658]
[96.31629181 150.30537415]
[99.98139954 135.76002502]
[103.64650726 121.21468353]
[92.24041748 111.47296143]
[78.44750214 117.36833954]
[64.65458679 123.26371765]
[50.86166763 129.15908813]
[37.06875229 135.05447388]
[30.89012146 151.37812805]
[15.14329433 158.08901978]
[-0.29131705 151.50427246]
[-13.94848061 157.70764160]
[-27.60564423 163.91102600]
[-41.26280594 170.11439514]
[-54.91997147 176.31777954]
[-60.23785019 191.20051575]
[-74.55739594 197.88827515]
[-89.38307190 192.41334534]
[-95.91906738 178.02389526]
[-90.28769684 163.25692749]
[-75.82994843 156.87342834]
[-61.12334824 162.66061401]
[-47.46618271 156.45724487]
[-33.80902100 150.25386047]
[-20.15185738 144.05049133]
[-6.49469471 137.84710693]
[-3.67801762 125.22448730]
[6.05696630 116.41661072]
[19.28497505 114.82633972]
[31.17337608 121.26155090]
[44.96629333 115.36617279]
[58.75920868 109.47080231]
[72.55212402 103.57542419]
[86.34503937 97.68004608]
[99.30728149 90.13151550]
[111.24165344 81.04467010]
[123.17601776 71.95781708]
[135.11038208 62.87096405]
[147.04475403 53.78411484]
[147.21321106 29.26902580]
[164.89060974 12.62983036]
[188.89360046 13.91810513]
[198.50672913 2.40343356]
[208.11985779 -9.11123753]
[217.34004211 -20.94290161]
[226.15681458 -33.07815933]
[223.88682556 -48.48870087]
[233.00117493 -60.66997910]
[247.70675659 -62.73909760]
[256.52352905 -74.87435150]
[265.34030151 -87.00960541]
[267.19223022 -102.72205353]
[280.93276978 -108.47076416]
[289.74954224 -120.60601807]
[298.56631470 -132.74127197]
[307.38308716 -144.87652588]
[309.23501587 -160.58897400]
[322.97552490 -166.33767700]
[331.79229736 -178.47293091]
[340.60910034 -190.60818481]
[330.38644409 -214.04789734]
[346.20358276 -240.69384766]
[348.55010986 -255.50917053]
[339.05899048 -268.14617920]
[341.36614990 -283.78115845]
[354.10278320 -293.13815308]
[369.71249390 -290.66580200]
[378.93429565 -277.83093262]
[376.29708862 -262.24826050]
[363.36541748 -253.16265869]
[361.01892090 -238.34733582]
[367.66284180 -234.86763000]
[380.95068359 -227.90824890]
[387.59460449 -224.42855835]
[398.43652344 -234.79450989]
[409.27847290 -245.16044617]
[420.12039185 -255.52638245]
[430.96231079 -265.89233398]
[432.75833130 -281.83453369]
[446.41836548 -290.24777222]
[461.46362305 -284.67816162]
[466.35263062 -269.39819336]
[457.33496094 -256.12939453]
[441.32824707 -255.05039978]
[430.48632812 -244.68446350]
[419.64440918 -234.31852722]
[408.80249023 -223.95257568]
[397.96054077 -213.58663940]
[396.31539917 -200.65251160]
[390.55200195 -189.77059937]
[381.85324097 -182.11048889]
[371.67645264 -178.29339600]
[361.52740479 -178.35453796]
[352.74435425 -181.79141235]
[343.92755127 -169.65615845]
[335.11077881 -157.52090454]
[333.88949585 -142.67645264]
[319.51834106 -136.05975342]
[310.70156860 -123.92449188]
[301.88479614 -111.78923798]
[293.06802368 -99.65398407]
[291.84671021 -84.80953217]
[277.47555542 -78.19283295]
[268.65878296 -66.05757141]
[259.84201050 -53.92232132]
[262.41842651 -39.29708099]
[253.64984131 -26.86460876]
[238.29208374 -24.26137924]
[229.47529602 -12.12612343]
[229.70324707 -8.52919292]
[228.14732361 -4.64658260]
[224.69477844 -1.34277415]
[219.63453674 0.50189668]
[210.02140808 12.01656818]
[200.40826416 23.53123856]
[203.77835083 29.34077263]
[205.79661560 35.76284027]
[206.35823059 42.48663330]
[205.42910767 49.18519211]
[203.04777527 55.53126907]
[199.32388306 61.21334457]
[194.43313599 65.95091248]
[188.60905457 69.50832367]
[182.13183594 71.70648193]
[175.31478882 72.43188477]
[168.48928833 71.64244843]
[161.98858643 69.36988068]
[156.13160706 65.71848297]
[144.19723511 74.80533600]
[132.26286316 83.89218140]
[120.32849884 92.97903442]
[108.39413452 102.06588745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[42 139]
[43 138]
[44 137]
[45 136]
[46 135]
[49 122]
[50 121]
[51 120]
[52 116]
[53 115]
[56 112]
[57 111]
[58 110]
[60 108]
[61 107]
[62 106]
[63 105]
[65 103]
[66 102]
[67 101]
[69 78]
[70 77]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
