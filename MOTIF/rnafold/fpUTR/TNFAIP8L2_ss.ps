%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAAGCCAAAGGGCUCUCACACUAAGUGAAGCUUCUCCAUUCUGUAAGCUUUCCGGGAACAUCCAAGGCAAGACUGGCACCCAGCACAGCAGUGACUGACCACAUACCCCACUCUCCAGGACCC\
) } def
/len { sequence length } bind def

/coor [
[89.74928284 171.22062683]
[86.07646942 185.76402283]
[82.40365601 200.30741882]
[84.38765717 217.14488220]
[68.75744629 223.71241760]
[58.11968613 210.51112366]
[67.86025238 196.63459778]
[71.53307343 182.09120178]
[75.20588684 167.54780579]
[62.95833206 161.68768311]
[52.02964783 153.63114929]
[42.80895615 143.66506958]
[35.62455368 132.14430237]
[21.57916832 137.40997314]
[7.53378439 142.67562866]
[-6.51160049 147.94128418]
[-20.55698586 153.20693970]
[-27.58511543 159.21279907]
[-35.01543808 158.42443848]
[-49.18676758 163.34107971]
[-63.35810089 168.25772095]
[-77.52942657 173.17436218]
[-85.79418945 186.92475891]
[-101.71598816 188.89341736]
[-113.08100128 177.57017517]
[-111.17095184 161.64122009]
[-97.45106506 153.32591248]
[-82.44607544 159.00303650]
[-68.27474213 154.08639526]
[-54.10341263 149.16973877]
[-39.93208313 144.25309753]
[-25.82264519 139.16156006]
[-11.77725983 133.89590454]
[2.26812506 128.63023376]
[16.31350899 123.36457825]
[30.35889435 118.09892273]
[28.20132446 104.73336029]
[28.58558655 91.20022583]
[31.49807549 77.97862244]
[36.83568573 65.53662872]
[44.40945435 54.31470871]
[53.95124817 44.71015167]
[65.12327576 37.06298065]
[77.53001404 31.64391708]
[90.73223114 28.64480972]
[90.36122131 13.64939976]
[89.99020386 -1.34601152]
[81.91393280 -14.95058441]
[89.33406067 -27.86533928]
[88.96304321 -42.86075211]
[88.40659332 -57.85042572]
[87.66478729 -72.83206940]
[86.92298126 -87.81372070]
[78.51268005 -101.21436310]
[85.61109924 -114.30870056]
[84.86929321 -129.29034424]
[74.51851654 -144.45959473]
[83.00478363 -159.76766968]
[81.89264679 -174.72637939]
[80.78050232 -189.68508911]
[73.57644653 -205.03233337]
[86.32963562 -216.20339966]
[100.59455872 -207.04106140]
[95.73921967 -190.79722595]
[96.85135651 -175.83851624]
[97.96350098 -160.87980652]
[106.95700073 -152.68975830]
[107.94733429 -140.16271973]
[99.85093689 -130.03215027]
[100.59274292 -115.05050659]
[108.94998932 -102.72145081]
[101.90462494 -88.55552673]
[102.64643097 -73.57387543]
[103.38823700 -58.59223175]
[106.89902496 -51.99635696]
[103.95845795 -43.23176575]
[104.32947540 -28.23635674]
[112.37920380 -15.70435619]
[104.98561096 -1.71702790]
[105.35662842 13.27838326]
[105.72764587 28.27379417]
[133.75683594 36.45528793]
[156.22727966 55.10070419]
[169.43878174 81.13969421]
[184.24528503 78.73822021]
[199.05180359 76.33674622]
[213.82748413 73.75232697]
[228.57008362 70.98535919]
[243.31266785 68.21839142]
[255.39938354 57.13491440]
[270.95791626 62.31799316]
[273.98297119 78.43571472]
[261.36264038 88.90755463]
[246.07963562 82.96097565]
[231.33705139 85.72795105]
[216.59446716 88.49491882]
[210.53572083 92.86788940]
[201.45327759 91.14326477]
[186.64675903 93.54473877]
[171.84025574 95.94621277]
[171.91087341 102.50624847]
[171.38371277 109.04544067]
[170.26315308 115.50944519]
[168.55851746 121.84452820]
[166.28398132 127.99801636]
[163.45841980 133.91876221]
[160.10536194 139.55755615]
[156.25265503 144.86750793]
[151.93232727 149.80450439]
[147.18029785 154.32746887]
[142.03607178 158.39881897]
[149.48245239 171.42001343]
[164.92175293 172.97166443]
[176.47793579 183.32707214]
[179.70739746 198.50436401]
[173.36836243 212.66757202]
[159.89830017 220.37063599]
[144.47674561 218.65158081]
[133.03358459 208.17143250]
[129.96894836 192.95999146]
[136.46125793 178.86639404]
[129.01487732 165.84519958]
[122.77470398 168.25515747]
[116.33769226 170.07521057]
[109.75947571 171.28959656]
[103.09690094 171.88784790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 31]
[20 30]
[21 29]
[22 28]
[45 81]
[46 80]
[47 79]
[49 77]
[50 76]
[51 74]
[52 73]
[53 72]
[55 70]
[56 69]
[58 66]
[59 65]
[60 64]
[84 100]
[85 99]
[86 98]
[87 96]
[88 95]
[89 94]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
