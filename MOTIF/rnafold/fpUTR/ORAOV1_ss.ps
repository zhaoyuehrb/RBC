%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGUGCCGUUCUUACCCGGCCUGCCCCGCGCCGCCGCUUCCGGAAGUGGGUCUCGUCUCCUCCCAAGCGGAGCAUUUGUGCCUGAAGCUGCCGGGUCUGCUACGGCACCGCGGGGCUGCAGAAACCCGGGGGCCAAGGGCGGGCUGCUUGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[212.14387512 231.22940063]
[226.78215027 227.95494080]
[215.91685486 217.61351013]
[205.05154419 207.27207947]
[194.18624878 196.93064880]
[183.32093811 186.58921814]
[172.35400391 176.35562134]
[161.28649902 166.23088074]
[150.21900940 156.10614014]
[139.15150452 145.98139954]
[128.08399963 135.85664368]
[117.01651001 125.73190308]
[101.79264069 130.79737854]
[86.08386993 127.53240967]
[74.13931274 116.82013702]
[69.18986511 101.55815125]
[72.57431793 85.87469482]
[61.30894089 75.97058868]
[50.04356766 66.06648254]
[38.77819061 56.16237259]
[27.51281738 46.25826645]
[16.24744225 36.35416031]
[4.98206711 26.45005417]
[-7.95080090 26.49035454]
[-17.13505554 17.96479607]
[-17.99740982 5.86562061]
[-29.06490898 -4.25912476]
[-46.66472626 -0.08717414]
[-63.11820602 -7.21476364]
[-71.95705414 -22.63566971]
[-69.82899475 -40.12451935]
[-81.28784943 -49.80412292]
[-92.74669647 -59.48372269]
[-104.20555115 -69.16332245]
[-118.63008881 -64.07608795]
[-133.56567383 -66.87347412]
[-145.01959229 -76.70577240]
[-149.98097229 -90.85641479]
[-147.21185303 -105.49190521]
[-158.67071533 -115.17150879]
[-170.12956238 -124.85111237]
[-178.75392151 -128.02232361]
[-181.71673584 -134.83691406]
[-192.98211670 -144.74102783]
[-204.24748230 -154.64512634]
[-215.79896545 -151.57742310]
[-227.27365112 -154.46183777]
[-235.82585144 -162.46298218]
[-239.39297485 -173.49171448]
[-237.19232178 -184.74967957]
[-248.05763245 -195.09111023]
[-258.92294312 -205.43255615]
[-269.78823853 -215.77398682]
[-284.26321411 -210.80070496]
[-299.38961792 -213.13540649]
[-311.69146729 -222.24160767]
[-318.34194946 -236.02673340]
[-317.81277466 -251.32308960]
[-310.22555542 -264.61569214]
[-297.32382202 -272.84997559]
[-282.07223511 -274.13375854]
[-267.97555542 -268.17205811]
[-258.27304077 -256.33483887]
[-255.19432068 -241.34216309]
[-259.44680786 -226.63928223]
[-248.58149719 -216.29785156]
[-237.71620178 -205.95642090]
[-226.85089111 -195.61499023]
[-208.65228271 -197.20042419]
[-194.80097961 -184.80841064]
[-194.34338379 -165.91050720]
[-183.07800293 -156.00639343]
[-171.81263733 -146.10229492]
[-160.44996643 -136.30996704]
[-148.99110413 -126.63036346]
[-137.53225708 -116.95075989]
[-123.56556702 -122.12734985]
[-108.78468323 -119.60117340]
[-97.17610931 -109.95196533]
[-91.92147827 -95.69413757]
[-94.52595520 -80.62217712]
[-83.06710052 -70.94257355]
[-71.60824585 -61.26297379]
[-60.14939117 -51.58337402]
[-48.86233139 -56.21264267]
[-36.60681534 -55.57904816]
[-25.72974014 -49.74208450]
[-18.34041023 -39.76356125]
[-15.90156174 -27.51497459]
[-18.94016266 -15.32662392]
[-7.87266397 -5.20187855]
[9.42416096 -2.37498045]
[14.88617325 15.18467999]
[26.15154839 25.08878708]
[37.41692352 34.99289322]
[48.68230057 44.89699936]
[59.94767380 54.80110550]
[71.21305084 64.70521545]
[82.47842407 74.60932159]
[95.11546326 69.53964233]
[108.70404053 70.40385437]
[120.59701538 77.03360748]
[128.47753906 88.13737488]
[130.81044006 101.55206299]
[127.14125061 114.66440582]
[138.20875549 124.78914642]
[149.27624512 134.91389465]
[160.34375000 145.03863525]
[171.41125488 155.16337585]
[182.47874451 165.28813171]
[190.97109985 168.79759216]
[193.66236877 175.72390747]
[204.52767944 186.06533813]
[215.39297485 196.40676880]
[226.25828552 206.74819946]
[237.12358093 217.08963013]
[248.48625183 226.88197327]
[260.31857300 236.10131836]
[272.15087891 245.32066345]
[290.42135620 247.41000366]
[296.42626953 263.87551880]
[308.43841553 272.85928345]
[320.45056152 281.84304810]
[332.46273804 290.82681274]
[337.75280762 291.44943237]
[341.84085083 293.82864380]
[344.25411987 297.19830322]
[344.89920044 300.71591187]
[356.35806274 310.39550781]
[367.81692505 320.07510376]
[379.27578735 329.75469971]
[393.43072510 323.93267822]
[408.66885376 325.36718750]
[421.48855591 333.72860718]
[428.94400024 347.09555054]
[429.32192993 362.39639282]
[422.53549194 376.11511230]
[410.14422607 385.09924316]
[394.99548340 387.28427124]
[380.57037354 382.16815186]
[370.18365479 370.92648315]
[366.22216797 356.14254761]
[369.59616089 341.21356201]
[358.13732910 331.53396606]
[346.67846680 321.85437012]
[335.21960449 312.17477417]
[323.47894287 302.83895874]
[311.46679688 293.85519409]
[299.45465088 284.87142944]
[287.44250488 275.88766479]
[275.39492798 277.29821777]
[265.30526733 269.86618042]
[262.93154907 257.15298462]
[251.09922791 247.93362427]
[239.26690674 238.71427917]
[238.18963623 253.67555237]
[225.93655396 262.32781982]
[211.47703552 258.33758545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[26 91]
[27 90]
[31 84]
[32 83]
[33 82]
[34 81]
[39 76]
[40 75]
[41 74]
[43 73]
[44 72]
[45 71]
[50 68]
[51 67]
[52 66]
[53 65]
[117 155]
[118 154]
[119 153]
[121 150]
[122 149]
[123 148]
[124 147]
[128 146]
[129 145]
[130 144]
[131 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
