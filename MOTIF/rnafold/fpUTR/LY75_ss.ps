%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCGCGCUCAGCAGGCGGGGCGGGAGCCGCGUGCGCCCGAGGACCCGGCCGGAAGGCUUGCGCCAGCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[53.16787338 208.95889282]
[45.47572708 206.85179138]
[38.57449722 202.89128113]
[27.01679993 212.45263672]
[15.45910168 222.01399231]
[4.10417557 231.81530762]
[-7.04299688 241.85226440]
[-9.31514645 257.73361206]
[-23.22075653 265.73443604]
[-38.09263611 259.71722412]
[-42.52234650 244.29785156]
[-33.11179733 231.30473328]
[-17.07995605 230.70509338]
[-5.93278360 220.66813660]
[-2.98437119 213.64675903]
[5.89774132 210.45629883]
[17.45544052 200.89492798]
[29.01313782 191.33357239]
[27.12953758 167.89811707]
[42.10613251 149.49102783]
[65.86970520 146.51464844]
[73.09600830 133.37005615]
[80.32231140 120.22545624]
[87.54862213 107.08085632]
[87.44783020 93.09938812]
[99.30677795 85.69284058]
[106.53308868 72.54824066]
[113.75939178 59.40364075]
[120.98569489 46.25903702]
[128.21200562 33.11443710]
[121.29507446 22.30247498]
[119.76116943 9.63309956]
[123.85076904 -2.37836528]
[132.69421387 -11.37494946]
[144.49575806 -15.62049866]
[156.89791870 -14.33450508]
[165.19879150 -26.82832336]
[166.39112854 -42.60453796]
[179.87884521 -48.92359543]
[188.17971802 -61.41741562]
[196.48059082 -73.91123199]
[193.11146545 -89.35223389]
[201.71775818 -102.60769653]
[217.19352722 -105.81338501]
[230.35725403 -97.06742096]
[233.39913940 -81.55863953]
[224.51449585 -68.48811340]
[208.97441101 -65.61035919]
[200.67353821 -53.11654282]
[192.37266541 -40.62272263]
[191.77406311 -25.74015045]
[177.69259644 -18.52745056]
[169.39172363 -6.03363180]
[176.34619141 9.93834019]
[172.50363159 27.08685303]
[159.16770935 38.76612091]
[141.35659790 40.34074402]
[134.13029480 53.48534393]
[126.90399170 66.62994385]
[119.67768860 79.77454376]
[112.45137787 92.91914368]
[112.55216980 106.90061188]
[100.69322205 114.30715942]
[93.46691132 127.45175934]
[86.24060822 140.59635925]
[79.01430511 153.74096680]
[84.26020813 159.99328613]
[87.76148987 167.34507751]
[89.30255127 175.32194519]
[88.79396820 183.41172791]
[86.27759552 191.09741211]
[81.92330933 197.89018250]
[76.01755524 203.36042786]
[68.94454193 207.16502380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 14]
[7 13]
[21 66]
[22 65]
[23 64]
[24 63]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[36 53]
[37 52]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
