%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGAGCCGAAGGGUCCGAGGCGCUUGCGCAAGCGCGUGCUCCGCUGGUUGAAAGCGGAUCCGGGCUGGAGGCGGUGUCACGGUGUAUGAAUAUUGAUUACGCGUCGCAGCGCCCAGGGCCCAGCGCCCAGCCUCCAGUGCCCGCCCCUCUCGGCCGCCCGACGCUCUCUGCUCGCGCUUGGGCUCGCG\
) } def
/len { sequence length } bind def

/coor [
[105.52642059 274.75167847]
[103.75907135 259.85617065]
[108.40309906 245.59317017]
[118.60180664 234.59378052]
[132.47384644 228.88708496]
[147.46025085 229.52575684]
[160.79409790 236.39006042]
[154.12751770 222.95292664]
[147.46093750 209.51579285]
[140.79435730 196.07864380]
[134.12777710 182.64151001]
[127.35091400 169.25964355]
[120.46423340 155.93397522]
[113.57754517 142.60830688]
[106.69086456 129.28262329]
[102.04075623 131.14369202]
[96.96786499 132.24137878]
[91.60132599 132.48878479]
[86.08708191 131.82139587]
[80.58390808 130.20018005]
[75.25892639 127.61397552]
[62.35156631 135.25596619]
[49.44420624 142.89794922]
[36.53684235 150.53994751]
[23.62948227 158.18193054]
[15.69645405 171.87052917]
[0.80286252 171.69677734]
[-12.10449886 179.33876038]
[-25.01185989 186.98075867]
[-32.57929993 201.52949524]
[-48.97226334 201.97985840]
[-57.32707214 187.86853027]
[-49.04901886 173.71206665]
[-32.65385056 174.07339478]
[-19.74649048 166.43139648]
[-6.83912849 158.78941345]
[0.17067884 145.64741516]
[15.98749161 145.27458191]
[28.89485168 137.63258362]
[41.80221176 129.99060059]
[54.70957565 122.34860229]
[67.61693573 114.70661163]
[64.43393707 100.04821777]
[49.51958084 98.44757843]
[34.60522842 96.84693909]
[19.69087410 95.24629974]
[4.77651978 93.64566040]
[-6.36985779 104.61344147]
[-21.96243858 105.79895782]
[-34.63888168 96.64244080]
[-38.41376114 81.46732330]
[-31.50469017 67.43881989]
[-17.17392349 61.18077469]
[-2.18801022 65.64804077]
[6.37715912 78.73130798]
[21.29151344 80.33194733]
[36.20586777 81.93258667]
[51.12022018 83.53322601]
[66.03457642 85.13386536]
[73.19283295 77.00794220]
[82.01937866 71.66704559]
[91.54588318 69.34741974]
[100.81867218 69.97384644]
[104.95850372 55.55643463]
[109.09833527 41.13902283]
[113.23816681 26.72160721]
[117.37799835 12.30419445]
[121.28013611 -2.17935777]
[124.94353485 -16.72513008]
[128.60693359 -31.27090454]
[132.27032471 -45.81667709]
[135.93373108 -60.36244965]
[139.59712219 -74.90822601]
[143.26052856 -89.45399475]
[144.98376465 -104.35468292]
[144.73704529 -119.35265350]
[144.49034119 -134.35063171]
[144.24362183 -149.34860229]
[143.99691772 -164.34657288]
[132.92073059 -175.29899597]
[132.88418579 -190.51258850]
[143.39390564 -201.00454712]
[143.14720154 -216.00251770]
[142.65383911 -230.99440002]
[141.91397095 -245.97615051]
[141.17411804 -260.95788574]
[140.43424988 -275.93963623]
[139.69438171 -290.92138672]
[125.78099060 -297.29916382]
[116.43437195 -309.41937256]
[113.80232239 -324.49685669]
[118.48965454 -339.06695557]
[129.41926575 -349.78152466]
[144.07960510 -354.17846680]
[159.10183716 -351.24737549]
[171.03395081 -341.66180420]
[177.13404846 -327.62445068]
[176.00036621 -312.36099243]
[167.89341736 -299.37884521]
[154.67611694 -291.66122437]
[155.41598511 -276.67950439]
[156.15585327 -261.69775391]
[156.89572144 -246.71600342]
[157.63558960 -231.73426819]
[160.52359009 -227.91110229]
[161.02920532 -222.22906494]
[158.14517212 -216.24923706]
[158.39187622 -201.25125122]
[169.24101257 -191.11064148]
[169.70486450 -175.90408325]
[158.99488831 -164.59327698]
[159.24160767 -149.59530640]
[159.48831177 -134.59733582]
[159.73501587 -119.59936523]
[159.98173523 -104.60139465]
[166.70030212 -101.26810455]
[180.13743591 -94.60152435]
[186.85600281 -91.26823425]
[198.94761658 -100.14478302]
[211.03921509 -109.02133942]
[223.13081360 -117.89788818]
[226.97375488 -133.47387695]
[241.60723877 -140.04965210]
[255.80570984 -132.58084106]
[258.67730713 -116.79687500]
[248.01919556 -104.80586243]
[232.00737000 -105.80628967]
[219.91577148 -96.92973328]
[207.82415771 -88.05318451]
[195.73255920 -79.17662811]
[173.43856812 -76.36988068]
[157.80628967 -85.79060364]
[154.14289856 -71.24482727]
[150.47950745 -56.69905472]
[146.81610107 -42.15328217]
[143.15270996 -27.60750771]
[139.48930359 -13.06173420]
[135.82591248 1.48403955]
[137.47282410 5.98346901]
[136.29864502 11.56580353]
[131.79541016 16.44402504]
[127.65557861 30.86143875]
[123.51574707 45.27885056]
[119.37591553 59.69626617]
[115.23609161 74.11367798]
[129.89115906 97.04046631]
[120.01653290 122.39594269]
[126.90322113 135.72161865]
[133.78990173 149.04728699]
[140.67658997 162.37297058]
[147.40823364 168.57308960]
[147.56492615 175.97492981]
[154.23150635 189.41206360]
[160.89808655 202.84919739]
[167.56466675 216.28634644]
[174.23124695 229.72348022]
[183.61744690 236.39988708]
[184.59216309 246.58425903]
[193.56785583 258.60244751]
[202.54354858 270.62063599]
[211.51924133 282.63882446]
[220.49493408 294.65701294]
[229.47062683 306.67523193]
[238.54486084 318.61920166]
[247.71701050 330.48812866]
[256.88916016 342.35705566]
[272.24929810 340.91836548]
[285.93835449 348.03265381]
[293.58819580 361.42977905]
[292.75781250 376.83480835]
[283.71215820 389.33197021]
[269.33767700 394.93353271]
[254.22120667 391.85205078]
[243.18634033 381.07080078]
[239.75430298 366.03002930]
[245.02021790 351.52920532]
[235.84806824 339.66027832]
[226.67591858 327.79132080]
[220.08692932 324.41537476]
[217.45243835 315.65090942]
[208.47674561 303.63272095]
[199.50105286 291.61453247]
[190.52536011 279.59634399]
[181.54966736 267.57815552]
[172.57397461 255.55995178]
[172.67303467 270.55963135]
[166.47090149 284.21734619]
[155.11169434 294.01370239]
[140.69084167 298.14154053]
[125.86856079 295.83938599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 156]
[8 155]
[9 154]
[10 153]
[11 152]
[12 150]
[13 149]
[14 148]
[15 147]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[27 36]
[28 35]
[29 34]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[63 145]
[64 144]
[65 143]
[66 142]
[67 141]
[68 138]
[69 137]
[70 136]
[71 135]
[72 134]
[73 133]
[74 132]
[75 115]
[76 114]
[77 113]
[78 112]
[79 111]
[82 108]
[83 107]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[118 130]
[119 129]
[120 128]
[121 127]
[158 185]
[159 184]
[160 183]
[161 182]
[162 181]
[163 180]
[164 178]
[165 177]
[166 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
