%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAACUCUAGCGGGGCUAGAGCAAACAUUGGAUUAGCGGCAGCAGCCUGCCAGCCUGCCCGAGGAGUGCUGGGACCAGCGCGCUGCACGCCGACUGGCACG\
) } def
/len { sequence length } bind def

/coor [
[-55.91883850 269.59564209]
[-67.22780609 279.44995117]
[-65.99798584 294.80551147]
[-73.95284271 307.78909302]
[-87.86305237 313.53106689]
[-102.31407928 310.02310181]
[-113.62303925 319.87741089]
[-124.93200684 329.73171997]
[-136.24096680 339.58602905]
[-147.54992676 349.44033813]
[-158.85888672 359.29464722]
[-170.16786194 369.14895630]
[-178.13729858 384.11303711]
[-194.72276306 380.59753418]
[-195.93594360 363.68704224]
[-180.02215576 357.83999634]
[-168.71319580 347.98568726]
[-157.40423584 338.13137817]
[-146.09527588 328.27706909]
[-134.78631592 318.42276001]
[-123.47734833 308.56845093]
[-112.16838074 298.71414185]
[-113.66611481 283.91906738]
[-106.07489777 270.92529297]
[-92.12500763 264.82171631]
[-77.08210754 268.14096069]
[-65.77314758 258.28665161]
[-72.98423767 243.45703125]
[-75.82376862 227.19999695]
[-74.06389618 210.77767944]
[-67.83412933 195.46701050]
[-57.61183548 182.46057129]
[-44.18565750 172.77355957]
[-28.59468651 167.16471863]
[-12.04803181 166.07673645]
[4.16893435 169.60144043]
[18.79443741 177.47207642]
[29.15565300 166.62564087]
[39.51686859 155.77919006]
[49.71147156 144.77601624]
[59.73709106 133.61863708]
[69.76271057 122.46127319]
[79.78833008 111.30390167]
[89.81394958 100.14653015]
[92.49333954 92.38632965]
[100.31948853 88.80774689]
[110.68070221 77.96131134]
[120.87530518 66.95812225]
[130.90092468 55.80075455]
[140.92654419 44.64338303]
[150.43139648 33.03916168]
[159.39556885 21.01237488]
[168.35974121 8.98558903]
[177.32391357 -3.04119754]
[186.28808594 -15.06798458]
[195.06781006 -27.23007393]
[203.66104126 -39.52463913]
[206.07498169 -48.51569366]
[212.70854187 -52.05767059]
[221.67271423 -64.08445740]
[226.29049683 -80.39740753]
[243.24426270 -80.47596741]
[248.01301575 -64.20651245]
[233.69950867 -55.12028503]
[224.73533630 -43.09349823]
[215.95561218 -30.93140793]
[207.36238098 -18.63684082]
[206.08882141 -11.22551155]
[198.31486511 -6.10381079]
[189.35069275 5.92297602]
[180.38652039 17.94976234]
[171.42234802 29.97654915]
[162.45817566 42.00333405]
[162.68728638 45.68508148]
[161.03184509 49.65227127]
[157.38346863 52.96345139]
[152.08392334 54.66900253]
[142.05830383 65.82637787]
[132.03268433 76.98374939]
[129.86662292 84.18498993]
[121.52714539 88.32252502]
[111.16592407 99.16896057]
[100.97132111 110.17214966]
[90.94570160 121.32952118]
[80.92008209 132.48689270]
[70.89446259 143.64425659]
[60.86884308 154.80163574]
[57.37862015 163.43206787]
[50.36330795 166.14041138]
[40.00209045 176.98684692]
[29.64087677 187.83328247]
[36.93565750 199.34431458]
[41.42147064 212.20387268]
[42.86723709 225.73803711]
[41.20109940 239.23843384]
[36.51396942 251.99935913]
[29.05458260 263.35458374]
[19.21629524 272.71221924]
[7.51635218 279.58551025]
[-5.43131924 283.61822510]
[-18.94831276 284.60299683]
[-32.32729340 282.49206543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[37 91]
[38 90]
[39 89]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[46 82]
[47 81]
[48 79]
[49 78]
[50 77]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 67]
[57 66]
[59 65]
[60 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
