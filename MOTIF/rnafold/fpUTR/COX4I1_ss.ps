%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAGCCCGGCCCGGCAUUUUACGACGUUCGCAGCGCUACCCUUUUCCGCUCCACGGUGACCUCCGUGCGGCCGGGUGCGGGCGGAGUCUUCCUCGAUCCCGUGGUGCUCCGCGGCGCGGCCUUGCUCUCUUCCGGUCGCGGGACACCGGGUGUAGAGGGCGGUCGCGGCGGGCAGUGGCGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[83.28435516 317.06951904]
[83.18735504 301.26553345]
[94.35315704 290.08068848]
[94.10250854 275.08279419]
[86.15361786 262.48657227]
[93.65924072 248.55905151]
[93.40859222 233.56114197]
[93.15794373 218.56324768]
[80.58314514 207.40924072]
[79.94393921 190.27479553]
[92.12274170 177.73033142]
[91.62152100 162.73870850]
[91.12029266 147.74708557]
[90.61906433 132.75546265]
[90.11784363 117.76384735]
[89.19354248 132.73533630]
[80.63938904 145.05712891]
[66.93553162 151.15666199]
[52.05522919 149.26545715]
[40.31282806 139.93186951]
[35.11288071 125.86202240]
[37.96304321 111.13529205]
[48.03694916 100.02149963]
[62.41380310 95.74293518]
[76.92311096 99.53888702]
[62.83727264 94.38242340]
[48.75143433 89.22595978]
[39.59664154 89.21246338]
[34.47451782 83.86385345]
[20.47680664 78.47274017]
[6.47909832 73.08161926]
[-7.51861095 67.69050598]
[-21.51631927 62.29938507]
[-33.61338043 66.81155396]
[-45.16872406 62.01818466]
[-50.18653107 50.99774933]
[-64.09220123 45.37348557]
[-77.99787140 39.74922180]
[-87.14710236 39.42982864]
[-92.08763885 33.91304779]
[-105.89738464 28.05720901]
[-119.70713806 22.20137024]
[-133.51689148 16.34553146]
[-143.48075867 22.87411308]
[-155.23937988 23.76378441]
[-165.85386658 18.90848541]
[-172.72737122 9.62358856]
[-174.24021912 -1.70811903]
[-187.84658813 -8.02214050]
[-201.45294189 -14.33616161]
[-215.05931091 -20.65018272]
[-220.29771423 -20.17822075]
[-224.74186707 -21.62957764]
[-227.78929138 -24.37495804]
[-229.17704773 -27.63673592]
[-242.44990540 -34.62464905]
[-255.72277832 -41.61256409]
[-268.99563599 -48.60047913]
[-284.01422119 -43.67926407]
[-298.07583618 -50.89360046]
[-302.83798218 -65.96335602]
[-295.47537231 -79.94790649]
[-280.35610962 -84.55046844]
[-266.45019531 -77.04042053]
[-262.00772095 -61.87334824]
[-248.73486328 -54.88543320]
[-235.46200562 -47.89751816]
[-222.18913269 -40.90960693]
[-208.74528503 -34.25654602]
[-195.13893127 -27.94252586]
[-181.53256226 -21.62850380]
[-167.92619324 -15.31448269]
[-151.16423035 -22.63743782]
[-134.07171631 -15.27518940]
[-127.66104889 2.53578305]
[-113.85129547 8.39162254]
[-100.04154968 14.24746132]
[-86.23180389 20.10330009]
[-72.37360382 25.84355164]
[-58.46793747 31.46781540]
[-44.56226730 37.09207916]
[-27.34978104 33.71566010]
[-16.12520409 48.30167770]
[-2.12749434 53.69279480]
[11.87021446 59.08391190]
[25.86792374 64.47502899]
[39.86563492 69.86614227]
[53.90789795 75.14012146]
[67.99373627 80.29658508]
[82.07957458 85.45304871]
[72.19023132 74.17471313]
[59.42990494 66.28965759]
[52.74127197 52.86348343]
[54.13299942 37.92818451]
[63.18712997 25.96897507]
[77.18462372 20.57731247]
[91.92191315 23.37236214]
[102.97325134 33.51474762]
[107.01982117 47.95861435]
[102.84526062 62.36814880]
[103.07614136 77.36637115]
[110.06405640 64.09350586]
[117.05197144 50.82063675]
[124.03988647 37.54776764]
[131.02780151 24.27489662]
[138.01571655 11.00202847]
[136.83612061 -5.35464001]
[150.56156921 -14.32928562]
[165.07247925 -6.68956327]
[165.44128418 9.70543671]
[151.28858948 17.98994255]
[144.30067444 31.26281166]
[137.31275940 44.53568268]
[130.32484436 57.80855179]
[123.33692169 71.08142090]
[116.34900665 84.35428619]
[123.66738892 97.44784546]
[138.63389587 98.44973755]
[153.60040283 99.45162964]
[168.56689453 100.45351410]
[183.53340149 101.45540619]
[198.49990845 102.45729828]
[213.46641541 103.45918274]
[219.58821106 100.87821960]
[225.24087524 101.67177582]
[228.91362000 104.75286102]
[243.83828735 106.25429535]
[258.76296997 107.75572968]
[273.68762207 109.25716400]
[288.61230469 110.75859833]
[303.53695679 112.26003265]
[318.46163940 113.76146698]
[333.41925049 114.88837433]
[348.40039062 115.64003754]
[363.38156128 116.39169312]
[378.36270142 117.14335632]
[393.34387207 117.89501953]
[408.32501221 118.64668274]
[417.95812988 106.48186493]
[432.91079712 102.33494568]
[447.43344116 107.80051422]
[455.94180298 120.77693939]
[455.16424561 136.27452087]
[445.39971924 148.33412170]
[430.40292358 152.31858826]
[415.94042969 146.69580078]
[407.57336426 133.62783813]
[392.59219360 132.87617493]
[377.61105347 132.12451172]
[362.62988281 131.37284851]
[347.64874268 130.62118530]
[332.66757202 129.86952209]
[329.81130981 131.96875000]
[325.79019165 132.77784729]
[321.22680664 131.76179504]
[316.96020508 128.68614197]
[302.03552246 127.18470001]
[287.11087036 125.68326569]
[272.18618774 124.18183136]
[257.26153564 122.68039703]
[242.33685303 121.17896271]
[227.41218567 119.67752075]
[212.46452332 118.42568970]
[197.49801636 117.42379761]
[182.53150940 116.42190552]
[167.56501770 115.42002106]
[152.59851074 114.41812897]
[137.63200378 113.41623688]
[122.66549683 112.41435242]
[113.76333618 117.06394196]
[105.10946655 117.26261902]
[105.61069489 132.25424194]
[106.11191559 147.24586487]
[106.61314392 162.23748779]
[107.11436462 177.22911072]
[117.95325470 185.24497986]
[122.12937164 197.85781860]
[118.32879639 210.38552856]
[108.15585327 218.31259155]
[108.40649414 233.31050110]
[108.65714264 248.30841064]
[116.62396240 261.97735596]
[109.10041046 274.83215332]
[109.35105896 289.83004761]
[120.88436890 300.63552856]
[121.31550598 316.43392944]
[110.38869476 327.85235596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 184]
[4 183]
[6 181]
[7 180]
[8 179]
[11 175]
[12 174]
[13 173]
[14 172]
[15 171]
[25 90]
[26 89]
[27 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[36 81]
[37 80]
[38 79]
[40 78]
[41 77]
[42 76]
[43 75]
[48 72]
[49 71]
[50 70]
[51 69]
[55 68]
[56 67]
[57 66]
[58 65]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
[117 169]
[118 168]
[119 167]
[120 166]
[121 165]
[122 164]
[123 163]
[126 162]
[127 161]
[128 160]
[129 159]
[130 158]
[131 157]
[132 156]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
[138 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
