%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUUUGGUUCCGCUUCGCUGGCGCCCGCCGGGCUCUUCCCCCGCCGAGGCCUGUGGUUUGUGGAGUCGAAUUUCCCUGCCACCAGUGCCCGGUUAGCAGGGGCGCCAGCCUGGGCGCCUGCGCGGACGGCGGGCGUCGUCACC\
) } def
/len { sequence length } bind def

/coor [
[151.85699463 522.85546875]
[149.25227356 508.08334351]
[146.64755249 493.31121826]
[144.04283142 478.53912354]
[141.43811035 463.76699829]
[138.83338928 448.99487305]
[124.67416382 439.98342896]
[121.31129456 423.19656372]
[131.29154968 408.87362671]
[128.36518860 394.16186523]
[125.43883514 379.45007324]
[122.51248169 364.73828125]
[119.58612823 350.02651978]
[116.79704285 347.75405884]
[115.00531769 343.98428345]
[114.91779327 339.21780396]
[116.98280334 334.25839233]
[115.02490997 319.38671875]
[105.69255829 307.77825928]
[111.56238556 293.08624268]
[109.60449219 278.21456909]
[107.64659882 263.34289551]
[105.68870544 248.47120667]
[103.73081207 233.59954834]
[101.77291870 218.72787476]
[99.81502533 203.85620117]
[97.18053436 201.40618896]
[95.63920593 197.52729797]
[95.86360931 192.76530457]
[98.24855804 187.95158386]
[97.26750946 172.98368835]
[96.28646088 158.01580811]
[95.30541992 143.04792786]
[94.32437134 128.08004761]
[81.07127380 121.50360107]
[72.86676788 109.19181061]
[71.89912415 94.42842102]
[78.42642975 81.15105438]
[90.70774841 72.90100098]
[89.72669983 57.93312073]
[88.74565125 42.96523666]
[87.76460266 27.99735260]
[85.96904755 13.10520744]
[83.36432648 -1.66690898]
[80.75960541 -16.43902588]
[78.15488434 -31.21114159]
[73.55095673 -39.19013596]
[75.65814209 -46.33366394]
[73.37628937 -61.15908432]
[71.09444427 -75.98451233]
[68.65100861 -90.78415680]
[66.04628754 -105.55627441]
[63.44156265 -120.32839203]
[60.67586136 -135.07121277]
[57.74950790 -149.78298950]
[54.82315063 -164.49478149]
[51.89679718 -179.20655823]
[40.83555603 -183.80400085]
[33.47041321 -193.09773254]
[31.56099892 -204.67932129]
[35.47200775 -215.61877441]
[44.11045074 -223.20582581]
[41.82860184 -238.03125000]
[39.54674911 -252.85667419]
[37.26490021 -267.68209839]
[24.37301826 -276.82403564]
[21.80380249 -292.41809082]
[31.08152390 -305.21258545]
[46.70187378 -307.61679077]
[59.39757919 -298.20431519]
[61.63649750 -282.55941772]
[52.09032440 -269.96395874]
[54.37217331 -255.13851929]
[56.65402603 -240.31309509]
[58.93587494 -225.48768616]
[74.30492401 -215.64422607]
[77.73241425 -197.39492798]
[66.60857391 -182.13290405]
[69.53492737 -167.42112732]
[72.46128845 -152.70935059]
[75.38764191 -137.99757385]
[79.81098175 -132.00555420]
[78.21368408 -122.93311310]
[80.81840515 -108.16099548]
[83.42312622 -93.38887787]
[87.71469879 -87.30179596]
[85.91986084 -78.26635742]
[88.20171356 -63.44093704]
[90.48356628 -48.61551285]
[92.92699432 -33.81586456]
[95.53172302 -19.04374886]
[98.13644409 -4.27163172]
[100.74116516 10.50048447]
[111.65563202 0.21095358]
[126.53530884 2.10704923]
[134.52052307 14.80493832]
[129.78340149 29.03728294]
[115.78124237 34.41685104]
[102.73249054 27.01630592]
[103.71353912 41.98418808]
[104.69458008 56.95207214]
[105.67562866 71.91996002]
[118.92872620 78.49639893]
[127.13323212 90.80818939]
[128.10087585 105.57157898]
[121.57357025 118.84894562]
[109.29225159 127.09899902]
[110.27330017 142.06687927]
[111.25434875 157.03475952]
[112.23539734 172.00265503]
[113.21644592 186.97053528]
[114.68669891 201.89830017]
[116.64459229 216.76997375]
[118.60248566 231.64164734]
[120.56037903 246.51332092]
[122.51827240 261.38497925]
[124.47616577 276.25665283]
[126.43405914 291.12832642]
[135.90644836 303.80053711]
[129.89657593 317.42883301]
[131.85447693 332.30050659]
[134.29791260 347.10015869]
[137.22425842 361.81195068]
[140.15061951 376.52371216]
[143.07696533 391.23550415]
[146.00332642 405.94726562]
[158.02563477 412.11981201]
[164.18615723 423.92871094]
[162.42254639 436.93383789]
[153.60549927 446.39016724]
[156.21022034 461.16226196]
[158.81494141 475.93438721]
[161.41967773 490.70651245]
[164.02439880 505.47860718]
[166.62911987 520.25073242]
[180.89802551 526.11602783]
[189.71202087 538.77770996]
[190.25859070 554.19537354]
[182.36332703 567.44934082]
[168.54559326 574.31036377]
[153.21455383 572.58905029]
[141.26229858 562.83471680]
[136.50276184 548.15991211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[4 132]
[5 131]
[6 130]
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[17 121]
[18 120]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[26 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[39 102]
[40 101]
[41 100]
[42 99]
[43 93]
[44 92]
[45 91]
[46 90]
[48 89]
[49 88]
[50 87]
[51 85]
[52 84]
[53 83]
[54 81]
[55 80]
[56 79]
[57 78]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
