%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGAGCUGCGGGGAGCGCGGGGGCGGCCCGGAGCGUGCCGGGGUCCCCGCGCCUCGCUCGCCGGCCGCGCUCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[140.18284607 234.27363586]
[135.33964539 220.07704163]
[130.49644470 205.88044739]
[125.65323639 191.68383789]
[120.81002808 177.48724365]
[115.96681976 163.29064941]
[111.12361145 149.09405518]
[106.02192688 134.98828125]
[100.66346741 120.97804260]
[95.30500031 106.96779633]
[92.75153351 105.84687805]
[90.50469208 103.78910828]
[88.90200806 100.89643860]
[88.24149323 97.38923645]
[88.74132538 93.58991241]
[90.50634003 89.89334869]
[87.78178406 75.14286041]
[85.05723572 60.39237595]
[82.33267975 45.64189148]
[79.60813141 30.89140701]
[75.37971497 25.31422997]
[74.87166595 19.35076141]
[77.26457977 14.96727180]
[75.62401581 0.05725676]
[73.98344421 -14.85275745]
[72.34287262 -29.76277161]
[70.70230865 -44.67278671]
[69.06173706 -59.58280182]
[67.42117310 -74.49281311]
[65.78060150 -89.40283203]
[64.14003754 -104.31284332]
[62.49946594 -119.22286224]
[58.68944550 -125.09381104]
[58.61804962 -131.07846069]
[61.32455826 -135.27558899]
[60.77672958 -150.26557922]
[60.22890091 -165.25556946]
[59.68106842 -180.24555969]
[59.13323975 -195.23554993]
[47.38805008 -205.81033325]
[46.64389801 -221.59710693]
[57.34226990 -233.22982788]
[73.13601685 -233.80703735]
[84.65498352 -222.98626709]
[85.06517792 -207.18730164]
[74.12322998 -195.78338623]
[74.67105865 -180.79339600]
[75.21889496 -165.80339050]
[75.76672363 -150.81340027]
[76.31455231 -135.82341003]
[77.40948486 -120.86342621]
[79.05004883 -105.95341492]
[80.69062042 -91.04339600]
[82.33118439 -76.13338470]
[83.97175598 -61.22336960]
[85.61231995 -46.31335449]
[87.25289154 -31.40334129]
[88.89345551 -16.49332619]
[90.53402710 -1.58331132]
[92.17459869 13.32670307]
[94.35861206 28.16685295]
[97.08316803 42.91733932]
[99.80771637 57.66782379]
[102.53227234 72.41831207]
[105.25682068 87.16879272]
[109.31524658 101.60933685]
[114.67370605 115.61957550]
[120.03217316 129.62982178]
[126.16075897 136.72732544]
[125.32021332 144.25085449]
[130.16342163 158.44744873]
[135.00662231 172.64404297]
[139.84982300 186.84063721]
[144.69303894 201.03723145]
[149.53623962 215.23382568]
[154.37945557 229.43041992]
[169.46308899 232.32510376]
[181.06806946 242.38592529]
[186.07269287 256.90658569]
[183.13075256 271.98107910]
[173.03359985 283.55447388]
[158.49734497 288.51354980]
[143.43212891 285.52435303]
[131.89045715 275.39099121]
[126.97695923 260.83926392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 68]
[9 67]
[10 66]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
