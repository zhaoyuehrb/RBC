%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGCCGUGGAGGCGGAAGUGGCGCGGCCGCGGAGGGGCCUGGAGUGCGGCGGCGGCGGGACCCGGAGCAGGAGCGGCGGCAGCAGCGACUGGGGGCGGCGGCGGCGCGUUGGAGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[-94.69271088 288.54888916]
[-108.91261292 293.47415161]
[-123.13578033 289.13369751]
[-134.99742126 298.31527710]
[-146.85905457 307.49688721]
[-158.72068787 316.67846680]
[-170.58232117 325.86004639]
[-182.44395447 335.04165649]
[-194.30558777 344.22323608]
[-206.16723633 353.40481567]
[-218.02886963 362.58642578]
[-218.19522095 376.12261963]
[-226.04299927 386.91244507]
[-238.49974060 391.11529541]
[-250.90597534 387.39736938]
[-262.99639893 396.27554321]
[-269.09155273 411.49990845]
[-285.36007690 413.56539917]
[-295.06637573 400.34722900]
[-288.22537231 385.44311523]
[-271.87457275 384.18511963]
[-259.78414917 375.30694580]
[-257.98944092 358.63714600]
[-244.46147156 348.17361450]
[-227.21044922 350.72479248]
[-215.34881592 341.54318237]
[-203.48718262 332.36160278]
[-191.62554932 323.18002319]
[-179.76391602 313.99841309]
[-167.90228271 304.81683350]
[-156.04063416 295.63525391]
[-144.17900085 286.45364380]
[-132.31736755 277.27206421]
[-132.95420837 262.41500854]
[-124.62191010 249.88356018]
[-110.34140015 244.59959412]
[-95.51641846 248.78601074]
[-83.65477753 239.60441589]
[-77.95914459 223.05705261]
[-59.76404953 220.59320068]
[-48.13881302 211.11407471]
[-36.51358032 201.63493347]
[-24.88834381 192.15580750]
[-27.40285492 177.47442627]
[-22.19646263 163.41209412]
[-10.57350922 153.78019714]
[4.40839815 151.24263000]
[18.74240875 156.57962036]
[30.36764336 147.10047913]
[41.99287796 137.62135315]
[53.61811066 128.14222717]
[58.59242249 114.10279846]
[74.17729950 111.37841797]
[85.80252838 101.89928436]
[90.94809723 88.89871979]
[104.71833801 86.47547913]
[116.34357452 76.99634552]
[122.14939880 62.27891159]
[136.90275574 60.23254013]
[148.52798462 50.75341034]
[149.01930237 39.74376297]
[155.41113281 31.03885460]
[165.35328674 27.42503166]
[175.41349792 29.88894463]
[187.50392151 21.01078987]
[199.59434509 12.13263321]
[201.27435303 7.84382439]
[204.00286865 4.69174671]
[207.26863098 2.87124753]
[210.55099487 2.38166809]
[213.38764954 3.04208660]
[226.31422424 -4.56734991]
[239.24079895 -12.17678738]
[243.30825806 -27.21319580]
[256.52606201 -34.74610138]
[270.83590698 -30.77574158]
[283.76248169 -38.38517761]
[291.72998047 -52.05373764]
[306.62307739 -51.84243774]
[319.54968262 -59.45187759]
[327.15374756 -73.98149872]
[343.54779053 -74.39054108]
[351.86700439 -60.25821686]
[343.55331421 -46.12264633]
[327.15911865 -46.52529526]
[314.23251343 -38.91585922]
[307.18960571 -25.79157829]
[291.37191772 -25.45859909]
[278.44534302 -17.84916115]
[274.97219849 -3.41056848]
[261.97122192 4.49062634]
[246.85025024 0.74979299]
[233.92366028 8.35923004]
[220.99708557 15.96866703]
[208.47250366 24.22305679]
[196.38208008 33.10121155]
[184.29165649 41.97937012]
[177.96922302 60.18151093]
[158.00712585 62.37864304]
[146.38188171 71.85777283]
[141.40757751 85.89720154]
[125.82270050 88.62158203]
[114.19747162 98.10071564]
[109.05190277 111.10128021]
[95.28166199 113.52452087]
[83.65642548 123.00365448]
[77.85060120 137.72108459]
[63.09724426 139.76745605]
[51.47200775 149.24659729]
[39.84677505 158.72572327]
[28.22153854 168.20484924]
[30.56385994 183.31976318]
[25.06240082 197.48419189]
[13.28799152 206.93032837]
[-1.53453243 209.19941711]
[-15.40921307 203.78103638]
[-27.03444862 213.26017761]
[-38.65968323 222.73930359]
[-50.28491592 232.21842957]
[-52.39111710 245.01899719]
[-62.36492538 252.66986084]
[-74.47319031 251.46604919]
[-86.33482361 260.64764404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[15 22]
[16 21]
[37 123]
[38 122]
[40 119]
[41 118]
[42 117]
[43 116]
[48 111]
[49 110]
[50 109]
[51 108]
[53 106]
[54 105]
[56 103]
[57 102]
[59 100]
[60 99]
[64 97]
[65 96]
[66 95]
[71 94]
[72 93]
[73 92]
[76 89]
[77 88]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
