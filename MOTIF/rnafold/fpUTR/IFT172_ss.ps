%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUUGCUUCGCCGCAAAGUUACGUGUGACCUUGCGACGCGUGUUGCGCUCCGGUCGCAUAAGCGUCAGUGCCUGUCGCUGCGGCUGCGUGGCGGGUUGUCCAGGUAACCACGGGAGUUGUCGCUGUCUAGGAGCAUCUGAAAGACAGGUGUGCGUC\
) } def
/len { sequence length } bind def

/coor [
[96.99133301 175.34675598]
[96.30822754 160.36231995]
[95.62512970 145.37788391]
[88.14305878 145.89613342]
[81.55860901 159.37370300]
[74.97416687 172.85128784]
[68.38972473 186.32885742]
[61.80527496 199.80644226]
[67.17719269 214.66975403]
[60.39021301 228.94253540]
[45.47093964 234.15701294]
[31.27070236 227.21951294]
[26.21425819 212.24594116]
[33.30150223 198.11984253]
[48.32769775 193.22198486]
[54.91214371 179.74441528]
[61.49658966 166.26683044]
[68.08103180 152.78926086]
[74.66548157 139.31169128]
[69.95796967 133.79542542]
[66.31930542 127.79352570]
[63.78302765 121.49930573]
[62.34931564 115.10433960]
[61.98641968 108.79287720]
[62.63296127 102.73667908]
[47.75649643 100.81552124]
[32.88003540 98.89436340]
[18.00357246 96.97320557]
[3.12710857 95.05204773]
[-11.74935436 93.13088989]
[-26.62581825 91.20973206]
[-41.50228119 89.28858185]
[-60.67124557 98.78997040]
[-76.63938904 85.75914764]
[-91.60353851 84.72265625]
[-106.56768799 83.68616486]
[-121.53182983 82.64967346]
[-136.49597168 81.61317444]
[-151.46012878 80.57668304]
[-165.94931030 88.25755310]
[-179.70016479 79.32189178]
[-178.56698608 62.96194077]
[-163.71549988 56.00741959]
[-150.42362976 65.61254120]
[-135.45948792 66.64903259]
[-120.49533844 67.68552399]
[-105.53119659 68.72201538]
[-90.56704712 69.75850677]
[-75.60289764 70.79499817]
[-69.88105011 63.88525391]
[-61.48210526 60.35836029]
[-52.26722336 61.13449097]
[-44.34326172 66.16447449]
[-39.58112335 74.41211700]
[-24.70466042 76.33327484]
[-9.82819748 78.25442505]
[5.04826546 80.17558289]
[19.92472839 82.09674072]
[34.80119324 84.01789856]
[49.67765427 85.93905640]
[64.55411530 87.86021423]
[84.55812836 65.86301422]
[114.28670502 65.36367035]
[122.66640472 52.92258835]
[131.04611206 40.48150253]
[139.42581177 28.04041672]
[140.71786499 12.27205849]
[154.24528503 6.03840446]
[162.62498474 -6.40268087]
[171.00468445 -18.84376526]
[168.18815613 -34.16384888]
[176.86360168 -46.66150665]
[191.48631287 -49.25221634]
[199.86601257 -61.69330215]
[208.24571228 -74.13438416]
[216.62541199 -86.57546997]
[225.00511169 -99.01655579]
[212.44691467 -126.30719757]
[216.54347229 -140.73696899]
[220.64002991 -155.16673279]
[224.73658752 -169.59649658]
[228.83314514 -184.02626038]
[232.92971802 -198.45603943]
[237.02627563 -212.88580322]
[232.49456787 -228.64637756]
[244.07099915 -240.26181030]
[259.84674072 -235.78312683]
[263.59304810 -219.81762695]
[251.45603943 -208.78924561]
[247.35948181 -194.35946655]
[243.26292419 -179.92970276]
[239.16636658 -165.49993896]
[235.06979370 -151.07017517]
[230.97323608 -136.64039612]
[226.87667847 -122.21063232]
[239.14978027 -113.58676910]
[251.33708191 -122.33145905]
[263.52438354 -131.07615662]
[275.71170044 -139.82084656]
[287.89898682 -148.56553650]
[290.21618652 -164.19903564]
[302.95883179 -173.54785156]
[318.56695557 -171.06550598]
[327.78051758 -158.22473145]
[325.13330078 -142.64372253]
[312.19583130 -133.56642151]
[296.64367676 -136.37823486]
[284.45639038 -127.63354492]
[272.26907349 -118.88884735]
[260.08178711 -110.14415741]
[247.89447021 -101.39946747]
[237.44619751 -90.63685608]
[229.06649780 -78.19577026]
[220.68679810 -65.75468445]
[212.30709839 -53.31359863]
[203.92739868 -40.87251663]
[207.02223206 -26.34813690]
[198.70124817 -13.61173439]
[183.44577026 -10.46406460]
[175.06607056 1.97702062]
[166.68635559 14.41810608]
[165.99366760 29.29659462]
[151.86689758 36.42012024]
[143.48719788 48.86120605]
[135.10748291 61.30228806]
[126.72779083 73.74337769]
[131.89129639 78.43064117]
[136.21264648 84.13872528]
[139.48988342 90.71217346]
[141.55058289 97.95571136]
[142.25958252 105.63996887]
[141.52569580 113.50872803]
[139.30693054 121.28749084]
[135.61408997 128.69299316]
[130.51243591 135.44345093]
[138.89213562 147.88453674]
[147.27183533 160.32560730]
[155.65153503 172.76669312]
[164.03123474 185.20777893]
[172.41094971 197.64886475]
[180.79064941 210.08995056]
[196.19825745 214.56039429]
[202.17614746 229.44812012]
[194.13859558 243.33255005]
[178.25131226 245.56271362]
[166.70166016 234.42785645]
[168.34956360 218.46965027]
[159.96986389 206.02856445]
[151.59014893 193.58749390]
[143.21044922 181.14640808]
[134.83074951 168.70532227]
[126.45104980 156.26423645]
[118.07135010 143.82315063]
[110.58927917 144.34138489]
[111.97858429 159.27691650]
[113.36788940 174.21243286]
[118.40312195 188.34207153]
[106.77571869 197.81854248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[63 126]
[64 125]
[65 124]
[66 123]
[68 121]
[69 120]
[70 119]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 95]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[135 153]
[136 152]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
