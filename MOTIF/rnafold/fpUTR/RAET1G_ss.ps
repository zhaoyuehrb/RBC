%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAGAAGGAGUGCUAGAGUUUAGGGCUUACUGGAGUUUAGGGCUGCAUUCAGACGGGCUGCAUUCAGACAGCCUGCGAGCCGCCAGGUGAUCCACGGGCUGGGCUUCGCUUCUGCUGUCCCCUGCGAUCCAACUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[93.73088074 156.10086060]
[93.40136719 141.10447693]
[93.07185364 126.10810089]
[92.74234772 111.11171722]
[86.76306152 106.58422852]
[74.80449677 97.52924347]
[68.82521057 93.00175476]
[54.30139160 96.75125122]
[39.77757645 100.50074768]
[31.20710564 115.70834351]
[14.62548542 119.96635437]
[0.36081257 111.12420654]
[-14.07713318 115.19184875]
[-28.51507950 119.25949097]
[-39.69998550 130.44915771]
[-54.04853439 126.45310211]
[-68.48648071 130.52073669]
[-82.92442322 134.58837891]
[-97.36237335 138.65602112]
[-111.80031586 142.72366333]
[-122.98522186 153.91333008]
[-137.33377075 149.91728210]
[-151.77171326 153.98492432]
[-166.20967102 158.05256653]
[-180.64761353 162.12020874]
[-195.08555603 166.18785095]
[-202.59204102 180.09570312]
[-217.75798035 184.54203796]
[-231.58567810 176.88893127]
[-235.87142944 161.67683411]
[-228.07255554 147.93080139]
[-212.81599426 143.80613708]
[-199.15319824 151.74990845]
[-184.71525574 147.68226624]
[-170.27731323 143.61462402]
[-155.83935547 139.54698181]
[-141.40141296 135.47933960]
[-131.24920654 124.58061981]
[-115.86795807 128.28572083]
[-101.43001556 124.21807861]
[-86.99206543 120.15043640]
[-72.55412292 116.08279419]
[-58.11617661 112.01515198]
[-47.96397018 101.11643982]
[-32.58272171 104.82154846]
[-18.14477539 100.75390625]
[-3.70682955 96.68626404]
[0.98380440 84.63698578]
[11.93453884 77.40158081]
[25.24802399 77.82504272]
[36.02807999 85.97692871]
[50.55189896 82.22743225]
[65.07571411 78.47793579]
[107.73872375 84.69229889]
[120.78367615 77.28762817]
[125.08771515 62.31722260]
[138.42263794 54.99366379]
[152.66810608 59.18915939]
[165.71305847 51.78448868]
[178.75801086 44.37982178]
[186.94004822 30.83858871]
[201.82797241 31.28468704]
[214.87292480 23.88001823]
[227.91787720 16.47534752]
[240.96284485 9.07067680]
[241.48995972 -4.74669266]
[248.73538208 -16.39625931]
[260.70489502 -22.87504578]
[274.20349121 -22.57592010]
[285.68814087 -15.68489647]
[298.89260864 -22.80121613]
[312.09707642 -29.91753578]
[325.30154419 -37.03385544]
[338.50601196 -44.15017700]
[351.71047974 -51.26649475]
[356.38714600 -69.56262207]
[372.63522339 -78.54803467]
[390.01376343 -72.97644043]
[402.89291382 -80.66588593]
[415.77203369 -88.35533905]
[428.65118408 -96.04478455]
[441.44509888 -103.87523651]
[454.15222168 -111.84574890]
[466.85934448 -119.81626129]
[479.38830566 -128.06399536]
[491.73306274 -136.58496094]
[504.07781982 -145.10594177]
[507.18841553 -157.67546082]
[517.71038818 -164.50999451]
[529.66741943 -162.38150024]
[542.19635010 -170.62922668]
[554.72534180 -178.87696838]
[564.63061523 -192.63638306]
[580.59436035 -186.92718506]
[579.52746582 -170.00683594]
[562.97302246 -166.34800720]
[550.44409180 -158.10026550]
[537.91510010 -149.85253906]
[530.94873047 -133.78147888]
[512.59881592 -132.76118469]
[500.25402832 -124.24021149]
[487.90927124 -115.71923828]
[486.17541504 -111.19352722]
[481.53683472 -107.74372101]
[474.82986450 -107.10914612]
[462.12274170 -99.13862610]
[449.41561890 -91.16811371]
[445.38946533 -84.90081024]
[436.34063721 -83.16564178]
[423.46148682 -75.47618866]
[410.58233643 -67.78674316]
[397.70321655 -60.09729767]
[397.36114502 -48.60322952]
[391.42132568 -38.61664581]
[381.27673340 -32.70800781]
[369.41900635 -32.46373749]
[358.82681274 -38.06202698]
[345.62234497 -30.94570732]
[332.41787720 -23.82938766]
[319.21340942 -16.71306801]
[306.00894165 -9.59674740]
[292.80447388 -2.48042774]
[291.15350342 13.81643963]
[280.02334595 26.05936813]
[263.63198853 29.31575775]
[248.36750793 22.11563110]
[235.32255554 29.52030182]
[222.27760315 36.92497253]
[209.23263550 44.32964325]
[201.98367310 57.34124374]
[186.16268921 57.42477417]
[173.11773682 64.82944489]
[160.07278442 72.23411560]
[156.37242126 86.61614990]
[143.24845886 94.31137085]
[128.18835449 90.33258057]
[115.14339447 97.73725128]
[107.73872375 110.78220367]
[108.06823730 125.77858734]
[108.39774323 140.77496338]
[108.72725677 155.77134705]
[111.34061432 174.97604370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[7 53]
[8 52]
[9 51]
[12 47]
[13 46]
[14 45]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[54 137]
[55 136]
[58 133]
[59 132]
[60 131]
[62 129]
[63 128]
[64 127]
[65 126]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[75 117]
[78 112]
[79 111]
[80 110]
[81 109]
[82 107]
[83 106]
[84 105]
[85 102]
[86 101]
[87 100]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
