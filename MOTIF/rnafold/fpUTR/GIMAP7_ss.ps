%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACUUUUAACUCACAGUAAAAGCAAAAGCAACAGCUCAAGCAGCCUCCUUGGAGAAAACCUGAAAAUUCAACUUGUUCAAGAGAAGGUCUUGUACGUGCCUAAGUUCUAGAGCCUCCUGACGUGAGC\
) } def
/len { sequence length } bind def

/coor [
[106.04759216 223.98481750]
[102.10327148 238.66511536]
[92.83733368 250.71545410]
[79.66275787 258.29827881]
[64.58857727 260.25723267]
[49.91349030 256.29357910]
[37.87534714 247.01181030]
[30.30987358 233.82727051]
[28.37074852 218.75051880]
[32.35367584 204.08067322]
[41.65129089 192.05474854]
[54.84576797 184.50662231]
[69.92504883 182.58732605]
[73.83628845 168.10623169]
[77.74752045 153.62512207]
[81.65875244 139.14402771]
[85.56998444 124.66293335]
[81.26406860 118.52215576]
[70.88903046 129.35537720]
[60.51399231 140.18858337]
[54.58881760 153.96873474]
[41.12623596 160.58377075]
[26.59732437 156.85406494]
[17.98571968 144.57235718]
[19.43077660 129.64213562]
[30.23789597 119.23990631]
[45.21163940 118.36551666]
[58.93194199 112.30306244]
[72.65224457 106.24060822]
[68.34632874 100.09983826]
[53.39913559 98.84227753]
[38.45194244 97.58472443]
[23.85081863 105.05059052]
[10.23354149 95.91265869]
[11.60839939 79.57124329]
[26.56105614 72.83699799]
[39.70949936 82.63752747]
[54.65669250 83.89508820]
[69.60388184 85.15264130]
[81.12020111 75.54148102]
[82.55689240 60.61044312]
[83.99358368 45.67940521]
[85.43027496 30.74836731]
[82.98128510 24.43382454]
[84.00818634 18.71654510]
[87.31064606 15.14185810]
[89.46154785 0.29687247]
[91.61245728 -14.54811287]
[93.58520508 -29.41782188]
[95.37952423 -44.31011581]
[96.99514008 -59.22285461]
[98.43183136 -74.15389252]
[99.86852264 -89.08493042]
[101.30521393 -104.01596832]
[102.74190521 -118.94701385]
[104.17859650 -133.87805176]
[97.79864502 -148.35585022]
[106.71938324 -160.28353882]
[108.15607452 -175.21456909]
[98.86868286 -182.82418823]
[94.49643707 -193.87707520]
[96.03333282 -205.54200745]
[102.97555542 -214.89169312]
[113.47780609 -219.63742065]
[115.62871552 -234.48240662]
[117.77962494 -249.32739258]
[111.20204163 -264.34963989]
[121.13947296 -277.39489746]
[137.36915588 -275.04336548]
[143.19535828 -259.71408081]
[132.62460327 -247.17649841]
[130.47369385 -232.33151245]
[128.32279968 -217.48652649]
[140.14457703 -203.60453796]
[138.13102722 -185.16387939]
[123.08711243 -173.77787781]
[121.65042114 -158.84684753]
[128.13313293 -145.43701172]
[119.10964203 -132.44136047]
[117.67295074 -117.51032257]
[116.23625183 -102.57927704]
[114.79956055 -87.64823914]
[113.36286926 -72.71720123]
[111.92617798 -57.78616333]
[114.44197083 -50.75704956]
[110.27182007 -42.51580048]
[108.47750092 -27.62350845]
[110.82402039 -20.53608704]
[106.45744324 -12.39720726]
[104.30653381 2.44777846]
[102.15563202 17.29276466]
[100.36131287 32.18505859]
[98.92462158 47.11609650]
[97.48793030 62.04713440]
[96.05123901 76.97817230]
[103.44648743 74.96359253]
[111.66524506 75.44281769]
[119.83961487 78.70947266]
[127.00838470 84.75078583]
[132.22528076 93.22157288]
[134.67315674 103.45602417]
[147.89666748 110.53688812]
[161.20413208 117.45867920]
[174.59364319 124.22042084]
[187.98315430 130.98214722]
[203.61097717 127.35578918]
[216.10005188 137.42568970]
[215.86979675 153.46708679]
[203.09687805 163.17439270]
[187.57955933 159.10099792]
[181.22142029 144.37165833]
[167.83190918 137.60992432]
[154.44239807 130.84819031]
[146.97956848 130.63909912]
[140.81581116 123.76039886]
[127.59229279 116.67953491]
[120.70698547 119.65319824]
[128.91696167 132.20692444]
[139.69888306 142.63526917]
[137.00588989 157.39154053]
[123.23538971 163.33911133]
[110.64646912 155.18319702]
[110.44656372 140.18400574]
[106.93638611 125.60050964]
[100.05108643 128.57415771]
[96.13985443 143.05526733]
[92.22861481 157.53636169]
[88.31738281 172.01745605]
[84.40615082 186.49856567]
[96.46867371 195.74864197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 129]
[14 128]
[15 127]
[16 126]
[17 125]
[30 39]
[31 38]
[32 37]
[40 95]
[41 94]
[42 93]
[43 92]
[46 91]
[47 90]
[48 89]
[49 87]
[50 86]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[58 77]
[59 76]
[64 73]
[65 72]
[66 71]
[101 116]
[102 115]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
