%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:58 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TOMM7)
} def

/sequence { (\
CCUCCUUUCCCUUUCGGAUUCCCGACGCUGUGGUUGCUGUAAGGGGUCCUCCCUGCGCCACACGGCCGUCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 17 0.096838445 ubox
2 16 0.097169890 ubox
2 17 0.020897099 ubox
3 16 0.019167513 ubox
3 17 0.012851771 ubox
3 18 0.452300044 ubox
3 25 0.003513152 ubox
4 16 0.016375854 ubox
4 17 0.483461441 ubox
4 24 0.004014694 ubox
5 16 0.483145553 ubox
5 17 0.025967759 ubox
6 16 0.024817285 ubox
6 17 0.006508583 ubox
6 18 0.015869887 ubox
7 16 0.007975090 ubox
7 17 0.012987683 ubox
7 18 0.089240626 ubox
8 16 0.011185695 ubox
8 17 0.089803536 ubox
8 18 0.681446212 ubox
9 16 0.092053815 ubox
9 17 0.727677177 ubox
10 16 0.725559116 ubox
10 17 0.357627351 ubox
11 16 0.360813145 ubox
11 17 0.037423018 ubox
12 16 0.033884428 ubox
12 18 0.007382608 ubox
13 17 0.007187693 ubox
13 25 0.004337113 ubox
14 25 0.092394098 ubox
15 24 0.106010134 ubox
15 68 0.004316049 ubox
15 71 0.003701099 ubox
16 22 0.098336009 ubox
16 23 0.146974665 ubox
16 67 0.004472142 ubox
16 73 0.086239339 ubox
17 21 0.096976057 ubox
17 22 0.147572860 ubox
17 66 0.004463803 ubox
17 70 0.007885815 ubox
17 72 0.086858780 ubox
18 69 0.008005089 ubox
19 68 0.007856841 ubox
22 65 0.009893414 ubox
23 64 0.009919206 ubox
23 68 0.009771271 ubox
23 71 0.954178213 ubox
24 63 0.009889079 ubox
24 67 0.009881025 ubox
24 70 0.994013960 ubox
25 69 0.994620427 ubox
26 64 0.038066373 ubox
26 68 0.994743899 ubox
26 71 0.005041434 ubox
27 63 0.047349333 ubox
27 66 0.706545099 ubox
27 67 0.704411982 ubox
27 70 0.003210024 ubox
27 72 0.007830347 ubox
28 65 0.996215454 ubox
28 71 0.007799595 ubox
29 62 0.162339403 ubox
29 64 0.983837102 ubox
30 61 0.224199585 ubox
30 63 0.974166341 ubox
30 66 0.011594505 ubox
30 69 0.004358355 ubox
30 70 0.003962670 ubox
31 60 0.236650192 ubox
31 62 0.967841184 ubox
31 64 0.003709537 ubox
31 65 0.011602267 ubox
31 68 0.007320231 ubox
32 59 0.251718353 ubox
32 61 0.923813511 ubox
32 63 0.005194610 ubox
32 67 0.007886443 ubox
33 58 0.255742971 ubox
33 61 0.284427364 ubox
33 63 0.011629749 ubox
33 66 0.007895089 ubox
34 57 0.186951232 ubox
34 60 0.385262319 ubox
34 62 0.011181591 ubox
34 65 0.007883038 ubox
35 57 0.228811244 ubox
35 60 0.236332586 ubox
35 62 0.003907115 ubox
35 64 0.007693884 ubox
36 56 0.293877819 ubox
36 58 0.905316859 ubox
36 59 0.256430999 ubox
36 61 0.005519875 ubox
36 63 0.007572684 ubox
37 55 0.293789756 ubox
37 57 0.888595813 ubox
38 55 0.023905002 ubox
38 57 0.323443013 ubox
38 60 0.012917950 ubox
38 62 0.005896167 ubox
39 54 0.011936981 ubox
39 56 0.921795955 ubox
39 58 0.064322426 ubox
39 59 0.011346085 ubox
39 61 0.005888237 ubox
40 55 0.905448888 ubox
40 57 0.064479270 ubox
40 60 0.005651081 ubox
41 54 0.624058252 ubox
42 50 0.021369845 ubox
42 54 0.700273986 ubox
43 49 0.022058837 ubox
43 50 0.003405113 ubox
43 51 0.006682628 ubox
43 52 0.101478748 ubox
43 53 0.926384001 ubox
43 54 0.317268950 ubox
44 48 0.021705208 ubox
44 49 0.003564619 ubox
44 50 0.006774166 ubox
44 51 0.101545378 ubox
44 52 0.925721179 ubox
44 53 0.361116275 ubox
44 54 0.008476958 ubox
45 49 0.014081679 ubox
45 50 0.079399589 ubox
45 51 0.924154018 ubox
45 52 0.363353271 ubox
45 53 0.009507922 ubox
46 50 0.598640554 ubox
46 51 0.364332033 ubox
46 52 0.009472883 ubox
63 71 0.003838415 ubox
64 70 0.003957505 ubox
64 73 0.047849259 ubox
65 72 0.054413385 ubox
66 71 0.054293874 ubox
8 18 0.9500000 lbox
9 17 0.9500000 lbox
10 16 0.9500000 lbox
23 71 0.9500000 lbox
24 70 0.9500000 lbox
25 69 0.9500000 lbox
26 68 0.9500000 lbox
27 67 0.9500000 lbox
28 65 0.9500000 lbox
29 64 0.9500000 lbox
30 63 0.9500000 lbox
31 62 0.9500000 lbox
32 61 0.9500000 lbox
36 58 0.9500000 lbox
37 57 0.9500000 lbox
39 56 0.9500000 lbox
40 55 0.9500000 lbox
41 54 0.9500000 lbox
43 53 0.9500000 lbox
44 52 0.9500000 lbox
45 51 0.9500000 lbox
showpage
end
%%EOF
