%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCUUUCGCGGGGGCUGCUGGGGCGUAGGUGUCGGGGACGCGCGCACGGGCGCGCGCAGCUGUUGACGCGCUUCUUAGCUGGUGCGCGCCGGAGCCCAAAUUCCAAGUGGAAACUGCAGGCGCACGAGGGAGGAACGCGUGGAGC\
) } def
/len { sequence length } bind def

/coor [
[89.02185059 129.33073425]
[83.75968933 143.37742615]
[78.49752808 157.42411804]
[73.23536682 171.47080994]
[67.97320557 185.51751709]
[62.71104050 199.56420898]
[65.93951416 215.64242554]
[53.45251083 226.27288818]
[38.09558868 220.51988220]
[35.66663361 204.30162048]
[48.66434479 194.30204773]
[53.92650604 180.25535583]
[59.18866730 166.20864868]
[64.45082855 152.16195679]
[69.71298981 138.11526489]
[74.97515106 124.06856537]
[67.15790558 111.26658630]
[52.25865555 109.53101349]
[37.35939789 107.79543304]
[22.46014595 106.05986023]
[7.54342270 107.63826752]
[-6.66264582 112.45362091]
[-20.86871338 117.26897430]
[-35.07478333 122.08432770]
[-45.66067505 133.84228516]
[-60.19816208 130.60026550]
[-74.40422821 135.41561890]
[-84.80981445 148.09062195]
[-100.94316101 145.15003967]
[-106.20767212 129.61888123]
[-95.18766785 117.47426605]
[-79.21958160 121.20954132]
[-65.01351166 116.39418793]
[-55.44373703 104.98066711]
[-39.89013672 107.87825775]
[-25.68406677 103.06290436]
[-11.47799778 98.24755096]
[2.72807050 93.43220520]
[3.59585881 85.98257446]
[-8.43950367 77.02992249]
[5.33143520 71.08332062]
[6.19922304 63.63369370]
[-6.51963568 55.68192673]
[-19.23849487 47.73015594]
[-31.95735359 39.77838898]
[-44.67621231 31.82661819]
[-57.39507294 23.87484932]
[-70.11392975 15.92308044]
[-86.51303864 15.88798428]
[-94.44647217 1.53553760]
[-85.75299072 -12.36969185]
[-69.37570190 -11.52319622]
[-62.16216278 3.20422173]
[-49.44330215 11.15599060]
[-36.72444534 19.10775948]
[-24.00558472 27.05952835]
[-11.28672600 35.01129913]
[1.43213320 42.96306610]
[14.15099239 50.91483307]
[24.19572258 91.16060638]
[39.09497452 92.89617920]
[53.99423218 94.63175964]
[68.89348602 96.36733246]
[82.85881042 76.48798370]
[105.19818878 73.63140869]
[120.99893188 87.08015442]
[135.56013489 83.47861481]
[147.09887695 72.65418243]
[161.31158447 77.10929108]
[175.87280273 73.50775146]
[190.43400574 69.90620422]
[204.99522400 66.30465698]
[219.55644226 62.70311737]
[227.19718933 57.57201385]
[234.46260071 59.18258286]
[249.09651184 55.88883209]
[263.73040771 52.59508133]
[278.36431885 49.30133057]
[292.99822998 46.00757980]
[301.46737671 32.93427277]
[316.35516357 29.80240631]
[328.76635742 37.95700836]
[343.40026855 34.66325760]
[355.16464233 24.08450699]
[369.28027344 28.83827019]
[383.91418457 25.54452133]
[398.54809570 22.25077057]
[413.18197632 18.95701981]
[427.81588745 15.66326809]
[442.44979858 12.36951828]
[451.49609375 -2.56536913]
[468.20870972 -6.29679775]
[482.18710327 2.99924016]
[496.74832153 -0.60230440]
[511.30950928 -4.20384884]
[517.22857666 -18.42604637]
[530.23510742 -26.34330940]
[545.23229980 -25.09844017]
[556.48596191 -15.37770939]
[571.04718018 -18.97925377]
[585.60839844 -22.58079910]
[590.49151611 -37.21496201]
[602.52557373 -46.86818314]
[617.87054443 -48.46015167]
[631.62994385 -41.48287582]
[639.41320801 -28.16278076]
[638.73663330 -12.75026035]
[629.81622314 -0.16339159]
[615.49835205 5.58139944]
[600.35186768 2.65097117]
[589.20989990 -8.01958752]
[574.64874268 -4.41804266]
[560.08752441 -0.81649822]
[554.66278076 13.02944565]
[541.97509766 21.12182999]
[526.77746582 20.18053436]
[514.91107178 10.35736275]
[500.34985352 13.95890713]
[485.78863525 17.56045151]
[480.71661377 29.44813919]
[469.54614258 36.32866669]
[456.25836182 35.48549271]
[445.74356079 27.00342369]
[431.10964966 30.29717445]
[416.47573853 33.59092712]
[401.84182739 36.88467407]
[387.20791626 40.17842484]
[372.57403564 43.47217560]
[361.85635376 53.81533432]
[346.69400024 49.29716110]
[332.06011963 52.59091187]
[324.33959961 65.27669525]
[309.54565430 68.82549286]
[296.29196167 60.64148712]
[281.65808105 63.93523788]
[267.02416992 67.22898865]
[252.39025879 70.52273560]
[237.75634766 73.81649017]
[223.15797424 77.26432800]
[208.59677124 80.86587524]
[194.03555298 84.46741486]
[179.47434998 88.06896210]
[164.91313171 91.67050171]
[154.41592407 102.23732758]
[139.16168213 98.03982544]
[124.60047150 101.64136505]
[122.68045807 113.35605621]
[115.17337799 123.51627350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 63]
[18 62]
[19 61]
[20 60]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[27 32]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[66 146]
[67 145]
[69 143]
[70 142]
[71 141]
[72 140]
[73 139]
[75 138]
[76 137]
[77 136]
[78 135]
[79 134]
[82 131]
[83 130]
[85 128]
[86 127]
[87 126]
[88 125]
[89 124]
[90 123]
[93 119]
[94 118]
[95 117]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
