%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCUGCUCAAUCAAGUCAAAUACUGAACAACUUCCUGGCGGAGAGGCUGAGAAUUUUAUACUUGCUUGCUCGAAAGCACCCCAAAUAAGAUGAUCCACGCCAACACCUCCCCUUUACAGGUUUUAAAAUAUUCUUAUAACU\
) } def
/len { sequence length } bind def

/coor [
[60.08480072 554.38885498]
[46.27735519 560.51513672]
[31.30306053 562.50189209]
[16.37581062 560.18804932]
[2.70569110 553.76116943]
[-8.59912205 543.74230957]
[-16.62219810 530.94360352]
[-20.71314240 516.40258789]
[-20.54031944 501.29806519]
[-16.11774254 486.85446167]
[-7.80392599 474.24267578]
[3.72716379 464.48507690]
[17.54075432 458.37268066]
[32.51703644 456.40100098]
[34.81472015 441.57800293]
[37.11240387 426.75503540]
[23.55502129 420.43246460]
[12.31719589 410.53588867]
[4.31531715 397.86087036]
[0.20510443 383.43011475]
[0.32788065 368.41076660]
[4.68224287 354.02008057]
[12.92348480 341.42681885]
[24.39086723 331.65625000]
[38.16058731 325.50668335]
[53.12020111 323.48434448]
[55.41788483 308.66134644]
[57.71556854 293.83837891]
[60.01324844 279.01541138]
[47.37569427 272.54980469]
[37.34555435 262.47415161]
[30.91783142 249.76910400]
[28.73599625 235.67703247]
[31.02759552 221.58059692]
[37.58059311 208.86709595]
[47.76291656 198.79182434]
[60.58341217 192.35427856]
[74.78829956 190.19891357]
[77.41104889 175.42997742]
[75.46860504 168.23860168]
[80.25704193 160.36695862]
[83.20359802 145.65921021]
[86.15014648 130.95146179]
[89.09670258 116.24371338]
[80.66713715 97.00325012]
[94.52602386 81.21767426]
[96.17040253 66.30808258]
[97.81477356 51.39848709]
[88.83850098 33.40588760]
[100.77224731 18.24921417]
[101.76013947 3.28178048]
[91.62246704 -8.54468632]
[92.83755493 -23.70971870]
[104.17475891 -33.30155945]
[105.16265869 -48.26899338]
[106.15055084 -63.23642731]
[107.13845062 -78.20385742]
[108.12635040 -93.17129517]
[109.11424255 -108.13872528]
[110.10214233 -123.10615540]
[94.91442871 -134.61697388]
[89.68411255 -152.78749084]
[96.32282257 -170.33323669]
[112.02068329 -180.33068848]
[112.02068329 -195.33068848]
[112.02068329 -210.33068848]
[112.02068329 -225.33068848]
[112.02068329 -240.33068848]
[100.66954041 -251.32737732]
[100.50244904 -267.13079834]
[111.61853790 -278.36502075]
[127.42282867 -278.36502075]
[138.53890991 -267.13079834]
[138.37182617 -251.32737732]
[127.02068329 -240.33068848]
[127.02068329 -225.33068848]
[127.02068329 -210.33068848]
[127.02068329 -195.33068848]
[127.02068329 -180.33068848]
[137.23474121 -175.53135681]
[144.92803955 -167.20425415]
[148.94183350 -156.54641724]
[148.65008545 -145.10997009]
[144.05690002 -134.57606506]
[135.80149841 -126.50780487]
[125.06958008 -122.11826324]
[124.08168030 -107.15082550]
[123.09378052 -92.18339539]
[122.10588074 -77.21596527]
[121.11798859 -62.24852753]
[120.13008881 -47.28109360]
[119.14218903 -32.31366348]
[129.12036133 -21.31494141]
[128.33169556 -6.12176228]
[116.72757721 4.26967812]
[115.73967743 19.23711205]
[123.19677734 26.36054802]
[125.50956726 36.63674164]
[121.66600800 46.68019867]
[112.72437286 53.04286194]
[111.07999420 67.95246124]
[109.43561554 82.86205292]
[115.45021057 87.99870300]
[118.93939972 95.09702301]
[119.33286285 102.99674988]
[116.56628418 110.40664673]
[111.09187317 116.11553192]
[103.80445099 119.19026184]
[100.85789490 133.89801025]
[97.91134644 148.60575867]
[94.96479034 163.31350708]
[92.17996979 178.05273438]
[89.55722046 192.82165527]
[103.35957336 200.70759583]
[113.62053680 212.81359863]
[119.11958313 227.67140198]
[119.21228790 243.48716736]
[113.90576935 258.35800171]
[103.85568237 270.50097656]
[90.28520203 278.46685791]
[74.83622742 281.31307983]
[72.53854370 296.13604736]
[70.24085999 310.95904541]
[67.94317627 325.78201294]
[81.58852386 332.23837280]
[92.85033417 342.26803589]
[100.82161713 355.05175781]
[104.86360931 369.54901123]
[104.65696716 384.58261108]
[100.22698975 398.93432617]
[91.94085693 411.44354248]
[80.47723389 421.10122681]
[66.77065277 427.13125610]
[51.93537903 429.05270386]
[49.63769913 443.87570190]
[47.34001541 458.69866943]
[61.01658249 465.11178589]
[72.33145905 475.11929321]
[80.36738586 487.90994263]
[84.47293854 502.44683838]
[84.31528473 517.55151367]
[79.90721893 531.99957275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 136]
[15 135]
[16 134]
[26 124]
[27 123]
[28 122]
[29 121]
[38 113]
[39 112]
[41 111]
[42 110]
[43 109]
[44 108]
[46 102]
[47 101]
[48 100]
[50 96]
[51 95]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
