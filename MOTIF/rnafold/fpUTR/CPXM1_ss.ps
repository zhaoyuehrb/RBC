%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCGCACUCGGCAGGAAGAGACCGACCCGCCACCCGCCGUAGCCCGCGCGCCCCUGGCACUCAAUCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[99.60431671 161.96012878]
[111.39978790 152.69367981]
[125.42184448 147.36622620]
[140.39311218 146.46237183]
[129.24594116 136.42541504]
[118.09877014 126.38845062]
[106.95159912 116.35149384]
[88.67435455 113.69035339]
[82.63553619 96.23549652]
[70.68758392 87.16651154]
[58.55233002 78.34973145]
[46.23509216 69.78902435]
[33.91785431 61.22832489]
[21.60061646 52.66761780]
[5.85283375 51.14515305]
[-0.18237321 37.52804565]
[-12.49961090 28.96734428]
[-24.69779587 37.93857574]
[-39.14875031 42.46059799]
[-54.28493881 42.04289246]
[-68.46450806 36.73077393]
[-80.14935303 27.10045624]
[-88.07199860 14.19656563]
[-91.37305450 -0.58117974]
[-89.69445038 -15.62980080]
[-83.21825409 -29.31693459]
[-72.64697266 -40.15790558]
[-59.12728500 -46.97676468]
[-44.12571335 -49.03385544]
[-29.26951790 -46.10603333]
[-16.17018318 -38.51089478]
[-6.24862766 -27.07229996]
[-0.58106822 -13.03102207]
[0.21772052 2.08984590]
[-3.93890786 16.65010643]
[8.37833023 25.21080971]
[23.24510193 26.12095833]
[30.16131973 40.35037994]
[42.47855759 48.91108322]
[54.79579544 57.47179031]
[67.11303711 66.03249359]
[74.62216949 67.29966736]
[79.75656891 75.21855927]
[91.70452118 84.28754425]
[101.82145691 82.32576752]
[111.32564545 86.30964661]
[117.01986694 94.89898682]
[116.98856354 105.20432281]
[128.13572693 115.24127960]
[139.28289795 125.27824402]
[150.43008423 135.31520081]
[164.48930359 140.54377747]
[179.48602295 140.22964478]
[194.48272705 139.91551208]
[210.19175720 133.53878784]
[220.66796875 146.86865234]
[210.75914001 160.62551880]
[194.79685974 154.91221619]
[179.80015564 155.22634888]
[164.80343628 155.54049683]
[175.54692078 166.00842285]
[182.68008423 179.20379639]
[185.55387878 193.92593384]
[183.90678406 208.83523560]
[177.88870239 222.57505798]
[168.04722595 233.89517212]
[155.27783203 241.76556396]
[140.74247742 245.47004700]
[125.76374054 244.67156982]
[111.70458984 239.44277954]
[99.84429932 230.25946045]
[91.26206207 217.95721436]
[86.73880005 203.65547180]
[86.68609619 188.65556335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[7 48]
[9 44]
[10 43]
[11 41]
[12 40]
[13 39]
[14 38]
[16 36]
[17 35]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
