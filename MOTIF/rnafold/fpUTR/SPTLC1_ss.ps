%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCCGCCGCCCCGCCCUCUGCGGAGGUGAUAACGACACUGAGCAGCGACGCGCACUUUUGGGACGCGCUUGUGACCCGCCUUCCGGAAGGAAGCGGCUAACU\
) } def
/len { sequence length } bind def

/coor [
[73.89572144 118.54616547]
[70.51811981 112.49850464]
[55.72076416 114.95577240]
[40.92340469 117.41304779]
[26.12604523 119.87031555]
[11.55369473 123.42652130]
[-2.71215320 128.06176758]
[-15.77237797 144.91026306]
[-35.82007599 140.41259766]
[-49.61299133 146.30798340]
[-63.40590668 152.20335388]
[-77.19882202 158.09872437]
[-90.90200806 164.19978333]
[-104.51239014 170.50514221]
[-118.12276459 176.81050110]
[-131.73315430 183.11585999]
[-138.58546448 197.62190247]
[-154.23156738 201.16854858]
[-166.66912842 191.03509521]
[-166.35710144 174.99508667]
[-153.53485107 165.35301208]
[-138.03851318 169.50547791]
[-124.42812347 163.20011902]
[-110.81774902 156.89476013]
[-97.20736694 150.58940125]
[-92.38248444 144.82766724]
[-83.09420013 144.30581665]
[-69.30128479 138.41043091]
[-55.50836563 132.51506042]
[-41.71545029 126.61968994]
[-39.71537018 117.67590332]
[-33.65942383 110.61271667]
[-24.86653137 107.16912842]
[-15.34794235 108.27310181]
[-7.34740829 113.79592896]
[6.91843939 109.16066742]
[7.95260048 106.89281464]
[9.89965343 104.86960602]
[12.67884636 103.41731262]
[16.10143089 102.83035278]
[19.88347626 103.33747864]
[23.66877556 105.07295227]
[38.46613693 102.61568451]
[53.26349258 100.15841675]
[68.06085205 97.70114899]
[81.17807770 74.09384155]
[107.68340302 68.91368103]
[114.59304047 55.59989548]
[121.50267792 42.28610992]
[128.41230774 28.97232056]
[135.12200928 15.55666065]
[141.63026428 2.04212737]
[148.13851929 -11.47240543]
[154.64677429 -24.98693848]
[149.66160583 -39.74450684]
[156.45442200 -53.35745239]
[170.55422974 -58.01910400]
[177.06248474 -71.53363800]
[178.48725891 -88.42761230]
[195.11543274 -91.73522949]
[202.89692688 -76.67253876]
[190.57702637 -65.02538300]
[184.06875610 -51.51084900]
[189.21522522 -37.58068466]
[182.80744934 -23.78231239]
[168.16131592 -18.47868347]
[161.65306091 -4.96414948]
[155.14479065 8.55038357]
[148.63653564 22.06491661]
[148.56909180 29.57972908]
[141.72610474 35.88195801]
[134.81646729 49.19574356]
[127.90682220 62.50953293]
[120.99718475 75.82331848]
[127.08847046 82.92344666]
[130.86779785 91.48102570]
[132.01261902 100.76568604]
[130.42521667 109.98500061]
[143.18540955 117.87025452]
[155.94561768 125.75551605]
[168.70581055 133.64076233]
[177.81257629 135.54115295]
[181.72482300 141.95762634]
[194.24342346 150.22108459]
[206.76202393 158.48454285]
[219.28062439 166.74800110]
[235.67387390 167.18807983]
[243.25042725 181.73208618]
[234.21618652 195.41836548]
[217.86479187 194.16766357]
[211.01716614 179.26660156]
[198.49856567 171.00314331]
[185.97996521 162.73968506]
[173.46138000 154.47622681]
[160.82055664 146.40097046]
[148.06036377 138.51571655]
[135.30015564 130.63046265]
[122.53995514 122.74520111]
[117.12122345 127.06025696]
[110.90132141 130.10905457]
[104.17129517 131.74891663]
[97.24607849 131.90313721]
[90.44972992 130.56445312]
[84.10028076 127.79555511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 36]
[7 35]
[9 30]
[10 29]
[11 28]
[12 27]
[13 25]
[14 24]
[15 23]
[16 22]
[47 74]
[48 73]
[49 72]
[50 71]
[51 69]
[52 68]
[53 67]
[54 66]
[57 63]
[58 62]
[78 98]
[79 97]
[80 96]
[81 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
