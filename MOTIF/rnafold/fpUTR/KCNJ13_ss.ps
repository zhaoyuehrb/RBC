%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:48:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCAAGAAGAGAACCUACAAACUAGACUUGUAGAUUAAAAUUAUCUGAUCAAAAAGGCAGACUCUGUAAAUUUCCUUAAGACCUACCUUGGCAUAAAGGCUGACCCAGCAAAAGAACUGAGAAAUACAGCCUGAG\
) } def
/len { sequence length } bind def

/coor [
[199.36627197 218.48706055]
[193.75082397 206.49488831]
[192.56875610 193.27375793]
[195.98425293 180.41362000]
[183.92977905 171.48670959]
[171.87532043 162.55978394]
[159.82084656 153.63287354]
[147.76638794 144.70596313]
[137.41322327 153.67028809]
[125.42073059 160.28297424]
[112.31438446 164.25422668]
[98.66846466 165.41006470]
[85.08087921 163.69984436]
[72.14701080 159.19848633]
[60.43357086 152.10324097]
[50.45380783 142.72499084]
[42.64500427 131.47465515]
[28.75436783 137.13595581]
[14.86372948 142.79724121]
[0.97309202 148.45852661]
[-12.91754532 154.11981201]
[-26.80818367 159.78109741]
[-31.42273331 174.72232056]
[-44.58967209 183.15829468]
[-60.09197235 181.10583496]
[-70.60992432 169.53402710]
[-71.17727661 153.90673828]
[-61.52613449 141.60269165]
[-46.21347427 138.43148804]
[-32.46947098 145.89045715]
[-18.57883453 140.22917175]
[-4.68819571 134.56788635]
[9.20244217 128.90660095]
[23.09308052 123.24531555]
[36.98371887 117.58402252]
[35.57610321 111.39347839]
[34.77512741 105.09565735]
[34.58832932 98.74984741]
[35.01746368 92.41580200]
[36.05849838 86.15318298]
[37.70162964 80.02094269]
[39.93137741 74.07683563]
[42.72675323 68.37683105]
[46.06142807 62.97459793]
[49.90401077 57.92100906]
[54.21831131 53.26364517]
[45.01931000 41.41550827]
[35.82030869 29.56737137]
[26.62130737 17.71923256]
[18.81681252 12.80533123]
[17.35143280 5.49507046]
[8.42451668 -6.55939627]
[-7.16736555 -10.33732891]
[-13.80412579 -24.94325066]
[-6.39460993 -39.17274857]
[9.37723541 -42.11017227]
[21.41260147 -31.50217628]
[20.47898293 -15.48631191]
[29.40589905 -3.43184566]
[38.46944427 8.52023125]
[47.66844559 20.36837006]
[56.86744690 32.21650696]
[66.06645203 44.06464386]
[85.96093750 36.10043335]
[107.36164856 34.99187851]
[110.74700165 20.37889099]
[114.13235474 5.76590538]
[101.95158386 -3.37459373]
[94.54734802 -16.68237877]
[93.20246887 -31.85179520]
[98.14995575 -46.25465012]
[108.53263855 -57.39556122]
[122.55163574 -63.34429932]
[137.77809143 -63.07020950]
[151.57391357 -56.62077713]
[161.54888916 -45.11341095]
[165.97482300 -30.54182625]
[164.08486938 -15.43063927]
[156.20646667 -2.39795589]
[143.70462036 6.29823303]
[128.74534607 9.15126133]
[125.35998535 23.76424789]
[121.97463226 38.37723160]
[138.77304077 47.30369186]
[152.29344177 60.68529129]
[161.39274597 77.39070892]
[165.30168152 96.00759125]
[163.68977356 114.96201324]
[156.69329834 132.65148926]
[168.74775696 141.57839966]
[180.80223083 150.50532532]
[192.85670471 159.43223572]
[204.91116333 168.35916138]
[219.87603760 160.08990479]
[236.89291382 159.15342712]
[252.57330322 165.68830872]
[263.81570435 178.35017395]
[268.41897583 194.58795166]
[265.51318359 211.15776062]
[277.96148682 219.52677917]
[290.40975952 227.89578247]
[302.85803223 236.26480103]
[315.30630493 244.63380432]
[327.75460815 253.00282288]
[346.00781250 245.10469055]
[365.22100830 249.66377258]
[377.79760742 264.70285034]
[378.86962891 284.13601685]
[392.02737427 291.33837891]
[405.18511963 298.54071045]
[419.15524292 291.78680420]
[434.42114258 294.56735229]
[445.11279297 305.81317139]
[447.11904907 321.20001221]
[439.66839600 334.81130981]
[425.62582397 341.41326904]
[410.39099121 338.46728516]
[399.82196045 327.10614014]
[397.98275757 311.69845581]
[384.82501221 304.49609375]
[371.66726685 297.29376221]
[363.36352539 303.77175903]
[353.32684326 307.08746338]
[342.72128296 306.82891846]
[332.78625488 303.00045776]
[324.69137573 296.02502441]
[319.39907837 286.69769287]
[317.54995728 276.09509277]
[319.38558960 265.45111084]
[306.93731689 257.08209229]
[294.48901367 248.71307373]
[282.04074097 240.34407043]
[269.59246826 231.97505188]
[257.14419556 223.60604858]
[246.42926025 231.11026001]
[233.76397705 234.50930786]
[220.66764832 233.37274170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[46 63]
[47 62]
[48 61]
[49 60]
[51 59]
[52 58]
[65 83]
[66 82]
[67 81]
[99 134]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
