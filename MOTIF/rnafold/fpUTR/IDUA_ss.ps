%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACAUGGGGUGCGCGCCCAGACUCCGACCCGGAGGCGGAACCGGCAGUGCAGCCCGAAGCCCCGCAGUCCCCGAGCACGCGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[155.59007263 184.20394897]
[145.88064575 182.48068237]
[137.05267334 178.03305054]
[129.85482788 171.22288513]
[124.90189362 162.61300659]
[122.62234497 152.92071533]
[123.22126007 142.95805359]
[126.66194153 133.56376648]
[115.42079163 123.63217163]
[104.17963409 113.70058441]
[90.51602936 110.73451233]
[85.88877869 97.54057312]
[74.64762115 87.60897827]
[63.40646744 77.67739105]
[52.16531372 67.74580383]
[40.92415619 57.81422043]
[29.50947571 48.08256912]
[17.92482185 38.55388260]
[6.34016943 29.02519989]
[-5.48416042 33.80545807]
[-18.14068794 33.01783752]
[-29.15353966 26.87957764]
[-36.39564896 16.64841461]
[-38.49951935 4.36537504]
[-35.11506653 -7.55225372]
[-45.99871826 -17.87437057]
[-56.88237381 -28.19648933]
[-67.76602173 -38.51860809]
[-76.34670258 -42.26643372]
[-78.84348297 -49.40225983]
[-89.35607147 -60.10204697]
[-105.29440308 -63.96229935]
[-109.66027832 -79.76961517]
[-97.96244812 -91.26277924]
[-82.23464966 -86.61861420]
[-78.65628815 -70.61463928]
[-68.14369202 -59.91484833]
[-57.44390869 -49.40225983]
[-46.56025314 -39.08014297]
[-35.67660141 -28.75802422]
[-24.79294968 -18.43590546]
[-7.79804468 -22.52644348]
[8.45810318 -15.69149303]
[17.58225060 -0.42073339]
[15.86885357 17.44054794]
[27.45350647 26.96923065]
[39.03815842 36.49791336]
[46.36626434 38.35607910]
[50.85574341 46.57306290]
[62.09690094 56.50465012]
[73.33805847 66.43624115]
[84.57920837 76.36782837]
[95.82036591 86.29941559]
[109.48397064 89.26548767]
[114.11122131 102.45942688]
[125.35237885 112.39102173]
[136.59353638 122.32260895]
[156.66650391 115.93360901]
[176.58479309 122.39211273]
[188.93974304 139.14155579]
[189.22595215 159.82673645]
[202.30368042 167.17337036]
[215.38140869 174.52000427]
[231.20260620 174.53323364]
[238.50932312 187.51249695]
[251.58703613 194.85914612]
[264.66476440 202.20578003]
[273.90148926 203.74107361]
[278.06774902 210.04948425]
[290.87805176 217.85308838]
[305.14581299 211.75297546]
[320.26666260 215.23706055]
[330.42639160 226.96563721]
[331.71835327 242.42883301]
[323.64575195 255.68072510]
[309.31268311 261.62570190]
[294.23049927 257.97778320]
[284.19860840 246.13969421]
[283.07446289 230.66339111]
[270.26416016 222.85980225]
[257.31814575 215.28350830]
[244.24040222 207.93685913]
[231.16267395 200.59022522]
[216.27688599 201.10247803]
[208.03477478 187.59773254]
[194.95704651 180.25109863]
[181.87931824 172.90446472]
[174.37591553 179.19195557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 57]
[9 56]
[10 55]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 47]
[18 46]
[19 45]
[25 41]
[26 40]
[27 39]
[28 38]
[30 37]
[31 36]
[61 87]
[62 86]
[63 85]
[65 83]
[66 82]
[67 81]
[69 80]
[70 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
