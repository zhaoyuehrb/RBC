%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACACAUCAGGAGGUGGCCUUGAGAAGCUGAGCGGAGACCGGCUAGACUUUACUCAAAGAAACCAAGAGACUGUUACC\
) } def
/len { sequence length } bind def

/coor [
[90.56343079 323.35125732]
[80.48658752 311.66961670]
[78.34760284 296.39126587]
[84.82902527 282.39144897]
[97.86265564 274.13748169]
[97.86265564 259.13748169]
[97.86265564 244.13746643]
[97.56815338 229.14036560]
[96.97925568 214.15193176]
[83.73419189 207.33767700]
[75.62436676 194.72471619]
[74.91200256 179.64630127]
[81.88845062 166.14718628]
[94.76905823 157.89872742]
[94.18016052 142.91027832]
[93.59126282 127.92185211]
[80.51486206 121.00074005]
[72.63545227 108.47840118]
[72.05460358 93.69473267]
[78.92723083 80.59278870]
[91.42029572 72.66704559]
[90.83139801 57.67861176]
[90.24250793 42.69017792]
[89.65361023 27.70174026]
[89.06471252 12.71330452]
[87.88782501 -2.24045515]
[86.12476349 -17.13648224]
[84.36170197 -32.03250885]
[82.30651855 -46.89104843]
[79.95999908 -61.70637512]
[77.61347961 -76.52169800]
[65.11145782 -85.81347656]
[62.94280243 -100.87174988]
[71.87813568 -112.73325348]
[69.53161621 -127.54858398]
[67.18510437 -142.36390686]
[58.73541641 -157.06217957]
[70.52016449 -169.25053406]
[85.49453735 -161.30039978]
[82.00042725 -144.71041870]
[84.34694672 -129.89509583]
[86.69345856 -115.07977295]
[98.85687256 -106.55997467]
[101.44762421 -91.56855774]
[92.42881012 -78.86821747]
[94.77532196 -64.05289459]
[97.12184143 -49.23756409]
[101.39176178 -42.95854950]
[99.25772858 -33.79557037]
[101.02079010 -18.89954376]
[102.78385162 -4.00351620]
[106.12817383 -0.25669608]
[106.97119904 5.70802784]
[104.05314636 12.12440777]
[104.64204407 27.11284256]
[105.23094177 42.10128021]
[105.81983948 57.08971405]
[106.40873718 72.07814789]
[119.48513794 78.99925995]
[127.36454773 91.52159882]
[127.94539642 106.30526733]
[121.07276917 119.40721130]
[108.57970428 127.33295441]
[109.16860199 142.32139587]
[109.75749207 157.30982971]
[123.24556732 164.52226257]
[131.25962830 177.43238831]
[131.73251343 192.52023315]
[124.63728333 205.73059082]
[111.96768951 213.56303406]
[112.55658722 228.55146790]
[116.09775543 237.26779175]
[112.86265564 244.13746643]
[112.86265564 259.13748169]
[112.86265564 274.13748169]
[125.89628601 282.39144897]
[132.37771606 296.39126587]
[130.23872375 311.66961670]
[120.16188049 323.35125732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 75]
[6 74]
[7 73]
[8 71]
[9 70]
[14 65]
[15 64]
[16 63]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 51]
[27 50]
[28 49]
[29 47]
[30 46]
[31 45]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
