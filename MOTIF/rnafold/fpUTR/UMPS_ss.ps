%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAGACGAGGCAGGCGGAAGAGGCGGGACUUCGCGGGUGACGUCAUCGGGGCGCCGGAGGCCCGGGGCGCCUGGGAAUUUGAAGCAAACAGGCAGCGCGCGACA\
) } def
/len { sequence length } bind def

/coor [
[80.92618561 176.64666748]
[74.13595581 190.02175903]
[67.34572601 203.39683533]
[60.55549622 216.77191162]
[66.85274506 231.08549500]
[62.42651749 246.08358765]
[49.36674500 254.68452454]
[33.83984756 252.82723999]
[23.17715836 241.38865662]
[22.41326714 225.76974487]
[31.90886307 213.34527588]
[47.18041611 209.98168945]
[53.97064590 196.60659790]
[60.76087570 183.23152161]
[67.55110168 169.85644531]
[73.34217834 156.01940918]
[78.10290527 141.79493713]
[82.86363983 127.57048035]
[76.82415771 122.73030090]
[72.10211182 116.59801483]
[68.96592712 109.52221680]
[67.59387970 101.90512085]
[68.06395721 94.17973328]
[70.34944916 86.78519440]
[74.32042694 80.14186096]
[79.75116730 74.62735748]
[73.35650635 61.05870438]
[66.96185303 47.49005127]
[60.56719208 33.92139816]
[53.97459793 27.36660385]
[54.19053268 19.85925102]
[48.19696045 6.10872173]
[42.20338440 -7.64180756]
[36.20980835 -21.39233780]
[29.81247902 -28.13784218]
[30.24871254 -35.63562012]
[24.66138840 -49.55617142]
[19.07406425 -63.47672653]
[13.28299046 -77.31375885]
[7.28941584 -91.06428528]
[-7.14612341 -96.91689301]
[-13.02857876 -110.94726562]
[-7.36005449 -124.67327881]
[-13.35362911 -138.42381287]
[-26.85921860 -147.72601318]
[-25.28652000 -164.04957581]
[-10.25338840 -170.60220337]
[2.77537727 -160.64312744]
[0.39690059 -144.41738892]
[6.39047527 -130.66685486]
[20.30430412 -125.47638702]
[26.57852364 -111.61677551]
[21.03994560 -97.05786133]
[27.03351974 -83.30733490]
[32.68021393 -78.35538483]
[32.99461746 -69.06404877]
[38.58194351 -55.14349747]
[44.16926575 -41.22294617]
[49.96033859 -27.38591194]
[55.95391464 -13.63538170]
[61.94748688 0.11514746]
[67.94106293 13.86567688]
[74.13584900 27.52674103]
[80.53050232 41.09539413]
[86.92516327 54.66404724]
[93.31982422 68.23269653]
[111.77878571 69.75026703]
[126.40342712 81.11495209]
[132.43302917 98.62723541]
[147.16070557 101.47255707]
[161.92854309 104.10137177]
[176.73339844 106.51311493]
[191.53823853 108.92485809]
[206.34309387 111.33659363]
[221.14793396 113.74833679]
[228.80966187 100.64634705]
[240.68943787 91.19989777]
[255.18061829 86.68654633]
[270.32336426 87.71669006]
[284.06979370 94.15101624]
[294.56076050 105.11932373]
[300.37750244 119.13824463]
[300.73330688 134.31182861]
[295.58007812 148.58798218]
[285.61471558 160.03598022]
[272.18499756 167.10755920]
[257.10717773 168.84634399]
[242.42037964 165.01718140]
[230.11088562 156.13795471]
[221.84346008 143.40946960]
[218.73619080 128.55319214]
[203.93135071 126.14144135]
[189.12649536 123.72970581]
[174.32165527 121.31796265]
[159.51679993 118.90621948]
[152.29536438 120.96965790]
[144.31538391 116.20022583]
[129.58770752 113.35490417]
[116.36840820 128.03321838]
[97.08810425 132.33120728]
[92.32737732 146.55567932]
[87.56664276 160.78013611]
[102.18247223 157.40707397]
[114.11678314 166.49400330]
[114.75344086 181.48048401]
[103.63279724 191.54682922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[16 102]
[17 101]
[18 100]
[26 66]
[27 65]
[28 64]
[29 63]
[31 62]
[32 61]
[33 60]
[34 59]
[36 58]
[37 57]
[38 56]
[39 54]
[40 53]
[43 50]
[44 49]
[69 98]
[70 97]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
