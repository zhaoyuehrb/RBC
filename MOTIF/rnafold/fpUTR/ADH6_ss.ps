%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUCGCCUGUGUACCUUUGUACUUUCUACAGUGAAAGUUGCUACAGGAUCUCCCUUUCUCAAUAAAUUCAUCUGCGGUGGAGAAAAUCAGC\
) } def
/len { sequence length } bind def

/coor [
[146.75527954 221.08366394]
[134.36566162 212.62806702]
[125.28964233 200.68545532]
[120.46060944 186.48403931]
[120.37517548 171.48428345]
[125.04213715 157.22877502]
[133.98153687 145.18356323]
[146.27404785 136.58738708]
[160.65484619 132.32435608]
[146.72653198 126.75640106]
[132.79823303 121.18843842]
[118.86991882 115.62048340]
[104.94160461 110.05252075]
[90.92314148 104.71561432]
[76.81834412 99.61121368]
[62.71355820 94.50682068]
[47.10403824 97.08625031]
[37.76928711 85.47971344]
[23.66449547 80.37531281]
[9.55970478 75.27091980]
[-4.54508591 70.16651917]
[-13.88344193 70.16812134]
[-19.02711487 64.65312958]
[-32.95542526 59.08517075]
[-46.88373566 53.51721191]
[-60.81204605 47.94925308]
[-75.23657990 54.40745926]
[-89.97291565 48.69643402]
[-96.27825928 34.20442581]
[-90.41175079 19.52928925]
[-75.85388947 13.37752151]
[-61.24159622 19.39885712]
[-55.24408722 34.02094269]
[-41.31577682 39.58890152]
[-27.38746643 45.15686035]
[-13.45915508 50.72481918]
[0.55931157 56.06172943]
[14.66410255 61.16612625]
[28.76889420 66.27052307]
[42.87368393 71.37492371]
[57.47433472 68.43038940]
[67.81795502 80.40203094]
[81.92274475 85.50642395]
[96.02753448 90.61082458]
[104.25082397 90.18256378]
[110.50956726 96.12421417]
[124.43787384 101.69216919]
[138.36618042 107.26013184]
[152.29449463 112.82808685]
[166.22280884 118.39604950]
[174.18632507 116.98855591]
[180.78034973 120.08854675]
[195.61456299 117.86458588]
[210.44879150 115.64063263]
[225.28300476 113.41667938]
[240.11721802 111.19272614]
[254.91264343 108.72380829]
[269.66522217 106.01059723]
[271.21539307 90.98483276]
[276.93731689 77.00497437]
[286.36709595 65.20430756]
[298.74035645 56.53946304]
[313.05398560 51.71285629]
[328.14770508 51.11576080]
[342.79791260 54.79657745]
[355.81695557 62.45692444]
[366.14947510 73.47580719]
[372.95782471 86.95997620]
[375.69012451 101.81632996]
[374.12484741 116.84053040]
[368.38891602 130.81463623]
[358.94726562 142.60581970]
[346.56533813 151.25822449]
[332.24682617 156.07044983]
[317.15252686 156.65238953]
[302.50604248 152.95684814]
[289.49468994 145.28343201]
[279.17324829 134.25418091]
[272.37841797 120.76317596]
[257.62585449 123.47637939]
[251.49600220 127.86926270]
[242.34117126 126.02693939]
[227.50695801 128.25090027]
[212.67274475 130.47485352]
[197.83853149 132.69880676]
[183.00430298 134.92276001]
[196.02398682 142.37178040]
[206.01628113 153.55900574]
[211.95359802 167.33392334]
[213.22531128 182.27992249]
[209.70065308 196.85993958]
[201.74209595 209.57455444]
[190.16812134 219.11619568]
[176.16897583 224.50358582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[14 44]
[15 43]
[16 42]
[18 40]
[19 39]
[20 38]
[21 37]
[23 36]
[24 35]
[25 34]
[26 33]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 80]
[58 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
