%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCCGGACACCAGAAGACAAGCAGAGAGACUCCUCCAGACCCACUCAGACCACGUGCACGCCCUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[107.92997742 219.09606934]
[109.92700195 204.06983948]
[116.94561768 190.63426208]
[128.13829041 180.41174316]
[122.39804077 166.55354309]
[116.35684204 152.82388306]
[110.01757050 139.22926331]
[95.89518738 140.27947998]
[82.27497101 136.40205383]
[70.82318115 128.07133484]
[62.94077682 116.30644989]
[59.59207153 102.54669189]
[61.18673325 88.47538757]
[67.52967834 75.81395721]
[77.84492493 66.11137390]
[72.10467529 52.25317764]
[57.09139633 53.82843399]
[42.25751877 51.11213684]
[28.80367088 44.33282471]
[17.81634331 34.04754639]
[10.18013477 21.09608841]
[6.50653934 6.53240728]
[7.08498573 -8.46112823]
[11.86005497 -22.66973495]
[20.43666077 -34.94463348]
[32.11272430 -44.29593277]
[26.37247467 -58.15412903]
[20.63222313 -72.01232147]
[5.93688631 -77.82804871]
[-0.26518831 -92.36454773]
[5.70557880 -106.99757385]
[20.30683708 -113.04560852]
[34.87591934 -106.92047119]
[40.76924896 -92.25608063]
[34.49041367 -77.75257111]
[40.23066711 -63.89437866]
[45.97091675 -50.03618622]
[60.83951187 -51.68004227]
[75.58374786 -49.06495285]
[89.00724030 -42.39443588]
[100.01829529 -32.20142746]
[107.71874237 -19.30572701]
[111.47719574 -4.74804735]
[110.98077393 10.29395485]
[106.26116180 24.60095787]
[97.69273376 37.01080704]
[85.96286774 46.51292419]
[91.70312500 60.37112045]
[107.36601257 60.18758774]
[121.92639923 65.96296692]
[133.20495605 76.83283997]
[139.51356506 91.17024994]
[139.90798950 106.82924652]
[134.32919312 121.46607971]
[123.61218262 132.88998413]
[129.95146179 146.48460388]
[136.61892700 153.19192505]
[136.25624084 160.81329346]
[141.99649048 174.67149353]
[157.13931274 173.98548889]
[171.60261536 178.52296448]
[183.63987732 187.73600769]
[191.79754639 200.51208496]
[195.09053040 215.30844116]
[193.12120056 230.33833313]
[186.12734985 243.78681946]
[174.95353699 254.02995300]
[160.94905090 259.83081055]
[145.80497742 260.48889160]
[131.35006714 255.92477417]
[119.32980347 246.68955994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 59]
[5 58]
[6 56]
[7 55]
[15 48]
[16 47]
[26 37]
[27 36]
[28 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
