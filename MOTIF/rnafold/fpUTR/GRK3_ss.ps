%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGCGCGCGCGGGGCGGGGGCGCGCGGAGGGGGGGGCUGCCCCGGGGCGGCCCCCCCAGGUCGGGGCGCGGCGGGCGGCGGCGGCGGGCGCGCGUCCCGUCCAGGUCCGGAGUAACCGCCGCCGCCGCCGCCAAAGCUCGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[105.03063202 172.17056274]
[114.78045654 159.43005371]
[114.14384460 144.44357300]
[113.50722504 129.45709229]
[99.70992279 130.13337708]
[87.90089417 125.09928894]
[77.99077606 136.35937500]
[68.08065033 147.61946106]
[58.17053223 158.87953186]
[48.26041031 170.13961792]
[38.35029221 181.39970398]
[28.44017029 192.65979004]
[32.77096176 207.46681213]
[28.38706589 222.25819397]
[16.68736458 232.31405640]
[1.40519094 234.42562866]
[-12.58296871 227.91909790]
[-20.81354332 214.87068176]
[-20.66018867 199.44407654]
[-12.17183590 186.56187439]
[1.94290960 180.33471680]
[17.18008423 182.74966431]
[27.09020615 171.48959351]
[37.00032806 160.22950745]
[46.91044617 148.96942139]
[56.82056808 137.70933533]
[66.73069000 126.44924927]
[76.64080811 115.18916321]
[74.44965363 111.11495209]
[72.96279144 106.73435974]
[72.22119904 102.16813660]
[72.24533844 97.54214478]
[58.21142578 92.24597931]
[44.17751312 86.94981384]
[30.14360428 81.65364838]
[16.10969353 76.35748291]
[2.07578421 71.06131744]
[-11.95812607 65.76515198]
[-25.99203682 60.46899033]
[-40.02594757 55.17282486]
[-54.05985641 49.87665939]
[-68.09376526 44.58049393]
[-82.12767792 39.28432846]
[-98.21366119 42.47385406]
[-108.81385803 29.96114159]
[-103.02368164 14.61819649]
[-86.79957581 12.22852707]
[-76.83151245 25.25041962]
[-62.79759979 30.54658508]
[-48.76369095 35.84275055]
[-34.72978210 41.13891602]
[-20.69587135 46.43508148]
[-6.66196060 51.73124695]
[7.37194920 57.02741241]
[21.40585899 62.32357407]
[35.43976974 67.61974335]
[49.47367859 72.91590881]
[63.50759125 78.21207428]
[77.54150391 83.50823975]
[84.63251495 75.98353577]
[94.17680359 71.42605591]
[104.95935822 70.60515594]
[115.53785706 73.80187225]
[124.43557739 80.74833679]
[130.34722900 90.64213562]
[132.32897949 102.23663330]
[146.57501221 97.54085541]
[160.82106018 92.84508514]
[175.06710815 88.14930725]
[182.62345886 72.40886688]
[198.89498901 67.07520294]
[213.70838928 74.97147369]
[227.85154724 69.97437286]
[241.99470520 64.97727966]
[256.13787842 59.98018265]
[270.28103638 54.98308563]
[277.38934326 49.13408661]
[284.77774048 50.03349686]
[299.02380371 45.33771896]
[313.26983643 40.64194107]
[327.51586914 35.94616318]
[341.76190186 31.25038719]
[356.00796509 26.55461121]
[370.25399780 21.85883331]
[384.50003052 17.16305542]
[398.74606323 12.46727943]
[412.99212646 7.77150202]
[427.23815918 3.07572460]
[441.48419189 -1.62005246]
[448.64715576 -15.45224667]
[463.16156006 -20.01149178]
[476.30432129 -13.09745216]
[490.55035400 -17.79322815]
[502.44818115 -31.80546570]
[519.46655273 -27.64549828]
[533.60974121 -32.64259338]
[540.47747803 -46.62371063]
[554.89184570 -51.49000168]
[568.17840576 -44.85647964]
[582.32153320 -49.85357666]
[590.50805664 -63.65071487]
[606.41839600 -65.70983124]
[617.84759521 -54.45134354]
[616.02807617 -38.51179886]
[602.35565186 -30.11865807]
[587.31866455 -35.71041489]
[573.17547607 -30.71331787]
[567.00537109 -17.20533371]
[552.73339844 -11.93609142]
[538.60681152 -18.49943352]
[524.46368408 -13.50233650]
[518.93652344 -2.69364738]
[507.13873291 1.56140149]
[495.24612427 -3.54718828]
[481.00009155 1.14858878]
[474.54467773 14.52256775]
[460.16406250 19.48769379]
[446.17996216 12.62598801]
[431.93392944 17.32176590]
[417.68789673 22.01754189]
[403.44186401 26.71331978]
[389.19580078 31.40909767]
[374.94976807 36.10487366]
[360.70373535 40.80065155]
[346.45770264 45.49642944]
[332.21163940 50.19220352]
[317.96560669 54.88798141]
[303.71957397 59.58375931]
[289.47354126 64.27953339]
[275.27813721 69.12624359]
[261.13497925 74.12334442]
[246.99180603 79.12043762]
[232.84864807 84.11753845]
[218.70547485 89.11463165]
[214.81008911 101.43907166]
[204.35861206 109.37074280]
[191.05075073 109.81936646]
[179.76287842 102.39534760]
[165.51683044 107.09112549]
[151.27079773 111.78690338]
[137.02474976 116.48267365]
[128.49371338 128.82048035]
[129.13032532 143.80696106]
[129.76693726 158.79344177]
[140.56211853 170.66120911]
[137.87207031 186.47711182]
[123.76034546 194.10856628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 144]
[3 143]
[4 142]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[66 141]
[67 140]
[68 139]
[69 138]
[72 134]
[73 133]
[74 132]
[75 131]
[76 130]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[92 115]
[93 114]
[95 111]
[96 110]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
