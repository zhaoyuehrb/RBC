%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCAGUAAGGAUAGCAUCAACUGGCAAACGGAGAAGGAGGAGAACAGAGUGGAGAGGAACCCUGUUAGGAGAAAUUGAGCGGCAUUCCAUCUGGUAGGCAAGUUUGCAUUUCUCCUUUUUGGGAUCUGCCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[97.30591583 133.04293823]
[84.09008026 140.13812256]
[73.25825500 129.76164246]
[79.77959442 116.25350952]
[72.34844971 115.23956299]
[62.42114258 126.48449707]
[52.49383926 137.72943115]
[42.56653214 148.97438049]
[32.63922882 160.21931458]
[33.94515991 171.12443542]
[29.09003448 180.72947693]
[19.91844368 185.92663574]
[9.62385750 185.18702698]
[-0.80143607 195.97189331]
[-11.22672939 206.75674438]
[-17.88797379 222.34725952]
[-34.71322250 220.26222229]
[-37.36736298 203.51731873]
[-22.01159096 196.33145142]
[-11.58629799 185.54658508]
[-1.16100466 174.76173401]
[2.04472828 155.74320984]
[21.39429092 150.29200745]
[31.32159615 139.04707336]
[41.24890137 127.80213165]
[51.17620468 116.55719757]
[61.10350800 105.31225586]
[47.00037003 110.42121124]
[32.89722824 115.53017426]
[18.79409027 120.63912964]
[4.69095039 125.74808502]
[-10.11944485 123.37065125]
[-23.09062767 115.83750153]
[-32.49517059 104.15184784]
[-37.08063507 89.86991119]
[-36.23635483 74.89369202]
[-30.07476234 61.21762848]
[-19.41642570 50.66301346]
[-5.68075895 44.63545609]
[9.30300140 43.93766403]
[23.53940773 48.66257095]
[35.13396454 58.18263245]
[48.08846664 65.74443817]
[61.04296875 73.30624390]
[73.99746704 80.86804199]
[86.95197296 88.42984772]
[79.20864868 75.58302307]
[71.46532440 62.73619461]
[63.72200394 49.88936996]
[55.97867966 37.04254150]
[42.22808456 29.21747589]
[42.28464508 14.32297707]
[34.54132080 1.47615075]
[19.07047081 0.27931949]
[7.27962732 -9.80808067]
[3.70261192 -24.90723991]
[9.71485901 -39.21222305]
[23.00453758 -47.22246933]
[38.46149445 -45.85787964]
[50.14221573 -35.64316559]
[53.55522156 -20.50609016]
[47.38814926 -6.26717186]
[55.13146973 6.57965517]
[68.32820892 13.48583126]
[68.82550812 29.29922104]
[76.56883240 42.14604568]
[84.31214905 54.99287415]
[92.05547333 67.83969879]
[99.79879761 80.68652344]
[114.15597534 85.03065491]
[127.72260284 78.63169861]
[141.28923035 72.23274231]
[154.85585022 65.83378601]
[168.42248535 59.43482971]
[181.98910522 53.03587341]
[195.55572510 46.63691711]
[209.12236023 40.23796082]
[222.68898010 33.83900070]
[236.18243408 27.28714561]
[249.60098267 20.58322334]
[263.01953125 13.87930298]
[276.43807983 7.17538166]
[289.85662842 0.47146037]
[299.59698486 -15.10960770]
[317.03292847 -13.46853924]
[330.29653931 -20.47400093]
[332.61264038 -35.70363617]
[343.32708740 -46.52278137]
[358.18206787 -48.92983246]
[371.44717407 -42.20857620]
[384.71078491 -49.21403885]
[392.97656250 -63.37768555]
[409.37203979 -63.03056335]
[417.03094482 -48.52976227]
[408.07446289 -34.79246521]
[391.71624756 -35.95042038]
[378.45263672 -28.94496155]
[376.52554321 -14.19964218]
[366.16278076 -3.28740859]
[351.18643188 -0.53740937]
[337.30200195 -7.21038389]
[324.03839111 -0.20492305]
[320.14041138 11.30207825]
[309.07623291 17.22811127]
[296.56054688 13.89000893]
[283.14199829 20.59392929]
[269.72344971 27.29785156]
[256.30490112 34.00177383]
[242.88635254 40.70569229]
[238.26969910 46.55834961]
[229.08793640 47.40562820]
[215.52131653 53.80458450]
[201.95468140 60.20354080]
[188.38806152 66.60250092]
[174.82144165 73.00145721]
[161.25480652 79.40041351]
[147.68818665 85.79936981]
[134.12155151 92.19832611]
[120.55493164 98.59728241]
[115.56647491 112.74349213]
[122.11833191 126.23694611]
[128.67019653 139.73039246]
[135.22204590 153.22384644]
[141.77391052 166.71728516]
[148.32575989 180.21073914]
[154.87762451 193.70419312]
[169.50588989 200.29153442]
[173.33651733 215.87055969]
[163.43095398 228.49035645]
[147.38792419 228.47012329]
[137.51423645 215.82534790]
[141.38417053 200.25604248]
[134.83230591 186.76260376]
[128.28045654 173.26914978]
[121.72859955 159.77569580]
[115.17674255 146.28225708]
[108.62488556 132.78880310]
[102.07302856 119.29535675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[13 21]
[14 20]
[15 19]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[52 63]
[53 62]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 111]
[79 109]
[80 108]
[81 107]
[82 106]
[83 105]
[85 102]
[86 101]
[90 97]
[91 96]
[120 138]
[121 137]
[122 136]
[123 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
