%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCUGGAGGGGCGGGGCGGACGCAGAGCCGCGUUUAGUCUAUCGCUGCGGUUGCGAGCGCUGUAGGGAGCCUGUGCUGUGCCGCGCAGUUAGGCAGCAGCAGCCGCGGAGCAGUAGCCGCCGUGGGAGGGAGCCAUGAAGCAUUACGAGCAGAGAG\
) } def
/len { sequence length } bind def

/coor [
[147.46426392 167.12178040]
[137.72253418 155.71568298]
[127.98081970 144.30960083]
[118.23909760 132.90350342]
[108.49737549 121.49741364]
[96.60819244 122.86569214]
[85.62815094 118.10508728]
[72.99488831 126.19216156]
[60.36163330 134.27923584]
[47.72837448 142.36631775]
[39.67354965 158.89865112]
[22.14756584 159.07646179]
[9.67552280 167.41001892]
[-2.79652166 175.74356079]
[-15.26856613 184.07711792]
[-27.74061012 192.41067505]
[-34.91641998 206.51097107]
[-49.79737473 207.14852905]
[-62.26941681 215.48208618]
[-74.74146271 223.81564331]
[-74.36329651 239.23837280]
[-82.40282440 252.40534973]
[-96.29467010 259.11505127]
[-111.60599518 257.22644043]
[-123.45101166 247.34214783]
[-128.05001831 232.61622620]
[-123.93547821 217.74766541]
[-112.42034149 207.48095703]
[-97.17903900 205.09219360]
[-83.07501221 211.34359741]
[-70.60297394 203.01004028]
[-58.13092804 194.67648315]
[-51.84720230 181.17227173]
[-36.07416534 179.93862915]
[-23.60211945 171.60507202]
[-11.13007545 163.27153015]
[1.34196913 154.93797302]
[13.81401348 146.60441589]
[16.49674225 134.77580261]
[26.86408424 127.73788452]
[39.64130020 129.73304749]
[52.27455902 121.64598083]
[64.90781403 113.55889893]
[77.54107666 105.47182465]
[77.78635406 93.60482025]
[83.88851929 83.42398071]
[94.23865509 77.61359406]
[95.41554260 62.65983582]
[96.59243011 47.70607376]
[97.76931763 32.75231552]
[98.94620514 17.79855347]
[91.16348267 7.47057343]
[92.48323822 -4.99025774]
[101.65052032 -12.93218422]
[103.12077332 -27.85995483]
[104.59103394 -42.78772736]
[106.06129456 -57.71549606]
[107.53154755 -72.64326477]
[105.25045013 -81.54312134]
[109.18003082 -87.84868622]
[110.94309235 -102.74471283]
[112.55982971 -117.65733337]
[114.03008270 -132.58509827]
[115.50034332 -147.51287842]
[116.97059631 -162.44064331]
[118.44085693 -177.36842346]
[111.95062256 -182.79997253]
[108.20625305 -190.28439331]
[107.76146698 -198.54687500]
[110.61495209 -206.21316528]
[116.22302246 -212.03804016]
[123.60141754 -215.10758972]
[126.23835754 -229.87399292]
[128.87530518 -244.64039612]
[131.51225281 -259.40679932]
[134.14918518 -274.17318726]
[132.57339478 -283.22457886]
[136.98559570 -289.20239258]
[139.91194153 -303.91418457]
[142.83830261 -318.62594604]
[145.76466370 -333.33773804]
[148.69100952 -348.04953003]
[151.61737061 -362.76129150]
[148.77726746 -379.47567749]
[164.05221558 -386.83175659]
[175.34936523 -374.19015503]
[166.32914734 -359.83493042]
[163.40278625 -345.12316895]
[160.47644043 -330.41137695]
[157.55007935 -315.69961548]
[154.62373352 -300.98782349]
[151.69737244 -286.27603149]
[148.91558838 -271.53625488]
[146.27864075 -256.76983643]
[143.64170837 -242.00344849]
[141.00476074 -227.23704529]
[138.36781311 -212.47065735]
[147.79724121 -193.00926208]
[133.36862183 -175.89816284]
[131.89837646 -160.97038269]
[130.42811584 -146.04261780]
[128.95785522 -131.11485291]
[127.48759460 -116.18708038]
[129.97453308 -109.18586731]
[125.83911896 -100.98165894]
[124.07605743 -86.08562469]
[122.45932007 -71.17301178]
[120.98905945 -56.24523926]
[119.51880646 -41.31747055]
[118.04854584 -26.38969803]
[116.57829285 -11.46192741]
[124.68316650 4.07843208]
[113.89996338 18.97544098]
[112.72307587 33.92919922]
[111.54618835 48.88296127]
[110.36930084 63.83671951]
[109.19241333 78.79048157]
[121.98451233 92.85679626]
[119.90346527 111.75569153]
[129.64518738 123.16178131]
[139.38690186 134.56787109]
[149.12863159 145.97396851]
[158.87034607 157.38005066]
[170.65010071 166.66645813]
[184.01519775 173.47631836]
[197.38029480 180.28617859]
[210.74539185 187.09603882]
[224.11048889 193.90589905]
[238.43330383 187.62966919]
[253.42488098 192.07789612]
[262.00665283 205.15028381]
[260.12655640 220.67443848]
[248.67234802 231.32032776]
[233.05232239 232.06129456]
[220.64179993 222.54747009]
[217.30062866 207.27099609]
[203.93553162 200.46113586]
[190.57043457 193.65127563]
[177.20533752 186.84141541]
[163.84024048 180.03155518]
[158.53694153 185.33485413]
[147.93034363 195.94146729]
[142.62704468 201.24476624]
[149.43690491 214.60986328]
[164.71337891 217.95101929]
[174.22720337 230.36154175]
[173.48623657 245.98156738]
[162.84034729 257.43579102]
[147.31619263 259.31585693]
[134.24380493 250.73410034]
[129.79556274 235.74252319]
[136.07179260 221.41972351]
[129.26194763 208.05462646]
[114.29508972 207.05796814]
[102.05068207 198.39341736]
[96.13173676 184.61059570]
[98.27996826 169.76521301]
[107.86322784 158.22567749]
[122.06156921 153.38757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[7 44]
[8 43]
[9 42]
[10 41]
[12 38]
[13 37]
[14 36]
[15 35]
[16 34]
[18 32]
[19 31]
[20 30]
[47 117]
[48 116]
[49 115]
[50 114]
[51 113]
[54 111]
[55 110]
[56 109]
[57 108]
[58 107]
[60 106]
[61 105]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[83 87]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[143 153]
[144 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
