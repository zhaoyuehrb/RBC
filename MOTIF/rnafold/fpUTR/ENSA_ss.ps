%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCAACGUCACGGGCAAGGGCCGCCAUUUUGACUGAGCAACCCUAGUGACAGGAGCCGAAGCAGCAGCGCAGGUUGUCCCCGUUUCCCCUCCCCCUUCCCUUCUCCGGUUGCCUUCCCGGGCCCCUUACACUCCACAGUCCCGGUCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[271.04760742 315.77789307]
[269.65139771 300.68026733]
[274.97024536 286.41595459]
[264.63934326 275.54061890]
[254.30842590 264.66531372]
[243.97752380 253.78999329]
[233.64662170 242.91468811]
[217.77301025 248.54763794]
[200.97579956 246.69985962]
[186.61293030 237.69247437]
[177.57666016 223.28266907]
[175.71125793 206.32112122]
[181.43676758 190.18806458]
[170.66809082 179.74606323]
[159.89941406 169.30404663]
[152.86463928 166.89068604]
[149.01959229 158.53536987]
[138.46759033 147.87446594]
[127.91556549 137.21354675]
[117.36355591 126.55264282]
[106.81153870 115.89173126]
[114.57729340 128.72502136]
[115.76661682 143.67779541]
[110.12716675 157.57730103]
[98.85554504 167.47430420]
[84.34341431 171.26876831]
[69.67002869 168.15559387]
[57.94886398 158.79534912]
[51.66697693 145.17411804]
[52.15727997 130.18212891]
[59.31574631 117.00046539]
[71.62345123 108.42606354]
[86.46869659 106.27826691]
[71.53268433 104.89424896]
[56.59666824 103.51022339]
[41.66065598 102.12619781]
[31.52212143 113.87310028]
[16.40756416 117.38447571]
[2.12883997 111.31013489]
[-5.82359076 97.98577881]
[-4.39185572 82.53489685]
[5.87351370 70.89866638]
[21.02527428 67.55146027]
[35.23726273 73.78034210]
[43.04468155 87.19018555]
[57.98069382 88.57420349]
[72.91670990 89.95822906]
[87.85272217 91.34225464]
[93.01817322 85.90460205]
[82.14302063 75.57353210]
[92.47425842 64.69853210]
[103.34907532 75.02928925]
[108.51452637 69.59162903]
[106.36594391 54.74630737]
[104.21736908 39.90098572]
[102.06878662 25.05566216]
[89.69188690 15.59786034]
[87.72439575 0.51198500]
[96.81723785 -11.22921562]
[94.66866302 -26.07453918]
[92.52008057 -40.91986084]
[90.37150574 -55.76518250]
[88.22292328 -70.61050415]
[73.91165161 -86.50614929]
[82.13801575 -105.39842224]
[79.07962036 -120.08332062]
[76.02122498 -134.76821899]
[72.96282959 -149.45310974]
[69.90443420 -164.13801575]
[58.58375931 -176.00285339]
[63.45769119 -191.66098022]
[79.51234436 -195.00465393]
[90.23207092 -182.59417725]
[84.58933258 -167.19641113]
[87.64772797 -152.51150513]
[90.70612335 -137.82661438]
[93.76451874 -123.14171600]
[96.82291412 -108.45681763]
[105.03797913 -104.81520844]
[110.71394348 -97.67134094]
[112.45646667 -88.57431030]
[109.74253082 -79.57397461]
[103.06824493 -72.75908661]
[105.21682739 -57.91376495]
[107.36540222 -43.06843948]
[109.51398468 -28.22311783]
[111.66255951 -13.37779522]
[123.71118927 -4.69642067]
[126.10163116 10.32824039]
[116.91410828 22.90708351]
[119.06269073 37.75240707]
[121.21126556 52.59772873]
[123.35984802 67.44305420]
[117.47245026 105.33972168]
[128.02445984 116.00062561]
[138.57647705 126.66153717]
[149.12849426 137.32244873]
[159.68051147 147.98335266]
[170.34141541 158.53536987]
[181.11009216 168.97737122]
[191.87876892 179.41938782]
[203.98722839 173.96592712]
[217.19783020 172.97348022]
[229.92344666 176.53936768]
[240.64271545 184.21455383]
[248.08187866 195.06011963]
[251.36611938 207.76205444]
[250.12246704 220.79046631]
[244.52194214 232.58378601]
[254.85284424 243.45909119]
[265.18374634 254.33441162]
[275.51464844 265.20971680]
[285.84555054 276.08505249]
[300.36401367 271.50512695]
[315.37008667 273.67416382]
[327.89508057 282.10888672]
[335.48461914 295.09194946]
[336.67965698 310.02117920]
[331.29650879 323.93112183]
[341.62741089 334.80645752]
[351.95831299 345.68176270]
[362.28921509 356.55706787]
[377.40347290 361.23361206]
[380.55935669 375.79003906]
[390.89025879 386.66534424]
[406.17886353 384.77719116]
[419.49209595 392.16708374]
[425.82620239 405.81787109]
[422.94210815 420.40621948]
[433.27301025 431.28152466]
[448.63806152 429.11480713]
[462.32638550 436.42297363]
[469.07455444 450.39587402]
[466.28771973 465.66064453]
[455.03750610 476.34768677]
[439.64987183 478.34759521]
[426.04162598 470.89135742]
[419.44543457 456.84606934]
[422.39767456 441.61242676]
[412.06677246 430.73712158]
[397.34967041 432.86886597]
[384.04187012 425.84271240]
[377.34481812 412.16781616]
[380.01495361 396.99624634]
[369.68405151 386.12094116]
[355.30874634 382.22229004]
[351.41387939 366.88796997]
[341.08297729 356.01266479]
[330.75207520 345.13735962]
[320.42117310 334.26202393]
[306.25332642 338.92437744]
[291.40509033 336.96490479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[13 101]
[14 100]
[15 99]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[33 48]
[34 47]
[35 46]
[36 45]
[53 93]
[54 92]
[55 91]
[56 90]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[119 150]
[120 149]
[121 148]
[122 147]
[124 145]
[125 144]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
