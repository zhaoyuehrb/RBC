%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUCUGGACUCCCGCGCUGGGCGCGCUGAGGCGGCCCCCGAGCGAGCGCGCGUGCAGCCGCCGCCGCCCCGAGCACCCGCAGCUCCGGCGCCGCGGCGAGACGGAGACGGACCGAGCCACGGGCCCCCGCGGCCGCAGCAUCUCGGAGGAGAAC\
) } def
/len { sequence length } bind def

/coor [
[161.15908813 261.95050049]
[150.33595276 251.56494141]
[146.46754456 237.07234192]
[150.67544556 222.67465210]
[161.73962402 212.54627991]
[176.45217896 209.62382507]
[190.54541016 214.75317383]
[180.53050232 203.58619690]
[170.51557922 192.41921997]
[160.50067139 181.25222778]
[148.41059875 180.27040100]
[139.97619629 171.00236511]
[140.14425659 158.07052612]
[130.35192871 146.70785522]
[120.55958557 135.34518433]
[110.76725769 123.98252106]
[96.00055695 127.35337830]
[81.04511261 121.94760895]
[70.92319489 108.71678162]
[69.48862457 91.36105347]
[54.50692368 90.62041473]
[39.52521896 89.87977600]
[24.54351616 89.13913727]
[7.10005522 99.17306519]
[-8.72752953 88.11966705]
[-23.72679710 87.97148132]
[-38.72606659 87.82329559]
[-53.72533417 87.67510986]
[-68.72460175 87.52692413]
[-83.72386932 87.37873840]
[-98.72313690 87.23055267]
[-106.58952332 100.34799194]
[-119.87779236 107.71811676]
[-134.97064209 107.44916534]
[-147.81646729 99.71349335]
[-155.01699829 86.67440033]
[-170.01626587 86.52621460]
[-185.01553345 86.37802887]
[-200.91362000 92.26759338]
[-210.97406006 78.62120056]
[-200.64598083 65.17623901]
[-184.86734009 71.37876129]
[-169.86807251 71.52694702]
[-154.86880493 71.67513275]
[-147.41206360 58.78084564]
[-134.41592407 51.30047226]
[-119.32070160 51.32976532]
[-106.18064117 58.96099091]
[-98.57495117 72.23128510]
[-83.57568359 72.37947083]
[-68.57641602 72.52765656]
[-53.57714844 72.67584229]
[-38.57788086 72.82402802]
[-23.57861137 72.97221375]
[-8.57934284 73.12039948]
[-1.90694404 65.29584503]
[8.19016647 62.40256882]
[18.41396332 65.63859558]
[25.28415680 74.15743256]
[40.26586151 74.89807129]
[55.24756622 75.63871002]
[70.22927094 76.37935638]
[81.68811798 66.69975281]
[83.46221924 51.80503464]
[85.23631287 36.91032028]
[87.01041412 22.01560211]
[88.78451538 7.12088633]
[90.55860901 -7.77383041]
[84.50780487 -22.39225578]
[93.69609070 -34.11508179]
[95.47019196 -49.00979614]
[97.09705353 -63.92131424]
[98.57653046 -78.84817505]
[92.23809052 -93.34420013]
[101.19297791 -105.24626923]
[102.67244720 -120.17313385]
[104.15192413 -135.09999084]
[105.63139343 -150.02685547]
[94.57346344 -161.08380127]
[93.26136780 -176.66622925]
[102.31463623 -189.41661072]
[117.45860291 -193.31460571]
[131.54273987 -186.51968384]
[137.91696167 -172.24020386]
[133.57153320 -157.21850586]
[120.55825806 -148.54737854]
[119.07878113 -133.62051392]
[117.59931183 -118.69365692]
[116.11983490 -103.76679993]
[122.56409454 -90.33843994]
[113.50338745 -77.36869812]
[112.02391815 -62.44184113]
[114.50690460 -55.43814468]
[110.36490631 -47.23569870]
[108.59081268 -32.34098434]
[114.76850891 -18.78792763]
[105.45332336 -5.99973249]
[103.67922974 8.89498329]
[101.90512848 23.78969955]
[100.13103485 38.68441772]
[98.35693359 53.57913208]
[96.58283997 68.47384644]
[110.26601410 71.14546204]
[121.01863861 79.24080658]
[126.92757416 90.79472351]
[127.17498016 103.28749847]
[122.12992859 114.19018555]
[131.92225647 125.55285645]
[141.71458435 136.91552734]
[151.50692749 148.27819824]
[169.01176453 153.91340637]
[171.66764832 171.23731995]
[181.68257141 182.40429688]
[191.69747925 193.57128906]
[201.71238708 204.73826599]
[216.45138550 191.78529358]
[242.55068970 193.96209717]
[256.66290283 199.04595947]
[265.85177612 199.01570129]
[271.00201416 204.37217712]
[285.01101685 209.73385620]
[299.02005005 215.09555054]
[314.67416382 212.80223083]
[323.79492188 224.57765198]
[337.80392456 229.93934631]
[351.81292725 235.30102539]
[367.91366577 232.18669128]
[378.45526123 244.74880981]
[372.59347534 260.06451416]
[356.35836792 262.37835693]
[346.45126343 249.31002808]
[332.44226074 243.94834900]
[318.43322754 238.58666992]
[303.78112793 241.26348877]
[293.65835571 229.10455322]
[279.64935303 223.74287415]
[265.64031982 218.38119507]
[251.57904053 213.15817261]
[237.46682739 208.07431030]
[232.13740540 213.35134888]
[245.46861267 220.22731018]
[243.04856873 235.03080750]
[228.22175598 237.30355835]
[221.47853088 223.90542603]
[216.14910889 229.18246460]
[221.09329224 243.34420776]
[226.03749084 257.50595093]
[230.98168945 271.66769409]
[243.75068665 281.95770264]
[240.95677185 298.11709595]
[225.47407532 303.52249146]
[213.22985840 292.61325073]
[216.81994629 276.61187744]
[211.87574768 262.45013428]
[206.93154907 248.28840637]
[201.98736572 234.12666321]
[199.67420959 248.94723511]
[190.01078796 260.41973877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 115]
[8 114]
[9 113]
[10 112]
[13 110]
[14 109]
[15 108]
[16 107]
[20 62]
[21 61]
[22 60]
[23 59]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[36 44]
[37 43]
[38 42]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[70 95]
[71 94]
[72 92]
[73 91]
[75 89]
[76 88]
[77 87]
[78 86]
[117 139]
[118 138]
[120 137]
[121 136]
[122 135]
[124 133]
[125 132]
[126 131]
[145 156]
[146 155]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
