%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUCUGUCGCCACCUCACUUGGUGUCUGCUGUCCCCGCCAGGCAAGCCUGGGGUGAGAGCACAGAGGAGUGGGCCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[59.85288620 356.73785400]
[47.42927551 365.88430786]
[32.03149796 366.83926392]
[18.57292366 359.29803467]
[11.34813595 345.66696167]
[12.66253757 330.29568481]
[22.09670830 318.08914185]
[36.64023972 312.94235229]
[39.97805405 298.31845093]
[43.31586838 283.69451904]
[41.69431686 276.29244995]
[47.06158066 268.59109497]
[50.94386292 254.10221863]
[43.29734802 241.37168884]
[47.02813721 226.62258911]
[60.43292999 218.68853760]
[64.31521606 204.19964600]
[68.19750214 189.71075439]
[72.07978821 175.22187805]
[75.96207428 160.73298645]
[79.84436035 146.24409485]
[83.72664642 131.75520325]
[72.79153442 123.08494568]
[66.01821136 110.88362885]
[64.44271851 97.01756287]
[68.30603790 83.60768890]
[77.01723480 72.70516205]
[89.24386597 65.97763824]
[103.11574554 64.45414734]
[107.53707886 50.12055588]
[111.95840454 35.78696442]
[116.37973022 21.45337296]
[113.05384827 5.98569393]
[124.19882965 -3.89553189]
[128.62016296 -18.22912407]
[125.29428101 -33.69680405]
[136.43925476 -43.57802963]
[140.86059570 -57.91162109]
[140.41336060 -67.28808594]
[145.72450256 -72.69289398]
[150.67869568 -86.85114288]
[155.63287354 -101.00939178]
[160.58706665 -115.16764069]
[165.54124451 -129.32589722]
[161.96246338 -145.32977295]
[174.21437073 -156.23036194]
[189.69325256 -150.81407166]
[192.47576904 -134.65270996]
[179.69949341 -124.37170410]
[174.74531555 -110.21345520]
[169.79112244 -96.05520630]
[164.83694458 -81.89695740]
[159.88275146 -67.73870850]
[155.19418335 -53.49029160]
[150.77285767 -39.15670013]
[154.41497803 -24.71425629]
[142.95375061 -13.80779648]
[138.53242493 0.52579570]
[142.17454529 14.96823978]
[130.71331787 25.87470055]
[126.29199219 40.20829391]
[121.87066650 54.54188538]
[117.44934082 68.87547302]
[129.18426514 79.46967316]
[135.19001770 94.09419250]
[134.28759766 109.87808228]
[126.65415955 123.72280121]
[113.78823090 132.91049194]
[98.21553040 135.63749695]
[94.33324432 150.12638855]
[90.45095825 164.61526489]
[86.56867981 179.10415649]
[82.68639374 193.59304810]
[78.80410767 208.08193970]
[74.92182159 222.57081604]
[82.56368256 236.14431763]
[78.42009735 250.78279114]
[65.43275452 257.98449707]
[61.55046463 272.47338867]
[57.93978500 287.03234863]
[54.60197067 301.65625000]
[51.26415634 316.28018188]
[62.13432312 327.22744751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 82]
[9 81]
[10 80]
[12 79]
[13 78]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[29 63]
[30 62]
[31 61]
[32 60]
[34 58]
[35 57]
[37 55]
[38 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
