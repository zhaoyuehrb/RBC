%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCGCUAUUGUGCGGGGGAAGAUGUAGCAGCUUCUUCUCCGAACCAACCCUUUGCCUUCGGACUUCUCCGGGGCCAGCAGCCGCCCGACCAGGGGCCCGGGGCCACGGGCUCAGCCGACGACC\
) } def
/len { sequence length } bind def

/coor [
[97.81559753 156.92756653]
[87.44697571 155.85337830]
[77.39801788 152.89747620]
[68.00896454 148.14076233]
[61.11526489 161.46281433]
[54.22156525 174.78486633]
[59.24906921 189.76817322]
[52.13454056 203.88055420]
[37.09891129 208.74935913]
[23.06254387 201.48602295]
[18.35297394 186.39974976]
[25.76430130 172.44096375]
[40.89951706 167.89115906]
[47.79321671 154.56912231]
[54.68691635 141.24707031]
[46.02332306 129.00198364]
[31.16640282 131.06883240]
[16.30948067 133.13569641]
[1.45255983 135.20254517]
[-13.40436172 137.26939392]
[-28.26128387 139.33625793]
[-43.11820602 141.40310669]
[-57.97512436 143.46995544]
[-70.57753754 153.03498840]
[-84.24953461 147.12518311]
[-99.10646057 149.19203186]
[-111.70367432 159.69166565]
[-126.99974823 153.77879333]
[-129.25938416 137.53607178]
[-116.15807343 127.67262268]
[-101.17330933 134.33511353]
[-86.31639099 132.26826477]
[-74.77664185 122.85107422]
[-60.04198074 128.61303711]
[-45.18505859 126.54618835]
[-30.32813644 124.47933197]
[-15.47121620 122.41247559]
[-0.61429459 120.34561920]
[14.24262714 118.27877045]
[29.09954834 116.21191406]
[43.95647049 114.14505768]
[42.60310364 98.64164734]
[45.43106461 83.44493103]
[52.17871475 69.65441132]
[62.30293274 58.25249863]
[75.02243805 50.03463364]
[89.37791443 45.55385971]
[104.30426788 45.08387756]
[118.70963287 48.60297775]
[131.55525208 55.79967117]
[141.93035889 66.09944153]
[154.79325867 58.38285065]
[158.73561096 43.31315994]
[171.89035034 35.67067337]
[186.23269653 39.52198410]
[199.09559631 31.80539131]
[211.95849609 24.08879852]
[224.82139587 16.37220573]
[228.76376343 1.30251586]
[241.91850281 -6.33997011]
[256.26083374 -2.48866034]
[269.12374878 -10.20525360]
[271.19296265 -14.31456947]
[274.19863892 -17.19714928]
[277.61523438 -18.70681763]
[280.92584229 -18.89218712]
[283.68801880 -17.97531891]
[297.26043701 -24.36200714]
[310.83282471 -30.74869728]
[324.40524292 -37.13538742]
[337.97763062 -43.52207565]
[351.55004883 -49.90876389]
[363.79513550 -58.57235718]
[374.33489990 -69.24539185]
[384.87463379 -79.91842651]
[386.21209717 -95.90563202]
[399.62487793 -104.70772552]
[414.82385254 -99.57249451]
[420.14965820 -84.43924713]
[411.51681519 -70.91691589]
[395.54766846 -69.37867737]
[385.00793457 -58.70564270]
[374.46817017 -48.03260803]
[381.36187744 -34.71055984]
[396.16217041 -37.15011597]
[410.96246338 -39.58967590]
[425.76272583 -42.02923203]
[434.76690674 -55.01771164]
[450.33273315 -57.75279999]
[463.22528076 -48.61182022]
[465.79565430 -33.01794815]
[456.51885986 -20.22275734]
[440.89868164 -17.81740379]
[428.20230103 -27.22894287]
[413.40200806 -24.78938484]
[398.60171509 -22.34982872]
[383.80142212 -19.91027069]
[357.93673706 -36.33636093]
[344.36431885 -29.94967079]
[330.79193115 -23.56298065]
[317.21951294 -17.17629051]
[303.64712524 -10.78960228]
[290.07470703 -4.40291262]
[276.84033203 2.65764642]
[263.97744751 10.37423897]
[260.62442017 24.84119606]
[247.68952942 32.85015488]
[232.53799438 29.23510551]
[219.67509460 36.95169830]
[206.81219482 44.66828918]
[193.94929504 52.38488388]
[190.59626770 66.85183716]
[177.66139221 74.86080170]
[162.50984192 71.24575043]
[149.64694214 78.96234131]
[152.91378784 88.27384949]
[154.44067383 98.07413483]
[154.15849304 108.03921509]
[152.05833435 117.83626556]
[148.19223022 127.13476562]
[142.67214966 135.61758423]
[135.66673279 142.99185181]
[127.39627838 148.99903870]
[118.12573242 153.42395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[25 32]
[26 31]
[51 115]
[52 114]
[55 111]
[56 110]
[57 109]
[58 108]
[61 105]
[62 104]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 98]
[73 83]
[74 82]
[75 81]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
