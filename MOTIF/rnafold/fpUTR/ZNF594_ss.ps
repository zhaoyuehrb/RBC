%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCGGGGAGCGCACCGGAAGUUCUCGCCUGGCCCAGGCGCGGGGUCCAAGAUGGUGGCGCUAGGAGCCGCGACCCAGUGAUAGCGGCCGUGGAGGGGCCCCCGACCGAGCGGGAGGUUGGGGGUAGCCUGGAGAUUCUGAAGACAGGAAUAAG\
) } def
/len { sequence length } bind def

/coor [
[68.65862274 228.53030396]
[68.66242981 213.53030396]
[68.66623688 198.53030396]
[68.67003632 183.53031921]
[61.17003632 183.53031921]
[53.97531509 196.69223022]
[46.78059387 209.85414124]
[39.58587265 223.01605225]
[46.34787750 236.98225403]
[43.57619476 252.24978638]
[32.33658981 262.94796753]
[16.95092010 264.96310425]
[3.33529210 257.52038574]
[-3.27480817 243.48164368]
[-0.33766264 228.24507141]
[11.01733589 217.66946411]
[26.42395973 215.82133484]
[33.61867905 202.65942383]
[40.81340408 189.49749756]
[48.00812531 176.33558655]
[54.61240005 167.15100098]
[62.75277710 160.95959473]
[71.40254211 157.89234924]
[79.57813263 157.77029419]
[86.42543793 160.13664246]
[87.92369080 145.21165466]
[89.42195129 130.28666687]
[90.92021179 115.36167908]
[79.47492218 97.75410461]
[92.71564484 77.70930481]
[83.75380707 65.68077087]
[74.67207336 53.74251175]
[65.47135162 41.89570618]
[56.27063370 30.04890251]
[47.06991577 18.20209885]
[37.86919785 6.35529423]
[21.54062843 8.78281403]
[6.29709196 2.69473147]
[-3.75124121 -10.16582203]
[-5.94626617 -26.24360085]
[0.21544333 -41.15380859]
[-9.22047424 -52.81414413]
[-18.65639114 -64.47447968]
[-33.35218048 -70.33489227]
[-35.34377670 -85.09574127]
[-44.77969360 -96.75608063]
[-54.21561432 -108.41641998]
[-63.65153122 -120.07675934]
[-73.08744812 -131.73709106]
[-74.98907471 -116.85812378]
[-85.89481354 -106.55934143]
[-100.85820007 -105.51191711]
[-113.09236145 -114.19093323]
[-117.04830933 -128.65988159]
[-110.93176270 -142.35615540]
[-97.51697540 -149.06759644]
[-82.88744354 -145.74951172]
[-90.60300446 -158.61302185]
[-98.31857300 -171.47654724]
[-106.03413391 -184.34005737]
[-113.74969482 -197.20358276]
[-129.22026062 -199.48300171]
[-139.56750488 -211.20770264]
[-139.90577698 -226.84162903]
[-130.07536316 -239.00291443]
[-114.71787262 -241.94938660]
[-101.08465576 -234.28979492]
[-95.61289215 -219.64077759]
[-100.88617706 -204.91914368]
[-93.17061615 -192.05561829]
[-85.45505524 -179.19210815]
[-77.73948669 -166.32858276]
[-70.02392578 -153.46507263]
[-61.42711258 -141.17300415]
[-51.99119186 -129.51268005]
[-42.55527496 -117.85233307]
[-33.11935806 -106.19200134]
[-23.68344116 -94.53166199]
[-9.66257191 -89.50527954]
[-6.99605513 -73.91040039]
[2.43986273 -62.25006104]
[11.87578011 -50.58972549]
[25.22589874 -53.60752487]
[38.63554764 -50.55256653]
[49.46497726 -41.96756363]
[55.55709839 -29.48954010]
[55.66702271 -15.53791046]
[49.71599960 -2.84542489]
[58.91672134 9.00137901]
[68.11743927 20.84818268]
[77.31816101 32.69498825]
[86.51887512 44.54179001]
[93.14257050 47.91440964]
[95.78233337 56.71893692]
[104.74417114 68.74746704]
[118.61667633 74.45303345]
[133.44807434 72.21033478]
[148.27946472 69.96763611]
[162.36506653 58.14712524]
[178.44520569 65.11555481]
[193.22875977 62.57654953]
[208.01231384 60.03753662]
[222.79586792 57.49852753]
[237.57942200 54.95951843]
[252.36297607 52.42050934]
[267.14651489 49.88149643]
[281.93008423 47.34248734]
[296.71362305 44.80347824]
[311.49719238 42.26446915]
[318.24032593 28.28915215]
[331.92605591 20.97608566]
[347.29187012 23.13729668]
[358.42935181 33.94174957]
[361.05590820 49.23491669]
[354.16152954 63.13626099]
[340.39727783 70.30043030]
[325.05581665 67.97265625]
[314.03619385 57.04801941]
[299.25265503 59.58703232]
[284.46908569 62.12604141]
[269.68554688 64.66504669]
[254.90197754 67.20406342]
[240.11842346 69.74307251]
[225.33488464 72.28208160]
[210.55133057 74.82109070]
[195.76777649 77.36009979]
[180.98422241 79.89910889]
[173.71937561 89.61494446]
[161.38255310 91.82463837]
[150.52217102 84.79903412]
[135.69078064 87.04173279]
[120.85937500 89.28443146]
[119.16501617 107.68276978]
[105.84519196 116.85993195]
[104.34693909 131.78492737]
[102.84867859 146.70991516]
[101.35041809 161.63488770]
[104.33195496 176.33558655]
[111.52667236 189.49749756]
[118.72139740 202.65942383]
[125.91611481 215.82133484]
[133.11083984 228.98324585]
[147.39141846 237.04531860]
[147.27917480 253.44407654]
[132.88955688 261.30990601]
[119.02539062 252.55108643]
[119.94892120 236.17796326]
[112.75420380 223.01605225]
[105.55947876 209.85414124]
[98.36476135 196.69223022]
[91.17003632 183.53031921]
[83.67003632 183.53031921]
[83.67384338 198.53030396]
[83.67764282 213.53030396]
[83.68144989 228.53030396]
[83.67034912 243.53030396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[25 137]
[26 136]
[27 135]
[28 134]
[30 95]
[31 94]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[41 82]
[42 81]
[43 80]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[96 132]
[97 131]
[98 130]
[100 127]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[138 151]
[139 150]
[140 149]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
