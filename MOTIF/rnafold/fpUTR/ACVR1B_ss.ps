%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGGCGCCGGGGGCGCGCGCGCGCGCGCUGGGCGCUGCUGGGCUGCGGCGGCGGCGGCGGCGGCGGUGGUUACU\
) } def
/len { sequence length } bind def

/coor [
[74.19213867 115.74042511]
[70.93443298 108.30657959]
[69.77201080 100.27392578]
[55.20788193 96.68419647]
[39.95706177 100.89406586]
[29.45127678 90.33576202]
[14.88714981 86.74602509]
[0.32302284 83.15628815]
[-14.24110413 79.56655884]
[-28.80523109 75.97682190]
[-43.36935806 72.38708496]
[-58.62018204 76.59695435]
[-69.12596130 66.03865051]
[-83.69009399 62.44891739]
[-98.94091034 66.65879059]
[-109.44669342 56.10048294]
[-124.01082611 52.51074982]
[-138.57495117 48.92101288]
[-153.13908386 45.33127975]
[-167.70320129 41.74154663]
[-183.29576111 46.82131195]
[-195.30870056 35.65791321]
[-191.38412476 19.73529434]
[-175.55931091 15.43328190]
[-164.11346436 27.17741776]
[-149.54934692 30.76715279]
[-134.98521423 34.35688782]
[-120.42108917 37.94662094]
[-105.85696411 41.53635788]
[-91.64786530 37.06972504]
[-80.10035706 47.88478851]
[-65.53623199 51.47452545]
[-51.32712936 47.00789261]
[-39.77962494 57.82295990]
[-25.21549606 61.41269302]
[-10.65136909 65.00242615]
[3.91275787 68.59216309]
[18.47688484 72.18190002]
[33.04101181 75.77162933]
[47.25011063 71.30500031]
[58.79761887 82.12006378]
[73.36174774 85.70980072]
[90.90021515 71.17292023]
[113.60613251 73.00593567]
[128.58560181 90.16793060]
[143.53697205 88.96092987]
[158.48832703 87.75393677]
[173.43968201 86.54693604]
[188.39105225 85.33993530]
[201.52388000 76.51727295]
[214.83247375 83.20536804]
[229.78382874 81.99836731]
[242.91665649 73.17570496]
[256.22525024 79.86379242]
[271.17660522 78.65679932]
[284.35812378 68.90078735]
[299.28793335 75.68556976]
[300.60751343 92.03153992]
[286.95941162 101.12336731]
[272.38360596 93.60815430]
[257.43225098 94.81515503]
[245.36885071 103.55148315]
[230.99082947 96.94972992]
[216.03947449 98.15672302]
[203.97605896 106.89305878]
[189.59803772 100.29129791]
[174.64668274 101.49829865]
[159.69532776 102.70529175]
[144.74395752 103.91229248]
[129.79260254 105.11929321]
[127.35670471 112.86145782]
[122.94871521 119.67646027]
[116.88638306 125.07302094]
[109.60675049 128.66210938]
[101.63457489 130.18501282]
[93.54457092 129.53190613]
[85.91992950 126.74991608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[13 32]
[14 31]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[51 64]
[52 63]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
