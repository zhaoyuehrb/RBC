%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUACACAAGUUUGAUGUUUGUGUCUUCUUCUCCAAGGCCAAGAAAUUAUCUCCAUAGGAGGCAACAGUACU\
) } def
/len { sequence length } bind def

/coor [
[79.36727905 210.96554565]
[79.36727905 195.96554565]
[79.36727905 180.96554565]
[79.36727905 165.96554565]
[79.36727905 150.96554565]
[79.36727905 135.96554565]
[67.92101288 126.27105713]
[53.12559509 128.73997498]
[38.33017731 131.20889282]
[23.53475571 133.67781067]
[8.73933697 136.14672852]
[-6.05608273 138.61564636]
[-20.85150146 141.08456421]
[-28.63797760 154.64572144]
[-43.33742142 159.98054504]
[-58.00920486 154.57011414]
[-65.72576141 140.96905518]
[-62.84356308 125.59937286]
[-50.72350693 115.71817017]
[-35.08830261 115.99104309]
[-23.32042122 126.28914642]
[-8.52500153 123.82022858]
[6.27041817 121.35131073]
[21.06583786 118.88239288]
[35.86125565 116.41347504]
[50.65667725 113.94455719]
[65.45209503 111.47563171]
[64.68000793 96.25967407]
[70.15008545 82.44181061]
[80.58920288 72.39717102]
[93.90168762 67.71277618]
[107.58504486 68.94115448]
[119.19926453 75.55260468]
[131.03637695 66.33940887]
[142.87347412 57.12622070]
[154.71058655 47.91302872]
[166.54769897 38.69984055]
[168.29869080 21.43479347]
[181.64331055 10.87103271]
[198.18724060 13.04285240]
[209.63349915 3.34836411]
[211.56312561 -2.13957715]
[215.17126465 -5.78816175]
[219.38049316 -7.25756741]
[223.14875793 -6.72945881]
[235.70625305 -14.93368149]
[248.26374817 -23.13790321]
[252.95004272 -38.48124695]
[267.92022705 -44.24954605]
[281.69046021 -36.01786041]
[283.69735718 -20.10083389]
[272.40145874 -8.70864391]
[256.46798706 -10.58040619]
[243.91047668 -2.37618399]
[231.35298157 5.82803869]
[219.32798767 14.79462528]
[207.88172913 24.48911285]
[208.59400940 37.52176285]
[201.48748779 48.70295715]
[189.02113342 53.73816299]
[175.76087952 50.53694534]
[163.92378235 59.75013733]
[152.08666992 68.96332550]
[140.24955750 78.17652130]
[128.41246033 87.38970947]
[132.14695740 100.35559845]
[130.05158997 114.14157104]
[122.13888550 126.16761017]
[109.54274750 134.02742004]
[94.36727905 135.96554565]
[94.36727905 150.96554565]
[94.36727905 165.96554565]
[94.36727905 180.96554565]
[94.36727905 195.96554565]
[94.36727905 210.96554565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[40 57]
[41 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
