%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCAGAGAGAAGUGACUUUGAGCUCACAGUGUCACCGCCUGCUGAUGGGAGAGCUGAAUUCAAAACCAGGGUGUCUCCCUGAGCAGAGGGACCUGCACACAGAGACUCCCUCCUGGGCUCCUGGCACC\
) } def
/len { sequence length } bind def

/coor [
[84.49853516 135.66047668]
[75.97756195 148.00523376]
[67.45658875 160.34999084]
[58.93561935 172.69474792]
[50.41464996 185.03950500]
[41.89367676 197.38426208]
[33.37270737 209.72901917]
[24.85173607 222.07377625]
[30.12881279 236.66596985]
[25.78864861 251.56370544]
[13.50012493 261.03851318]
[-2.01156974 261.44711304]
[-14.78187275 252.63241577]
[-19.90034103 237.98382568]
[-15.39882088 223.13404846]
[-3.00823689 213.79312134]
[12.50697708 213.55281067]
[21.02794838 201.20805359]
[29.54891968 188.86329651]
[38.06989288 176.51853943]
[46.59086227 164.17376709]
[55.11183167 151.82901001]
[63.63280487 139.48425293]
[72.15377808 127.13950348]
[62.54017639 110.42718506]
[62.13622665 91.15130615]
[71.04124451 74.05091095]
[87.06589508 63.33021164]
[84.89855957 48.48761368]
[82.73121643 33.64501953]
[78.35484314 25.50905228]
[80.69534302 18.41803360]
[78.88729095 3.52739954]
[77.07924652 -11.36323357]
[72.90074158 -19.60257339]
[75.41190338 -26.63496780]
[73.96419525 -41.56494141]
[64.48130035 -50.40513611]
[63.63375092 -62.93866348]
[71.33177948 -72.35170746]
[70.24525452 -87.31230927]
[69.15873718 -102.27290344]
[68.07221222 -117.23350525]
[66.98568726 -132.19410706]
[55.80701828 -139.81562805]
[51.15766907 -152.31321716]
[54.53669739 -165.01048279]
[64.48299408 -173.29406738]
[63.75829315 -188.27655029]
[63.03359222 -203.25903320]
[62.30889130 -218.24151611]
[61.58419037 -233.22399902]
[60.85948944 -248.20648193]
[59.95381165 -263.17910767]
[58.86729050 -278.13970947]
[57.78076935 -293.10031128]
[43.34148407 -297.85168457]
[31.82286263 -307.77084351]
[24.98140526 -321.34518433]
[23.86038589 -336.50473022]
[28.63075256 -350.93774414]
[38.56505585 -362.44332886]
[52.14839172 -369.26690674]
[67.30939484 -370.36798096]
[81.73612976 -365.57864380]
[93.22861481 -355.62921143]
[100.03433228 -342.03692627]
[101.11547089 -326.87448120]
[96.30714417 -312.45404053]
[86.34260559 -300.97467041]
[72.74136353 -294.18682861]
[73.82788849 -279.22622681]
[74.91440582 -264.26562500]
[78.57367706 -257.75637817]
[75.84197235 -248.93118286]
[76.56667328 -233.94869995]
[77.29137421 -218.96621704]
[78.01607513 -203.98373413]
[78.74077606 -189.00125122]
[79.46547699 -174.01876831]
[92.37376404 -163.31013489]
[93.61654663 -146.24694824]
[81.94628906 -133.28062439]
[83.03280640 -118.32002258]
[84.11933136 -103.35942841]
[85.20585632 -88.39882660]
[86.29237366 -73.43823242]
[96.92456818 -59.53124619]
[88.89417267 -43.01264954]
[90.34188080 -28.08267593]
[91.96987915 -13.17128372]
[93.77793121 1.71934938]
[95.58597565 16.60998154]
[97.57381439 31.47768211]
[99.74114990 46.32027817]
[101.90848541 61.16287613]
[117.24913788 65.15129852]
[129.72349548 74.93053436]
[137.25871277 88.87555695]
[138.60264587 104.66913605]
[133.53196716 119.68683624]
[144.75962830 129.63368225]
[155.98728943 139.58052063]
[164.57864380 142.97689819]
[167.36235046 149.90592957]
[178.34637451 160.12115479]
[191.30656433 160.44981384]
[200.25222778 169.26927185]
[200.73217773 181.41976929]
[211.46615601 191.89744568]
[222.20014954 202.37512207]
[238.21569824 205.90130615]
[242.91108704 221.61389160]
[231.45610046 233.34910583]
[215.63464355 229.03477478]
[211.72247314 213.10910034]
[200.98849487 202.63142395]
[190.25450134 192.15376282]
[173.07415771 188.79467773]
[168.13113403 171.10519409]
[157.14710999 160.88995361]
[146.04045105 150.80818176]
[134.81278992 140.86134338]
[123.58512878 130.91450500]
[118.64314270 134.12327576]
[113.27304077 136.54847717]
[107.59815979 138.13439941]
[101.74879456 138.84465027]
[95.85926819 138.66288757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[28 96]
[29 95]
[30 94]
[32 93]
[33 92]
[34 91]
[36 90]
[37 89]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 73]
[55 72]
[56 71]
[101 124]
[102 123]
[103 122]
[105 121]
[106 120]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
