%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCGCCGCUCGUCCCCGCCGCGGCCGCGCCGCCUGCAGCAGCACCAGCUGCUCCUCCCCGGCGGCCGCCCCCCGCGGGUCCCUCCCUGGCUGCGGGAGAGACGGAGGUAGAGGGAGGACACAGAGCCGCGCCGCCCGCACCACAGACCUUCGCCUCGCCCCGCCGGUUCCUCACCCUCGGGGAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[143.89427185 147.67753601]
[130.73359680 154.87452698]
[115.74861145 154.20336914]
[103.28402710 145.85867310]
[96.95378113 132.25984192]
[98.59232330 117.35198212]
[91.05673981 130.32174683]
[83.52115631 143.29151917]
[75.98557281 156.26129150]
[68.44998932 169.23106384]
[68.83399200 187.63336182]
[53.29840469 195.77941895]
[45.97716141 208.87138367]
[46.74284363 225.25263977]
[32.79489136 233.87741089]
[18.48176193 225.87327576]
[18.52757454 209.47418213]
[32.88520050 201.55014038]
[40.20644760 188.45817566]
[37.21887970 176.72534180]
[43.22534943 165.75361633]
[55.48021698 161.69548035]
[63.01580048 148.72570801]
[70.55138397 135.75593567]
[78.08696747 122.78617096]
[85.62255096 109.81639862]
[81.96192169 103.27041626]
[66.96333313 103.06513214]
[74.64067841 90.17845917]
[70.98005676 83.63248444]
[55.98462296 83.26243591]
[40.98918915 82.89238739]
[25.99375343 82.52234650]
[10.99831867 82.15229797]
[-3.99711609 81.78225708]
[-15.26064587 98.27658081]
[-34.05483627 104.59971619]
[-52.72504044 98.35933685]
[-63.77701569 82.24321747]
[-78.76433563 82.85984802]
[-93.75165558 83.47648621]
[-108.73897552 84.09311676]
[-123.72629547 84.70974731]
[-138.71362305 85.32637787]
[-152.26950073 94.55514526]
[-166.92021179 87.18705750]
[-167.59436035 70.80177307]
[-153.59843445 62.25506592]
[-139.33024597 70.33905792]
[-124.34292603 69.72242737]
[-109.35560608 69.10579681]
[-94.36828613 68.48915863]
[-79.38096619 67.87252808]
[-64.39364624 67.25589752]
[-60.68314362 57.56230164]
[-53.92749786 49.63191223]
[-44.88075638 44.38927460]
[-34.56591415 42.45672226]
[-24.15925598 44.08060837]
[-14.85620689 49.10023117]
[-7.73402596 56.96334839]
[-3.62707090 66.78681946]
[11.36836433 67.15686798]
[26.36379814 67.52690887]
[41.35923386 67.89695740]
[56.35466766 68.26699829]
[71.35010529 68.63704681]
[97.70101929 71.98928070]
[107.48394012 88.48782349]
[120.63566589 81.27449799]
[129.01463318 67.85422516]
[143.89443970 68.51774597]
[157.04617310 61.30442047]
[170.19789124 54.09109116]
[183.34962463 46.87776184]
[196.50134277 39.66443253]
[204.88031006 26.24416161]
[219.76013184 26.90768623]
[232.91184998 19.69435692]
[246.06358337 12.48102665]
[259.21530151 5.26769733]
[257.63064575 -9.82417393]
[261.93319702 -24.33386612]
[271.43743896 -36.05918121]
[284.67089844 -43.23297882]
[299.60214233 -44.78946304]
[313.95266724 -40.52241516]
[325.54455566 -31.11192322]
[338.69628906 -38.32525253]
[351.84802246 -45.53858185]
[364.99972534 -52.75191116]
[378.15145874 -59.96524048]
[380.59423828 -70.58638000]
[388.32678223 -77.95122528]
[398.62161255 -79.79621124]
[408.02667236 -75.74852753]
[421.40850830 -82.52538300]
[434.79037476 -89.30224609]
[443.60620117 -102.43966675]
[458.45614624 -101.28710175]
[471.83801270 -108.06396484]
[485.21987915 -114.84082794]
[494.03567505 -127.97824860]
[508.88562012 -126.82568359]
[522.26751709 -133.60253906]
[535.64935303 -140.37940979]
[549.03118896 -147.15626526]
[562.41308594 -153.93313599]
[575.79492188 -160.70999146]
[589.17675781 -167.48686218]
[591.06646729 -188.75733948]
[605.30688477 -204.48927307]
[626.02069092 -208.43103027]
[644.80310059 -199.14810181]
[657.45214844 -207.21049500]
[670.10119629 -215.27287292]
[677.57971191 -229.21498108]
[692.47094727 -229.53117371]
[705.11999512 -237.59355164]
[702.82385254 -252.64837646]
[706.85583496 -267.33383179]
[716.51733398 -279.10562134]
[730.13452148 -285.92416382]
[745.34808350 -286.60812378]
[759.52215576 -281.03903198]
[770.20104980 -270.18170166]
[775.53454590 -255.91728210]
[774.59857178 -240.71714783]
[767.55535889 -227.21482849]
[755.62512207 -217.74967957]
[740.87481689 -213.96157837]
[725.86010742 -216.50686646]
[713.18237305 -224.94451904]
[700.53332520 -216.88214111]
[693.95953369 -203.51670837]
[678.16357422 -202.62384033]
[665.51452637 -194.56146240]
[652.86547852 -186.49906921]
[654.74218750 -177.56240845]
[654.08740234 -168.43078613]
[650.93890381 -159.80917358]
[645.52716064 -152.36671448]
[638.25909424 -146.68479919]
[629.68701172 -143.21163940]
[620.46704102 -142.22700500]
[611.30859375 -143.81961060]
[602.92004395 -147.87940979]
[595.95367432 -154.10499573]
[582.57177734 -147.32814026]
[569.18994141 -140.55126953]
[555.80804443 -133.77441406]
[542.42620850 -126.99755096]
[529.04437256 -120.22068787]
[515.66247559 -113.44382477]
[507.80383301 -100.79113007]
[491.99673462 -101.45896912]
[478.61486816 -94.68210602]
[465.23300171 -87.90524292]
[457.37435913 -75.25254822]
[441.56723022 -75.92038727]
[428.18539429 -69.14352417]
[414.80352783 -62.36666489]
[405.46563721 -45.44596863]
[385.36477661 -46.81351471]
[372.21307373 -39.60018539]
[359.06134033 -32.38685608]
[345.90960693 -25.17352867]
[332.75787354 -17.96019936]
[334.46292114 -3.12705398]
[330.34786987 11.26780319]
[321.00991821 23.02226067]
[307.84759521 30.32575417]
[292.85156250 32.03811646]
[278.30340576 27.86746979]
[266.42861938 18.41942215]
[253.27690125 25.63275146]
[240.12518311 32.84608078]
[226.97344971 40.05941010]
[219.53520203 52.96373367]
[203.71467590 52.81615829]
[190.56295776 60.02948761]
[177.41122437 67.24281311]
[164.25950623 74.45614624]
[151.10777283 81.66947174]
[143.66950989 94.57379913]
[127.84899902 94.42622375]
[114.69727325 101.63954926]
[129.64343262 100.36973572]
[143.08135986 107.03472137]
[151.11491394 119.70207977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[12 19]
[13 18]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[69 187]
[70 186]
[72 184]
[73 183]
[74 182]
[75 181]
[76 180]
[78 178]
[79 177]
[80 176]
[81 175]
[88 168]
[89 167]
[90 166]
[91 165]
[92 164]
[96 162]
[97 161]
[98 160]
[100 158]
[101 157]
[102 156]
[104 154]
[105 153]
[106 152]
[107 151]
[108 150]
[109 149]
[110 148]
[114 138]
[115 137]
[116 136]
[118 134]
[119 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
