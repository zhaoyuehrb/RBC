%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGUGCUAGAAUUUUACUUUCAGAAGGACCAGUACCCGAACUACGACCAGCGACUGAAUCUGGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[70.91672516 139.68247986]
[59.10139465 127.34666443]
[45.50677872 133.68594360]
[31.91216278 140.02520752]
[18.31754494 146.36448669]
[4.72292852 152.70376587]
[-8.87168884 159.04302979]
[-22.46630478 165.38230896]
[-24.43869591 180.68307495]
[-34.38766479 192.47381592]
[-49.13853455 196.99214172]
[-63.98435593 192.79629517]
[-74.18788147 181.22514343]
[-76.49320221 165.97099304]
[-70.16469574 151.90139771]
[-57.22177505 143.50590515]
[-41.79446793 143.46350098]
[-28.80558014 151.78768921]
[-15.21096230 145.44842529]
[-1.61634564 139.10914612]
[11.97827148 132.76986694]
[25.57288742 126.43059540]
[39.16750336 120.09132385]
[52.76212311 113.75205231]
[50.82429504 98.48801422]
[53.69620895 83.37186432]
[61.09696579 69.88206482]
[72.30271912 59.33802032]
[86.21746826 52.77100754]
[84.25957489 37.89933395]
[70.55915833 30.61384964]
[63.78786850 16.65214539]
[66.54940033 1.38277721]
[77.78188324 -9.32286835]
[93.16620636 -11.34825325]
[106.78678131 -3.91457534]
[113.40621948 10.11976433]
[110.47920990 25.35827637]
[99.13124847 35.94144058]
[101.08914185 50.81311417]
[112.89261627 52.52035904]
[123.93849182 57.01762390]
[133.57768250 64.04064178]
[141.24375916 73.17671967]
[146.48625183 83.88899994]
[148.99710083 95.54800415]
[148.62875366 107.46862030]
[162.93450928 111.97920227]
[172.38414001 111.59483337]
[177.75817871 117.01116180]
[191.85356140 122.14146423]
[205.94895935 127.27176666]
[220.04434204 132.40206909]
[232.25830078 122.97748566]
[247.63059998 121.67516327]
[261.25598145 128.91065979]
[268.78665161 142.37515259]
[267.81958008 157.77217102]
[258.66339111 170.18859863]
[244.23976135 175.66236877]
[229.15121460 172.44685364]
[218.21247864 161.56808472]
[214.91404724 146.49745178]
[200.81864929 141.36715698]
[186.72326660 136.23684692]
[172.62786865 131.10655212]
[158.42391968 126.28495789]
[144.11816406 121.77437592]
[134.01406860 135.54685974]
[119.80986786 145.03448486]
[103.21776581 149.09359741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[29 40]
[30 39]
[47 68]
[48 67]
[50 66]
[51 65]
[52 64]
[53 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
