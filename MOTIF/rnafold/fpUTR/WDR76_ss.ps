%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCUGGCGCUGCGGCCGCUGGGGAUCUGAGUGGGCUCCGCCCCGCCUCGGACCCGCCCCUCCCGGCCUCCCGCCGCAAUCUUGGCGGGAAGGCGCCGGCCGCUAAGAAGCCGAAAG\
) } def
/len { sequence length } bind def

/coor [
[100.04405975 383.99975586]
[85.39704895 379.55862427]
[74.49980164 368.81112671]
[69.85642242 354.22698975]
[72.53392792 339.15747070]
[81.91704559 327.06552124]
[95.84960938 320.72973633]
[96.63465118 305.75027466]
[97.41968536 290.77084351]
[98.20472717 275.79138184]
[83.06937408 265.04357910]
[77.28575134 247.24891663]
[83.30413818 229.37637329]
[98.91609192 218.53625488]
[98.52343750 203.54139709]
[98.13078308 188.54653931]
[97.73812866 173.55166626]
[97.34547424 158.55680847]
[96.95281982 143.56195068]
[96.36392212 128.57351685]
[95.57888031 113.59407043]
[89.07863617 111.11092377]
[84.05438995 105.49102783]
[82.00544739 97.63428497]
[69.21585083 89.79680634]
[56.42624664 81.95932770]
[47.35272980 80.10569000]
[43.40822220 73.74556732]
[30.82816315 65.57598114]
[18.24810410 57.40639114]
[5.66804552 49.23680878]
[-6.91201305 41.06722260]
[-19.49207115 32.89763641]
[-39.56846619 32.87620926]
[-47.83594894 15.47720146]
[-60.82633209 7.97720098]
[-73.81671143 0.47720116]
[-86.80709076 -7.02279902]
[-103.54735565 -9.70608139]
[-105.60310364 -26.53493309]
[-90.00101471 -33.16902924]
[-79.30709076 -20.01317978]
[-66.31671143 -12.51317978]
[-53.32633209 -5.01317978]
[-40.33594894 2.48681998]
[-30.59514427 -1.06688178]
[-20.30745125 1.44508696]
[-13.00146961 9.41388512]
[-11.32248592 20.31757736]
[1.25757241 28.48716354]
[13.83763123 36.65674973]
[26.41769028 44.82633591]
[38.99774933 52.99591827]
[51.57780457 61.16550446]
[64.26372528 69.16972351]
[77.05332947 77.00720215]
[89.84292603 84.84468079]
[78.35079956 75.20461273]
[72.91258240 61.22513199]
[74.86923981 46.35329819]
[83.73829651 34.25619888]
[97.33282471 27.91672897]
[112.30068970 28.89807892]
[124.95111847 36.95826340]
[132.16477966 50.10980988]
[132.16291809 65.10980988]
[124.94601440 78.25956726]
[112.29475403 86.31625366]
[125.99794006 80.21520233]
[139.70111084 74.11415100]
[153.40429688 68.01309967]
[167.02644348 61.73320389]
[180.56523132 55.27553940]
[194.10400391 48.81787109]
[207.64279175 42.36020660]
[221.18156433 35.90253830]
[234.72033691 29.44487381]
[248.25912476 22.98720741]
[253.29779053 8.00763893]
[267.48977661 1.05328214]
[282.41522217 6.25003338]
[289.21914673 20.51475143]
[283.86489868 35.38443375]
[269.52902222 42.03715897]
[254.71679688 36.52598572]
[241.17800903 42.98365402]
[227.63923645 49.44131851]
[214.10044861 55.89898682]
[200.56167603 62.35665131]
[187.02288818 68.81431580]
[173.48411560 75.27198792]
[168.74319458 81.06283569]
[159.50535583 81.71628571]
[145.80216980 87.81732941]
[132.09898376 93.91838074]
[118.39580536 100.01943207]
[110.55832672 112.80903625]
[111.34336853 127.78847504]
[114.95503235 136.31611633]
[111.94767761 143.16929626]
[112.34033203 158.16415405]
[112.73298645 173.15901184]
[113.12564087 188.15388489]
[113.51829529 203.14874268]
[113.91094971 218.14360046]
[124.52886963 222.99278259]
[132.49072266 231.45790100]
[136.64366150 242.25616455]
[136.40800476 253.77133179]
[131.85781860 264.29565430]
[123.70414734 272.28308105]
[113.18417358 276.57644653]
[112.39913177 291.55587769]
[111.61408997 306.53530884]
[110.82905579 321.51477051]
[124.02301788 329.27218628]
[132.09078979 342.27871704]
[133.17843628 357.54553223]
[127.03603363 371.56445312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 115]
[8 114]
[9 113]
[10 112]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[20 98]
[21 97]
[24 57]
[25 56]
[26 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[35 45]
[36 44]
[37 43]
[38 42]
[68 96]
[69 95]
[70 94]
[71 93]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
