%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCGCUGACUGACUUCCGGUGUUGGCGGUGGCGCCGCGCAGUCACCGCGGAGCAGACGCGGAGGCUGGUGGCCCCUGGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[203.41584778 259.72793579]
[194.77526855 247.46659851]
[186.13468933 235.20526123]
[177.49411011 222.94392395]
[168.85353088 210.68260193]
[160.21293640 198.42126465]
[145.53877258 196.13995361]
[136.60133362 183.82830811]
[139.09367371 168.45214844]
[130.45307922 156.19082642]
[116.79704285 150.24424744]
[115.17224884 134.50669861]
[106.53166199 122.24536133]
[97.89108276 109.98402405]
[90.88092041 105.60830688]
[89.16932678 97.12039185]
[80.97703552 84.55510712]
[72.78475189 71.98981476]
[64.59246826 59.42453003]
[56.17465973 47.00919342]
[47.53407669 34.74785995]
[38.89349747 22.48652458]
[30.25291443 10.22518921]
[21.61233139 -2.03614616]
[12.75178909 -14.13948441]
[3.67417598 -26.08088112]
[-5.40343714 -38.02227783]
[-14.69516277 -49.79783630]
[-24.19797134 -61.40372467]
[-33.70077896 -73.00961304]
[-43.20359039 -84.61550140]
[-52.70639801 -96.22138977]
[-67.41902161 -104.64605713]
[-63.39645767 -121.11588287]
[-46.45671844 -121.80982208]
[-41.10050964 -105.72419739]
[-31.59770203 -94.11830902]
[-22.09489250 -82.51242065]
[-12.59208393 -70.90653229]
[-3.08927488 -59.30064774]
[3.74164629 -56.04562378]
[6.53795862 -47.09988785]
[15.61557198 -35.15849304]
[24.69318581 -23.21709824]
[31.40213966 -19.71758270]
[33.87366486 -10.67672825]
[42.51424789 1.58460653]
[51.15483093 13.84594154]
[59.79541397 26.10727692]
[68.43599701 38.36861038]
[75.01423645 42.10805511]
[77.15775299 51.23224258]
[85.35003662 63.79753113]
[93.54232788 76.36281586]
[101.73461151 88.92810822]
[110.15242004 101.34344482]
[118.79299927 113.60477448]
[127.43357849 125.86611176]
[141.70765686 132.68969727]
[142.71441650 147.55023193]
[151.35499573 159.81156921]
[166.67356873 162.63635254]
[175.26167297 175.19418335]
[172.47427368 189.78068542]
[181.11485291 202.04200745]
[189.75544739 214.30334473]
[198.39602661 226.56468201]
[207.03660583 238.82601929]
[215.67718506 251.08735657]
[230.91915894 249.81072998]
[244.66291809 256.29190063]
[253.26013184 268.69973755]
[254.48420715 283.64489746]
[248.10621643 297.10546875]
[256.74679565 309.36679077]
[265.38739014 321.62811279]
[280.48992920 328.01913452]
[282.23764038 344.32489014]
[268.83261108 353.77142334]
[254.06480408 346.64096069]
[253.12605286 330.26870728]
[244.48547363 318.00738525]
[235.84487915 305.74603271]
[221.02331543 307.22482300]
[207.36068726 301.04513550]
[198.56756592 288.77539062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[9 61]
[10 60]
[12 58]
[13 57]
[14 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
