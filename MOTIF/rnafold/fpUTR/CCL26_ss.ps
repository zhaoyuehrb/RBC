%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGAAUUGAGGCUGAGCCAAAGACCCCAGGGCCGUCUCAGUCUCAUAAAAGGGGAUCAGGCAGGAGGAGUUUGGGAGAAACCUGAGAAGGGCCUGAUUUGCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[92.46897125 107.60931396]
[77.47052765 107.82546997]
[70.98964691 121.60079193]
[59.21845627 131.15725708]
[44.52547073 134.64100647]
[29.83731651 131.41313171]
[18.05580711 122.16622162]
[11.48467445 108.77645874]
[-3.51376796 108.99261475]
[-18.51221085 109.20877075]
[-33.51065445 109.42493439]
[-48.50909424 109.64109039]
[-63.50753784 109.85724640]
[-78.50598145 110.07340240]
[-93.50442505 110.28955841]
[-108.50286865 110.50571442]
[-123.50130463 110.72187042]
[-128.07757568 122.10666656]
[-136.25175476 131.21060181]
[-147.01799011 136.94924927]
[-159.06369019 138.65011597]
[-170.92950439 136.13133240]
[-181.18617249 129.72076416]
[-188.60664368 120.21357727]
[-192.31285095 108.77367401]
[-207.27394104 107.69378662]
[-221.78532410 115.33259583]
[-235.51020813 106.35708618]
[-234.32958984 90.00049591]
[-219.45799255 83.08907318]
[-206.19404602 92.73271179]
[-191.23297119 93.81259918]
[-181.93428040 78.45793915]
[-166.12289429 69.78415680]
[-148.00987244 70.19669342]
[-132.46722412 79.66820526]
[-123.71746826 95.72343445]
[-108.71902466 95.50727081]
[-93.72058105 95.29111481]
[-78.72213745 95.07495880]
[-63.72369385 94.85880280]
[-48.72525406 94.64264679]
[-33.72681046 94.42649078]
[-18.72836685 94.21033478]
[-3.72992516 93.99417114]
[11.26851749 93.77801514]
[17.45105553 80.20445251]
[28.96119499 70.62185669]
[43.55022812 66.97205353]
[58.33750534 70.03091431]
[70.37920380 79.24419403]
[77.25437164 92.82703400]
[92.25281525 92.61087036]
[107.09732819 90.45670319]
[121.53855133 86.40070343]
[135.97976685 82.34470367]
[150.42098999 78.28869629]
[164.86221313 74.23269653]
[179.30343628 70.17669678]
[193.74465942 66.12069702]
[208.18586731 62.06469727]
[222.62709045 58.00869370]
[223.73982239 46.46781540]
[228.37229919 35.86843872]
[236.05067444 27.25293541]
[246.00250244 21.46288872]
[257.23440552 19.05690765]
[268.63119507 20.25676346]
[279.06665039 24.92706680]
[287.51473999 32.59030533]
[293.15054321 42.47562408]
[307.96249390 40.10775757]
[322.77441406 37.73989105]
[337.58633423 35.37202835]
[352.39825439 33.00416183]
[367.21020508 30.63629723]
[377.74795532 18.53939056]
[393.76898193 19.37976837]
[402.98330688 32.51276398]
[398.32250977 47.86386871]
[383.36193848 53.65702820]
[369.57806396 45.44822693]
[354.76614380 47.81608963]
[339.95419312 50.18395615]
[325.14227295 52.55182266]
[310.33035278 54.91968536]
[295.51843262 57.28755188]
[289.92184448 75.13365936]
[276.10693359 87.85913086]
[257.70693970 92.00931549]
[239.61499023 86.39910126]
[226.68309021 72.44991302]
[212.24188232 76.50592041]
[197.80065918 80.56192017]
[183.35943604 84.61791992]
[168.91821289 88.67391968]
[154.47698975 92.72991943]
[140.03576660 96.78591919]
[125.59455109 100.84191895]
[111.15332794 104.89791870]
[124.39975739 111.93583679]
[131.91593933 124.91685486]
[131.42510986 139.90882874]
[123.07595825 152.37042236]
[109.39756012 158.52684021]
[94.53333282 156.51319885]
[82.98589325 146.93945312]
[78.25314331 132.70565796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[25 32]
[26 31]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[62 92]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
