%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGAGCGCUAGGCCUGGUCCCUCUUCCUAGAAUAGCGUUGCGCGCAUGCGCCUUGACGAGUGAGCCGGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[103.36109924 119.67240906]
[95.00137329 119.32134247]
[87.52024078 115.57421875]
[74.42906189 122.89685822]
[61.33788681 130.21949768]
[48.24671173 137.54214478]
[39.97984314 151.03175354]
[25.09501457 150.49221802]
[12.00383854 157.81484985]
[9.25715256 173.20932007]
[-2.77538872 183.19691467]
[-18.41238785 183.06179810]
[-30.27053261 172.86775208]
[-32.75077057 157.42811584]
[-24.68200493 144.03300476]
[-9.87406445 139.00717163]
[4.68119526 144.72367859]
[17.77237129 137.40103149]
[25.10286903 124.43519592]
[40.92406845 124.45097351]
[54.01524353 117.12832642]
[67.10642242 109.80568695]
[80.19759369 102.48303986]
[88.86994171 83.43429565]
[109.78349304 82.60506439]
[121.51097107 73.25271606]
[133.23843384 63.90036774]
[144.96591187 54.54802322]
[156.69338989 45.19567490]
[168.42085266 35.84332657]
[163.28479004 20.90190697]
[163.52439880 5.13076401]
[169.09321594 -9.59802055]
[179.31323242 -21.54222298]
[192.95741272 -29.29554939]
[208.39703369 -31.95320702]
[223.79600525 -29.21745300]
[237.32933044 -21.43083382]
[248.66557312 -31.25374603]
[260.00180054 -41.07665634]
[271.33804321 -50.89956665]
[282.05230713 -61.39743423]
[292.10440063 -72.53094482]
[302.15652466 -83.66445923]
[312.20861816 -94.79796600]
[315.10903931 -110.93859100]
[330.62704468 -116.24175262]
[342.79904175 -105.25201416]
[339.10354614 -89.27468109]
[323.34213257 -84.74585724]
[313.29003906 -73.61234283]
[303.23791504 -62.47883606]
[293.18579102 -51.34532166]
[293.12042236 -47.54662704]
[291.02032471 -43.62298203]
[286.86755371 -40.62631989]
[281.16098022 -39.56332397]
[269.82473755 -29.74041367]
[258.48849487 -19.91750145]
[247.15223694 -10.09459114]
[252.63940430 3.10834742]
[253.74101257 17.38532257]
[250.33392334 31.31576920]
[242.74432373 43.50938797]
[231.71647644 52.74490356]
[218.33979797 58.09236908]
[203.94123840 59.00680923]
[189.95364380 55.38371658]
[177.77320862 47.57080078]
[166.04573059 56.92314529]
[154.31825256 66.27548981]
[142.59078979 75.62783813]
[130.86331177 84.98018646]
[119.13584137 94.33253479]
[119.77738953 102.67499542]
[116.94271088 110.54728699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[38 60]
[39 59]
[40 58]
[41 57]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
