%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCUGAGGCGGAGGCAGGGGAGUUGCAGCGCGCGAGGCUCCGUGAGUGUGUCUCCUGCGCGCUGAGAGGCGGGGGGAGGCGGAGGACCAGGAGGAGGAGGAGGAGGAGGAGGAGGGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[138.25386047 146.59002686]
[127.71410370 135.91699219]
[117.17435455 125.24395752]
[106.63460541 114.57092285]
[91.90029907 111.76020050]
[78.17167664 117.80380249]
[64.44306183 123.84739685]
[61.01166153 136.94116211]
[50.79103088 145.51502991]
[37.68930054 146.58515930]
[26.54885864 139.98249817]
[12.67269993 145.67918396]
[-1.20345819 151.37586975]
[-4.94547176 167.81617737]
[-17.59671402 178.71017456]
[-34.08030701 179.94558716]
[-47.93385315 171.23518372]
[-61.66246796 177.27877808]
[-75.39109039 183.32238770]
[-89.11970520 189.36598206]
[-96.24851227 203.73815918]
[-111.95967102 206.98455811]
[-124.20092010 196.61482239]
[-123.58181763 180.58372498]
[-110.57729340 171.18894958]
[-95.16329956 175.63735962]
[-81.43468475 169.59376526]
[-67.70606232 163.55017090]
[-53.97744751 157.50657654]
[-52.34968948 144.19326782]
[-44.26854324 133.35287476]
[-31.77540970 127.90404510]
[-18.11665344 129.38018799]
[-6.90014458 137.49971008]
[6.97601366 131.80302429]
[20.85217094 126.10633850]
[26.61915016 110.36215210]
[42.27474594 103.47524261]
[58.39946365 110.11878204]
[72.12808228 104.07518005]
[85.85669708 98.03158569]
[94.97565460 86.12172699]
[97.22904205 71.29195404]
[99.48242188 56.46217728]
[91.06948853 49.58863449]
[86.35969543 39.88918686]
[86.16371155 29.18989944]
[90.44947052 19.47340393]
[98.36072540 12.51148796]
[108.38720703 9.54210281]
[111.75126648 -5.07580090]
[115.11532593 -19.69370461]
[110.67009735 -34.87759399]
[121.06465912 -45.54541016]
[124.42871857 -60.16331482]
[127.79277802 -74.78121948]
[131.15684509 -89.39911652]
[134.52090454 -104.01702118]
[137.88496399 -118.63492584]
[136.75755310 -127.81512451]
[141.52160645 -133.57568359]
[145.25195312 -148.10443115]
[148.98229980 -162.63317871]
[138.98796082 -174.50300598]
[137.91285706 -189.98278809]
[146.17037964 -203.12025452]
[160.58537292 -208.86375427]
[175.61494446 -205.00482178]
[185.47993469 -193.02726746]
[186.38705444 -177.53672791]
[177.98748779 -164.48962402]
[163.51104736 -158.90283203]
[159.78070068 -144.37408447]
[156.05035400 -129.84533691]
[152.50286865 -115.27086639]
[149.13880920 -100.65296173]
[145.77474976 -86.03505707]
[142.41069031 -71.41715240]
[139.04661560 -56.79925156]
[135.68255615 -42.18135071]
[140.36840820 -28.04303169]
[129.73323059 -16.32964325]
[126.36917114 -1.71173930]
[123.00510406 12.90616417]
[134.56686401 28.46522522]
[131.07879639 47.83876801]
[114.31220245 58.71556091]
[112.05881500 73.54533386]
[109.80542755 88.37511444]
[117.30764008 104.03117371]
[127.84738922 114.70420837]
[138.38714600 125.37724304]
[148.92689514 136.05027771]
[161.38899231 127.62348938]
[175.18740845 121.63031006]
[189.85218811 118.27485657]
[204.88383484 117.67141724]
[219.77038574 119.84055328]
[234.00482178 124.70837402]
[247.10229492 132.10908508]
[258.61672974 141.79063416]
[268.15597534 153.42324829]
[275.39505005 166.61074829]
[280.08749390 180.90396118]
[282.07339478 195.81605530]
[281.28518677 210.83915710]
[277.74966431 225.46156311]
[271.58724976 239.18524170]
[263.00784302 251.54277039]
[252.30368042 262.11328125]
[239.83930969 270.53671265]
[226.03927612 276.52615356]
[211.37359619 279.87765503]
[196.34179688 280.47705078]
[181.45582581 278.30389404]
[167.22270203 273.43225098]
[154.12721252 266.02798462]
[142.61538696 256.34335327]
[133.07929993 244.70816040]
[125.84375000 231.51870728]
[121.15518188 217.22424316]
[119.17328644 202.31159973]
[119.96556091 187.28872681]
[123.50502777 172.66726685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 41]
[6 40]
[7 39]
[11 36]
[12 35]
[13 34]
[17 29]
[18 28]
[19 27]
[20 26]
[42 89]
[43 88]
[44 87]
[50 84]
[51 83]
[52 82]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
