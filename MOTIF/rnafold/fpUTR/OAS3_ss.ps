%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGGGCGUGGUUCGGAGAGCCGGGCGGGAAAACGAAACCAGAAAUCCGAAGGCCGCGCCAGAGCCCUGCUUCCCCUUGCACCUGCGCCGGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[133.62734985 146.25659180]
[132.86071777 130.87094116]
[120.37216949 122.56213379]
[107.88362122 114.25333405]
[91.19387817 113.70259857]
[83.75973511 98.74985504]
[71.01385498 90.84147644]
[58.26797485 82.93309021]
[45.52209473 75.02471161]
[32.77621078 67.11632538]
[20.03033066 59.20794678]
[7.28444910 51.29956436]
[-5.46143198 43.39118195]
[-18.45181274 35.89118195]
[-31.67361450 28.80711555]
[-44.89541245 21.72304916]
[-58.11721420 14.63898277]
[-71.33901215 7.55491686]
[-83.68690491 16.45946884]
[-98.61563110 19.10900688]
[-113.15481567 15.03074455]
[-124.43516541 5.08515596]
[-130.25469971 -8.71493149]
[-129.50851440 -23.61153030]
[-142.73031616 -30.69559669]
[-162.69102478 -28.97393799]
[-172.50082397 -45.50928879]
[-186.14529419 -51.74051666]
[-200.86367798 -45.98334885]
[-215.30838013 -52.39632797]
[-220.90960693 -67.17474365]
[-214.34426880 -81.55083466]
[-199.50746155 -86.99550629]
[-185.20158386 -80.27854156]
[-179.91407776 -65.38499451]
[-166.26959229 -59.15377045]
[-156.83941650 -63.63958740]
[-146.29209900 -62.06206894]
[-138.25942993 -54.71409225]
[-135.64624023 -43.91739655]
[-122.42444611 -36.83333206]
[-110.43531799 -45.70611572]
[-95.72222137 -48.50508881]
[-81.19341278 -44.62247086]
[-69.74443054 -34.77661514]
[-63.68103027 -20.87977219]
[-64.25495148 -5.66688395]
[-51.03314972 1.41718233]
[-37.81134796 8.50124836]
[-24.58954811 15.58531475]
[-11.36774731 22.66938019]
[-6.45509052 22.10394096]
[-1.16276407 24.75074959]
[2.44694972 30.64529991]
[15.19283104 38.55368042]
[27.93871307 46.46206284]
[40.68459320 54.37044525]
[53.43047714 62.27882767]
[66.17635345 70.18721008]
[78.92224121 78.09558868]
[91.66812134 86.00397491]
[103.26492310 84.04226685]
[113.15937042 90.40103912]
[116.19242096 101.76478577]
[128.68096924 110.07358551]
[141.16950989 118.38238525]
[155.65673828 113.14532471]
[170.27890015 117.39333344]
[179.48698425 129.29606628]
[179.91548157 144.16059875]
[192.40402222 152.46940613]
[204.89257812 160.77819824]
[220.66802979 161.98056030]
[226.97851562 175.47229004]
[239.46707153 183.78108215]
[251.95561218 192.08988953]
[267.25942993 189.18627930]
[279.80624390 197.79048157]
[282.48007202 212.39822388]
[294.96862793 220.70703125]
[307.45718384 229.01582336]
[323.84869385 229.51536560]
[331.37246704 244.08674622]
[322.28866577 257.74017334]
[305.94192505 256.43017578]
[299.14837646 241.50437927]
[286.65982056 233.19557190]
[274.17126465 224.88677979]
[259.66473389 228.06417847]
[246.88121033 219.81578064]
[243.64682007 204.57843018]
[231.15826416 196.26963806]
[218.66972351 187.96083069]
[203.78753662 187.35278320]
[196.58377075 173.26675415]
[184.09523010 164.95794678]
[171.60667419 156.64915466]
[157.73075867 161.99678040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[24 41]
[25 40]
[27 36]
[28 35]
[70 97]
[71 96]
[72 95]
[74 93]
[75 92]
[76 91]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
