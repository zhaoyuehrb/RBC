%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUUUUGGGAGAGCUGACCUUUUGUGACUUUUGGGAGAGCUGCCAAAAGUGAAACUUAGUGCCUCAGACAAGCAGGGGCAAGUCUGCUAAGGAAGCUGUGGCCAGAAGCACAGAUCAGAAACACG\
) } def
/len { sequence length } bind def

/coor [
[28.02773285 545.90942383]
[14.33245850 552.22528076]
[-0.50339544 554.93603516]
[-15.54723549 553.87127686]
[-29.85339355 549.09796143]
[-42.52257156 540.91613770]
[-52.75837326 529.84002686]
[-59.91736984 516.56604004]
[-63.54954147 501.92846680]
[-63.42656326 486.84750366]
[-59.55616760 472.27111816]
[-52.18165207 459.11563110]
[-41.76658249 448.20794678]
[-28.96566010 440.23379517]
[-14.58356285 435.69439697]
[0.47564065 434.87512207]
[3.40199542 420.16336060]
[6.32835054 405.45156860]
[9.25470543 390.73980713]
[7.52224255 387.55429077]
[7.31047106 383.34680176]
[9.09341717 378.87191772]
[12.97571468 375.07135010]
[16.97640610 360.61471558]
[20.97709846 346.15808105]
[24.97778893 331.70144653]
[28.97848129 317.24478149]
[32.97917175 302.78814697]
[31.71774673 295.42498779]
[37.25950241 288.02810669]
[41.61377335 273.67401123]
[45.96804428 259.31991577]
[50.32231522 244.96580505]
[54.67658234 230.61169434]
[59.03085327 216.25759888]
[63.38512421 201.90348816]
[53.07601166 189.19084167]
[52.33012009 172.67483521]
[61.63579178 158.80978394]
[77.51477814 153.13101196]
[81.51546478 138.67437744]
[85.51615906 124.21773529]
[89.51685333 109.76109314]
[86.19492340 96.17961884]
[96.02651215 86.23821259]
[100.02719879 71.78157043]
[92.05615234 60.84633255]
[91.87555695 47.51071930]
[99.32628632 36.68536377]
[111.48049164 32.22627640]
[115.83476257 17.87217140]
[120.18903351 3.51806688]
[124.54330444 -10.83603859]
[119.14682770 -22.62680244]
[123.14517212 -34.53844070]
[133.85484314 -40.30305099]
[138.56005859 -54.54597092]
[143.26528931 -68.78889465]
[142.14875793 -74.10582733]
[143.15240479 -78.81712341]
[145.66604614 -82.19786835]
[148.87629700 -83.88400269]
[154.61654663 -97.74219513]
[160.35681152 -111.60038757]
[166.09706116 -125.45858765]
[171.83731079 -139.31677246]
[177.57756042 -153.17497253]
[168.69471741 -165.78840637]
[168.06416321 -181.20286560]
[175.88710022 -194.49967957]
[189.66725159 -201.43586731]
[205.00744629 -199.79812622]
[217.01264954 -190.10903931]
[221.85208130 -175.46035767]
[217.98146057 -160.52644348]
[206.63591003 -150.07264709]
[191.43574524 -147.43472290]
[185.69549561 -133.57652283]
[179.95524597 -119.71833038]
[174.21499634 -105.86013794]
[168.47474670 -92.00194550]
[162.73449707 -78.14375305]
[157.50820923 -64.08367157]
[152.80299377 -49.84074783]
[148.09776306 -35.59782410]
[152.61923218 -18.68800354]
[138.89741516 -6.48176813]
[134.54313660 7.87233686]
[130.18887329 22.22644234]
[125.83459473 36.58054733]
[134.39167786 51.00317383]
[129.82954407 67.49005127]
[114.48384094 75.78226471]
[110.48314667 90.23890686]
[113.80507660 103.82038116]
[103.97348785 113.76178741]
[99.97280121 128.21842957]
[95.97210693 142.67506409]
[91.97142029 157.13171387]
[101.36901855 167.29641724]
[104.46544647 180.67752075]
[100.55068207 193.72914124]
[90.75814056 203.04734802]
[77.73922729 206.25775146]
[73.38495636 220.61186218]
[69.03068542 234.96597290]
[64.67642212 249.32006836]
[60.32214737 263.67416382]
[55.96787643 278.02828979]
[51.61360931 292.38238525]
[47.43581390 306.78884888]
[43.43511963 321.24548340]
[39.43442917 335.70211792]
[35.43373871 350.15878296]
[31.43304825 364.61541748]
[27.43235588 379.07205200]
[23.96648407 393.66613770]
[21.04012871 408.37792969]
[18.11377525 423.08972168]
[15.18741989 437.80148315]
[28.78678703 444.32131958]
[40.33696365 454.01895142]
[49.11189651 466.28482056]
[54.55998230 480.34783936]
[56.33875275 495.32406616]
[54.33639145 510.27200317]
[48.67877197 524.25207520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 120]
[17 119]
[18 118]
[19 117]
[23 116]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[40 99]
[41 98]
[42 97]
[43 96]
[45 94]
[46 93]
[50 90]
[51 89]
[52 88]
[53 87]
[56 85]
[57 84]
[58 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
