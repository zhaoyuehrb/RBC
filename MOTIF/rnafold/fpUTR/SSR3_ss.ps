%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGCUGACGGGUCGUUAGCGGAUACGGCGGCCGCAGGGGCGGAGUCAAGGGCCUUUGCCCGCCUUGGCGGCCGGCUCUACGUUCCCUGUUCUCGCCUGCAGCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[92.98728180 411.52801514]
[92.56658173 396.53390503]
[80.19200897 388.28720093]
[74.98466492 374.16815186]
[79.13819122 359.51889038]
[91.26137543 350.01443481]
[90.84068298 335.02032471]
[90.41998291 320.02621460]
[89.99929047 305.03213501]
[86.61748505 298.33834839]
[89.78302765 289.61291504]
[89.78302765 274.61291504]
[89.78302765 259.61291504]
[89.78302765 244.61289978]
[86.59027863 237.82691956]
[89.99929047 229.19367981]
[90.41998291 214.19958496]
[80.03268433 203.58641052]
[80.24573517 188.37426758]
[91.44824219 177.55107117]
[91.86894226 162.55697632]
[92.28963470 147.56286621]
[92.50000000 132.56434631]
[92.50000000 117.56434631]
[82.32884216 107.24475861]
[82.32884216 92.75524139]
[92.50000000 82.43565369]
[92.50000000 67.43565369]
[92.50000000 52.43565369]
[91.65894318 37.45925140]
[89.97947693 22.55356789]
[88.09113312 7.67290497]
[85.99427795 -7.17981195]
[83.89742279 -22.03252983]
[81.80056763 -36.88524628]
[79.70371246 -51.73796082]
[77.60685730 -66.59068298]
[68.01639557 -79.17375183]
[73.89857483 -92.85765076]
[71.80171967 -107.71037292]
[69.70486450 -122.56308746]
[67.60800934 -137.41580200]
[65.51115417 -152.26852417]
[63.41429901 -167.12123108]
[61.31744385 -181.97395325]
[56.96324921 -190.17121887]
[59.37612915 -197.27200317]
[57.69666290 -212.17768860]
[48.46288300 -225.02478027]
[54.72653198 -238.53833008]
[53.04706573 -253.44401550]
[51.36759567 -268.34970093]
[43.58585358 -283.41226196]
[55.90556717 -295.05963135]
[70.50817871 -286.44567871]
[66.27327728 -270.02917480]
[67.95274353 -255.12348938]
[69.63221741 -240.21780396]
[78.74586487 -228.43685913]
[72.60234833 -213.85716248]
[74.28181458 -198.95147705]
[76.17015839 -184.07081604]
[78.26701355 -169.21809387]
[80.36386871 -154.36537170]
[82.46072388 -139.51266479]
[84.55757904 -124.65994263]
[86.65443420 -109.80722809]
[88.75128937 -94.95450592]
[98.19177246 -83.43380737]
[92.45957184 -68.68753815]
[94.55642700 -53.83481598]
[96.65328217 -38.98210144]
[98.75013733 -24.12938309]
[100.84699249 -9.27666759]
[102.94384766 5.57604980]
[107.05385590 11.84909153]
[104.88516235 20.87410164]
[106.56462860 35.77978516]
[108.83032990 37.65538788]
[110.43240356 40.60585403]
[110.93203735 44.36073303]
[110.00543213 48.48667908]
[107.50000000 52.43565369]
[107.50000000 67.43565369]
[107.50000000 82.43565369]
[117.67115784 92.75524139]
[117.67115784 107.24475861]
[107.50000000 117.56434631]
[107.50000000 132.56434631]
[110.66554260 141.28979492]
[107.28372955 147.98356628]
[106.86303711 162.97766113]
[106.44234467 177.97177124]
[117.02037048 189.40606689]
[116.38012695 204.60621643]
[105.41408539 214.62028503]
[104.99339294 229.61437988]
[104.78302765 244.61289978]
[104.78302765 259.61291504]
[104.78302765 274.61291504]
[104.78302765 289.61291504]
[104.99339294 304.61141968]
[105.41408539 319.60552979]
[105.83477783 334.59963989]
[106.25547028 349.59371948]
[118.89250183 358.40347290]
[123.86088562 372.79681396]
[119.45339203 387.18563843]
[107.56068420 396.11322021]
[107.98137665 411.10729980]
[110.71146393 430.29574585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[6 105]
[7 104]
[8 103]
[9 102]
[11 101]
[12 100]
[13 99]
[14 98]
[16 97]
[17 96]
[20 93]
[21 92]
[22 91]
[23 89]
[24 88]
[27 85]
[28 84]
[29 83]
[30 78]
[31 77]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[47 61]
[48 60]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
