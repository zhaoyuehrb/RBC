%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGCAGAAGGAGAGGCGUUACUUCCUGGAGACUUCAGGUGUGGUAGCCGGCGCCGCGCCCAUAGCCGGACGGGGAUCUGAGCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[148.96664429 179.97013855]
[144.40171814 169.97209167]
[143.53237915 158.97668457]
[146.49017334 148.31062317]
[134.94540405 138.73364258]
[123.40063477 129.15667725]
[111.85586548 119.57971191]
[100.82766724 122.87448120]
[89.59019470 120.38535309]
[80.98487091 112.74172211]
[77.18758392 101.87630463]
[79.15850067 90.53646088]
[68.28660583 80.20195770]
[51.80169296 83.51818848]
[36.70544815 76.49426270]
[28.78303528 62.03728104]
[30.94246864 45.86023331]
[19.72773933 35.89881516]
[8.51301098 25.93739700]
[-9.52603531 22.75390625]
[-14.60649776 6.04923582]
[-26.15126610 -3.52773237]
[-37.69603348 -13.10470009]
[-49.24080276 -22.68166924]
[-62.26759338 -22.28829002]
[-71.71006012 -30.67483521]
[-72.78500366 -42.85299301]
[-83.99973297 -52.81441116]
[-95.21446228 -62.77582932]
[-106.42919159 -72.73725128]
[-117.64392090 -82.69866943]
[-128.85864258 -92.66008759]
[-144.71609497 -98.65823364]
[-143.34213257 -115.55641174]
[-126.72399139 -118.91403198]
[-118.89723206 -103.87481689]
[-107.68250275 -93.91339874]
[-96.46777344 -83.95198059]
[-85.25304413 -73.99055481]
[-74.03831482 -64.02913666]
[-62.82358932 -54.06771851]
[-45.54222870 -51.57539368]
[-39.66383743 -34.22643661]
[-28.11906624 -24.64946938]
[-16.57429886 -15.07250118]
[-5.02953005 -5.49553251]
[7.17096901 -6.27709103]
[16.89065552 1.78653181]
[18.47443008 14.72266769]
[29.68915939 24.68408775]
[40.90388870 34.64550781]
[53.73724747 30.57207870]
[67.00270844 33.44623566]
[77.16098022 42.61201477]
[81.44679260 55.72027206]
[78.62110901 69.33006287]
[89.49300385 79.66456604]
[107.31356049 78.31040192]
[120.67549133 90.17906189]
[121.43283844 108.03494263]
[132.97760010 117.61191559]
[144.52236938 127.18888092]
[156.06713867 136.76585388]
[174.83117676 130.66049194]
[193.45030212 136.76252747]
[204.79890442 152.56431580]
[204.63577271 171.87962341]
[217.36543274 179.81407166]
[230.09509277 187.74853516]
[242.82475281 195.68299866]
[255.55442810 203.61746216]
[273.87191772 203.72326660]
[281.68814087 219.33619690]
[294.67852783 226.83619690]
[307.66891479 234.33619690]
[324.05914307 233.79510498]
[332.49191284 247.85997009]
[324.29235840 262.06204224]
[307.89544678 261.79147339]
[300.16891479 247.32656860]
[287.17852783 239.82656860]
[274.18814087 232.32656860]
[262.29266357 235.14793396]
[251.35577393 228.83294678]
[247.61996460 216.34712219]
[234.89030457 208.41265869]
[222.16062927 200.47819519]
[209.43096924 192.54374695]
[196.70130920 184.60928345]
[187.81854248 190.74629211]
[177.33393860 193.48127747]
[166.50788879 192.45797729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[7 60]
[12 57]
[13 56]
[17 51]
[18 50]
[19 49]
[21 46]
[22 45]
[23 44]
[24 43]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
