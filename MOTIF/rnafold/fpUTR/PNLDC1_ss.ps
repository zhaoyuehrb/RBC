%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCAGCACGUGGGCAGCACGUGAUAGCGCUGGGCGACUCCGCGGAGCUGCACGGCCAUGGACGUGGGCGCCGACGAGUUCGAGGAGAGCCUCCCUCUGCUGCAGGAGCUCGUCCAGGAGGCCGACUUCGUGGAGGUGAGCGCGGGUGCCUUGGCCGCCUGCAGAUCUACAGUGUGAGGAGUGCUGGCG\
) } def
/len { sequence length } bind def

/coor [
[127.69949341 127.23093414]
[115.56401825 136.04740906]
[103.42909241 127.23017120]
[108.06441498 112.96502686]
[100.56441498 112.96502686]
[92.43604279 125.57175446]
[96.44423676 142.59187317]
[87.09368896 156.96636963]
[70.57323456 160.07591248]
[62.65221405 172.81393433]
[54.73119354 185.55197144]
[46.81017685 198.29000854]
[38.88916016 211.02804565]
[30.96814156 223.76606750]
[33.19616699 239.65365601]
[22.05973625 251.20179749]
[6.10176516 249.55174255]
[-2.43615699 235.96926880]
[2.99553394 220.87370300]
[18.23011017 215.84504700]
[26.15112686 203.10702515]
[34.07214355 190.36898804]
[41.99316406 177.63095093]
[49.91418076 164.89292908]
[57.83519745 152.15489197]
[53.18102264 140.12954712]
[56.35504150 127.43093109]
[66.41464233 118.75520325]
[79.82931519 117.44338226]
[87.95768738 104.83665466]
[91.72130585 90.31649017]
[90.74026489 75.34860229]
[89.75921631 60.38072205]
[88.77816772 45.41283798]
[87.67469788 30.45347977]
[86.44888306 15.50365162]
[85.22306824 0.55382293]
[81.39747620 -7.75905418]
[84.10154724 -14.65030289]
[83.12049866 -29.61818695]
[79.43142700 -37.99254608]
[82.24788666 -44.83862686]
[81.51187134 -59.82056046]
[80.77585602 -74.80249023]
[80.03984070 -89.78442383]
[77.19093323 -94.19660187]
[76.40871429 -98.79949951]
[77.41748047 -102.77017975]
[79.65365601 -105.51592255]
[79.65365601 -120.51592255]
[79.65365601 -135.51591492]
[76.52019501 -144.11363220]
[79.77838135 -150.76084900]
[80.02381134 -165.75883484]
[80.26923370 -180.75683594]
[69.55829620 -192.06671143]
[70.02084351 -207.27331543]
[80.86910248 -217.41485596]
[81.11453247 -232.41285706]
[81.35995483 -247.41084290]
[81.60538483 -262.40884399]
[81.85080719 -277.40682983]
[82.09622955 -292.40481567]
[82.34165955 -307.40280151]
[79.34928894 -316.05062866]
[82.71579742 -322.64364624]
[83.20658875 -337.63562012]
[75.92495728 -351.68157959]
[84.07453918 -364.14886475]
[84.56533051 -379.14083862]
[85.05611420 -394.13281250]
[75.99884796 -410.15695190]
[85.82128143 -424.69128418]
[86.06670380 -439.68927002]
[86.06670380 -454.68927002]
[85.82128143 -469.68725586]
[85.57585144 -484.68527222]
[85.33042908 -499.68325806]
[85.08499908 -514.68127441]
[84.83957672 -529.67926025]
[84.59414673 -544.67724609]
[84.34872437 -559.67523193]
[84.10330200 -574.67321777]
[71.97260284 -592.32580566]
[82.69821930 -609.94897461]
[81.71717072 -624.91687012]
[73.09386444 -638.18139648]
[79.98219299 -651.38751221]
[79.00114441 -666.35534668]
[78.02009583 -681.32324219]
[77.03905487 -696.29113770]
[65.97383881 -707.90753174]
[68.29952240 -723.78112793]
[82.23202515 -731.73504639]
[97.08353424 -725.66772461]
[101.46123505 -710.23352051]
[92.00693512 -697.27221680]
[92.98798370 -682.30432129]
[93.96903229 -667.33642578]
[94.95007324 -652.36853027]
[103.50321198 -640.17456055]
[96.68505096 -625.89788818]
[97.66609955 -610.92999268]
[105.22869110 -606.22491455]
[109.84027863 -598.44439697]
[110.35288239 -589.27648926]
[106.52433014 -580.77923584]
[99.10128784 -574.91864014]
[99.34671783 -559.92065430]
[99.59214020 -544.92266846]
[99.83757019 -529.92468262]
[100.08299255 -514.92669678]
[100.32842255 -499.92868042]
[100.57384491 -484.93069458]
[100.81927490 -469.93270874]
[101.06469727 -454.93469238]
[103.82437897 -451.01895142]
[104.14263916 -445.32452393]
[101.06469727 -439.44384766]
[100.81927490 -424.44586182]
[109.00832367 -415.52902222]
[108.91690826 -403.02169800]
[100.04808044 -393.64202881]
[99.55729675 -378.65005493]
[99.06651306 -363.65808105]
[106.38323975 -350.68447876]
[98.19855499 -337.14483643]
[97.70777130 -322.15286255]
[97.33965302 -307.15737915]
[97.09422302 -292.15939331]
[96.84880066 -277.16140747]
[96.60337067 -262.16342163]
[96.35794830 -247.16542053]
[96.11251831 -232.16741943]
[95.86709595 -217.16943359]
[106.37772369 -206.67837524]
[106.34247589 -191.46478271]
[95.26722717 -180.51139832]
[95.02179718 -165.51341248]
[94.77637482 -150.51541138]
[94.65365601 -135.51591492]
[94.65365601 -120.51592255]
[94.65365601 -105.51592255]
[95.02177429 -90.52043915]
[95.75778961 -75.53850555]
[96.49380493 -60.55657578]
[97.22982025 -45.57464218]
[98.08837891 -30.59923363]
[99.06942749 -15.63134956]
[100.17289734 -0.67199320]
[101.39871216 14.27783585]
[102.62452698 29.22766495]
[106.31048584 35.64755630]
[103.74605560 44.43178940]
[104.72709656 59.39967346]
[105.70814514 74.36756134]
[106.68919373 89.33544159]
[143.17114258 104.83665466]
[151.29951477 117.44338226]
[159.42788696 130.05010986]
[167.55625916 142.65682983]
[181.53726196 150.06237793]
[181.93125916 164.95178223]
[190.05963135 177.55850220]
[198.18800354 190.16523743]
[213.37725830 193.61837769]
[221.44100952 206.51918030]
[218.05534363 220.97854614]
[226.18371582 233.58526611]
[234.31208801 246.19198608]
[249.81207275 246.92030334]
[261.90264893 256.64645386]
[265.93475342 271.63049316]
[260.35794067 286.11077881]
[247.31665039 294.51934814]
[231.82548523 293.62295532]
[219.84114075 283.76623535]
[215.97181702 268.73931885]
[221.70536804 254.32035828]
[213.57699585 241.71363831]
[205.44862366 229.10691833]
[190.88082886 226.22331238]
[182.45791626 213.55409241]
[185.58128357 198.29360962]
[177.45291138 185.68687439]
[169.32453918 173.08015442]
[155.92492676 166.57630920]
[154.94953918 150.78520203]
[146.82116699 138.17848206]
[138.69279480 125.57175446]
[130.56440735 112.96502686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[31 157]
[32 156]
[33 155]
[34 154]
[35 152]
[36 151]
[37 150]
[39 149]
[40 148]
[42 147]
[43 146]
[44 145]
[45 144]
[49 143]
[50 142]
[51 141]
[53 140]
[54 139]
[55 138]
[58 135]
[59 134]
[60 133]
[61 132]
[62 131]
[63 130]
[64 129]
[66 128]
[67 127]
[69 125]
[70 124]
[71 123]
[73 120]
[74 119]
[75 116]
[76 115]
[77 114]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[85 103]
[86 102]
[88 100]
[89 99]
[90 98]
[91 97]
[158 191]
[159 190]
[160 189]
[161 188]
[163 186]
[164 185]
[165 184]
[168 181]
[169 180]
[170 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
