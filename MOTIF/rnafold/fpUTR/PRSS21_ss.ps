%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGAGUAGAGGGCAGAGCUCCCACCCCGCCCCGCCCCCAGGGGGCGCCCCGGGCCCGGCGCGAGAGGAGGCAGAGGGGGCGUCAGGCCGCGGGAGAGGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[16.24135590 195.45434570]
[1.50809264 198.24485779]
[-12.54907608 193.31925964]
[-23.83271980 203.20254517]
[-35.11636353 213.08583069]
[-46.40000916 222.96911621]
[-57.68365479 232.85240173]
[-68.96730042 242.73568726]
[-80.25094604 252.61897278]
[-77.18511963 267.66876221]
[-82.07015991 282.23010254]
[-93.59200287 292.38601685]
[-108.65132904 295.40463257]
[-123.19726562 290.47399902]
[-133.31701660 278.92037964]
[-136.28843689 263.85165405]
[-131.31221008 249.32124329]
[-119.72692871 239.23774719]
[-104.64897156 236.31358337]
[-90.13423157 241.33532715]
[-78.85058594 231.45204163]
[-67.56694031 221.56875610]
[-56.28329849 211.68547058]
[-44.99965286 201.80218506]
[-33.71600723 191.91889954]
[-22.43236351 182.03561401]
[-25.46316338 167.45205688]
[-20.75602913 153.21482849]
[-9.48005390 143.17895508]
[5.40302372 140.11451721]
[19.91636467 144.94258118]
[31.20000839 135.05929565]
[42.48365402 125.17600250]
[53.62099838 115.12813568]
[64.60964203 104.91786194]
[65.70967865 89.95825195]
[56.33275604 78.25041962]
[46.95583725 66.54258728]
[37.57891464 54.83475494]
[28.20199394 43.12692261]
[13.58120441 34.54386520]
[17.78139496 18.11843491]
[34.72764206 17.60746956]
[39.90982437 33.75000000]
[49.28674698 45.45783234]
[58.66366959 57.16566467]
[68.04058838 68.87349701]
[77.41751099 80.58132935]
[92.08152008 73.31242371]
[107.24760437 75.14340973]
[118.08226013 84.30185699]
[131.91929626 78.51078796]
[145.75631714 72.71971130]
[159.59335327 66.92864227]
[173.34388733 60.93506622]
[187.00494385 54.74028015]
[200.66601562 48.54549789]
[214.32707214 42.35071182]
[223.70001221 29.60478973]
[238.48661804 31.39525986]
[252.14767456 25.20047760]
[265.80874634 19.00569344]
[279.46981812 12.81090927]
[293.13085938 6.61612558]
[291.67291260 -8.45547199]
[295.19009399 -23.18327141]
[303.30093384 -35.96971130]
[315.12561035 -45.42781448]
[329.38146973 -50.53163528]
[344.52215576 -50.72755051]
[358.90530396 -45.99430847]
[370.97076416 -36.84533691]
[379.40972900 -24.27304649]
[383.30682373 -9.64118576]
[382.23931885 5.46309042]
[376.32302856 19.40138435]
[366.19967651 30.66177177]
[352.96737671 38.02281189]
[338.06146240 40.68603516]
[323.09884644 38.36254883]
[309.70251465 31.30439758]
[299.32565308 20.27718925]
[285.66458130 26.47197342]
[272.00354004 32.66675568]
[258.34246826 38.86154175]
[244.68139648 45.05632401]
[236.28558350 57.35915375]
[220.52186584 56.01177597]
[206.86079407 62.20656204]
[193.19973755 68.40134430]
[179.53866577 74.59613037]
[174.67013550 80.31490326]
[165.38442993 80.76567078]
[151.54739380 86.55674744]
[137.71035767 92.34781647]
[123.87332916 98.13889313]
[121.16382599 114.05403900]
[108.46613312 125.49571991]
[90.46381378 126.67042542]
[74.81991577 115.90650177]
[63.83127213 126.11678314]
[59.58588028 134.38746643]
[52.36693954 136.45964050]
[41.08329773 146.34292603]
[29.79965210 156.22622681]
[32.67366028 171.24911499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[31 105]
[32 104]
[33 103]
[34 101]
[35 100]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[51 96]
[52 95]
[53 94]
[54 93]
[55 91]
[56 90]
[57 89]
[58 88]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
