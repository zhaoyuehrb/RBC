%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGUGAGCCUCUGGGGCGUACCGGCUUGGCGCGGCGGCAGCGGCAGCGGCGGCUGGGAGAGCGGUCGGCGGGGUUUCUUCGUUGCAUUGCCUGAGAGGAGCGGAGUCUGCCAGGUGGUGUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[93.51149750 166.51110840]
[83.45253754 155.38378906]
[79.98618317 140.78981018]
[83.96718597 126.32773590]
[94.41286469 115.56426239]
[83.49311829 125.84819031]
[72.57337952 136.13211060]
[61.65363312 146.41604614]
[50.73389053 156.69998169]
[39.81414795 166.98390198]
[35.07251740 182.07786560]
[20.50262260 185.17100525]
[9.58288002 195.45492554]
[-1.33686316 205.73886108]
[-12.25660610 216.02278137]
[-19.64188194 231.28366089]
[-36.35079575 228.41162109]
[-38.21649551 211.56065369]
[-22.54053688 205.10304260]
[-11.62079239 194.81910706]
[-0.70104963 184.53518677]
[10.21869373 174.25125122]
[14.17927265 159.89286804]
[29.53021812 156.06416321]
[40.44996262 145.78022766]
[51.36970520 135.49630737]
[62.28944778 125.21237183]
[73.20919037 114.92844391]
[84.12893677 104.64451599]
[86.10168457 89.77480316]
[78.24121857 76.99932098]
[70.38074493 64.22383881]
[56.55917358 56.52482986]
[56.47953796 41.63043976]
[48.61906815 28.85495377]
[41.38341141 23.11442757]
[40.72753143 15.67752743]
[33.17567062 2.71722722]
[25.62380981 -10.24307346]
[18.07194710 -23.20337296]
[4.43896580 -31.23159790]
[4.71650839 -46.12361526]
[-2.83535314 -59.08391571]
[-18.01803017 -57.96691895]
[-32.12260056 -63.53001785]
[-42.37116241 -74.61997223]
[-46.77030945 -89.00081635]
[-44.49871063 -103.80450439]
[-36.05987549 -116.10293579]
[-43.61173630 -129.06323242]
[-51.16359711 -142.02354431]
[-58.71545792 -154.98384094]
[-73.21111298 -162.65248108]
[-73.54722595 -179.04818726]
[-59.37803650 -187.30445862]
[-45.27958679 -178.92794800]
[-45.75515747 -162.53570557]
[-38.20329666 -149.57540894]
[-30.65143585 -136.61509705]
[-23.09957314 -123.65480042]
[-8.23913765 -124.93266296]
[5.76003027 -119.60981750]
[16.10223389 -108.69194794]
[20.69727135 -94.30772400]
[18.58271790 -79.29387665]
[10.12494755 -66.63578033]
[17.67680931 -53.67547989]
[30.76963043 -46.57426071]
[31.03224754 -30.75523567]
[38.58411026 -17.79493523]
[46.13597107 -4.83463478]
[53.68783188 8.12566566]
[61.39455414 20.99448395]
[69.25502014 33.76996994]
[82.51435852 40.55518723]
[83.15623474 56.36336517]
[91.01670074 69.13885498]
[98.87717438 81.91433716]
[95.11735535 67.39318848]
[98.54922485 52.79105759]
[108.38380432 41.46493530]
[122.36014557 36.01867294]
[137.26513672 37.70434952]
[149.67213440 46.13443375]
[156.72880554 59.37087250]
[156.81285095 74.37063599]
[149.90495300 87.68531799]
[137.59318542 96.25390625]
[122.70857239 98.10656738]
[136.40687561 104.21856689]
[150.10517883 110.33057404]
[163.80348206 116.44257355]
[177.50178528 122.55457306]
[191.20007324 128.66658020]
[204.89837646 134.77857971]
[218.59667969 140.89057922]
[232.29498291 147.00257874]
[245.99328613 153.11457825]
[257.99142456 146.86460876]
[271.20159912 148.67175293]
[280.79519653 157.64784241]
[283.39733887 170.32638550]
[296.94512939 176.76510620]
[310.49295044 183.20382690]
[325.29745483 177.67193604]
[339.64260864 184.30459595]
[345.01766968 199.16677856]
[338.23370361 213.44099426]
[323.31552124 218.65863037]
[309.11383057 211.72413635]
[304.05422974 196.75163269]
[290.50640869 190.31291199]
[276.95861816 183.87419128]
[261.42135620 190.19267273]
[245.79472351 183.22586060]
[239.88127136 166.81288147]
[226.18298340 160.70088196]
[212.48468018 154.58888245]
[198.78637695 148.47688293]
[185.08807373 142.36488342]
[171.38977051 136.25286865]
[157.69148254 130.14086914]
[143.99317932 124.02886963]
[130.29487610 117.91687012]
[116.59657288 111.80487061]
[130.00619507 118.52663422]
[138.52925110 130.86994934]
[140.06413269 145.79121399]
[134.23236084 159.61114502]
[122.47193909 168.92202759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 22]
[13 21]
[14 20]
[15 19]
[30 78]
[31 77]
[32 76]
[34 74]
[35 73]
[37 72]
[38 71]
[39 70]
[40 69]
[42 67]
[43 66]
[49 60]
[50 59]
[51 58]
[52 57]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
