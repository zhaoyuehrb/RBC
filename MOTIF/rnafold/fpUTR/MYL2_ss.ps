%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCUGGGCUGCAGAGAGCUGGGCGGAGUGUGGAAUUCUUCUCGGGAGGCAGUGCUGGGUCCUUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[132.72676086 293.64910889]
[134.45855713 278.57046509]
[141.52391052 265.13748169]
[152.96728516 255.16682434]
[147.83697510 241.07144165]
[142.70668030 226.97605896]
[137.57637024 212.88066101]
[132.44607544 198.78527832]
[127.00950623 184.80516052]
[121.26925659 170.94696045]
[115.52899933 157.08877563]
[109.78874969 143.23057556]
[104.04850006 129.37239075]
[92.45025635 128.67279053]
[82.01143646 123.56987000]
[74.33514404 114.84730530]
[70.60023499 103.84461975]
[71.38028717 92.25150299]
[76.55549622 81.84834290]
[85.33111572 74.23274994]
[81.44882965 59.74386215]
[77.56654358 45.25497818]
[73.68425751 30.76608849]
[69.80197144 16.27720070]
[58.75656509 4.94981909]
[62.93616486 -9.34634209]
[59.05387878 -23.83522987]
[55.17159271 -38.32411575]
[51.28930664 -52.81300354]
[47.40702057 -67.30189514]
[34.28818130 -76.53636932]
[33.47238922 -92.55867004]
[45.58545303 -103.07785034]
[61.33526611 -100.02450562]
[68.63992310 -85.74089050]
[61.89590836 -71.18417358]
[65.77819824 -56.69528961]
[69.66048431 -42.20640182]
[73.54276276 -27.71751595]
[77.42504883 -13.22862816]
[88.19277191 -2.93758774]
[84.29086304 12.39491558]
[88.17314911 26.88380241]
[92.05542755 41.37269211]
[95.93771362 55.86157990]
[99.81999969 70.35046387]
[117.19727325 75.84671783]
[128.07655334 90.46929169]
[128.34710693 108.69304657]
[117.90669250 123.63213348]
[123.64694214 137.49032593]
[129.38719177 151.34852600]
[135.12744141 165.20671082]
[140.86769104 179.06491089]
[147.23625183 186.05667114]
[146.54145813 193.65496826]
[151.67176819 207.75036621]
[156.80206299 221.84574890]
[161.93237305 235.94114685]
[167.06266785 250.03652954]
[182.23780823 250.31883240]
[196.28474426 256.06756592]
[207.30374146 266.50531006]
[213.80458069 280.22039795]
[214.90806580 295.35797119]
[210.46496582 309.87084961]
[201.07617188 321.79623413]
[188.01144409 329.52136230]
[173.03767395 332.00140381]
[158.17994690 328.90103149]
[145.44764709 320.63949585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
