%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAAAAAAGUGGGAGAAAUCAGUGCAGCCAAAUUCAGAACUAAAGAGAAGAGAAUAAAGACUCAUAACUUUCUCAUUGAAGCUGCCUUCUUACCAAGUCCAGAGGAUCUCUACUCUGGACAGAGGAACGCCCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[50.68012238 173.97741699]
[36.43985748 169.26416016]
[24.58161354 160.07818604]
[16.45877457 147.46789551]
[12.99839973 132.87248230]
[14.59541988 117.95774841]
[21.06756592 104.42588806]
[31.67617607 93.82128906]
[45.21048737 87.35426331]
[60.12583160 85.76289368]
[74.71992493 89.22879028]
[87.32900238 97.35810852]
[77.71587372 85.84343719]
[68.10273743 74.32876587]
[58.36101532 62.92267990]
[48.49193573 51.62660599]
[38.62285614 40.33053589]
[28.75377274 29.03446388]
[24.41129875 27.73849106]
[21.08296967 25.33404541]
[18.99761200 22.29330063]
[18.20061493 19.11390495]
[18.56224442 16.25468826]
[9.74546432 4.11943388]
[2.10433125 -1.03831697]
[0.87061912 -8.38849068]
[-7.67164850 -20.71852112]
[-16.21391487 -33.04855347]
[-24.75618362 -45.37858582]
[-33.29845047 -57.70861435]
[-37.46851730 -59.48264313]
[-40.50670624 -62.24462128]
[-42.23849869 -65.49973297]
[-42.67450333 -68.74837494]
[-41.99501801 -71.54912567]
[-49.39764023 -84.59523773]
[-56.80026245 -97.64135742]
[-64.20288849 -110.68746948]
[-71.60550690 -123.73358917]
[-86.89930725 -123.95066833]
[-99.94488525 -131.74230957]
[-107.29005432 -144.92999268]
[-107.04964447 -159.92326355]
[-99.38835144 -172.69706726]
[-106.79096985 -185.74317932]
[-114.19359589 -198.78930664]
[-121.59622192 -211.83541870]
[-136.89001465 -212.05249023]
[-149.93559265 -219.84413147]
[-157.28076172 -233.03181458]
[-157.04034424 -248.02508545]
[-149.37905884 -260.79888916]
[-156.78167725 -273.84500122]
[-164.18431091 -286.89111328]
[-179.61830139 -288.49459839]
[-191.13964844 -298.88873291]
[-194.31814575 -314.07678223]
[-187.93159485 -328.21862793]
[-174.43576050 -335.87643433]
[-159.02006531 -334.10562134]
[-147.61215210 -323.58709717]
[-144.59860229 -308.36547852]
[-151.13818359 -294.29376221]
[-143.73556519 -281.24761963]
[-136.33294678 -268.20150757]
[-121.43780518 -268.22665405]
[-108.44355011 -260.74301147]
[-100.88993073 -247.67361450]
[-100.89228058 -232.47831726]
[-108.55010223 -219.23803711]
[-101.14747620 -206.19192505]
[-93.74485779 -193.14581299]
[-86.34223175 -180.09968567]
[-71.44709778 -180.12484741]
[-58.45283890 -172.64118958]
[-50.89921951 -159.57177734]
[-50.90156937 -144.37649536]
[-58.55939484 -131.13621521]
[-51.15676880 -118.09009552]
[-43.75414658 -105.04397583]
[-36.35152435 -91.99786377]
[-28.94890022 -78.95174408]
[-20.96842003 -66.25088501]
[-12.42615223 -53.92085266]
[-3.88388467 -41.59082031]
[4.65838289 -29.26078987]
[13.20065022 -16.93075752]
[21.88072014 -4.69734478]
[30.69749832 7.43791008]
[40.04984665 19.16538239]
[49.91892624 30.46145439]
[59.78800583 41.75752640]
[69.65708923 53.05359650]
[76.48303223 56.04586029]
[79.61740875 64.71563721]
[89.23054504 76.23030853]
[98.84367371 87.74497986]
[111.36868286 73.50498199]
[135.65904236 71.97669220]
[150.20437622 75.64179993]
[164.74972534 79.30690765]
[179.29505920 82.97200775]
[193.84040833 86.63711548]
[208.38575745 90.30222321]
[222.93109131 93.96733093]
[237.47644043 97.63243866]
[249.30128479 87.58492279]
[264.77609253 86.44035339]
[277.95046997 94.63884735]
[283.75860596 109.02790833]
[279.96716309 124.07465363]
[268.03402710 133.99330139]
[252.54771423 134.96992493]
[239.46304321 126.62899780]
[233.81132507 112.17778015]
[219.26599121 108.51267242]
[204.72064209 104.84756470]
[190.17530823 101.18245697]
[175.62995911 97.51735687]
[161.08462524 93.85224915]
[146.53927612 90.18714142]
[131.99392700 86.52203369]
[127.25226593 92.33293915]
[117.76892853 103.95474243]
[113.02725983 109.76564026]
[119.53551483 123.28017426]
[126.04376984 136.79470825]
[140.65069580 143.42924500]
[144.43099976 159.02055359]
[134.48474121 171.60832214]
[118.44185638 171.53627014]
[108.60906219 158.85969543]
[112.52923584 143.30296326]
[106.02098083 129.78843689]
[99.51272583 116.27389526]
[101.69975281 131.11360168]
[98.82070160 145.83471680]
[91.20416260 158.75711060]
[79.71939850 168.40596008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 97]
[13 96]
[14 95]
[15 93]
[16 92]
[17 91]
[18 90]
[23 89]
[24 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[44 73]
[45 72]
[46 71]
[47 70]
[52 65]
[53 64]
[54 63]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
