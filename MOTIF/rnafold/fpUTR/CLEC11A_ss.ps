%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAACGGACCGGACAGAGACGAGGAGAGGAACAGGAAGAGAGAAGCUGGGAGAAUCGGGAACCUGGGGGCUAGUGACCUGCACACAGGGCAGGGGCACUCGGCAGUUCCCAGAGGCCACCCCUCCCACCCCAGACAUCCAGACAUCUGGAACUUUGGGUGCCAAGAGUCCAGCUUA\
) } def
/len { sequence length } bind def

/coor [
[89.92581940 240.86470032]
[75.98823547 234.79739380]
[65.43704224 223.85479736]
[59.88121414 209.70553589]
[60.16798019 194.50730896]
[66.25360870 180.57771301]
[77.21009064 170.04092407]
[91.36663818 164.50372314]
[91.62988281 149.50602722]
[91.89313507 134.50833130]
[92.15637970 119.51065063]
[77.89868927 114.85036469]
[69.25316620 127.10820770]
[74.38221741 141.75308228]
[69.89143372 156.60610962]
[57.50760651 165.95600891]
[41.99256897 166.20753479]
[29.31217194 157.26397705]
[24.34228706 142.56431580]
[28.99393463 127.76087952]
[41.47846222 118.54588318]
[56.99531555 118.46268463]
[65.64084625 106.20483398]
[52.17695236 112.81722260]
[41.88849640 123.73269653]
[29.35440254 131.97264099]
[15.25438118 137.09019470]
[0.35305145 138.80784607]
[-14.54151249 137.03247070]
[-28.62160110 131.86032104]
[-41.12367630 123.57189178]
[-51.36976624 112.61663818]
[-58.80424500 99.58864594]
[-63.02395248 85.19441223]
[-63.80006409 70.21450043]
[-61.09048843 55.46125793]
[-55.04216003 41.73472214]
[-45.98307037 29.77926636]
[-34.40448380 20.24321175]
[-20.93428802 13.64368439]
[-6.30294466 10.33856678]
[8.69610882 10.50708866]
[23.24949837 14.14011192]
[36.56801605 21.04062271]
[47.92942429 30.83441925]
[56.71760559 42.99039841]
[62.45599747 56.84936142]
[64.83356476 71.66340637]
[72.25486755 84.69891357]
[71.99161530 69.70122528]
[71.72837067 54.70353317]
[71.46511841 39.70584106]
[71.20187378 24.70815277]
[70.93862152 9.71046257]
[58.35537338 3.56497788]
[49.69385147 -7.35440350]
[46.60301971 -20.87697601]
[49.63159180 -34.34576035]
[58.13162613 -45.13954163]
[70.39611816 -51.18299484]
[70.39611816 -66.18299866]
[58.01114273 -75.34370422]
[53.44839096 -89.87073517]
[58.25770187 -104.13027191]
[70.39611816 -112.72077942]
[70.39611816 -127.72077942]
[70.39611816 -142.72077942]
[70.39611816 -157.72077942]
[70.39611816 -172.72077942]
[70.39611816 -187.72077942]
[70.39611816 -202.72077942]
[70.39611816 -217.72077942]
[70.39611816 -232.72077942]
[69.86970520 -247.71154785]
[68.81752014 -262.67459106]
[67.76533508 -277.63763428]
[66.71315765 -292.60070801]
[56.05634308 -307.60131836]
[64.31784821 -323.07000732]
[63.00322342 -338.01229858]
[61.68860245 -352.95458984]
[60.37398148 -367.89685059]
[59.05936050 -382.83914185]
[46.14258575 -391.65338135]
[41.96323776 -406.72213745]
[48.49467850 -420.93038940]
[62.65296555 -427.56942749]
[77.75298309 -423.50451660]
[86.66497040 -410.65499878]
[85.18095398 -395.08798218]
[74.00164032 -384.15377808]
[75.31626129 -369.21148682]
[76.63088226 -354.26919556]
[77.94550323 -339.32693481]
[79.26012421 -324.38464355]
[88.33612823 -316.36004639]
[89.53813934 -303.90194702]
[81.67620850 -293.65289307]
[82.72839355 -278.68981934]
[83.78057098 -263.72677612]
[84.83275604 -248.76373291]
[86.88961029 -246.81869507]
[88.28830719 -243.92996216]
[88.66107941 -240.34838867]
[87.73929596 -236.45469666]
[85.39611816 -232.72077942]
[85.39611816 -217.72077942]
[85.39611816 -202.72077942]
[85.39611816 -187.72077942]
[85.39611816 -172.72077942]
[85.39611816 -157.72077942]
[85.39611816 -142.72077942]
[85.39611816 -127.72077942]
[85.39611816 -112.72077942]
[97.53453827 -104.13027191]
[102.34384918 -89.87073517]
[97.78109741 -75.34370422]
[85.39611816 -66.18299866]
[85.39611816 -51.18299484]
[99.57411957 -43.45868301]
[107.97763824 -29.56267738]
[108.23656464 -13.23153400]
[100.18588257 1.08742380]
[85.93630981 9.44721413]
[86.19956207 24.44490433]
[86.46280670 39.44259262]
[86.72605896 54.44028473]
[86.98930359 69.43797302]
[87.25255585 84.43566132]
[109.02102661 71.61341858]
[138.03211975 89.50828552]
[151.87768555 95.27893066]
[165.72325134 101.04956818]
[179.56883240 106.82021332]
[193.41439819 112.59085083]
[207.25996399 118.36148834]
[221.72749329 112.58842468]
[235.68666077 118.63790894]
[241.10124207 132.46606445]
[254.94680786 138.23670959]
[268.79235840 144.00735474]
[282.63793945 149.77798462]
[296.48348999 155.54862976]
[312.66870117 152.90832520]
[322.83697510 165.77449036]
[316.52807617 180.91151428]
[300.23205566 182.74774170]
[290.71286011 169.39419556]
[276.86727905 163.62355042]
[263.02172852 157.85292053]
[249.17616272 152.08227539]
[235.33059692 146.31163025]
[221.69795227 152.20117188]
[207.57437134 146.54615784]
[201.48931885 132.20706177]
[187.64375305 126.43641663]
[173.79818726 120.66577911]
[159.95262146 114.89513397]
[146.10705566 109.12449646]
[132.26148987 103.35385132]
[125.98463440 107.45886230]
[135.36866760 119.16099548]
[148.22161865 126.89413452]
[148.50299072 141.89149475]
[135.94912720 150.10128784]
[122.32239532 143.83131409]
[120.39017487 128.95680237]
[113.43092346 115.66888428]
[107.15407562 119.77389526]
[106.89082336 134.77159119]
[106.62757874 149.76927185]
[106.36432648 164.76696777]
[120.31782532 170.79757690]
[130.89778137 181.71238708]
[136.49081421 195.84696960]
[136.24401855 211.04591370]
[130.19506836 224.99145508]
[119.26634216 235.55703735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 172]
[9 171]
[10 170]
[11 169]
[12 23]
[13 22]
[49 129]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[60 119]
[61 118]
[65 114]
[66 113]
[67 112]
[68 111]
[69 110]
[70 109]
[71 108]
[72 107]
[73 106]
[74 101]
[75 100]
[76 99]
[77 98]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[131 160]
[132 159]
[133 158]
[134 157]
[135 156]
[136 155]
[139 152]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
