%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGGAGGGCCUGACCGCUCUUCCCGGCAUGCAUUGUUCGGGACGAGGCGAGUCGGGCGCCAAGCGCGGGGCCGGAGCGGCCUUCCCGGAGUCCUUUGCGCGGCACCUGGCGACAAA\
) } def
/len { sequence length } bind def

/coor [
[104.52897644 191.09465027]
[102.55472565 176.22514343]
[100.58047485 161.35563660]
[98.60622406 146.48612976]
[96.63197327 131.61662292]
[94.65772247 116.74710846]
[86.04814911 112.15299988]
[80.85714722 103.30951691]
[81.05740356 92.56092072]
[87.10463715 83.07842255]
[72.57392120 79.35575104]
[58.04320526 75.63307190]
[43.51248932 71.91039276]
[28.98177528 68.18772125]
[14.45105934 64.46504211]
[-0.07965524 60.74236298]
[-14.65824223 57.21181107]
[-29.28216171 53.87399673]
[-43.90607834 50.53618240]
[-58.57278061 47.39168930]
[-73.27970886 44.44106293]
[-88.33225250 49.31258392]
[-99.28886414 39.22289658]
[-113.99579620 36.27227020]
[-128.70272827 33.32164383]
[-143.40965271 30.37101936]
[-158.11659241 27.42039299]
[-172.82351685 24.46976852]
[-187.56811523 21.71352577]
[-202.34780884 19.15214539]
[-216.23785400 27.17997360]
[-231.12138367 21.19164848]
[-235.58102417 5.78090000]
[-226.19572449 -7.23046398]
[-210.16506958 -7.86123848]
[-199.78642273 4.37245274]
[-185.00672913 6.93383265]
[-177.78834534 4.95076466]
[-169.87289429 9.76283836]
[-155.16596985 12.71346283]
[-140.45903015 15.66408825]
[-125.75209808 18.61471367]
[-111.04517365 21.56533813]
[-96.33824158 24.51596451]
[-82.33763885 19.43339539]
[-70.32908630 29.73413467]
[-55.62215805 32.68475723]
[-48.35393524 30.89292526]
[-40.56826401 35.91226578]
[-25.94434738 39.25008011]
[-11.32042789 42.58789444]
[-4.00744009 40.98854065]
[3.64302135 46.21165085]
[18.17373657 49.93432617]
[32.70445251 53.65700150]
[47.23516464 57.37968063]
[61.76588058 61.10235596]
[76.29659271 64.82503510]
[90.82730865 68.54770660]
[105.80640411 67.75608063]
[119.86379242 62.52254868]
[133.92118835 57.28902054]
[138.55964661 52.29467392]
[144.18804932 50.72754669]
[148.86100769 52.17177582]
[163.17500305 47.68742371]
[177.48899841 43.20307159]
[191.80299377 38.71871948]
[206.11700439 34.23436737]
[220.43099976 29.75001335]
[234.74499512 25.26566124]
[249.05899048 20.78130913]
[263.11639404 15.54778004]
[276.87799072 9.57966042]
[290.63958740 3.61154079]
[304.40118408 -2.35657859]
[306.07467651 -17.62402725]
[315.17059326 -29.99978638]
[329.24224854 -36.15483856]
[344.50436401 -34.43350601]
[356.85156250 -25.29881477]
[362.96246338 -11.20795631]
[361.19329834 4.04870224]
[352.01995850 16.36719513]
[337.91000366 22.43391037]
[322.65896606 20.61693192]
[310.36929321 11.40501881]
[296.60769653 17.37313843]
[282.84609985 23.34125710]
[269.08450317 29.30937576]
[267.95040894 32.00424957]
[265.61260986 34.38101959]
[262.19876099 35.95228577]
[258.02014160 36.29090118]
[253.54335022 35.09531021]
[239.22935486 39.57966232]
[224.91534424 44.06401443]
[210.60134888 48.54836655]
[196.28735352 53.03271866]
[181.97335815 57.51707077]
[167.65934753 62.00142288]
[153.34535217 66.48577118]
[139.15470886 71.34640503]
[125.09732819 76.57994080]
[111.03993988 81.81346893]
[118.82220459 93.11207581]
[117.83441925 105.98142242]
[109.52723694 114.77285767]
[111.50148773 129.64236450]
[113.47573853 144.51187134]
[115.44998932 159.38139343]
[117.42424011 174.25090027]
[119.39849091 189.12040710]
[132.09822083 198.52743530]
[134.34385681 214.17137146]
[124.80308533 226.77093506]
[109.13628387 228.85104370]
[96.63829041 219.17759705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[17 51]
[18 50]
[19 49]
[20 47]
[21 46]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 37]
[30 36]
[60 105]
[61 104]
[62 103]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[72 95]
[73 90]
[74 89]
[75 88]
[76 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
