%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUCUGCGCACGCGCAUCUCGGUGCAUCUGUUGGGCGGGACCGCGGGGCCUGUGACACCGCACGCUGAGCUCUGUGAUGUAGCCGCUUGCGGAGACUGCAAGCAGCCGCGGCGCGCCCGGCCCUCCCUCUUCCGCUGCCGCCGUGGGA\
) } def
/len { sequence length } bind def

/coor [
[283.86471558 221.87208557]
[271.08734131 214.01466370]
[256.70355225 217.70819092]
[243.63356018 209.92166138]
[239.85697937 194.80957031]
[227.07962036 186.95214844]
[214.30226135 179.09472656]
[199.40785217 179.01863098]
[191.70555115 165.19889832]
[178.92820740 157.34147644]
[166.15084839 149.48403931]
[153.37348938 141.62661743]
[138.47908020 141.55053711]
[130.77677917 127.73078918]
[117.99942017 119.87336731]
[105.22206116 112.01593781]
[92.12890625 104.69683838]
[78.74262238 97.92871857]
[65.35633850 91.16060638]
[51.97005463 84.39249420]
[36.16338730 85.07066345]
[28.29645729 72.42310333]
[14.91017342 65.65499115]
[1.52388847 58.88687515]
[-14.28277683 59.56504440]
[-22.14970589 46.91748810]
[-35.53599167 40.14937592]
[-44.67136765 39.05540085]
[-49.12816620 33.09867859]
[-62.37075424 26.05354118]
[-78.18810272 26.40272713]
[-85.79021454 13.59424686]
[-99.03279877 6.54911232]
[-111.41403198 11.94937515]
[-124.45050049 9.25151634]
[-133.40512085 -0.33436236]
[-135.15704346 -13.13778305]
[-148.25019836 -20.45688820]
[-161.34335327 -27.77599335]
[-174.43650818 -35.09510040]
[-188.47579956 -28.75441742]
[-203.38246155 -31.86002159]
[-213.48263550 -43.01576614]
[-215.05825806 -57.80276489]
[-228.15141296 -65.12187195]
[-241.24456787 -72.44097900]
[-254.33772278 -79.76007843]
[-267.43087769 -87.07918549]
[-284.20675659 -89.53002930]
[-286.49569702 -106.32875061]
[-270.98712158 -113.17860413]
[-260.11178589 -100.17234039]
[-247.01861572 -92.85323334]
[-233.92546082 -85.53413391]
[-220.83230591 -78.21502686]
[-207.73915100 -70.89591980]
[-194.31787109 -77.29960632]
[-179.52439880 -74.53974152]
[-169.07043457 -63.46869278]
[-167.11740112 -48.18825531]
[-154.02424622 -40.86914825]
[-140.93109131 -33.55004120]
[-127.83792877 -26.23093796]
[-111.89923859 -31.50502586]
[-96.76523590 -23.48966980]
[-91.98766327 -6.69347334]
[-78.74507904 0.35166141]
[-63.87492752 -0.50143951]
[-55.32561874 12.81095600]
[-42.08303070 19.85609055]
[-28.76787758 26.76309013]
[-15.38159180 33.53120422]
[-0.53240353 32.36893463]
[8.29200363 45.50059128]
[21.67828751 52.26870346]
[35.06457138 59.03681946]
[49.91376114 57.87454987]
[58.73816681 71.00620270]
[72.12445068 77.77432251]
[85.51073456 84.54243469]
[98.89702606 91.31054688]
[101.92709351 90.56716919]
[105.29985809 90.94015503]
[108.59096527 92.56020355]
[111.33337402 95.39518738]
[113.07949066 99.23858643]
[125.85684204 107.09600830]
[138.63420105 114.95343781]
[154.44253540 115.59153748]
[161.23091125 128.84925842]
[174.00827026 136.70669556]
[186.78562927 144.56411743]
[199.56298828 152.42153931]
[215.37132263 153.05964661]
[222.15969849 166.31736755]
[234.93705750 174.17478943]
[247.71440125 182.03222656]
[262.90475464 178.58383179]
[275.75088501 186.73439026]
[278.94476318 201.23730469]
[291.72213745 209.09472656]
[301.49432373 202.89416504]
[312.82943726 200.82836914]
[324.05984497 203.16194153]
[333.54800415 209.51507568]
[339.92538452 218.92475891]
[342.28967285 229.99067688]
[340.33230591 241.08345032]
[352.59466553 249.72256470]
[364.85705566 258.36166382]
[377.11941528 267.00079346]
[389.38177490 275.63992310]
[401.64416504 284.27902222]
[413.90652466 292.91815186]
[426.16888428 301.55725098]
[435.04879761 303.96539307]
[438.59396362 310.50585938]
[450.67395020 319.39819336]
[468.98983765 320.98184204]
[475.45300293 337.26763916]
[487.71536255 345.90676880]
[499.97772217 354.54589844]
[513.56854248 347.50683594]
[528.87377930 347.60162354]
[542.37634277 354.80847168]
[550.97351074 367.47128296]
[552.68969727 382.68026733]
[547.13055420 396.94049072]
[535.57348633 406.97509766]
[520.67419434 410.47811890]
[505.85656738 406.64468384]
[494.52545166 396.35562134]
[489.28469849 381.97531128]
[491.33862305 366.80825806]
[479.07623291 358.16912842]
[466.81387329 349.53002930]
[454.80383301 351.28109741]
[444.50515747 344.12872314]
[441.78158569 331.47817993]
[429.70159912 322.58584595]
[417.52978516 313.81964111]
[405.26739502 305.18051147]
[393.00503540 296.54138184]
[380.74267578 287.90228271]
[368.48028564 279.26315308]
[356.21792603 270.62405396]
[343.95556641 261.98492432]
[331.69320679 253.34580994]
[314.46337891 260.41629028]
[296.28985596 255.71017456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[5 97]
[6 96]
[7 95]
[9 93]
[10 92]
[11 91]
[12 90]
[14 88]
[15 87]
[16 86]
[17 81]
[18 80]
[19 79]
[20 78]
[22 76]
[23 75]
[24 74]
[26 72]
[27 71]
[29 70]
[30 69]
[32 67]
[33 66]
[37 63]
[38 62]
[39 61]
[40 60]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[108 148]
[109 147]
[110 146]
[111 145]
[112 144]
[113 143]
[114 142]
[115 141]
[117 140]
[118 139]
[120 136]
[121 135]
[122 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
