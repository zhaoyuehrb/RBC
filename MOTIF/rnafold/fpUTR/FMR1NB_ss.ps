%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCUUCUGGGCCACGGACUGCCGGACCGUUGGGCUGUGAGGCAGCGUCUCAGCGAGGCGGCACCCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[69.97424316 229.81027222]
[66.43344116 244.65701294]
[56.79487228 256.49172974]
[42.97228241 262.96466064]
[27.71015930 262.79058838]
[14.03880501 256.00405884]
[4.67267895 243.95257568]
[1.47143281 229.02894592]
[5.07067537 214.19627380]
[14.75577450 202.39958191]
[28.60374832 195.98114014]
[43.86507034 196.21533203]
[50.53459549 182.77964783]
[57.20412445 169.34397888]
[52.22474670 155.35321045]
[58.79719925 141.63252258]
[73.50576019 136.50454712]
[80.17528534 123.06887054]
[86.84481049 109.63319397]
[83.79422760 98.20269012]
[89.27528381 87.71839142]
[100.40244293 83.69983673]
[107.62875366 70.55523682]
[114.85505676 57.41063309]
[122.08135986 44.26603317]
[129.30766296 31.12143326]
[122.86782837 17.12733650]
[125.86791229 2.19907880]
[136.95193481 -7.97975016]
[151.72741699 -9.65994167]
[158.95372009 -22.80454254]
[166.18002319 -35.94914246]
[173.40632629 -49.09374237]
[180.63262939 -62.23834229]
[187.85894775 -75.38294220]
[194.24563599 -88.95534515]
[199.76750183 -102.90199280]
[205.28936768 -116.84864044]
[210.81123352 -130.79528809]
[216.33309937 -144.74194336]
[216.54212952 -161.69459534]
[232.89013672 -166.18670654]
[241.73226929 -151.72111511]
[230.27975464 -139.22006226]
[224.75788879 -125.27342224]
[219.23600769 -111.32677460]
[213.71414185 -97.38012695]
[208.19227600 -83.43347931]
[209.46951294 -79.84280396]
[208.87165833 -75.41641998]
[206.01000977 -71.14438629]
[201.00354004 -68.15663910]
[193.77723694 -55.01203537]
[186.55093384 -41.86743546]
[179.32463074 -28.72283745]
[172.09832764 -15.57823658]
[164.87200928 -2.43363643]
[171.37048340 10.94200993]
[168.71533203 25.75464439]
[157.71850586 36.28665924]
[142.45227051 38.34773636]
[135.22596741 51.49233627]
[127.99965668 64.63694000]
[120.77335358 77.78153992]
[113.54704285 90.92613983]
[114.44966888 107.55410767]
[100.28048706 116.30271912]
[93.61096191 129.73840332]
[86.94142914 143.17407227]
[91.74963379 157.99024963]
[84.79438782 171.52091980]
[70.63980103 176.01350403]
[63.97027206 189.44917297]
[57.30074310 202.88485718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 74]
[13 73]
[14 72]
[17 69]
[18 68]
[19 67]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
