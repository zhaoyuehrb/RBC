%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCUGGCACGAGUCACAGCACCUCGUGCGUCACUUGGCGGCGCCGGACGUUGGGCUGCGCAGGAUUUGAGACGCUCCCCUGACCACCACUUGCUCUGCGCUGAGGUGCUGGGACAGCC\
) } def
/len { sequence length } bind def

/coor [
[197.02438354 167.00859070]
[184.16465759 159.28671265]
[171.30493164 151.56481934]
[158.44522095 143.84292603]
[145.58549500 136.12103271]
[132.72578430 128.39913940]
[112.19729614 141.57780457]
[87.80270386 141.57780457]
[67.27422333 128.39913940]
[54.41450119 136.12103271]
[41.55478287 143.84292603]
[28.69506264 151.56481934]
[15.83534241 159.28671265]
[2.97562313 167.00859070]
[-9.88409615 174.73048401]
[-10.25072956 190.15350342]
[-18.91638184 202.91711426]
[-33.11587524 208.94853210]
[-48.31820679 206.32312012]
[-59.67236328 195.87866211]
[-63.55527496 180.94793701]
[-58.72792053 166.29528809]
[-46.73069000 156.59631348]
[-31.39185905 154.94593811]
[-17.60598755 161.87077332]
[-4.74626875 154.14888000]
[8.11345005 146.42698669]
[20.97316933 138.70509338]
[33.83288956 130.98320007]
[46.69260788 123.26130676]
[59.55233002 115.53942108]
[56.96663666 105.06134796]
[57.05065155 94.26927948]
[59.79916382 83.83274078]
[65.04165649 74.39918518]
[72.45289612 66.55384827]
[65.06467438 53.49957275]
[57.67645645 40.44529343]
[50.28823471 27.39101601]
[42.73255157 14.43294239]
[35.01066208 1.57322299]
[27.28876877 -11.28649616]
[19.56687737 -24.14621544]
[11.84498405 -37.00593567]
[4.65768671 -42.83844757]
[4.09474277 -50.29767990]
[-3.29347849 -63.35195923]
[-10.68169975 -76.40623474]
[-25.69561195 -82.05973053]
[-30.49927139 -97.36673737]
[-21.40772057 -110.58502960]
[-5.39521980 -111.57466888]
[5.25481033 -99.57648468]
[2.37257910 -83.79445648]
[9.76080036 -70.74018097]
[17.14902115 -57.68590164]
[24.70470428 -44.72782898]
[32.42659760 -31.86810875]
[40.14848709 -19.00838852]
[47.87038040 -6.14866924]
[55.59227371 6.71105051]
[61.80665207 10.87500191]
[63.34251404 20.00279427]
[70.73073578 33.05707169]
[78.11895752 46.11135101]
[85.50717926 59.16563034]
[95.10619354 56.94726181]
[104.95820618 56.95463181]
[114.55389404 59.18735504]
[123.39717102 63.53001022]
[131.03086853 69.75808716]
[137.06033325 77.54961395]
[141.17384338 86.50177765]
[143.15876770 96.15176392]
[142.91246033 106.00070190]
[140.44767761 115.53942108]
[153.30738831 123.26130676]
[166.16711426 130.98320007]
[179.02682495 138.70509338]
[191.88655090 146.42698669]
[204.74626160 154.14888000]
[217.89459229 161.36840820]
[231.31188965 168.07481384]
[244.72920227 174.78121948]
[263.02029419 173.20332336]
[272.20123291 188.09954834]
[285.78674316 194.45825195]
[299.37228394 200.81697083]
[315.15109253 199.65937805]
[323.39825439 212.06233215]
[336.98379517 218.42105103]
[350.56933594 224.77976990]
[364.15484619 231.13848877]
[377.74038696 237.49720764]
[391.48513794 243.50401306]
[405.38000488 249.15492249]
[420.66131592 244.27017212]
[433.92764282 253.29150391]
[435.00216675 269.29852295]
[423.06063843 280.01202393]
[407.26354980 277.21353149]
[399.72909546 263.04977417]
[385.83422852 257.39886475]
[381.06396484 258.44912720]
[375.59173584 256.42837524]
[371.38168335 251.08273315]
[357.79614258 244.72401428]
[344.21060181 238.36531067]
[330.62506104 232.00659180]
[317.03955078 225.64787292]
[302.23245239 227.26028442]
[293.01358032 214.40251160]
[279.42803955 208.04379272]
[265.84249878 201.68507385]
[254.28950500 205.51344299]
[242.87989807 200.23080444]
[238.02279663 188.19853210]
[224.60548401 181.49212646]
[211.18818665 174.78572083]
[207.64739990 175.62449646]
[203.51663208 174.71302795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[36 66]
[37 65]
[38 64]
[39 63]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[46 56]
[47 55]
[48 54]
[82 119]
[83 118]
[84 117]
[86 114]
[87 113]
[88 112]
[90 110]
[91 109]
[92 108]
[93 107]
[94 106]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
