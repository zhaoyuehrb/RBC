%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGACCUCAGCUUCCUCUGUCACCAUGGUGCCGGCUCGGCUGGGCCCGGCGGUCGCCAUGGUAACUGGGGCGGGUCGCAGGGUCCUGGCAGGCUGGGCGCAUGCGCGCGGGGACUACAAGCCGCGCCGCGCUGCCGCUGGCCCCUCAGCAACCCUCGAC\
) } def
/len { sequence length } bind def

/coor [
[131.66514587 125.91648865]
[133.49017334 140.80505371]
[128.30072021 154.87876892]
[117.24691010 165.01846313]
[102.77863312 168.97685242]
[88.10250092 165.87664795]
[76.47121429 156.40495300]
[70.46262360 142.66098022]
[71.40842438 127.69081879]
[79.09899902 114.81234741]
[91.82897949 106.88011932]
[76.87521362 105.70323181]
[62.51052475 112.33393097]
[50.42954636 103.62191010]
[35.47578812 102.44502258]
[20.52202797 101.26814270]
[5.56826782 100.09125519]
[-8.79642487 106.72195435]
[-20.87740135 98.00993347]
[-35.83116150 96.83304596]
[-50.19585419 103.46374512]
[-62.27682877 94.75172424]
[-77.23059082 93.57484436]
[-92.18434906 92.39795685]
[-107.13810730 91.22106934]
[-122.09187317 90.04418182]
[-137.04562378 88.86729431]
[-151.99938965 87.69040680]
[-166.95315552 86.51351929]
[-181.90690613 85.33663940]
[-196.87150574 84.30661011]
[-211.84548950 83.42355347]
[-226.81947327 82.54048920]
[-235.62290955 85.16923523]
[-242.07789612 81.49024200]
[-257.03164673 80.31335449]
[-271.39633179 86.94405365]
[-283.47732544 78.23203278]
[-298.43109131 77.05514526]
[-313.38482666 75.87826538]
[-329.64953613 80.66323853]
[-338.75003052 66.35878754]
[-327.52386475 53.65407562]
[-312.20794678 60.92450333]
[-297.25418091 62.10138702]
[-282.30044556 63.27827454]
[-269.00534058 56.56339645]
[-255.85476685 65.35959625]
[-240.90100098 66.53648376]
[-225.93641663 67.56650543]
[-210.96243286 68.44956970]
[-195.98843384 69.33262634]
[-189.09027100 66.57273865]
[-180.73002625 70.38287354]
[-165.77626038 71.55976105]
[-150.82250977 72.73664856]
[-135.86874390 73.91353607]
[-120.91498566 75.09042358]
[-105.96121979 76.26731110]
[-91.00746155 77.44419861]
[-76.05370331 78.62107849]
[-61.09994507 79.79796600]
[-47.80484390 73.08309174]
[-34.65427399 81.87928772]
[-19.70051384 83.05617523]
[-6.40541506 76.34129333]
[6.74515438 85.13748932]
[21.69891357 86.31437683]
[36.65267563 87.49126434]
[51.60643387 88.66815186]
[64.90153503 81.95326996]
[78.05210114 90.74947357]
[93.00586700 91.92636108]
[107.99935913 91.48463440]
[122.85789490 89.42945099]
[137.71643066 87.37426758]
[152.57498169 85.31907654]
[160.69641113 81.02337646]
[167.74510193 83.37237549]
[182.64112854 81.60931396]
[197.53715515 79.84626007]
[212.43318176 78.08319855]
[227.32920837 76.32013702]
[241.79138184 64.96039581]
[257.63796997 72.44890594]
[272.49649048 70.39372253]
[287.35504150 68.33853912]
[302.21359253 66.28334808]
[311.74902344 53.96616364]
[326.84698486 52.09358215]
[338.53076172 61.26007462]
[353.38931274 59.20489120]
[368.24783325 57.14970398]
[383.10638428 55.09452057]
[397.96493530 53.03933334]
[412.82345581 50.98414993]
[422.35891724 38.66696548]
[437.45684814 36.79438019]
[449.14065552 45.96087265]
[463.99917603 43.90568924]
[478.85772705 41.85050583]
[486.97915649 37.55480194]
[494.02786255 39.90380096]
[508.92388916 38.14074326]
[523.81988525 36.37768173]
[538.71594238 34.61462021]
[553.61193848 32.85155869]
[568.48999023 30.94234276]
[583.34851074 28.88715744]
[595.95843506 19.33203125]
[609.62579346 25.25257111]
[624.48431396 23.19738579]
[631.67999268 9.44958210]
[645.59704590 2.58705616]
[660.88415527 5.24858999]
[671.66308594 16.41076851]
[673.78912354 31.78150749]
[666.44476318 45.45044327]
[652.45404053 52.16159058]
[637.19671631 49.33438110]
[626.53948975 38.05592728]
[611.68096924 40.11111069]
[600.13385010 49.51923752]
[585.40368652 43.74569702]
[570.54516602 45.80088425]
[564.31793213 49.85350800]
[555.37500000 47.74758530]
[540.47900391 49.51064682]
[525.58294678 51.27370834]
[510.68695068 53.03676987]
[495.79092407 54.79982758]
[480.91290283 56.70904541]
[466.05438232 58.76422882]
[451.19583130 60.81941605]
[442.43887329 72.81320953]
[427.39947510 75.10912323]
[414.87866211 65.84268951]
[400.02011108 67.89787292]
[385.16156006 69.95305634]
[370.30303955 72.00824738]
[355.44448853 74.06343079]
[340.58593750 76.11861420]
[331.82897949 88.11241150]
[316.78958130 90.40832520]
[304.26876831 81.14189148]
[289.41021729 83.19707489]
[274.55169678 85.25225830]
[259.69314575 87.30744934]
[252.11724854 96.77945709]
[239.71783447 98.58740234]
[229.09226990 91.21616364]
[214.19624329 92.97922516]
[199.30021667 94.74228668]
[184.40419006 96.50534058]
[169.50816345 98.26840210]
[154.63015747 100.17761993]
[139.77162170 102.23280334]
[124.91308594 104.28798676]
[110.05454254 106.34317780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 73]
[12 72]
[14 70]
[15 69]
[16 68]
[17 67]
[19 65]
[20 64]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 52]
[32 51]
[33 50]
[35 49]
[36 48]
[38 46]
[39 45]
[40 44]
[74 159]
[75 158]
[76 157]
[77 156]
[79 155]
[80 154]
[81 153]
[82 152]
[83 151]
[85 148]
[86 147]
[87 146]
[88 145]
[91 142]
[92 141]
[93 140]
[94 139]
[95 138]
[96 137]
[99 134]
[100 133]
[101 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 125]
[109 124]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
