%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGCCUCCACCAGAGUCCCCACCUUUCUGGAAGCUGCAGGGCUCUCCAUCCAGGAUCCAGAAGCAUUGAAGGGGACCAGCCGCUGAAGGGAUUCUCAGUCCCAUCUGACUCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.11697388 193.38160706]
[149.12167358 181.84069824]
[152.15962219 170.18615723]
[142.21278381 158.95849609]
[132.26594543 147.73083496]
[122.31909943 136.50317383]
[111.94793701 141.08370972]
[100.73782349 142.77943420]
[89.47589874 141.47128296]
[78.95294952 137.25111389]
[69.90787506 130.41526794]
[62.97580338 121.44372559]
[58.64348602 110.96645355]
[57.21512604 99.71913910]
[58.79101944 88.49155426]
[63.26051331 78.07205963]
[70.30976868 69.19229889]
[61.95529938 56.73425674]
[53.60082626 44.27621460]
[45.24635315 31.81817245]
[36.89188004 19.36013031]
[28.53740883 6.90209007]
[8.71051598 7.35285091]
[-7.37404013 -4.00634956]
[-13.49222183 -22.57480049]
[-7.39895439 -41.00321579]
[-17.04076767 -52.49388123]
[-26.68258286 -63.98455048]
[-36.32439804 -75.47521210]
[-45.96620941 -86.96588135]
[-55.60802460 -98.45655060]
[-65.24983978 -109.94721222]
[-74.89165497 -121.43788147]
[-90.39360046 -122.96347046]
[-100.00807953 -134.75398254]
[-98.45813751 -149.52333069]
[-108.09995270 -161.01399231]
[-117.74176788 -172.50465393]
[-133.11759949 -171.56124878]
[-145.95066833 -179.75672913]
[-151.43237305 -193.77153015]
[-147.65568542 -208.15466309]
[-157.29748535 -219.64533997]
[-172.88432312 -224.74267578]
[-175.99807739 -240.84349060]
[-163.43560791 -251.38465881]
[-148.12008667 -245.52232361]
[-145.80682373 -229.28715515]
[-136.16500854 -217.79647827]
[-121.34457397 -219.01820374]
[-108.49456787 -211.18612671]
[-102.65204620 -197.12489319]
[-106.25109863 -182.14646912]
[-96.60928345 -170.65580750]
[-86.96746826 -159.16513062]
[-72.15336609 -158.12686157]
[-62.21150970 -146.61105347]
[-63.40098572 -131.07969666]
[-53.75917053 -119.58902740]
[-44.11735916 -108.09836578]
[-34.47554398 -96.60769653]
[-24.83373070 -85.11702728]
[-15.19191551 -73.62636566]
[-5.55010176 -62.13569641]
[4.09171247 -50.64503098]
[14.27737713 -53.68649673]
[24.92964745 -53.09484863]
[34.78695679 -48.91394424]
[42.67301941 -41.61427307]
[47.63716888 -32.04014587]
[49.06894302 -21.31208420]
[46.77303314 -10.69569969]
[40.99544907 -1.45238233]
[49.34992218 11.00565910]
[57.70439529 23.46369934]
[66.05886841 35.92174149]
[74.41333771 48.37978363]
[82.76781464 60.83782578]
[101.19630432 57.23093033]
[119.39437103 61.86231613]
[133.85664368 73.83987427]
[141.79736328 90.85645294]
[141.68698120 109.63428497]
[133.54676819 126.55634308]
[143.49360657 137.78399658]
[153.44044495 149.01165771]
[163.38728333 160.23931885]
[182.22618103 160.57342529]
[194.72694397 174.24626160]
[193.42091370 192.40965271]
[203.95606995 203.08721924]
[214.49124146 213.76477051]
[225.02639771 224.44233704]
[236.05409241 223.89190674]
[245.33599854 229.45272827]
[249.86370850 239.03593445]
[248.33016968 249.29974365]
[258.27700806 260.52740479]
[268.22384644 271.75506592]
[278.17068481 282.98272705]
[293.95928955 283.68667603]
[304.56396484 295.40487671]
[303.69311523 311.18518066]
[291.86343384 321.66534424]
[276.09326172 320.62774658]
[265.73873901 308.68789673]
[266.94302368 292.92956543]
[256.99618530 281.70190430]
[247.04934692 270.47424316]
[237.10250854 259.24658203]
[218.40385437 254.63504028]
[214.34884644 234.97750854]
[203.81367493 224.29994202]
[193.27851868 213.62237549]
[182.74334717 202.94482422]
[171.43605042 205.35420227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[5 85]
[6 84]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[36 55]
[37 54]
[38 53]
[42 49]
[43 48]
[90 115]
[91 114]
[92 113]
[93 112]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
