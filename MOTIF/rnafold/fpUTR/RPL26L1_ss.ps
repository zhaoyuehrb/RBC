%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUAGUCCCAGAGAUAGAAAAAAGUAGAGGUAGGAGGGCGCGGCGGCUCACGCCUGUAAUCCCAGCACUUUGGAAGGCCGAGGCGGGCGGAUCACGAGAGGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[75.82786560 137.82690430]
[68.57054901 132.05239868]
[62.65473938 124.90979767]
[58.33293915 116.70397186]
[55.78961945 107.78517151]
[55.13333511 98.53407288]
[56.39209747 89.34554291]
[59.51218033 80.61177826]
[64.36041260 72.70556641]
[54.14273453 61.72380066]
[43.92506409 50.74203491]
[33.70738983 39.76026917]
[23.48971748 28.77850533]
[13.27204418 17.79673958]
[0.91079438 24.44335175]
[-12.68282890 27.89458847]
[-26.69762421 27.94949532]
[-40.29846954 24.60963821]
[-52.67607880 18.07873154]
[-63.09515762 8.75021839]
[-70.93809509 -2.81643367]
[-75.74154663 -15.92928123]
[-77.22384644 -29.80529785]
[-75.30146790 -43.61713409]
[-70.09376526 -56.54244614]
[-61.91553879 -67.81285095]
[-71.48355865 -79.36503601]
[-86.24509430 -85.05780792]
[-88.40457153 -99.79503632]
[-97.97258759 -111.34722137]
[-107.54061127 -122.89940643]
[-117.10862732 -134.45158386]
[-132.60049438 -136.07643127]
[-142.13925171 -147.92828369]
[-140.49475098 -162.68739319]
[-150.06277466 -174.23957825]
[-159.63078308 -185.79176331]
[-176.99191284 -191.71362305]
[-179.41349792 -209.02880859]
[-189.31045532 -220.30046082]
[-204.30455017 -228.21331787]
[-200.85171509 -244.81195068]
[-183.94592285 -246.08898926]
[-178.03880310 -230.19741821]
[-168.14184570 -218.92576599]
[-156.00277710 -217.79374695]
[-147.66880798 -208.35081482]
[-148.07859802 -195.35978699]
[-138.51058960 -183.80760193]
[-128.94256592 -172.25541687]
[-114.13541412 -171.12228394]
[-104.26751709 -159.54302979]
[-105.55644226 -144.01960754]
[-95.98842621 -132.46742249]
[-86.42040253 -120.91523743]
[-76.85237885 -109.36305237]
[-62.77521515 -104.49658203]
[-59.93137360 -88.93305969]
[-50.36335373 -77.38087463]
[-35.72737503 -83.94834900]
[-19.82796478 -86.18341827]
[-3.92122698 -83.90172577]
[10.73398876 -77.27608490]
[22.97571564 -66.82338715]
[31.83099747 -53.36428452]
[36.59321976 -37.95876694]
[36.87848282 -21.82269287]
[32.65654373 -6.23181725]
[24.25380898 7.57906675]
[34.47148132 18.56083107]
[44.68915558 29.54259682]
[54.90682983 40.52436066]
[65.12450409 51.50612640]
[75.34217072 62.48789215]
[97.30012512 55.19065475]
[119.97539520 59.79862976]
[137.34349060 75.08753967]
[144.78993225 96.99533081]
[159.71368408 98.50592041]
[174.63742065 100.01651001]
[186.72134399 89.83050537]
[202.46122742 91.25576019]
[212.51890564 103.44668579]
[210.92732239 119.17063141]
[198.63073730 129.09884644]
[182.92449951 127.34111786]
[173.12684631 114.94025421]
[158.20309448 113.42966461]
[143.27935791 111.91907501]
[138.98377991 122.25829315]
[132.26325989 131.21296692]
[141.14984131 143.29719543]
[150.03642273 155.38142395]
[158.92300415 167.46565247]
[174.53906250 168.28590393]
[185.93908691 178.98980713]
[187.74032593 194.52331543]
[179.09230042 207.55195618]
[164.07833862 211.92402649]
[149.78756714 205.57516479]
[142.96766663 191.50309753]
[146.83877563 176.35223389]
[137.95219421 164.26800537]
[129.06561279 152.18377686]
[120.17902374 140.09954834]
[111.50817108 143.39042664]
[102.34611511 144.82925415]
[93.08392334 144.35464478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[26 59]
[27 58]
[29 56]
[30 55]
[31 54]
[32 53]
[35 50]
[36 49]
[37 48]
[39 45]
[40 44]
[78 89]
[79 88]
[80 87]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
