%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUCCGGGCGUUCGCUUGCAAGAUGGCGGCGGCGGGGCAGUGGCUGCUGCGUUUUCGUGUCUGAGUCCUUCCUGGGUUCUAAUGAGGGCGCGGUUCUGCUGUGCCCGGCCCGCGAGGUCUAAGGC\
) } def
/len { sequence length } bind def

/coor [
[107.16861725 279.43695068]
[105.34206390 264.34616089]
[109.43435669 249.70642090]
[118.82145691 237.75021362]
[132.07189941 230.30078125]
[130.24990845 215.41183472]
[128.42790222 200.52290344]
[126.42475128 185.65725708]
[124.24073029 170.81710815]
[122.05671692 155.97695923]
[119.87269592 141.13681030]
[117.68868256 126.29666138]
[111.23963165 122.46784973]
[98.34153748 114.81023407]
[91.89249420 110.98142242]
[77.81803894 116.16889191]
[63.74359131 121.35636139]
[49.66914368 126.54383850]
[35.59469223 131.73130798]
[28.53684616 137.69555664]
[21.11385536 136.86917114]
[6.91725874 141.71237183]
[0.17461398 156.00614929]
[-14.72840691 161.26690674]
[-28.95010567 154.37351990]
[-34.05300140 139.41571045]
[-27.00963593 125.26768494]
[-11.99871254 120.32321930]
[2.07405281 127.51577759]
[16.27064896 122.67256927]
[30.40722084 117.65686035]
[44.48167038 112.46938324]
[58.55612183 107.28191376]
[72.63056946 102.09444427]
[86.70501709 96.90697479]
[97.62953949 86.62812042]
[103.66377258 72.89538574]
[109.69800568 59.16264725]
[115.73223877 45.42991257]
[121.59881592 31.62471962]
[127.29685211 17.74911690]
[132.99488831 3.87351298]
[138.69293213 -10.00209045]
[144.39096069 -23.87769318]
[150.08900452 -37.75329590]
[155.78704834 -51.62889862]
[151.53511047 -63.87757492]
[156.64524841 -75.35481262]
[167.85211182 -80.07736969]
[173.88633728 -93.81010437]
[179.92057800 -107.54283905]
[185.95480347 -121.27557373]
[191.98904419 -135.00831604]
[198.02326965 -148.74104309]
[204.05751038 -162.47378540]
[210.09173584 -176.20651245]
[216.12597656 -189.93925476]
[222.16020203 -203.67198181]
[228.19444275 -217.40472412]
[234.22866821 -231.13745117]
[240.26290894 -244.87019348]
[233.81910706 -255.00701904]
[233.12504578 -266.87777710]
[238.23892212 -277.47933960]
[247.76438904 -284.18661499]
[259.22955322 -285.40237427]
[265.92523193 -298.82504272]
[272.62094116 -312.24771118]
[279.31661987 -325.67034912]
[286.01232910 -339.09301758]
[292.70800781 -352.51568604]
[289.00469971 -368.12545776]
[299.01293945 -380.66397095]
[315.05526733 -380.51275635]
[324.82540894 -367.78781128]
[320.82849121 -352.25061035]
[306.13067627 -345.81997681]
[299.43496704 -332.39733887]
[292.73928833 -318.97467041]
[286.04357910 -305.55200195]
[279.34790039 -292.12936401]
[272.65219116 -278.70669556]
[279.52828979 -261.82257080]
[271.84362793 -244.94233704]
[253.99565125 -238.83596802]
[247.96141052 -225.10322571]
[241.92718506 -211.37048340]
[235.89294434 -197.63775635]
[229.85870361 -183.90501404]
[223.82447815 -170.17228699]
[217.79023743 -156.43954468]
[211.75601196 -142.70681763]
[205.72177124 -128.97407532]
[199.68754578 -115.24134064]
[193.65330505 -101.50860596]
[187.61907959 -87.77587128]
[181.58483887 -74.04313660]
[184.48211670 -56.77979660]
[169.66264343 -45.93086243]
[163.96459961 -32.05525970]
[158.26657104 -18.17965508]
[152.56852722 -4.30405188]
[146.87049866 9.57155132]
[141.17245483 23.44715500]
[135.47441101 37.32275772]
[135.84761047 44.78227615]
[129.46498108 51.46414566]
[123.43074799 65.19688416]
[117.39650726 78.92961884]
[111.36227417 92.66235352]
[132.52883911 124.11264801]
[134.71284485 138.95278931]
[136.89686584 153.79293823]
[139.08088684 168.63310242]
[141.26490784 183.47325134]
[145.65122986 191.60624695]
[143.31683350 198.70091248]
[145.13883972 213.58984375]
[146.96083069 228.47877502]
[161.61659241 232.51327515]
[173.60974121 241.85311890]
[181.11141968 255.07405090]
[182.97767639 270.16000366]
[178.92390442 284.81042480]
[169.56829834 296.79129028]
[156.33749390 304.27557373]
[141.24911499 306.12197876]
[126.60402679 302.04895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 119]
[6 118]
[7 117]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[21 30]
[22 29]
[36 110]
[37 109]
[38 108]
[39 107]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
