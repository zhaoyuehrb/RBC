%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCCCGCGAGAAGAAGAGCGGGAAGAGGCGGACAGCGAGGCCAAGAUUUCAGCUGCGGGACGGUCAGGGGAGACCUCCAGGCGCAGGGAAGGACGGCCAGGGUGACACGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[-20.68888092 253.26422119]
[-28.33234024 246.05114746]
[-40.60688400 254.67295837]
[-52.88142395 263.29476929]
[-65.15596771 271.91659546]
[-77.43051147 280.53839111]
[-89.10443115 289.95748901]
[-100.12604523 300.13217163]
[-111.14765930 310.30685425]
[-122.16927338 320.48153687]
[-118.71134949 335.44610596]
[-123.21433258 350.13006592]
[-134.46693420 360.58349609]
[-149.44227600 363.99450684]
[-164.11204529 359.44552612]
[-174.53016663 348.16018677]
[-177.89421082 333.17425537]
[-173.29925537 318.51879883]
[-161.98133850 308.13610840]
[-146.98492432 304.81906128]
[-132.34394836 309.45993042]
[-121.32233429 299.28524780]
[-110.30072021 289.11056519]
[-99.27911377 278.93588257]
[-113.75902557 275.02026367]
[-119.97474670 261.36871338]
[-113.42096710 247.87620544]
[-98.84802246 244.32243347]
[-86.81874084 253.28326416]
[-86.05232239 268.26385498]
[-73.77777863 259.64205933]
[-61.50323486 251.02023315]
[-49.22869492 242.39842224]
[-36.95415115 233.77661133]
[-43.57462311 214.56184387]
[-43.68964005 194.22064209]
[-37.27542114 174.89772034]
[-24.99722481 158.63414001]
[-8.14035511 147.15174866]
[11.52437019 141.67085266]
[31.92664337 142.78060913]
[50.91462708 150.37561035]
[60.17749405 138.57733154]
[69.44036102 126.77906036]
[78.70323181 114.98078918]
[74.08255005 102.50237274]
[76.23051453 89.37042999]
[84.58616638 79.01452637]
[96.96732330 74.13923645]
[110.14050293 76.01779175]
[119.71417236 64.47028351]
[129.28782654 52.92277145]
[138.86149597 41.37525940]
[138.45524597 28.39977074]
[146.77378845 18.96364403]
[158.89637756 17.81651878]
[168.77404785 6.52795792]
[178.65171814 -4.76060390]
[188.52938843 -16.04916573]
[198.40705872 -27.33772659]
[207.82615662 -39.01165390]
[216.77166748 -51.05232620]
[225.71717834 -63.09300232]
[228.37355042 -71.96997070]
[235.06457520 -75.33089447]
[244.32745361 -87.12916565]
[253.59031677 -98.92743683]
[262.85317993 -110.72570801]
[260.71566772 -126.38478088]
[270.34323120 -138.91815186]
[286.02401733 -140.89001465]
[298.45489502 -131.13047791]
[300.26086426 -115.42971039]
[290.37045288 -103.10269928]
[274.65145874 -101.46284485]
[265.38858032 -89.66456604]
[256.12573242 -77.86629486]
[246.86285400 -66.06802368]
[237.75785828 -54.14749146]
[228.81234741 -42.10681534]
[219.86683655 -30.06614304]
[220.07954407 -26.42440224]
[218.45538330 -22.50491905]
[214.88757324 -19.21195984]
[209.69561768 -17.46005630]
[199.81794739 -6.17149448]
[189.94027710 5.11706686]
[180.06260681 16.40562820]
[170.18493652 27.69418907]
[167.78038025 45.02222824]
[150.40899658 50.94892502]
[140.83534241 62.49643326]
[131.26167297 74.04394531]
[121.68801880 85.59145355]
[126.01013184 101.20386505]
[120.26435852 116.35028839]
[106.67475128 125.16791534]
[90.50150299 124.24365997]
[81.23863983 136.04193115]
[71.97576904 147.84020996]
[62.71289825 159.63847351]
[69.52596283 167.73393250]
[74.88601685 176.85205078]
[78.64299774 186.73495483]
[80.69216919 197.10336304]
[80.97700500 207.66452026]
[79.49081421 218.12046814]
[76.27682495 228.17642212]
[71.42697144 237.54911804]
[65.07923889 245.97473145]
[57.41376114 253.21640015]
[48.64769363 259.07080078]
[39.02906418 263.37384033]
[28.82975769 266.00537109]
[18.33782959 266.89245605]
[7.84937143 266.01138306]
[-2.33984733 263.38830566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 24]
[8 23]
[9 22]
[10 21]
[42 101]
[43 100]
[44 99]
[45 98]
[50 94]
[51 93]
[52 92]
[53 91]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 81]
[62 80]
[63 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
