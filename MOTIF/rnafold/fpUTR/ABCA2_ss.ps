%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGAGCCAGCGCGGAUCGGGUCCCGGACGCCCGAGCGCCCCGCCCCCGCGCGGGCGAUGCCCAGCGGCGCGGCGGGCUGCGGGGCCCGGCGGGGCGCGCAGAGGAGCGGGCCGCGGCGCUGAGGCGGCGGAGCGUGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[72.35229492 334.11132812]
[59.24776840 323.35458374]
[65.95645905 307.78442383]
[66.58880615 292.79776001]
[67.22115326 277.81109619]
[67.85350037 262.82443237]
[68.48584747 247.83775330]
[61.29196548 234.79562378]
[69.60415649 221.33389282]
[70.23650360 206.34722900]
[70.86885071 191.36056519]
[71.50119781 176.37390137]
[68.62129211 169.51196289]
[72.30816650 161.07891846]
[73.25633240 146.10890198]
[74.20450592 131.13890076]
[68.20259857 126.64144897]
[54.41088104 132.53962708]
[56.19879150 117.64653015]
[50.19688416 113.14907074]
[36.09549713 118.26285553]
[21.99410820 123.37664795]
[7.89271879 128.49043274]
[-6.20867062 133.60421753]
[-20.31006050 138.71800232]
[-25.50533104 153.46736145]
[-38.99207306 161.38200378]
[-54.40225983 158.72491455]
[-64.45967102 146.75067139]
[-64.41551208 131.11315918]
[-54.29061890 119.19591522]
[-38.86566925 116.62590790]
[-25.42384720 124.61662292]
[-11.32245827 119.50283051]
[2.77893066 114.38904572]
[16.88031960 109.27525330]
[30.98170853 104.16146851]
[45.08309937 99.04768372]
[97.54878235 55.57025146]
[94.71942902 40.83951187]
[91.89006805 26.10876846]
[89.06071472 11.37802792]
[86.23135376 -3.35271358]
[83.40200043 -18.08345413]
[80.57263947 -32.81419754]
[77.74327850 -47.54493713]
[74.91392517 -62.27567673]
[72.08456421 -77.00641632]
[52.04889297 -74.39494324]
[31.60939407 -92.93355560]
[24.61701393 -106.20407104]
[17.62463379 -119.47458649]
[10.63225365 -132.74510193]
[3.63987398 -146.01562500]
[-3.35250592 -159.28613281]
[-10.89810848 -172.25009155]
[-18.98351860 -184.88441467]
[-27.06892967 -197.51873779]
[-35.15433884 -210.15306091]
[-48.78482437 -220.23503113]
[-42.87015533 -236.12379456]
[-25.96497917 -234.83872986]
[-22.52001572 -218.23846436]
[-14.43460464 -205.60414124]
[-6.34919500 -192.96981812]
[1.73621511 -180.33549500]
[4.51450300 -179.62471008]
[7.16789627 -177.73289490]
[9.23078823 -174.70593262]
[10.26446342 -170.76239014]
[9.91801071 -166.27851868]
[16.91039085 -153.00799561]
[23.90277100 -139.73748779]
[30.89515114 -126.46697235]
[37.88753128 -113.19644928]
[44.87990952 -99.92593384]
[59.87307739 -100.40028381]
[74.86490631 -100.87458038]
[81.00445557 -114.56055450]
[87.14400482 -128.24653625]
[93.28355408 -141.93251038]
[99.42310333 -155.61848450]
[97.21741486 -171.86862183]
[110.35140991 -181.68850708]
[125.31396484 -174.97628784]
[126.71288300 -158.63691711]
[113.10907745 -149.47894287]
[106.96952820 -135.79295349]
[100.82997894 -122.10698700]
[94.69042969 -108.42100525]
[88.55088806 -94.73503113]
[86.81530762 -79.83577728]
[89.64466858 -65.10503387]
[92.47402191 -50.37429428]
[95.30338287 -35.64355469]
[98.13273621 -20.91281319]
[100.96209717 -6.18207121]
[103.79145050 8.54866982]
[106.62081146 23.27941132]
[109.45016479 38.01015091]
[112.27952576 52.74089432]
[124.82791138 60.95904541]
[139.46182251 57.66529465]
[147.69760132 44.17650604]
[163.07861328 40.54332733]
[176.47956848 48.92125702]
[179.94993591 64.33982086]
[171.43078613 77.65145874]
[155.97639465 80.95861053]
[142.75556946 72.29920197]
[128.12165833 75.59294891]
[126.94058990 82.99937439]
[138.58802795 92.45122528]
[124.57846069 97.81221771]
[123.39739227 105.21863556]
[136.28106689 112.90048981]
[149.16474915 120.58233643]
[162.04843140 128.26419067]
[177.86401367 128.68592834]
[184.83316040 141.84951782]
[197.71684265 149.53135681]
[212.97521973 145.41339111]
[226.63452148 153.36317444]
[230.59094238 168.66423035]
[222.49719238 182.23872375]
[207.15516663 186.03314209]
[193.66699219 177.79632568]
[190.03498840 162.41503906]
[177.15132141 154.73318481]
[162.25726318 154.86091614]
[154.36657715 141.14787292]
[141.48289490 133.46601868]
[128.59922791 125.78416443]
[115.71553802 118.10231781]
[109.08028412 121.59851074]
[89.17450714 132.08708191]
[88.22633362 147.05708313]
[87.27816772 162.02708435]
[86.48786163 177.00624084]
[85.85551453 191.99291992]
[85.22316742 206.97958374]
[84.59082031 221.96624756]
[91.73947144 236.08032227]
[83.47251129 248.47010803]
[82.84016418 263.45675659]
[82.20781708 278.44345093]
[81.57546997 293.43011475]
[80.94312286 308.41677856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[9 142]
[10 141]
[11 140]
[12 139]
[14 138]
[15 137]
[16 136]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 101]
[40 100]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[56 66]
[57 65]
[58 64]
[59 63]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[102 111]
[103 110]
[115 134]
[116 133]
[117 132]
[118 131]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
