%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGGCGCGGGCUUGGGAGGGAGCACGUCACUUCCUGUUGCCUUAGGGGAACGUGGCUUUCCCUGCAGAGCCGGUGUCUCCGCCUGCGUCCCUGCUGCAGCAACCGGAGCUGGAGUCGGAUCCCGAACGCACCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[102.45285797 349.50503540]
[92.98354340 361.94955444]
[77.71913147 365.34539795]
[63.86701965 358.08917236]
[57.96774292 343.60702515]
[62.80676651 328.73699951]
[76.09924316 320.50024414]
[78.07075500 305.63037109]
[80.04225922 290.76049805]
[82.01376343 275.89062500]
[76.01637268 262.25683594]
[85.50035858 249.59330750]
[87.47187042 234.72343445]
[89.44337463 219.85356140]
[79.09963989 200.87330627]
[92.61975098 183.05273438]
[93.27861786 168.06721497]
[93.93747711 153.08168030]
[94.59634399 138.09616089]
[95.25520325 123.11064148]
[79.55610657 101.76051331]
[65.53086853 96.44143677]
[51.50562286 91.12236023]
[37.48038101 85.80329132]
[23.45513535 80.48421478]
[9.42989254 75.16514587]
[-0.30427253 80.23291779]
[-10.99674702 79.08618164]
[-19.09552193 72.35127258]
[-22.04624748 62.46973038]
[-35.82431793 56.53974152]
[-49.60239029 50.60975266]
[-63.38046265 44.67976761]
[-77.15853119 38.74977875]
[-91.00090790 32.97149277]
[-104.90592194 27.34560394]
[-118.81093597 21.71971703]
[-132.71594238 16.09382820]
[-146.62095642 10.46794033]
[-158.67901611 19.98103142]
[-173.88044739 22.17470169]
[-188.13613892 16.45886421]
[-197.61138916 4.37105131]
[-199.75740051 -10.83717728]
[-193.99690247 -25.07488441]
[-181.87944031 -34.51219559]
[-166.66456604 -36.61052704]
[-152.44499207 -30.80543137]
[-143.04570007 -18.65845490]
[-140.99507141 -3.43707275]
[-127.09005737 2.18881512]
[-113.18505096 7.81470346]
[-99.28003693 13.44059086]
[-85.37502289 19.06647873]
[-77.93723297 18.65620804]
[-71.22854614 24.97170830]
[-57.45047379 30.90169525]
[-43.67240143 36.83168411]
[-29.89433098 42.76166916]
[-16.11626053 48.69165802]
[2.81035113 44.96038818]
[14.74896526 61.13990021]
[28.77420998 66.45897675]
[42.79945374 71.77804565]
[56.82469559 77.09712219]
[70.84993744 82.41619110]
[84.87518311 87.73526764]
[98.45039368 81.35453796]
[103.30448151 67.16165924]
[108.15856171 52.96878052]
[113.01264954 38.77589798]
[112.83528900 29.56391907]
[118.13239288 24.32658386]
[123.29708862 10.24376011]
[123.32213593 1.03010643]
[128.73301697 -4.08960056]
[134.20582581 -18.05557060]
[129.12609863 -33.27318954]
[137.97708130 -46.65375900]
[153.96905518 -47.93285370]
[164.83436584 -36.12926102]
[162.23805237 -20.29768753]
[148.17179871 -12.58276081]
[142.69898987 1.38321030]
[137.37991333 15.40845394]
[132.21522522 29.49127769]
[127.20552826 43.62998199]
[122.35144043 57.82286453]
[117.49736023 72.01574707]
[112.64327240 86.20862579]
[121.29933167 98.45903778]
[136.29843140 98.62380981]
[151.29751587 98.78857422]
[166.29661560 98.95333862]
[176.09051514 90.48291016]
[188.62776184 90.97310638]
[197.16468811 99.61147308]
[212.15655518 100.10569000]
[227.14840698 100.59990692]
[241.19601440 93.32148743]
[253.66145325 101.47392273]
[268.65328979 101.96813965]
[283.64517212 102.46235657]
[298.63702393 102.95657349]
[308.94250488 91.19515228]
[324.40484619 88.86071777]
[337.72323608 97.05551910]
[342.60910034 111.91022491]
[336.75549316 126.41089630]
[322.92633057 133.71075439]
[307.65130615 130.36303711]
[298.14279175 117.94843292]
[283.15093994 117.45421600]
[268.15908813 116.95999908]
[253.16723633 116.46578217]
[240.19194031 123.77954865]
[226.65419006 115.59175873]
[211.66233826 115.09754181]
[196.67047119 114.60332489]
[181.70695496 123.70838165]
[166.13185120 113.95243073]
[151.13275146 113.78766632]
[136.13366699 113.62290192]
[121.13456726 113.45813751]
[110.24073029 123.76950073]
[109.58186340 138.75502014]
[108.92300415 153.74055481]
[108.26413727 168.72607422]
[107.60527039 183.71159363]
[114.42675781 188.81637573]
[118.58688354 196.14321899]
[119.45536804 204.42880249]
[116.96212769 212.27879333]
[111.59648132 218.40251160]
[104.31324768 221.82507324]
[102.34174347 236.69494629]
[100.37023926 251.56481934]
[106.22660828 266.26220703]
[96.88363647 277.86212158]
[94.91213226 292.73199463]
[92.94062805 307.60189819]
[90.96912384 322.47177124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 142]
[8 141]
[9 140]
[10 139]
[12 137]
[13 136]
[14 135]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[68 90]
[69 89]
[70 88]
[71 87]
[73 86]
[74 85]
[76 84]
[77 83]
[91 124]
[92 123]
[93 122]
[94 121]
[97 119]
[98 118]
[99 117]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
