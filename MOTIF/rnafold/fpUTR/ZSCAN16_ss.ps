%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGGCCCGGAAGUGCCCGGCUGAAGCGGCCGGGCGCCGAUUGGUGUCUUUGAGUCUAGUCUUUGUUCGGGGCUGUCCAAAGGACGCUAGCUGUUGCACCUGUUCCUCCCUGCGCGUAAGAUAGAGGAUAAAUCUCCUGGCAAAGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[72.79835510 142.45959473]
[62.00017929 131.18458557]
[55.41031265 117.46881866]
[53.46134949 102.77571869]
[38.53931046 101.24837494]
[23.61727333 99.72103119]
[8.69523525 98.19368744]
[-6.22680235 96.66634369]
[-21.14883995 95.13899994]
[-36.07087708 93.61165619]
[-50.58715820 99.90356445]
[-62.46044540 90.91055298]
[-77.38248444 89.38320160]
[-92.30451965 87.85585785]
[-107.05241394 90.59440613]
[-120.43138123 97.37698364]
[-133.81033325 104.15956116]
[-147.18930054 110.94214630]
[-160.56826782 117.72472382]
[-173.94721985 124.50730133]
[-187.32618713 131.28988647]
[-200.70515442 138.07246399]
[-214.08410645 144.85504150]
[-227.46307373 151.63761902]
[-240.84204102 158.42019653]
[-252.23545837 170.97512817]
[-267.45376587 163.50250244]
[-264.48602295 146.81033325]
[-247.62461853 145.04122925]
[-234.24565125 138.25865173]
[-220.86669922 131.47607422]
[-207.48773193 124.69349670]
[-194.10876465 117.91091919]
[-180.72981262 111.12834167]
[-167.35084534 104.34575653]
[-153.97187805 97.56317902]
[-140.59292603 90.78060150]
[-127.21395874 83.99802399]
[-113.83499146 77.21544647]
[-121.97802734 67.68177032]
[-122.69284821 56.27079010]
[-135.47445679 48.42027283]
[-148.25605774 40.56975174]
[-161.03765869 32.71923065]
[-173.81925964 24.86871147]
[-186.60086060 17.01819229]
[-201.78933716 20.47479439]
[-214.63986206 12.33117199]
[-217.84159851 -2.17001629]
[-230.62319946 -10.02053642]
[-247.28428650 -13.15810394]
[-248.88159180 -30.03664017]
[-233.10485840 -36.24395752]
[-222.77267456 -22.80213737]
[-209.99107361 -14.95161819]
[-195.60928345 -18.65291786]
[-182.53509521 -10.87345314]
[-178.75033569 4.23659086]
[-165.96873474 12.08711052]
[-153.18713379 19.93762970]
[-140.40553284 27.78815079]
[-127.62393188 35.63866806]
[-114.84233093 43.48918915]
[-105.19879150 40.01480865]
[-94.84855652 42.58923340]
[-87.39628601 50.78991318]
[-85.69641876 62.15990448]
[-90.77717590 72.93382263]
[-75.85514069 74.46116638]
[-60.93310165 75.98851013]
[-47.48414612 69.58735657]
[-34.54353333 78.68961334]
[-19.62149620 80.21695709]
[-4.69945765 81.74430847]
[10.22258091 83.27165222]
[25.14461899 84.79899597]
[40.06665802 86.32633972]
[54.98869324 87.85368347]
[62.14445877 72.78771210]
[74.14527893 61.20458984]
[89.45519257 54.58681107]
[106.11471558 53.78137970]
[121.99163055 58.89137650]
[131.10279846 46.97557068]
[140.21398926 35.05976486]
[139.29067993 22.15524673]
[147.17454529 12.40882683]
[159.19175720 10.72760963]
[168.54411316 -0.99986243]
[164.28633118 -15.92135715]
[169.64396667 -30.48416519]
[182.55688477 -39.08858871]
[198.05981445 -38.42605209]
[210.19155884 -28.75131416]
[214.28720093 -13.78450871]
[208.77191162 0.71932185]
[195.76640320 9.18315887]
[180.27157593 8.35248470]
[170.91923523 20.07995605]
[169.27322388 37.52578735]
[152.12979126 44.17094040]
[143.01861572 56.08674622]
[133.90744019 68.00255585]
[144.00422668 78.08895874]
[150.96980286 91.37889099]
[153.79403687 106.86219788]
[168.71607971 108.38954163]
[183.63812256 109.91689301]
[198.56015015 111.44423676]
[213.48219299 112.97158051]
[231.42176819 103.86454010]
[246.65367126 115.71865082]
[261.62557983 116.63607788]
[272.25912476 105.17039490]
[287.78125000 103.27358246]
[300.86285400 111.84126282]
[305.32727051 126.82802582]
[299.06646729 141.15759277]
[285.03665161 148.06398010]
[269.86224365 144.28619385]
[260.70816040 131.60800171]
[245.73623657 130.69056702]
[238.66448975 138.16793823]
[228.42269897 140.53645325]
[218.37338257 136.76863098]
[211.95484924 127.89361572]
[197.03280640 126.36627197]
[182.11076355 124.83892822]
[167.18873596 123.31158447]
[152.26669312 121.78424072]
[147.65057373 127.69536591]
[160.01364136 136.18974304]
[174.75485229 138.96403503]
[180.05148315 152.99777222]
[170.81932068 164.82009888]
[155.92025757 163.08285522]
[149.65579224 149.45338440]
[138.41833496 139.51762390]
[133.80221558 145.42874146]
[138.90054321 159.53573608]
[143.99888611 173.64271545]
[149.09722900 187.74969482]
[163.51023865 194.23356628]
[169.03878784 209.03933716]
[162.40289307 223.38298035]
[147.53950500 228.75469971]
[133.26681519 221.96751404]
[128.05255127 207.04817200]
[134.99024963 192.84803772]
[129.89190674 178.74104309]
[124.79356384 164.63406372]
[119.69522858 150.52708435]
[103.06274414 152.87322998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[12 70]
[13 69]
[14 68]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[49 55]
[50 54]
[83 103]
[84 102]
[85 101]
[88 99]
[89 98]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[112 122]
[113 121]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
