%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUAGAAACAGGAAGUGGGACCAAAACAAAGGAGCGGCGGCCGGGAGCGGACUUACCUUACCUUCUCUGCCUUCGGCGCGCUUCUCAGCCGGGCCGCCGACCCAAAGGAGCCGUCCGACU\
) } def
/len { sequence length } bind def

/coor [
[-14.76885414 473.28781128]
[-12.62800121 488.29421997]
[-15.75179195 503.12719727]
[-23.76301193 515.99560547]
[-35.69427109 525.34552002]
[-50.10480881 530.04791260]
[-65.25447845 529.53491211]
[-79.31389618 523.86840820]
[-90.58530426 513.73278809]
[-97.70763397 500.35189819]
[-99.82083130 485.34158325]
[-96.66970825 470.51437378]
[-88.63478851 457.66073608]
[-76.68631744 448.33282471]
[-62.26714325 443.65701294]
[-47.11843872 444.19796753]
[-41.51118469 430.28543091]
[-35.90392685 416.37289429]
[-38.32262039 401.67596436]
[-25.98751640 391.76861572]
[-20.38026047 377.85607910]
[-14.77300453 363.94354248]
[-9.16574764 350.03100586]
[-20.93084335 340.79196167]
[-29.62462234 328.59976196]
[-34.53556061 314.43756104]
[-35.25758743 299.45025635]
[-31.72364998 284.85205078]
[-24.21183968 271.82803345]
[-13.32352734 261.43798828]
[0.06477166 254.53013611]
[14.87195492 251.67189026]
[29.89963341 253.10328674]
[35.50688934 239.19075012]
[29.45727921 225.62837219]
[34.94564438 211.43920898]
[49.21212387 205.18577576]
[54.81937790 191.27323914]
[60.42663574 177.36070251]
[66.03388977 163.44816589]
[71.64114380 149.53562927]
[77.24840546 135.62309265]
[82.85565948 121.71055603]
[88.46291351 107.79801941]
[79.37905121 82.21029663]
[78.23081207 67.25431061]
[77.08257294 52.29832458]
[73.26735687 43.86766052]
[76.10097504 36.94656372]
[75.33506775 21.96612930]
[74.56916046 6.98569584]
[73.80325317 -7.99473763]
[73.03733826 -22.97517014]
[58.70311356 -28.03465843]
[47.39953995 -38.19820404]
[40.85033035 -51.91593933]
[40.05419159 -67.09600830]
[45.13253021 -81.42356873]
[55.31093597 -92.71376801]
[69.03727722 -99.24492645]
[84.21838379 -100.02109528]
[98.53924561 -94.92391205]
[109.81604767 -84.73065948]
[116.32913971 -70.99574280]
[117.08534241 -55.81362915]
[111.96932220 -41.49948120]
[101.76124573 -30.23610306]
[88.01777649 -23.74107933]
[88.78368378 -8.76064682]
[89.54959106 6.21978664]
[90.31549835 21.20022011]
[91.08141327 36.18065262]
[92.03855896 51.15008545]
[93.18679810 66.10607147]
[94.33503723 81.06205750]
[107.12964630 88.89136505]
[120.96943665 83.10690308]
[134.80923462 77.32243347]
[148.64903259 71.53797150]
[150.52552795 56.29413986]
[159.78535461 44.04051590]
[173.93763733 38.07325745]
[189.17552185 39.99753189]
[201.40005493 49.29571533]
[207.32292175 63.46664429]
[205.35089111 78.69841003]
[196.01443481 90.89374542]
[181.82501221 96.77216339]
[166.59950256 94.75240326]
[154.43350220 85.37776184]
[140.59370422 91.16223145]
[126.75390625 96.94670105]
[112.91410828 102.73116302]
[102.37545013 113.40527344]
[96.76819611 127.31781006]
[91.16094208 141.23034668]
[85.55368042 155.14288330]
[79.94642639 169.05541992]
[74.33917236 182.96795654]
[68.73191833 196.88049316]
[63.12466049 210.79302979]
[69.06763458 225.19160461]
[63.18288803 239.22102356]
[49.41942596 244.79800415]
[43.81217194 258.71054077]
[55.63250732 268.09988403]
[64.31939697 280.42709351]
[69.17582703 294.68823242]
[69.81629944 309.72479248]
[66.19744873 324.31777954]
[58.62086487 337.28665161]
[47.70794296 347.58465576]
[34.34896088 354.38345337]
[19.63044357 357.13961792]
[4.74678850 355.63824463]
[-0.86046737 369.55078125]
[-6.46772337 383.46331787]
[-12.07497978 397.37585449]
[-10.05735493 413.06790161]
[-21.99139023 421.98013306]
[-27.59864807 435.89266968]
[-33.20590210 449.80520630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 122]
[17 121]
[18 120]
[20 118]
[21 117]
[22 116]
[23 115]
[33 105]
[34 104]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[42 96]
[43 95]
[44 94]
[45 75]
[46 74]
[47 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[76 93]
[77 92]
[78 91]
[79 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
