%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGUCACGGCCCGUGGCGCCCUUCGUGGACUGGGCUGUACGGUGCGCGUGACGGCUGCGUGCGGCGGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[101.89473724 226.15089417]
[100.72617340 211.19647217]
[106.38492584 197.30480957]
[117.67028809 187.42347717]
[132.18768311 183.64916992]
[146.85655212 186.78263855]
[138.74693298 174.16383362]
[130.63732910 161.54502869]
[122.52770996 148.92622375]
[114.41809845 136.30741882]
[106.30848694 123.68862152]
[98.19887543 111.06981659]
[89.83354187 98.61906433]
[81.21597290 86.34154510]
[72.34976196 74.24236298]
[63.23858261 62.32655334]
[54.12740326 50.41074753]
[45.01622391 38.49494171]
[35.90504837 26.57913589]
[20.48816299 24.35260582]
[11.41787910 12.13849163]
[13.63554382 -2.54542971]
[4.52436638 -14.46123600]
[-4.58681154 -26.37704277]
[-13.69798946 -38.29285049]
[-28.91832542 -36.23445892]
[-43.12261963 -42.07685089]
[-52.48999023 -54.24845505]
[-54.50066376 -69.47516632]
[-48.61377335 -83.66107941]
[-36.41286850 -92.99025726]
[-21.17992783 -94.95318604]
[-7.01253748 -89.02185822]
[2.27834582 -76.79177094]
[4.19352150 -61.55275345]
[-1.78218305 -47.40402603]
[7.32899475 -35.48822021]
[16.44017220 -23.57241440]
[25.55134964 -11.65660763]
[40.30318069 -9.94806290]
[49.71295547 2.00646687]
[47.82085419 17.46795845]
[56.93203354 29.38376427]
[66.04321289 41.29957199]
[75.15438843 53.21537781]
[84.26556396 65.13117981]
[91.01978302 68.62891388]
[93.49349976 77.72397614]
[102.11106110 90.00149536]
[109.14892578 94.41835022]
[110.81767273 102.96020508]
[118.92728424 115.57901001]
[127.03690338 128.19781494]
[135.14651489 140.81661987]
[143.25611877 153.43542480]
[151.36573792 166.05421448]
[159.47534180 178.67301941]
[167.71444702 182.83648682]
[170.96867371 190.40322876]
[183.41943359 198.76856995]
[195.87017822 207.13389587]
[208.32093811 215.49922180]
[224.27722168 213.83290100]
[235.42541504 225.36967468]
[233.21357727 241.25953674]
[219.33845520 249.31312561]
[204.44383240 243.35243225]
[199.95559692 227.94998169]
[187.50485229 219.58465576]
[175.05409241 211.21931458]
[162.60334778 202.85398865]
[165.43693542 217.58392334]
[161.36718750 232.02127075]
[151.25764465 243.10266113]
[137.25340271 248.47677612]
[122.32594299 247.00332642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[13 49]
[14 48]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[22 39]
[23 38]
[24 37]
[25 36]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
