%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCACUGGGGAGCCCGGCGGUGGCGGCACCUUUCGAGGUAGACCCGCUGAGCUGCUAGCCCGCCGGCCAGCGAGUGAGAGGUCGGACAGACUGUGGAGCCGACAGACUGAAGGACAGCGGCACCGCCAGACGGCCAGAAAGUUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[71.95404816 104.63154602]
[57.03407669 103.08417511]
[42.11410141 101.53680420]
[27.19412804 99.98943329]
[12.27415276 98.44206238]
[-2.64582229 96.89469147]
[-17.17053413 103.16711426]
[-29.03174210 94.15817261]
[-43.95171738 92.61080170]
[-58.87169266 91.06343079]
[-73.79166412 89.51605988]
[-66.82678986 102.80103302]
[-72.67623901 116.61348724]
[-87.06380463 120.85589600]
[-99.47151184 112.42685699]
[-100.82877350 97.48838806]
[-90.14266968 86.96095276]
[-104.82342529 83.88272095]
[-119.50417328 80.80448914]
[-134.18492126 77.72625732]
[-148.86567688 74.64803314]
[-163.54643250 71.56980133]
[-178.22718811 68.49156952]
[-192.96841431 65.71739960]
[-207.76383972 63.24848557]
[-222.55926514 60.77956390]
[-237.35467529 58.31064606]
[-252.15010071 55.84172821]
[-266.94552612 53.37280655]
[-281.74093628 50.90388870]
[-289.01174927 61.66112518]
[-299.78427124 68.82493591]
[-312.42443848 71.35139465]
[-325.03100586 68.89680481]
[-335.72155762 61.86395645]
[-342.91357422 51.33653641]
[-345.55862427 38.91228104]
[-360.23934937 35.83405304]
[-369.34552002 37.13837814]
[-375.19027710 32.53752136]
[-389.80426025 29.15654373]
[-405.32254028 34.45889282]
[-417.49398804 23.46852303]
[-413.79763794 7.49138117]
[-398.03601074 2.96338201]
[-386.42327881 14.54254341]
[-371.80929565 17.92352295]
[-357.16113281 21.15329933]
[-342.48037720 24.23152924]
[-331.51977539 11.02122211]
[-315.30798340 5.11575031]
[-298.24426270 8.21279240]
[-285.00720215 19.55405998]
[-279.27200317 36.10847092]
[-264.47659302 38.57738876]
[-249.68118286 41.04630661]
[-234.88575745 43.51522827]
[-220.09034729 45.98414612]
[-205.29492188 48.45306396]
[-190.49949646 50.92198181]
[-186.11553955 48.88651276]
[-180.40071106 49.62824249]
[-175.14895630 53.81081772]
[-160.46820068 56.88904572]
[-145.78744507 59.96727753]
[-131.10670471 63.04550552]
[-116.42594147 66.12374115]
[-101.74519348 69.20196533]
[-87.06443787 72.28019714]
[-72.24429321 74.59609222]
[-57.32432175 76.14345551]
[-42.40434647 77.69082642]
[-27.48437119 79.23819733]
[-14.02683544 72.85509491]
[-1.09845185 81.97471619]
[13.82152271 83.52208710]
[28.74149704 85.06945801]
[43.66147232 86.61682892]
[58.58144760 88.16419983]
[73.50141907 89.71157074]
[81.49842072 78.41949463]
[93.87940216 72.24095154]
[107.71066284 72.63995361]
[119.71486664 79.52195740]
[132.60067749 71.84368134]
[145.48648071 64.16540527]
[147.01634216 48.83681107]
[157.16024780 37.48099136]
[171.87178040 34.31320190]
[185.46496582 40.34340286]
[198.35076904 32.66512680]
[211.23657227 24.98685265]
[219.13105774 11.27599239]
[234.02508545 11.40785122]
[246.91088867 3.72957516]
[259.79669189 -3.94870067]
[272.68252563 -11.62697601]
[275.00674438 -27.09086990]
[286.76135254 -37.40411377]
[302.39617920 -37.69710922]
[314.52896118 -27.83151245]
[317.43093872 -12.46555805]
[309.73190308 1.14542150]
[295.06707764 6.57473755]
[280.36077881 1.25883293]
[267.47497559 8.93710899]
[254.58917236 16.61538506]
[241.70335388 24.29365921]
[234.73056030 37.45531845]
[218.91485596 37.87266159]
[206.02903748 45.55093765]
[193.14323425 53.22921371]
[191.97700500 68.05412292]
[182.18910217 79.48482513]
[167.37399292 83.00135040]
[153.16476440 77.05120850]
[140.27896118 84.72948456]
[127.39314270 92.40776062]
[128.03811646 104.67873383]
[123.44371033 116.07540894]
[133.13819885 127.52166748]
[142.83268738 138.96792603]
[152.52717590 150.41418457]
[167.35043335 155.94427490]
[169.67184448 170.65686035]
[179.36633301 182.10311890]
[201.81260681 187.88836670]
[205.51084900 210.02969360]
[216.33438110 220.41482544]
[227.15792847 230.79995728]
[243.20317078 234.18852234]
[248.03327942 249.86021423]
[236.67945862 261.69332886]
[220.82154846 257.51498413]
[216.77279663 241.62348938]
[205.94924927 231.23835754]
[195.12571716 220.85322571]
[188.12969971 222.81573486]
[180.82196045 222.18943787]
[174.13825989 219.00625610]
[168.95138550 213.62861633]
[165.95715332 206.70870972]
[165.58140564 199.10958862]
[167.92007446 191.79760742]
[158.22558594 180.35134888]
[144.09574890 175.63998413]
[141.08091736 160.10867310]
[131.38642883 148.66241455]
[121.69194031 137.21615601]
[111.99745178 125.76989746]
[94.95108032 127.97382355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[8 73]
[9 72]
[10 71]
[11 70]
[17 69]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[37 49]
[38 48]
[40 47]
[41 46]
[84 118]
[85 117]
[86 116]
[90 112]
[91 111]
[92 110]
[94 108]
[95 107]
[96 106]
[97 105]
[120 150]
[121 149]
[122 148]
[123 147]
[125 145]
[126 144]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
