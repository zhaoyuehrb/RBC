%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCAUUUGCUCUCUGACUCUCAGAGAGGGAGGCACGCUUUCCUGGAGCUCCUGGUGACAGAACAGGUGUUUGCUGUCUGGACCUGGCUGCUGAUCCUGAGCCUGCUGGGAGAUCUUAACGAUCCCCAGGAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[-75.05850220 216.27066040]
[-87.05275726 225.27832031]
[-98.94445038 234.42094421]
[-110.73207092 243.69735718]
[-122.51969147 252.97378540]
[-134.30731201 262.25021362]
[-137.17044067 268.36090088]
[-141.99188232 271.56604004]
[-146.84368896 271.66500854]
[-159.03845215 280.39929199]
[-165.75244141 294.72525024]
[-180.60482788 295.84585571]
[-192.79959106 304.58016968]
[-204.99433899 313.31445312]
[-217.18910217 322.04873657]
[-229.38386536 330.78305054]
[-241.57861328 339.51733398]
[-253.77337646 348.25161743]
[-265.96813965 356.98593140]
[-275.32437134 371.12442017]
[-291.50039673 366.04772949]
[-291.10006714 349.09851074]
[-274.70242310 344.79116821]
[-262.50765991 336.05688477]
[-250.31291199 327.32257080]
[-238.11814880 318.58828735]
[-225.92340088 309.85400391]
[-213.72863770 301.11968994]
[-201.53387451 292.38540649]
[-189.33912659 283.65109253]
[-183.49737549 269.94989014]
[-167.77273560 268.20452881]
[-155.57798767 259.47024536]
[-143.58374023 250.46258545]
[-131.79611206 241.18615723]
[-120.00849152 231.90974426]
[-108.22087097 222.63331604]
[-104.88171387 215.96870422]
[-96.06041718 213.28405762]
[-84.06616211 204.27639771]
[-87.27866364 194.12196350]
[-87.50181580 183.45260620]
[-84.70562744 173.13182068]
[-79.10493469 163.99819946]
[-71.14295197 156.79736328]
[-61.45621109 152.12107849]
[-50.82368088 150.35864258]
[-40.10413742 151.66450500]
[-30.16678619 155.94480896]
[-21.82079124 162.86399841]
[-8.88728046 155.26634216]
[4.04622841 147.66868591]
[16.97973824 140.07104492]
[29.91324806 132.47338867]
[42.84675598 124.87573242]
[55.78026581 117.27807617]
[68.71377563 109.68042755]
[67.53734589 95.67396545]
[72.34063721 82.46437073]
[82.23887634 72.48489380]
[95.40876770 67.57379150]
[96.76300812 52.63504791]
[98.11724091 37.69630432]
[99.47148132 22.75756073]
[97.11611176 13.84268856]
[101.02886200 7.49781418]
[102.72035980 -7.40650845]
[104.41185760 -22.31083107]
[93.51220703 -33.52384186]
[92.42173767 -49.12335587]
[101.65533447 -61.74376297]
[116.85317230 -65.42609406]
[130.83930969 -58.43165970]
[137.00990295 -44.06302261]
[132.45140076 -29.10461235]
[119.31618500 -20.61933327]
[117.62468719 -5.71501017]
[115.93318176 9.18931293]
[114.41021729 24.11179924]
[113.05598450 39.05054092]
[111.70174408 53.98928452]
[110.34751129 68.92802429]
[117.78979492 72.50342560]
[124.10134888 77.82651520]
[128.88101196 84.55895996]
[143.37718201 80.70397186]
[157.87335205 76.84898376]
[172.36953735 72.99398804]
[186.86570740 69.13899994]
[201.36187744 65.28401184]
[214.04898071 51.99185562]
[230.79393005 57.12136841]
[245.19927979 52.93975830]
[259.60464478 48.75814819]
[265.75238037 34.37972260]
[279.72738647 27.36307144]
[294.93106079 31.02124214]
[304.18472290 43.62696075]
[303.11901855 59.22819138]
[292.23721313 70.45850372]
[276.67730713 72.01529694]
[263.78625488 63.16349792]
[249.38088989 67.34510803]
[234.97554016 71.52671814]
[228.83337402 82.00904083]
[216.80018616 85.57778931]
[205.21687317 79.78018188]
[190.72068787 83.63517761]
[176.22451782 87.49016571]
[161.72834778 91.34515381]
[147.23217773 95.20014191]
[132.73599243 99.05513763]
[131.91671753 107.33901215]
[129.03540039 115.14874268]
[140.39179993 124.94834137]
[151.74819946 134.74794006]
[163.10459900 144.54753113]
[179.14552307 144.80888367]
[188.82804871 157.60061646]
[184.72456360 173.11000061]
[169.98291016 179.43957520]
[155.91163635 171.73381042]
[153.30500793 155.90393066]
[141.94860840 146.10433960]
[130.59219360 136.30474854]
[119.23579407 126.50514221]
[97.04328156 132.61589050]
[76.31143188 122.61393738]
[63.37791824 130.21159363]
[50.44440842 137.80923462]
[37.51090240 145.40689087]
[24.57739067 153.00454712]
[11.64388180 160.60220337]
[-1.28962779 168.19985962]
[-14.22313690 175.79750061]
[-12.97628880 195.54263306]
[-21.77306938 213.17738342]
[-38.16767883 223.97276306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 37]
[4 36]
[5 35]
[6 34]
[9 33]
[10 32]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[50 135]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[56 129]
[57 128]
[61 82]
[62 81]
[63 80]
[64 79]
[66 78]
[67 77]
[68 76]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[92 104]
[93 103]
[94 102]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
