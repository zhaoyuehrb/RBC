%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:49:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUUCGAGAGUGCCGUCUAUUUGCCACACACUUCCCUGAUGAAAUGUCUGGAUUUGGACUAAAGAAAAAAGGAAAGGCUAGCAGUCAUCCAACAGAAUC\
) } def
/len { sequence length } bind def

/coor [
[83.75330353 149.45378113]
[77.06722260 162.88124084]
[70.38114929 176.30868530]
[63.69507599 189.73612976]
[57.00899887 203.16358948]
[58.55805588 219.48941040]
[45.03900528 228.77204895]
[30.35909081 221.46231079]
[29.61974716 205.07983398]
[43.58155060 196.47750854]
[50.26762390 183.05006409]
[56.95370102 169.62260437]
[63.63977432 156.19515991]
[70.32585144 142.76771545]
[52.33935547 120.93072510]
[48.43080521 92.91124725]
[59.75470352 66.98563385]
[49.64926910 55.90050125]
[39.54383469 44.81536865]
[29.43839836 33.73023605]
[19.33296394 22.64510155]
[5.68576956 25.18614388]
[-7.31694412 20.64490128]
[-16.27215195 10.32443619]
[-18.89322853 -2.97502613]
[-14.59309578 -15.71536732]
[-24.35236931 -27.10644150]
[-34.11164474 -38.49751282]
[-48.96603394 -43.94340515]
[-51.37088394 -58.64258575]
[-61.13016129 -70.03366089]
[-70.88943481 -81.42473602]
[-85.74382019 -86.87062073]
[-88.14867401 -101.56980896]
[-97.90795135 -112.96087646]
[-107.66722107 -124.35195160]
[-123.44197845 -125.31763458]
[-133.85086060 -137.21009827]
[-132.71844482 -152.97377014]
[-120.71659851 -163.25633240]
[-104.96578217 -161.95732117]
[-94.81068420 -149.84742737]
[-96.27615356 -134.11122131]
[-86.51687622 -122.72015381]
[-76.75759888 -111.32907867]
[-62.60126114 -106.69795227]
[-59.49835968 -91.18400574]
[-49.73908615 -79.79293060]
[-39.97981262 -68.40186310]
[-25.82347107 -63.77073669]
[-22.72057152 -48.25679016]
[-12.96129608 -36.86571503]
[-3.20202160 -25.47464180]
[13.02688980 -27.33926201]
[27.34381104 -19.13555145]
[34.07450485 -3.88929915]
[30.41809845 12.53966618]
[40.52353287 23.62479973]
[50.62896729 34.70993423]
[60.73440170 45.79506683]
[70.83983612 56.88019943]
[79.94934845 51.96247864]
[89.85186768 48.94466019]
[100.15575409 47.94610596]
[110.45347595 49.00630569]
[120.33776855 52.08332825]
[129.41767883 57.05547714]
[137.33412170 63.72610092]
[143.77397156 71.83137512]
[148.48254395 81.05072784]
[151.27362061 91.01953125]
[152.03678894 101.34352112]
[150.74188232 111.61437225]
[164.72895813 117.03299713]
[178.71604919 122.45162201]
[190.92335510 117.94803619]
[202.52700806 122.88019562]
[207.43070984 134.05700684]
[221.24429321 139.90379333]
[235.05786133 145.75057983]
[248.87144470 151.59736633]
[265.81457520 152.20312500]
[269.92282104 168.65179443]
[255.25422668 177.15292358]
[243.02465820 165.41094971]
[229.21107483 159.56416321]
[215.39749146 153.71737671]
[201.58390808 147.87059021]
[184.39749146 151.02955627]
[173.29742432 136.43870544]
[159.31033325 131.02008057]
[145.32325745 125.60145569]
[141.78051758 131.04867554]
[137.58673096 136.01208496]
[132.80723572 140.41432190]
[127.51652527 144.18679810]
[121.79702759 147.27072144]
[115.73788452 149.61805725]
[109.43349457 151.19219971]
[102.98210907 151.96864319]
[96.48425293 151.93527222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[26 53]
[27 52]
[28 51]
[30 49]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[73 92]
[74 91]
[75 90]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
