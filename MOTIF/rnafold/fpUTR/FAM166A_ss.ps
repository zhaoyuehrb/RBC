%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGACAGGACUCCCCUCAGGGAAGGGAGCUGGAUGCCGGGAGGGACUGGAGCCAGCAAGGCCAGAGUGAAAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[133.51940918 134.56973267]
[121.52776337 125.55860138]
[109.53612518 116.54746246]
[95.17596436 118.47930908]
[83.59242249 109.77484131]
[81.45274353 95.44417572]
[69.46110535 86.43304443]
[57.46945953 77.42190552]
[40.34231186 80.25131226]
[26.65326500 70.12859344]
[24.43004036 53.58607864]
[12.08528137 45.06510925]
[-0.25947648 36.54413605]
[-12.60423470 28.02316666]
[-24.94899178 19.50219536]
[-40.30018616 22.14389992]
[-52.69814301 13.32656860]
[-55.12200165 -1.32472861]
[-67.46675873 -9.84570026]
[-80.24695587 -4.27930069]
[-93.99205780 -5.81522036]
[-105.05236053 -13.93610477]
[-110.54573822 -26.39074516]
[-109.10829163 -39.81717682]
[-121.09993744 -48.82830811]
[-137.43586731 -50.26679230]
[-144.11184692 -65.24555969]
[-134.26017761 -78.35573578]
[-118.01543427 -76.11070251]
[-112.08879852 -60.81995010]
[-100.09716034 -51.80881500]
[-84.70830536 -57.14383316]
[-68.98508453 -52.30207062]
[-59.06674957 -38.97068405]
[-58.94578552 -22.19045830]
[-46.60102844 -13.66948700]
[-32.04231644 -16.59856033]
[-19.40159225 -8.13294029]
[-16.42802048 7.15743685]
[-4.08326340 15.67840767]
[8.26149464 24.19937897]
[20.60625267 32.72035217]
[32.95101166 41.24132156]
[45.33976746 37.15446472]
[57.98283005 41.09103775]
[66.09893799 51.80128860]
[66.48059082 65.43026733]
[78.47223663 74.44139862]
[90.46387482 83.45253754]
[104.82403564 81.52069092]
[116.40757751 90.22515869]
[118.54725647 104.55582428]
[130.53889465 113.56695557]
[142.53053284 122.57809448]
[163.74780273 123.39417267]
[171.96765137 142.14578247]
[184.95803833 149.64578247]
[200.16998291 142.56150818]
[216.46615601 145.80715942]
[227.58087158 157.93667603]
[229.35803223 174.12683105]
[242.63987732 181.09768677]
[258.99502563 179.89706421]
[267.98730469 193.61096191]
[260.36624146 208.13168335]
[243.97172546 208.52156067]
[235.66903687 194.37951660]
[222.38719177 187.40867615]
[210.87330627 194.46315002]
[197.26617432 194.83937073]
[185.18789673 188.32829285]
[177.90783691 176.56871033]
[177.45803833 162.63615417]
[164.46765137 155.13615417]
[155.92584229 158.96879578]
[146.44943237 158.26367188]
[138.33255005 153.05763245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[6 49]
[7 48]
[8 47]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[18 36]
[19 35]
[24 31]
[25 30]
[56 74]
[57 73]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
