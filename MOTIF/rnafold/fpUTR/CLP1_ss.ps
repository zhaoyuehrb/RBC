%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCGGAACUGCGUUUGUUUCCGGCGUGGGUCCGGGCAAGAACCGCUUGUAGUUUGGUUUAAAUUCUGCACGGGAGGACCUUCUGAGUUUACCUGUUGGGCUCCUGGCUGCGCAGGCACAGCAGCUACACAGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[93.60765839 151.43811035]
[76.96727753 146.43528748]
[62.91526794 136.21414185]
[50.78001404 145.03092957]
[44.16331100 159.40206909]
[29.31885910 160.62336731]
[17.18360519 169.44013977]
[5.04834986 178.25692749]
[-7.08690500 187.07369995]
[-13.70360756 201.44483948]
[-28.54805756 202.66613770]
[-40.68331146 211.48292542]
[-52.81856918 220.29969788]
[-64.95381927 229.11647034]
[-77.08908081 237.93325806]
[-89.22433472 246.75003052]
[-101.35958862 255.56681824]
[-102.26984406 271.17788696]
[-113.03929138 282.51602173]
[-128.58291626 284.22769165]
[-141.56149292 275.50469971]
[-145.84693909 260.46578979]
[-139.41580200 246.21185303]
[-125.30465698 239.47317505]
[-110.17636871 243.43156433]
[-98.04111481 234.61477661]
[-85.90585327 225.79800415]
[-73.77059937 216.98121643]
[-61.63534546 208.16444397]
[-49.50009155 199.34767151]
[-37.36483765 190.53088379]
[-31.61612892 176.79037476]
[-15.90368366 174.93844604]
[-3.76842880 166.12167358]
[8.36682606 157.30488586]
[20.50208092 148.48811340]
[26.25078964 134.74760437]
[41.96323395 132.89567566]
[54.09848785 124.07888794]
[49.64937592 112.31082153]
[48.16653442 99.81748962]
[49.73731995 87.33490753]
[54.26919556 75.59846497]
[61.49517441 65.29956818]
[70.98956299 57.04494858]
[64.48130798 43.53041458]
[57.97305298 30.01588440]
[52.62827682 25.90096664]
[50.54114532 20.50308418]
[51.49129105 15.74584007]
[45.59591675 1.95292306]
[39.70054245 -11.83999348]
[33.80516434 -25.63290977]
[27.90979004 -39.42582703]
[12.68200588 -39.61144638]
[-1.15105569 -45.98061371]
[-11.19273186 -57.42983246]
[-15.70324230 -71.97545624]
[-13.90111351 -87.09736633]
[-6.09857512 -100.17560577]
[6.35253620 -108.94428253]
[21.29499054 -111.88417816]
[36.13991547 -108.48593140]
[48.31533813 -99.33831024]
[55.71179581 -86.02619934]
[57.04780579 -70.85600281]
[52.09189606 -56.45604324]
[41.70270920 -45.32120132]
[47.59808350 -31.52828598]
[53.49345779 -17.73536873]
[59.38883209 -3.94245243]
[65.28421021 9.85046387]
[71.48758698 23.50762749]
[77.99584198 37.02215958]
[84.50409698 50.53669357]
[98.56347656 48.18612289]
[112.73149872 49.75409698]
[125.93666077 55.12204361]
[137.18031311 63.88399124]
[145.61210632 75.37729645]
[150.59437561 88.73275757]
[151.75032043 102.94033051]
[166.44544983 105.94917297]
[181.14057922 108.95800781]
[195.83572388 111.96685028]
[210.53085327 114.97569275]
[225.22598267 117.98453522]
[240.29768372 113.17266083]
[251.21426392 123.30565643]
[265.90939331 126.31449890]
[274.44351196 117.89722443]
[285.87518311 114.71502686]
[297.29684448 117.45595551]
[305.86199951 125.31671906]
[309.49453735 136.23335266]
[324.03988647 139.89845276]
[338.58520508 143.56356812]
[353.13055420 147.22866821]
[367.67590332 150.89376831]
[382.22125244 154.55888367]
[391.12442017 146.53295898]
[402.68734741 143.86685181]
[413.97454834 147.11744690]
[422.17837524 155.35456848]
[425.31750488 166.42318726]
[439.68374634 170.73716736]
[454.05001831 175.05116272]
[468.41629028 179.36515808]
[482.21295166 171.65623474]
[497.39672852 176.04124451]
[504.95935059 189.91864014]
[500.41406250 205.05522156]
[486.45745850 212.47070312]
[471.36981201 207.76560974]
[464.10229492 193.73141479]
[449.73602295 189.41741943]
[435.36975098 185.10343933]
[421.00350952 180.78944397]
[405.51510620 190.43452454]
[387.56704712 185.69546509]
[378.55615234 169.10421753]
[364.01080322 165.43911743]
[349.46545410 161.77401733]
[334.92010498 158.10890198]
[320.37478638 154.44380188]
[305.82943726 150.77868652]
[290.78933716 161.10894775]
[272.64675903 157.17988586]
[262.90054321 141.00962830]
[248.20542908 138.00079346]
[234.18481445 143.02787781]
[222.21713257 132.67967224]
[207.52200317 129.67082214]
[192.82687378 126.66197968]
[178.13174438 123.65314484]
[163.43661499 120.64430237]
[148.74148560 117.63545990]
[140.17448425 132.75289917]
[127.09275055 144.18963623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[6 36]
[7 35]
[8 34]
[9 33]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[45 75]
[46 74]
[47 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[82 137]
[83 136]
[84 135]
[85 134]
[86 133]
[87 132]
[89 130]
[90 129]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
