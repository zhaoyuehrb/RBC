%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGCAGGCGCGCGGGGCAAGAGGGUGGCAGUGCGCCUGCGCCGCGUCGGCGUGCGGAACGCCGCGGUGUCUCGGCGCCUCUGCGCGCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[69.72349548 138.93209839]
[66.67263031 124.24564362]
[74.25325012 111.30213928]
[88.55554199 106.77855682]
[73.55751038 107.02145386]
[58.55947495 107.26435089]
[43.56144333 107.50724792]
[28.56340790 107.75014496]
[13.56537533 107.99303436]
[-1.43265808 108.23593140]
[-16.43069077 108.47882843]
[-31.42872429 108.72172546]
[-46.42675781 108.96462250]
[-61.42478943 109.20751953]
[-76.42282104 109.45041656]
[-85.86878967 123.37059784]
[-101.57139587 128.92962646]
[-117.35588837 124.14891052]
[-127.13754272 111.07564545]
[-142.11984253 111.80407715]
[-152.55232239 123.67584229]
[-168.32896423 124.61019135]
[-180.08978271 114.05278015]
[-180.85726929 98.26713562]
[-170.17610168 86.61860657]
[-154.38323975 86.01805115]
[-142.84828186 96.82176971]
[-127.86597443 96.09333801]
[-121.55164337 84.21089172]
[-110.07257080 76.98342896]
[-96.41059875 76.41631317]
[-84.17875671 82.76786804]
[-76.66571808 94.45237732]
[-61.66768646 94.20948792]
[-46.66965485 93.96659088]
[-31.67162132 93.72369385]
[-16.67358780 93.48079681]
[-1.67555404 93.23789978]
[13.32247925 92.99500275]
[28.32051277 92.75210571]
[43.31854630 92.50921631]
[58.31657791 92.26631927]
[73.31461334 92.02342224]
[88.31264496 91.78052521]
[101.57707977 84.77661133]
[110.23590851 72.52815247]
[118.89473724 60.27969742]
[116.42530060 44.89985275]
[125.38107300 32.60152817]
[140.05862427 30.34207535]
[148.71745300 18.09362030]
[157.37628174 5.84516525]
[166.03511047 -6.40328979]
[174.69393921 -18.65174484]
[183.35276794 -30.90019989]
[182.06608582 -46.89157104]
[193.86451721 -57.76247787]
[209.69732666 -55.17368698]
[217.41893005 -41.11109924]
[211.10597229 -26.36232758]
[195.60122681 -22.24136925]
[186.94239807 -9.99291420]
[178.28356934 2.25554109]
[169.62474060 14.50399590]
[160.96591187 26.75245094]
[152.30706787 39.00090408]
[155.07275391 53.59154129]
[146.46594238 66.13656616]
[131.14318848 68.93852997]
[122.48436737 81.18698120]
[113.82553101 93.43544006]
[116.00395966 108.27641296]
[127.81747437 117.51983643]
[139.63098145 126.76326752]
[151.44450378 136.00669861]
[163.25801086 145.25012207]
[175.21965027 154.30104065]
[187.32627869 163.15707397]
[199.43292236 172.01310730]
[211.53955078 180.86914062]
[227.89265442 182.09724426]
[234.76087952 196.98883057]
[225.07878113 210.22473145]
[208.80647278 208.18898010]
[202.68351746 192.97578430]
[190.57688904 184.11975098]
[178.47024536 175.26370239]
[166.36361694 166.40766907]
[158.96589661 164.97224426]
[154.01458740 157.06362915]
[142.20106506 147.82020569]
[130.38755798 138.57678223]
[118.57404327 129.33334351]
[106.76053619 120.08992004]
[106.78711700 135.08990479]
[96.75210571 146.23881531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[19 28]
[20 27]
[45 71]
[46 70]
[47 69]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
