%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAAGCCUGGCCUGCUGGGUCCUUUUCCCGUCAUCCCCAGCCAGAUUUAGCUGCUGACAGCUGCUUGGGACUCUGCCGCCAGGGCCUGGCCCAGACCUGCCUGCCUCUCUCCUCUCCCUCAGUGACUCCUGAGCCACAGCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[-1.58640301 142.04432678]
[4.91493750 128.52645874]
[14.63170338 117.09910583]
[26.92866898 108.50930786]
[41.00193405 103.31861877]
[55.93146515 101.86637115]
[70.74164581 104.24762726]
[85.59667969 102.16723633]
[71.56276703 96.87107086]
[57.52886200 91.57490540]
[43.49494934 86.27873993]
[29.46104050 80.98257446]
[17.36233902 85.58182526]
[5.75578785 80.82989502]
[0.69233942 69.79636383]
[-13.22599602 64.20352173]
[-28.91592789 66.23738861]
[-37.84051895 54.31259155]
[-51.75885391 48.71974182]
[-65.67719269 43.12689590]
[-79.59552765 37.53404999]
[-93.51386261 31.94120216]
[-107.43219757 26.34835434]
[-121.35053253 20.75550652]
[-132.91299438 32.95878983]
[-148.23020935 39.79725266]
[-164.96177673 40.25663757]
[-180.56282043 34.29505920]
[-192.67115784 22.84512711]
[-199.46488953 7.66816759]
[-199.93655396 -8.91668510]
[-214.07971191 -13.91378212]
[-228.22286987 -18.91087914]
[-242.36604309 -23.90797615]
[-250.36114502 -18.68065643]
[-259.73141479 -17.77404785]
[-268.32412720 -21.26760101]
[-274.22473145 -28.24447441]
[-276.18310547 -37.02801514]
[-289.97961426 -42.91502380]
[-303.77609253 -48.80203629]
[-317.57257080 -54.68904495]
[-330.81872559 -46.60700989]
[-346.28283691 -47.88794708]
[-358.01864624 -58.03931427]
[-361.51351929 -73.15769958]
[-355.42355347 -87.42977905]
[-342.09051514 -95.36763763]
[-326.64123535 -93.91902161]
[-315.01620483 -83.64094543]
[-311.68557739 -68.48553467]
[-297.88906860 -62.59852219]
[-284.09259033 -56.71151352]
[-270.29611206 -50.82450485]
[-250.16174316 -55.18620682]
[-237.36894226 -38.05113983]
[-223.22578430 -33.05404282]
[-209.08261108 -28.05694389]
[-194.93945312 -23.05984688]
[-186.67227173 -33.51745605]
[-175.55529785 -40.91547394]
[-162.67242432 -44.51557922]
[-149.28503418 -43.95059586]
[-136.70846558 -39.26186371]
[-126.18273163 -30.89658737]
[-118.75035858 -19.66521072]
[-115.15303040 -6.66291237]
[-115.75768280 6.83717203]
[-101.83934784 12.43001938]
[-87.92101288 18.02286720]
[-74.00267792 23.61571312]
[-60.08434296 29.20856094]
[-46.16600800 34.80140686]
[-32.24767303 40.39425659]
[-17.55327415 37.96034622]
[-7.63314867 50.28518295]
[6.28518677 55.87803268]
[23.46479225 52.44409180]
[34.75720596 66.94866180]
[48.79111481 72.24482727]
[62.82502365 77.54099274]
[76.85893250 82.83715820]
[90.89284515 88.13332367]
[105.70315552 85.75536346]
[117.37369537 76.33206177]
[129.04423523 66.90876007]
[131.20086670 54.14629364]
[141.17349243 46.54106140]
[153.25222778 47.75824738]
[165.12014771 38.58478165]
[176.98806763 29.41131592]
[176.39241028 13.90567780]
[185.05245972 1.02999544]
[199.63824463 -4.26476812]
[214.54122925 0.05733147]
[224.03092957 12.33435917]
[224.45832825 27.84554672]
[215.65911865 40.62652588]
[201.01675415 45.76275253]
[186.16152954 41.27923584]
[174.29360962 50.45270157]
[162.42568970 59.62616730]
[156.69248962 76.18096161]
[138.46752930 78.57929993]
[126.79698944 88.00260162]
[115.12645721 97.42589569]
[115.20605469 104.92547607]
[129.96568298 102.25090790]
[144.72531128 99.57633209]
[157.15211487 91.17546844]
[172.03738403 93.02720642]
[182.02713013 104.21671295]
[182.18597412 119.21586609]
[172.43545532 130.61444092]
[157.59274292 132.78100586]
[144.99140930 124.64601135]
[130.17832947 122.28532410]
[115.36525726 119.92462921]
[115.44485474 127.42420959]
[127.31277466 136.59767151]
[139.18069458 145.77113342]
[151.04861450 154.94461060]
[162.91653442 164.11807251]
[178.55900574 161.86228943]
[191.16476440 171.39489746]
[193.25503540 187.06034851]
[183.58969116 199.56460571]
[167.90303040 201.48913574]
[155.50164795 191.69213867]
[153.74307251 175.98599243]
[141.87515259 166.81253052]
[130.00723267 157.63905334]
[118.13931274 148.46559143]
[106.27139282 139.29212952]
[112.28847504 153.03239441]
[112.28116608 168.03237915]
[108.47031403 182.54022217]
[101.10504913 195.60746765]
[90.66687012 206.37985229]
[77.83816528 214.15315247]
[63.45758820 218.41920471]
[48.46526718 218.89907837]
[33.84130478 215.56144714]
[20.54173660 208.62448120]
[9.43600464 198.54170227]
[1.25013673 185.97222900]
[-3.48072314 171.73779297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[15 77]
[16 76]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[31 59]
[32 58]
[33 57]
[34 56]
[39 54]
[40 53]
[41 52]
[42 51]
[84 106]
[85 105]
[86 104]
[89 102]
[90 101]
[91 100]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
