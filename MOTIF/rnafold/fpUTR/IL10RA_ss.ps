%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGUCCCAGCCCAAGGGUAGCUGGAGGCGCGCAGGCCGGCUCCGCUCCGGCCCCGGACGAUGCGGCGCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[51.46298218 247.73411560]
[37.78421402 253.88970947]
[22.78496552 253.73957825]
[9.23214626 247.31143188]
[-0.37415797 235.79106140]
[-4.26187181 221.30363464]
[-1.71382880 206.52163696]
[6.79769754 194.17399597]
[-7.89916229 197.17437744]
[-22.59602165 200.17475891]
[-37.29288101 203.17514038]
[-51.98974228 206.17553711]
[-66.55387115 209.76527405]
[-80.96163940 213.93852234]
[-94.49321747 224.15287781]
[-108.05429077 213.97772217]
[-102.03087616 198.12986755]
[-85.13490295 199.53076172]
[-70.72713470 195.35749817]
[-67.57291412 191.43594360]
[-61.81107712 189.62960815]
[-54.99012756 191.47866821]
[-40.29326630 188.47828674]
[-25.59640694 185.47790527]
[-10.89954758 182.47750854]
[3.79731202 179.47712708]
[9.46016502 173.88981628]
[18.30430984 172.94805908]
[30.29595184 163.93692017]
[42.28759384 154.92579651]
[54.27923584 145.91465759]
[66.27087402 136.90351868]
[78.26251984 127.89238739]
[90.25415802 118.88125610]
[81.77667999 95.53077698]
[100.07334900 83.72160339]
[107.04419708 70.43975830]
[114.01504517 57.15792084]
[120.98589325 43.87607956]
[127.95674133 30.59423828]
[134.92759705 17.31239891]
[128.82487488 2.91479707]
[133.45393372 -12.02193165]
[146.62905884 -20.44512177]
[162.12936401 -18.37759972]
[172.63606262 -6.79558754]
[173.18824768 8.83224392]
[163.52516174 21.12690926]
[148.20942688 24.28324509]
[141.23858643 37.56508636]
[134.26773071 50.84692764]
[127.29689026 64.12876892]
[120.32604218 77.41060638]
[113.35519409 90.69244385]
[118.75909424 100.39960480]
[116.89913940 112.88031006]
[131.59599304 115.88069153]
[143.72727966 106.01326752]
[159.36215210 106.30389404]
[171.11833191 116.61536407]
[173.44490051 132.07890320]
[165.24331665 145.39311218]
[150.38612366 150.27142334]
[135.88842773 144.41044617]
[128.59561157 130.57756042]
[113.89875031 127.57717133]
[99.26528931 130.87289429]
[87.27365112 139.88403320]
[75.28201294 148.89517212]
[63.29036713 157.90629578]
[51.29872513 166.91743469]
[39.30708694 175.92857361]
[27.31544304 184.93969727]
[42.20486069 186.75775146]
[54.95831680 194.65390015]
[63.22319031 207.17156982]
[65.47485352 222.00160217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 19]
[14 18]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
