%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCAGCGCUGCGCGGCGCCGGCGGCCGCCGAGGCCUGGGUGGAAGUUGGCGCUGCUGCCGCCGCCCUGCAGCCCACUCGCUGCCUCGGCAGCGCGCUGCUCUUCUAAG\
) } def
/len { sequence length } bind def

/coor [
[97.90496063 263.76486206]
[95.79981995 248.71038818]
[99.62084961 233.99752808]
[108.78538513 221.86988831]
[121.89588165 214.17681885]
[119.79902649 199.32411194]
[117.70217133 184.47138977]
[115.60531616 169.61866760]
[113.50846100 154.76596069]
[111.41160583 139.91323853]
[109.31475067 125.06052399]
[96.16362762 124.94736481]
[85.42181396 118.74379730]
[79.51727295 108.69171906]
[79.36344910 97.78061676]
[66.03676605 90.89588928]
[52.71008301 84.01116180]
[39.38339615 77.12643433]
[26.05671310 70.24170685]
[12.73002911 63.35697556]
[-0.59665591 56.47224808]
[-13.92334080 49.58752060]
[-27.25002480 42.70279312]
[-40.57670975 35.81806564]
[-53.90339279 28.93333626]
[-68.79497528 33.50265121]
[-82.21205139 26.33071518]
[-86.47642517 12.10571289]
[-99.80310822 5.22098446]
[-113.12979126 -1.66374338]
[-126.45647430 -8.54847145]
[-139.78315735 -15.43319893]
[-153.58729553 -8.34620094]
[-168.91549683 -10.75982761]
[-179.87377930 -21.74599075]
[-182.24844360 -37.08028412]
[-175.12638855 -50.86636353]
[-161.24618530 -57.80319595]
[-145.94506836 -55.22343063]
[-135.10661316 -44.11903763]
[-132.89843750 -28.75988388]
[-119.57174683 -21.87515640]
[-106.24506378 -14.99042797]
[-92.91838074 -8.10569954]
[-79.59169769 -1.22097206]
[-65.52266693 -5.97471762]
[-51.90943909 0.81753176]
[-47.01866531 15.60665226]
[-33.69198227 22.49138069]
[-20.36529732 29.37610817]
[-7.03861237 36.26083755]
[6.28807211 43.14556503]
[19.61475754 50.03029251]
[32.94144058 56.91501999]
[46.26812744 63.79974747]
[59.59481049 70.68447876]
[72.92149353 77.56920624]
[86.24817657 84.45393372]
[108.11476135 77.68399811]
[126.43927765 96.03024292]
[140.45301819 90.68092346]
[150.58651733 78.53091431]
[165.23625183 81.22066498]
[179.24998474 75.87133789]
[193.26371765 70.52201843]
[207.27745056 65.17269135]
[209.98336792 53.42067337]
[217.99598694 44.57019424]
[229.19302368 40.78998947]
[240.69300842 42.92855835]
[249.59669495 50.32694626]
[263.88830566 45.77179337]
[278.17993164 41.21664429]
[292.47155762 36.66149139]
[306.76318359 32.10634232]
[313.79348755 17.95181847]
[328.79983521 12.99349022]
[342.87924194 20.17304420]
[347.67864990 35.23097610]
[340.35064697 49.23368454]
[325.24279785 53.87361145]
[311.31835938 46.39796829]
[297.02673340 50.95311737]
[282.73510742 55.50827026]
[268.44348145 60.06341934]
[254.15184021 64.61856842]
[246.87530518 81.30120087]
[229.46804810 87.61203003]
[212.62677002 79.18642426]
[198.61303711 84.53575134]
[184.59930420 89.88507080]
[170.58557129 95.23439789]
[161.45442200 107.00177765]
[145.80233765 104.69465637]
[131.78860474 110.04397583]
[124.16747284 122.96366882]
[126.26432800 137.81639099]
[128.36117554 152.66909790]
[130.45803833 167.52182007]
[132.55488586 182.37452698]
[134.65174866 197.22724915]
[136.74859619 212.07997131]
[151.47642517 215.84291077]
[163.64013672 224.95950317]
[171.38488770 238.03955078]
[173.52961731 253.08842468]
[169.74731445 267.81127930]
[160.61471558 279.96298218]
[147.52450562 287.69052124]
[132.47282410 289.81546021]
[117.75495148 286.01379395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[60 95]
[61 94]
[63 92]
[64 91]
[65 90]
[66 89]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
