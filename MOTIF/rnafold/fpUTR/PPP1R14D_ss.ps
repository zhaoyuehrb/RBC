%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUCCCUCUGUGGCUCUGCUCAGAACUGGCGGUUUUUCCCAGCUCCUUGCCCAGACCAAUACUUCC\
) } def
/len { sequence length } bind def

/coor [
[62.55331421 357.26986694]
[47.47248840 356.58334351]
[33.13648987 351.85241699]
[20.60913849 343.42816162]
[10.82005024 331.93569946]
[4.49563980 318.22787476]
[2.10522056 303.32189941]
[3.82617712 288.32385254]
[9.53080368 274.34674072]
[18.79577827 262.42773438]
[30.93357849 253.45129395]
[45.04349899 248.08355713]
[60.07849121 246.72280884]
[62.79523468 231.97088623]
[65.51197815 217.21896362]
[63.55973434 209.82640076]
[68.70275879 201.86408997]
[72.08811188 187.25109863]
[75.47346497 172.63812256]
[78.85882568 158.02513123]
[70.78212738 145.56307983]
[74.00719452 130.69522095]
[87.13330078 122.30812836]
[90.51865387 107.69514465]
[93.23539734 92.94321442]
[95.27789307 78.08293152]
[89.49178314 63.35773087]
[98.89004517 51.80256271]
[100.93254852 36.94227219]
[102.97505188 22.08198357]
[105.01754761 7.22169495]
[103.04844666 -2.05040145]
[107.50614929 -8.26249313]
[110.22289276 -23.01441956]
[104.22429657 -38.27708435]
[114.65309143 -50.93300247]
[130.78102112 -47.96284866]
[136.01705933 -32.42206573]
[124.97481537 -20.29767609]
[122.25807190 -5.54575014]
[119.87783813 9.26419449]
[117.83533478 24.12448311]
[115.79283905 38.98477173]
[113.75033569 53.84506226]
[119.68254089 67.50735474]
[110.13818359 80.12542725]
[108.09568787 94.98571777]
[110.41842651 100.09721375]
[109.50647736 106.13645172]
[105.13163757 111.08049774]
[101.74628448 125.69348907]
[109.84710693 138.99815369]
[106.20571136 153.76957703]
[93.47180939 161.41049194]
[90.08645630 176.02346802]
[86.70109558 190.63645935]
[83.31574249 205.24945068]
[80.26390076 219.93571472]
[77.54715729 234.68763733]
[74.83041382 249.43955994]
[88.39427185 256.06710815]
[99.66627502 266.10925293]
[107.80998230 278.82077026]
[112.22106934 293.25839233]
[112.57220459 308.35073853]
[108.83733368 322.97787476]
[101.29360199 336.05438232]
[90.50081635 346.60986328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 60]
[14 59]
[15 58]
[17 57]
[18 56]
[19 55]
[20 54]
[23 51]
[24 50]
[25 47]
[26 46]
[28 44]
[29 43]
[30 42]
[31 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
