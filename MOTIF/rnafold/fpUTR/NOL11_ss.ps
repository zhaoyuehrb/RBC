%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGAGCAGGUUCCUGGUUUGGCAAGCACUCGCCCCCUCAGGCCCGUUCAUUCUCGCGAGAGAAAGCGCGAGGCCUGCCGGGAGUGAGCGCGGCCGUACUUAGGUUUGCUCAAA\
) } def
/len { sequence length } bind def

/coor [
[74.00575256 456.97656250]
[61.72431183 447.49258423]
[57.39527893 432.59161377]
[62.68325424 418.00335693]
[75.55490112 409.33731079]
[75.96109009 394.34280396]
[76.36728668 379.34832764]
[76.77347565 364.35382080]
[77.17966461 349.35931396]
[77.58585358 334.36480713]
[77.99205017 319.37033081]
[75.32154846 315.26443481]
[75.29545593 309.41247559]
[78.84811401 303.58111572]
[80.06549072 288.63061523]
[81.28287506 273.68008423]
[82.50025177 258.72958374]
[83.51508331 243.76394653]
[84.32716370 228.78594971]
[77.29025269 215.65844727]
[85.76332855 202.29740906]
[86.57541656 187.31939697]
[87.38749695 172.34140015]
[88.19958496 157.36340332]
[80.32170868 148.07423401]
[80.95948792 135.50791931]
[90.31694031 126.50507355]
[91.53431702 111.55455017]
[85.72330475 98.83748627]
[93.51515961 87.22806549]
[94.73254395 72.27754974]
[95.94992065 57.32703018]
[97.16730499 42.37651443]
[98.38468170 27.42599678]
[99.39951324 12.46036434]
[100.21159363 -2.51763701]
[101.02367401 -17.49563789]
[90.74784088 -29.20225525]
[91.78477478 -44.38050842]
[103.00856781 -54.10480881]
[103.82065582 -69.08280945]
[104.63273621 -84.06081390]
[105.44481659 -99.03881073]
[106.25690460 -114.01681519]
[107.06898499 -128.99481201]
[107.67817688 -143.98243713]
[108.08437347 -158.97694397]
[108.49056244 -173.97143555]
[96.35819244 -183.46415710]
[92.19049835 -198.10942078]
[97.38418579 -212.23350525]
[109.75077820 -220.49215698]
[110.15696716 -235.48666382]
[110.56315613 -250.48115540]
[110.96934509 -265.47564697]
[111.37554169 -280.47015381]
[103.09206390 -294.62347412]
[111.44146729 -308.73797607]
[127.83460236 -308.29388428]
[135.40760803 -293.74804688]
[126.37004089 -280.06396484]
[125.96385193 -265.06945801]
[125.55765533 -250.07496643]
[125.15146637 -235.08047485]
[124.74527740 -220.08596802]
[136.64662170 -211.16990662]
[141.06802368 -196.78536987]
[136.11355591 -182.38722229]
[123.48506165 -173.56524658]
[123.07887268 -158.57073975]
[122.67267609 -143.57624817]
[125.67705536 -136.71356201]
[122.04698944 -128.18272400]
[121.23490143 -113.20472717]
[120.42282104 -98.22673035]
[119.61074066 -83.24872589]
[118.79865265 -68.27072906]
[117.98657227 -53.29272461]
[128.09318542 -42.41192245]
[127.48298645 -27.21053314]
[116.00167847 -16.68355370]
[115.18959808 -1.70555329]
[114.37751007 13.27244759]
[117.19494629 20.21397018]
[113.33520508 28.64337730]
[112.11782074 43.59389496]
[110.90044403 58.54441071]
[109.68305969 73.49492645]
[108.46568298 88.44544983]
[114.27669525 101.16251373]
[106.48484039 112.77193451]
[105.26745605 127.72245026]
[113.55694580 144.09585571]
[103.17758179 158.17547607]
[102.36550140 173.15348816]
[101.55341339 188.13148499]
[100.74133301 203.10948181]
[107.72016144 217.30830383]
[99.30516815 229.59802246]
[98.49308014 244.57603455]
[101.17951965 253.44932556]
[97.45077515 259.94696045]
[96.23339081 274.89746094]
[95.01601410 289.84799194]
[93.79862976 304.79852295]
[92.98654938 319.77651978]
[92.58035278 334.77099609]
[92.17416382 349.76550293]
[91.76797485 364.76000977]
[91.36178589 379.75451660]
[90.95558929 394.74899292]
[90.54940033 409.74349976]
[102.93300629 419.09368896]
[107.42343140 433.94683838]
[102.29402161 448.59158325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[14 105]
[15 104]
[16 103]
[17 102]
[18 100]
[19 99]
[21 97]
[22 96]
[23 95]
[24 94]
[27 92]
[28 91]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[35 83]
[36 82]
[37 81]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 71]
[47 70]
[48 69]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
