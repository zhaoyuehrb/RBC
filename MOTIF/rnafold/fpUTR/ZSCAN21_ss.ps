%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUACGCGGUGCGGUCUCCCGGUACCCGGAGCGGCUCUGAUUCAUGGUUUAACUUGUGGCCCUAAAGAACUGGAAACCCAAAGGAACGAAUAUUCCUGCCCCACAGAGUCCCAUCUUUGGUGAGGCUGUUUCUGGAGUUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.03048706 385.13073730]
[71.71532440 377.92068481]
[61.46454239 366.77615356]
[55.39008713 352.90606689]
[54.15085983 337.81491089]
[57.88129044 323.13964844]
[66.17671967 310.47219849]
[78.13732910 301.18658447]
[92.46572113 296.29006958]
[92.46572113 281.29006958]
[92.46572113 266.29006958]
[82.87311554 251.63262939]
[92.11496735 235.74530029]
[91.79000092 220.74880981]
[91.46503448 205.75233459]
[91.14006805 190.75585938]
[90.81510162 175.75938416]
[90.49013519 160.76289368]
[90.16516876 145.76641846]
[89.84020233 130.76994324]
[77.07186890 122.89785004]
[63.52726746 129.34329224]
[49.98266602 135.78874207]
[36.43806076 142.23417664]
[24.73383331 154.49987793]
[9.70742893 146.64852905]
[13.09221363 130.03590393]
[29.99262047 128.68957520]
[43.53722382 122.24413300]
[57.08182526 115.79869080]
[70.62643433 109.35324860]
[70.78192902 92.25036621]
[79.93367004 78.19923401]
[94.90372467 71.41934204]
[110.83829498 73.71372223]
[111.48808289 58.72780228]
[112.13786316 43.74188232]
[112.78764343 28.75596237]
[113.43742371 13.77004337]
[114.08720398 -1.21587598]
[114.73698425 -16.20179558]
[98.82051086 -20.89312744]
[84.89293671 -30.44978523]
[74.42647552 -44.08436584]
[68.59484863 -60.56951523]
[68.14392853 -78.34764099]
[73.30163574 -95.67789459]
[83.73774719 -110.80666351]
[73.66059875 -121.91751862]
[63.58345413 -133.02836609]
[53.50630951 -144.13923645]
[38.09533691 -142.32772827]
[24.57932663 -149.94987488]
[18.15546417 -164.07479858]
[21.29385185 -179.27119446]
[32.78771973 -189.69570923]
[48.21743393 -191.33993530]
[61.64996338 -183.57160950]
[67.92021942 -169.37782288]
[64.61716461 -154.21636963]
[74.69431305 -143.10551453]
[84.77145386 -131.99465942]
[94.84860229 -120.88380432]
[102.09654236 -122.81186676]
[98.24041748 -137.30773926]
[94.38430023 -151.80361938]
[86.23760223 -164.39849854]
[95.69873047 -176.03839111]
[109.69250488 -170.63706970]
[108.88017273 -155.65972900]
[112.73628998 -141.16386414]
[116.59241486 -126.66798401]
[123.84034729 -128.59605408]
[127.06490326 -143.24536133]
[130.28945923 -157.89466858]
[124.82151794 -173.35537720]
[135.68115234 -185.64360046]
[151.69688416 -182.11827087]
[156.39312744 -166.40594482]
[144.93876648 -154.67010498]
[141.71421814 -140.02079773]
[138.48965454 -125.37149048]
[149.10620117 -117.69593048]
[157.12568665 -108.31571198]
[168.12672424 -118.51263428]
[179.12776184 -128.70954895]
[190.12879944 -138.90646362]
[201.12983704 -149.10337830]
[201.47840881 -164.90382385]
[212.95507812 -175.76943970]
[228.75094604 -175.25384521]
[239.49461365 -163.66294861]
[238.81205750 -147.87339783]
[227.10820007 -137.25288391]
[211.32676697 -138.10234070]
[200.32571411 -127.90542603]
[189.32467651 -117.70851135]
[178.32363892 -107.51158905]
[167.32260132 -97.31467438]
[174.13638306 -83.54772949]
[176.63806152 -68.36894989]
[174.59661865 -53.09856415]
[168.17678833 -39.06868362]
[157.92581177 -27.50711632]
[144.72685242 -19.42989731]
[129.72290039 -15.55201435]
[129.07312012 -0.56609470]
[128.42333984 14.41982460]
[127.77355957 29.40574455]
[127.12377930 44.39166260]
[126.47399902 59.37758255]
[125.82421875 74.36350250]
[133.97106934 86.95829010]
[147.90573120 92.51036072]
[161.84037781 98.06243896]
[177.98204041 95.16778564]
[188.35148621 107.87236786]
[182.28153992 123.10679626]
[166.01643372 125.19919586]
[156.28829956 111.99708557]
[142.35365295 106.44501495]
[128.41900635 100.89294434]
[122.23037720 119.58931732]
[104.83667755 130.44497681]
[105.16165161 145.44145203]
[105.48661804 160.43792725]
[105.81158447 175.43441772]
[106.13655090 190.43089294]
[106.46151733 205.42736816]
[106.78648376 220.42384338]
[107.11145020 235.42033386]
[115.89595032 244.93060303]
[115.81712341 257.47506714]
[107.46572113 266.29006958]
[107.46572113 281.29006958]
[107.46572113 296.29006958]
[121.79411316 301.18658447]
[133.75471497 310.47219849]
[142.05015564 323.13964844]
[145.78057861 337.81491089]
[144.54135132 352.90606689]
[138.46688843 366.77615356]
[128.21612549 377.92068481]
[114.90094757 385.13073730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 136]
[10 135]
[11 134]
[13 131]
[14 130]
[15 129]
[16 128]
[17 127]
[18 126]
[19 125]
[20 124]
[21 31]
[22 30]
[23 29]
[24 28]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[48 63]
[49 62]
[50 61]
[51 60]
[73 82]
[74 81]
[75 80]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
