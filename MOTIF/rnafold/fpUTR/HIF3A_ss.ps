%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAGUCAGGGAGGGGACAGAGCGGCCCUAGGCGCGCCACAGAGAGGAGCGAGGCGCCAGAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[53.03725815 182.65614319]
[41.53278732 188.15112305]
[28.98802567 190.34172058]
[16.33160019 189.07388306]
[4.49822664 184.44927979]
[-5.64032698 176.81718445]
[-13.33946323 166.74810791]
[-27.38298607 172.01872253]
[-41.42650986 177.28935242]
[-45.42465591 192.28248596]
[-57.49316406 202.03599548]
[-72.99144745 202.79942322]
[-85.96009827 194.27922058]
[-91.41240692 179.75160217]
[-87.25185394 164.80270386]
[-75.07824707 155.18070984]
[-59.57259369 154.58544922]
[-46.69713211 163.24581909]
[-32.65361023 157.97520447]
[-18.61008453 152.70457458]
[-18.84718704 135.21557617]
[-12.61354637 118.83911896]
[-0.76380658 105.88700104]
[15.05281830 98.19692993]
[32.62205505 96.87181091]
[49.47455215 102.12163544]
[63.23294830 113.23059845]
[76.10968018 105.53710938]
[88.98641205 97.84362030]
[101.68727875 89.86314392]
[114.20587921 81.59968567]
[119.87306213 74.01068878]
[127.47670746 73.26107025]
[140.35343933 65.56758118]
[153.23016357 57.87409592]
[166.10690308 50.18060303]
[178.98362732 42.48711395]
[175.59956360 27.74251556]
[176.93946838 12.67401123]
[182.87208557 -1.24214029]
[192.81619263 -12.64257526]
[205.79756165 -20.41039467]
[220.54443359 -23.78458977]
[235.61203003 -22.43458748]
[249.52420044 -16.49264908]
[260.91796875 -6.54090405]
[268.67709351 6.44567537]
[272.04141235 21.19479752]
[270.68130493 36.26149368]
[264.73004150 50.16968155]
[254.77067566 61.55677795]
[241.77890015 69.30719757]
[227.02752686 72.66162109]
[211.96174622 71.29142761]
[198.05754089 65.33084869]
[186.67712402 55.36384583]
[173.80038452 63.05733871]
[160.92366028 70.75082397]
[148.04692078 78.44431305]
[135.17019653 86.13780212]
[122.46932983 94.11828613]
[109.95072937 102.38173676]
[105.30934143 109.32120514]
[96.67990112 110.72035217]
[83.80316925 118.41384125]
[70.92643738 126.10733032]
[73.95465088 138.56817627]
[73.51511383 151.36933899]
[69.64830017 163.56488037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[27 66]
[28 65]
[29 64]
[30 62]
[31 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
