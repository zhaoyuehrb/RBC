%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUUGUUUCUCCUGCUUGGCCUCCUCCAGGAGGGCUGGCUUCUCUGCAGAGCUCUGCUUCCUGCAGCCUCUCCCCGACCUCAGAGCCUCUGCAGAGGAAAGGCCCCCUGGGGCCCUGCCCCACAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[71.42096710 403.70614624]
[66.85790253 418.12951660]
[58.05945587 430.43572998]
[45.88760757 439.41909790]
[31.53483200 444.19958496]
[16.40726662 444.30880737]
[1.98695600 439.73608398]
[-10.31334400 430.92941284]
[-19.28857613 418.75152588]
[-24.05943871 404.39556885]
[-24.15852928 389.26791382]
[-19.57614136 374.85067749]
[-10.76121140 362.55627441]
[1.42266488 353.58920288]
[15.78183556 348.82797241]
[30.90953445 348.73901367]
[35.44358063 334.44067383]
[39.97762680 320.14233398]
[44.51167679 305.84402466]
[38.19688034 286.24984741]
[53.93603897 271.80047607]
[57.44633484 257.21697998]
[60.95662689 242.63351440]
[49.92259216 230.53840637]
[48.22074509 214.08865356]
[56.71326447 199.70561218]
[72.24402618 193.12158203]
[75.40889740 178.45927429]
[78.57376862 163.79695129]
[81.73863983 149.13462830]
[84.90350342 134.47230530]
[88.06837463 119.80998993]
[91.23324585 105.14767456]
[89.71295929 97.14704132]
[94.64990234 90.17832947]
[98.16019440 75.59484863]
[101.67048645 61.01137161]
[105.18077850 46.42789459]
[108.69107056 31.84441566]
[100.35813141 21.19001007]
[99.72326660 7.87425375]
[106.79472351 -3.19557834]
[118.78208160 -8.07007694]
[122.63583374 -22.56657791]
[126.48959351 -37.06307983]
[130.34335327 -51.55958176]
[134.19711304 -66.05608368]
[138.05087280 -80.55258179]
[141.90463257 -95.04908752]
[145.75839233 -109.54558563]
[149.61213684 -124.04208374]
[153.46589661 -138.53858948]
[157.31965637 -153.03509521]
[161.17341614 -167.53158569]
[164.85569763 -182.07260132]
[168.36599731 -196.65606689]
[171.87628174 -211.23954773]
[175.38658142 -225.82302856]
[178.89686584 -240.40650940]
[169.49577332 -255.10481262]
[173.50802612 -271.73892212]
[187.99508667 -280.19555664]
[191.15995789 -294.85787964]
[178.46644592 -303.17889404]
[169.63919067 -315.52572632]
[165.87197876 -330.22854614]
[167.67431641 -345.29888916]
[174.80245972 -358.69869995]
[186.29235840 -368.61566162]
[200.59010315 -373.70867920]
[215.76205444 -373.28890991]
[229.75633240 -367.41311646]
[240.68031311 -356.87600708]
[247.05662537 -343.10256958]
[248.02293396 -327.95562744]
[243.44853210 -313.48358154]
[233.95207214 -301.64373779]
[220.81790161 -294.03732300]
[205.82228088 -291.69302368]
[202.65740967 -277.03070068]
[211.11367798 -267.23535156]
[212.37335205 -254.16018677]
[205.74879456 -242.59179688]
[193.48034668 -236.89620972]
[189.97006226 -222.31274414]
[186.45976257 -207.72926331]
[182.94947815 -193.14578247]
[179.43917847 -178.56230164]
[180.94673157 -171.25338745]
[175.66992188 -163.67782593]
[171.81616211 -149.18133545]
[167.96240234 -134.68482971]
[164.10864258 -120.18833160]
[160.25488281 -105.69182587]
[156.40112305 -91.19532776]
[152.54736328 -76.69882202]
[148.69361877 -62.20232391]
[144.83985901 -47.70582199]
[140.98609924 -33.20932007]
[137.13233948 -18.71282005]
[133.27857971 -4.21631908]
[142.33073425 9.90628719]
[138.33428955 26.54420662]
[123.27455139 35.35470963]
[119.76425934 49.93818665]
[116.25396729 64.52166748]
[112.74367523 79.10514832]
[109.23337555 93.68862152]
[105.89556122 108.31253815]
[102.73069763 122.97486115]
[99.56582642 137.63717651]
[96.40095520 152.29949951]
[93.23608398 166.96182251]
[90.07122040 181.62413025]
[86.90634918 196.28645325]
[96.86814880 205.89071655]
[100.72890472 219.06571960]
[97.57656097 232.31639099]
[88.34481812 242.18283081]
[75.54010773 246.14379883]
[72.02981567 260.72729492]
[68.51951599 275.31076050]
[74.57305145 282.76016235]
[76.43491364 292.03552246]
[73.80326843 300.97817993]
[67.40705872 307.56765747]
[58.81001282 310.37805176]
[54.27596283 324.67639160]
[49.74191666 338.97473145]
[45.20787048 353.27307129]
[57.51996231 362.06326294]
[66.51150513 374.22909546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 130]
[17 129]
[18 128]
[19 127]
[21 122]
[22 121]
[23 120]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[35 108]
[36 107]
[37 106]
[38 105]
[39 104]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[53 91]
[54 90]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[62 80]
[63 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
