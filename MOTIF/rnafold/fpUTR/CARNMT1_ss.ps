%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCUGGGAGCCCUGAAGACCUGGCGGAGCCCAGCGCGGAUGGAGGCCUGAGGGUGGCGGGGGCGGAGCGCGCCGCGAGCUGGGGGCAUGUCCGCGGCGGGCGCCGUCUAGAGGAAGGCCAAGCAGCCGCCACCACGCUGUCGGUCGCGGAGAGACGCAAGCGAGCCAGGCCGAGGGCCGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[24.64116287 359.95611572]
[9.91355896 357.11047363]
[-1.86831093 347.82675171]
[-8.07964993 334.17321777]
[-7.33634186 319.19049072]
[-16.54953194 331.02758789]
[-25.76272392 342.86471558]
[-34.97591400 354.70181274]
[-44.18910599 366.53890991]
[-42.42987823 382.01608276]
[-51.94198608 393.88934326]
[-66.70794678 395.47113037]
[-75.92114258 407.30822754]
[-85.03615570 419.22109985]
[-94.05236816 431.20892334]
[-103.06858826 443.19674683]
[-100.60679626 458.80813599]
[-109.97238922 471.53845215]
[-125.60892487 473.83505249]
[-138.23951721 464.33538818]
[-140.37066650 448.67544556]
[-130.73800659 436.14599609]
[-115.05641174 434.18054199]
[-106.04019165 422.19271851]
[-97.02397156 410.20489502]
[-95.51333618 402.95642090]
[-87.75824738 398.09503174]
[-78.54505920 386.25793457]
[-80.63651276 371.55551147]
[-71.46165466 359.41976929]
[-56.02621078 357.32571411]
[-46.81302261 345.48861694]
[-37.59983063 333.65151978]
[-28.38664055 321.81439209]
[-19.17344856 309.97729492]
[-11.07332325 297.35241699]
[-4.15320587 284.04406738]
[2.76691127 270.73571777]
[9.68702888 257.42736816]
[16.60714531 244.11903381]
[7.58686686 232.24047852]
[4.60626888 217.56309509]
[8.30902863 202.98741150]
[18.01263809 191.41761780]
[31.83347893 185.18293762]
[47.05229950 185.56880188]
[53.97241592 172.26045227]
[60.89253616 158.95211792]
[67.81265259 145.64376831]
[74.73277283 132.33543396]
[81.65288544 119.02708435]
[73.73826599 102.99462128]
[77.84027863 85.59190369]
[92.08196259 74.78192902]
[91.83395386 59.78397751]
[91.58594513 44.78602600]
[91.33793640 29.78807831]
[91.08992767 14.79012775]
[90.84191895 -0.20782144]
[90.59391022 -15.20577145]
[90.34590149 -30.20372009]
[58.71711349 -63.88098526]
[54.31836319 -78.22151947]
[49.91961288 -92.56205750]
[45.52086258 -106.90259552]
[41.12211227 -121.24313354]
[36.72336197 -135.58366394]
[25.27932358 -146.50816345]
[28.94418716 -160.94485474]
[24.54543686 -175.28538513]
[13.10139942 -186.20988464]
[16.76626205 -200.64657593]
[12.36751175 -214.98710632]
[7.96876144 -229.32765198]
[3.57001066 -243.66818237]
[-0.82873988 -258.00872803]
[-5.22749043 -272.34927368]
[-9.62624073 -286.68978882]
[-21.07027817 -297.61428833]
[-17.40541458 -312.05099487]
[-21.80416489 -326.39151001]
[-26.32132339 -340.69519043]
[-30.95657730 -354.96105957]
[-43.49893951 -365.52615356]
[-40.35449600 -381.62100220]
[-24.75798035 -386.68862915]
[-12.75375080 -375.51586914]
[-16.69072914 -359.59631348]
[-12.05547523 -345.33044434]
[-6.98930311 -339.93081665]
[-7.46362877 -330.79028320]
[-3.06487823 -316.44973755]
[8.06453037 -306.55096436]
[4.71429586 -291.08853149]
[9.11304665 -276.74801636]
[13.51179695 -262.40747070]
[17.91054726 -248.06694031]
[22.30929756 -233.72639465]
[26.70804787 -219.38586426]
[31.10679817 -205.04531860]
[42.23620987 -195.14656067]
[38.88597488 -179.68414307]
[43.28472519 -165.34359741]
[54.41413116 -155.44483948]
[51.06389618 -139.98242188]
[55.46264648 -125.64188385]
[59.86140060 -111.30134583]
[64.26014709 -96.96080780]
[68.65889740 -82.62026978]
[73.05764771 -68.27973175]
[80.37157440 -66.61946106]
[90.56114960 -77.62730408]
[94.99942780 -63.29892349]
[102.31335449 -61.63865280]
[112.47257233 -72.67451477]
[115.52881622 -88.78635406]
[131.09733582 -93.93931580]
[143.16258240 -82.83247375]
[139.31286621 -66.89159393]
[123.50843048 -62.51528931]
[113.34921265 -51.47943115]
[127.80413818 -55.48630524]
[141.21438599 -48.76580048]
[146.65621948 -34.78772736]
[141.32000732 -20.76899910]
[127.96083069 -13.94751263]
[113.47608948 -17.84521866]
[105.34384918 -30.45172882]
[105.59185791 -15.45378017]
[105.83986664 -0.45583063]
[106.08787537 14.54211903]
[106.33588409 29.54006767]
[106.58389282 44.53801727]
[106.83190155 59.53596878]
[107.07991028 74.53392029]
[120.85849762 83.76517487]
[126.42484283 99.38828278]
[140.90296936 103.31048584]
[155.38110352 107.23268127]
[169.85923767 111.15488434]
[179.93074036 101.72957611]
[193.23977661 98.54140472]
[206.28063965 102.32006836]
[215.67245483 111.97445679]
[219.03561401 124.90490723]
[233.44691467 129.06594849]
[247.85821533 133.22700500]
[260.73663330 124.35680389]
[276.29873657 125.89138031]
[287.19659424 137.10615540]
[288.28451538 152.70584106]
[279.04888916 165.32476807]
[263.85046387 169.00463867]
[249.86544800 162.00793457]
[243.69717407 147.63830566]
[229.28587341 143.47726440]
[214.87457275 139.31622314]
[202.25862122 149.80645752]
[185.71049500 150.72557068]
[171.73304749 141.51420593]
[165.93704224 125.63301849]
[151.45890808 121.71081543]
[136.98077393 117.78862000]
[122.50264740 113.86641693]
[117.34826660 119.94202423]
[110.61758423 124.20565033]
[102.92216492 126.26989746]
[94.96122742 125.94720459]
[88.04111481 139.25553894]
[81.12099457 152.56388855]
[74.20087433 165.87222290]
[67.28076172 179.18057251]
[60.36064148 192.48890686]
[69.41712189 204.72579956]
[72.25096130 219.62065125]
[68.35269928 234.20913696]
[58.54728317 245.61152649]
[44.82017136 251.60118103]
[29.91548920 251.03915405]
[22.99537086 264.34750366]
[16.07525444 277.65582275]
[9.15513611 290.96417236]
[2.23501873 304.27252197]
[15.54346561 297.35260010]
[30.54339790 297.30764771]
[43.89308929 304.14764404]
[52.61845398 316.34881592]
[54.77563095 331.19287109]
[49.88403702 345.37289429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[12 28]
[13 27]
[14 25]
[15 24]
[16 23]
[36 183]
[37 182]
[38 181]
[39 180]
[40 179]
[46 173]
[47 172]
[48 171]
[49 170]
[50 169]
[51 168]
[54 135]
[55 134]
[56 133]
[57 132]
[58 131]
[59 130]
[60 129]
[61 128]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[69 103]
[70 102]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[80 92]
[81 91]
[82 89]
[83 88]
[114 121]
[115 120]
[137 164]
[138 163]
[139 162]
[140 161]
[145 157]
[146 156]
[147 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
