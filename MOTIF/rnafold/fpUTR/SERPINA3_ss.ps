%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUGAAAAUCCACUACUCCAGACAGACGGCUUUGGAAUCCACCAGCUACAUCCAGCUCCCUGAGGCAGAGUUGAGA\
) } def
/len { sequence length } bind def

/coor [
[80.73181152 259.04479980]
[70.42442322 270.21734619]
[56.62398529 276.59045410]
[41.43496704 277.19223022]
[27.17358017 271.93093872]
[16.01458549 261.60885620]
[9.65964699 247.80004883]
[9.07784748 232.61026001]
[14.35790539 218.35580444]
[24.69465256 207.21038818]
[38.51181030 200.87362671]
[53.70235825 200.31181335]
[58.89411545 186.23893738]
[56.04017258 171.62031555]
[68.07571411 161.35112000]
[73.26747131 147.27824402]
[78.45922852 133.20538330]
[77.80179596 125.64059448]
[84.14096069 118.68865967]
[89.88121033 104.83046722]
[95.34827423 90.86224365]
[100.54002380 76.78937531]
[95.29108429 66.88218689]
[96.49192810 55.95916748]
[103.47869110 47.76834869]
[113.64585876 44.97858429]
[119.92575073 31.35643578]
[126.20565033 17.73428917]
[120.97282410 3.06270695]
[127.53558350 -10.66262817]
[141.55494690 -15.56090927]
[147.83483887 -29.18305779]
[154.11473083 -42.80520630]
[160.39463806 -56.42735291]
[164.46623230 -70.86418152]
[166.22929382 -85.76020813]
[167.99235535 -100.65623474]
[169.75541687 -115.55226135]
[159.77548218 -127.80690765]
[161.46704102 -143.52041626]
[173.82652283 -153.37022400]
[189.52125549 -151.51263428]
[199.23985291 -139.04971313]
[197.21643066 -123.37548065]
[184.65144348 -113.78919983]
[182.88838196 -98.89317322]
[181.12532043 -83.99714661]
[179.36225891 -69.10112000]
[191.84605408 -77.41706848]
[206.84284973 -77.10677338]
[218.97196960 -68.28156281]
[223.88163757 -54.10781860]
[219.81033325 -39.67090607]
[208.21878052 -30.15061760]
[193.26589966 -28.96271706]
[180.31658936 -36.53340912]
[174.01678467 -50.14745712]
[167.73687744 -36.52530670]
[161.45698547 -22.90316010]
[155.17709351 -9.28101349]
[160.55725098 4.56057024]
[154.38259888 18.46482468]
[139.82778931 24.01418495]
[133.54789734 37.63633347]
[127.26800537 51.25848007]
[130.69137573 70.12504578]
[114.61289978 81.98113251]
[109.42114258 96.05400085]
[109.79504395 104.33980560]
[103.73940277 110.57071686]
[97.99915314 124.42890930]
[92.53209686 138.39714050]
[87.34033966 152.47000122]
[82.14858246 166.54287720]
[84.63117981 182.16809082]
[72.96698761 191.43069458]
[67.77523041 205.50357056]
[78.96134186 215.79624939]
[85.35258484 229.58828735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 77]
[13 76]
[15 74]
[16 73]
[17 72]
[19 71]
[20 70]
[21 68]
[22 67]
[26 65]
[27 64]
[28 63]
[31 60]
[32 59]
[33 58]
[34 57]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
