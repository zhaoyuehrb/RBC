%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCGGGGGUCGCCUCCCGCCUCCCGCCUCCCGCCUCCCGCCGCCCGCCGCCCGCGUCGCCCUCGCCGCCGUUGGGCCGCGCCGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[74.92556000 105.01534271]
[60.00089264 103.51390839]
[45.07622528 102.01247406]
[30.15155602 100.51103973]
[15.22688961 99.00960541]
[6.16832352 101.29460144]
[-0.16847399 97.20048523]
[-15.03463650 95.20117950]
[-29.93213081 93.45056152]
[-44.85680008 91.94912720]
[-59.78146362 90.44769287]
[-71.94917297 100.17315674]
[-87.06352234 98.43788147]
[-96.26027679 86.77789307]
[-111.18494415 85.27645874]
[-119.19948578 98.21973419]
[-131.98684692 106.36653900]
[-146.98194885 108.14617157]
[-161.20428467 103.25884247]
[-171.85035706 92.72457886]
[-176.84622192 78.67086792]
[-191.77088928 77.16943359]
[-205.05343628 86.16687012]
[-220.32592773 81.25460052]
[-225.87263489 66.20091248]
[-217.43858337 52.55369949]
[-201.49366760 50.78193665]
[-190.26945496 62.24477005]
[-175.34478760 63.74620438]
[-167.64971924 50.96921539]
[-155.11871338 42.76658630]
[-140.20787048 40.81008148]
[-125.86772156 45.54086685]
[-114.95933533 56.07148743]
[-109.68350983 70.35179138]
[-94.75884247 71.85322571]
[-83.42386627 62.25875092]
[-68.26674652 63.56880951]
[-58.28002930 75.52302551]
[-43.35536194 77.02445984]
[-28.43069649 78.52589417]
[-21.31742096 76.01230621]
[-13.03533173 80.33501434]
[1.83083034 82.33432007]
[16.72832489 84.08493805]
[31.65299225 85.58637238]
[46.57765961 87.08780670]
[61.50232697 88.58924103]
[76.42699432 90.09067535]
[81.83530426 82.00207520]
[89.87368011 76.51939392]
[99.37824249 74.43645477]
[108.97283173 76.05486298]
[117.26824188 81.14028168]
[123.06339264 88.95639038]
[125.51919556 98.37149811]
[140.11058044 101.84880066]
[154.70195007 105.32610321]
[169.91986084 100.99874115]
[180.50675964 111.47570038]
[195.09812927 114.95300293]
[209.68951416 118.43030548]
[220.38296509 110.04377747]
[233.76257324 109.42248535]
[244.85786438 116.56995392]
[249.67858887 128.64561462]
[264.14562988 132.60855103]
[278.61267090 136.57148743]
[293.96667480 132.75503540]
[304.19757080 143.57991028]
[318.66461182 147.54284668]
[333.13165283 151.50576782]
[348.84963989 146.82850647]
[360.57162476 158.29701233]
[356.23904419 174.11349487]
[340.30889893 178.00729370]
[329.16870117 165.97280884]
[314.70169067 162.00988770]
[300.23464966 158.04695129]
[285.91540527 162.14685059]
[274.64974976 151.03852844]
[260.18270874 147.07559204]
[245.71566772 143.11265564]
[231.58352661 152.05880737]
[215.00477600 148.03187561]
[206.21221924 133.02168274]
[191.62083435 129.54438782]
[177.02944946 126.06708527]
[162.85522461 130.64317322]
[151.22465515 119.91748810]
[136.63327026 116.44018555]
[122.04189301 112.96288300]
[105.95371246 124.86834717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[7 44]
[8 43]
[9 41]
[10 40]
[11 39]
[14 36]
[15 35]
[21 29]
[22 28]
[56 92]
[57 91]
[58 90]
[60 88]
[61 87]
[62 86]
[66 83]
[67 82]
[68 81]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
