%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCCAGGCGGCGCGGCUGGUCCCCAGGGGUCUGCGGGCGACUGCGCGGCUGAGGCGCCCGAGUGCGGUACUGGCGGCGGGCGGCGGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[82.93066406 183.48033142]
[84.77197266 167.95152283]
[96.19956207 157.27706909]
[95.22861481 142.30851746]
[94.25766754 127.33998108]
[93.28672028 112.37143707]
[85.43888855 99.58818054]
[72.53023529 91.94837952]
[54.20785522 92.25724030]
[46.04695892 76.81417084]
[32.89768219 69.59638214]
[19.74840355 62.37859344]
[3.92783570 62.52080536]
[-3.50604677 49.61396027]
[-16.65532494 42.39617157]
[-29.80460358 35.17838287]
[-42.95388031 27.96059227]
[-56.10316086 20.74280357]
[-69.25244141 13.52501488]
[-81.77854919 18.77839851]
[-94.83946991 15.84006596]
[-103.64735413 6.01969671]
[-105.10861206 -6.89373207]
[-118.01726532 -14.53353405]
[-130.92591858 -22.17333603]
[-143.83457947 -29.81313896]
[-159.65145874 -30.18330193]
[-166.66349792 -43.32410049]
[-179.57214355 -50.96390533]
[-192.48080444 -58.60370636]
[-208.87591553 -58.23959732]
[-217.15637207 -72.39466858]
[-208.80395508 -86.50740051]
[-192.41090393 -86.05982208]
[-184.84100342 -71.51235962]
[-171.93234253 -63.87256241]
[-159.02368164 -56.23275757]
[-144.13012695 -56.40904617]
[-136.19477844 -42.72179413]
[-123.28611755 -35.08199310]
[-110.37746429 -27.44219017]
[-97.46881104 -19.80238914]
[-81.47101593 -24.70085716]
[-66.54206085 -16.43168449]
[-62.03464890 0.37573624]
[-48.88537216 7.59352541]
[-35.73609161 14.81131458]
[-22.58681488 22.02910423]
[-9.43753624 29.24689293]
[3.71174240 36.46468353]
[18.59178543 35.80620575]
[26.96619225 49.22931671]
[40.11547089 56.44710541]
[53.26474762 63.66489410]
[65.08670807 60.58714294]
[76.15329742 66.65182495]
[80.17003632 79.03972626]
[93.07868958 86.67952728]
[128.34962463 74.34806061]
[143.34765625 74.10516357]
[158.34568787 73.86227417]
[173.34371948 73.61937714]
[188.34175110 73.37648010]
[203.33978271 73.13358307]
[212.96511841 64.36163330]
[225.58274841 64.57465363]
[234.32815552 73.10395813]
[249.32618713 73.34685516]
[264.32421875 73.58975220]
[274.43115234 61.65726852]
[289.85220337 59.06402206]
[303.30606079 67.03446960]
[308.44018555 81.80520630]
[302.83044434 96.40193939]
[289.12554932 103.93254089]
[273.79653931 100.84129333]
[264.08132935 88.58778381]
[249.08329773 88.34488678]
[234.08526611 88.10199738]
[219.34655762 97.47533417]
[203.58268738 88.13161469]
[188.58465576 88.37451172]
[173.58660889 88.61740875]
[158.58857727 88.86030579]
[143.59054565 89.10320282]
[128.59251404 89.34609222]
[123.50820160 94.85969543]
[113.33957672 105.88688660]
[108.25526428 111.40048981]
[109.22621155 126.36903381]
[110.19715881 141.33757019]
[111.16810608 156.30612183]
[123.87895203 165.41481018]
[127.71096039 180.57560730]
[120.85478210 194.63003540]
[106.54769135 200.94201660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 58]
[8 57]
[10 54]
[11 53]
[12 52]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[23 42]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
