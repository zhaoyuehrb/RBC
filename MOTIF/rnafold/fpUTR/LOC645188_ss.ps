%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUAGGCUACUGUUGCUCUAGGGUGGCAGGGGUUAGGGAAAAAUCAGGAGAGGCUGUAGGCUACUGUUCAUCUAGG\
) } def
/len { sequence length } bind def

/coor [
[125.85632324 261.41366577]
[132.18580627 247.59317017]
[143.32575989 237.25054932]
[138.07109070 223.20104980]
[132.81643677 209.15155029]
[127.56176758 195.10203552]
[122.30710602 181.05253601]
[110.60159302 171.84220886]
[113.01425171 156.20603943]
[107.75959015 142.15653992]
[102.50492859 128.10704041]
[97.25026703 114.05754089]
[86.58370972 105.01782990]
[88.70023346 91.19712830]
[83.44556427 77.14762115]
[78.19090271 63.09812164]
[66.10954285 52.88287735]
[68.89805603 38.25162888]
[63.64339066 24.20212555]
[58.38872910 10.15262222]
[53.13406372 -3.89688015]
[41.60290909 -10.06073380]
[37.60151672 -22.08301163]
[42.79713821 -33.19449997]
[38.10519028 -47.44180298]
[33.41323853 -61.68910217]
[18.28548241 -61.61069870]
[3.87451839 -66.21279907]
[-8.40781307 -75.04453278]
[-17.35821342 -87.24065399]
[-22.09981537 -101.60632324]
[-22.16808510 -116.73413086]
[-17.55633163 -131.14201355]
[-8.71636963 -143.41841125]
[3.48575163 -152.36064148]
[17.85459328 -157.09262085]
[32.98244095 -157.15075684]
[47.38722610 -152.52934265]
[59.65771103 -143.68115234]
[68.59175873 -131.47305298]
[73.31410217 -117.10103607]
[73.36209869 -101.97315216]
[68.73104095 -87.57147217]
[59.87463760 -75.30691528]
[47.66054153 -66.38105011]
[52.35248947 -52.13375092]
[57.04444122 -37.88644791]
[70.73080444 -27.09099579]
[67.18357086 -9.15154266]
[72.43823242 4.89795971]
[77.69289398 18.94746208]
[82.94755554 32.99696350]
[94.65306854 42.20729446]
[92.24040985 57.84345627]
[97.49507141 71.89295959]
[102.74973297 85.94245911]
[113.41629028 94.98217010]
[111.29976654 108.80287170]
[116.55443573 122.85237885]
[121.80909729 136.90188599]
[127.06375885 150.95138550]
[139.14512634 161.16662598]
[136.35661316 175.79788208]
[141.61126709 189.84738159]
[146.86593628 203.89688110]
[152.12059021 217.94638062]
[157.37525940 231.99588013]
[172.56817627 232.48973083]
[186.41354370 238.76463318]
[196.80004883 249.86367798]
[202.14381409 264.09436035]
[201.62998962 279.28662109]
[195.33688354 293.12371826]
[184.22418213 303.49560547]
[169.98648071 308.82067871]
[154.79492188 308.28683472]
[140.96611023 301.97555542]
[130.60884094 290.84921265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[9 61]
[10 60]
[11 59]
[12 58]
[14 56]
[15 55]
[16 54]
[18 52]
[19 51]
[20 50]
[21 49]
[24 47]
[25 46]
[26 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
