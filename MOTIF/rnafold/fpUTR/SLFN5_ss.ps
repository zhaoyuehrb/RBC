%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAUAUAAGCCCGGGAUCCCGCCGGGUCAGGUUCUCUGCUCUGGACUUGGGAGGCUCCGUUGCCUGCUCCCGGAGGGAGACGCGCUGCCGAGGAGAACCCAGCGGGAGAACAUUUCAGGAUAGGAAUAGGCCAAGUGCUGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[145.59858704 349.82025146]
[138.65893555 349.27166748]
[133.99362183 363.52770996]
[129.32829285 377.78375244]
[136.69624329 391.76547241]
[131.93984985 406.83706665]
[117.88099670 414.05676270]
[102.86055756 409.14129639]
[95.78988647 395.00689697]
[100.86389160 380.03927612]
[115.07225037 373.11843872]
[119.73757935 358.86239624]
[124.40290070 344.60635376]
[113.11253357 336.50131226]
[104.70968628 325.39852905]
[99.95870972 312.28268433]
[99.29922485 298.32269287]
[102.80547333 284.76754761]
[110.17832184 272.83447266]
[120.77071381 263.59973145]
[114.92106628 249.78735352]
[109.07142639 235.97497559]
[103.22177887 222.16259766]
[97.37213898 208.35021973]
[91.52249146 194.53785706]
[79.43446350 185.83563232]
[81.17742157 170.11071777]
[75.32778168 156.29833984]
[69.47813416 142.48597717]
[63.62849045 128.67359924]
[51.91511917 119.30359650]
[37.15536880 116.62969208]
[22.39561844 113.95578766]
[7.63586855 111.28187561]
[-7.12388134 108.60797119]
[-21.88363075 105.93405914]
[-36.64338303 103.26015472]
[-47.76229858 114.08370209]
[-63.12440109 116.27127838]
[-76.82263947 108.98171234]
[-83.58977509 95.01799011]
[-80.82369232 79.74945068]
[-69.58801270 69.04714966]
[-54.20308304 67.02635193]
[-40.58472443 74.46408844]
[-33.96947479 88.50040436]
[-19.20972443 91.17430878]
[-4.44997358 93.84822083]
[10.30977631 96.52212524]
[25.06952667 99.19603729]
[39.82927704 101.86994171]
[54.58902740 104.54385376]
[58.82946777 98.35768127]
[67.31034851 85.98535156]
[71.55078888 79.79918671]
[63.73354721 66.99720001]
[55.91630554 54.19522476]
[48.09906006 41.39324188]
[32.68033600 37.92359161]
[24.30179024 24.52301216]
[27.93426323 9.14183235]
[41.42267609 0.90543377]
[56.76459122 4.70032454]
[64.85792542 18.27506447]
[60.90103912 33.57600021]
[68.71828461 46.37797928]
[76.53553009 59.17995834]
[84.35277557 71.98194122]
[93.54229736 75.13996887]
[100.01988220 80.72110748]
[105.86952972 66.90872955]
[111.71916962 53.09635544]
[117.56881714 39.28398132]
[123.27252197 25.41070938]
[128.82966614 11.47807789]
[134.38679504 -2.45455408]
[132.31269836 -18.13921738]
[144.21456909 -27.09436035]
[149.77171326 -41.02699280]
[141.37684631 -54.07712555]
[142.28955078 -69.56733704]
[152.15885925 -81.54132080]
[167.18983459 -85.39484406]
[181.60273743 -79.64614105]
[189.85554504 -66.50570679]
[188.77485657 -51.02631378]
[178.77622986 -39.16009140]
[163.70434570 -35.46985626]
[158.14720154 -21.53722382]
[160.61878967 -6.84911489]
[148.31942749 3.10258365]
[142.76229858 17.03521538]
[137.20515442 30.96784592]
[137.65150452 38.39622498]
[131.38119507 45.13362503]
[125.53154755 58.94599915]
[119.68190002 72.75837708]
[113.83226013 86.57074738]
[118.08065796 118.24314880]
[77.44086456 122.82395172]
[83.29051208 136.63632202]
[89.14015198 150.44869995]
[94.98979950 164.26107788]
[107.49623108 173.95126343]
[105.33486938 188.68820190]
[111.18450928 202.50057983]
[117.03415680 216.31295776]
[122.88379669 230.12533569]
[128.73344421 243.93769836]
[134.58308411 257.75009155]
[153.69924927 257.17260742]
[171.42250061 264.24978638]
[184.82551575 277.77755737]
[191.70855713 295.48944092]
[190.96043396 314.43609619]
[182.73780823 331.47650146]
[193.06121826 342.35894775]
[203.38461304 353.24136353]
[213.70802307 364.12380981]
[224.03143311 375.00622559]
[234.35484314 385.88867188]
[249.46586609 390.57559204]
[252.61174011 405.13418579]
[262.93515015 416.01663208]
[280.68408203 420.80236816]
[284.17849731 437.97042847]
[294.72903442 448.63281250]
[310.53244019 448.46548462]
[321.76687622 459.58139038]
[321.76708984 475.38568115]
[310.53302002 486.50192261]
[294.72961426 486.33508301]
[283.73275757 474.98410034]
[284.06668091 459.18334961]
[273.51614380 448.52099609]
[261.38348389 448.13043213]
[252.50425720 439.27453613]
[252.05271912 426.34002686]
[241.72930908 415.45761108]
[227.35668945 411.54904175]
[223.47241211 396.21206665]
[213.14900208 385.32965088]
[202.82559204 374.44720459]
[192.50218201 363.56478882]
[182.17878723 352.68234253]
[171.85537720 341.79992676]
[165.81997681 345.26885986]
[159.33361816 347.79608154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[27 103]
[28 102]
[29 101]
[30 100]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[55 68]
[56 67]
[57 66]
[58 65]
[70 98]
[71 97]
[72 96]
[73 95]
[74 93]
[75 92]
[76 91]
[78 89]
[79 88]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[121 141]
[123 139]
[124 138]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
