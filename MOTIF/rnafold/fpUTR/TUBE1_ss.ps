%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGCUUGCGGCAGUAGCGUGACUUACGGCAGCUCUCUAGCAGAGCGCCGUUGCUGGGGGAAUGCAGAAGCGGCCGCGGGCUAGCAAGCUCCCGGAGCCGGCGGCGCACCACC\
) } def
/len { sequence length } bind def

/coor [
[68.14341736 124.95378876]
[54.82514191 131.85476685]
[41.50686264 138.75573730]
[28.18858528 145.65670776]
[14.96580696 152.73895264]
[1.84099698 160.00114441]
[-11.28381348 167.26333618]
[-15.75060463 182.18597412]
[-29.16448212 189.36390686]
[-43.36342239 185.01353455]
[-56.48823166 192.27572632]
[-60.95502472 207.19837952]
[-74.36889648 214.37629700]
[-88.56784058 210.02592468]
[-101.69264984 217.28811646]
[-114.81745911 224.55030823]
[-118.94381714 239.80641174]
[-132.69070435 247.60375977]
[-147.90232849 243.31634521]
[-155.55390930 229.48779297]
[-151.10589600 214.32234192]
[-137.19721985 206.81739807]
[-122.07964325 211.42549133]
[-108.95483398 204.16331482]
[-95.83002472 196.90112305]
[-91.97328186 182.56022644]
[-78.76631165 175.00837708]
[-63.75041962 179.15090942]
[-50.62560654 171.88873291]
[-46.76886749 157.54783630]
[-33.56189346 149.99597168]
[-18.54599953 154.13851929]
[-5.42118979 146.87632751]
[7.70362043 139.61415100]
[12.09209919 133.54016113]
[21.28760910 132.33843994]
[34.60588837 125.43746185]
[47.92416763 118.53648376]
[61.24244308 111.63550568]
[59.73564911 95.96080017]
[64.32596588 80.89772797]
[74.31830597 68.72726440]
[88.19955444 61.29234314]
[103.86770630 59.71881104]
[118.95018005 64.24494934]
[131.16308594 74.18536377]
[144.28790283 66.92317963]
[157.41270447 59.66099548]
[170.53752136 52.39880753]
[183.66232300 45.13661957]
[196.78713989 37.87443161]
[209.91194153 30.61224747]
[223.03675842 23.35005951]
[236.16157532 16.08787346]
[248.97785950 8.29411411]
[261.46411133 -0.01813283]
[273.95037842 -8.33037949]
[286.43661499 -16.64262581]
[298.92288208 -24.95487213]
[311.40911865 -33.26712036]
[323.89538574 -41.57936478]
[327.12557983 -56.81759644]
[339.90682983 -65.06952667]
[354.41424561 -61.89612579]
[366.90048218 -70.20837402]
[379.38674927 -78.52062225]
[380.94503784 -89.45800781]
[388.17636108 -97.51540375]
[398.45336914 -100.13352203]
[408.24114990 -96.66562653]
[421.16268921 -104.28360748]
[434.08422852 -111.90158844]
[435.43151855 -127.36006165]
[445.63314819 -139.05221558]
[460.76638794 -142.48217773]
[475.01220703 -136.33103943]
[482.89279175 -122.96406555]
[481.37789917 -107.52111816]
[471.05001831 -95.94032288]
[455.88046265 -92.67473602]
[441.70220947 -98.98003387]
[428.78067017 -91.36206055]
[415.85913086 -83.74407959]
[407.76553345 -66.27179718]
[387.69900513 -66.03436279]
[375.21273804 -57.72211838]
[362.72650146 -49.40987015]
[360.05667114 -34.80139160]
[347.51223755 -26.19371986]
[332.20764160 -29.09311104]
[319.72137451 -20.78086472]
[307.23513794 -12.46861839]
[294.74887085 -4.15637159]
[282.26260376 4.15587521]
[269.77636719 12.46812153]
[257.29010010 20.78036880]
[256.26174927 24.28798103]
[253.40208435 27.43560791]
[248.91769409 29.32971001]
[243.42375183 29.21268272]
[230.29895020 36.47486877]
[217.17413330 43.73705673]
[204.04933167 50.99924469]
[190.92451477 58.26142883]
[177.79969788 65.52362061]
[164.67489624 72.78580475]
[151.55007935 80.04798889]
[138.42527771 87.31018066]
[140.44757080 101.23564148]
[137.57901001 115.01168823]
[130.16645813 126.97254181]
[119.10620880 135.67192078]
[105.73567200 140.05789185]
[91.67157745 139.60012817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 34]
[6 33]
[7 32]
[10 29]
[11 28]
[14 25]
[15 24]
[16 23]
[46 108]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
[52 102]
[53 101]
[54 100]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[64 87]
[65 86]
[66 85]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
