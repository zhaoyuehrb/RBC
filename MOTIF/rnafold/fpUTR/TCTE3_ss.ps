%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGCGGGCACUUCCUACCGUACGAGGCGCAGGUGGGAGACUUCCGCCCUCGCGGGACUGGCUAGGGCGUUUGACCGCCGGCGGUGAAGGGGAGGCGGUGGGCGUCUUGGAGAACAGAGCGAG\
) } def
/len { sequence length } bind def

/coor [
[122.26990509 128.88624573]
[110.81739044 138.57334900]
[96.05573273 135.91001892]
[88.71065521 122.83141327]
[94.11879730 108.84062195]
[79.41621399 111.81282043]
[64.71362305 114.78501129]
[50.01103592 117.75720215]
[35.30844879 120.72939301]
[20.60586166 123.70158386]
[14.08082485 137.65615845]
[0.74591821 145.00691223]
[-14.18383884 143.11843872]
[-25.00919724 132.92286682]
[-39.71178436 135.89506531]
[-54.41437149 138.86724854]
[-69.11695862 141.83944702]
[-83.81954956 144.81163025]
[-98.52213287 147.78382874]
[-113.22472382 150.75602722]
[-127.92730713 153.72821045]
[-131.64364624 168.53198242]
[-141.42166138 180.25175476]
[-155.31993103 186.56057739]
[-170.57891846 186.20581055]
[-184.16896057 179.25788879]
[-193.39173889 167.09635925]
[-196.41607666 152.13586426]
[-192.64146423 137.34684753]
[-182.81736755 125.66566467]
[-168.89437866 119.41163635]
[-153.63690186 119.82648468]
[-140.07432556 126.82785797]
[-130.89950562 139.02561951]
[-116.19691467 136.05343628]
[-101.49432373 133.08123779]
[-86.79174042 130.10905457]
[-72.08914948 127.13685608]
[-57.38656616 124.16466522]
[-42.68397903 121.19247437]
[-27.98139000 118.22028351]
[-21.96639252 104.62036133]
[-8.94252777 97.08093262]
[6.20056200 98.67474365]
[17.63366890 108.99900055]
[32.33625793 106.02680969]
[47.03884506 103.05461121]
[61.74143219 100.08242035]
[76.44401550 97.11022949]
[91.14660645 94.13803864]
[105.63549042 90.25575256]
[119.85440063 85.47845459]
[134.07331848 80.70114899]
[148.29222107 75.92385101]
[162.51113892 71.14655304]
[162.40591431 56.03211212]
[166.97138977 41.64465332]
[175.74844360 29.38937950]
[187.86727905 20.45916176]
[202.13360596 15.71843529]
[217.14630127 15.61952972]
[231.43505859 20.15954971]
[243.60432434 28.88188171]
[252.46966553 40.92209244]
[266.68856812 36.14479446]
[280.90747070 31.36749458]
[295.12640381 26.59019470]
[309.34530640 21.81289482]
[323.56420898 17.03559494]
[337.78311157 12.25829601]
[352.00204468 7.48099566]
[366.22094727 2.70369625]
[380.43984985 -2.07360363]
[394.65875244 -6.85090351]
[401.89205933 -12.61157799]
[409.29211426 -11.56525612]
[423.62570190 -15.98658371]
[437.95928955 -20.40791130]
[452.29287720 -24.82923889]
[466.62646484 -29.25056648]
[480.96005249 -33.67189407]
[482.34442139 -48.80966187]
[489.42080688 -62.26303101]
[501.11013794 -71.98046112]
[515.62982178 -76.48012543]
[530.76574707 -75.07584381]
[544.20977783 -67.98175812]
[553.91186523 -56.27968216]
[558.39239502 -41.75407791]
[556.96820068 -26.62000847]
[549.85644531 -13.18530178]
[538.14160156 -3.49865580]
[523.61016846 0.96278679]
[508.47796631 -0.48131159]
[495.05261230 -7.61073637]
[485.38137817 -19.33830261]
[471.04779053 -14.91697502]
[456.71420288 -10.49564743]
[442.38061523 -6.07431936]
[428.04702759 -1.65299189]
[413.71343994 2.76833582]
[399.43606567 7.36800671]
[385.21716309 12.14530659]
[370.99826050 16.92260551]
[356.77932739 21.69990540]
[342.56042480 26.47720528]
[328.34152222 31.25450516]
[314.12261963 36.03180695]
[299.90368652 40.80910492]
[285.68478394 45.58640671]
[271.46588135 50.36370468]
[257.24697876 55.14100266]
[257.45004272 70.09158325]
[253.01611328 84.39229584]
[244.36737061 96.63890076]
[232.34054565 105.62479401]
[218.10591125 110.45987701]
[203.05348206 110.65872192]
[188.65722656 106.18927002]
[176.33073425 97.47721100]
[167.28843689 85.36546326]
[153.06951904 90.14276123]
[138.85061646 94.92005920]
[124.63170624 99.69736481]
[110.41279602 104.47466278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[64 112]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[76 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
