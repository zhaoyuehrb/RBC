%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUUUCCCUUUGACAAGUCGCUGCUGCUGCAGCAAAAAUAAAGGACGCGACCGCCGCAGCCUCUGCGGAGCCGGGCUCGGGUCGCCGGAGCCGCGCCCCACCCCGCCAGCUCCAGAGCCACGACUAAUGGCUGAAGGAUAAAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[109.34809875 242.61239624]
[106.82993317 227.82528687]
[104.31177521 213.03816223]
[101.79361725 198.25103760]
[99.27545166 183.46392822]
[96.75729370 168.67680359]
[94.23912811 153.88969421]
[80.89563751 147.03759766]
[67.41064453 153.60684204]
[53.92565918 160.17610168]
[40.44066620 166.74534607]
[26.95567703 173.31459045]
[13.47068691 179.88385010]
[14.47472858 193.13217163]
[10.90505314 205.89668274]
[3.21149445 216.65010071]
[-7.66405773 224.11354065]
[-20.40292740 227.40855408]
[-33.46952820 226.16058350]
[-45.29647064 220.54127502]
[-54.47257233 211.24534607]
[-68.22251129 217.24028015]
[-81.97245026 223.23521423]
[-95.72238922 229.23014832]
[-109.47232819 235.22506714]
[-118.77320862 248.73158264]
[-135.09692383 247.16049194]
[-141.65103149 232.12800598]
[-131.69323730 219.09825134]
[-115.46726227 221.47512817]
[-101.71732330 215.48020935]
[-87.96737671 209.48527527]
[-74.21743774 203.49034119]
[-60.46750259 197.49540710]
[-60.34163666 180.65756226]
[-52.87422943 165.50419617]
[-39.51160049 155.07873535]
[-22.88933182 151.49826050]
[-6.31250954 155.52371216]
[6.90143728 166.39884949]
[20.38642693 159.82960510]
[33.87141800 153.26036072]
[47.35640717 146.69110107]
[60.84139633 140.12185669]
[74.32638550 133.55261230]
[62.60608292 110.44954681]
[67.02537537 87.10912323]
[83.20191193 72.78339386]
[78.53659058 58.52735519]
[73.87126923 44.27131271]
[69.20594025 30.01526833]
[64.54061890 15.75922489]
[59.87529373 1.50318253]
[45.73057556 -1.25615585]
[35.23286057 -13.62105942]
[34.62033463 -31.64548111]
[27.07473183 -44.60942841]
[19.52912903 -57.57337189]
[11.98352623 -70.53731537]
[4.43792295 -83.50125885]
[-8.75542450 -94.14888763]
[-2.17619586 -109.77419281]
[14.65977573 -107.77759552]
[17.40186882 -91.04686737]
[24.94747162 -78.08292389]
[32.49307251 -65.11897278]
[40.03867722 -52.15502930]
[47.58427811 -39.19108582]
[62.02432251 -43.25127411]
[61.70808029 -58.24794006]
[61.39183426 -73.24460602]
[61.07559204 -88.24127197]
[54.69665909 -103.94940948]
[68.02505493 -114.42749786]
[81.78331757 -104.52060699]
[76.07225800 -88.55751801]
[76.38850403 -73.56085205]
[76.70474243 -58.56418610]
[77.02098846 -43.56752014]
[85.92105865 -20.46081543]
[74.13134003 -3.16214085]
[78.79666138 11.09390163]
[83.46198273 25.34994507]
[88.12731171 39.60598755]
[92.79263306 53.86203003]
[97.45795441 68.11807251]
[112.47264862 70.54915619]
[124.66643524 79.64106750]
[138.15142822 73.07181549]
[151.63641357 66.50257111]
[165.12141418 59.93331909]
[178.60639954 53.36407089]
[188.51237488 37.87861252]
[205.93612671 39.71356964]
[219.27961731 32.86147690]
[232.62310791 26.00938225]
[234.86886597 10.65567970]
[245.73446655 -0.42215446]
[261.04187012 -2.96446633]
[274.90502930 4.00631475]
[281.99334717 17.80978203]
[279.58114624 33.13821793]
[268.59600830 44.09753036]
[253.26194763 46.47363663]
[239.47520447 39.35287476]
[226.13171387 46.20496750]
[212.78820801 53.05706024]
[208.76403809 64.50955200]
[197.64627075 70.31156158]
[185.17564392 66.84906006]
[171.69065857 73.41831207]
[158.20567322 79.98755646]
[144.72067261 86.55680847]
[131.23568726 93.12606049]
[135.14076233 104.31599426]
[134.77281189 117.27280426]
[129.43907166 130.30268860]
[142.15792847 138.25445557]
[154.87678528 146.20622253]
[167.59564209 154.15798950]
[180.31449890 162.10975647]
[195.13099670 157.10920715]
[209.67648315 162.85052490]
[217.08303833 176.62284851]
[213.85350037 191.92330933]
[201.51277161 201.52749634]
[185.88775635 200.90060425]
[174.35612488 190.33863831]
[172.36273193 174.82862854]
[159.64387512 166.87684631]
[146.92501831 158.92507935]
[134.20616150 150.97331238]
[121.48730469 143.02154541]
[109.02625275 151.37152100]
[111.54441071 166.15864563]
[114.06256866 180.94577026]
[116.58073425 195.73287964]
[119.09889221 210.52000427]
[121.61705780 225.30711365]
[124.13521576 240.09423828]
[138.36952209 246.04301453]
[147.10920715 258.75604248]
[147.56547546 274.17666626]
[139.59272766 287.38418579]
[125.73503876 294.16415405]
[110.41434479 292.35311890]
[98.51943207 282.52893066]
[93.84591675 267.82647705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[48 86]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[69 79]
[70 78]
[71 77]
[72 76]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[94 107]
[95 106]
[96 105]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
