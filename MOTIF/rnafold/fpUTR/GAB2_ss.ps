%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCUGGCCUCCCGCGAGCUGCGCACCGCCGGCCGCUGCCCCAGCUGCCCGAGCCCGCGCCCUCGUCCGCGCGACCCGGCGGGGGGCUCCAGGCCGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[85.56723022 127.28327179]
[75.54161072 138.44064331]
[76.20414734 154.00338745]
[65.87779999 165.17572021]
[51.03702927 165.71144104]
[41.01140976 176.86882019]
[37.54291916 192.30514526]
[23.28113556 196.60058594]
[13.25551510 207.75796509]
[12.67216396 223.79040527]
[-0.31138003 233.21415710]
[-15.73525333 228.80012512]
[-21.76758003 213.93437195]
[-13.78087616 200.02062988]
[2.09814358 197.73234558]
[12.12376404 186.57496643]
[14.87515545 171.93669128]
[29.85403633 166.84320068]
[39.87965775 155.68582153]
[38.83103943 140.87245178]
[48.83950043 129.41447449]
[64.38423920 128.41502380]
[74.40985870 117.25765228]
[69.46491241 104.50447083]
[70.51671600 90.86666107]
[77.35871124 79.02253723]
[88.64720917 71.29814911]
[102.16526794 69.21049500]
[115.25809479 73.16955566]
[125.61930847 62.32312012]
[135.98051453 51.47668076]
[146.34173584 40.63024521]
[156.70295715 29.78380394]
[167.06416321 18.93736649]
[177.42538452 8.09092712]
[174.15347290 -8.42052269]
[181.24024963 -23.50627136]
[195.74740601 -31.37191582]
[211.92935181 -29.12495422]
[221.95497131 -40.28232574]
[231.98059082 -51.43969727]
[242.00621033 -62.59706879]
[252.03182983 -73.75444031]
[253.84327698 -80.40181732]
[258.16525269 -84.41803741]
[263.02499390 -85.26242828]
[273.71215820 -95.78784180]
[284.39935303 -106.31326294]
[295.08651733 -116.83867645]
[305.77368164 -127.36408997]
[301.30856323 -139.68153381]
[301.89224243 -152.72311401]
[307.39999390 -164.50700378]
[316.96142578 -173.25627136]
[329.09805298 -177.66688538]
[341.95172119 -177.10192871]
[353.56912231 -171.68333435]
[364.87808228 -181.53764343]
[376.18704224 -191.39195251]
[387.49600220 -201.24626160]
[398.80496216 -211.10057068]
[397.30014038 -226.54449463]
[405.18945312 -239.90632629]
[419.43927002 -246.04817200]
[434.57025146 -242.60833740]
[444.76425171 -230.90954590]
[446.10147095 -215.45019531]
[438.06768799 -202.17472839]
[423.75207520 -196.18783569]
[408.65927124 -199.79159546]
[397.35031128 -189.93730164]
[386.04135132 -180.08299255]
[374.73239136 -170.22868347]
[363.42343140 -160.37437439]
[367.36935425 -143.76145935]
[362.43032837 -127.32453156]
[349.85284424 -115.51787567]
[332.96569824 -111.58702087]
[316.29910278 -116.67692566]
[305.61193848 -106.15150452]
[294.92474365 -95.62609100]
[284.23757935 -85.10066986]
[273.55041504 -74.57525635]
[263.18920898 -63.72881699]
[253.16357422 -52.57144547]
[243.13795471 -41.41407394]
[233.11233521 -30.25670433]
[223.08671570 -19.09933281]
[227.08453369 -6.26279736]
[224.15162659 6.96954441]
[214.95788574 17.07565117]
[201.85417175 21.31072235]
[188.27182007 18.45214272]
[177.91059875 29.29858017]
[167.54939270 40.14501953]
[157.18817139 50.99145889]
[146.82696533 61.83789825]
[136.46574402 72.68433380]
[126.10453033 83.53077698]
[130.84233093 98.80310059]
[127.30234528 114.39665985]
[116.43467712 126.12629700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[5 19]
[6 18]
[8 16]
[9 15]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[46 83]
[47 82]
[48 81]
[49 80]
[50 79]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
