%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:49 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ZCCHC10)
} def

/sequence { (\
GGUUGGAAGCCCCGCCCUUCCGAGGAGUUUCCCAAAACCCUGCGCGGCCGGCUUUGACCGCGCUAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 16 0.031279587 ubox
1 17 0.015236343 ubox
1 21 0.025446346 ubox
1 33 0.022773334 ubox
1 39 0.973628619 ubox
1 40 0.137758754 ubox
1 41 0.013038607 ubox
1 59 0.059472651 ubox
2 15 0.031445416 ubox
2 16 0.015125356 ubox
2 20 0.025461541 ubox
2 32 0.016427472 ubox
2 38 0.978633150 ubox
2 39 0.123849916 ubox
2 40 0.013450492 ubox
2 58 0.059515629 ubox
3 14 0.029703977 ubox
3 23 0.031413077 ubox
3 35 0.145381162 ubox
3 36 0.076818206 ubox
3 37 0.969192189 ubox
3 57 0.059254648 ubox
4 14 0.017503910 ubox
4 22 0.059395843 ubox
4 34 0.240964122 ubox
4 35 0.089319404 ubox
4 36 0.921287899 ubox
4 56 0.049738780 ubox
5 12 0.028256564 ubox
5 13 0.020434871 ubox
5 17 0.025239736 ubox
5 21 0.070253636 ubox
5 31 0.008725850 ubox
5 32 0.968930566 ubox
5 33 0.221231613 ubox
5 55 0.039203501 ubox
6 11 0.028201110 ubox
6 12 0.020386013 ubox
6 15 0.003247898 ubox
6 16 0.025112909 ubox
6 20 0.070276321 ubox
6 30 0.008494390 ubox
6 31 0.982190782 ubox
6 32 0.157416217 ubox
6 54 0.028329984 ubox
6 55 0.042045922 ubox
7 19 0.070238681 ubox
7 29 0.010480997 ubox
7 30 0.994071943 ubox
7 53 0.020039531 ubox
7 54 0.051867248 ubox
8 18 0.069737157 ubox
8 28 0.011673627 ubox
8 29 0.992542233 ubox
8 30 0.006394798 ubox
8 53 0.056020449 ubox
9 15 0.023723953 ubox
9 17 0.068227201 ubox
9 28 0.994043761 ubox
9 29 0.005206937 ubox
9 52 0.059581308 ubox
10 14 0.024505688 ubox
10 25 0.020080825 ubox
10 27 0.994264246 ubox
10 51 0.058846210 ubox
11 24 0.023236026 ubox
11 25 0.933352164 ubox
11 50 0.057928055 ubox
11 51 0.009279861 ubox
12 24 0.933240848 ubox
12 25 0.341172777 ubox
12 47 0.034559988 ubox
12 50 0.012991947 ubox
13 22 0.928669797 ubox
13 24 0.341399938 ubox
13 46 0.034740552 ubox
14 21 0.901365005 ubox
14 28 0.007351556 ubox
14 45 0.034735488 ubox
14 48 0.047905296 ubox
14 49 0.005007545 ubox
15 25 0.010896165 ubox
15 27 0.007709430 ubox
15 44 0.034021765 ubox
15 47 0.047566159 ubox
16 24 0.010761564 ubox
16 25 0.028745636 ubox
16 46 0.046984274 ubox
16 47 0.008865984 ubox
17 24 0.029043618 ubox
17 46 0.010900160 ubox
18 23 0.027476605 ubox
19 26 0.005669150 ubox
20 25 0.005721979 ubox
21 42 0.018275623 ubox
21 44 0.040641815 ubox
22 41 0.009269812 ubox
22 43 0.043537359 ubox
23 41 0.093498195 ubox
24 32 0.012186007 ubox
24 33 0.011577626 ubox
24 40 0.099679380 ubox
24 41 0.008355478 ubox
25 31 0.012244569 ubox
25 32 0.011536567 ubox
25 39 0.099694538 ubox
25 40 0.009027794 ubox
26 30 0.010678312 ubox
27 38 0.099870405 ubox
28 36 0.006870855 ubox
28 37 0.099726346 ubox
29 35 0.007476841 ubox
29 36 0.097314130 ubox
30 34 0.006783402 ubox
30 35 0.084742976 ubox
40 67 0.190675254 ubox
41 65 0.143413416 ubox
41 66 0.178410001 ubox
42 63 0.995894588 ubox
42 64 0.030276420 ubox
43 62 0.998049025 ubox
44 61 0.998114656 ubox
44 63 0.007273701 ubox
45 60 0.998112118 ubox
45 62 0.007278995 ubox
46 59 0.998087843 ubox
46 61 0.006590673 ubox
46 64 0.010514064 ubox
47 58 0.996723978 ubox
47 63 0.011067430 ubox
48 62 0.011068899 ubox
49 56 0.956309767 ubox
49 60 0.013086646 ubox
50 55 0.732430176 ubox
50 59 0.014425056 ubox
51 58 0.014585564 ubox
1 39 0.9500000 lbox
2 38 0.9500000 lbox
3 37 0.9500000 lbox
4 36 0.9500000 lbox
5 32 0.9500000 lbox
6 31 0.9500000 lbox
7 30 0.9500000 lbox
8 29 0.9500000 lbox
9 28 0.9500000 lbox
10 27 0.9500000 lbox
11 25 0.9500000 lbox
12 24 0.9500000 lbox
13 22 0.9500000 lbox
14 21 0.9500000 lbox
42 63 0.9500000 lbox
43 62 0.9500000 lbox
44 61 0.9500000 lbox
45 60 0.9500000 lbox
46 59 0.9500000 lbox
47 58 0.9500000 lbox
49 56 0.9500000 lbox
50 55 0.9500000 lbox
showpage
end
%%EOF
