%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUGGCAGCUGAACAGGGGCACUGAGGUGUCGGCCGGCGGGGCAGUGGCCCGGAGCGGGGGGCGGGGGCGUUGAUC\
) } def
/len { sequence length } bind def

/coor [
[88.33242798 106.62629700]
[73.37644196 105.47805786]
[58.42045212 104.32981873]
[43.46446609 103.18157959]
[35.37915421 110.92996216]
[24.55776787 112.76479340]
[14.77572346 108.29944611]
[9.30456638 99.30210114]
[-5.51963949 97.01235962]
[-20.34384537 94.72261810]
[-35.16805267 92.43288422]
[-49.99225998 90.14314270]
[-64.81179047 95.68318176]
[-76.20880890 86.09375000]
[-91.03302002 83.80400848]
[-96.37832642 85.91418457]
[-101.44252014 85.60382843]
[-105.29066467 83.44295502]
[-107.38622284 80.30619049]
[-121.85002136 76.33147430]
[-136.31382751 72.35675049]
[-150.91329956 79.00767517]
[-165.14997864 71.61196136]
[-168.10270691 55.84297562]
[-157.50639343 43.79732513]
[-141.48962402 44.71540833]
[-132.33911133 57.89294434]
[-117.87530518 61.86766815]
[-103.41149902 65.84239197]
[-88.74327850 68.97980499]
[-73.91907501 71.26953888]
[-60.15986633 65.56572723]
[-47.70251846 75.31893921]
[-32.87831497 77.60867310]
[-18.05410767 79.89841461]
[-3.22990036 82.18815613]
[11.59430599 84.47789001]
[28.80175018 76.00289154]
[44.61270523 88.22559357]
[59.56869125 89.37383270]
[74.52468109 90.52207184]
[89.48066711 91.67031097]
[104.48066711 91.67031097]
[119.43665314 90.52207184]
[134.39263916 89.37383270]
[147.56002808 80.60284424]
[160.84223938 87.34317780]
[175.79823303 86.19493866]
[182.50192261 72.44692993]
[195.10375977 63.95631027]
[210.16340637 62.92029953]
[223.62953186 69.51723480]
[231.92965698 81.88547516]
[246.88563538 80.73723602]
[261.84164429 79.58899689]
[276.79760742 78.44075775]
[284.81561279 65.15574646]
[299.12408447 59.15183258]
[314.22116089 62.73764420]
[324.30169678 74.53435516]
[325.48950195 90.00590515]
[317.32788086 103.20315552]
[302.95510864 109.05149841]
[287.89782715 105.30212402]
[277.94586182 93.39674377]
[262.98986816 94.54498291]
[248.03387451 95.69322205]
[233.07789612 96.84146118]
[226.76304626 110.33176422]
[214.46176147 118.90697479]
[199.42045593 120.18195343]
[185.67021179 113.71450806]
[176.94647217 101.15092468]
[161.99047852 102.29916382]
[149.89283752 110.98802948]
[135.54087830 104.32981873]
[120.58489227 105.47805786]
[105.62890625 106.62629700]
[103.32779694 109.04642487]
[100.00843048 110.58379364]
[96.03714752 110.82598877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[14 31]
[15 30]
[19 29]
[20 28]
[21 27]
[43 78]
[44 77]
[45 76]
[47 74]
[48 73]
[53 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
