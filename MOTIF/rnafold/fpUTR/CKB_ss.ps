%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGCCGCGGGAGCGCGGAGCGGCCGCUGUUCGCCUGCGUCGCUCCGGGAGCUGCCGACGGACGGAGCGCCCCCGCCCCCGCCCGGCCGCCCGCCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[130.75015259 277.52191162]
[117.35702515 270.76733398]
[108.86420441 258.40319824]
[107.36584473 243.47822571]
[113.23142242 229.67260742]
[125.01459503 220.39054871]
[139.80987549 217.92077637]
[153.96803284 222.87165833]
[147.17779541 209.49658203]
[140.38757324 196.12149048]
[133.59733582 182.74641418]
[126.80711365 169.37133789]
[114.14656830 161.52531433]
[114.79861450 145.71755981]
[108.00838470 132.34246826]
[101.21815491 118.96739197]
[81.59812164 112.93407440]
[76.17050934 89.65325165]
[62.01746368 84.68422699]
[47.86441422 79.71519470]
[33.71136856 74.74617004]
[19.55832100 69.77713776]
[5.40527344 64.80810547]
[-8.74777412 59.83907700]
[-22.90082169 54.87004852]
[-32.19698334 54.96501541]
[-37.39274216 49.54181671]
[-51.39381409 44.15944672]
[-63.77490234 53.36336899]
[-79.16809082 54.38968277]
[-92.66146851 46.91089249]
[-99.94934845 33.31345367]
[-98.70619202 17.93626022]
[-89.32868958 5.68611670]
[-74.80916595 0.47200114]
[-59.78075027 3.95771861]
[-49.03895569 15.03098869]
[-46.01144409 30.15837288]
[-32.01036835 35.54074478]
[-17.93179131 40.71700287]
[-3.77874446 45.68603134]
[10.37430286 50.65505981]
[24.52734947 55.62409210]
[38.68039703 60.59312057]
[52.83344269 65.56214905]
[66.98648834 70.53118134]
[81.13954163 75.50020599]
[94.89006805 69.50662994]
[100.88364410 55.75610352]
[106.87722015 42.00557327]
[105.29857635 26.26332283]
[117.47682953 17.68781471]
[123.47040558 3.93728423]
[129.46397400 -9.81324577]
[130.05101013 -19.09134102]
[135.84063721 -23.87539291]
[142.23530579 -37.44404602]
[148.62995911 -51.01269913]
[144.57942200 -66.53599548]
[154.30552673 -79.29460907]
[170.34724426 -79.50122833]
[180.39874268 -66.99735260]
[176.74937439 -51.37488174]
[162.19860840 -44.61804199]
[155.80395508 -31.04938698]
[149.40930176 -17.48073387]
[143.21450806 -3.81967092]
[137.22093201 9.93085861]
[131.22735596 23.68138885]
[133.23471069 38.44010925]
[120.62774658 47.99914932]
[114.63417053 61.74967957]
[108.64059448 75.50020599]
[121.68869019 94.04012299]
[114.59323883 112.17716217]
[121.38346863 125.55224609]
[128.17369080 138.92732239]
[141.31991577 147.73001099]
[140.18218994 162.58110046]
[146.97242737 175.95619202]
[153.76264954 189.33126831]
[160.55288696 202.70634460]
[167.34310913 216.08142090]
[176.17080688 222.05851746]
[177.84498596 231.36975098]
[187.89283752 242.50709534]
[197.94070435 253.64443970]
[207.98857117 264.78176880]
[222.97758484 269.84536743]
[225.75817871 284.47811890]
[235.80604553 295.61547852]
[251.60035706 296.17675781]
[262.31045532 307.79870605]
[261.58221436 323.58618164]
[249.84770203 334.17282104]
[234.06878662 333.27770996]
[223.60681152 321.43191528]
[224.66870117 305.66333008]
[214.62083435 294.52600098]
[200.35050964 290.25903320]
[196.85122681 274.82965088]
[186.80335999 263.69229126]
[176.75549316 252.55496216]
[166.70764160 241.41761780]
[166.24816895 256.41058350]
[158.63345337 269.33404541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[14 77]
[15 76]
[16 75]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[27 39]
[28 38]
[48 73]
[49 72]
[50 71]
[52 69]
[53 68]
[54 67]
[56 66]
[57 65]
[58 64]
[85 104]
[86 103]
[87 102]
[88 101]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
