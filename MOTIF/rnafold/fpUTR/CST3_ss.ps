%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGUUCCGGAAAAGGGAGUGCAGGCCGCGGUGGGGUGGGGCGGCGAAGGCCGGAAGGGAUAAAACCGCAGUCGCCGGCCUCGCGGGGCUCACGGCCUCGCCUCGGUAUCGCAGCGGGUCCUCUCUAUCUAGCUCCAGCCUCUCGCCUGCGCCCCACUCCCCGCGUCCCGCGUCCUAGCCGACC\
) } def
/len { sequence length } bind def

/coor [
[45.60370255 683.41662598]
[32.44992828 691.09118652]
[17.31114769 692.74560547]
[2.81024337 688.09332275]
[-8.54041481 677.94036865]
[-14.77425671 664.04577637]
[-14.81123066 648.81695557]
[-8.64493179 634.89227295]
[2.65629268 624.68432617]
[17.13443565 619.96166992]
[18.64387321 605.03784180]
[20.15331078 590.11395264]
[11.17746639 583.03179932]
[6.69739962 572.38244629]
[7.93661308 560.77496338]
[14.70157909 551.11480713]
[25.40127754 545.87597656]
[27.41120911 531.01123047]
[29.42114067 516.14654541]
[31.43107224 501.28179932]
[29.20701599 494.21719360]
[33.60165787 486.18502808]
[35.86102295 471.35617065]
[38.12038422 456.52731323]
[32.38839340 442.77981567]
[42.11605835 430.30252075]
[44.37542343 415.47363281]
[38.64343262 401.72613525]
[48.37109756 389.24884033]
[50.63045883 374.41998291]
[52.88982391 359.59112549]
[55.14918518 344.76223755]
[57.40855026 329.93338013]
[55.30348587 322.83242798]
[59.83244324 314.87521362]
[62.34059906 300.08639526]
[64.84875488 285.29757690]
[67.35691071 270.50875854]
[69.86506653 255.71994019]
[72.37322235 240.93112183]
[74.88138580 226.14230347]
[77.38954163 211.35348511]
[79.89769745 196.56466675]
[82.40585327 181.77584839]
[84.54057312 166.92852783]
[86.30050659 152.03213501]
[88.06044006 137.13574219]
[89.82037354 122.23934174]
[91.58030701 107.34294891]
[93.21504974 92.43228912]
[94.72448730 77.50843048]
[96.23392487 62.58457184]
[97.74336243 47.66071320]
[91.43403625 33.15199280]
[100.41279602 21.26792145]
[101.92223358 6.34406042]
[103.43167114 -8.57979965]
[104.06148529 -23.56657219]
[103.80949402 -38.56445312]
[103.55751038 -53.56233978]
[103.30551910 -68.56021881]
[103.05353546 -83.55810547]
[90.47858429 -89.71042633]
[81.82605743 -100.63127136]
[78.74220276 -114.15090179]
[81.77404785 -127.61443329]
[90.27338409 -138.40318298]
[102.53430176 -144.44398499]
[102.53430176 -159.44398499]
[102.53430176 -174.44398499]
[102.53430176 -189.44398499]
[94.79700470 -203.24415588]
[102.53430176 -215.97142029]
[102.53430176 -230.97142029]
[91.66710663 -247.93362427]
[102.00315857 -264.26110840]
[101.49925232 -279.25262451]
[100.99534607 -294.24417114]
[100.49144745 -309.23568726]
[99.98754120 -324.22723389]
[92.27422333 -329.71481323]
[88.02490997 -338.01919556]
[88.08486938 -347.20962524]
[92.31357574 -355.21414185]
[99.64492798 -360.28662109]
[99.89691162 -375.28451538]
[100.14890289 -390.28237915]
[100.40088654 -405.28027344]
[100.65287781 -420.27816772]
[100.90486145 -435.27603149]
[101.15685272 -450.27392578]
[101.40883636 -465.27182007]
[95.62943268 -481.21026611]
[109.34513092 -491.17602539]
[122.71829224 -480.75515747]
[116.40672302 -465.01980591]
[116.15473175 -450.02194214]
[115.90274811 -435.02404785]
[115.65075684 -420.02618408]
[115.39877319 -405.02828979]
[115.14678192 -390.03039551]
[114.89479828 -375.03253174]
[114.64280701 -360.03463745]
[126.21820068 -342.96072388]
[114.97907257 -324.73114014]
[115.48297882 -309.73959351]
[115.98688507 -294.74807739]
[116.49078369 -279.75653076]
[116.99468994 -264.76498413]
[125.07414246 -258.46759033]
[128.41302490 -248.55102539]
[125.67536926 -238.22430420]
[117.53430176 -230.97142029]
[117.53430176 -215.97142029]
[125.27160645 -203.24415588]
[117.53430176 -189.44398499]
[117.53430176 -174.44398499]
[117.53430176 -159.44398499]
[117.53430176 -144.44398499]
[131.71496582 -136.71665955]
[140.11723328 -122.81545258]
[140.37004089 -106.48037720]
[132.30995178 -92.16228485]
[118.05141449 -83.81008911]
[118.30340576 -68.81221008]
[118.55538940 -53.81432724]
[118.80738068 -38.81644058]
[119.05936432 -23.81855965]
[129.53550720 -34.55403137]
[144.44659424 -36.18485641]
[156.99560547 -27.96764755]
[161.46221924 -13.64810658]
[155.81042480 0.24639326]
[142.61648560 7.38222933]
[127.89470673 4.50662565]
[118.35552979 -7.07036209]
[116.84609222 7.85349798]
[115.33665466 22.77735710]
[121.75394440 36.21862411]
[112.66722107 49.17015076]
[111.15778351 64.09400940]
[109.64834595 79.01786804]
[108.13890839 93.94172668]
[110.52913666 101.65876770]
[106.47669983 109.10288239]
[104.71677399 123.99927521]
[102.95684052 138.89567566]
[101.19690704 153.79206848]
[99.43697357 168.68846130]
[101.51858521 173.52076721]
[101.52377319 178.19749451]
[99.86322784 181.94941711]
[97.19467163 184.28401184]
[94.68651581 199.07283020]
[92.17835999 213.86164856]
[89.67020416 228.65046692]
[87.16204071 243.43928528]
[84.65388489 258.22811890]
[82.14572906 273.01693726]
[79.63757324 287.80575562]
[77.12941742 302.59457397]
[74.62126160 317.38339233]
[72.23741913 332.19274902]
[69.97805023 347.02160645]
[67.71868896 361.85046387]
[65.45932770 376.67935181]
[63.19996262 391.50820923]
[68.77034760 406.31634521]
[59.20428848 417.73300171]
[56.94492722 432.56185913]
[62.51531219 447.37002563]
[52.94924927 458.78665161]
[50.68988800 473.61553955]
[48.43052292 488.44439697]
[46.29580307 503.29171753]
[44.28586960 518.15643311]
[42.27593994 533.02117920]
[40.26600647 547.88592529]
[52.31318665 562.48602295]
[49.92557526 580.94219971]
[35.07717133 591.62341309]
[33.56773376 606.54724121]
[32.05829620 621.47113037]
[45.29757690 628.99713135]
[54.32591629 641.26129150]
[57.57910156 656.13867188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 183]
[11 182]
[12 181]
[17 178]
[18 177]
[19 176]
[20 175]
[22 174]
[23 173]
[24 172]
[26 170]
[27 169]
[29 167]
[30 166]
[31 165]
[32 164]
[33 163]
[35 162]
[36 161]
[37 160]
[38 159]
[39 158]
[40 157]
[41 156]
[42 155]
[43 154]
[44 153]
[45 149]
[46 148]
[47 147]
[48 146]
[49 145]
[50 143]
[51 142]
[52 141]
[53 140]
[55 138]
[56 137]
[57 136]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
[68 119]
[69 118]
[70 117]
[71 116]
[73 114]
[74 113]
[76 109]
[77 108]
[78 107]
[79 106]
[80 105]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
