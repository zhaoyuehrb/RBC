%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGCUGGAGGUGGGCGCGGGGCGGUGCGGUGCGGUGCGCGCGGGGCGGUGCCGCGGCGGCGGAGGGAGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[97.06810760 111.62557220]
[86.14196014 121.90270233]
[75.21581268 132.17982483]
[70.46477509 147.27082825]
[55.89295959 150.35488892]
[44.96681213 160.63201904]
[34.04066467 170.90913391]
[23.11451912 181.18626404]
[15.71973896 196.44252014]
[-0.98738211 193.56008911]
[-2.84258533 176.70794678]
[12.83739281 170.26011658]
[23.76354027 159.98298645]
[34.68968582 149.70587158]
[45.61583328 139.42874146]
[49.58535767 125.07283020]
[64.93868256 121.25367737]
[75.86483002 110.97655487]
[86.79097748 100.69943237]
[93.02220154 87.05494690]
[93.63403320 72.06742859]
[86.46605682 57.96315002]
[94.71604919 45.56206512]
[95.32788086 30.57454681]
[95.93970490 15.58703041]
[96.55153656 0.59951311]
[89.38356018 -13.50476837]
[97.63355255 -25.90585518]
[98.24538422 -40.89337158]
[98.85720825 -55.88088989]
[88.55792236 -72.98449707]
[98.92496490 -89.10224915]
[98.31314087 -104.08976746]
[97.70130920 -119.07728577]
[97.08947754 -134.06480408]
[96.47765350 -149.05232239]
[89.79029083 -164.63165283]
[102.90952301 -175.37045288]
[116.86042023 -165.73672485]
[111.46517181 -149.66413879]
[112.07699585 -134.67663574]
[112.68882751 -119.68910980]
[113.30065918 -104.70159149]
[113.91248322 -89.71408081]
[122.26226044 -83.24382019]
[125.59292603 -72.98449707]
[122.51131439 -62.41498947]
[113.84472656 -55.26906204]
[113.23289490 -40.28154373]
[112.62107086 -25.29402542]
[119.83280182 -12.26175213]
[111.53905487 1.21134186]
[110.92722321 16.19885826]
[110.31539154 31.18637657]
[109.70356750 46.17389297]
[116.91529846 59.20616531]
[108.62155151 72.67926025]
[108.00971985 87.66677856]
[113.67922211 101.55406952]
[124.60536957 111.83119202]
[135.53150940 122.10831451]
[146.45765686 132.38543701]
[157.38380432 142.66256714]
[172.89057922 140.64413452]
[186.03897095 149.10899353]
[190.62071228 164.06030273]
[184.47244263 178.43852234]
[170.49719238 185.45466614]
[155.29364014 181.79595947]
[146.04045105 169.18991089]
[147.10668945 153.58871460]
[136.18054199 143.31158447]
[125.25438690 133.03446960]
[114.32823944 122.75733948]
[103.40209198 112.48020935]
[101.19805908 112.56327057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[5 15]
[6 14]
[7 13]
[8 12]
[20 58]
[21 57]
[23 55]
[24 54]
[25 53]
[26 52]
[28 50]
[29 49]
[30 48]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
