%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUCCUGGGAGAGGACAGAAAACAACUGGGACUCCUCAGCCCCCGGCAGCUCCCAGUGCCCAGCCACCCACAACACAACCCAAAGCCUUCUAGACAAGCUCAGUGGAAUCUGAAGGGCCCACCCC\
) } def
/len { sequence length } bind def

/coor [
[247.62709045 150.02775574]
[239.43571472 131.85691833]
[235.75918579 112.25971985]
[220.76370239 111.89160156]
[205.76821899 111.52348328]
[192.85490417 118.94610596]
[179.24876404 110.87246704]
[164.25328064 110.50434875]
[149.25779724 110.13623047]
[134.26231384 109.76811218]
[119.26683807 109.39999390]
[104.27135468 109.03187561]
[89.40781403 111.05058289]
[75.05371094 115.40485382]
[60.69960785 119.75912476]
[46.34550095 124.11339569]
[31.99139786 128.46766663]
[17.86823654 133.52101135]
[4.01004314 139.26126099]
[-9.84815025 145.00151062]
[-14.37759018 159.96875000]
[-27.49630356 168.47952271]
[-43.01003647 166.51531982]
[-53.59367752 155.00357056]
[-54.24995422 139.37976074]
[-44.66899490 127.02098846]
[-29.37463379 123.76268768]
[-15.58840179 131.14332581]
[-1.73020840 125.40306854]
[12.12798500 119.66281891]
[13.30990791 117.01005554]
[15.66975403 114.69265747]
[19.07496643 113.18339539]
[23.21655273 112.89411926]
[27.63712692 114.11355591]
[41.99123383 109.75928497]
[56.34533691 105.40502167]
[70.69944000 101.05075073]
[85.05355072 96.69647980]
[86.33576202 89.30689240]
[90.18240356 67.13814545]
[78.13429260 58.20265961]
[66.08617401 49.26716995]
[49.76226807 44.68827438]
[49.64330673 27.73474503]
[65.90135956 22.92723083]
[75.02166748 37.21905518]
[87.06977844 46.15454483]
[99.11789703 55.09003448]
[105.33641052 64.82457733]
[108.27227020 75.10101318]
[107.96621704 85.09932709]
[104.63947296 94.03639221]
[119.63495636 94.40451050]
[134.63043213 94.77262878]
[149.62591553 95.14074707]
[164.62139893 95.50886536]
[179.61688232 95.87698364]
[193.60278320 88.48068237]
[206.13633728 96.52799988]
[221.13182068 96.89611816]
[236.12730408 97.26423645]
[238.12788391 86.35135651]
[241.54936218 75.79923248]
[246.33154297 65.79196930]
[252.39048767 56.50410843]
[259.62002563 48.09757996]
[267.89355469 40.71886826]
[277.06625366 34.49647141]
[286.97778320 29.53865051]
[297.45477295 25.93156052]
[308.31414795 23.73774719]
[319.36624146 22.99505615]
[330.41796875 23.71599197]
[341.27639771 25.88749886]
[351.75204468 29.47119713]
[361.66213989 34.40407181]
[370.83380127 40.59956360]
[379.10714722 47.94910049]
[386.33804321 56.32400513]
[392.40060425 65.57772064]
[397.18930054 75.54842377]
[400.62097168 86.06179047]
[402.63610840 96.93409729]
[403.20004272 107.97541809]
[402.30334473 118.99291992]
[399.96212769 129.79426575]
[413.95703125 135.19270325]
[427.95193481 140.59112549]
[441.94680786 145.98954773]
[455.94171143 151.38796997]
[471.60177612 149.13574219]
[480.69161987 160.93507385]
[494.68652344 166.33349609]
[508.68139648 171.73191833]
[522.67633057 177.13034058]
[536.69665527 167.75906372]
[553.37652588 168.54408264]
[566.19799805 178.98176575]
[570.26776123 194.83502197]
[584.39093018 199.88838196]
[601.34106445 199.53152466]
[606.37628174 215.72050476]
[592.21386719 225.04048157]
[579.33752441 214.01153564]
[565.21441650 208.95819092]
[554.88043213 217.50263977]
[541.56256104 219.81723022]
[528.74737549 215.18675232]
[519.84411621 204.72857666]
[517.27789307 191.12524414]
[503.28298950 185.72680664]
[489.28808594 180.32838440]
[475.29321289 174.92996216]
[460.63412476 177.56832886]
[450.54327393 165.38285828]
[436.54840088 159.98443604]
[422.55349731 154.58601379]
[408.55862427 149.18759155]
[394.56372070 143.78916931]
[383.75183105 160.45606995]
[369.30914307 174.10813904]
[352.04800415 183.97280884]
[332.94039917 189.49063110]
[313.06323242 190.34709167]
[293.53759766 186.49043274]
[275.46563721 178.13488770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[18 30]
[19 29]
[20 28]
[41 49]
[42 48]
[43 47]
[87 120]
[88 119]
[89 118]
[90 117]
[91 116]
[93 114]
[94 113]
[95 112]
[96 111]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
