%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAUGGAAGAUUCAGCUGAAAUCAGAGAGGUGAAGCCAGUUUCCCAGGGUAACAUAGUGAGGCACUGAAAGAAAGGAGACUGCACUGGAGCCCAGGUCCCUGGGCUCCCCAGAGCUCCUUACUCUUCCUCCUCCUCAGCAGUCUUGAGACCCCACAACCUCCAGCCGGAGGCCUGAAGCAUGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[70.02215576 155.72692871]
[58.53582382 165.37390137]
[44.22488403 160.87980652]
[40.31572723 146.39814758]
[50.42156219 135.31300354]
[56.55296326 121.62337494]
[49.39751434 119.37625122]
[37.45354462 128.45046997]
[25.50957680 137.52470398]
[19.20165443 152.03402710]
[4.38670969 153.57243347]
[-7.55726004 162.64666748]
[-19.50123024 171.72088623]
[-31.44519997 180.79512024]
[-43.38916779 189.86933899]
[-45.90852356 202.53042603]
[-56.05778503 209.84130859]
[-68.06906891 208.32014465]
[-80.16067505 217.19670105]
[-92.25227356 226.07325745]
[-92.74983215 239.54328918]
[-100.80140686 250.10977173]
[-113.28534698 254.04612732]
[-125.57057953 250.12727356]
[-137.80654907 258.80374146]
[-150.04251099 267.48022461]
[-154.14111328 282.99090576]
[-168.88076782 289.32510376]
[-182.95446777 281.62377930]
[-185.56608582 265.79470825]
[-174.71218872 253.98062134]
[-158.71897888 255.24426270]
[-146.48301697 246.56779480]
[-134.24705505 237.89131165]
[-132.14208984 221.21348572]
[-118.35987091 211.01083374]
[-101.12882233 213.98164368]
[-89.03722382 205.10510254]
[-76.94562531 196.22854614]
[-70.77309418 179.80865479]
[-52.46339417 177.92536926]
[-40.51942444 168.85115051]
[-28.57545662 159.77691650]
[-16.63148689 150.70269775]
[-4.68751669 141.62846375]
[0.76609236 127.76818848]
[16.43535042 125.58073425]
[28.37932014 116.50650787]
[40.32328796 107.43228149]
[95.23773193 80.43000031]
[98.66139221 65.82593536]
[102.08505249 51.22187805]
[105.50872040 36.61782074]
[97.44281006 23.29194832]
[101.12292480 8.53012657]
[113.87681580 0.92263776]
[117.30047607 -13.68142128]
[103.45307159 -28.07514000]
[101.10005951 -47.76440048]
[111.02063751 -64.76736450]
[129.05364990 -72.29637146]
[131.50976562 -87.09391785]
[133.96588135 -101.89147186]
[136.42198181 -116.68901825]
[138.87809753 -131.48657227]
[126.00271606 -141.84754944]
[120.13817596 -157.19810486]
[122.79497528 -173.31947327]
[133.15545654 -185.83186340]
[148.32218933 -191.38433838]
[150.53457642 -206.22027588]
[152.74697876 -221.05622864]
[154.83729553 -235.90986633]
[156.80537415 -250.78019714]
[150.94561768 -265.47625732]
[160.28591919 -277.07830811]
[162.25401306 -291.94863892]
[164.22209167 -306.81896973]
[166.19017029 -321.68930054]
[168.15826416 -336.55963135]
[170.12634277 -351.42996216]
[168.14793396 -360.36541748]
[172.25103760 -366.52789307]
[174.46343994 -381.36386108]
[163.06996155 -389.49468994]
[156.32666016 -401.68490601]
[155.50114441 -415.52511597]
[160.69770813 -428.30780029]
[170.84817505 -437.55697632]
[183.93087769 -441.50769043]
[186.38699341 -456.30523682]
[188.84309387 -471.10278320]
[191.29920959 -485.90036011]
[193.75532532 -500.69790649]
[196.21142578 -515.49542236]
[198.66754150 -530.29302979]
[201.12364197 -545.09057617]
[203.57975769 -559.88812256]
[197.31288147 -575.04260254]
[207.51681519 -587.88049316]
[223.69462585 -585.19525146]
[229.20397949 -569.74926758]
[218.37730408 -557.43200684]
[215.92120361 -542.63446045]
[213.46508789 -527.83691406]
[211.00898743 -513.03936768]
[208.55287170 -498.24179077]
[206.09675598 -483.44424438]
[203.64065552 -468.64669800]
[201.18453979 -453.84912109]
[198.72843933 -439.05157471]
[211.45341492 -429.10501099]
[217.46510315 -414.01330566]
[215.03666687 -397.85598755]
[204.73663330 -385.05200195]
[189.29937744 -379.15145874]
[187.08699036 -364.31549072]
[184.99667358 -349.46185303]
[183.02859497 -334.59155273]
[181.06050110 -319.72122192]
[179.09242249 -304.85089111]
[177.12432861 -289.98056030]
[175.15625000 -275.11022949]
[181.15676880 -261.47781372]
[171.67570496 -248.81210327]
[169.70761108 -233.94178772]
[171.95059204 -226.88623047]
[167.58293152 -218.84382629]
[165.37052917 -204.00788879]
[163.15812683 -189.17193604]
[174.39251709 -181.39027405]
[181.20764160 -169.46832275]
[182.22242737 -155.70707703]
[177.18168640 -142.79104614]
[167.01710510 -133.26452637]
[153.67564392 -129.03045654]
[151.21954346 -114.23291016]
[148.76342773 -99.43536377]
[146.30731201 -84.63780975]
[143.85121155 -69.84025574]
[152.58311462 -64.22889709]
[158.96726990 -55.99649429]
[162.25254822 -46.06997681]
[162.03855896 -35.57784271]
[158.32429504 -25.72188950]
[151.51110840 -17.63956642]
[142.35957336 -12.27269363]
[131.90454102 -10.25776005]
[128.48088074 4.34629917]
[136.52487183 16.82948112]
[133.26083374 31.68884468]
[120.11277771 40.04148102]
[116.68911743 54.64554214]
[113.26545715 69.24960327]
[109.84178925 83.85366058]
[119.10040283 72.05204010]
[133.88265991 69.50553894]
[146.55647278 77.52892303]
[150.57830811 91.97969818]
[143.87167358 105.39689636]
[129.89924622 110.85319519]
[115.87347412 105.53011322]
[126.34842682 116.26675415]
[136.82337952 127.00338745]
[147.29833984 137.74002075]
[163.22302246 141.65621948]
[167.53335571 157.47875977]
[155.79524231 168.93078613]
[140.08384705 164.23141479]
[136.56170654 148.21498108]
[126.08674622 137.47834778]
[115.61179352 126.74170685]
[105.13684082 116.00507355]
[92.29276276 123.75295258]
[96.90454865 138.02639771]
[101.51632690 152.29985046]
[106.12811279 166.57330322]
[120.91909027 171.26443481]
[130.10075378 183.77349854]
[130.14256287 199.29051208]
[121.02845001 211.84887695]
[106.26296234 216.61962891]
[91.52375031 211.76834106]
[82.47832489 199.16040039]
[82.60484314 183.64384460]
[91.85466003 171.18508911]
[87.24287415 156.91163635]
[82.63109589 142.63818359]
[78.01931000 128.36473083]
[70.86386108 126.11761475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 49]
[8 48]
[9 47]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[18 39]
[19 38]
[20 37]
[24 34]
[25 33]
[26 32]
[50 155]
[51 154]
[52 153]
[53 152]
[56 149]
[57 148]
[61 140]
[62 139]
[63 138]
[64 137]
[65 136]
[70 130]
[71 129]
[72 128]
[73 126]
[74 125]
[76 123]
[77 122]
[78 121]
[79 120]
[80 119]
[81 118]
[83 117]
[84 116]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
[162 173]
[163 172]
[164 171]
[165 170]
[174 189]
[175 188]
[176 187]
[177 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
