%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCAGGGCGACAGUUACAGGCAAAGAAGAGGAAGUGGUAGCACUAGCUGUCGCUCCACAGGCGAGCAGGGCAGGCGUGCGGGCGGGUGGGUGGUGGAGGCUGCGAGGGUGCACGGCCGGCCCUGGGCAGGCGGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[107.30442810 196.92996216]
[108.12351990 183.63294983]
[116.59435272 173.09904480]
[113.27981567 158.46983337]
[109.96527863 143.84062195]
[106.65074158 129.21141052]
[80.99673462 122.50579071]
[71.09225464 98.39398956]
[56.24928284 100.55878448]
[41.40631485 102.72357178]
[26.56334877 104.88836670]
[11.72038174 107.05315399]
[-3.12258506 109.21794891]
[-17.96555328 111.38274384]
[-32.80852127 113.54753113]
[-47.65148544 115.71232605]
[-62.49445343 117.87711334]
[-48.86407089 124.13911438]
[-37.93823624 134.41658020]
[-30.85511208 147.63888550]
[-28.35255051 162.42864990]
[-30.69124985 177.24520874]
[-37.62758255 190.54510498]
[-48.43898773 200.94287109]
[-61.99922180 207.35536194]
[-76.89569855 209.11457825]
[-91.57664490 206.03726196]
[-104.51271820 198.44398499]
[-114.35636139 187.12573242]
[-120.08214569 173.26155090]
[-121.09361267 158.29570007]
[-117.28539276 143.78717041]
[-109.05419159 131.24732971]
[-97.25746918 121.98249817]
[-83.12165833 116.95732880]
[-97.71303558 113.48002625]
[-112.30442047 110.00272369]
[-126.89579773 106.52542114]
[-142.44871521 111.72529602]
[-154.54739380 100.65487671]
[-150.74574280 84.70246124]
[-134.95457458 80.27852631]
[-123.41849518 91.93403625]
[-108.82711792 95.41133881]
[-94.23573303 98.88864136]
[-79.64435577 102.36594391]
[-64.65924835 103.03414917]
[-49.81628036 100.86935425]
[-34.97331238 98.70456696]
[-20.13034439 96.53977203]
[-5.28737688 94.37498474]
[9.55559063 92.21018982]
[24.39855766 90.04539490]
[39.24152374 87.88060760]
[54.08449173 85.71581268]
[68.92745972 83.55102539]
[78.61187744 72.09623718]
[78.27769470 57.09996414]
[70.23485565 43.47559357]
[77.68669128 30.57910347]
[77.35250092 15.58282566]
[69.30966949 1.95845783]
[76.76149750 -10.93803406]
[76.42731476 -25.93431091]
[65.28742981 -36.82195282]
[65.16214752 -52.03507233]
[75.61050415 -62.58815002]
[75.27632141 -77.58442688]
[68.87860107 -93.28491974]
[82.19445038 -103.77894592]
[95.96455383 -93.88851929]
[90.27259827 -77.91860962]
[90.60678101 -62.92233658]
[101.51486969 -52.84517288]
[102.06740570 -37.64157486]
[91.42359161 -26.26849556]
[91.75777435 -11.27221870]
[99.77671051 1.27951562]
[92.34877777 15.24864197]
[92.68296814 30.24491882]
[100.70189667 42.79665375]
[93.27397156 56.76577759]
[93.60815430 71.76205444]
[110.43801880 72.63529205]
[124.12052917 82.80271149]
[129.94326782 99.03043365]
[144.93489075 98.52920532]
[159.92651367 98.02798462]
[174.91813660 97.52675629]
[188.45205688 89.33264160]
[201.43075562 96.64034271]
[216.42239380 96.13911438]
[231.41401672 95.63789368]
[244.94793701 87.44377899]
[257.92663574 94.75148010]
[272.91827393 94.25025177]
[287.90988159 93.74903107]
[294.93969727 85.31622314]
[305.25201416 82.25166321]
[315.32443237 85.34744263]
[321.85583496 93.33357239]
[336.85488892 93.50067139]
[351.85397339 93.66777039]
[364.28295898 83.52383423]
[379.93206787 87.05727386]
[386.79663086 101.55753326]
[379.61071777 115.90125275]
[363.88677979 119.08516693]
[351.68685913 108.66683960]
[336.68780518 108.49974060]
[321.68872070 108.33264160]
[305.66213989 119.06622314]
[288.41110229 108.74065399]
[273.41949463 109.24187469]
[258.42785645 109.74310303]
[245.96624756 117.90136719]
[231.91523743 110.62951660]
[216.92361450 111.13074493]
[201.93199158 111.63196564]
[189.47036743 119.79022980]
[175.41935730 112.51837921]
[160.42773438 113.01960754]
[145.43611145 113.52082825]
[130.44448853 114.02205658]
[121.27996063 125.89687347]
[124.59449005 140.52609253]
[127.90902710 155.15530396]
[131.22357178 169.78451538]
[146.16780090 178.80319214]
[149.93142700 195.50233459]
[140.67202759 209.49790955]
[144.31167603 224.04965210]
[147.95130920 238.60137939]
[159.73460388 250.00691223]
[155.48686218 265.84637451]
[139.57778931 269.82550049]
[128.37327576 257.85092163]
[133.39956665 242.24102783]
[129.75993347 227.68928528]
[126.12030029 213.13754272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 128]
[4 127]
[5 126]
[6 125]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[35 46]
[36 45]
[37 44]
[38 43]
[57 83]
[58 82]
[60 80]
[61 79]
[63 77]
[64 76]
[67 73]
[68 72]
[86 124]
[87 123]
[88 122]
[89 121]
[91 119]
[92 118]
[93 117]
[95 115]
[96 114]
[97 113]
[101 111]
[102 110]
[103 109]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
