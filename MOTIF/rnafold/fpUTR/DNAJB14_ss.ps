%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCCCGGGCCGUCGCAGCCGCUGCCGCGGUCCCCUGCGCUCCUCCCCGCUGCCGCCGCACGCCCCCAGCCGGUCCCGCCUCGCCUCCUCCGCGGCGGCGGCUUCCGCCCUUCUUAGCUGCGCUGCCGGAGGAAACGGAAGAAGGAGCAAGCU\
) } def
/len { sequence length } bind def

/coor [
[55.48948288 234.82160950]
[41.00961685 230.90580750]
[30.33347702 220.36920166]
[26.22752571 205.94209290]
[29.75684357 191.36085510]
[17.94909096 200.61164856]
[15.90415573 216.05366516]
[3.79763460 225.26705933]
[-10.91136932 223.22236633]
[-22.71912193 232.47314453]
[-34.52687454 241.72393799]
[-46.24088287 251.09313965]
[-57.85995483 260.57983398]
[-69.47902679 270.06649780]
[-81.09810638 279.55319214]
[-86.89436340 294.27438354]
[-101.64639282 296.33035278]
[-113.26547241 305.81701660]
[-124.88454437 315.30371094]
[-136.50361633 324.79037476]
[-144.94871521 339.49130249]
[-161.41293335 335.44586182]
[-162.08334351 318.50515747]
[-145.99029541 313.17129517]
[-134.37123108 303.68463135]
[-122.75215149 294.19793701]
[-111.13307190 284.71127319]
[-106.16788483 270.66860962]
[-90.58478546 267.93411255]
[-78.96571350 258.44741821]
[-67.34663391 248.96075439]
[-55.72756195 239.47406006]
[-52.51692581 232.76918030]
[-43.77765656 229.91618347]
[-31.96990395 220.66540527]
[-20.16215324 211.41461182]
[-18.62734032 196.64370728]
[-6.78438091 187.09388733]
[8.69830799 188.80389404]
[20.50605965 179.55310059]
[31.32409668 169.16224670]
[41.04282761 157.73655701]
[50.76155853 146.31086731]
[60.48028946 134.88519287]
[70.19902039 123.45950317]
[79.91774750 112.03382111]
[75.58396912 101.45014954]
[76.72293854 89.57149506]
[83.52996826 79.17124939]
[94.82690430 72.88809967]
[108.24660492 72.56424713]
[107.94454956 57.56728745]
[107.64249420 42.57033157]
[107.34043884 27.57337189]
[107.03838348 12.57641315]
[106.73632812 -2.42054510]
[106.43427277 -17.41750336]
[106.13221741 -32.41446304]
[105.83016205 -47.41141891]
[105.52810669 -62.40837860]
[105.22605133 -77.40533447]
[92.09735870 -81.24530792]
[80.60365295 -88.63054657]
[71.67722321 -98.95068359]
[66.03889465 -111.35777283]
[64.13985443 -124.83593750]
[66.12555695 -138.28456116]
[71.82461548 -150.60815430]
[80.76354980 -160.80560303]
[92.20613861 -168.05149841]
[105.21400452 -171.76287842]
[105.51605988 -186.75984192]
[96.25219727 -202.64332581]
[105.84214783 -217.31105042]
[105.84214783 -232.31105042]
[105.84214783 -247.31105042]
[99.79580688 -263.15017700]
[113.34214783 -273.34494019]
[126.88848877 -263.15017700]
[120.84214783 -247.31105042]
[120.84214783 -232.31105042]
[120.84214783 -217.31105042]
[129.18850708 -208.50564575]
[129.27726746 -195.97192383]
[120.51302338 -186.45777893]
[120.21096802 -171.46081543]
[135.63157654 -165.85131836]
[148.23298645 -155.30116272]
[156.49206543 -141.06283569]
[159.40277100 -124.83593750]
[156.59870911 -108.56432343]
[148.39910889 -94.20326996]
[135.77265930 -83.48450470]
[120.22300720 -77.70738983]
[120.52506256 -62.71043396]
[120.82711792 -47.71347427]
[121.12917328 -32.71651840]
[121.43122864 -17.71955872]
[121.73328400 -2.72260070]
[122.03533936 12.27435780]
[122.33739471 27.27131653]
[122.63945007 42.26827621]
[122.94150543 57.26523209]
[123.24356079 72.26219177]
[132.49435425 84.06994629]
[146.98323059 87.95223236]
[161.47212219 91.83451843]
[175.96101379 95.71679688]
[190.44989014 99.59908295]
[209.61271667 93.46478271]
[222.76028442 107.59761047]
[237.39375305 110.89333344]
[252.02720642 114.18906403]
[266.66067505 117.48479462]
[281.29412842 120.78052521]
[298.70962524 114.88098145]
[311.16268921 127.21104431]
[325.85955811 130.21142578]
[340.55642700 133.21180725]
[355.25326538 136.21220398]
[371.98171997 133.45628357]
[379.26083374 148.76808167]
[366.56250000 160.00143433]
[352.25289917 150.90905762]
[337.55603027 147.90867615]
[322.85916138 144.90829468]
[308.16232300 141.90789795]
[297.86538696 148.32427979]
[285.56719971 145.90417480]
[277.99841309 135.41398621]
[263.36492920 132.11825562]
[248.73147583 128.82252502]
[234.09802246 125.52679443]
[219.46455383 122.23107147]
[211.29290771 128.48190308]
[200.80799866 129.18690491]
[191.49029541 123.86814880]
[186.56761169 114.08797455]
[172.07872009 110.20568848]
[157.58984375 106.32340240]
[143.10095215 102.44111633]
[128.61206055 98.55883026]
[121.95336914 115.55025482]
[107.14262390 124.12200165]
[91.34343719 121.75254822]
[81.62470245 133.17823792]
[71.90597534 144.60391235]
[62.18724442 156.02960205]
[52.46851349 167.45529175]
[42.74978256 178.88096619]
[57.45894623 175.94149780]
[71.70938873 180.62390137]
[81.80845642 191.71484375]
[85.13921356 206.34036255]
[80.83858490 220.71063232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[9 36]
[10 35]
[11 34]
[12 32]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[19 25]
[20 24]
[41 150]
[42 149]
[43 148]
[44 147]
[45 146]
[46 145]
[51 104]
[52 103]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[71 86]
[72 85]
[74 82]
[75 81]
[76 80]
[105 142]
[106 141]
[107 140]
[108 139]
[109 138]
[111 134]
[112 133]
[113 132]
[114 131]
[115 130]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
