%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCGGGCACGGCUUCCGGCGUCCUUCCCUCUCAGGGAAGCUCCAGCUGUCCCUCCCGCAGUUGGCCCUGUGGUGUUCCGAAGCCGGUUACGUACGGCCUGAGGGCCAGGCGAACCUCAGGCUCUUUGUCCUACUAAAAAGCGCAGCACA\
) } def
/len { sequence length } bind def

/coor [
[70.56491089 245.75724792]
[69.92852020 230.70591736]
[72.65782928 215.89042664]
[78.61595154 202.05392456]
[87.50401306 189.89045715]
[98.87620544 180.01013184]
[112.16210175 172.90852356]
[108.20549011 158.43975830]
[104.24887848 143.97099304]
[100.29227448 129.50222778]
[96.33566284 115.03345490]
[86.93180084 103.34724426]
[73.64446259 96.38689423]
[60.35712051 89.42653656]
[47.06977844 82.46617889]
[33.78243637 75.50582123]
[20.49509621 68.54546356]
[7.20775509 61.58510971]
[-27.64920044 78.81484985]
[-42.51580048 80.81090546]
[-57.38239670 82.80696106]
[-72.24899292 84.80302429]
[-80.33110809 100.97653198]
[-96.34230804 109.03330994]
[-113.83856201 105.94023132]
[-125.90261841 93.11020660]
[-140.67474365 95.71492767]
[-155.44685364 98.31964874]
[-170.21896362 100.92436981]
[-184.99108887 103.52909088]
[-199.76319885 106.13381958]
[-214.53532410 108.73854065]
[-229.08387756 117.44345856]
[-241.47605896 105.87321472]
[-233.78848267 90.76237488]
[-217.14004517 93.96642303]
[-202.36791992 91.36170197]
[-187.59580994 88.75698090]
[-172.82369995 86.15225220]
[-158.05157471 83.54753113]
[-143.27946472 80.94281006]
[-128.50733948 78.33808899]
[-124.83263397 66.69524384]
[-116.48935699 57.68289185]
[-105.02963257 53.06863403]
[-92.62454987 53.79331589]
[-81.65291595 59.77989960]
[-74.24505615 69.93642426]
[-59.37845612 67.94036865]
[-44.51185608 65.94430542]
[-29.64525795 63.94824982]
[-25.96213722 57.41490555]
[-40.96134567 57.56899261]
[-48.59447479 44.65639114]
[-41.22847748 31.58955765]
[-26.22927094 31.43519211]
[-18.59589767 44.34820938]
[-14.91277790 37.81486130]
[-20.90107536 24.06203270]
[-26.88937187 10.30920410]
[-32.87766647 -3.44362497]
[-38.86596298 -17.19645309]
[-44.85425949 -30.94928360]
[-59.65171051 -36.50005722]
[-66.11393738 -50.92278671]
[-60.40702820 -65.66072083]
[-45.91678238 -71.97010803]
[-31.24000931 -66.10769653]
[-25.08417702 -51.55155182]
[-31.10143280 -36.93758011]
[-25.11313629 -23.18474960]
[-19.12483978 -9.43192196]
[-13.13654232 4.32090759]
[-7.14824581 18.07373619]
[-1.15994942 31.82656479]
[1.63108575 17.08851433]
[13.58446312 8.02668476]
[28.52862930 9.31971836]
[38.74787521 20.30001831]
[38.96598434 35.29843140]
[29.07034492 46.57124710]
[14.16811180 48.29776764]
[27.45545197 55.25812531]
[40.74279404 62.21848297]
[54.03013611 69.17884064]
[67.31747437 76.13919067]
[80.60482025 83.09954834]
[93.89215851 90.05990601]
[85.56838989 77.58132935]
[78.60932922 64.29331207]
[78.94696045 49.29711151]
[86.49701691 36.33575821]
[99.37501526 28.64438438]
[114.36662292 28.14274788]
[127.72996521 34.95605469]
[136.12956238 47.38371277]
[137.46902466 62.32304382]
[125.37931824 71.20217896]
[140.24592590 69.20611572]
[155.11251831 67.21006012]
[169.97911072 65.21400452]
[184.84571838 63.21794891]
[199.71231079 61.22188950]
[214.57891846 59.22583389]
[229.44551086 57.22977829]
[244.31210327 55.23371887]
[250.07897949 40.99859238]
[262.20065308 31.56670570]
[277.41647339 29.47518539]
[291.63345337 35.28664398]
[301.02731323 47.43782425]
[303.07110596 62.66012573]
[297.21511841 76.85881805]
[285.03454590 86.21453094]
[269.80590820 88.21062469]
[255.62565613 82.31015015]
[246.30816650 70.10031891]
[231.44157410 72.09637451]
[216.57496643 74.09243011]
[201.70837402 76.08849335]
[186.84176636 78.08454895]
[171.97517395 80.08060455]
[157.10858154 82.07666016]
[142.24197388 84.07271576]
[127.37537384 86.06877136]
[123.23264313 92.32079315]
[129.91899109 105.74810028]
[114.94716644 104.82482910]
[110.80442810 111.07684326]
[114.76103973 125.54561615]
[118.71765137 140.01437378]
[122.67426300 154.48315430]
[126.63086700 168.95191956]
[141.68174744 168.30458069]
[156.49920654 171.02313232]
[170.34002686 176.97119141]
[182.50994873 185.85040283]
[192.39854431 197.21540833]
[199.50981140 210.49613953]
[203.48703003 225.02644348]
[204.13070679 240.07746887]
[201.40858459 254.89427185]
[195.45716858 268.73364258]
[186.57499695 280.90142822]
[175.20759583 290.78726196]
[161.92514038 297.89529419]
[147.39389038 301.86901855]
[132.34269714 302.50903320]
[117.52655792 299.78332520]
[103.68862152 293.82855225]
[91.52299500 284.94345093]
[81.63990784 273.57363892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 133]
[8 132]
[9 131]
[10 130]
[11 129]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[19 51]
[20 50]
[21 49]
[22 48]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
