%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:57 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PSMB6)
} def

/sequence { (\
GUGACAGAGCGCUUUACGACAGUUGCUUUGAGGCAGUACCGGAGGAGAAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.034754722 ubox
1 12 0.029559537 ubox
1 17 0.022922615 ubox
1 20 0.004085446 ubox
1 26 0.007307695 ubox
1 34 0.971012304 ubox
1 37 0.009186213 ubox
1 39 0.016107776 ubox
2 9 0.034428723 ubox
2 11 0.030008741 ubox
2 16 0.022946044 ubox
2 19 0.004004287 ubox
2 25 0.007602715 ubox
2 33 0.970436351 ubox
2 35 0.067777892 ubox
2 36 0.004187070 ubox
2 38 0.015371322 ubox
3 10 0.030237142 ubox
3 15 0.022868611 ubox
3 24 0.008303644 ubox
3 34 0.075182923 ubox
3 37 0.013545668 ubox
3 40 0.003651493 ubox
4 14 0.022305272 ubox
4 23 0.008472610 ubox
4 37 0.004180861 ubox
5 22 0.008484936 ubox
5 30 0.995782572 ubox
5 36 0.003995441 ubox
6 13 0.020948688 ubox
6 29 0.996265920 ubox
7 12 0.021145733 ubox
7 28 0.996413415 ubox
7 29 0.003442345 ubox
8 27 0.997238011 ubox
9 23 0.003647613 ubox
9 26 0.997538458 ubox
9 37 0.009425227 ubox
10 18 0.009823778 ubox
10 22 0.004110206 ubox
10 25 0.997181885 ubox
10 36 0.009637953 ubox
11 17 0.011879745 ubox
11 23 0.609233987 ubox
11 24 0.765541656 ubox
11 26 0.007823020 ubox
11 34 0.014682541 ubox
12 22 0.865526929 ubox
12 25 0.008557746 ubox
12 33 0.014710114 ubox
12 44 0.012544477 ubox
12 45 0.031804780 ubox
12 47 0.039983200 ubox
13 19 0.036972513 ubox
13 21 0.832196394 ubox
13 22 0.206186334 ubox
13 32 0.014678896 ubox
13 43 0.012651040 ubox
13 44 0.032266473 ubox
13 45 0.011777873 ubox
13 46 0.040576748 ubox
13 47 0.004098116 ubox
14 18 0.052561483 ubox
14 21 0.192898751 ubox
14 22 0.075197892 ubox
14 31 0.014504779 ubox
14 42 0.012112370 ubox
14 43 0.031819185 ubox
14 44 0.014954947 ubox
14 45 0.039903056 ubox
14 46 0.004783084 ubox
15 21 0.073678292 ubox
15 30 0.014136941 ubox
15 41 0.008206426 ubox
15 42 0.029281993 ubox
15 43 0.009496650 ubox
15 44 0.034627570 ubox
15 45 0.004687865 ubox
16 23 0.367795461 ubox
16 24 0.006482228 ubox
16 29 0.012784988 ubox
16 37 0.003372008 ubox
17 22 0.370303004 ubox
17 25 0.008640590 ubox
17 30 0.003446045 ubox
17 36 0.003332899 ubox
17 41 0.054072089 ubox
18 24 0.009883618 ubox
18 28 0.003716782 ubox
18 29 0.003824552 ubox
18 40 0.054124332 ubox
19 23 0.009065798 ubox
19 27 0.003611258 ubox
19 28 0.003981944 ubox
19 37 0.015433704 ubox
20 36 0.015673287 ubox
22 34 0.004539239 ubox
22 37 0.020250363 ubox
22 39 0.012212462 ubox
23 33 0.004490371 ubox
23 36 0.052294535 ubox
23 38 0.010926581 ubox
23 47 0.012348387 ubox
23 48 0.004874082 ubox
23 49 0.003854593 ubox
23 50 0.005842676 ubox
24 32 0.004256361 ubox
24 35 0.061716317 ubox
24 46 0.015379768 ubox
24 47 0.004546962 ubox
24 48 0.004417691 ubox
24 49 0.004845162 ubox
25 34 0.062476411 ubox
26 33 0.062429120 ubox
26 44 0.016815334 ubox
26 45 0.009434400 ubox
26 47 0.015230320 ubox
27 32 0.057723822 ubox
27 43 0.016874329 ubox
27 44 0.009626834 ubox
27 46 0.015608407 ubox
28 42 0.016752104 ubox
28 43 0.009668451 ubox
28 44 0.003505761 ubox
28 45 0.015596608 ubox
29 41 0.015945561 ubox
29 42 0.009407575 ubox
29 43 0.004251571 ubox
29 44 0.015292746 ubox
30 40 0.014781122 ubox
32 40 0.151056660 ubox
33 39 0.150836784 ubox
39 45 0.402694845 ubox
40 44 0.401568434 ubox
1 34 0.9500000 lbox
2 33 0.9500000 lbox
5 30 0.9500000 lbox
6 29 0.9500000 lbox
7 28 0.9500000 lbox
8 27 0.9500000 lbox
9 26 0.9500000 lbox
10 25 0.9500000 lbox
11 24 0.9500000 lbox
12 22 0.9500000 lbox
13 21 0.9500000 lbox
showpage
end
%%EOF
