%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGGGCGGGUCAGCGCGCCGGCGCAGUGCGGCGGUCACAGGCUGAGUGCUGCGGCGCGAUCCUUGCUUCCCUGAGCGUUGGCCCGGGAGGAAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[139.65744019 161.47445679]
[154.62210083 162.49882507]
[143.77098083 152.14251709]
[132.91984558 141.78622437]
[122.06871033 131.42991638]
[111.21758270 121.07362366]
[96.75243378 123.65132141]
[83.51743317 117.27011108]
[76.52588654 104.34713745]
[78.42611694 89.77751160]
[67.57498932 79.42121124]
[56.72385788 69.06491089]
[45.87272644 58.70860672]
[35.02159500 48.35230637]
[26.49397469 44.60099792]
[24.00037575 37.50117493]
[13.47657394 26.81241798]
[2.95277143 16.12365723]
[-7.57103109 5.43489838]
[-11.68843842 4.60963106]
[-15.07047749 2.77772737]
[-17.50371361 0.26424298]
[-18.89204979 -2.57110429]
[-19.25822639 -5.37204123]
[-18.73379707 -7.82177687]
[-27.47491264 -20.01164627]
[-36.21602631 -32.20151520]
[-44.95714188 -44.39138412]
[-53.69825745 -56.58125305]
[-62.43937302 -68.77111816]
[-71.18048859 -80.96099091]
[-79.92160797 -93.15085602]
[-92.60526276 -96.06318665]
[-99.61743927 -106.54431152]
[-97.60144806 -118.58398438]
[-105.95923615 -131.03979492]
[-114.31701660 -143.49562073]
[-122.67480469 -155.95144653]
[-131.03259277 -168.40725708]
[-144.87872314 -178.19094849]
[-139.31037903 -194.20437622]
[-122.38129425 -193.28660583]
[-118.57676697 -176.76504517]
[-110.21897888 -164.30921936]
[-101.86119843 -151.85340881]
[-93.50341034 -139.39758301]
[-85.14562988 -126.94176483]
[-69.03533936 -120.17714691]
[-67.73173523 -101.89197540]
[-58.99061966 -89.70210266]
[-50.24950409 -77.51223755]
[-41.50838852 -65.32236481]
[-32.76727295 -53.13249969]
[-24.02615929 -40.94263077]
[-15.28504372 -28.75276184]
[-6.54392815 -16.56289291]
[3.11772823 -5.08890438]
[13.64153099 5.59985542]
[24.16533279 16.28861427]
[34.68913651 26.97737503]
[45.37789536 37.50117493]
[56.22902679 47.85747528]
[67.08015442 58.21377563]
[77.93128967 68.57007599]
[88.78241730 78.92637634]
[103.24756622 76.34867859]
[116.48256683 82.72988892]
[123.47411346 95.65286255]
[121.57388306 110.22248840]
[132.42501831 120.57878876]
[143.27613831 130.93508911]
[154.12727356 141.29139709]
[164.97840881 151.64768982]
[177.68812561 159.61405945]
[191.73866272 164.86595154]
[205.78919983 170.11785889]
[221.42488098 167.70210266]
[230.63752747 179.40580750]
[244.68806458 184.65771484]
[260.76391602 181.41749573]
[271.40350342 193.89672852]
[265.66171265 209.25784302]
[249.44523621 211.69865417]
[239.43615723 198.70825195]
[225.38562012 193.45634460]
[210.75492859 196.24774170]
[200.53730774 184.16839600]
[186.48677063 178.91648865]
[172.43623352 173.66459656]
[179.88111877 186.68663025]
[181.55256653 201.59321594]
[177.17657471 215.94071960]
[167.47048950 227.37715149]
[154.02542114 234.02774048]
[139.04544067 234.80226135]
[124.98618317 229.57374573]
[114.15238953 219.19931030]
[108.32003784 205.37963867]
[108.44522095 190.38015747]
[114.50742340 176.65974426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 70]
[6 69]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[16 60]
[17 59]
[18 58]
[19 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[74 89]
[75 88]
[76 87]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
