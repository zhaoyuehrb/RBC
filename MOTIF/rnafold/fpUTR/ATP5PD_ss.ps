%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCACUUCCGUUACUUGCUGCGGAGGACCGUGGGCAGCCAGGGUCGGUGAAGGAUCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[116.33950806 227.92990112]
[126.30433655 215.87850952]
[123.42243195 201.15795898]
[120.18566895 186.51133728]
[116.59593964 171.94720459]
[112.30675507 157.57351685]
[107.32813263 143.42384338]
[102.34951782 129.27416992]
[97.37089539 115.12448883]
[86.14323425 105.17765045]
[71.49662018 101.94088745]
[56.85000610 98.70412445]
[42.20338821 95.46736145]
[27.55677223 92.23059845]
[16.03181267 102.62073517]
[0.59725153 104.21884918]
[-12.81200600 96.41042328]
[-19.03982735 82.19796753]
[-15.69148731 67.04646301]
[-4.05449200 56.78195953]
[11.39649677 55.35137939]
[24.72025871 63.30480576]
[30.79353523 77.58398438]
[45.44015121 80.82074738]
[60.08676910 84.05751038]
[74.73338318 87.29427338]
[89.37999725 90.53103638]
[94.81100464 87.41973114]
[100.78157043 87.03505707]
[109.00176239 74.48799896]
[117.22194672 61.94094849]
[125.44213867 49.39389801]
[126.53278351 33.61032867]
[139.97950745 27.20448303]
[148.19969177 14.65743065]
[156.41987610 2.11037874]
[156.80337524 -14.28428459]
[171.32112122 -21.91100502]
[185.03852844 -12.92406654]
[183.84428406 3.43153834]
[168.96693420 10.33056641]
[160.74674988 22.87761879]
[152.52656555 35.42467117]
[152.02388000 50.31079102]
[137.98918152 57.61408615]
[129.76899719 70.16114044]
[121.54881287 82.70819092]
[113.32862854 95.25524139]
[111.52057648 110.14587402]
[116.49919128 124.29555511]
[121.47781372 138.44523621]
[126.45642853 152.59490967]
[131.65505981 157.59799194]
[133.03211975 163.59587097]
[131.16006470 168.35748291]
[134.74980164 182.92160034]
[140.01867676 190.83927917]
[138.14299011 198.27604675]
[141.02488708 212.99661255]
[154.79858398 220.40061951]
[160.54258728 234.94505310]
[155.54475403 249.76246643]
[142.16491699 257.85653687]
[126.72061920 255.40547180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 56]
[5 55]
[6 52]
[7 51]
[8 50]
[9 49]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
