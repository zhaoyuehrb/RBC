%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAACUUCCGGCGGGAACCGGAAGGUGCGGUGGCACUCACGGAAUCUCGGGUCUUCUGACGUGCCGGGCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[68.60186005 278.20581055]
[55.63356018 269.97665405]
[48.53148651 256.35842896]
[49.20605087 241.01437378]
[57.47580719 228.07192993]
[71.11622620 221.01257324]
[71.72805786 206.02505493]
[72.03403473 191.02818298]
[72.03403473 176.02818298]
[72.03403473 161.02818298]
[72.03403473 146.02818298]
[72.03403473 131.02818298]
[72.03403473 116.02817535]
[67.80804443 101.63578033]
[59.69843292 89.01697540]
[51.58882141 76.39817810]
[43.47920990 63.77937317]
[26.98779869 55.88990021]
[26.51917839 38.46963120]
[17.90161324 26.19211006]
[9.28404617 13.91458797]
[-4.32873297 13.09032917]
[-14.77120876 4.62714577]
[-18.29250145 -8.14125347]
[-13.79930592 -20.39199066]
[-21.90891838 -33.01079559]
[-30.01852989 -45.62959671]
[-38.12814331 -58.24840164]
[-46.23775482 -70.86720276]
[-61.05390167 -77.89669800]
[-62.10437012 -94.26216888]
[-48.30852890 -103.12821960]
[-33.85835648 -95.37421417]
[-33.61894989 -78.97681427]
[-25.50934029 -66.35800934]
[-17.39972687 -53.73920822]
[-9.29011536 -41.12040710]
[-1.18050265 -28.50160408]
[15.27744865 -25.73664474]
[24.94583511 -11.72632504]
[21.56156731 5.29702091]
[30.17913437 17.57454300]
[38.79669952 29.85206604]
[50.81680679 32.33175278]
[58.06182861 42.73548126]
[56.09801102 55.66976166]
[64.20762634 68.28856659]
[72.31723785 80.90736389]
[80.42684937 93.52616882]
[90.74574280 82.95393372]
[104.61344910 82.41896820]
[114.36484528 90.99050140]
[129.28688049 89.46315765]
[144.20892334 87.93581390]
[157.17819214 77.89937592]
[172.25004578 84.36243439]
[173.91986084 100.67634583]
[160.46986389 110.05876160]
[145.73626709 102.85784912]
[130.81422424 104.38519287]
[115.89218903 105.91253662]
[110.00695801 115.17357635]
[99.05821228 119.37324524]
[87.03403473 116.02817535]
[87.03403473 131.02818298]
[87.03403473 146.02818298]
[87.03403473 161.02818298]
[87.03403473 176.02818298]
[87.03403473 191.02818298]
[90.23444366 199.89366150]
[86.71557617 206.63688660]
[86.10374451 221.62440491]
[99.12337494 229.77209473]
[106.31068420 243.34552002]
[105.73232269 258.69351196]
[97.54386902 271.68756104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 72]
[7 71]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 49]
[15 48]
[16 47]
[17 46]
[19 43]
[20 42]
[21 41]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
