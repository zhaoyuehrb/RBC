%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGGGGUCGGGGCAGGGGGCGGGGCCGAGCGGGAGACCAGAGAGCCGGAGCCGGAUCCCGAUCCCGAGUCCGAGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[95.17960358 312.82855225]
[91.95612335 297.74169922]
[97.42229462 283.31518555]
[109.83388519 274.15243530]
[108.76379395 259.19064331]
[107.69371033 244.22886658]
[106.35674286 229.28855896]
[104.75331116 214.37451172]
[103.14988708 199.46044922]
[91.42729950 190.34362793]
[89.58874512 175.24150085]
[99.23079681 163.00758362]
[97.62737274 148.09353638]
[96.02394104 133.17947388]
[94.42051697 118.26541901]
[83.20452881 109.09220886]
[81.65566254 94.68570709]
[90.66542816 83.33800507]
[89.06200409 68.42395020]
[87.45857239 53.50989532]
[85.85514832 38.59584045]
[83.98577881 23.71278381]
[81.85105133 8.86546135]
[79.71633148 -5.98186016]
[77.58161163 -20.82918167]
[75.44688416 -35.67650223]
[73.04749298 -50.48335648]
[70.38419342 -65.24502563]
[67.72090149 -80.00669098]
[51.83238220 -89.98767853]
[48.11457825 -108.05950928]
[58.41738510 -122.98632050]
[54.70778656 -137.52037048]
[50.99818802 -152.05444336]
[36.02589798 -155.01976013]
[23.82809258 -164.19453430]
[16.82666397 -177.75708008]
[16.41174698 -193.01455688]
[22.66572380 -206.93757629]
[34.34686279 -216.76171875]
[49.13586807 -220.53639221]
[64.09636688 -217.51211548]
[76.25794983 -208.28939819]
[83.20590973 -194.69937134]
[83.56074524 -179.44038391]
[77.25198364 -165.54209900]
[65.53224945 -155.76403809]
[69.24184418 -141.22998047]
[72.95144653 -126.69591522]
[84.03129578 -123.02167511]
[91.96517944 -114.29448700]
[94.62426758 -102.67913055]
[91.20858002 -91.13674927]
[82.48256683 -82.66999054]
[85.14586639 -67.90832520]
[87.80915833 -53.14665604]
[92.19454956 -46.98442459]
[90.29420471 -37.81122589]
[92.42893219 -22.96390533]
[94.56365204 -8.11658287]
[96.69837952 6.73073864]
[98.83309937 21.57806015]
[102.99574280 27.89288902]
[100.76920319 36.99241638]
[102.37262726 51.90647125]
[103.97605896 66.82052612]
[105.57948303 81.73458099]
[116.79547119 90.90779114]
[118.34433746 105.31429291]
[109.33457184 116.66199493]
[110.93799591 131.57604980]
[112.54142761 146.49009705]
[114.14485168 161.40415955]
[126.16706085 171.30891418]
[127.58070374 186.45672607]
[118.06394196 197.85702515]
[119.66736603 212.77108765]
[121.27079010 227.68513489]
[125.38069916 236.10342407]
[122.65549469 243.15878296]
[123.72557831 258.12054443]
[124.79566956 273.08233643]
[138.38491821 280.38546753]
[145.84855652 293.88723755]
[144.80497742 309.27926636]
[135.58715820 321.65002441]
[121.13649750 327.05203247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[6 80]
[7 78]
[8 77]
[9 76]
[12 73]
[13 72]
[14 71]
[15 70]
[18 67]
[19 66]
[20 65]
[21 64]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 56]
[28 55]
[29 54]
[32 49]
[33 48]
[34 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
