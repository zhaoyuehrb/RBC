%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGACUCGGCCUUCUGGGCGCGCGCGACGUCAGUUUGAGUUCUGUGUUCUCCCCGCCCGUGUCCCGCCCGACCCGCGCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[134.28651428 378.90859985]
[130.49250793 364.39633179]
[126.69850922 349.88409424]
[122.90450287 335.37182617]
[119.11050415 320.85955811]
[115.30956268 317.62014771]
[113.65376282 311.86868286]
[115.61082458 305.14898682]
[112.88626862 290.39849854]
[110.16172028 275.64801025]
[107.43716431 260.89752197]
[96.27064514 257.94317627]
[87.04092407 250.91189575]
[81.17497253 240.84063721]
[79.59881592 229.24005127]
[82.59151459 217.86790466]
[89.73678589 208.46281433]
[99.98038483 202.47831726]
[98.88545227 187.51832581]
[97.79052734 172.55834961]
[96.69559479 157.59835815]
[95.60066223 142.63838196]
[94.50573730 127.67839050]
[93.41080475 112.71840668]
[85.71426392 101.04557800]
[91.62921143 88.37651825]
[90.53427887 73.41653442]
[89.43935394 58.45655060]
[86.71479797 43.70606613]
[82.39331055 29.34205818]
[78.07182312 14.97804928]
[72.47766876 7.45211744]
[73.86515808 0.01002261]
[70.07115936 -14.50223255]
[66.27715302 -29.01448822]
[51.77636337 -34.53776932]
[43.31968307 -47.54792786]
[44.15888596 -63.04229355]
[53.97127914 -75.06296539]
[68.98379517 -78.98775482]
[83.42382050 -73.30748749]
[91.73886871 -60.20635986]
[90.73162842 -44.72200775]
[80.78941345 -32.80849075]
[84.58341217 -18.29623413]
[88.37741089 -3.78397822]
[92.43583679 10.65656281]
[96.75731659 25.02057266]
[101.07880402 39.38458252]
[110.39189148 27.62590408]
[125.24946594 25.56376076]
[137.41290283 34.34162521]
[140.13746643 49.09210587]
[131.91239929 61.63595200]
[117.29853058 65.01750183]
[104.39933777 57.36162186]
[105.49426270 72.32160950]
[106.58919525 87.28159332]
[114.28573608 98.95442200]
[108.37078857 111.62348175]
[109.46572113 126.58346558]
[110.56064606 141.54344177]
[111.65557861 156.50343323]
[112.75051117 171.46340942]
[113.84543610 186.42340088]
[114.94036865 201.38337708]
[131.47978210 210.48480225]
[139.38888550 227.46604919]
[135.76948547 245.69755554]
[122.18765259 258.17297363]
[124.91220093 272.92346191]
[127.63675690 287.67395020]
[130.36131287 302.42443848]
[133.62275696 317.06558228]
[137.41676331 331.57781982]
[141.21076965 346.09008789]
[145.00476074 360.60232544]
[148.79876709 375.11459351]
[163.29956055 380.63787842]
[171.75624084 393.64804077]
[170.91703796 409.14239502]
[161.10464478 421.16305542]
[146.09211731 425.08786011]
[131.65209961 419.40759277]
[123.33705139 406.30645752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[8 73]
[9 72]
[10 71]
[11 70]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[26 58]
[27 57]
[28 56]
[29 49]
[30 48]
[31 47]
[33 46]
[34 45]
[35 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
