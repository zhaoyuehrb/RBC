%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUUUGCAUGUCUAGCUGGAGAAUAAAAAUAAUAUAUCAUUUGCAUGUCUUAGUAAUGAAGUCAUGGGUGUCGUGGCAUGAGAUCAGCUGGAGGGAGAGGAGAGAUUAAAGUGAGGAGAGAGCUACAACCAAGUAAGCAAGUGUCAGGGCUCACCAACC\
) } def
/len { sequence length } bind def

/coor [
[366.11148071 271.62792969]
[368.39715576 256.66125488]
[355.26379395 249.41456604]
[340.38232422 250.04031372]
[332.03747559 236.59883118]
[318.90408325 229.35214233]
[305.77072144 222.10545349]
[293.67300415 230.82960510]
[278.92651367 233.44679260]
[264.44671631 229.38519287]
[253.12010193 219.39878845]
[247.22865295 205.42819214]
[247.99026489 190.22354126]
[234.85688782 182.97685242]
[221.72351074 175.73016357]
[208.59014893 168.48347473]
[195.45677185 161.23678589]
[182.32339478 153.99009705]
[169.19001770 146.74340820]
[156.05665588 139.49671936]
[149.68270874 147.26486206]
[142.24195862 154.01809692]
[133.89416504 159.61143494]
[124.81858063 163.92477417]
[115.21008301 166.86547852]
[105.27497864 168.37040710]
[95.22660828 168.40725708]
[85.28073883 166.97523499]
[75.65092468 164.10507202]
[66.54394531 159.85842896]
[58.15535736 154.32646179]
[50.66527557 147.62797546]
[44.23453522 139.90678406]
[39.00122452 131.32870483]
[35.07770538 122.07791138]
[32.54823685 112.35305786]
[31.46712494 102.36294556]
[31.85758972 92.32209778]
[33.71124268 82.44611359]
[19.71798706 77.04344940]
[5.72473049 71.64078522]
[-8.26852512 66.23811340]
[-22.26177979 60.83544922]
[-31.44488144 60.65776443]
[-36.47232437 55.18996429]
[-50.35818481 49.51696396]
[-63.47779083 57.80283356]
[-78.95986176 56.76113892]
[-90.85122681 46.79243088]
[-94.57940674 31.72988701]
[-88.71085358 17.36535835]
[-75.50213623 9.22230148]
[-60.03227615 10.43188572]
[-48.24975204 20.52900314]
[-44.68518829 35.63110352]
[-30.79932785 41.30410385]
[-16.85911369 46.84219360]
[-2.86585903 52.24486160]
[11.12739658 57.64752579]
[25.12065125 63.05019379]
[39.11390686 68.45285797]
[51.04327011 51.98357773]
[67.27812958 39.73709869]
[61.60512924 25.85123825]
[55.93213272 11.96537781]
[50.25913620 -1.92048144]
[44.58613586 -15.80634117]
[38.91313934 -29.69219971]
[24.73744202 -37.20413589]
[21.91383171 -52.99675369]
[32.60834122 -64.95530701]
[48.61705399 -63.90622330]
[57.65946198 -50.65426254]
[52.79899979 -35.36520004]
[58.47199631 -21.47933960]
[64.14499664 -7.59347916]
[69.81799316 6.29238033]
[75.49098969 20.17823982]
[81.16398621 34.06409836]
[100.15077972 31.42656708]
[119.12579346 34.14757156]
[136.60626221 42.01448059]
[151.22619629 54.41255569]
[161.84317017 70.37297058]
[167.62753296 88.64852905]
[168.12727356 107.81112671]
[163.30334473 126.36334229]
[176.43670654 133.61003113]
[189.57008362 140.85671997]
[202.70346069 148.10340881]
[215.83683777 155.35009766]
[228.97019958 162.59678650]
[242.10357666 169.84347534]
[255.23695374 177.09016418]
[267.69378662 168.33866882]
[282.65408325 165.87356567]
[297.14181519 170.13093567]
[308.29858398 180.21496582]
[313.94738770 194.08581543]
[313.01742554 208.97207642]
[326.15078735 216.21876526]
[339.28414917 223.46545410]
[355.10501099 223.35803223]
[362.51046753 236.28118896]
[375.64385986 243.52787781]
[387.08673096 233.61393738]
[401.20452881 228.22326660]
[416.28646851 227.98844910]
[430.51196289 232.91851807]
[442.17037964 242.40022278]
[449.86682129 255.27420044]
[452.68893433 269.97674561]
[450.31506348 284.72970581]
[463.44842529 291.97640991]
[476.58181763 299.22308350]
[489.71517944 306.46978760]
[502.84854126 313.71646118]
[520.78906250 307.75009155]
[537.13842773 316.59494019]
[541.79870605 334.26107788]
[555.20318604 340.99304199]
[573.85089111 333.63790894]
[591.65704346 342.16491699]
[597.43670654 360.72518921]
[611.20996094 366.66641235]
[624.98321533 372.60760498]
[638.81341553 378.41497803]
[652.69921875 384.08795166]
[667.17211914 377.73889160]
[681.86492920 383.56106567]
[688.06060791 398.10028076]
[682.08343506 412.73068237]
[667.47955322 418.77230835]
[652.91314697 412.64077759]
[647.02624512 397.97381592]
[633.14038086 392.30081177]
[625.72247314 392.68414307]
[619.04199219 386.38082886]
[605.26873779 380.43963623]
[591.49548340 374.49844360]
[583.25805664 380.76388550]
[573.07836914 383.03717041]
[562.79962158 380.83731079]
[554.31213379 374.49975586]
[549.20550537 365.12704468]
[548.47125244 354.39755249]
[535.06671143 347.66555786]
[525.21881104 353.53890991]
[513.63818359 353.91043091]
[503.22009277 348.57077026]
[496.62554932 338.75302124]
[495.60186768 326.84985352]
[482.46847534 319.60314941]
[469.33511353 312.35647583]
[456.20175171 305.10977173]
[443.06835938 297.86309814]
[431.85333252 307.73770142]
[417.91040039 313.18969727]
[402.91540527 313.54306030]
[388.67770386 308.73590088]
[376.92184448 299.33004761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 105]
[3 104]
[5 102]
[6 101]
[7 100]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[45 56]
[46 55]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[113 156]
[114 155]
[115 154]
[116 153]
[117 152]
[120 147]
[121 146]
[124 140]
[125 139]
[126 138]
[127 136]
[128 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
