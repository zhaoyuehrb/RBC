%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGUCGUAAACGUCGGAUAUCCGGUUCUUCUGGGCGCUAAGGGAGCUGACGGAGAGGGCCACCGCCCAGCAAUAGACGGUGCCUCAGCCUGCCGAGCCGCAGUUUCCGUGGUGUGAGUGAGUCCGGGCCCGUGUCCCCUCUCCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[98.16757202 148.99871826]
[84.32494354 143.22103882]
[79.25412750 129.10414124]
[86.25615692 115.83917236]
[74.37100220 124.99030304]
[62.48585129 134.14143372]
[50.60069656 143.29255676]
[38.71554184 152.44367981]
[26.83038902 161.59481812]
[31.72363853 176.73043823]
[31.14910698 192.60020447]
[25.19431305 207.29272461]
[14.59368992 219.04466248]
[0.63803929 226.45234680]
[-14.98261738 228.63946533]
[-30.38369942 225.36062622]
[-43.71343231 217.02877808]
[-55.41429138 226.41439819]
[-67.11515045 235.80003357]
[-78.81600952 245.18565369]
[-84.25642395 260.65606689]
[-100.42210388 263.41339111]
[-110.68318176 250.62110901]
[-104.48394775 235.43884277]
[-88.20162964 233.48478699]
[-76.50077057 224.09916687]
[-64.79991150 214.71354675]
[-53.09905243 205.32792664]
[-58.05636597 192.03833008]
[-58.66000366 177.84559631]
[-54.83746338 164.14167786]
[-46.95099258 152.27473450]
[-35.76330185 143.41645813]
[-22.36383438 138.44639587]
[-8.06266594 137.86465454]
[5.73757219 141.74160767]
[17.67926216 149.70965576]
[29.56441689 140.55853271]
[41.44956970 131.40740967]
[53.33472443 122.25627899]
[65.21987915 113.10514832]
[77.10502625 103.95402527]
[81.60889435 95.20516205]
[88.51929474 90.69525909]
[95.28193665 90.56397247]
[94.68558502 75.57582855]
[94.08924103 60.58769226]
[93.49288940 45.59954834]
[92.89654541 30.61140823]
[92.30019379 15.62326717]
[91.70384979 0.63512665]
[91.10749817 -14.35301399]
[87.62350464 -22.85735130]
[90.65129852 -29.64445877]
[90.35306549 -44.64149475]
[90.05483246 -59.63852692]
[75.85721588 -64.39282227]
[64.99967957 -76.60390472]
[61.33766937 -93.93195343]
[67.13027954 -112.11562347]
[59.45874405 -125.00544739]
[51.78721237 -137.89527893]
[44.11568069 -150.78509521]
[29.54964447 -158.31919861]
[29.06174469 -174.71109009]
[43.15388870 -183.09819031]
[57.32928467 -174.85258484]
[57.00550461 -158.45663452]
[64.67704010 -145.56680298]
[72.34857178 -132.67698669]
[80.02010345 -119.78715515]
[87.50675964 -120.23426819]
[86.61253357 -135.20759583]
[85.71830750 -150.18090820]
[80.24085999 -164.14506531]
[91.82894897 -173.66957092]
[104.46819305 -165.59185791]
[100.69162750 -151.07513428]
[101.58585358 -136.10182190]
[102.48008728 -121.12849426]
[109.96674347 -121.57560730]
[116.04962158 -135.28686523]
[122.13250732 -148.99812317]
[128.21537781 -162.70938110]
[134.02444458 -176.53886414]
[139.55740356 -190.48112488]
[136.64062500 -206.61878967]
[149.33097839 -217.00566101]
[164.57371521 -210.95660400]
[166.68841553 -194.69438171]
[153.49966431 -184.94816589]
[147.96670532 -171.00590515]
[149.02821350 -166.29850769]
[147.10501099 -160.87765503]
[141.92663574 -156.62649536]
[135.84376526 -142.91523743]
[129.76087952 -129.20399475]
[123.67800140 -115.49272919]
[132.21194458 -91.09963226]
[123.58515930 -69.42462921]
[105.05186462 -59.93675995]
[105.35009766 -44.93972397]
[105.64833069 -29.94269180]
[106.09564209 -14.94936180]
[106.69199371 0.03877894]
[107.28833771 15.02692032]
[107.88468933 30.01506042]
[108.48103333 45.00320053]
[109.07738495 59.99134445]
[109.67372894 74.97948456]
[110.27008057 89.96762848]
[117.42308807 103.15225220]
[129.66265869 111.82363129]
[141.90223694 120.49501038]
[154.14181519 129.16639709]
[166.38137817 137.83776855]
[178.62095642 146.50915527]
[190.94613647 155.05842590]
[203.35569763 163.48474121]
[213.97128296 160.81697083]
[224.08470154 164.38812256]
[230.40602112 172.77853394]
[231.02233887 183.04493713]
[243.08708191 191.95796204]
[255.15184021 200.87097168]
[269.87911987 196.35282898]
[284.27462769 201.31491089]
[292.88610840 213.65615845]
[292.58294678 228.52377319]
[304.64770508 237.43679810]
[316.71243286 246.34980774]
[328.77719116 255.26281738]
[345.12432861 256.56799316]
[351.92224121 271.49182129]
[342.17785645 284.68191528]
[325.91534424 282.56945801]
[319.86416626 267.32757568]
[307.79943848 258.41455078]
[295.73468018 249.50154114]
[283.66992188 240.58853149]
[269.54779053 245.24716187]
[255.22090149 240.64233398]
[246.24775696 228.34046936]
[246.23881531 212.93572998]
[234.17407227 204.02270508]
[222.10932922 195.10969543]
[202.81776428 194.40620422]
[194.92938232 175.89430237]
[182.51982117 167.46798706]
[175.17938232 166.30590820]
[169.94958496 158.74873352]
[157.71000671 150.07734680]
[145.47042847 141.40596008]
[133.23085022 132.73458862]
[120.99127960 124.06320953]
[108.75170898 115.39182281]
[116.27561951 128.36837769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[17 28]
[18 27]
[19 26]
[20 25]
[45 111]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[51 105]
[52 104]
[54 103]
[55 102]
[56 101]
[60 71]
[61 70]
[62 69]
[63 68]
[81 98]
[82 97]
[83 96]
[84 95]
[85 92]
[86 91]
[112 156]
[113 155]
[114 154]
[115 153]
[116 152]
[117 151]
[118 149]
[119 148]
[123 146]
[124 145]
[125 144]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
