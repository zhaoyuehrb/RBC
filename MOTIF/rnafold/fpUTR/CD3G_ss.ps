%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUAGCUGCUGCACAGGCUGGCUGGCUGGCUGGCUGCUAAGGGCUGCUCCACGCUUUUGCCGGAGGACAGAGACUGAC\
) } def
/len { sequence length } bind def

/coor [
[106.02320099 337.03335571]
[104.28180695 322.13476562]
[102.54041290 307.23620605]
[100.79901886 292.33761597]
[99.05762482 277.43905640]
[95.72314453 273.69015503]
[94.88764191 267.73132324]
[97.80509949 261.32440186]
[97.22346497 246.33566284]
[96.64183807 231.34695435]
[95.76966095 216.37232971]
[94.60727692 201.41743469]
[83.18238831 196.51795959]
[74.95498657 187.10160828]
[71.59349823 174.98164368]
[73.82112122 162.52864075]
[81.26138306 152.20687866]
[92.50000000 146.08665466]
[92.50000000 131.08665466]
[92.50000000 116.08664703]
[82.26425934 100.68822479]
[91.27596283 84.54291534]
[90.11357117 69.58802795]
[88.95118713 54.63312912]
[87.49902344 39.70358658]
[85.75762939 24.80501366]
[84.01623535 9.90643787]
[80.14382172 4.02724743]
[80.04854584 -1.98910105]
[82.76371002 -6.20821953]
[82.18207550 -21.19693947]
[81.60044861 -36.18565750]
[78.06503296 -44.89842987]
[81.29829407 -51.76446915]
[81.29829407 -66.76446533]
[81.29829407 -81.76446533]
[81.29829407 -96.76446533]
[69.94715881 -107.76116180]
[69.78005981 -123.56456757]
[80.89614868 -134.79879761]
[96.70043945 -134.79879761]
[107.81652832 -123.56456757]
[107.64943695 -107.76116180]
[96.29829407 -96.76446533]
[96.29829407 -81.76446533]
[96.29829407 -66.76446533]
[96.29829407 -51.76446915]
[96.58916473 -36.76728821]
[97.17079163 -21.77857018]
[97.75242615 -6.78985023]
[98.91481018 8.16504383]
[100.65620422 23.06361961]
[102.39759827 37.96219635]
[106.40609741 44.40645218]
[103.90608215 53.47074509]
[105.06846619 68.42563629]
[106.23085022 83.38053131]
[114.38925171 89.60867310]
[117.73574066 99.31177521]
[115.15122986 109.24502563]
[107.50000000 116.08664703]
[107.50000000 131.08665466]
[107.50000000 146.08665466]
[122.36529541 156.07656860]
[128.39599609 172.77745056]
[123.42949677 189.66479492]
[109.56217194 200.25505066]
[110.72455597 215.20994568]
[114.59514618 223.77906799]
[111.63055420 230.76531982]
[112.21218872 245.75404358]
[112.79381561 260.74276733]
[113.95619965 275.69766235]
[115.69759369 290.59622192]
[117.43898773 305.49481201]
[119.18038177 320.39337158]
[120.92177582 335.29196167]
[131.14335632 348.11581421]
[124.89731598 363.27890015]
[108.60905457 365.18270874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[5 73]
[8 72]
[9 71]
[10 70]
[11 68]
[12 67]
[18 63]
[19 62]
[20 61]
[22 57]
[23 56]
[24 55]
[25 53]
[26 52]
[27 51]
[30 50]
[31 49]
[32 48]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
