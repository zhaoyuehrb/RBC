%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCUCCCAGCAAGCUGUGCGACGCGCCGGGCCUCCUCGCCUUUGUGCCAUCCGGGUCUCUCGCGCGAGCGAUUUAGUCUGAGGCGAAGCUUCGGAGCGGCCGGUACUGUUGAAAGCGACAAGUGGAGGCGCCGCUCUAGCGGCCGGGACUCUGAACU\
) } def
/len { sequence length } bind def

/coor [
[84.53232574 492.05645752]
[76.20587158 479.38973999]
[72.71686554 464.63836670]
[74.48661804 449.58367920]
[81.30142212 436.04357910]
[92.33835602 425.65310669]
[106.26465607 419.66696167]
[105.38707733 404.69265747]
[104.50949097 389.71835327]
[103.63190460 374.74404907]
[95.16324615 362.49127197]
[102.07990265 348.26205444]
[101.20232391 333.28775024]
[92.35739136 324.98953247]
[91.53169250 312.48709106]
[99.71591949 302.47540283]
[99.13067627 287.48684692]
[98.54544067 272.49826050]
[97.96019745 257.50967407]
[87.80620575 243.22303772]
[96.45236206 226.99143982]
[95.57478333 212.01713562]
[94.69719696 197.04283142]
[91.74880219 193.22735596]
[91.19983673 187.50686646]
[94.08911896 181.46934509]
[93.79644012 166.47219849]
[93.50376129 151.47505188]
[93.21109009 136.47790527]
[92.91841125 121.48075867]
[81.66094208 111.56767273]
[66.74723816 113.17440796]
[51.83354187 114.78113556]
[36.91984558 116.38787079]
[27.20230675 128.85162354]
[11.50772285 130.71054077]
[-0.85258871 120.86177063]
[-2.54547429 105.14841461]
[7.43342447 92.89292145]
[23.16380501 91.36625671]
[35.31311035 101.47417450]
[50.22681046 99.86743927]
[65.14051056 98.26070404]
[80.05420685 96.65396881]
[82.49163818 90.11753082]
[86.98391724 84.83453369]
[92.97174072 81.41920471]
[91.51058197 66.49053955]
[90.04943085 51.56187820]
[88.58827972 36.63321304]
[87.12712097 21.70454788]
[75.19989777 11.68561077]
[73.93074799 -3.47499299]
[83.55577850 -14.78403378]
[82.09461975 -29.71269798]
[80.63346863 -44.64136124]
[72.80274963 -45.59609985]
[65.16487122 -49.02966309]
[58.51620483 -54.88711166]
[53.62957382 -62.85682678]
[51.17197800 -72.38205719]
[51.62778091 -82.69852448]
[55.23548508 -92.89569855]
[48.46477890 -106.28067017]
[41.69406891 -119.66564178]
[34.92335892 -133.05061340]
[20.90752792 -141.56463623]
[21.54343414 -157.95144653]
[36.17691040 -165.35371399]
[49.75429153 -156.15660095]
[48.30833054 -139.82131958]
[55.07904053 -126.43635559]
[61.84975052 -113.05138397]
[68.62046051 -99.66641235]
[76.10297394 -100.17823029]
[70.50516510 -114.09456635]
[82.01068878 -123.71864319]
[94.71903229 -115.75008392]
[91.06800842 -101.20186615]
[98.55052185 -101.71368408]
[103.43558502 -115.89592743]
[108.32064056 -130.07818604]
[113.20570374 -144.26042175]
[118.09075928 -158.44267273]
[122.97582245 -172.62492371]
[127.86087799 -186.80717468]
[132.74594116 -200.98942566]
[132.18756104 -217.93417358]
[148.31553650 -223.16149902]
[157.80323792 -209.11088562]
[146.92819214 -196.10437012]
[142.04313660 -181.92211914]
[137.15806580 -167.73986816]
[132.27301025 -153.55761719]
[127.38795471 -139.37536621]
[122.50289154 -125.19312286]
[117.61782837 -111.01087189]
[112.73277283 -96.82862091]
[117.03049469 -63.72621155]
[95.56213379 -46.10251617]
[97.02328491 -31.17385292]
[98.48444366 -16.24518776]
[110.11956787 -7.01700068]
[111.81404877 8.10197353]
[102.05578613 20.24339485]
[103.51694489 35.17205811]
[104.97809601 50.10072327]
[106.43924713 65.02938843]
[107.90040588 79.95805359]
[119.80812836 89.07979584]
[134.60227966 86.60327911]
[149.39642334 84.12676239]
[164.19056702 81.65024567]
[178.98472595 79.17372894]
[191.28706360 68.33008575]
[206.74064636 73.81813049]
[209.44816589 89.99222565]
[196.62434387 100.21385193]
[181.46124268 93.96788025]
[166.66708374 96.44439697]
[151.87294006 98.92091370]
[137.07879639 101.39743042]
[122.28463745 103.87394714]
[137.25894165 104.75154114]
[147.77912903 115.44386292]
[148.41360474 130.43043518]
[138.83477783 141.97366333]
[123.98822784 144.11375427]
[111.53926086 135.74577332]
[107.91555786 121.18808746]
[108.20822906 136.18522644]
[108.50090790 151.18237305]
[108.79358673 166.17951965]
[109.08625793 181.17666626]
[109.67150116 196.16523743]
[110.54908752 211.13954163]
[111.42666626 226.11384583]
[120.54721069 235.28070068]
[120.94331360 247.80410767]
[112.94877625 256.92443848]
[113.53401947 271.91302490]
[114.11925507 286.90161133]
[114.70449829 301.89016724]
[124.89066315 317.20236206]
[116.17662811 332.41015625]
[117.05421448 347.38446045]
[125.58564758 360.70831299]
[118.60621643 373.86648560]
[119.48379517 388.84078979]
[120.36138153 403.81509399]
[121.23896790 418.78939819]
[135.76918030 423.10781860]
[147.94427490 432.13790894]
[156.29405212 444.78927612]
[159.81024170 459.53417969]
[158.06823730 474.59213257]
[151.27839661 488.14474487]
[140.26062012 498.55554199]
[126.34537506 504.56735229]
[111.21298218 505.45419312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 151]
[8 150]
[9 149]
[10 148]
[12 146]
[13 145]
[16 143]
[17 142]
[18 141]
[19 140]
[21 137]
[22 136]
[23 135]
[26 134]
[27 133]
[28 132]
[29 131]
[30 130]
[31 44]
[32 43]
[33 42]
[34 41]
[47 109]
[48 108]
[49 107]
[50 106]
[51 105]
[54 102]
[55 101]
[56 100]
[63 74]
[64 73]
[65 72]
[66 71]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
