%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCUCGCCUCCCGCACGGAGCUCGCUCGGGGAACGCCCCCAUCCACUGCCCUCCACAGCCUCAGGGACAAGGGUGAGGCCAGGGGAGCAGAGGGAGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[111.33873749 506.66177368]
[110.45012665 491.68811035]
[109.56151581 476.71444702]
[108.67291260 461.74078369]
[107.56251526 446.78195190]
[106.23057556 431.84118652]
[104.89863586 416.90045166]
[103.56669617 401.95971680]
[102.23475647 387.01895142]
[90.67990875 377.69046021]
[89.11630249 362.55737305]
[98.97924042 350.50085449]
[97.64730072 335.56008911]
[96.31536102 320.61935425]
[94.98342896 305.67858887]
[93.65148926 290.73785400]
[83.36685181 285.38021851]
[76.94160461 275.58157349]
[76.11064911 263.77249146]
[81.20334625 252.95185852]
[91.02964783 245.92530823]
[90.58515167 230.93190002]
[81.94853210 222.31895447]
[81.54841614 209.72502136]
[90.15351105 199.97628784]
[90.15351105 184.97628784]
[90.15351105 169.97628784]
[90.15351105 154.97628784]
[90.15351105 139.97628784]
[90.15351105 124.97628784]
[90.15351105 109.97628784]
[83.70252991 96.43431854]
[72.05467224 86.98300171]
[60.40681458 77.53168488]
[48.75895691 68.08036041]
[32.71747208 68.30472565]
[22.65214920 55.81197739]
[26.28424263 40.18547821]
[40.82751846 33.41254425]
[55.12562561 40.68879318]
[58.21027374 56.43250656]
[69.85813141 65.88382721]
[81.50598907 75.33514404]
[93.15384674 84.78646088]
[100.53557587 83.45978546]
[90.85590363 72.00099182]
[95.93959045 57.88871765]
[110.70299530 55.23509216]
[120.38288116 66.69370270]
[115.29903412 80.80642700]
[122.68076324 79.47975159]
[130.30873108 66.56409454]
[137.74447632 53.53682709]
[144.98635864 40.40080261]
[152.22824097 27.26477814]
[159.47012329 14.12875462]
[151.46080017 1.02354705]
[151.09318542 -14.33094501]
[158.46614075 -27.80443954]
[171.59638977 -35.77263641]
[186.95196533 -36.09212875]
[200.40228271 -28.67697525]
[208.32928467 -15.52181530]
[208.60063171 -0.16532052]
[201.14335632 13.26168919]
[187.96340942 21.14741516]
[172.60614014 21.37063789]
[165.36425781 34.50666046]
[158.12237549 47.64268494]
[150.88049316 60.77870941]
[150.39981079 68.27607727]
[143.22438049 74.19206238]
[135.59642029 87.10771942]
[122.85406494 108.94971466]
[105.15351105 109.97628784]
[105.15351105 124.97628784]
[105.15351105 139.97628784]
[105.15351105 154.97628784]
[105.15351105 169.97628784]
[105.15351105 184.97628784]
[105.15351105 199.97628784]
[114.74777985 215.60552979]
[105.57855988 230.48739624]
[106.02306366 245.48081970]
[120.26850891 257.77551270]
[121.15722656 276.25656128]
[108.59223175 289.40591431]
[109.92417145 304.34664917]
[111.25611115 319.28741455]
[112.58805084 334.22814941]
[113.91999054 349.16891479]
[125.76008606 359.29064941]
[126.89801788 374.46166992]
[117.17550659 385.68701172]
[118.50744629 400.62777710]
[119.83938599 415.56851196]
[121.17132568 430.50924683]
[122.50325775 445.45001221]
[126.43695831 453.87683105]
[123.64656830 460.85217285]
[124.53517151 475.82583618]
[125.42378235 490.79949951]
[126.31239319 505.77316284]
[133.28643799 521.22625732]
[120.36782837 532.20562744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[21 84]
[22 83]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 44]
[33 43]
[34 42]
[35 41]
[51 73]
[52 72]
[53 70]
[54 69]
[55 68]
[56 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
