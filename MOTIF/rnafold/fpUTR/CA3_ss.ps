%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAAGCGCGGGCUCGCGGCGACUCUGCACCACGCAGGGGAAGAGAAAGCAGGAGCCGUCCAGCACGGAGGAAGGCGACC\
) } def
/len { sequence length } bind def

/coor [
[145.36383057 160.43086243]
[133.18051147 167.88829041]
[119.81143951 172.91963196]
[105.73437500 175.34509277]
[91.45238495 175.07798767]
[77.47586060 172.12786865]
[64.30426025 166.60015869]
[52.40830231 158.69239807]
[42.21310043 148.68716431]
[34.08299255 136.94204712]
[20.33456039 142.94042969]
[6.58612633 148.93881226]
[-7.16230726 154.93717957]
[-16.45979500 168.44602966]
[-32.78390503 166.87902832]
[-39.34179306 151.84819031]
[-29.38726616 138.81594849]
[-13.16068745 141.18875122]
[0.58774620 135.19036865]
[14.33617973 129.19198608]
[28.08461380 123.19361115]
[24.64936066 105.66104889]
[25.42641640 87.81201172]
[30.37234306 70.64432526]
[39.21064758 55.11769867]
[51.44724655 42.10011673]
[42.99744797 29.70653343]
[34.54764557 17.31295204]
[26.09784508 4.91937017]
[17.64804459 -7.47421122]
[9.19824314 -19.86779213]
[-6.23436642 -24.25118256]
[-12.29620743 -39.10492325]
[-4.33715391 -53.03449631]
[11.53728867 -55.35432816]
[23.14960861 -44.28483582]
[21.59182549 -28.31759453]
[30.04162598 -15.92401218]
[38.49142838 -3.53043056]
[46.94122696 8.86315155]
[55.39102936 21.25673294]
[63.84082794 33.65031433]
[76.74091339 28.10576439]
[90.44411469 25.04367065]
[104.47727203 24.56976509]
[118.35583496 26.70041275]
[131.60058594 31.36204147]
[143.75419617 38.39369202]
[154.39698792 47.55256271]
[163.16149902 58.52240753]
[169.74510193 70.92444611]
[173.92044067 84.33043671]
[175.54336548 98.27749634]
[174.55783081 112.28401947]
[170.99786377 125.86639404]
[184.51239014 132.37464905]
[202.71313477 130.48005676]
[212.20339966 145.11524963]
[225.95182800 151.11363220]
[239.70025635 157.11201477]
[255.44306946 155.53887939]
[264.01431274 167.72012329]
[277.76275635 173.71850586]
[291.51116943 179.71688843]
[304.82223511 171.74223328]
[320.27551270 173.14817810]
[331.92883301 183.39411926]
[335.30133057 198.54026794]
[329.09619141 212.76263428]
[315.69940186 220.59242249]
[300.26229858 219.01892090]
[288.72079468 208.64717102]
[285.51281738 193.46533203]
[271.76437378 187.46694946]
[258.01593018 181.46856689]
[243.25651550 183.47074890]
[233.70188904 170.86045837]
[219.95344543 164.86207581]
[206.20501709 158.86369324]
[194.67465210 163.00086975]
[183.08601379 157.91816711]
[178.00413513 145.88919067]
[164.48960876 139.38092041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[12 19]
[13 18]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[55 83]
[56 82]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
