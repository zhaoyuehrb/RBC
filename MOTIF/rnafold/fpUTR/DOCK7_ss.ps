%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGAGGCCGCGAGGGAGGGAGCACGAGCGAGGAGGCACGCGCCCGCCGGUCCGCACCCGGCCCGCCGCAGCCGCCGCCGCCGUCGCCGUCGCCGCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[217.72227478 246.14323425]
[207.85319519 234.84715271]
[197.98411560 223.55108643]
[188.11503601 212.25500488]
[178.24595642 200.95893860]
[164.04545593 196.46505737]
[160.79252625 180.98187256]
[150.92344666 169.68580627]
[141.05436707 158.38973999]
[126.85385132 153.89585876]
[123.60092926 138.41267395]
[113.73184967 127.11660004]
[103.86276245 115.82052612]
[87.89768219 110.89697266]
[84.66990662 94.50469971]
[74.46731567 83.50891876]
[64.26472473 72.51314545]
[46.60207748 67.58351135]
[43.19818878 50.43966675]
[32.67122269 39.75402451]
[22.14425278 29.06838226]
[6.94745302 24.66749191]
[3.52734828 10.17086601]
[-6.99962044 -0.51477593]
[-17.84154320 -10.88071537]
[-28.98871613 -20.91767502]
[-44.55212021 -20.27095795]
[-55.71395493 -30.60865784]
[-56.23458862 -45.44997025]
[-67.38175964 -55.48692703]
[-78.52893066 -65.52388763]
[-83.18919373 -66.30833435]
[-86.90725708 -68.40860748]
[-89.37044525 -71.33110046]
[-90.47323608 -74.53059387]
[-90.31501770 -77.48761749]
[-100.18409729 -88.78369141]
[-110.05317688 -100.07976532]
[-125.73857117 -104.86519623]
[-129.17285156 -120.90071106]
[-116.82312012 -131.69035339]
[-101.39373016 -126.13465118]
[-98.75710297 -109.94884491]
[-88.88802338 -98.65277100]
[-79.01894379 -87.35670471]
[-68.49197388 -76.67105865]
[-57.34480286 -66.63410187]
[-46.19763184 -56.59714127]
[-31.38319969 -57.63069916]
[-19.93540192 -47.61059189]
[-18.95175743 -32.06484604]
[-7.80458403 -22.02788734]
[-2.91799879 -21.40076065]
[1.57465601 -17.58903503]
[3.68602109 -11.04174423]
[14.21298981 -0.35610300]
[28.65682983 3.28048015]
[32.82989502 18.54141426]
[43.35686111 29.22705650]
[53.88383102 39.91269684]
[66.07524109 40.34922028]
[74.93717957 49.30927658]
[75.26050568 62.31055450]
[85.46309662 73.30632782]
[95.66568756 84.30210876]
[107.35659027 85.47103882]
[115.21833801 94.20240021]
[115.15883636 105.95144653]
[125.02791595 117.24752045]
[134.89700317 128.54359436]
[149.80340576 133.84544373]
[152.35043335 148.52064514]
[162.21951294 159.81672668]
[172.08859253 171.11279297]
[186.99499512 176.41464233]
[189.54202271 191.08985901]
[199.41110229 202.38592529]
[209.28018188 213.68200684]
[219.14927673 224.97807312]
[229.01835632 236.27413940]
[239.70399475 246.80111694]
[251.14643860 256.50012207]
[266.67654419 259.52105713]
[271.38235474 273.65274048]
[282.82479858 283.35174561]
[298.35491943 286.37268066]
[303.06072998 300.50436401]
[314.50317383 310.20336914]
[330.72659302 312.59756470]
[336.51248169 327.94210815]
[325.90881348 340.45187378]
[309.82369995 337.25787354]
[304.80416870 321.64581299]
[293.36172485 311.94680786]
[278.65005493 309.61959839]
[273.12579346 294.79418945]
[261.68334961 285.09518433]
[246.97167969 282.76797485]
[241.44743347 267.94256592]
[230.00500488 258.24356079]
[227.53213501 258.55599976]
[224.78749084 257.96325684]
[222.09107971 256.36248779]
[219.79257202 253.75952148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[7 74]
[8 73]
[9 72]
[11 70]
[12 69]
[13 68]
[15 65]
[16 64]
[17 63]
[19 60]
[20 59]
[21 58]
[23 56]
[24 55]
[25 52]
[26 51]
[29 48]
[30 47]
[31 46]
[36 45]
[37 44]
[38 43]
[81 100]
[82 99]
[84 97]
[85 96]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
