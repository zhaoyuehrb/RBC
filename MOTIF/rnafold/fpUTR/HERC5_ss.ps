%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGUAGCUGAGGCUGCGGUUCCCCGACGCCACGCAGCUGCGCGCAGCUGGUUCCCGCUCUGCAGCGCAACGCCUGAGGCAGUGGGCGCGCUCAGUCCCGGGACCAGGCGUUCUCUCCUCUCGCCUCUGGGCCUGGGACCCCGCAAAGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[65.45061493 178.44398499]
[51.10215759 174.07113647]
[47.04165268 159.63117981]
[57.00756454 148.42118835]
[63.09653854 134.71263123]
[55.92226791 132.52635193]
[44.00646210 141.63752747]
[32.09065628 150.74870300]
[20.17484856 159.85987854]
[8.25904274 168.97105408]
[1.43128812 187.89587402]
[-17.78551865 189.69721985]
[-29.31977654 199.28684998]
[-40.85403442 208.87646484]
[-42.44987869 224.37133789]
[-54.28386307 233.93228149]
[-69.04602051 232.31539917]
[-80.58027649 241.90501404]
[-92.11454010 251.49464417]
[-97.28247833 267.05819702]
[-113.39724731 270.09893799]
[-123.88136292 257.48880005]
[-117.94965363 242.20002747]
[-101.70416260 239.96038818]
[-90.16990662 230.37075806]
[-78.63564301 220.78112793]
[-77.53022766 205.97189331]
[-65.96945953 196.08233643]
[-50.44365692 197.34220886]
[-38.90940094 187.75259399]
[-27.37514305 178.16296387]
[-27.34707069 167.87123108]
[-21.50960732 159.12890625]
[-11.60809517 154.98822021]
[-0.85213500 157.05525208]
[11.06367111 147.94407654]
[22.97947693 138.83290100]
[34.89528275 129.72172546]
[46.81108856 120.61054230]
[50.14890289 105.98662567]
[43.36632538 92.60765839]
[36.58374786 79.22869873]
[29.80116844 65.84973907]
[23.01858902 52.47077560]
[16.23601151 39.09181213]
[0.59390831 29.42847252]
[2.16065288 11.97534275]
[-4.89342546 -1.26248074]
[-11.94750404 -14.50030422]
[-19.00158310 -27.73812866]
[-32.31975174 -36.27844238]
[-31.47669411 -51.14916992]
[-38.53077316 -64.38699341]
[-45.58485031 -77.62481689]
[-60.43512726 -82.32663727]
[-67.40039062 -95.85216522]
[-62.82640076 -109.98065186]
[-69.88047791 -123.21847534]
[-84.73075867 -127.92029572]
[-91.69601440 -141.44581604]
[-87.12203217 -155.57431030]
[-94.17610931 -168.81213379]
[-101.23018646 -182.04995728]
[-114.01491547 -193.18490601]
[-106.85428619 -208.55245972]
[-90.10504150 -205.92584229]
[-87.99236298 -189.10403442]
[-80.93828583 -175.86621094]
[-73.88420868 -162.62838745]
[-59.60599136 -158.54573059]
[-52.26357651 -145.22117615]
[-56.64265823 -130.27255249]
[-49.58857727 -117.03472900]
[-35.31036377 -112.95207214]
[-27.96794510 -99.62751770]
[-32.34702682 -84.67889404]
[-25.29294968 -71.44107056]
[-18.23887062 -58.20324707]
[-5.42525816 -50.60979080]
[-5.76375914 -34.79220581]
[1.29031944 -21.55438232]
[8.34439754 -8.31655979]
[15.39847660 4.92126417]
[26.90678406 8.76820660]
[32.87873840 19.79017258]
[29.61497307 32.30923462]
[36.39755249 45.68819809]
[43.18013000 59.06715775]
[49.96270752 72.44612122]
[56.74528885 85.82508087]
[63.52786636 99.20404816]
[75.09279633 77.08787537]
[96.72287750 68.96779633]
[116.52069092 76.69496155]
[125.23255157 94.03208923]
[140.20446777 94.94951630]
[155.17639160 95.86694336]
[170.14830017 96.78437042]
[185.12022400 97.70178986]
[200.09214783 98.61921692]
[215.06405640 99.53664398]
[230.03598022 100.45406342]
[244.28353882 93.57529449]
[256.51376343 102.07653046]
[271.48568726 102.99395752]
[286.45761108 103.91137695]
[301.44512939 104.52320862]
[316.44198608 104.82918549]
[331.43887329 105.13516235]
[346.43576050 105.44113922]
[353.76760864 92.00602722]
[366.50970459 83.52676392]
[381.73397827 81.95182800]
[395.94198608 87.64312744]
[405.86886597 99.29283905]
[409.23345947 114.22395325]
[405.26263428 129.00540161]
[394.86883545 140.24050903]
[380.44052124 145.34754944]
[365.29315186 143.15293884]
[352.90753174 134.16101074]
[346.12976074 120.43801880]
[331.13290405 120.13204193]
[316.13601685 119.82606506]
[301.13912964 119.52008820]
[297.09698486 122.16533661]
[291.33868408 122.25791931]
[285.54016113 118.88330078]
[270.56826782 117.96587372]
[255.59634399 117.04844666]
[242.41966248 123.99284363]
[229.11856079 115.42598724]
[214.14663696 114.50856018]
[199.17471313 113.59113312]
[184.20280457 112.67371368]
[169.23088074 111.75628662]
[154.25897217 110.83885956]
[139.28704834 109.92143250]
[124.31513214 109.00401306]
[117.41293335 125.89453125]
[98.82740021 136.46197510]
[103.63691711 150.67001343]
[108.44643402 164.87805176]
[113.25595093 179.08610535]
[124.06163025 192.15031433]
[114.49928284 206.15023804]
[98.39936066 200.83715820]
[99.04790497 183.89561462]
[94.23838806 169.68757629]
[89.42887115 155.47952271]
[84.61935425 141.27148438]
[77.44508362 139.08520508]
[74.85412598 153.85974121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[12 31]
[13 30]
[14 29]
[17 26]
[18 25]
[19 24]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[47 83]
[48 82]
[49 81]
[50 80]
[52 78]
[53 77]
[54 76]
[57 73]
[58 72]
[61 69]
[62 68]
[63 67]
[95 139]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[104 130]
[105 129]
[106 128]
[107 125]
[108 124]
[109 123]
[110 122]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
