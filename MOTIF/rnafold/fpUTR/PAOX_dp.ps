%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:36 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PAOX)
} def

/sequence { (\
CCUCGCUCCGCCUCCGGCCUCCUCCGAGAGCUCCAGACCUCCCGGCUACUCAGAAGCCCUCGGACUGCCCGGACCGCGCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
4 10 0.005943188 ubox
4 76 0.047581727 ubox
4 78 0.165557600 ubox
4 80 0.706757445 ubox
5 9 0.009017966 ubox
5 11 0.020162447 ubox
5 75 0.049877700 ubox
5 77 0.173858372 ubox
5 79 0.773150998 ubox
6 10 0.020058717 ubox
6 76 0.172609095 ubox
6 78 0.746500154 ubox
7 73 0.159922423 ubox
8 72 0.166629034 ubox
9 71 0.166625384 ubox
9 76 0.579516875 ubox
9 78 0.602768099 ubox
9 80 0.124974397 ubox
10 18 0.009642222 ubox
10 31 0.004080350 ubox
10 68 0.004812402 ubox
10 70 0.165967098 ubox
10 75 0.579067493 ubox
10 77 0.768152658 ubox
10 79 0.133446694 ubox
11 17 0.009878180 ubox
11 30 0.003626945 ubox
11 67 0.005267899 ubox
11 72 0.045544459 ubox
11 76 0.767440589 ubox
11 78 0.133217349 ubox
12 16 0.009812526 ubox
12 28 0.003212098 ubox
12 30 0.005701305 ubox
12 71 0.045553744 ubox
12 72 0.011922878 ubox
13 27 0.003212739 ubox
13 29 0.006101449 ubox
13 64 0.007297422 ubox
13 71 0.008612009 ubox
13 72 0.039048952 ubox
13 73 0.964570690 ubox
14 28 0.006110270 ubox
14 63 0.007438321 ubox
14 71 0.041769509 ubox
14 72 0.983526924 ubox
15 26 0.006501443 ubox
15 62 0.007435969 ubox
15 67 0.014465203 ubox
15 71 0.983499289 ubox
15 76 0.025029810 ubox
16 22 0.003326909 ubox
16 25 0.006848082 ubox
16 32 0.005288191 ubox
16 58 0.003499655 ubox
16 61 0.006473150 ubox
16 66 0.014619563 ubox
16 69 0.449789895 ubox
16 70 0.892366814 ubox
16 75 0.025192561 ubox
17 21 0.003318799 ubox
17 24 0.006779709 ubox
17 31 0.008348086 ubox
17 57 0.003839083 ubox
17 60 0.005211052 ubox
17 65 0.014687845 ubox
17 68 0.610969463 ubox
17 69 0.789913059 ubox
17 74 0.025162364 ubox
18 30 0.008837308 ubox
18 56 0.003654241 ubox
18 67 0.736709779 ubox
18 72 0.020587243 ubox
19 28 0.011447369 ubox
19 30 0.003987030 ubox
19 56 0.003508756 ubox
19 71 0.020553495 ubox
20 27 0.011463966 ubox
20 29 0.004088994 ubox
20 55 0.003555536 ubox
20 64 0.023783447 ubox
20 73 0.013813238 ubox
21 26 0.011430595 ubox
21 28 0.004071762 ubox
21 63 0.021281803 ubox
21 72 0.014513854 ubox
22 62 0.019537633 ubox
22 63 0.004352541 ubox
22 71 0.014509779 ubox
23 54 0.008834077 ubox
23 63 0.003166216 ubox
23 64 0.979102593 ubox
24 53 0.009106177 ubox
24 63 0.999552865 ubox
25 44 0.003228220 ubox
25 62 0.999651640 ubox
26 43 0.004867206 ubox
26 51 0.010052576 ubox
26 61 0.999794194 ubox
27 50 0.010098205 ubox
27 60 0.999581190 ubox
28 41 0.039196442 ubox
28 49 0.010115234 ubox
28 59 0.997591456 ubox
29 40 0.051900552 ubox
29 47 0.017960738 ubox
29 50 0.003747524 ubox
30 39 0.053116721 ubox
30 46 0.018147977 ubox
30 49 0.003736477 ubox
30 57 0.993943650 ubox
31 45 0.018103417 ubox
31 53 0.014273284 ubox
31 56 0.994540930 ubox
32 44 0.016555149 ubox
32 52 0.020783284 ubox
32 54 0.537776325 ubox
32 55 0.819999090 ubox
33 44 0.007734684 ubox
33 45 0.114693114 ubox
33 53 0.760210745 ubox
34 44 0.114843015 ubox
34 67 0.011862228 ubox
35 47 0.486880605 ubox
35 50 0.592368275 ubox
35 66 0.012092033 ubox
36 46 0.503224673 ubox
36 49 0.609584528 ubox
36 51 0.525291887 ubox
36 65 0.012089902 ubox
37 50 0.520778850 ubox
38 45 0.957632040 ubox
38 63 0.008887494 ubox
39 44 0.956457659 ubox
39 45 0.073167607 ubox
39 53 0.011124562 ubox
39 62 0.008884171 ubox
40 44 0.066338399 ubox
40 52 0.010943606 ubox
40 54 0.047382609 ubox
40 64 0.009654883 ubox
41 53 0.047542822 ubox
41 63 0.009939176 ubox
42 62 0.009932545 ubox
44 50 0.036035786 ubox
44 51 0.025277027 ubox
44 58 0.099131203 ubox
44 59 0.003480333 ubox
45 49 0.036407981 ubox
45 50 0.017884336 ubox
45 57 0.099307219 ubox
46 53 0.053028444 ubox
46 56 0.099342929 ubox
47 52 0.050141748 ubox
47 55 0.097466738 ubox
49 56 0.007281753 ubox
50 55 0.007557031 ubox
9 78 0.9500000 lbox
10 77 0.9500000 lbox
11 76 0.9500000 lbox
13 73 0.9500000 lbox
14 72 0.9500000 lbox
15 71 0.9500000 lbox
16 70 0.9500000 lbox
17 69 0.9500000 lbox
23 64 0.9500000 lbox
24 63 0.9500000 lbox
25 62 0.9500000 lbox
26 61 0.9500000 lbox
27 60 0.9500000 lbox
28 59 0.9500000 lbox
30 57 0.9500000 lbox
31 56 0.9500000 lbox
32 55 0.9500000 lbox
36 51 0.9500000 lbox
37 50 0.9500000 lbox
38 45 0.9500000 lbox
39 44 0.9500000 lbox
showpage
end
%%EOF
