%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUGCGAGCCAGGAGGAGGAAGCCGGCGGUGGCCCCGUCAGCAGCCGGCUGCUGAGAGGCCGGUAGGCGGCGGCGGUCCCGAGGGGCGGCGGCCGCGCUGCUCCCUGAGAACGGGUCCCGCAGCUGGGCAGGCGGGCGGCCUGAGGGCGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[212.09420776 267.38168335]
[197.09652710 267.64486694]
[186.17857361 257.35903931]
[185.54789734 242.37231445]
[195.56306458 231.20556641]
[210.52899170 230.20750427]
[200.24340820 219.28932190]
[186.05628967 223.89270020]
[171.21633911 221.87149048]
[158.67420959 213.57353210]
[150.94712830 200.60000610]
[149.61372375 185.49673462]
[154.99182129 171.25463867]
[144.70623779 160.33645630]
[137.79283142 157.60934448]
[134.32736206 149.09744263]
[124.26088715 137.97691345]
[114.19440460 126.85639191]
[104.12792969 115.73587036]
[92.51867676 114.44600677]
[84.76625824 105.70880890]
[84.86727905 94.02855682]
[75.02389526 82.71008301]
[65.18050385 71.39161682]
[55.22508240 60.17156601]
[45.15860748 49.05104065]
[35.09212875 37.93051910]
[25.02565384 26.80999374]
[10.02819157 21.77147484]
[7.22312784 7.14338827]
[-2.84334850 -3.97713542]
[-17.84081078 -9.01565552]
[-20.64587402 -23.64374161]
[-30.71235085 -34.76426315]
[-40.77882767 -45.88478851]
[-50.84530258 -57.00531387]
[-60.91178131 -68.12583923]
[-79.43881226 -63.24665070]
[-97.81656647 -68.36699677]
[-111.03864288 -82.00709534]
[-115.54604340 -100.37793732]
[-110.18493652 -118.43354034]
[-121.10311890 -128.71913147]
[-136.45349121 -132.55017090]
[-140.41188049 -146.90914917]
[-151.33006287 -157.19473267]
[-162.24824524 -167.48031616]
[-173.16642761 -177.76591492]
[-188.51679993 -181.59695435]
[-192.47520447 -195.95593262]
[-203.39338684 -206.24151611]
[-214.31156921 -216.52709961]
[-225.22975159 -226.81269836]
[-236.14791870 -237.09828186]
[-247.06610107 -247.38386536]
[-262.85391235 -246.66210938]
[-274.47143555 -257.37698364]
[-275.02624512 -273.17150879]
[-264.18914795 -284.67510986]
[-248.38961792 -285.06289673]
[-237.00123596 -274.10479736]
[-236.78051758 -258.30203247]
[-225.86233521 -248.01646423]
[-214.94415283 -237.73088074]
[-204.02597046 -227.44528198]
[-193.10778809 -217.15969849]
[-182.18960571 -206.87411499]
[-167.62019348 -203.77876282]
[-162.88084412 -188.68409729]
[-151.96266174 -178.39849854]
[-141.04447937 -168.11291504]
[-130.12629700 -157.82733154]
[-115.55687714 -154.73197937]
[-110.81753540 -139.63731384]
[-99.89935303 -129.35171509]
[-89.87674713 -134.27651978]
[-78.80036163 -135.89424133]
[-67.73523712 -134.03279114]
[-57.75041199 -128.85539246]
[-49.81564713 -120.84645081]
[-44.70723724 -110.76623535]
[-42.93207932 -99.57875061]
[-44.67742157 -88.35955048]
[-49.79125595 -78.19231415]
[-39.72478104 -67.07179260]
[-29.65830421 -55.95126343]
[-19.59182739 -44.83074188]
[-9.52535057 -33.71021652]
[4.75209045 -29.46711159]
[8.27717495 -14.04361153]
[18.34365082 -2.92308784]
[32.62109375 1.32001746]
[36.14617920 16.74351692]
[46.21265411 27.86404037]
[56.27912903 38.98456573]
[66.34560394 50.10508728]
[73.20343018 52.96910858]
[76.49897766 61.54822922]
[86.34236145 72.86669922]
[96.18574524 84.18516541]
[112.16873932 89.20281982]
[115.24845886 105.66939545]
[125.31493378 116.78991699]
[135.38140869 127.91043854]
[145.44789124 139.03096008]
[155.62442017 150.05085754]
[165.91000366 160.96903992]
[180.44738770 156.44955444]
[195.44432068 158.68096924]
[207.93411255 167.16772461]
[215.46961975 180.18222046]
[216.60253906 195.11627197]
[211.16159058 209.00373840]
[221.44717407 219.92192078]
[232.36535645 230.20750427]
[243.87730408 239.82391357]
[255.38923645 249.44032288]
[270.94070435 252.34942627]
[275.74804688 266.44689941]
[287.26000977 276.06329346]
[298.77194214 285.67968750]
[310.28387451 295.29611206]
[318.92681885 298.42044067]
[321.92663574 305.21994019]
[333.24508667 315.06335449]
[344.56356812 324.90673828]
[357.83612061 322.42987061]
[369.92803955 327.98455811]
[376.50045776 339.33016968]
[375.33843994 352.19470215]
[386.45898438 362.26116943]
[397.57949829 372.32763672]
[408.70001221 382.39410400]
[419.82055664 392.46060181]
[435.85073853 393.10275269]
[445.22680664 406.12075806]
[440.75622559 421.52835083]
[425.86846924 427.50610352]
[411.98410034 419.46841431]
[409.75408936 403.58111572]
[398.63354492 393.51464844]
[387.51303101 383.44815063]
[376.39251709 373.38168335]
[365.27197266 363.31521606]
[348.55203247 364.88171387]
[335.60021973 353.67028809]
[334.72018433 336.22518921]
[323.40170288 326.38180542]
[312.08325195 316.53842163]
[300.66748047 306.80804443]
[289.15554810 297.19165039]
[277.64358521 287.57522583]
[266.13165283 277.95883179]
[251.40361023 275.73754883]
[245.77282715 260.95227051]
[234.26089478 251.33584595]
[222.74894714 241.71945190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 114]
[7 113]
[13 107]
[14 106]
[16 105]
[17 104]
[18 103]
[19 102]
[22 100]
[23 99]
[24 98]
[25 96]
[26 95]
[27 94]
[28 93]
[30 91]
[31 90]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[42 75]
[43 74]
[45 72]
[46 71]
[47 70]
[48 69]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[115 157]
[116 156]
[117 155]
[119 153]
[120 152]
[121 151]
[122 150]
[124 149]
[125 148]
[126 147]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
