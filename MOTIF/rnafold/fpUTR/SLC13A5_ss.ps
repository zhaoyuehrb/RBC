%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCCCGGGGACUGUGGCCCCUUCUUAAGCCCGCGGCGCCUCUAGCUGCCCCUCACUCGUCUCGCCCGCCAGUCUCCCUCCCGCGCG\
) } def
/len { sequence length } bind def

/coor [
[87.45829773 305.45068359]
[77.32701111 294.21624756]
[71.16506195 280.40011597]
[69.57614136 265.35583496]
[72.71590424 250.55729675]
[80.27676392 237.45428467]
[91.51796722 227.33053589]
[105.33822632 221.17784119]
[103.75274658 206.26187134]
[102.16727448 191.34590149]
[100.58179474 176.42993164]
[98.99631500 161.51394653]
[97.41083527 146.59797668]
[95.82535553 131.68200684]
[94.23987579 116.76603699]
[82.44850922 102.49478912]
[89.79613495 85.50310516]
[87.16244507 70.73612213]
[84.52876282 55.96914291]
[69.48580933 55.65068817]
[54.79875183 52.40449142]
[41.03166199 46.35715103]
[28.71290970 37.74279785]
[18.31487656 26.89404869]
[10.23584175 14.22916031]
[4.78473568 0.23589624]
[2.16931820 -14.54725170]
[2.48826551 -29.55178452]
[5.72744656 -44.20106506]
[11.76053905 -57.93246841]
[20.35395241 -70.21900177]
[31.17587852 -80.58953094]
[43.80909348 -88.64681244]
[57.76704788 -94.08276367]
[55.13336182 -108.84974670]
[52.49967575 -123.61672211]
[49.86598969 -138.38369751]
[47.23230362 -153.15068054]
[33.58520126 -160.78550720]
[28.08685303 -175.42457581]
[33.33341217 -190.15576172]
[46.84761047 -198.02343750]
[62.24845886 -195.31274414]
[72.26414490 -183.30358887]
[72.16557312 -167.66630554]
[61.99928284 -155.78437805]
[64.63297272 -141.01739502]
[67.26665497 -126.25041199]
[69.90034485 -111.48342896]
[72.53402710 -96.71645355]
[87.51062012 -96.44096375]
[102.15034485 -93.24780273]
[115.89015961 -87.25785828]
[128.20123291 -78.69963074]
[138.60932922 -67.90051270]
[146.71310425 -55.27423859]
[152.19949341 -41.30508804]
[154.85591125 -26.52925301]
[154.57841492 -11.51429367]
[151.37579346 3.16267514]
[145.36930847 16.93716431]
[136.78808594 29.27902031]
[125.96040344 39.71283340]
[113.30111694 47.83623886]
[99.29573822 53.33545685]
[101.92942810 68.10243988]
[104.56311798 82.86941528]
[113.25954437 88.23295593]
[117.55149078 97.50521088]
[116.01327515 107.60617065]
[109.15585327 115.18055725]
[110.74133301 130.09652710]
[112.32681274 145.01249695]
[113.91228485 159.92848206]
[115.49776459 174.84445190]
[117.08324432 189.76042175]
[118.66872406 204.67639160]
[120.25420380 219.59236145]
[135.05903625 222.70237732]
[148.17720032 230.23687744]
[158.32354736 241.45771790]
[164.50399780 255.26557922]
[166.11308289 270.30770874]
[162.99314880 285.11047363]
[155.44985962 298.22360229]
[144.22222900 308.36239624]
[130.41023254 314.53359985]
[115.36701202 316.13259888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[15 71]
[17 67]
[18 66]
[19 65]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
