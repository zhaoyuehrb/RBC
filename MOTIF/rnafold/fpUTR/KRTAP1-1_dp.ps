%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:00 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (KRTAP1-1)
} def

/sequence { (\
AAUAGGCAGCCAUAAUUCAGAAACUCCUCCAAGCAACCCAACCUUCAGAUCAACUCCUGACACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 17 0.029638374 ubox
1 45 0.005931736 ubox
2 13 0.071070709 ubox
2 16 0.037651762 ubox
2 44 0.009816126 ubox
3 12 0.073374578 ubox
3 14 0.081871550 ubox
3 15 0.035494600 ubox
3 59 0.071159683 ubox
4 13 0.087146887 ubox
4 17 0.007861520 ubox
4 25 0.045236252 ubox
4 28 0.457667145 ubox
4 44 0.263151050 ubox
4 45 0.013413987 ubox
4 58 0.085478091 ubox
5 11 0.267558536 ubox
5 16 0.008961229 ubox
5 17 0.005198248 ubox
5 18 0.032761178 ubox
5 24 0.048851484 ubox
5 25 0.017203530 ubox
5 26 0.013436233 ubox
5 27 0.494581938 ubox
5 28 0.044352313 ubox
5 29 0.016671743 ubox
5 30 0.205823398 ubox
5 38 0.528803465 ubox
5 39 0.252002076 ubox
5 43 0.284382908 ubox
5 44 0.025752892 ubox
5 57 0.086846679 ubox
5 64 0.052441079 ubox
6 10 0.263509658 ubox
6 16 0.005100246 ubox
6 17 0.026615674 ubox
6 24 0.018646310 ubox
6 25 0.010072271 ubox
6 26 0.494328354 ubox
6 27 0.048076074 ubox
6 28 0.010867724 ubox
6 29 0.205733922 ubox
6 34 0.136650552 ubox
6 37 0.530947038 ubox
6 38 0.248934621 ubox
6 42 0.283735039 ubox
6 43 0.026781270 ubox
6 56 0.086797843 ubox
6 57 0.003365088 ubox
6 63 0.052635243 ubox
7 33 0.137138967 ubox
7 59 0.064460302 ubox
8 17 0.016551314 ubox
8 25 0.483482153 ubox
8 28 0.174874425 ubox
8 44 0.008816826 ubox
8 55 0.083181908 ubox
8 58 0.064613374 ubox
9 16 0.015754303 ubox
9 24 0.483029080 ubox
9 27 0.173933056 ubox
9 34 0.594005103 ubox
9 43 0.009314161 ubox
9 54 0.083137257 ubox
9 57 0.064348982 ubox
10 33 0.593271288 ubox
12 50 0.011276312 ubox
13 49 0.010629841 ubox
15 50 0.023887578 ubox
16 22 0.026279330 ubox
16 23 0.044710697 ubox
16 32 0.149212096 ubox
16 33 0.068900991 ubox
16 36 0.006413462 ubox
16 41 0.008620693 ubox
16 48 0.005721292 ubox
16 49 0.022925363 ubox
16 60 0.003884639 ubox
17 21 0.023941292 ubox
17 22 0.041658851 ubox
17 31 0.141757596 ubox
17 32 0.103217397 ubox
17 35 0.006775956 ubox
17 40 0.008933863 ubox
17 47 0.005410974 ubox
17 48 0.019811386 ubox
17 49 0.091154565 ubox
17 60 0.085702988 ubox
18 48 0.092433190 ubox
18 59 0.092694761 ubox
19 25 0.200122308 ubox
19 28 0.274670586 ubox
19 44 0.036413849 ubox
19 45 0.003662332 ubox
19 55 0.003575009 ubox
19 58 0.092636861 ubox
20 24 0.203087271 ubox
20 26 0.154580393 ubox
20 27 0.284704831 ubox
20 29 0.268210881 ubox
20 43 0.038065049 ubox
20 44 0.003837910 ubox
20 45 0.005990950 ubox
20 46 0.094089989 ubox
20 51 0.005285764 ubox
20 54 0.003738064 ubox
20 56 0.018493580 ubox
20 57 0.090528290 ubox
21 25 0.136023066 ubox
21 28 0.257780333 ubox
21 44 0.006485638 ubox
21 45 0.093640890 ubox
21 50 0.005183975 ubox
21 55 0.025029639 ubox
22 44 0.085498480 ubox
22 45 0.004759764 ubox
23 44 0.005781291 ubox
24 33 0.091304794 ubox
24 48 0.004124125 ubox
25 32 0.088163429 ubox
25 47 0.003932271 ubox
25 49 0.012559980 ubox
26 48 0.012558329 ubox
27 33 0.041696641 ubox
27 48 0.019105766 ubox
28 32 0.038505686 ubox
28 47 0.018672149 ubox
28 49 0.054670329 ubox
29 48 0.056115381 ubox
30 59 0.005370123 ubox
31 45 0.066058909 ubox
31 58 0.004908716 ubox
32 44 0.083386653 ubox
32 45 0.016372757 ubox
32 55 0.004921792 ubox
33 43 0.084565743 ubox
33 44 0.014722723 ubox
33 54 0.005152244 ubox
33 57 0.003502185 ubox
34 59 0.004633690 ubox
35 45 0.007457573 ubox
35 58 0.004335144 ubox
36 44 0.010598694 ubox
39 59 0.008565385 ubox
40 58 0.008013980 ubox
44 53 0.004918086 ubox
44 60 0.041109428 ubox
45 52 0.005160281 ubox
45 59 0.010228843 ubox
45 60 0.907458256 ubox
46 59 0.982141201 ubox
47 55 0.017257937 ubox
47 58 0.982126484 ubox
48 54 0.019051299 ubox
48 56 0.107769590 ubox
48 57 0.976191000 ubox
49 55 0.143952506 ubox
50 60 0.061062307 ubox
51 59 0.066821229 ubox
52 58 0.063647016 ubox
4 28 0.9500000 lbox
5 27 0.9500000 lbox
6 26 0.9500000 lbox
8 25 0.9500000 lbox
9 24 0.9500000 lbox
45 60 0.9500000 lbox
46 59 0.9500000 lbox
47 58 0.9500000 lbox
48 57 0.9500000 lbox
showpage
end
%%EOF
