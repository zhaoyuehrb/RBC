%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGUUUCGGCCGAGGGUGGGCUCCGCGGUCGCCGGUUUCUCUUCCCAGCUCUGCCCUCGCUUGCUGGCCGGUCUCCGGGGUCAGCGCGGGGCCACCAUCCAGCCCCUUGGGGCCCGCCCCAAGCAGCUGUCGAGGACGCACUCAGCCUGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[92.20145416 130.49858093]
[85.67826080 128.03334045]
[79.85786438 124.19245911]
[75.02588654 119.16439819]
[71.41944122 113.19590759]
[69.21549225 106.57986450]
[68.52220154 99.64093781]
[69.37359619 92.71962738]
[71.72788239 86.15557861]
[60.21594238 76.53917694]
[48.70400238 66.92277527]
[37.87604141 68.52373505]
[28.16701508 63.96641541]
[22.70969200 54.99001694]
[23.11539841 44.71313477]
[11.99487400 34.64665604]
[0.87435043 24.58018112]
[-10.24617386 14.51370430]
[-21.36669731 4.44722795]
[-32.48722076 -5.61924839]
[-43.80569077 -15.46263504]
[-55.31763077 -25.07903862]
[-66.82956696 -34.69544220]
[-78.34150696 -44.31184769]
[-89.85344696 -53.92825317]
[-101.36539459 -63.54465866]
[-112.87733459 -73.16106415]
[-124.38927460 -82.77746582]
[-140.69293213 -76.34400940]
[-157.92675781 -79.00738525]
[-171.39007568 -89.95055389]
[-177.45639038 -106.11051941]
[-174.55007935 -123.03518677]
[-186.43524170 -132.18630981]
[-198.32038879 -141.33744812]
[-210.20555115 -150.48857117]
[-221.68682861 -145.38873291]
[-234.17413330 -145.67474365]
[-245.28039551 -151.23014832]
[-252.90892029 -160.93707275]
[-255.64913940 -172.90069580]
[-253.03712463 -184.81884766]
[-264.54907227 -194.43525696]
[-280.07775879 -193.21147156]
[-291.61550903 -203.12786865]
[-292.68649292 -217.93963623]
[-304.19845581 -227.55604553]
[-315.71038818 -237.17243958]
[-327.22232056 -246.78884888]
[-338.73428345 -256.40524292]
[-351.95492554 -253.66499329]
[-364.15490723 -258.97817993]
[-370.95159912 -270.19085693]
[-370.04562378 -283.07595825]
[-381.36407471 -292.91934204]
[-397.55584717 -295.51916504]
[-403.14657593 -310.93591309]
[-392.38504028 -323.31011963]
[-376.34176636 -319.91229248]
[-371.52069092 -304.23779297]
[-360.20223999 -294.39440918]
[-343.51672363 -296.29306030]
[-330.34457397 -285.34136963]
[-329.11785889 -267.91720581]
[-317.60592651 -258.30078125]
[-306.09399414 -248.68438721]
[-294.58203125 -239.06797791]
[-283.07009888 -229.45156860]
[-268.30422974 -231.03414917]
[-256.49249268 -221.44573975]
[-254.93266296 -205.94720459]
[-243.42073059 -196.33079529]
[-226.56278992 -201.44548035]
[-209.84829712 -195.40260315]
[-199.98638916 -180.42855835]
[-201.05441284 -162.37371826]
[-189.16926575 -153.22259521]
[-177.28411865 -144.07147217]
[-165.39895630 -134.92034912]
[-154.24905396 -140.98678589]
[-141.58435059 -142.37197876]
[-129.29667664 -138.83326721]
[-119.23513794 -130.86611938]
[-112.92785645 -119.63522339]
[-111.34993744 -106.80424500]
[-114.77286530 -94.28940582]
[-103.26092529 -84.67300415]
[-91.74898529 -75.05659485]
[-80.23704529 -65.44019318]
[-68.72510529 -55.82378769]
[-57.21316528 -46.20738220]
[-45.70122528 -36.59098053]
[-34.18928528 -26.97457504]
[-29.38605881 -26.51036263]
[-24.83880424 -22.98803520]
[-22.42074585 -16.73977280]
[-11.30022144 -6.67329597]
[-0.17969707 3.39318037]
[10.94082642 13.45965672]
[22.06134987 23.52613258]
[33.18187332 33.59260941]
[52.30834579 36.20737839]
[58.32040787 55.41083145]
[69.83234406 65.02723694]
[81.34428406 74.64363861]
[108.95075989 69.81947327]
[129.46340942 88.91452026]
[144.35679626 87.12924957]
[159.25016785 85.34397888]
[174.14355469 83.55870819]
[189.03694153 81.77342987]
[203.93031311 79.98815918]
[218.82369995 78.20288849]
[231.61740112 67.94358063]
[246.79881287 74.14492035]
[248.75061035 90.42750549]
[235.46495056 100.04120636]
[220.60897827 93.09626770]
[205.71559143 94.88153839]
[190.82220459 96.66680908]
[175.92883301 98.45208740]
[161.03544617 100.23735809]
[146.14207458 102.02262878]
[131.24868774 103.80790710]
[130.02191162 109.46919250]
[127.77856445 114.80985260]
[124.59462738 119.64904022]
[133.74575806 131.53419495]
[142.89688110 143.41935730]
[152.04800415 155.30450439]
[161.19912720 167.18965149]
[176.62341309 169.36442566]
[185.73463440 181.54801941]
[183.56628418 196.23930359]
[192.71740723 208.12445068]
[201.86853027 220.00961304]
[217.08187866 217.90013123]
[231.30570984 223.69480896]
[240.71388245 235.83489990]
[242.77565002 251.05477905]
[236.93641663 265.26037598]
[224.76690674 274.63046265]
[209.54063416 276.64450073]
[195.35342407 270.76077271]
[186.02153015 258.56195068]
[184.05520630 243.32943726]
[189.98338318 229.16073608]
[180.83226013 217.27558899]
[171.68112183 205.39042664]
[156.92364502 203.73141479]
[147.47380066 191.80853271]
[149.31398010 176.34078979]
[140.16285706 164.45562744]
[131.01173401 152.57048035]
[121.86059570 140.68531799]
[112.70947266 128.80017090]
[106.05701447 130.89163208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 105]
[10 104]
[11 103]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[33 79]
[34 78]
[35 77]
[36 76]
[42 72]
[43 71]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[54 61]
[55 60]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
[127 156]
[128 155]
[129 154]
[130 153]
[131 152]
[134 149]
[135 148]
[136 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
