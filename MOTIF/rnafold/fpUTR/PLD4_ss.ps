%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACAAAGAGGAAGUAGCUGGAAGGGGAAGGAGCCAGCUGCAGAGAGGAGGAGGUGAGCUGCAGAGAAGAGGAGGUUGGUGUGGAGCACAGGCAGCACCGAGCCUGCCCCGUGAGCUGAGGGCCUGCAGUCUGCGGCUGGAAUCAGGAUAGACACCAAGGCAGGACCCCCAGAGAGCUGGAGCUGCUGGUG\
) } def
/len { sequence length } bind def

/coor [
[128.89132690 172.08433533]
[122.54890442 174.31289673]
[116.03752136 175.98458862]
[109.40595245 177.08688354]
[102.70389557 177.61152649]
[95.98158264 177.55458069]
[89.28938293 176.91647339]
[82.67743683 175.70198059]
[76.19530487 173.92021179]
[69.89155579 171.58450317]
[63.81342697 168.71238708]
[58.00646210 165.32536316]
[52.51417923 161.44882202]
[47.37773895 157.11180115]
[42.63562393 152.34681702]
[30.63083267 161.34042358]
[18.62604141 170.33403015]
[6.62124872 179.32763672]
[-5.38354349 188.32124329]
[-17.38833618 197.31484985]
[-29.39312744 206.30845642]
[-41.39791870 215.30206299]
[-38.40233994 230.26832581]
[-42.20535660 245.05007935]
[-52.05187225 256.71234131]
[-65.98686218 262.93963623]
[-81.24351501 262.49545288]
[-94.79261017 255.46804810]
[-103.94397736 243.25267029]
[-106.88059998 228.27471924]
[-103.01940155 213.50807190]
[-93.12703705 201.88465881]
[-79.16763306 195.71231079]
[-63.91284943 196.21655273]
[-50.39152908 203.29727173]
[-38.38673401 194.30366516]
[-26.38194275 185.31005859]
[-14.37715054 176.31645203]
[-2.37235808 167.32284546]
[9.63243389 158.32923889]
[21.63722610 149.33563232]
[33.64201736 140.34202576]
[26.72758293 125.72961426]
[22.98821831 110.00228882]
[22.58595848 93.84153748]
[25.53823853 77.94763947]
[31.71712685 63.00933075]
[40.85487747 49.67391586]
[52.55552673 38.51925278]
[66.31205750 30.02869797]
[81.52837372 24.57016945]
[97.54511261 22.38019562]
[98.52108002 7.41198063]
[85.85789490 -1.16654050]
[79.23256683 -14.84140015]
[80.33428192 -29.89638519]
[88.76730347 -42.29558945]
[102.18400574 -48.76533508]
[103.15997314 -63.73355103]
[104.13594818 -78.70176697]
[105.11191559 -93.66998291]
[106.08789062 -108.63819885]
[107.06385803 -123.60641479]
[108.03983307 -138.57463074]
[109.01580048 -153.54284668]
[109.99177551 -168.51106262]
[97.32859039 -177.08958435]
[90.70325470 -190.76445007]
[91.80497742 -205.81942749]
[100.23799133 -218.21862793]
[113.65469360 -224.68838501]
[114.63066864 -239.65660095]
[115.60663605 -254.62481689]
[79.64407349 -279.78570557]
[76.49356842 -294.45111084]
[73.34305573 -309.11651611]
[70.19254303 -323.78192139]
[67.04203033 -338.44735718]
[63.77226257 -353.08663940]
[60.38346100 -367.69882202]
[56.99465942 -382.31100464]
[53.60585403 -396.92318726]
[50.21705246 -411.53536987]
[40.65392303 -416.75756836]
[35.65404510 -426.19073486]
[36.65878296 -436.59890747]
[43.09469223 -444.55950928]
[40.18330383 -459.27426147]
[28.98185349 -471.25170898]
[34.01213074 -486.86032104]
[50.09941864 -490.04327393]
[60.69449615 -477.52621460]
[54.89805222 -462.18563843]
[57.80944061 -447.47088623]
[71.57922363 -433.90841675]
[64.82923889 -414.92419434]
[68.21804047 -400.31198120]
[71.60684204 -385.69979858]
[74.99565125 -371.08761597]
[78.38445282 -356.47543335]
[82.96516418 -350.66094971]
[81.70744324 -341.59786987]
[84.85794830 -326.93243408]
[88.00846100 -312.26702881]
[91.15897369 -297.60162354]
[94.30948639 -282.93621826]
[101.64219666 -281.36096191]
[116.30760193 -278.21044922]
[123.64031219 -276.63519287]
[132.53591919 -288.71276855]
[141.43151855 -300.79037476]
[135.83213806 -315.16571045]
[138.91592407 -330.28173828]
[149.69885254 -341.31494141]
[164.74014282 -344.74468994]
[179.24015808 -339.47659302]
[188.57200623 -327.19161987]
[189.75791931 -311.80990601]
[182.41949463 -298.23968506]
[168.89837646 -290.81118774]
[153.50910950 -291.89477539]
[144.61351013 -279.81716919]
[135.71789551 -267.73959351]
[130.57485962 -253.64883423]
[129.59887695 -238.68061829]
[128.62290955 -223.71240234]
[141.08589172 -215.55523682]
[147.83743286 -202.16595459]
[146.97486877 -187.09536743]
[138.62991333 -174.39662170]
[124.95999146 -167.53509521]
[123.98401642 -152.56687927]
[123.00804901 -137.59866333]
[122.03207397 -122.63044739]
[121.05610657 -107.66223145]
[120.08013153 -92.69401550]
[119.10416412 -77.72579956]
[118.12818909 -62.75757980]
[117.15222168 -47.78936386]
[129.61520386 -39.63218689]
[136.36674500 -26.24290848]
[135.50418091 -11.17232800]
[127.15921783 1.52642512]
[113.48929596 8.38795185]
[112.51332855 23.35616684]
[130.94328308 28.77237892]
[147.47996521 38.54665756]
[161.11158752 52.08096313]
[171.00408936 68.54719543]
[176.55221558 86.93787384]
[177.41647339 106.12775421]
[173.54400635 124.94271088]
[165.17175293 142.23153687]
[152.81195068 156.93643188]
[161.90296936 168.86763000]
[170.99397278 180.79882812]
[180.08499146 192.73002625]
[189.17601013 204.66122437]
[195.14016724 207.57069397]
[198.26039124 212.34338379]
[198.36119080 217.13198853]
[207.05903625 229.35278320]
[215.75688171 241.57356262]
[224.45471191 253.79434204]
[235.11132812 252.88575745]
[245.10476685 256.46310425]
[252.64808655 263.81530762]
[256.42224121 273.56292725]
[255.80647278 283.91653442]
[250.97938538 293.00527954]
[259.07031250 305.63604736]
[267.16125488 318.26684570]
[275.25216675 330.89764404]
[290.05789185 337.94906616]
[291.08416748 354.31607056]
[277.27520752 363.16168213]
[262.83651733 355.38629150]
[262.62139893 338.98855591]
[254.53045654 326.35778809]
[246.43952942 313.72698975]
[238.34858704 301.09619141]
[219.07440186 298.35339355]
[207.83859253 282.08288574]
[212.23393250 262.49218750]
[203.53608704 250.27140808]
[194.83825684 238.05061340]
[186.14041138 225.82983398]
[177.24481201 213.75224304]
[168.15379333 201.82104492]
[159.06278992 189.88984680]
[149.97177124 177.95864868]
[140.88075256 166.02745056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[52 145]
[53 144]
[58 139]
[59 138]
[60 137]
[61 136]
[62 135]
[63 134]
[64 133]
[65 132]
[66 131]
[71 126]
[72 125]
[73 124]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[87 94]
[88 93]
[109 123]
[110 122]
[111 121]
[154 192]
[155 191]
[156 190]
[157 189]
[158 188]
[161 187]
[162 186]
[163 185]
[164 184]
[170 181]
[171 180]
[172 179]
[173 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
