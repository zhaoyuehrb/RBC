%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUUUGCAUCUCCGCCUCCCGUGCUCCGCCUCCGGUCUUACGUUUCGCCCCCGGCAGCGCCGACAGCGGACCCAAG\
) } def
/len { sequence length } bind def

/coor [
[65.97836304 250.95527649]
[60.16929626 264.78475952]
[64.87940216 280.12081909]
[55.70731354 293.28335571]
[39.68906784 294.17520142]
[29.11249542 282.11221313]
[32.09103394 266.34808350]
[46.33980560 258.97570801]
[52.14887238 245.14620972]
[40.85031128 229.58384705]
[40.80767059 210.21548462]
[52.19765091 194.38098145]
[70.83403778 188.17501831]
[74.37920380 173.59997559]
[77.92436981 159.02493286]
[81.46953583 144.44989014]
[85.01470184 129.87484741]
[73.54962158 120.43143463]
[67.30862427 106.95269775]
[67.52434540 92.10076904]
[74.15417480 78.80898285]
[85.88868713 69.70252228]
[100.41025543 66.57997894]
[103.95542908 52.00494003]
[107.50059509 37.42990112]
[111.04576111 22.85486031]
[114.59092712 8.27981949]
[112.99909210 1.40384829]
[115.01246643 -4.28124475]
[119.04048157 -7.28953648]
[123.73242950 -21.53683853]
[128.42437744 -35.78414154]
[119.52631378 -48.35914230]
[119.73652649 -63.58442307]
[128.76484680 -75.62408447]
[142.98124695 -79.98667145]
[147.67318726 -94.23397064]
[152.36514282 -108.48126984]
[142.07380676 -119.88232422]
[138.87747192 -134.90493774]
[143.63592529 -149.50811768]
[155.06918335 -159.76365662]
[170.10174561 -162.91288757]
[184.68992615 -158.10868835]
[194.90959167 -146.64334106]
[198.01168823 -131.60098267]
[193.16177368 -117.02792358]
[181.66444397 -106.84425354]
[166.61244202 -103.78932190]
[161.92048645 -89.54202271]
[157.22854614 -75.29471588]
[166.07077026 -63.33842468]
[166.17842102 -48.29009247]
[157.30061340 -35.91923523]
[142.67167664 -31.09219170]
[137.97973633 -16.84488869]
[133.28778076 -2.59758735]
[129.16596985 11.82498646]
[125.62079620 26.40002632]
[122.07563019 40.97506714]
[118.53046417 55.55010605]
[114.98529816 70.12514496]
[126.45037842 79.56856537]
[132.69137573 93.04730225]
[132.47566223 107.89923096]
[125.84582520 121.19101715]
[114.11131287 130.29747009]
[99.58974457 133.42001343]
[96.04457092 147.99505615]
[92.49940491 162.57009888]
[88.95423889 177.14514160]
[85.40907288 191.72018433]
[94.26007843 198.60517883]
[100.16777039 208.09033203]
[102.42794800 218.99397278]
[100.78884888 229.96861267]
[95.47888947 239.66749573]
[87.17527771 246.90988159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[30 57]
[31 56]
[32 55]
[36 51]
[37 50]
[38 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
