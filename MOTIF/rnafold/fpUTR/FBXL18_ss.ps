%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCGCUCCUUGCCGGGGUCUCGGUUGAGCGGUGGACGCGCCGGCUUCGAGCAUCCCUAGCCGGGCAGGUGGGAGGCACGGGGUUGCGGAUCCCGCGGCCGCGGUUCGGACCCGCCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[-69.54109955 282.28784180]
[-82.46594238 288.12133789]
[-96.57721710 289.17211914]
[-110.16582489 285.33352661]
[-121.59301758 277.08981323]
[-134.05195618 285.44293213]
[-146.51089478 293.79608154]
[-158.96983337 302.14920044]
[-171.42877197 310.50234985]
[-183.88771057 318.85546875]
[-185.40347290 329.76852417]
[-192.57666016 337.83804321]
[-202.80929565 340.51037598]
[-212.59445190 337.12307739]
[-225.45735168 344.83966064]
[-238.32025146 352.55627441]
[-251.18315125 360.27285767]
[-264.04605103 367.98944092]
[-271.52914429 382.58175659]
[-287.91921997 383.12701416]
[-296.35559082 369.06430054]
[-288.15963745 354.86013794]
[-271.76263428 355.12655640]
[-258.89974976 347.40994263]
[-246.03683472 339.69335938]
[-233.17393494 331.97677612]
[-220.31103516 324.26016235]
[-212.32232666 306.72384644]
[-192.24084473 306.39654541]
[-179.78190613 298.04339600]
[-167.32296753 289.69027710]
[-154.86402893 281.33712769]
[-142.40509033 272.98400879]
[-129.94615173 264.63085938]
[-133.30224609 249.19613647]
[-130.49397278 233.61337280]
[-121.91933441 220.25668335]
[-108.85713196 211.17236328]
[-93.27630615 207.76553345]
[-77.53915405 210.58273315]
[-64.04318237 219.22463989]
[-51.79809570 210.56105042]
[-39.55300903 201.89746094]
[-27.30791855 193.23387146]
[-15.06282997 184.57028198]
[-2.81774139 175.90667725]
[9.42734718 167.24308777]
[21.33720398 158.12414551]
[32.89490128 148.56277466]
[44.45260239 139.00141907]
[56.01029968 129.44006348]
[67.56800079 119.87870026]
[79.12569427 110.31733704]
[90.68339539 100.75598145]
[78.30180359 89.09012604]
[79.22830200 66.72527313]
[81.85364532 51.95680618]
[84.47898865 37.18833923]
[87.10433960 22.41987610]
[85.16185760 15.91012192]
[86.65465546 10.27985287]
[90.25054932 6.98333454]
[93.61460876 -7.63456869]
[96.97866821 -22.25247192]
[89.72075653 -36.55989075]
[96.51232147 -51.09447479]
[112.14346313 -54.70653915]
[124.62330627 -44.62520981]
[124.37837982 -28.58402824]
[111.59657288 -18.88841057]
[108.23251343 -4.27050734]
[104.86845398 10.34739590]
[101.87280273 25.04522133]
[99.24745178 39.81368637]
[96.62210846 54.58215332]
[93.99676514 69.35061646]
[98.92115784 75.00749969]
[110.23509216 65.15890503]
[120.08350372 76.47299957]
[108.76994324 86.32127380]
[113.69433594 91.97815704]
[128.68368530 91.41280365]
[142.18241882 83.16087341]
[155.19227600 90.41297913]
[170.18161011 89.84762573]
[185.17095947 89.28227234]
[200.16029358 88.71692657]
[215.14964294 88.15157318]
[230.13899231 87.58621979]
[245.12832642 87.02086639]
[260.11767578 86.45551300]
[275.71765137 79.81649017]
[286.41574097 92.96896362]
[276.73880005 106.88991547]
[260.68301392 101.44485474]
[245.69367981 102.01020813]
[230.70433044 102.57556152]
[215.71499634 103.14091492]
[200.72564697 103.70626831]
[185.73631287 104.27161407]
[170.74696350 104.83696747]
[155.75762939 105.40232086]
[143.33102417 113.61382294]
[129.24903870 106.40214539]
[114.25968933 106.96749878]
[100.24475861 112.31367493]
[88.68705750 121.87503815]
[77.12935638 131.43640137]
[65.57166290 140.99775696]
[54.01396179 150.55911255]
[42.45626068 160.12048340]
[30.89856339 169.68183899]
[29.01344490 174.79125977]
[25.64847755 178.25315857]
[21.71175766 179.77671814]
[18.09093857 179.48818970]
[5.84584904 188.15177917]
[-6.39923954 196.81536865]
[-18.64432907 205.47895813]
[-30.88941765 214.14254761]
[-43.13450623 222.80613708]
[-55.37959290 231.46972656]
[-51.81766891 245.31919861]
[-53.21259689 259.52105713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[41 122]
[42 121]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
[56 76]
[57 75]
[58 74]
[59 73]
[62 72]
[63 71]
[64 70]
[81 105]
[82 104]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
