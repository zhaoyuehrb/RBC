%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCCCCGCCCACACGCCGCCUGCCAGGCGUGAGUCUUCCUCCCGCUCUGCGCCGUCGCCCCGCCCACACGCCGCCACCCUCGCGUCAGUUGUCGCUCCGCGCCUGCGCCCGUUGUCUCCCUGCUCGCUCCGGGUCCCGGCGCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-111.78917694 336.41830444]
[-114.53194427 349.15249634]
[-119.49405670 361.19219971]
[-126.51599884 372.15414429]
[-135.37269592 381.68960571]
[-145.78071594 389.49557495]
[-157.40742493 395.32437134]
[-169.88148499 398.99145508]
[-182.80480957 400.38131714]
[-195.76527405 399.45104980]
[-208.34977722 396.23175049]
[-220.15748596 390.82748413]
[-230.81256104 383.41180420]
[-239.97615051 374.22235107]
[-252.41558838 382.60449219]
[-264.85504150 390.98663330]
[-277.29446411 399.36877441]
[-289.73391724 407.75091553]
[-302.17337036 416.13305664]
[-302.58746338 431.64462280]
[-312.06661987 443.92977905]
[-326.96588135 448.26464844]
[-341.55621338 442.98239136]
[-350.22729492 430.11416626]
[-349.64495850 414.60800171]
[-340.03308105 402.42639160]
[-325.08764648 398.25341797]
[-310.55551147 403.69360352]
[-298.11605835 395.31146240]
[-285.67660522 386.92932129]
[-273.23718262 378.54718018]
[-260.79772949 370.16503906]
[-248.35829163 361.78289795]
[-254.60086060 345.85168457]
[-256.94738770 328.89508057]
[-255.26432800 311.85220337]
[-249.64143372 295.66781616]
[-240.38693237 281.23989868]
[-228.01066589 269.36984253]
[-213.19596863 260.71792603]
[-196.76200867 255.76667786]
[-179.61839294 254.79382324]
[-162.71490479 257.85681152]
[-146.98881531 264.78939819]
[-133.31300354 275.21066284]
[-121.81120300 265.58212280]
[-110.30939484 255.95359802]
[-110.31533051 245.65643311]
[-104.50173187 236.89166260]
[-94.60694122 232.72071838]
[-83.84014893 234.76072693]
[-71.94776917 225.61898804]
[-60.05539322 216.47726440]
[-48.16301346 207.33552551]
[-36.27063370 198.19378662]
[-24.37825394 189.05206299]
[-22.70758057 174.29588318]
[-10.77724457 164.85545349]
[4.68905258 166.70787048]
[16.58143234 157.56613159]
[28.47381210 148.42439270]
[40.36619186 139.28266907]
[46.34614944 120.93410492]
[66.30505371 118.42603302]
[77.80686188 108.79750824]
[76.85836792 94.13513184]
[84.67572784 81.69431305]
[98.29777527 76.18752289]
[112.56461334 79.70068359]
[124.06641388 70.07215881]
[121.04175568 53.84779358]
[126.56225586 38.39400482]
[139.03881836 27.87899208]
[155.01988220 25.08836937]
[170.14599609 30.68767929]
[181.44500732 20.82195663]
[186.75128174 5.91712475]
[201.42724609 3.37446165]
[212.72625732 -6.49126148]
[211.20324707 -18.35942650]
[215.58226013 -29.36547661]
[224.65618896 -36.79094696]
[236.07435608 -38.86290359]
[246.95088196 -35.17619324]
[258.65051270 -44.56335449]
[270.35012817 -53.95051575]
[275.12533569 -61.81493759]
[282.39218140 -63.40822220]
[294.28457642 -72.54995728]
[306.17694092 -81.69168854]
[312.40258789 -96.23651886]
[327.20858765 -97.85881042]
[339.10095215 -107.00054932]
[350.99334717 -116.14228058]
[352.79385376 -131.84367371]
[365.22137451 -141.60751343]
[380.90283203 -139.64109802]
[390.53475952 -127.11106110]
[388.40264893 -111.45124817]
[375.77148438 -101.95235443]
[360.13507080 -104.24990082]
[348.24270630 -95.10816956]
[336.35031128 -85.96643066]
[330.97531128 -72.07548523]
[315.31869507 -69.79930878]
[303.42630005 -60.65757751]
[291.53393555 -51.51584244]
[279.73727417 -42.25089264]
[268.03765869 -32.86373138]
[256.33804321 -23.47657013]
[255.48741150 -5.23721933]
[241.37628174 6.84471893]
[222.59197998 4.80774307]
[211.29296875 14.67346668]
[206.79487610 28.87263489]
[191.31072998 32.12096024]
[180.01171875 41.98668289]
[183.52743530 55.21918869]
[180.97296143 68.73783875]
[172.79283142 79.88202667]
[160.54435730 86.43336487]
[146.60154724 87.05715942]
[133.69494629 81.57396698]
[122.19313812 91.20249176]
[123.14163208 105.86486816]
[115.32427216 118.30568695]
[101.70222473 123.81247711]
[87.43538666 120.29931641]
[75.93358612 129.92784119]
[75.59170532 140.88085938]
[69.37548065 149.63655090]
[59.55908585 153.41246033]
[49.50792694 151.17504883]
[37.61554718 160.31677246]
[25.72316742 169.45851135]
[13.83078671 178.60025024]
[11.64383793 194.02279663]
[-0.54695421 203.12440491]
[-15.23651981 200.94444275]
[-27.12889862 210.08616638]
[-39.02127838 219.22790527]
[-50.91365814 228.36964417]
[-62.80603790 237.51136780]
[-74.69841766 246.65310669]
[-81.47240448 265.59411621]
[-100.68087006 267.45541382]
[-112.18267059 277.08392334]
[-123.68447876 286.71246338]
[-117.39718628 298.13943481]
[-113.24355316 310.49850464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[45 148]
[46 147]
[47 146]
[51 144]
[52 143]
[53 142]
[54 141]
[55 140]
[56 139]
[59 136]
[60 135]
[61 134]
[62 133]
[64 129]
[65 128]
[69 124]
[70 123]
[75 117]
[76 116]
[78 114]
[79 113]
[84 110]
[85 109]
[86 108]
[88 107]
[89 106]
[90 105]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
