%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCUCUCCAGCGCGCUCUCCAGGAGCUUUGGCUCGGUGGGUACUGUCGCGGAGGCUUGUCAUUCUGACCCGGGGAUUCCUCACAGCGUCUGGCAGAA\
) } def
/len { sequence length } bind def

/coor [
[54.23141479 514.64575195]
[40.43193436 521.74182129]
[25.10214424 519.33825684]
[14.13665867 508.35925293]
[11.75193119 493.02651978]
[18.86493874 479.23577881]
[32.74058533 472.28985596]
[35.06405640 457.47088623]
[37.38753128 442.65191650]
[39.48025894 427.79864502]
[41.34173965 412.91458130]
[43.20322418 398.03054810]
[45.06470490 383.14648438]
[42.73018265 375.99276733]
[47.22252655 367.83120728]
[49.54599762 353.01223755]
[51.86947250 338.19329834]
[54.19294357 323.37432861]
[56.51641464 308.55535889]
[46.16535950 299.96978760]
[41.41244888 287.27313232]
[43.61624146 273.78604126]
[52.30052948 263.09359741]
[65.25209045 258.09240723]
[68.03530884 243.35289001]
[70.81851959 228.61335754]
[73.60173798 213.87382507]
[76.38495636 199.13430786]
[78.93860626 184.35327148]
[81.26207733 169.53431702]
[83.58555603 154.71536255]
[85.90902710 139.89640808]
[88.23249817 125.07744598]
[90.55596924 110.25849152]
[62.09646606 82.51399231]
[57.50560760 68.23379517]
[52.91474915 53.95360184]
[41.32509613 43.18371201]
[44.79583359 28.69912529]
[40.20497513 14.41892910]
[35.61411667 0.13873233]
[31.02325630 -14.14146423]
[16.85120773 -21.13636017]
[11.85538578 -36.13026810]
[18.99972534 -50.22757339]
[34.04561615 -55.06459045]
[48.06659698 -47.77160263]
[52.74427032 -32.67541504]
[45.30345154 -18.73232269]
[49.89431381 -4.45212650]
[54.48517227 9.82806969]
[59.07603073 24.10826683]
[70.33731842 33.85673904]
[67.19494629 49.36273956]
[71.78580475 63.64293671]
[76.37666321 77.92313385]
[83.48020172 80.32933044]
[88.29282379 66.12233734]
[102.49974060 70.93519592]
[97.68727112 85.14171600]
[104.79080963 87.54790497]
[117.11514282 78.99742126]
[129.43948364 70.44693756]
[141.76380920 61.89645767]
[151.33099365 47.89983368]
[167.42907715 53.21846771]
[166.77468872 70.15978241]
[150.31430054 74.22078705]
[137.98995972 82.77127838]
[125.66562653 91.32176208]
[113.34129333 99.87224579]
[105.37493134 112.58196259]
[103.05145264 127.40091705]
[100.72798157 142.21987915]
[98.40451050 157.03883362]
[96.08103943 171.85778809]
[93.75756073 186.67674255]
[95.53642273 195.82159424]
[91.12448120 201.91752625]
[88.34127045 216.65704346]
[85.55805206 231.39657593]
[82.77483368 246.13610840]
[79.99161530 260.87564087]
[91.72640228 272.93884277]
[94.00142670 289.44708252]
[86.12456512 303.94461060]
[71.33537292 310.87884521]
[69.01190186 325.69781494]
[66.68843079 340.51675415]
[64.36495209 355.33572388]
[62.04148102 370.15466309]
[59.94875336 385.00796509]
[58.08727264 399.89202881]
[56.22578812 414.77606201]
[54.36430740 429.66012573]
[56.42670822 438.74520874]
[52.20648575 444.97540283]
[49.88301468 459.79437256]
[47.55953979 474.61331177]
[58.64348221 485.47268677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 95]
[11 94]
[12 93]
[13 92]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[24 83]
[25 82]
[26 81]
[27 80]
[28 79]
[29 77]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 56]
[36 55]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
