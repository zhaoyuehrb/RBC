%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCCGCAGCCCCGGGAGCUUCCCGCUCGCGGAGACCCAGACGGCUGCAGGAGCCCGGGCAGCCUCGGGGUCAGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[87.39843750 229.28738403]
[75.21549988 219.67721558]
[71.04042816 204.73236084]
[76.47863007 190.19944763]
[89.43900299 181.66667175]
[89.99987030 166.67715454]
[90.56073761 151.68765259]
[91.12160492 136.69813538]
[91.68247223 121.70862579]
[87.14233398 119.36817169]
[83.22290802 116.09269714]
[80.11341858 112.04032898]
[77.96397400 107.40670013]
[76.87834167 102.41551208]
[62.25442505 99.07769775]
[47.63050842 95.73988342]
[32.45462036 100.21236420]
[21.76816177 89.83696747]
[7.14424229 86.49915314]
[-7.47967672 83.16133881]
[-22.10359573 79.82352448]
[-36.39796066 87.10711670]
[-50.94471359 80.34165192]
[-54.58483124 64.71701813]
[-44.52592850 52.21910095]
[-28.48432922 52.43523026]
[-18.76578140 65.19960785]
[-4.14186239 68.53742218]
[10.48205662 71.87523651]
[25.10597420 75.21305084]
[39.23585892 70.50182343]
[50.96831894 81.11595917]
[65.59223938 84.45377350]
[80.21615601 87.79158783]
[95.67802429 77.15779877]
[113.95602417 81.40766144]
[126.34960938 72.95786285]
[138.74319458 64.50806427]
[151.13676453 56.05826187]
[163.53034973 47.60845947]
[170.57402039 33.44168854]
[185.44834900 32.66501999]
[197.84193420 24.21521759]
[203.33840942 16.60555649]
[210.86067200 15.69135857]
[223.56153870 7.71087742]
[236.26240540 -0.26960385]
[248.96325684 -8.25008488]
[261.66412354 -16.23056602]
[274.36499023 -24.21104813]
[282.44418335 -40.63003540]
[299.88525391 -40.87928009]
[312.27883911 -49.32907867]
[321.95971680 -63.24729919]
[338.01394653 -57.79769897]
[337.22158813 -40.86227798]
[320.72863770 -36.93549728]
[308.33508301 -28.48569679]
[305.70358276 -16.52155304]
[295.23443604 -9.41332817]
[282.34545898 -11.51018429]
[269.64459229 -3.52970314]
[256.94375610 4.45077801]
[244.24287415 12.43125916]
[231.54202271 20.41173935]
[218.84115601 28.39222145]
[206.29173279 36.60879898]
[193.89816284 45.05860138]
[187.74096680 58.62098312]
[171.98014832 60.00204086]
[159.58657837 68.45184326]
[147.19299316 76.90164185]
[134.79940796 85.35144043]
[122.40583038 93.80124664]
[120.34674835 111.24524689]
[106.67198181 122.26949310]
[106.11111450 137.25900269]
[105.55024719 152.24851990]
[104.98937988 167.23802185]
[104.42851257 182.22753906]
[116.71498871 191.70498657]
[121.05194092 206.60366821]
[115.77171326 221.19471741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[14 34]
[15 33]
[16 32]
[18 30]
[19 29]
[20 28]
[21 27]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[42 68]
[43 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
