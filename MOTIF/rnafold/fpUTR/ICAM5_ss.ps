%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCUCUAGCCCAGCUCCUCGGCUCGCGCUCUCCUCGCCUCCUGUGCUUUCCCCGCCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[99.75273895 138.98889160]
[93.22965240 138.39735413]
[86.89762115 136.72222900]
[80.93534851 134.01078796]
[75.51109314 130.33953857]
[70.77792358 125.81210327]
[66.86941528 120.55622864]
[63.89586258 114.72025299]
[61.94119263 108.46886444]
[61.06055832 101.97847748]
[46.21323776 99.84375763]
[31.36591530 97.70903015]
[16.51859283 95.57431030]
[1.75775456 101.26888275]
[-9.73883915 91.79906464]
[-24.58616066 89.66433716]
[-41.12455750 93.39498901]
[-49.28770065 78.53566742]
[-37.26886749 66.57807922]
[-22.45143890 74.81701660]
[-7.60411692 76.95173645]
[6.09474230 71.10447693]
[18.65331650 80.72698975]
[33.50063705 82.86170959]
[48.34795761 84.99643707]
[63.19528198 87.13115692]
[82.96367645 64.92923737]
[112.63557434 63.11454391]
[120.13557434 50.12416458]
[127.63557434 37.13378143]
[135.13557434 24.14340210]
[125.85409546 12.10502338]
[121.89083862 -2.57016063]
[123.85017395 -17.64429283]
[131.43331909 -30.81867599]
[143.48388672 -40.08431244]
[158.16427612 -44.02825928]
[173.23582458 -42.04909515]
[186.40022278 -34.44862747]
[195.64999390 -22.38587379]
[199.57463074 -7.70031261]
[197.57563782 7.36861229]
[189.95785522 20.52299881]
[177.88294983 29.75689888]
[163.19223022 33.66221237]
[148.12596130 31.64340210]
[140.62596130 44.63378143]
[133.12596130 57.62416458]
[125.62595367 70.61454773]
[131.96366882 77.67247772]
[136.40943909 86.05198669]
[138.70011902 95.25708008]
[138.70011902 104.74291992]
[136.40943909 113.94801331]
[131.96366882 122.32752228]
[125.62595367 129.38545227]
[133.12596130 142.37583923]
[140.62596130 155.36621094]
[155.09083557 163.09272766]
[155.36141968 179.48965454]
[141.15934753 187.68922424]
[127.09449005 179.25643921]
[127.63557434 162.86621094]
[120.13557434 149.87583923]
[112.63557434 136.88545227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 26]
[11 25]
[12 24]
[13 23]
[15 21]
[16 20]
[28 49]
[29 48]
[30 47]
[31 46]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
