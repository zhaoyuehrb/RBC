%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGAUUUAAGGUUGCCGCUAGCCGCCUGGGAAUUUAAGGGACCCACACUACCUUCCCGAAGUUGAAGGCAAGCGGUGAUUGUUUGUAGACGGCGCUUUGUC\
) } def
/len { sequence length } bind def

/coor [
[189.02163696 429.47387695]
[185.43190002 414.90975952]
[181.84216309 400.34561157]
[178.25242615 385.78149414]
[161.99963379 384.38610840]
[147.15797424 377.55581665]
[135.49040222 366.08300781]
[128.38926697 351.31271362]
[126.71014404 334.98480225]
[130.66876221 319.02917480]
[139.81349182 305.33752441]
[153.07676697 295.53915405]
[148.61421204 281.21835327]
[144.15167236 266.89752197]
[139.68913269 252.57670593]
[135.22657776 238.25590515]
[130.76403809 223.93508911]
[126.30149078 209.61427307]
[121.83894348 195.29345703]
[117.37639618 180.97264099]
[112.91384888 166.65184021]
[101.74048615 156.80271912]
[105.02185822 141.32553101]
[100.55931091 127.00471497]
[96.09676361 112.68390656]
[90.77769470 98.65866089]
[84.62149811 84.98016357]
[69.45896912 74.66930389]
[71.70533752 57.33713531]
[65.13882446 43.85081482]
[58.57230759 30.36449242]
[52.00579071 16.87817001]
[45.43927765 3.39184856]
[41.82441330 1.30760896]
[39.21637344 -1.48799872]
[37.71242523 -4.62489605]
[37.29014206 -7.73729372]
[37.81775665 -10.49935436]
[39.07448959 -12.65542984]
[34.61194611 -26.97624207]
[30.14940071 -41.29705429]
[15.08323097 -43.99319077]
[3.00287437 -53.39125061]
[-3.31569266 -67.33163452]
[-2.42050958 -82.61094666]
[5.48271751 -95.71810150]
[18.57788467 -103.64118195]
[33.85581589 -104.55951691]
[47.80575943 -98.26208496]
[57.22211838 -86.19598389]
[59.94107819 -71.13391113]
[55.33784866 -56.53703690]
[44.47021103 -45.75960159]
[48.93275833 -31.43878937]
[53.39530563 -17.11797523]
[58.92559814 -3.17466712]
[65.49211121 10.31165504]
[72.05863190 23.79797554]
[78.62514496 37.28429794]
[85.19165802 50.77061844]
[96.60794830 55.07609177]
[102.14635468 66.39833069]
[98.29999542 78.82397461]
[104.45619202 92.50247192]
[107.40373993 93.83936310]
[109.88973236 96.35092163]
[111.45031738 99.85171509]
[111.70377350 103.97721100]
[110.41757965 108.22135925]
[114.88012695 122.54217529]
[119.34266663 136.86299133]
[130.83522034 147.73641968]
[127.23466492 162.18928528]
[131.69720459 176.51010132]
[136.15975952 190.83091736]
[140.62229919 205.15173340]
[145.08485413 219.47253418]
[149.54739380 233.79335022]
[154.00993347 248.11416626]
[158.47248840 262.43496704]
[162.93502808 276.75579834]
[167.39758301 291.07659912]
[181.18891907 291.12374878]
[194.38014221 295.08947754]
[205.88284302 302.63644409]
[214.75073242 313.13226318]
[220.25764465 325.70248413]
[221.95683289 339.30334473]
[219.71734619 352.80856323]
[213.73396301 365.10250854]
[204.51031494 375.17239380]
[192.81655884 382.19174194]
[196.40629578 396.75588989]
[199.99603271 411.32000732]
[203.58575439 425.88412476]
[218.21595764 430.77911377]
[227.85942078 442.82101440]
[229.43894958 458.16729736]
[222.45051575 471.92105103]
[209.12411499 479.69345093]
[193.71214294 479.00442505]
[181.13250732 470.07376099]
[175.39933777 455.75125122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[23 71]
[24 70]
[25 69]
[26 64]
[27 63]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[39 55]
[40 54]
[41 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
