%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGUGCUCCUGCCCCGGGAAGAGGCUCAGCACAGAAGGAGGAAGGACAGCACAGCUGACAGCCGUGCUCAGACAGCUUCUGGAUCCCAGGCUCAUCUCCACAGAGGAGAACACACAGGCAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[87.98007202 310.07641602]
[75.66535187 301.11718750]
[68.06494904 287.92047119]
[66.49569702 272.77261353]
[71.22946930 258.29809570]
[81.44611359 247.00474548]
[95.37552643 240.84915161]
[95.37552643 225.84915161]
[95.37552643 210.84915161]
[95.37552643 195.84915161]
[95.19837189 180.85020447]
[94.84409332 165.85438538]
[94.48980713 150.85856628]
[94.13552856 135.86276245]
[71.57214355 110.65952301]
[81.21429443 84.45687866]
[73.15895081 71.80335999]
[59.22100830 64.31708527]
[58.91310501 49.42566681]
[50.85776520 36.77215195]
[42.80242157 24.11863518]
[34.74707794 11.46512032]
[26.24855042 -0.89509946]
[17.31750679 -12.94650936]
[8.38646507 -24.99791908]
[-0.54457682 -37.04932785]
[-9.47561932 -49.10073853]
[-18.40666199 -61.15214920]
[-27.33770370 -73.20355988]
[-48.51891708 -80.36442566]
[-50.66365433 -101.86636353]
[-60.69183350 -113.02143097]
[-70.72000885 -124.17650604]
[-80.74819183 -135.33157349]
[-90.77636719 -146.48664856]
[-92.19734955 -131.55410767]
[-102.74420166 -120.88808441]
[-117.65983582 -119.29942322]
[-130.21665955 -127.50466919]
[-134.75102234 -141.80291748]
[-129.21771240 -155.74502563]
[-116.11249542 -163.04251099]
[-101.34756470 -160.40457153]
[-109.40290833 -173.05809021]
[-123.37982178 -171.73161316]
[-136.49496460 -176.55323792]
[-146.19180298 -186.52200317]
[-150.60664368 -199.63966370]
[-148.92657471 -213.31111145]
[-141.53857422 -224.85777283]
[-149.29280090 -237.69801331]
[-157.04704285 -250.53825378]
[-164.80128479 -263.37847900]
[-178.16506958 -273.81140137]
[-171.83935547 -289.54104614]
[-154.97329712 -287.81692505]
[-151.96102905 -271.13272095]
[-144.20680237 -258.29248047]
[-136.45256042 -245.45223999]
[-128.69833374 -232.61199951]
[-112.59973145 -233.33886719]
[-98.23587799 -225.82905579]
[-89.54613495 -212.03604126]
[-88.96693420 -195.65058899]
[-96.74938965 -181.11343384]
[-88.69404602 -168.45991516]
[-79.62129974 -156.51483154]
[-69.59311676 -145.35975647]
[-59.56494141 -134.20468140]
[-49.53676224 -123.04961395]
[-39.50858307 -111.89453888]
[-31.52625084 -113.19111633]
[-23.60359955 -111.14887238]
[-17.09377670 -106.03812408]
[-13.13993740 -98.65969849]
[-12.47485542 -90.22016144]
[-15.28629398 -82.13460541]
[-6.35525131 -70.08319092]
[2.57579088 -58.03178024]
[11.50683308 -45.98037338]
[20.43787575 -33.92896271]
[29.36891747 -21.87755203]
[38.29996109 -9.82614136]
[41.81293488 -8.96713257]
[45.06212234 -6.30638266]
[47.17846298 -1.99795341]
[47.40059280 3.40977740]
[55.45593643 16.06329155]
[63.51128006 28.71680832]
[71.56661987 41.37032318]
[84.92839813 47.95153046]
[85.81246948 63.74801636]
[93.86781311 76.40153503]
[103.29109192 73.42947388]
[114.00039673 74.41517639]
[124.28485870 79.84937286]
[132.27569580 89.47731781]
[136.26856995 102.26277924]
[150.80957031 105.94506073]
[165.35058594 109.62734222]
[179.89158630 113.30962372]
[194.43258667 116.99190521]
[208.89498901 110.04796600]
[223.27789307 117.15512085]
[226.54795837 132.86137390]
[216.19668579 145.11822510]
[200.16465759 144.52326965]
[190.75030518 131.53291321]
[176.20930481 127.85063171]
[161.66830444 124.16834259]
[147.12728882 120.48606110]
[132.58628845 116.80377960]
[126.72254944 121.47995758]
[139.24113464 129.74342346]
[135.25053406 144.20286560]
[120.26564026 144.87576294]
[114.99507904 130.83230591]
[109.13134766 135.50846863]
[109.48562622 150.50428772]
[109.83990479 165.50010681]
[110.19419098 180.49592590]
[113.55165100 189.09599304]
[110.37552643 195.84915161]
[110.37552643 210.84915161]
[110.37552643 225.84915161]
[110.37552643 240.84915161]
[124.30494690 247.00474548]
[134.52159119 258.29809570]
[139.25535583 272.77261353]
[137.68611145 287.92047119]
[130.08570862 301.11718750]
[117.77098083 310.07641602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 126]
[8 125]
[9 124]
[10 123]
[11 121]
[12 120]
[13 119]
[14 118]
[16 93]
[17 92]
[19 90]
[20 89]
[21 88]
[22 87]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[43 66]
[44 65]
[50 60]
[51 59]
[52 58]
[53 57]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
