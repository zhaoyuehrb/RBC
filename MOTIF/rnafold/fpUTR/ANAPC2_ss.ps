%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUGGCUGCGCGUGCAGACGUGCGUCAUCGCCGCGCGCCGCGCCGAGCGAAUCUCGGAGUCGGUGGGUGCAG\
) } def
/len { sequence length } bind def

/coor [
[58.65931320 135.97933960]
[50.56745148 132.95538330]
[44.53033829 126.91207886]
[29.86701012 130.07226562]
[15.20368099 133.23245239]
[0.54035240 136.39263916]
[-14.12297630 139.55282593]
[-22.13207054 144.55743408]
[-29.47525406 142.52198792]
[-44.25949478 145.05699158]
[-59.04373169 147.59201050]
[-73.82797241 150.12702942]
[-88.61220551 152.66203308]
[-103.39644623 155.19705200]
[-115.65579987 166.08926392]
[-131.13096619 160.66239929]
[-133.90243530 144.49913025]
[-121.11915588 134.22685242]
[-105.93145752 140.41281128]
[-91.14722443 137.87779236]
[-76.36298370 135.34278870]
[-61.57874298 132.80776978]
[-46.79450607 130.27276611]
[-32.01026535 127.73774719]
[-17.28316498 124.88950348]
[-2.61983657 121.72931671]
[12.04349232 118.56912994]
[26.70682144 115.40893555]
[41.37014771 112.24874878]
[55.26674271 95.83424377]
[76.81964874 101.26295471]
[90.73798370 95.67010498]
[96.65502930 89.81391907]
[105.36764526 90.14911652]
[119.51080322 85.15201569]
[129.94506836 73.25930786]
[144.52293396 76.31467438]
[158.66609192 71.31757355]
[172.80926514 66.32048035]
[186.95242310 61.32337952]
[200.98632812 56.02721786]
[214.90466309 50.43436813]
[224.82479858 38.10952759]
[239.51919556 40.54343796]
[253.43753052 34.95059204]
[267.35586548 29.35774612]
[281.27420044 23.76489830]
[295.19253540 18.17205048]
[302.78607178 4.03989840]
[318.59469604 1.30738497]
[330.49139404 12.07066059]
[329.35003662 28.07306099]
[316.04617310 37.03891373]
[300.78536987 32.09038544]
[286.86703491 37.68323517]
[272.94869995 43.27608109]
[259.03036499 48.86892700]
[245.11203003 54.46177673]
[236.18743896 66.38657379]
[220.49751282 64.35270691]
[206.57917786 69.94554901]
[201.39344788 75.52887726]
[191.94952393 75.46654510]
[177.80635071 80.46363831]
[163.66319275 85.46073914]
[149.52003479 90.45783234]
[140.09738159 101.99311829]
[124.50790405 99.29518127]
[110.36473846 104.29227448]
[96.33083344 109.58843994]
[82.41249847 115.18128967]
[80.48404694 123.99636078]
[75.12677765 131.13749695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[31 71]
[32 70]
[34 69]
[35 68]
[37 66]
[38 65]
[39 64]
[40 63]
[41 61]
[42 60]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
