%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAGUGCGUGUUGACGUCAUGCUGCGUGCGGGCCGGUGCGGAAUCGCUCCUUCAACUCCGCGGGGCAGUAGGAGUUAGUUAGCAAAGAGCCGAGGCCGGGCGCGCGACCCUCGUCCUUCUGCCCCUGGCCGCACACUUUGCGCACAUCUCUUUUUCUGC\
) } def
/len { sequence length } bind def

/coor [
[87.65525055 217.78526306]
[90.35527802 202.91242981]
[97.32067108 189.49696350]
[107.93207550 178.73176575]
[121.24593353 171.57406616]
[118.33752441 156.85873413]
[115.42911530 142.14340210]
[112.52070618 127.42806244]
[98.69635010 128.73699951]
[86.42020416 123.77780914]
[78.22949219 114.21098328]
[75.52085876 102.57339478]
[60.83459473 99.52155304]
[46.14833450 96.46971893]
[31.46207237 93.41787720]
[16.77581024 90.36603546]
[1.69008124 95.13377380]
[-9.19678783 84.96886444]
[-23.88304901 81.91703033]
[-32.97386169 83.23717499]
[-38.82481003 78.65970612]
[-53.44873047 75.32189178]
[-68.07264709 71.98407745]
[-82.69656372 68.64626312]
[-97.32048798 65.30844879]
[-111.94440460 61.97063446]
[-129.38075256 67.81828308]
[-141.79489136 55.44490051]
[-156.48115540 52.39305878]
[-171.16741943 49.34122086]
[-185.85366821 46.28937912]
[-200.53993225 43.23753738]
[-215.22619629 40.18569946]
[-231.93707275 52.86917114]
[-252.30726624 49.25632858]
[-263.32260132 32.08939362]
[-278.20208740 30.19197464]
[-292.87014771 36.12147522]
[-304.51644897 26.83639336]
[-319.39596558 24.93897247]
[-334.27548218 23.04155350]
[-349.18334961 29.87437439]
[-362.39620972 20.16086388]
[-360.32180786 3.89344549]
[-345.09408569 -2.19335341]
[-332.37805176 8.16204357]
[-317.49853516 10.05946350]
[-302.61901855 11.95688438]
[-289.01525879 5.89166784]
[-276.30468750 15.31246567]
[-261.42517090 17.20988655]
[-256.08062744 9.39588833]
[-248.19319153 4.05594826]
[-238.83966064 1.97058880]
[-229.31605530 3.47245622]
[-220.95805359 8.39409637]
[-214.95364380 16.08544731]
[-212.17436218 25.49943733]
[-197.48809814 28.55127716]
[-182.80183411 31.60311699]
[-168.11557007 34.65495682]
[-153.42930603 37.70679855]
[-138.74305725 40.75863647]
[-128.42797852 34.37958908]
[-116.14182281 36.83787918]
[-108.60659027 47.34671783]
[-93.98267365 50.68453217]
[-79.35874939 54.02234268]
[-64.73483276 57.36015701]
[-50.11091614 60.69797134]
[-35.48699570 64.03578949]
[-20.83120918 67.23076630]
[-6.14494753 70.28260803]
[7.89032173 65.29657745]
[19.82765007 75.67977142]
[34.51391220 78.73161316]
[49.20017242 81.78345490]
[63.88643646 84.83529663]
[78.57269287 87.88713074]
[89.35800171 76.27965546]
[105.78388977 73.23544312]
[121.56204987 80.95812225]
[130.03178406 97.32449341]
[144.26101685 92.57803345]
[158.49024963 87.83157349]
[172.71949768 83.08511353]
[186.94873047 78.33865356]
[201.17796326 73.59219360]
[213.79443359 57.91259003]
[232.55418396 62.47575760]
[246.58740234 57.17774200]
[249.95341492 53.05646515]
[254.15286255 50.88954926]
[258.28793335 50.66390610]
[261.59976196 52.00675583]
[275.91888428 47.53883743]
[290.23803711 43.07091904]
[304.55715942 38.60300064]
[318.87628174 34.13507843]
[333.19543457 29.66716003]
[347.51455688 25.19924164]
[358.38369751 13.70260620]
[372.83792114 17.29774284]
[387.15704346 12.82982349]
[401.47619629 8.36190414]
[414.92919922 -8.27595806]
[434.87921143 -3.09505510]
[448.91244507 -8.39307022]
[462.94564819 -13.69108582]
[472.91198730 -26.71429253]
[489.13641357 -24.32676125]
[494.92861938 -8.98458195]
[484.33007812 3.52952933]
[468.24365234 0.34212592]
[454.21044922 5.64014149]
[440.17724609 10.93815708]
[437.85949707 19.60006142]
[431.70095825 26.30587959]
[423.00747681 29.44479370]
[413.71185303 28.18312263]
[405.94412231 22.68104172]
[391.62496948 27.14896011]
[377.30584717 31.61688042]
[367.46090698 42.79393768]
[351.98248291 39.51837921]
[337.66336060 43.98629761]
[323.34420776 48.45421600]
[309.02508545 52.92213821]
[294.70593262 57.39005661]
[280.38681030 61.85797501]
[266.06765747 66.32589722]
[251.88542175 71.21095276]
[237.85220337 76.50897217]
[234.47077942 86.21686554]
[226.11254883 92.57243347]
[215.41458130 93.26506042]
[205.92442322 87.82142639]
[191.69519043 92.56788635]
[177.46595764 97.31434631]
[163.23670959 102.06080627]
[149.00747681 106.80726624]
[134.77824402 111.55372620]
[127.23603821 124.51965332]
[130.14445496 139.23498535]
[133.05285645 153.95031738]
[135.96127319 168.66566467]
[150.99705505 170.22019958]
[164.90599060 176.13908386]
[176.45127869 185.89599609]
[184.60635376 198.62338257]
[188.64604187 213.18951416]
[188.21116638 228.29919434]
[183.34036255 242.60887146]
[174.46676636 254.84613037]
[162.37940979 263.92285156]
[148.15307617 269.03195190]
[133.05276489 269.71911621]
[118.42119598 265.92324829]
[105.55939484 257.98187256]
[95.61102295 246.60113525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 146]
[6 145]
[7 144]
[8 143]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[18 73]
[19 72]
[21 71]
[22 70]
[23 69]
[24 68]
[25 67]
[26 66]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[83 142]
[84 141]
[85 140]
[86 139]
[87 138]
[88 137]
[90 133]
[91 132]
[95 131]
[96 130]
[97 129]
[98 128]
[99 127]
[100 126]
[101 125]
[103 123]
[104 122]
[105 121]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
