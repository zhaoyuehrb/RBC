%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUUAAAACCGUUCUCCCAUUAAUGCCAAAGCCAGCAGAGGUACCAACUAUAGCUCCACGGCCAGAAGAUACCAGCAGCUCUGCCUUUACUGAAAUUUCAUCUGGAGAAAGGUCCACAGCACA\
) } def
/len { sequence length } bind def

/coor [
[99.73388672 361.18420410]
[86.82809448 353.33453369]
[76.65760803 342.16592407]
[70.04690552 328.58374023]
[67.53187561 313.68908691]
[69.31640625 298.68933105]
[75.25583649 284.80050659]
[84.86868286 273.14846802]
[97.37567139 264.67782593]
[111.76291656 260.07522583]
[111.38895416 245.07987976]
[111.01499176 230.08454895]
[102.96279907 217.55412292]
[110.35364532 203.56535339]
[109.97968292 188.57000732]
[109.60572815 173.57467651]
[109.23176575 158.57933044]
[108.85780334 143.58399963]
[108.48384857 128.58865356]
[102.98595428 123.48736572]
[101.86515808 138.44543457]
[89.47174835 146.89547729]
[75.13802338 142.47459412]
[69.65733337 128.51171875]
[77.15667725 115.52095032]
[91.99018097 113.28477478]
[86.49228668 108.18347931]
[71.51093292 108.93116760]
[58.03628922 118.27814484]
[43.32169724 111.03847504]
[42.50426483 94.65971375]
[56.42490005 85.99092102]
[70.76324463 93.94981384]
[85.74459839 93.20212555]
[96.48260498 82.72856903]
[97.60355377 67.77051544]
[98.72450256 52.81245804]
[92.04013062 38.47266388]
[100.70690155 26.35918808]
[101.82785797 11.40113163]
[102.94880676 -3.55692554]
[104.06975555 -18.51498222]
[105.19071198 -33.47303772]
[106.31166077 -48.43109512]
[107.43260956 -63.38915253]
[101.83551025 -67.01222229]
[97.54669952 -72.06379700]
[94.91234589 -78.09987640]
[94.13456726 -84.59864044]
[95.25606537 -91.00562286]
[98.15851593 -96.78096008]
[102.57452393 -101.44490814]
[108.11215973 -104.61767578]
[114.28961182 -106.05027771]
[117.99097443 -120.58644104]
[121.69233704 -135.12260437]
[125.39369965 -149.65875244]
[115.78687286 -159.62930298]
[112.41574097 -172.94630432]
[116.06335449 -186.07756042]
[125.66569519 -195.59500122]
[138.61903381 -199.06954956]
[142.68164062 -213.50891113]
[131.90020752 -224.44766235]
[128.04811096 -239.31564331]
[132.16156006 -254.11344910]
[143.13404846 -264.86053467]
[158.01403809 -268.66601562]
[172.79887390 -264.50619507]
[183.51152039 -253.50009155]
[187.27033997 -238.60824585]
[183.06420898 -223.83651733]
[172.02455139 -213.15841675]
[157.12100220 -209.44630432]
[153.05839539 -195.00694275]
[163.62234497 -182.50782776]
[164.70498657 -166.01246643]
[155.68659973 -151.96125793]
[139.92985535 -145.95739746]
[136.22850037 -131.42123413]
[132.52713013 -116.88507843]
[128.82577515 -102.34891510]
[138.53231812 -80.64266205]
[122.39067078 -62.26820374]
[121.26972198 -47.31014633]
[120.14876556 -32.35208893]
[119.02781677 -17.39403152]
[117.90686035 -2.43597412]
[116.78591156 12.52208328]
[115.66496277 27.48014069]
[122.42951965 40.75003433]
[113.68256378 53.93340683]
[112.56161499 68.89146423]
[111.44065857 83.84952545]
[120.10877991 71.60764313]
[132.94599915 63.84839249]
[147.81417847 61.86413574]
[162.23692322 65.98535919]
[173.81201172 75.52564240]
[180.61155701 88.89599609]
[181.50303650 103.86947632]
[176.33796692 117.95216370]
[165.97662354 128.79847717]
[152.14476013 134.60189819]
[137.14617920 134.39581299]
[123.47917938 128.21469116]
[123.85314178 143.21003723]
[124.22710419 158.20536804]
[124.60106659 173.20071411]
[124.97502136 188.19604492]
[125.34898376 203.19139099]
[133.42793274 216.79437256]
[126.01033020 229.71058655]
[126.38429260 244.70591736]
[126.75825500 259.70126343]
[141.35704041 263.58099365]
[154.27070618 271.41769409]
[164.45240784 282.57608032]
[171.07675171 296.15161133]
[173.60673523 311.04373169]
[171.83728027 326.04525757]
[165.91180420 339.94006348]
[156.31066895 351.60174561]
[143.81219482 360.08496094]
[129.42958069 364.70199585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 115]
[11 114]
[12 113]
[14 111]
[15 110]
[16 109]
[17 108]
[18 107]
[19 106]
[27 34]
[28 33]
[35 94]
[36 93]
[37 92]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[54 82]
[55 81]
[56 80]
[57 79]
[62 75]
[63 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
