%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAGGGCUCCCGCGGGCGUCACUCCGGCCAUCGUCCCCACCUCCACCUGGGCCGCCCGGCAGGCAGGCGACGGAGGCCCGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[93.60254669 240.02305603]
[83.16927338 251.67126465]
[67.68235779 253.83674622]
[54.45423508 245.49703979]
[49.73083115 230.58987427]
[55.74238968 216.15397644]
[69.65043640 209.00552368]
[72.80362701 194.34069824]
[75.95682526 179.67585754]
[79.11001587 165.01103210]
[82.26321411 150.34619141]
[85.41640472 135.68135071]
[88.56959534 121.01652527]
[91.72279358 106.35168457]
[90.12563324 107.42986298]
[88.50745392 108.47826385]
[73.52848053 109.27211761]
[58.54949951 110.06597137]
[48.16896057 121.98318481]
[32.39654541 122.98641205]
[20.58974838 112.48046112]
[19.75333023 96.69831848]
[30.38352585 85.00325012]
[46.17362595 84.33374023]
[57.75564957 95.08699036]
[72.73462677 94.29313660]
[87.71360779 93.49928284]
[101.04245758 86.61875916]
[110.36520386 74.86774445]
[119.68795776 63.11672592]
[129.01069641 51.36571121]
[131.52633667 35.74578094]
[145.49795532 30.58408546]
[154.82069397 18.83306885]
[164.14344788 7.08205414]
[173.46620178 -4.66896105]
[182.78894043 -16.41997719]
[191.90284729 -28.33369446]
[200.80508423 -40.40640259]
[198.64393616 -55.83258820]
[207.84405518 -67.94921875]
[222.56387329 -69.91446686]
[231.46611023 -81.98717499]
[240.36833191 -94.05988312]
[237.62689209 -103.49626923]
[239.64401245 -112.97063446]
[245.81098938 -120.25839996]
[254.56097412 -123.71247864]
[263.76531982 -122.63464355]
[273.89373779 -133.69877625]
[284.02218628 -144.76289368]
[294.15060425 -155.82702637]
[304.27905273 -166.89115906]
[310.51425171 -182.65689087]
[327.38992310 -181.02975464]
[330.49804688 -164.36314392]
[315.34317017 -156.76272583]
[305.21475220 -145.69859314]
[295.08630371 -134.63447571]
[284.95788574 -123.57034302]
[274.82943726 -112.50621796]
[272.54235840 -92.12464905]
[252.44104004 -85.15765381]
[243.53881836 -73.08494568]
[234.63658142 -61.01223755]
[237.10969543 -46.36917496]
[228.25355530 -33.99891663]
[212.87779236 -31.50417328]
[203.97555542 -19.43146324]
[202.50782776 -12.01528645]
[194.53996277 -7.09722805]
[185.21720886 4.65378714]
[175.89445496 16.40480232]
[166.57171631 28.15581894]
[157.24896240 39.90683365]
[155.40016174 54.68625259]
[140.76171875 60.68846130]
[131.43896484 72.43947601]
[122.11622620 84.19049072]
[112.79347229 95.94150543]
[106.38762665 109.50488281]
[103.23443604 124.16971588]
[100.08123779 138.83454895]
[96.92804718 153.49938965]
[93.77484894 168.16421509]
[90.62165833 182.82905579]
[87.46846008 197.49388123]
[84.31526947 212.15872192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[16 27]
[17 26]
[18 25]
[28 80]
[29 79]
[30 78]
[31 77]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 69]
[39 68]
[42 65]
[43 64]
[44 63]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
