%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGAGCGGCGCGGGCGGCCUGGAGCCCCGGGAGCGGCGCGCGCGGUCCCGGCCCAGCGGCUCUCCUGGCCUCGCGCUGCACAUUCUCUCCUGGCGGCGGCGCCACCUGCAGUAGCGUUCGCCCGAAC\
) } def
/len { sequence length } bind def

/coor [
[152.82473755 159.36958313]
[141.84071350 149.15434265]
[127.25170898 146.15266418]
[122.41549683 131.08874512]
[111.43146515 120.87350464]
[100.44744110 110.65826416]
[88.52877045 101.55082703]
[75.78675079 93.63622284]
[63.04473495 85.72161865]
[50.30271530 77.80701447]
[37.56069565 69.89241028]
[24.81867790 61.97780609]
[12.07665920 54.06320572]
[-0.66536003 46.14860153]
[-13.40737915 38.23399734]
[-20.15611267 37.62552643]
[-24.82482910 34.16507339]
[-26.56079865 29.61654854]
[-38.90555573 21.09557724]
[-51.25031281 12.57460594]
[-63.59507370 4.05363464]
[-83.67710114 3.44385147]
[-91.40644836 -14.21525288]
[-104.14846802 -22.12985611]
[-116.89048767 -30.04446030]
[-129.63250732 -37.95906448]
[-142.37452698 -45.87366867]
[-155.11654663 -53.78827286]
[-168.39839172 -60.75911713]
[-182.15026855 -66.74958801]
[-195.90214539 -72.74005890]
[-209.65403748 -78.73052216]
[-223.40591431 -84.72099304]
[-237.15780640 -90.71146393]
[-252.89968872 -89.12926483]
[-261.47796631 -101.30558777]
[-275.22982788 -107.29605103]
[-289.14758301 -100.16648102]
[-304.38037109 -103.70143890]
[-313.73577881 -116.23181915]
[-312.79644775 -131.84117126]
[-302.00588989 -143.15922546]
[-286.45910645 -144.84194946]
[-273.49679565 -136.09480286]
[-269.23937988 -121.04793549]
[-255.48748779 -115.05746460]
[-240.72921753 -117.06814575]
[-231.16732788 -104.46334839]
[-217.41545105 -98.47287750]
[-203.66355896 -92.48240662]
[-189.91168213 -86.49193573]
[-176.15980530 -80.50147247]
[-162.40791321 -74.51100159]
[-166.22724915 -89.01660919]
[-158.86456299 -102.08531189]
[-144.47901917 -106.33460236]
[-131.19702148 -99.36406708]
[-126.52153015 -85.11135101]
[-133.09373474 -71.62779999]
[-147.20193481 -66.53028870]
[-134.45993042 -58.61568832]
[-121.71790314 -50.70108414]
[-108.97588348 -42.78647995]
[-96.23386383 -34.87187576]
[-83.49184418 -26.95727158]
[-73.66828156 -30.19054031]
[-63.48868561 -27.37115097]
[-56.43928909 -19.21065331]
[-55.07410049 -8.29112339]
[-42.72934341 0.22984783]
[-30.38458633 8.75081921]
[-18.03982735 17.27178955]
[-5.49277544 25.49197769]
[7.24924374 33.40658188]
[19.99126244 41.32118607]
[32.73328018 49.23579025]
[45.47529984 57.15039062]
[58.21731949 65.06499481]
[70.95933533 72.97959900]
[83.70135498 80.89420319]
[96.44337463 88.80880737]
[92.87265778 74.24000549]
[98.37444305 60.28542328]
[110.92682648 52.07338333]
[125.91680145 52.62180710]
[137.83552551 61.72915649]
[142.30288696 76.04846954]
[137.67709351 90.31739044]
[125.65815735 99.29208374]
[110.66267395 99.67423248]
[121.64670563 109.88947296]
[132.63073730 120.10470581]
[148.00540161 123.83706665]
[152.05595398 138.17031860]
[163.03997803 148.38555908]
[186.01812744 151.34617615]
[192.57482910 172.81085205]
[204.71008301 181.62762451]
[216.84533691 190.44441223]
[228.98059082 199.26118469]
[241.11584473 208.07797241]
[253.35675049 216.74748230]
[265.70150757 225.26844788]
[278.04626465 233.78941345]
[293.79885864 235.26113892]
[299.87792969 248.85871887]
[312.22268677 257.37969971]
[328.19863892 255.91380310]
[339.20111084 267.58963013]
[336.78997803 283.45046997]
[322.81484985 291.32922363]
[307.99624634 285.18203735]
[303.70172119 269.72445679]
[291.35696411 261.20349121]
[276.48733521 260.34124756]
[269.52529907 246.13417053]
[257.18054199 237.61320496]
[244.83578491 229.09223938]
[237.46931458 227.86927795]
[232.29907227 220.21322632]
[220.16381836 211.39643860]
[208.02856445 202.57966614]
[195.89331055 193.76287842]
[183.75805664 184.94610596]
[177.00321960 187.88186646]
[169.57786560 188.23831177]
[162.44218445 185.92068481]
[156.53620911 181.18313599]
[152.65592957 174.60183716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[4 92]
[5 91]
[6 90]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[18 72]
[19 71]
[20 70]
[21 69]
[23 65]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 118]
[103 117]
[104 116]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
