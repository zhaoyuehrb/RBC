%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCAUUGCACCUUCCUACCCAAGCAGCUUGGUUUUCUUUCGCUUUGACCCUGUAAUUUCUUUCCCACUUCGUUGUCGUCUCUGAAUUACCUUUCUCUUGAUUCUUGCCCAUUAGCAUCCUCCAAUUUCAG\
) } def
/len { sequence length } bind def

/coor [
[66.43151855 153.26307678]
[57.56159592 146.50570679]
[50.02289200 138.28952026]
[44.05188751 128.87226868]
[29.99764252 134.11422729]
[23.37372017 148.21250916]
[9.04604340 153.32839966]
[-4.35368824 146.92660522]
[-18.40793419 152.16857910]
[-17.15621376 166.61712646]
[-19.70075035 180.88246155]
[-25.86041641 193.98516846]
[-35.20609283 205.02728271]
[-47.09056473 213.25389099]
[-60.69334030 218.10476685]
[-75.07728577 219.25239563]
[-89.25320435 216.62422180]
[-102.24784851 210.40711975]
[-113.17074585 201.03411865]
[-121.27521515 189.15428162]
[-135.45022583 194.06030273]
[-149.62524414 198.96632385]
[-163.80024719 203.87234497]
[-177.97526550 208.77836609]
[-190.96569824 219.67263794]
[-205.03031921 210.20570374]
[-199.82684326 194.07003784]
[-182.88128662 194.60334778]
[-168.70626831 189.69734192]
[-154.53125000 184.79132080]
[-140.35624695 179.88529968]
[-126.18123627 174.97927856]
[-127.06719971 159.45278931]
[-123.55686188 144.28755188]
[-115.92445374 130.70429993]
[-104.77636719 119.79882812]
[-91.00296783 112.45346832]
[-75.70748138 109.26578522]
[-60.11766815 110.49996185]
[-45.48721313 116.06488037]
[-32.99496078 125.52085876]
[-23.64989662 138.11433411]
[-9.59565067 132.87236023]
[-3.66108418 119.25926208]
[10.51724625 113.74295807]
[24.75568008 120.05998230]
[38.80992508 114.81801605]
[37.28237152 94.49566650]
[42.32644272 74.75006104]
[53.41362000 57.65017319]
[69.38217163 44.98775101]
[88.55889893 38.08958054]
[108.93443298 37.67845535]
[112.81671906 23.18956947]
[116.69900513 8.70068264]
[120.58129120 -5.78820515]
[124.46357727 -20.27709198]
[128.34587097 -34.76597977]
[132.22814941 -49.25486755]
[119.85732269 -57.98343658]
[111.23541260 -70.39450836]
[107.38719177 -84.97914124]
[108.75843811 -99.97212982]
[115.16444397 -113.56568146]
[125.81457520 -124.12736511]
[139.40983582 -130.39616394]
[154.30130005 -131.63299561]
[158.18359375 -146.12187195]
[150.06538391 -159.68176270]
[153.99420166 -174.98991394]
[167.63916016 -182.96430969]
[182.90492249 -178.87385559]
[190.73460388 -165.14535522]
[186.48298645 -149.92369080]
[172.67247009 -142.23959351]
[168.79019165 -127.75070190]
[181.06816101 -119.23384857]
[189.70761108 -107.00727844]
[193.65003967 -92.53552246]
[192.40103149 -77.56016541]
[186.09207153 -63.89022827]
[175.46710205 -53.18368149]
[161.79476929 -46.74633026]
[146.71704102 -45.37258148]
[142.83474731 -30.88369370]
[138.95246887 -16.39480591]
[135.07017517 -1.90591931]
[131.18789673 12.58296776]
[127.30561066 27.07185555]
[123.42332458 41.56074142]
[134.99406433 47.66249466]
[145.05413818 56.02360535]
[153.16928101 66.28313446]
[158.98915100 77.99818420]
[162.26251221 90.66304016]
[162.84806824 103.73095703]
[160.72052002 116.63780975]
[155.97174072 128.82643127]
[168.39398193 137.23403931]
[180.81622314 145.64166260]
[194.01522827 138.05563354]
[209.13740540 136.95709229]
[223.17947388 142.51049805]
[233.37597656 153.56455994]
[237.74388123 167.89044189]
[235.46803284 182.63107300]
[247.89027405 191.03868103]
[260.31250000 199.44630432]
[275.78179932 196.20959473]
[288.96304321 204.92913818]
[292.03601074 220.43179321]
[283.17761230 233.52011108]
[267.64331055 236.42901611]
[254.64939880 227.43270874]
[251.90489197 211.86854553]
[239.48266602 203.46092224]
[227.06042480 195.05331421]
[214.22154236 202.64466858]
[199.29846191 203.91404724]
[185.24656677 198.55632019]
[174.87205505 187.58409119]
[170.27156067 173.13687134]
[172.40859985 158.06390381]
[159.98637390 149.65628052]
[147.56413269 141.24867249]
[139.54122925 148.99275208]
[130.27799988 155.20001221]
[120.06499481 159.67575073]
[109.22257996 162.27955627]
[98.09087372 162.92974854]
[87.01905823 161.60595703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 47]
[5 46]
[8 43]
[9 42]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[67 76]
[68 75]
[98 125]
[99 124]
[100 123]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
