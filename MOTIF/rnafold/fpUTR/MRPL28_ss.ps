%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGCGGUGGGAGGAGGGCCAGGCGCGGCAGAUCGGCUUCCGGUUCCGGUGGGCUCUGAACCCUGAAAGGCUCGCG\
) } def
/len { sequence length } bind def

/coor [
[96.24499512 297.68652344]
[102.29133606 281.84738159]
[102.29133606 266.84738159]
[94.55403137 254.12011719]
[102.29133606 240.31994629]
[102.29133606 225.31994629]
[102.29133606 210.31994629]
[86.68792725 200.56315613]
[79.76723480 183.35517883]
[84.34128571 165.23117065]
[98.82135010 153.18284607]
[97.03607941 138.28945923]
[95.25080109 123.39608765]
[82.44966888 116.18386841]
[76.29644775 102.84134674]
[79.12191772 88.42255402]
[89.85581970 78.38919067]
[88.07054138 63.49580765]
[86.28527069 48.60242462]
[84.50000000 33.70904541]
[82.71472168 18.81566429]
[80.92945099 3.92228246]
[71.18177032 -4.79226971]
[70.13513947 -17.41965485]
[77.80970764 -26.98839188]
[76.61795044 -41.94097519]
[72.72701263 -50.51304626]
[75.68817139 -57.50970078]
[75.09181976 -72.49784088]
[74.49547577 -87.48598480]
[71.07548523 -93.65984344]
[71.44916534 -99.67934418]
[74.49547577 -103.67868042]
[75.09181976 -118.66681671]
[75.68817139 -133.65495300]
[76.28451538 -148.64309692]
[76.88085938 -163.63124084]
[77.47721100 -178.61938477]
[72.06536102 -194.68637085]
[86.00629425 -204.33451843]
[99.13661957 -193.60926819]
[92.46535492 -178.02304077]
[91.86900330 -163.03489685]
[91.27265930 -148.04675293]
[90.67630768 -133.05860901]
[90.07996368 -118.07047272]
[89.48361206 -103.08232880]
[89.48361206 -88.08232880]
[90.07996368 -73.09418488]
[90.67630768 -58.10604858]
[91.57053375 -43.13272476]
[92.76229095 -28.18014336]
[103.50946045 -14.45583725]
[95.82283020 2.13700962]
[97.60810852 17.03039169]
[99.39337921 31.92377281]
[101.17864990 46.81715393]
[102.96392059 61.71053314]
[104.74919891 76.60391235]
[117.55033112 83.81613159]
[123.70355225 97.15865326]
[120.87808228 111.57744598]
[110.14418030 121.61080933]
[111.92945862 136.50419617]
[113.71472931 151.39756775]
[124.96823883 155.33689880]
[133.80952454 163.25823975]
[138.91152954 173.91877747]
[139.52922058 185.66880798]
[135.60804749 196.70700073]
[127.78627014 205.35656738]
[117.29133606 210.31994629]
[117.29133606 225.31994629]
[117.29133606 240.31994629]
[125.02863312 254.12011719]
[117.29133606 266.84738159]
[117.29133606 281.84738159]
[123.33766937 297.68652344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[5 74]
[6 73]
[7 72]
[11 65]
[12 64]
[13 63]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[25 52]
[26 51]
[28 50]
[29 49]
[30 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
