%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCACGGCCGGAGUUGGUGGUCUGGGAACCCACGUGGGCUGGGUUUCGGAUUGCUCUGCUGGUCCGGCCGCUGGAGCGCCCACCCUGGCCUAGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[89.84091187 137.91413879]
[103.77311707 132.35594177]
[118.64468384 134.30364990]
[109.08332062 122.74595642]
[99.52196503 111.18826294]
[89.78024292 99.78217316]
[79.86056519 88.53050232]
[69.94088745 77.27883911]
[60.02120590 66.02716827]
[50.10152817 54.77550507]
[40.18185043 43.52383804]
[30.26217270 32.27217484]
[20.34249496 21.02050781]
[9.90380287 10.24861336]
[-1.03072667 -0.01959361]
[-18.98440742 -3.71468782]
[-23.57505226 -20.57220459]
[-34.82671738 -30.49188232]
[-46.07838440 -40.41156006]
[-57.33005142 -50.33123779]
[-68.58171844 -60.25091553]
[-79.83338165 -70.17059326]
[-91.08504486 -80.09027100]
[-102.33671570 -90.00994873]
[-113.58837891 -99.92962646]
[-124.84004974 -109.84930420]
[-133.51228333 -113.26252747]
[-136.28303528 -120.26162720]
[-147.21757507 -130.52983093]
[-158.15209961 -140.79804993]
[-169.08662415 -151.06625366]
[-180.02116394 -161.33445740]
[-190.95568848 -171.60266113]
[-206.46080017 -169.57157898]
[-219.61610413 -178.02571106]
[-224.21003723 -192.97328186]
[-218.07350159 -207.35649109]
[-204.10398865 -214.38404846]
[-188.89746094 -210.73774719]
[-179.63397217 -198.13925171]
[-180.68748474 -182.53718567]
[-169.75296021 -172.26898193]
[-158.81842041 -162.00077820]
[-147.88389587 -151.73257446]
[-136.94937134 -141.46437073]
[-126.01483154 -131.19616699]
[-114.92037201 -121.10097504]
[-103.66870117 -111.18129730]
[-92.41703796 -101.26161957]
[-81.16536713 -91.34194183]
[-69.91370392 -81.42225647]
[-58.66203690 -71.50257874]
[-47.41037369 -61.58290482]
[-36.15870667 -51.66322708]
[-24.90703964 -41.74354935]
[-13.65537453 -31.82386971]
[-1.45313907 -32.24236679]
[8.01770973 -23.91277122]
[9.23748016 -10.95412254]
[20.17200851 -0.68591642]
[23.86595345 -0.50090706]
[27.63138008 1.60033941]
[30.51169586 5.61860704]
[31.59416008 11.10082912]
[41.51383972 22.35249519]
[51.43351746 33.60416031]
[61.35319519 44.85582733]
[71.27287292 56.10749435]
[81.19255066 67.35916138]
[91.11222839 78.61082458]
[101.03190613 89.86249542]
[108.43663788 93.42819214]
[111.07965851 101.62689972]
[120.64102173 113.18460083]
[130.20237732 124.74229431]
[141.45404053 134.66197205]
[154.11895752 142.69937134]
[163.21838379 144.71394348]
[167.04992676 151.19343567]
[179.45613098 159.62467957]
[191.86233521 168.05592346]
[207.33778381 164.84867859]
[220.50238037 173.59330750]
[223.54583740 189.10179138]
[214.66250610 202.17321777]
[199.12272644 205.05253601]
[186.14595032 196.03150940]
[183.43109131 180.46214294]
[171.02488708 172.03088379]
[158.61866760 163.59963989]
[146.08155823 155.36428833]
[133.41664124 147.32688904]
[137.21290588 161.83856201]
[133.44396973 176.35734558]
[123.06853485 187.19017029]
[108.72573853 191.58155823]
[94.06389618 188.41445923]
[82.81247711 178.49450684]
[77.83345032 164.34497070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 60]
[15 59]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[76 92]
[77 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
