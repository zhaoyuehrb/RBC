%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACCGAACCCCGCCCGCGCCGGGAGCAUCUCGCGUCCCCAACGGGCCCCCGGGUCGGUUUCCGCGGUGGCC\
) } def
/len { sequence length } bind def

/coor [
[100.09784698 373.51974487]
[96.73896790 357.83224487]
[107.02073669 345.51702881]
[107.02073669 330.51702881]
[107.02073669 315.51702881]
[107.02073669 300.51702881]
[107.02073669 285.51702881]
[107.02073669 270.51702881]
[91.97689056 262.66815186]
[82.78489685 248.30195618]
[81.95420074 231.17990112]
[89.79142761 215.83644104]
[104.29618073 206.37809753]
[103.04101562 191.43070984]
[101.78584290 176.48330688]
[100.21791840 161.56547546]
[98.33792114 146.68376160]
[96.45792389 131.80204773]
[94.57792664 116.92031860]
[82.48097992 102.96311951]
[89.31498718 85.80399323]
[86.19631195 71.13177490]
[83.07763672 56.45956039]
[78.44238281 42.19371414]
[72.34133148 28.49053192]
[66.24028778 14.78734970]
[60.13923645 1.08416808]
[53.75254822 -12.48823738]
[47.08301926 -25.92391396]
[32.39773560 -32.38317108]
[28.43111420 -47.92811966]
[38.22600555 -60.63401031]
[54.26861191 -60.75396729]
[64.25241089 -48.19596863]
[60.51869583 -32.59344101]
[67.18822479 -19.15776443]
[73.15805817 -14.42977810]
[73.84241486 -5.01688147]
[79.94346619 8.68630028]
[86.04451752 22.38948250]
[92.14556885 36.09266281]
[94.66723633 36.81566620]
[97.05336761 38.60458374]
[98.89535522 41.41025543]
[99.81052399 45.03746033]
[99.49155426 49.15818024]
[97.74985504 53.34088516]
[100.86853027 68.01309967]
[103.98720551 82.68531036]
[112.92753601 87.81086731]
[117.51902008 97.03688049]
[116.21706390 107.25968933]
[109.45964050 115.04032135]
[111.33964539 129.92204285]
[113.21964264 144.80375671]
[115.09963989 159.68548584]
[119.39040375 168.09144592]
[116.73323822 175.22814941]
[117.98840332 190.17553711]
[119.24357605 205.12292480]
[131.69012451 209.62944031]
[141.40133667 218.55488586]
[146.89984131 230.49172974]
[147.36836243 243.57824707]
[142.77098083 255.78890991]
[133.85308838 265.24783325]
[122.02073669 270.51702881]
[122.02073669 285.51702881]
[122.02073669 300.51702881]
[122.02073669 315.51702881]
[122.02073669 330.51702881]
[122.02073669 345.51702881]
[132.30250549 357.83224487]
[128.94361877 373.51974487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[8 67]
[13 60]
[14 59]
[15 58]
[16 56]
[17 55]
[18 54]
[19 53]
[21 49]
[22 48]
[23 47]
[24 41]
[25 40]
[26 39]
[27 38]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
