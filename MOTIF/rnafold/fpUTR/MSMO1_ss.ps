%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCUCCACCCCCAAGCCAGGCGAGGCAGGUUCCGAGGUUGGAACACCUGGCGAGUCCUCGGUGUCGGUGGCCGGCAGUCAUCUCGCGGCCGUUCAGAAUUAUAAGGCUGUCUGCAGAGAUUUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[192.86019897 150.69969177]
[205.42462158 142.50585938]
[191.20390320 137.73396301]
[176.98316956 132.96208191]
[162.76243591 128.19020081]
[148.54171753 123.41830444]
[134.32098389 118.64642334]
[120.04405975 114.04538727]
[105.71299744 109.61587524]
[91.32984924 105.35852051]
[76.89669037 101.27393341]
[61.51110458 104.96098328]
[51.37169647 94.05035400]
[36.93853760 89.96576691]
[28.49210548 102.50032806]
[16.60102272 111.79788971]
[2.43756700 116.95782471]
[-12.60688114 117.48661804]
[-27.05853081 113.34507751]
[-39.50555420 104.95087433]
[-48.73601151 93.13652802]
[-53.85585022 79.06679535]
[-54.37549210 64.12387085]
[-68.80865479 60.03928375]
[-84.19423676 63.72632980]
[-94.33364105 52.81570435]
[-108.76680756 48.73111725]
[-123.19996643 44.64653015]
[-132.48330688 50.55108643]
[-143.26197815 50.31934357]
[-151.92065430 44.27383423]
[-155.69064331 34.64612579]
[-169.91136169 29.87423897]
[-184.13209534 25.10235214]
[-198.35282898 20.33046532]
[-212.57354736 15.55857849]
[-226.79428101 10.78669167]
[-242.75086975 14.57078075]
[-253.80795288 2.45992923]
[-248.59097290 -13.08725834]
[-232.46669006 -16.07716751]
[-222.02238464 -3.43403602]
[-207.80166626 1.33785069]
[-193.58093262 6.10973740]
[-179.36021423 10.88162422]
[-165.13948059 15.65351105]
[-150.91874695 20.42539787]
[-132.38394165 15.12498569]
[-119.11537933 30.21336937]
[-104.68222046 34.29795837]
[-90.24905396 38.38254547]
[-75.89582825 34.40334320]
[-64.72406769 45.60612488]
[-50.29090500 49.69071198]
[-42.01776505 37.23614883]
[-30.28422356 27.93592644]
[-16.23156548 22.71070671]
[-1.23162568 22.08400536]
[13.24712944 26.12977409]
[25.78336525 34.46391296]
[35.14239883 46.28071594]
[40.39781189 60.43073654]
[41.02312469 75.53260803]
[55.45628738 79.61719513]
[69.80951691 75.63799286]
[80.98127747 86.84077454]
[95.41443634 90.92536163]
[103.49858093 89.91332245]
[110.14250946 95.28481293]
[124.47357178 99.71432495]
[133.69885254 99.26409149]
[139.09286499 104.42568970]
[153.31359863 109.19757843]
[167.53433228 113.96946716]
[181.75505066 118.74135590]
[195.97578430 123.51323700]
[210.19651794 128.28512573]
[224.72346497 132.02244568]
[239.48149109 134.70585632]
[254.23951721 137.38926697]
[260.73715210 135.47828674]
[266.34820557 136.98089600]
[269.63345337 140.57141113]
[284.24584961 143.95930481]
[298.85824585 147.34719849]
[313.47064209 150.73510742]
[328.08303833 154.12300110]
[342.87216187 156.62925720]
[357.78491211 158.24487305]
[372.69763184 159.86048889]
[387.61038208 161.47612000]
[402.52313232 163.09173584]
[417.43585205 164.70735168]
[424.70108032 151.35501099]
[436.52612305 141.80322266]
[451.10778809 137.50856018]
[466.22241211 139.12594604]
[479.56518555 146.40872192]
[489.10140991 158.24632263]
[493.37689209 172.83361816]
[491.73962402 187.94612122]
[484.43930054 201.27929688]
[472.58917236 210.79994202]
[457.99627686 215.05621338]
[442.88592529 213.39907837]
[429.56237793 206.08122253]
[420.05731201 194.21856689]
[415.82025146 179.62008667]
[400.90750122 178.00447083]
[385.99478149 176.38885498]
[371.08203125 174.77323914]
[356.16928101 173.15760803]
[341.25656128 171.54199219]
[347.97470093 184.95343018]
[341.90167236 198.66905212]
[327.45611572 202.70957947]
[315.14840698 194.13519287]
[313.93344116 179.18447876]
[324.69512939 168.73539734]
[310.08273315 165.34750366]
[295.47033691 161.95960999]
[280.85794067 158.57170105]
[266.24554443 155.18380737]
[251.55610657 152.14729309]
[236.79808044 149.46388245]
[222.04005432 146.78047180]
[229.09022522 160.02037048]
[224.92570496 174.43067932]
[211.89971924 181.86865234]
[197.37274170 178.13139343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 70]
[9 69]
[10 67]
[11 66]
[13 64]
[14 63]
[23 54]
[24 53]
[26 51]
[27 50]
[28 49]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[78 126]
[79 125]
[80 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
