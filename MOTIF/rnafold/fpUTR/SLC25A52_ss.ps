%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUCCUGCGGGGCGCCGGCGGCGAUGGGUUGGGGAAAUGGACGCCUGGAGAACGGAAAUCCAGUUAUCAAAAUGGACUCGGGAAGAGAGAACCUAACAGAACAAUAACAAUGGAAGAAAUUGGGAACAUUAUCACAAAGCUAUCAUCCUGCCAAACUCCAGGCUCAGAUGAUGUCACAGGUUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[89.88320923 127.91944885]
[85.48445892 142.25997925]
[85.95878601 151.40051270]
[80.89260864 156.80017090]
[76.25735474 171.06600952]
[71.62210083 185.33186340]
[66.98684692 199.59771729]
[70.92382812 215.51727295]
[58.91959763 226.69001770]
[43.32308197 221.62240601]
[40.17863846 205.52754211]
[52.72100067 194.96246338]
[57.35625458 180.69660950]
[61.99150848 166.43075562]
[66.62676239 152.16491699]
[71.14392090 137.86123657]
[75.54267120 123.52069855]
[73.72032166 98.53534698]
[88.03972626 85.61342621]
[83.87868500 71.20211792]
[79.71763611 56.79081345]
[75.55659485 42.37950897]
[71.39555359 27.96820259]
[65.99906158 20.57548523]
[67.28696442 13.28414536]
[63.36476517 -1.19398808]
[59.44256592 -15.67212200]
[55.52036667 -30.15025520]
[51.59816742 -44.62838745]
[29.76239395 -64.58251190]
[17.07096481 -72.57799530]
[4.37953663 -80.57347107]
[-8.31189251 -88.56894684]
[-21.00332069 -96.56442261]
[-33.69474792 -104.55989838]
[-44.94432068 -94.64484406]
[-59.37950134 -89.22168732]
[-75.22465515 -89.27809906]
[-90.41503143 -95.10689545]
[-102.86578369 -106.22961426]
[-110.75701904 -121.42307281]
[-112.79609680 -138.84991455]
[-127.20739746 -143.01097107]
[-139.44421387 -133.65325928]
[-154.66682434 -133.29942322]
[-167.03262329 -141.87562561]
[-171.91874695 -155.92068481]
[-186.33004761 -160.08172607]
[-200.74136353 -164.24276733]
[-215.15266418 -168.40380859]
[-229.56396484 -172.56484985]
[-241.10957336 -162.33242798]
[-256.35791016 -159.98896790]
[-270.44329834 -166.28225708]
[-278.87112427 -179.20414734]
[-278.95211792 -194.63130188]
[-270.66043091 -207.64096069]
[-256.64190674 -214.08180237]
[-241.36979675 -211.89859009]
[-229.71739197 -201.78794861]
[-225.40292358 -186.97616577]
[-210.99162292 -182.81512451]
[-196.58032227 -178.65406799]
[-182.16900635 -174.49302673]
[-167.75770569 -170.33198547]
[-156.13711548 -179.61097717]
[-141.10308838 -180.27590942]
[-128.41191101 -171.86238098]
[-123.04635620 -157.42227173]
[-108.63504791 -153.26123047]
[-103.55543518 -158.77915955]
[-114.59129333 -168.93838501]
[-125.62715912 -179.09759521]
[-136.66285706 -189.25698853]
[-126.50329590 -200.29254150]
[-115.46793365 -190.13345337]
[-104.43207550 -179.97424316]
[-93.39621735 -169.81501770]
[-88.31660461 -175.33294678]
[-93.65351105 -189.35140991]
[-98.99041748 -203.36987305]
[-112.98107910 -211.22105408]
[-115.42350006 -227.07710266]
[-104.44406891 -238.77461243]
[-88.46526337 -237.34025574]
[-79.74465942 -223.87434387]
[-84.97195435 -208.70678711]
[-79.63504028 -194.68832397]
[-74.29813385 -180.66984558]
[-53.47433472 -178.98410034]
[-35.92133713 -169.02627563]
[-24.61950493 -153.17236328]
[-21.19395065 -134.72860718]
[-25.69927406 -117.25132751]
[-13.00784492 -109.25585175]
[-0.31641623 -101.26037598]
[12.37501240 -93.26489258]
[25.06644058 -85.26941681]
[37.75786972 -77.27394104]
[30.45332909 -90.37522888]
[19.86985207 -101.00490570]
[16.45233154 -115.61040497]
[21.22083092 -129.83227539]
[32.75204468 -139.42555237]
[47.60413361 -141.52685547]
[61.34403992 -135.50897217]
[69.87067413 -123.16812134]
[70.63900757 -108.18781281]
[63.41954422 -95.03921509]
[60.03601456 -80.42580414]
[70.01138306 -91.62812805]
[79.98675537 -102.83045197]
[89.96212006 -114.03276825]
[87.52159882 -129.47874451]
[95.62477875 -142.85305786]
[110.44559479 -147.84078979]
[124.98610687 -142.08686829]
[132.38073730 -128.30813599]
[129.13795471 -113.01047516]
[116.78890991 -103.41697693]
[101.16444397 -104.05740356]
[91.18907166 -92.85507965]
[81.21370697 -81.65275574]
[71.23833466 -70.45043945]
[85.36322784 -75.49895477]
[95.69951630 -86.36914825]
[108.71492004 -93.82563782]
[123.32013702 -97.24435425]
[138.29280090 -96.33917999]
[152.37979126 -91.18586731]
[164.40213013 -82.21572113]
[173.35360718 -70.17948151]
[178.48504639 -56.08450699]
[179.36697388 -41.11045837]
[175.92559814 -26.51056480]
[168.44891357 -13.50674725]
[157.56269836 -3.18734193]
[144.17802429 3.58398175]
[129.41514587 6.24050713]
[114.50959015 4.55990028]
[100.70886993 -1.31718278]
[89.16801453 -10.89886761]
[80.85292053 -23.38322830]
[76.45954132 -37.72523117]
[66.07630157 -48.55058670]
[69.99849701 -34.07245255]
[73.92070007 -19.59432030]
[77.84289551 -5.11618710]
[81.76509857 9.36194611]
[85.80685425 23.80715942]
[89.96790314 38.21846390]
[94.12894440 52.62976837]
[98.28998566 67.04107666]
[102.45102692 81.45237732]
[122.85906982 86.95279694]
[131.22546387 113.27983856]
[140.43865967 125.11694336]
[149.65185547 136.95405579]
[158.86503601 148.79116821]
[174.26515198 148.41323853]
[186.78848267 157.07460022]
[191.75166321 171.28132629]
[187.44914246 185.51602173]
[196.66233826 197.35311890]
[205.87551880 209.19023132]
[215.18626404 220.95075989]
[224.59390259 232.63392639]
[240.07453918 238.04519653]
[242.86230469 254.20564270]
[230.08938599 264.49081421]
[214.89546204 258.32015991]
[212.91075134 242.04156494]
[203.50309753 230.35841370]
[196.84727478 227.11460876]
[194.03842163 218.40342712]
[184.82522583 206.56631470]
[175.61203003 194.72920227]
[160.75671387 195.40565491]
[148.20310974 187.10681152]
[142.88107300 172.84045410]
[147.02793884 158.00434875]
[137.81474304 146.16725159]
[128.60154724 134.33013916]
[119.38835907 122.49302673]
[112.01206970 123.84963226]
[114.72528076 138.60220337]
[117.43824768 153.35482788]
[102.68557739 156.06755066]
[99.97270203 141.31541443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[4 15]
[5 14]
[6 13]
[7 12]
[19 154]
[20 153]
[21 152]
[22 151]
[23 150]
[25 149]
[26 148]
[27 147]
[28 146]
[29 145]
[30 99]
[31 98]
[32 97]
[33 96]
[34 95]
[35 94]
[42 70]
[43 69]
[47 65]
[48 64]
[49 63]
[50 62]
[51 61]
[79 89]
[80 88]
[81 87]
[110 124]
[111 123]
[112 122]
[113 121]
[156 184]
[157 183]
[158 182]
[159 181]
[163 177]
[164 176]
[165 175]
[166 173]
[167 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
