%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCAGCCCCCGCAGCCCCGGGCGGCUCAUGGUCCCCGAAGCCGAAGCUGAAGCCCAGGCCCGGGCGGGGAUGCUGGGGAUGCCCCGCGGGUGAGGCCCCCGCUGCAGCCGUGUUC\
) } def
/len { sequence length } bind def

/coor [
[176.36692810 158.68969727]
[163.79785156 150.50323486]
[148.91044617 150.04051208]
[141.56948853 136.02549744]
[129.00041199 127.83902740]
[116.43132782 119.65255737]
[103.86225128 111.46608734]
[91.07791138 103.62002563]
[78.08753204 96.12002563]
[65.09715271 88.62002563]
[52.10676956 81.12002563]
[39.11638641 73.62002563]
[26.12600708 66.12002563]
[21.48451424 66.31131744]
[17.47163963 65.06402588]
[14.47931004 62.77697754]
[12.71887207 59.93831253]
[12.20759583 57.05471420]
[0.09605870 48.20538330]
[-12.01547813 39.35605240]
[-24.12701607 30.50672150]
[-36.23855209 21.65738869]
[-48.35009003 12.80805779]
[-60.80813217 4.45358562]
[-73.59246826 -3.39247656]
[-86.37680817 -11.23853874]
[-99.16114807 -19.08460045]
[-112.04966736 -26.75832367]
[-125.04004669 -34.25832367]
[-138.41427612 -41.05023193]
[-152.13378906 -47.11446381]
[-165.85330200 -53.17869568]
[-179.57281494 -59.24293137]
[-193.52864075 -52.18820572]
[-208.74223328 -55.80491257]
[-218.03021240 -68.38535309]
[-217.00706482 -83.98943329]
[-206.15589905 -95.24937439]
[-190.60031128 -96.84857941]
[-177.68515015 -88.03195953]
[-173.50859070 -72.96244812]
[-159.78907776 -66.89820862]
[-146.06956482 -60.83398056]
[-132.35003662 -54.76974487]
[-129.59713745 -55.76876831]
[-126.25856018 -55.66351318]
[-122.78175354 -54.21560287]
[-119.69512939 -51.36400223]
[-117.54004669 -47.24870300]
[-104.54966736 -39.74870300]
[-97.08641052 -39.12125397]
[-91.31508636 -31.86893845]
[-78.53074646 -24.02287674]
[-65.74640656 -16.17681503]
[-52.96207047 -8.33075333]
[-49.35119247 -8.86605167]
[-45.30041885 -7.59353304]
[-41.70315552 -4.32653284]
[-39.50075912 0.69652075]
[-27.38922119 9.54585266]
[-15.27768421 18.39518356]
[-3.16614676 27.24451637]
[8.94539070 36.09384537]
[21.05692673 44.94318008]
[33.62600708 53.12964630]
[46.61638641 60.62964630]
[59.60676956 68.12964630]
[72.59715271 75.62964630]
[85.58753204 83.12964630]
[98.57791138 90.62964630]
[103.96190643 90.43672943]
[109.03939819 93.34445190]
[112.04872131 98.89701080]
[124.61779785 107.08348083]
[137.18687439 115.26994324]
[149.75595093 123.45641327]
[165.54238892 124.50467682]
[171.98432922 137.93415833]
[184.55340576 146.12062073]
[195.59011841 139.14167786]
[208.40821838 136.90907288]
[221.06271362 139.72515869]
[231.64726257 147.12895203]
[238.58145142 157.97114563]
[240.84661865 170.59240723]
[238.13549805 183.07731628]
[250.24702454 191.92663574]
[262.35858154 200.77597046]
[274.47009277 209.62530518]
[286.58163452 218.47463989]
[302.28906250 220.36874390]
[308.00085449 234.12464905]
[320.11239624 242.97398376]
[335.81979370 244.86808777]
[341.53158569 258.62399292]
[353.64312744 267.47332764]
[365.75466919 276.32266235]
[382.10845947 277.54168701]
[388.98489380 292.42947388]
[379.31015015 305.67074585]
[363.03671265 303.64398193]
[356.90533447 288.43417358]
[344.79379272 279.58486938]
[332.68225098 270.73553467]
[317.84115601 269.47436523]
[311.26306152 255.08551025]
[299.15151978 246.23617554]
[284.31039429 244.97503662]
[277.73229980 230.58616638]
[265.62078857 221.73684692]
[253.50923157 212.88751221]
[241.39770508 204.03817749]
[229.28616333 195.18884277]
[213.92066956 202.71299744]
[196.76724243 201.49053955]
[182.47834778 191.76425171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[4 76]
[5 75]
[6 74]
[7 73]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[24 55]
[25 54]
[26 53]
[27 52]
[28 50]
[29 49]
[30 44]
[31 43]
[32 42]
[33 41]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[92 107]
[93 106]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
