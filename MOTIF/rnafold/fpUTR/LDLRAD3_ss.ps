%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCGGGAGGGAGGAGGGCCAGGCGGGAGGGCGGGGACGGCGCGGCGAGGGGCGGGGUCAGCGCCGAGGCCGCGGGGGCAGCAACGACGCCGGGCAGCGGGAGCGGCGGCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[132.62576294 123.85438538]
[117.93289948 136.21992493]
[99.19136047 140.40814209]
[80.63238525 135.47346497]
[71.12605286 147.07647705]
[61.61972427 158.67947388]
[68.49346161 172.26887512]
[69.23914337 187.47952271]
[63.72758102 201.67608643]
[52.91368103 212.39894104]
[38.67101669 217.79025269]
[23.46721649 216.91598511]
[9.93643093 209.92758179]
[0.42295101 198.03584290]
[-3.42495584 183.30107117]
[-0.94061649 168.27615356]
[7.44554234 155.56427002]
[20.28056717 147.36779785]
[35.34071350 145.10685730]
[50.01671982 149.17314148]
[59.52304840 137.57014465]
[69.02938080 125.96714020]
[65.16504669 120.49385071]
[62.25802612 114.45735931]
[60.38820648 108.02355957]
[45.38951492 108.22154999]
[34.54360962 119.71685028]
[18.74378777 120.09252930]
[7.36379814 109.12570190]
[7.15518808 93.32278442]
[18.24172211 82.05937958]
[34.04595566 82.01786041]
[45.19152069 93.22286224]
[60.19021225 93.02486420]
[64.47853851 80.72053528]
[72.45903778 70.42015839]
[83.30220032 63.19436264]
[95.88095856 59.79421616]
[108.88785553 60.57313538]
[120.97093964 65.45016479]
[130.87426758 73.91836548]
[143.93013000 66.53296661]
[156.98600769 59.14757156]
[170.04188538 51.76217651]
[183.09776306 44.37678146]
[196.15364075 36.99138260]
[209.20951843 29.60598755]
[222.26539612 22.22059250]
[221.82620239 14.01848507]
[223.87287903 6.13098383]
[228.17541504 -0.71242309]
[234.29714966 -5.89118242]
[241.63874817 -8.94988632]
[242.03471375 -23.94465828]
[242.43066406 -38.93943405]
[242.82661438 -53.93420410]
[230.99789429 -64.16238403]
[228.56217957 -79.60910797]
[236.66950989 -92.98090363]
[251.49188232 -97.96402740]
[266.03060913 -92.20559692]
[273.42092896 -78.42456055]
[270.17340088 -63.12791061]
[257.82138062 -53.53825378]
[257.42544556 -38.54347992]
[257.02947998 -23.54870605]
[256.63351440 -8.55393314]
[262.43441772 -5.78799057]
[267.37484741 -1.67790604]
[271.15014648 3.52284431]
[273.52749634 9.49352074]
[288.51574707 10.08736420]
[303.50396729 10.68120766]
[318.49221802 11.27505112]
[333.48046875 11.86889458]
[341.73318481 -1.00899053]
[355.23458862 -7.98098469]
[370.31277466 -7.26364803]
[382.92306519 0.85034466]
[389.73294067 14.09765244]
[404.72116089 14.69149590]
[418.81683350 7.50660372]
[431.22781372 15.74170494]
[446.21606445 16.33554840]
[456.27691650 8.13395786]
[468.82400513 9.01132202]
[477.09768677 17.94341469]
[492.06503296 18.93269348]
[506.52990723 11.20615578]
[520.30889893 20.09839439]
[519.22729492 36.46183777]
[504.39785767 43.46317673]
[491.07574463 33.90003586]
[476.10839844 32.91075897]
[460.88156128 41.52600098]
[445.62222290 31.32378960]
[430.63397217 30.72994614]
[417.61035156 37.95731354]
[404.12731934 29.67973518]
[389.13909912 29.08589172]
[381.30245972 41.75289536]
[368.08975220 48.84376526]
[353.00207520 48.36591339]
[340.09460449 40.34758377]
[332.88662720 26.85713387]
[317.89837646 26.26329041]
[302.91012573 25.66944885]
[287.92190552 25.07560539]
[272.93365479 24.48176193]
[254.54521179 41.71253586]
[229.65080261 35.27647018]
[216.59492493 42.66186523]
[203.53904724 50.04726028]
[190.48316956 57.43265533]
[177.42729187 64.81805420]
[164.37141418 72.20344543]
[151.31553650 79.58884430]
[138.25965881 86.97424316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[25 34]
[26 33]
[41 118]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[53 67]
[54 66]
[55 65]
[56 64]
[71 109]
[72 108]
[73 107]
[74 106]
[75 105]
[80 100]
[81 99]
[83 97]
[84 96]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
