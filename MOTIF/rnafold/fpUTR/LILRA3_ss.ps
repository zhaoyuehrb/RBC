%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUCCAAGUGUCCACACCCUGUGUGUCCUCUGUCCUGCCAGCACCGAGGGCUCAUCCAUCCACAGAGCAGUGCAGUGGGAGGAGACGCC\
) } def
/len { sequence length } bind def

/coor [
[98.56529236 248.25312805]
[90.89228821 261.44735718]
[78.24958038 269.99865723]
[63.14737701 272.20913696]
[48.58423996 267.63992310]
[37.45168304 257.19824219]
[31.96008873 242.95726013]
[33.19981766 227.74458313]
[40.92471695 214.58065796]
[53.60100555 206.07922363]
[68.71179199 203.92822266]
[73.20223999 189.61613464]
[77.69268799 175.30404663]
[82.18313599 160.99195862]
[86.67358398 146.67987061]
[76.90299225 135.29850769]
[62.07596970 137.56991577]
[47.24894714 139.84133911]
[32.42192078 142.11274719]
[17.68102455 150.48785400]
[5.55253983 138.64149475]
[13.57843971 123.70759583]
[30.15050316 127.28572845]
[44.97752762 125.01431274]
[59.80455399 122.74289703]
[74.63157654 120.47147369]
[71.42234802 96.92895508]
[84.39592743 80.61345673]
[78.94951630 66.63716888]
[73.50311279 52.66087723]
[68.05670166 38.68458939]
[62.61029434 24.70830154]
[57.16388702 10.73201370]
[44.94388199 0.68303370]
[47.53193665 -13.98500061]
[42.08552933 -27.96128845]
[29.86552048 -38.01026917]
[32.45357513 -52.67830276]
[27.00716782 -66.65459442]
[15.62238312 -79.21735382]
[24.54256821 -93.63493347]
[40.86605835 -89.05454254]
[40.98345566 -72.10099792]
[46.42986298 -58.12471008]
[58.26030731 -49.07540894]
[56.06181717 -33.40769577]
[61.50822449 -19.43140793]
[73.33866882 -10.38210678]
[71.14017487 5.28560543]
[76.58658600 19.26189423]
[82.03298950 33.23818207]
[87.47940063 47.21446991]
[92.92580414 61.19076157]
[98.37221527 75.16704559]
[115.32061005 77.99360657]
[127.55012512 91.80828857]
[128.42959595 111.50726318]
[115.98675537 128.40882874]
[130.81378174 130.68025208]
[145.64080811 132.95167542]
[160.45347595 127.39332581]
[171.86233521 136.96865845]
[186.68936157 139.24008179]
[201.51638794 141.51148987]
[216.34341431 143.78291321]
[231.17044067 146.05432129]
[239.76490784 138.97215271]
[250.62936401 137.92984009]
[260.02301025 143.03684998]
[264.85028076 152.32757568]
[279.49014282 155.59478760]
[296.26596069 153.14360046]
[303.26538086 168.58525085]
[290.36480713 179.58578491]
[276.22293091 170.23463440]
[261.58309937 166.96743774]
[243.80316162 174.24693298]
[228.89901733 160.88134766]
[214.07199097 158.60993958]
[199.24497986 156.33851624]
[184.41795349 154.06710815]
[169.59092712 151.79568481]
[155.83877563 157.51649475]
[143.36938477 147.77868652]
[128.54235840 145.50727844]
[113.71533203 143.23585510]
[100.98567200 151.17031860]
[96.49522400 165.48240662]
[92.00477600 179.79449463]
[87.51432800 194.10658264]
[83.02388763 208.41867065]
[94.19747162 218.81645203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 26]
[17 25]
[18 24]
[19 23]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[35 47]
[36 46]
[38 44]
[39 43]
[58 86]
[59 85]
[60 84]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
