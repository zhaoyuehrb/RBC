%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGAGAGGGCGGGAACAGGAAGUGAGGAUAGGCCGAGUUCCGGGCGCGAGGCGGCCACCGUGGAGAGCAGAGCGCGGCGGCUGGAAGCUGCUAAGUCAGAGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[104.78614807 217.28300476]
[96.22873688 229.97273254]
[82.74881744 237.22189331]
[67.44396973 237.36468506]
[53.83114624 230.36828613]
[45.03847122 217.84042358]
[43.08642960 202.65989685]
[48.42359161 188.31510925]
[59.82351685 178.10235596]
[74.66658783 174.36846924]
[78.12582397 159.77279663]
[81.58506012 145.17712402]
[85.04430389 130.58145142]
[79.73136902 127.35105896]
[75.09462738 123.20819092]
[71.28877258 118.29106903]
[68.44077301 112.76372528]
[66.64562988 106.81056213]
[65.96324921 100.63018799]
[51.27313995 97.59692383]
[36.58302689 94.56365967]
[21.89291954 91.53039551]
[12.35085583 101.59817505]
[-0.82724279 105.56597900]
[-14.12980175 102.48930359]
[-24.06782913 93.28595734]
[-28.08996582 80.46589661]
[-42.68563843 77.00666046]
[-57.04004669 84.17119598]
[-71.53006744 77.28506470]
[-75.04020691 61.63072205]
[-64.87777710 49.21683502]
[-48.83852768 49.56627655]
[-39.22640228 62.41098785]
[-24.63072777 65.87022400]
[-12.60330677 54.80320358]
[3.80881906 53.01226044]
[18.22578049 61.39073181]
[24.92618370 76.84028625]
[39.61629105 79.87355042]
[54.30640030 82.90681458]
[68.99651337 85.94007874]
[91.18913269 67.11738586]
[119.81984711 72.32200623]
[131.02522278 62.35007095]
[142.23060608 52.37813187]
[153.28976440 42.24427795]
[164.20036316 31.95065498]
[161.42642212 18.35961342]
[165.73483276 5.28890800]
[175.88514709 -3.84320164]
[189.12429810 -6.70513391]
[201.93287659 -2.64659071]
[213.13825989 -12.61852837]
[224.34362793 -22.59046745]
[235.54901123 -32.56240463]
[246.75437927 -42.53434372]
[251.91973877 -57.48859787]
[266.57104492 -60.16967773]
[277.77642822 -70.14161682]
[288.98181152 -80.11355591]
[300.18716431 -90.08549500]
[311.39254761 -100.05742645]
[308.20819092 -115.08258820]
[312.97827148 -129.68196106]
[324.41967773 -139.92840576]
[339.45474243 -143.06567383]
[354.03909302 -138.24984741]
[364.24963379 -126.77636719]
[367.33975220 -111.73154449]
[362.47824097 -97.16235352]
[350.97280884 -86.98783875]
[335.91836548 -83.94489288]
[321.36450195 -88.85205078]
[310.15911865 -78.88011932]
[298.95373535 -68.90818024]
[287.74835205 -58.93624115]
[276.54299927 -48.96430206]
[272.17913818 -34.72330856]
[256.72631836 -31.32896614]
[245.52095032 -21.35702896]
[234.31556702 -11.38509083]
[223.11019897 -1.41315258]
[211.90481567 8.55878544]
[214.07174683 24.75885391]
[206.12519836 39.23012543]
[190.99272156 46.23411179]
[174.49398804 42.86125946]
[163.58338928 53.15488434]
[160.83549500 60.14216614]
[152.20254517 63.58350754]
[140.99716187 73.55544281]
[129.79179382 83.52738190]
[132.55773926 90.05556488]
[133.91146851 97.01509094]
[133.79429626 104.10409546]
[132.21127319 111.01507568]
[129.23106384 117.44827271]
[124.98296356 123.12464905]
[119.65120697 127.79798126]
[113.46707916 131.26556396]
[106.69880676 133.37699890]
[99.63997650 134.04067993]
[96.18073273 148.63635254]
[92.72149658 163.23202515]
[89.26226044 177.82769775]
[100.85074615 187.82598877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 106]
[11 105]
[12 104]
[13 103]
[19 42]
[20 41]
[21 40]
[22 39]
[27 35]
[28 34]
[44 93]
[45 92]
[46 91]
[47 89]
[48 88]
[53 84]
[54 83]
[55 82]
[56 81]
[57 80]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
