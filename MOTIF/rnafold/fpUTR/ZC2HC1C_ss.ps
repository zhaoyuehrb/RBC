%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUCGCGGCGAGGGGCGGAGCUUGGCGCGCCAGUGCCUCGGUUUCCAGGCACCGGGAAUAACAGAAGCCAGCUGAGAGCGCCUGCGCGGCUGUCGGUUGAUGGGGAGGUCAGGUCUGGGAAACUAGGCCCUGGGGUUUUCCCUGAGCAGGAGCGGUGCCCGAGGGCCUCAGGCGUCAGUCCAGGCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[33.74821472 300.23681641]
[23.18486404 310.88650513]
[12.62151241 321.53616333]
[8.39642429 336.78277588]
[-6.05973482 340.37008667]
[-16.62308693 351.01977539]
[-27.18643761 361.66943359]
[-31.41152573 376.91604614]
[-45.86768341 380.50335693]
[-56.43103790 391.15304565]
[-66.99438477 401.80270386]
[-77.55773926 412.45239258]
[-81.82881927 430.35717773]
[-98.91804504 434.31936646]
[-109.30665588 445.13955688]
[-113.28301239 460.45291138]
[-127.67886353 464.27505493]
[-138.06747437 475.09524536]
[-148.45608521 485.91546631]
[-145.58491516 501.16458130]
[-152.25570679 515.17456055]
[-165.90342712 522.55834961]
[-181.28022766 520.47662354]
[-192.47341919 509.72988892]
[-195.17900085 494.45050049]
[-188.35661316 480.51370239]
[-174.62960815 473.27844238]
[-159.27629089 475.52685547]
[-148.88768005 464.70663452]
[-138.49906921 453.88644409]
[-135.26577759 439.34701538]
[-120.12686157 434.75094604]
[-109.73825073 423.93075562]
[-109.66806030 411.82489014]
[-101.08843994 402.72451782]
[-88.20741272 401.88903809]
[-77.64406586 391.23934937]
[-67.08071136 380.58969116]
[-56.51736069 369.94000244]
[-53.04783630 355.45513916]
[-37.83611298 351.10607910]
[-27.27276230 340.45642090]
[-16.70941162 329.80673218]
[-13.23988438 315.32186890]
[1.97183621 310.97283936]
[12.53518772 300.32315063]
[23.09853935 289.67346191]
[19.82598877 271.23120117]
[29.33983994 254.82690430]
[47.41133118 248.35144043]
[51.74369049 233.99070740]
[56.07604980 219.62997437]
[60.40840912 205.26924133]
[64.74076843 190.90850830]
[69.07312775 176.54777527]
[73.40549469 162.18704224]
[64.27870941 157.43243408]
[55.97891617 151.34822083]
[48.69825363 144.07522583]
[42.60528183 135.78186035]
[37.84105682 126.66010284]
[34.51587296 116.92113495]
[32.70671844 106.79042053]
[32.45547485 96.50250244]
[33.76795578 86.29555511]
[36.61377716 76.40588379]
[40.92705536 67.06243896]
[46.60793686 58.48153305]
[53.52489853 50.86182404]
[61.51780701 44.37971497]
[70.40161896 39.18527222]
[65.37342072 25.05313683]
[60.34522629 10.92100048]
[55.31703186 -3.21113467]
[50.28883743 -17.34326935]
[45.26064301 -31.47540474]
[40.23244476 -45.60754013]
[28.31681061 -56.01562500]
[31.34010124 -70.60016632]
[26.31190681 -84.73230743]
[21.28371048 -98.86444092]
[16.14066505 -112.95518494]
[10.88310719 -127.00360107]
[-2.11132789 -137.00743103]
[0.32294229 -153.22491455]
[15.68174934 -158.97286987]
[28.16526794 -148.33831787]
[24.93152618 -132.26116943]
[30.18908310 -118.21274567]
[35.48604202 -113.04232788]
[35.41584778 -103.89263916]
[40.44404221 -89.76049805]
[45.47223663 -75.62836456]
[57.02822113 -66.23110962]
[54.36458206 -50.63573456]
[59.39277649 -36.50360107]
[64.42097473 -22.37146568]
[69.44916534 -8.23933029]
[74.47736359 5.89280558]
[79.50556183 20.02494049]
[84.53375244 34.15707779]
[107.62662506 32.79635239]
[129.82731628 39.29722595]
[148.53875732 52.89921188]
[160.39556885 43.71139526]
[172.25238037 34.52357864]
[184.10920715 25.33576202]
[195.96601868 16.14794540]
[207.82283020 6.96012878]
[219.67964172 -2.22768831]
[231.30860901 -11.70223999]
[242.70278931 -21.45787811]
[254.09698486 -31.21351624]
[265.49118042 -40.96915436]
[276.88534546 -50.72479248]
[288.19976807 -60.57284164]
[299.43365479 -70.51264954]
[310.66754150 -80.45246124]
[321.90142822 -90.39226532]
[333.13531494 -100.33207703]
[337.82217407 -116.04721069]
[353.83581543 -119.58209991]
[364.70275879 -107.30035400]
[359.24404907 -91.83638000]
[343.07513428 -89.09819031]
[331.84124756 -79.15838623]
[320.60736084 -69.21857452]
[309.37347412 -59.27876663]
[298.13958740 -49.33895493]
[295.20898438 -42.54170609]
[286.64099121 -39.33060455]
[275.24679565 -29.57496643]
[263.85263062 -19.81932831]
[252.45843506 -10.06369019]
[241.06423950 -0.30805185]
[240.43266296 3.17540956]
[238.07333374 6.52319622]
[234.06983948 8.92245102]
[228.86746216 9.62912464]
[217.01065063 18.81694221]
[205.15382385 28.00475883]
[193.29701233 37.19257736]
[181.44020081 46.38039398]
[169.58338928 55.56821060]
[157.72657776 64.75602722]
[164.24296570 78.84966278]
[167.37348938 94.05799866]
[166.95318604 109.57950592]
[163.00416565 124.59613800]
[155.73458862 138.31645203]
[145.52758789 150.01734924]
[132.92108154 159.08212280]
[118.57952881 165.03303528]
[103.25875092 167.55645752]
[87.76622772 166.51939392]
[83.43386078 180.88012695]
[79.10150146 195.24085999]
[74.76914215 209.60159302]
[70.43678284 223.96232605]
[66.10442352 238.32305908]
[61.77206421 252.68379211]
[72.18275452 265.25405884]
[73.77651215 281.29849243]
[66.22991180 295.32208252]
[73.69464111 308.33276367]
[81.15937042 321.34341431]
[88.62409973 334.35409546]
[96.08882904 347.36477661]
[103.55355835 360.37545776]
[111.01828766 373.38613892]
[123.24976349 377.51043701]
[129.19662476 388.51324463]
[126.14708710 400.22891235]
[133.39906311 413.35937500]
[140.65103149 426.48980713]
[154.96658325 434.48962402]
[154.92575073 450.88873291]
[140.57052612 458.81713867]
[126.66833496 450.11877441]
[127.52056122 433.74179077]
[120.26860046 420.61132812]
[113.01663208 407.48086548]
[97.52401733 399.25167847]
[98.00760651 380.85089111]
[90.54287720 367.84020996]
[83.07814789 354.82952881]
[75.61341858 341.81884766]
[68.14868927 328.80816650]
[60.68395615 315.79748535]
[53.21922684 302.78680420]
[48.25752258 303.52560425]
[43.24464798 303.33731079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[5 43]
[6 42]
[7 41]
[9 39]
[10 38]
[11 37]
[12 36]
[14 33]
[15 32]
[17 30]
[18 29]
[19 28]
[50 161]
[51 160]
[52 159]
[53 158]
[54 157]
[55 156]
[56 155]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[79 93]
[80 92]
[81 91]
[82 89]
[83 88]
[104 145]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[110 139]
[111 135]
[112 134]
[113 133]
[114 132]
[115 131]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
[164 190]
[165 189]
[166 188]
[167 187]
[168 186]
[169 185]
[170 184]
[173 182]
[174 181]
[175 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
