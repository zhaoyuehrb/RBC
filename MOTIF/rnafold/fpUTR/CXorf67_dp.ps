%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:01 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (CXorf67)
} def

/sequence { (\
GGACUGGCUGGGCUCCACCCACCUUCUUGCUCUACCAGUUCGCGCUCUCCUCCGGCAGAAGUAGCAGCUGCGCUCUUGCUCUCUGGGGGAGAACCUGGCGUU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 41 0.994222372 ubox
2 40 0.997699237 ubox
2 41 0.042991353 ubox
3 39 0.999186662 ubox
3 40 0.030431429 ubox
4 38 0.999973833 ubox
5 37 0.999752521 ubox
6 23 0.003517027 ubox
6 36 0.999976575 ubox
7 22 0.003880879 ubox
7 30 0.004498694 ubox
7 35 0.999579878 ubox
8 29 0.005844119 ubox
9 21 0.028835505 ubox
9 34 0.176949339 ubox
10 20 0.030170274 ubox
10 32 0.986323381 ubox
10 33 0.155934205 ubox
11 19 0.030193834 ubox
11 30 0.003342617 ubox
11 31 0.986694751 ubox
11 32 0.155250776 ubox
12 18 0.030112307 ubox
12 30 0.999263522 ubox
12 31 0.020932832 ubox
13 29 0.999082532 ubox
16 29 0.011598118 ubox
17 28 0.018135393 ubox
20 29 0.007064599 ubox
21 28 0.013198206 ubox
41 100 0.032006397 ubox
42 96 0.003377400 ubox
42 99 0.099253486 ubox
42 101 0.951221911 ubox
43 97 0.020630354 ubox
43 98 0.098444745 ubox
43 100 0.992032888 ubox
44 96 0.023691414 ubox
44 99 0.993592806 ubox
44 101 0.004187571 ubox
45 98 0.993453292 ubox
45 100 0.004364247 ubox
46 92 0.787637387 ubox
46 97 0.611699366 ubox
47 91 0.999666128 ubox
47 97 0.009910514 ubox
48 90 0.999832825 ubox
49 89 0.999986499 ubox
50 88 0.999979704 ubox
51 87 0.999320962 ubox
52 86 0.999940066 ubox
52 87 0.006952304 ubox
53 85 0.999900813 ubox
53 86 0.006747176 ubox
54 80 0.052441457 ubox
54 81 0.013314730 ubox
54 82 0.006166403 ubox
54 83 0.014302142 ubox
54 84 0.997366268 ubox
55 71 0.003947901 ubox
55 79 0.062486392 ubox
55 81 0.008096894 ubox
55 82 0.011246334 ubox
55 83 0.997191509 ubox
56 70 0.004025445 ubox
56 78 0.064422510 ubox
56 85 0.010546379 ubox
57 69 0.004013827 ubox
57 76 0.023612387 ubox
57 77 0.059399579 ubox
57 80 0.067986483 ubox
57 82 0.989076739 ubox
57 84 0.017885165 ubox
58 68 0.003991950 ubox
58 75 0.033287897 ubox
58 76 0.048107400 ubox
58 77 0.003315872 ubox
58 79 0.069944222 ubox
58 81 0.992681726 ubox
58 83 0.019810824 ubox
59 74 0.029128669 ubox
59 76 0.003546687 ubox
59 77 0.083349800 ubox
59 80 0.705870207 ubox
59 82 0.019980136 ubox
60 69 0.011944643 ubox
60 74 0.058922169 ubox
60 76 0.118346527 ubox
60 77 0.027392963 ubox
60 80 0.695980865 ubox
60 82 0.025963108 ubox
61 68 0.012303622 ubox
61 71 0.039668840 ubox
61 73 0.061381035 ubox
61 75 0.119287506 ubox
61 76 0.029384039 ubox
61 79 0.984506084 ubox
61 81 0.026803366 ubox
62 67 0.011934542 ubox
62 70 0.039703960 ubox
62 72 0.057444897 ubox
62 78 0.983295545 ubox
63 69 0.039707405 ubox
63 74 0.174104765 ubox
63 76 0.219569816 ubox
63 77 0.950065957 ubox
63 80 0.036764589 ubox
64 68 0.038857446 ubox
64 71 0.074899724 ubox
64 73 0.191787234 ubox
64 75 0.299735580 ubox
64 76 0.874413498 ubox
64 79 0.049193718 ubox
65 70 0.074941221 ubox
65 72 0.191829243 ubox
65 78 0.049221431 ubox
66 74 0.966411444 ubox
66 76 0.009298447 ubox
66 77 0.045321827 ubox
66 80 0.003308893 ubox
67 73 0.976197228 ubox
67 75 0.011082481 ubox
67 76 0.039220514 ubox
67 79 0.004398013 ubox
68 72 0.969121124 ubox
68 78 0.004398698 ubox
70 79 0.008832035 ubox
71 78 0.008841927 ubox
72 77 0.006001956 ubox
72 79 0.034826892 ubox
73 78 0.034853232 ubox
92 102 0.004178044 ubox
93 101 0.009343773 ubox
94 100 0.009771842 ubox
1 41 0.9500000 lbox
2 40 0.9500000 lbox
3 39 0.9500000 lbox
4 38 0.9500000 lbox
5 37 0.9500000 lbox
6 36 0.9500000 lbox
7 35 0.9500000 lbox
10 32 0.9500000 lbox
11 31 0.9500000 lbox
12 30 0.9500000 lbox
13 29 0.9500000 lbox
42 101 0.9500000 lbox
43 100 0.9500000 lbox
44 99 0.9500000 lbox
45 98 0.9500000 lbox
46 92 0.9500000 lbox
47 91 0.9500000 lbox
48 90 0.9500000 lbox
49 89 0.9500000 lbox
50 88 0.9500000 lbox
51 87 0.9500000 lbox
52 86 0.9500000 lbox
53 85 0.9500000 lbox
54 84 0.9500000 lbox
55 83 0.9500000 lbox
57 82 0.9500000 lbox
58 81 0.9500000 lbox
59 80 0.9500000 lbox
61 79 0.9500000 lbox
62 78 0.9500000 lbox
63 77 0.9500000 lbox
64 76 0.9500000 lbox
66 74 0.9500000 lbox
67 73 0.9500000 lbox
68 72 0.9500000 lbox
showpage
end
%%EOF
