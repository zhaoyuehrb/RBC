%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGCGCGCCGGCCACCCGCGCGCCUGCCGCCCGUUGCCCAGGCAACCGUCGUGCCGCGUCUUCCUGAGGUAGCUCCUGUCAGCCCACUGAUCCCACCACCCGCUCCCUACUGCCCCGCGGUCUUCGCGUGAGCUCGGAGACUGAGGGACAACAAAA\
) } def
/len { sequence length } bind def

/coor [
[81.90350342 154.96195984]
[73.68147278 150.50053406]
[65.05760956 162.77362061]
[63.87292862 181.12496948]
[47.72401810 187.93556213]
[39.34431458 200.37664795]
[30.96461296 212.81773376]
[22.58491135 225.25881958]
[14.20521069 237.69990540]
[5.82550907 250.14099121]
[4.53344822 265.90936279]
[-8.99396229 272.14300537]
[-17.37366295 284.58407593]
[-21.20727539 301.09890747]
[-38.13795090 301.98687744]
[-43.67809677 285.96368408]
[-29.81474876 276.20437622]
[-21.43504715 263.76330566]
[-20.74235916 248.88481140]
[-6.61557627 241.76129150]
[1.76412523 229.32020569]
[10.14382648 216.87911987]
[18.52352905 204.43803406]
[26.90323067 191.99694824]
[35.28293228 179.55586243]
[33.27923203 167.59263611]
[40.20400238 157.14834595]
[52.78451157 154.14976501]
[61.40837860 141.87666321]
[53.32590103 132.62661743]
[47.41508484 121.85852051]
[43.95095825 110.07337952]
[43.09469604 97.81954193]
[44.88613892 85.66716003]
[49.24193192 74.18165588]
[36.88423920 65.67945862]
[24.52654457 57.17726135]
[12.16884899 48.67506027]
[-0.18884544 40.17286301]
[-12.54654026 31.67066383]
[-24.98762512 23.29096222]
[-37.51088715 15.03457642]
[-50.03414917 6.77819061]
[-62.55741119 -1.47819591]
[-76.27902222 5.27936792]
[-91.44062042 4.26809883]
[-103.97704315 -4.14049864]
[-110.57723999 -17.60502052]
[-109.55855560 -32.46529770]
[-122.08181763 -40.72168350]
[-134.60507202 -48.97806931]
[-150.03399658 -45.55404663]
[-163.31997681 -54.11314774]
[-166.58068848 -69.57740784]
[-157.88160706 -82.77215576]
[-142.38372803 -85.86918640]
[-129.28169250 -77.03108215]
[-126.34869385 -61.50133133]
[-113.82543182 -53.24494553]
[-101.30216980 -44.98855972]
[-88.04576111 -51.78070450]
[-73.06984711 -51.02043915]
[-60.40150452 -42.81193924]
[-53.49743652 -29.27566719]
[-54.30102539 -14.00145721]
[-41.77776337 -5.74507141]
[-29.25450134 2.51131487]
[-16.73123932 10.76770115]
[-9.37667751 11.82949543]
[-4.04434109 19.31296921]
[8.31335354 27.81516838]
[20.67104721 36.31736755]
[33.02874374 44.81956482]
[45.38643646 53.32176590]
[57.74413300 61.82396317]
[68.33170319 50.04290009]
[82.22849274 41.27958298]
[98.55210114 36.46391296]
[116.16042328 36.26237488]
[133.73139954 41.00638962]
[137.82795715 26.57662010]
[141.92451477 12.14685249]
[146.02107239 -2.28291535]
[150.11764526 -16.71268272]
[145.58593750 -32.47325897]
[157.16236877 -44.08868790]
[172.93809509 -39.61001587]
[176.68440247 -23.64451408]
[164.54740906 -12.61612320]
[160.45085144 1.81364465]
[156.35427856 16.24341202]
[152.25772095 30.67317963]
[148.16116333 45.10294724]
[153.74465942 50.11040497]
[163.75956726 38.94342422]
[173.77449036 27.77644157]
[183.78939819 16.60945892]
[193.80448914 5.44263124]
[204.97116089 15.45789051]
[194.95637512 26.62437248]
[184.94146729 37.79135513]
[174.92655945 48.95833588]
[164.91163635 60.12532043]
[170.49513245 65.13277435]
[184.39547729 59.49536133]
[187.99870300 44.40243912]
[199.80705261 34.33553314]
[215.27996826 33.16557693]
[228.46777344 41.34243774]
[234.29953003 55.72195053]
[230.53277588 70.77489471]
[218.61592102 80.71311188]
[203.13122559 81.71514893]
[190.03288269 73.39570618]
[176.13253784 79.03311920]
[175.09605408 93.99726868]
[188.08642578 101.49726868]
[201.07681274 108.99726868]
[216.89675903 109.19665527]
[224.05026245 122.26098633]
[237.04063416 129.76098633]
[250.03102112 137.26098633]
[263.02139282 144.76098633]
[276.01177979 152.26098633]
[289.00216675 159.76098633]
[301.99255371 167.26098633]
[314.98291016 174.76098633]
[327.97329712 182.26098633]
[342.09353638 175.82684326]
[357.29220581 178.95416260]
[367.72509766 190.44042969]
[369.38055420 205.86894226]
[361.62203979 219.30712891]
[347.43280029 225.58772278]
[332.26895142 222.29571533]
[321.96130371 210.69692993]
[320.47329712 195.25137329]
[307.48291016 187.75137329]
[294.49255371 180.25137329]
[281.50216675 172.75137329]
[268.51177979 165.25137329]
[255.52139282 157.75137329]
[242.53102112 150.25137329]
[229.54063416 142.75137329]
[216.55026245 135.25137329]
[201.65946960 135.58843994]
[193.57681274 121.98764801]
[180.58642578 114.48764801]
[167.59605408 106.98764801]
[164.69236755 117.58131409]
[160.16503906 127.42639160]
[154.17839050 136.28027344]
[146.93186951 143.93356323]
[138.65371704 150.21485901]
[129.59399414 154.99459839]
[120.01712036 158.18742371]
[110.19425201 159.75343323]
[100.39562988 159.69805908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[12 18]
[13 17]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[41 68]
[42 67]
[43 66]
[44 65]
[49 60]
[50 59]
[51 58]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[104 115]
[105 114]
[116 149]
[117 148]
[118 147]
[120 145]
[121 144]
[122 143]
[123 142]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
