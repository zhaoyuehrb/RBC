%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCCUUAGGUGUUUAAGUUCCGCGCGCAGGCCAGGCUGCAACCUGACGGCCAGAUCCCUCGCUGUCCUAGUCGCUGCUCCUUGGAGUC\
) } def
/len { sequence length } bind def

/coor [
[51.37336349 209.63694763]
[36.51340485 211.68185425]
[22.33651161 206.78126526]
[11.91159344 195.99604797]
[7.49536085 181.66088867]
[10.04380798 166.87895203]
[19.00283432 154.85217285]
[4.26098442 157.62306213]
[-10.48086643 160.39395142]
[-16.82985497 172.41218567]
[-28.79767227 178.43154907]
[-41.84441757 176.42288208]
[-51.16655350 167.35546875]
[-65.99357605 169.62689209]
[-80.82060242 171.89831543]
[-95.64762878 174.16972351]
[-101.83276367 188.30293274]
[-114.68966675 196.82957458]
[-130.11573792 197.02882385]
[-143.18858337 188.83711243]
[-149.73670959 174.86837769]
[-147.67060852 159.57998657]
[-137.64959717 147.85041809]
[-122.87132263 143.42253113]
[-108.05149078 147.70925903]
[-97.91904449 159.34269714]
[-83.09201813 157.07128906]
[-68.26499176 154.79986572]
[-53.43796921 152.52845764]
[-44.17530823 138.60386658]
[-27.39591026 135.52828979]
[-13.25175762 145.65209961]
[1.49009359 142.88121033]
[16.23194504 140.11032104]
[30.20823288 134.66390991]
[42.93789673 126.72945404]
[55.66756058 118.79499817]
[68.39722443 110.86053467]
[81.12689209 102.92607880]
[84.50437164 88.83569336]
[96.80081940 81.17125702]
[110.93865204 84.34426117]
[123.66831207 76.40979767]
[136.39797974 68.47534180]
[148.70942688 59.90631866]
[160.57106018 50.72472763]
[162.39506531 33.42670059]
[175.83763123 22.92408562]
[192.39959717 25.24610901]
[203.94436646 15.66913986]
[215.48913574 6.09217215]
[227.03390503 -3.48479605]
[238.57867432 -13.06176376]
[250.12344360 -22.63873291]
[255.80477905 -37.40467453]
[270.54031372 -39.57556534]
[282.08508301 -49.15253448]
[287.27011108 -64.71041870]
[303.38818359 -67.73348236]
[313.85845947 -55.11185837]
[307.91000366 -39.82958984]
[291.66204834 -37.60776520]
[280.11727905 -28.03079605]
[275.26171875 -13.94986153]
[259.70040894 -11.09396362]
[248.15563965 -1.51699555]
[236.61087036 8.05997276]
[225.06610107 17.63694000]
[213.52133179 27.21390915]
[201.97657776 36.79087830]
[202.56501770 49.78216934]
[195.40252686 60.87050247]
[182.95439148 65.82079315]
[169.75265503 62.58636475]
[157.89102173 71.76795197]
[157.13360596 75.41385651]
[154.44256592 78.82720947]
[149.97216797 81.04024506]
[144.33244324 81.20500183]
[131.60276794 89.13946533]
[118.87310791 97.07392120]
[115.49562836 111.16430664]
[103.19918060 118.82874298]
[89.06134796 115.65573883]
[76.33168793 123.59020233]
[63.60202026 131.52465820]
[50.87235641 139.45912170]
[38.14269257 147.39358521]
[52.87998962 150.18858337]
[64.75743103 159.34971619]
[71.20388031 172.89384460]
[70.82385254 187.88902283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 34]
[8 33]
[9 32]
[13 29]
[14 28]
[15 27]
[16 26]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[42 81]
[43 80]
[44 79]
[45 75]
[46 74]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
