%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCUGCCCGCCUUCGGGCCCUGCGCGGGGAGGCUGGUCCCAACCUUGCGUGGGCUUCGCGUGGGCCCGGCCUCGCCGCUGCGGUCGCCCGCCUGGC\
) } def
/len { sequence length } bind def

/coor [
[24.71086502 334.06735229]
[19.67811584 348.19784546]
[14.64536476 362.32836914]
[18.13520241 378.35189819]
[5.82294178 389.18426514]
[-9.62561703 383.68206787]
[-12.31832218 367.50549316]
[0.51485103 357.29562378]
[5.54760122 343.16510010]
[10.58035183 329.03457642]
[5.66133785 317.86224365]
[9.87625027 305.97698975]
[21.45199585 300.03067017]
[26.92177010 286.06350708]
[32.39154053 272.09634399]
[24.99072838 257.08410645]
[30.77031326 241.01937866]
[46.65060043 233.88780212]
[51.68334961 219.75727844]
[56.71610260 205.62677002]
[61.74885178 191.49626160]
[66.78160095 177.36573792]
[62.62635422 160.39413452]
[76.54238892 148.46136475]
[81.13324738 134.18116760]
[85.72410583 119.90097809]
[90.31496429 105.62078094]
[94.68318939 91.27091217]
[98.82771301 76.85485077]
[102.97223663 62.43878555]
[107.11676025 48.02272034]
[103.49368286 32.62194824]
[114.44634247 22.52796555]
[118.59086609 8.11190033]
[122.73539734 -6.30416346]
[126.87992096 -20.72022820]
[131.02444458 -35.13629150]
[135.16897583 -49.55235672]
[139.31349182 -63.96841812]
[143.45802307 -78.38448334]
[139.83494568 -93.78525543]
[150.78759766 -103.87924194]
[154.93212891 -118.29530334]
[159.07666016 -132.71136475]
[163.22117615 -147.12742615]
[161.87495422 -151.69012451]
[162.14299011 -155.97851562]
[163.71264648 -159.48722839]
[166.13142395 -161.87855530]
[168.87969971 -163.01492310]
[174.78120422 -176.80522156]
[180.68270874 -190.59552002]
[186.58421326 -204.38580322]
[179.36488342 -218.25718689]
[182.80136108 -233.51251221]
[195.27104187 -242.94866943]
[210.88612366 -242.11019897]
[222.27365112 -231.39300537]
[224.05677795 -215.85740662]
[215.39355469 -202.83886719]
[200.37451172 -198.48431396]
[194.47300720 -184.69401550]
[188.57150269 -170.90371704]
[182.66999817 -157.11341858]
[177.63725281 -142.98291016]
[173.49272156 -128.56684875]
[169.34819031 -114.15077972]
[165.20367432 -99.73471069]
[169.12319946 -85.36507416]
[157.87408447 -74.23995972]
[153.72956848 -59.82389450]
[149.58503723 -45.40782928]
[145.44050598 -30.99176598]
[141.29598999 -16.57570076]
[137.15145874 -2.15963745]
[133.00692749 12.25642681]
[128.86241150 26.67249107]
[132.78193665 41.04213333]
[121.53282928 52.16724777]
[117.38830566 66.58331299]
[113.24377441 80.99937439]
[109.09925079 95.41543579]
[110.07907104 103.57234192]
[104.59516144 110.21163940]
[100.00430298 124.49183655]
[95.41344452 138.77203369]
[90.82258606 153.05223083]
[96.03323364 164.97724915]
[91.78609467 176.85101318]
[80.91211700 182.39849854]
[75.87936401 196.52900696]
[70.84661865 210.65951538]
[65.81386566 224.79003906]
[60.78111267 238.92054749]
[67.95833588 250.44281006]
[67.14305115 263.79705811]
[58.86315155 274.05603027]
[46.35870361 277.56610107]
[40.88893127 291.53326416]
[35.41915894 305.50042725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[13 100]
[14 99]
[15 98]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[24 87]
[25 86]
[26 85]
[27 84]
[28 82]
[29 81]
[30 80]
[31 79]
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[42 68]
[43 67]
[44 66]
[45 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
