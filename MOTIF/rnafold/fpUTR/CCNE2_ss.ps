%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGGGCGGGACCGGCCCGGCCUAUAUAUUGGGUUGGCGCCGGCGCCAGCUGAGCCGAGCGGUAGCUGGUCUGGCGAGGUUUUAUACACCUGAAAGAAGAGA\
) } def
/len { sequence length } bind def

/coor [
[87.72732544 149.86111450]
[89.64682770 134.98443604]
[91.56632996 120.10775757]
[82.74954987 132.24301147]
[80.89762115 147.95545959]
[67.15711212 153.70416260]
[58.34033203 165.83941650]
[61.05990219 181.40795898]
[51.90607452 194.29139709]
[36.30965042 196.84622192]
[23.52371216 187.55668640]
[21.13393021 171.93412781]
[30.55811882 159.24711609]
[46.20507431 157.02264404]
[55.02185440 144.88739014]
[56.24314880 130.04293823]
[70.61429596 123.42623138]
[79.43107605 111.29097748]
[73.74269104 97.41141510]
[58.94533157 94.95414734]
[44.14797211 92.49687958]
[29.35061455 90.03961182]
[14.55325603 87.58234406]
[-0.24410318 85.12506866]
[-15.04146194 82.66780090]
[-29.83882141 80.21053314]
[-43.67201233 88.33595276]
[-58.59733200 82.45255280]
[-63.16535187 67.07357788]
[-53.87187958 53.99646759]
[-37.84606934 53.25285339]
[-27.38155174 65.41317749]
[-12.58419323 67.87044525]
[2.21316552 70.32771301]
[17.01052475 72.78498077]
[31.80788422 75.24224854]
[46.60524368 77.69951630]
[61.40259933 80.15679169]
[76.19995880 82.61405945]
[100.28829193 81.18518829]
[105.97666931 67.30562592]
[111.66505432 53.42605972]
[117.35343170 39.54649353]
[123.04181671 25.66692924]
[128.73019409 11.78736591]
[129.11305237 2.49231315]
[134.80195618 -2.41821861]
[140.90299988 -16.12140083]
[147.00405884 -29.82458305]
[153.10510254 -43.52776337]
[159.20616150 -57.23094559]
[165.30720520 -70.93412781]
[171.40824890 -84.63730621]
[171.08444214 -91.50899506]
[173.95126343 -96.65626526]
[178.30590820 -98.96042633]
[185.21554565 -112.27421570]
[192.12518311 -125.58800507]
[190.84928894 -141.93743896]
[204.52165222 -150.99275208]
[219.07730103 -143.43861389]
[219.54263306 -127.04606628]
[205.43896484 -118.67836761]
[198.52932739 -105.36457825]
[191.61968994 -92.05079651]
[185.11143494 -78.53626251]
[179.01039124 -64.83307648]
[172.90933228 -51.12989807]
[166.80828857 -37.42671585]
[160.70724487 -23.72353363]
[154.60618591 -10.02035046]
[148.50514221 3.68283105]
[142.60975647 17.47574806]
[136.92138672 31.35531235]
[131.23300171 45.23487473]
[125.54461670 59.11444092]
[119.85623169 72.99400330]
[114.16785431 86.87357330]
[119.64797211 100.83667755]
[133.25834656 107.14203644]
[146.86872864 113.44739532]
[160.47911072 119.75275421]
[174.55723572 112.94536591]
[189.70463562 116.82994080]
[198.76919556 129.57229614]
[197.47090149 145.15589905]
[186.42276001 156.22262573]
[170.84135437 157.54711914]
[158.08378601 148.50399780]
[154.17375183 133.36312866]
[140.56336975 127.05777740]
[126.95298767 120.75241852]
[113.34261322 114.44705963]
[122.26389313 126.50569153]
[131.18518066 138.56433105]
[142.84176636 148.00486755]
[149.34934998 161.51972961]
[149.46102905 176.51931763]
[143.15538025 190.12956238]
[131.64065552 199.74261475]
[117.12315369 203.51652527]
[102.38459778 200.72816467]
[90.24903107 191.91181946]
[83.04174042 178.75677490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[6 15]
[7 14]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[56 65]
[57 64]
[58 63]
[79 93]
[80 92]
[81 91]
[82 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
