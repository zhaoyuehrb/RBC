%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGAGGCAGGCUGCGGACUCGGAGCAGCUCGGGGCUGCGCAGCGGGAAGGCUCGCCUAGUCGGUCCGCAUCCGUGUCGACCACCUGUCUGGACACCACGAAG\
) } def
/len { sequence length } bind def

/coor [
[116.82701874 444.42947388]
[111.65011597 430.23876953]
[110.68227386 415.16427612]
[114.00195312 400.42807007]
[121.34004211 387.22467041]
[132.10168457 376.62448120]
[145.41445923 369.48681641]
[142.32478333 354.80847168]
[139.23510742 340.13012695]
[136.14541626 325.45178223]
[133.05574036 310.77343750]
[129.96606445 296.09506226]
[126.87638092 281.41671753]
[122.34606171 275.42358398]
[123.91944122 266.25787354]
[121.26608276 251.49443054]
[107.09664917 242.57186890]
[103.61988831 225.84916687]
[113.43683624 211.46371460]
[110.34715271 196.78535461]
[107.25747681 182.10700989]
[97.06454468 171.24638367]
[101.79338837 156.14840698]
[98.70371246 141.47006226]
[95.61402893 126.79171753]
[92.52435303 112.11336517]
[83.24667358 100.32673645]
[69.70470428 93.87575531]
[56.16273499 87.42478180]
[42.62076950 80.97380066]
[29.07880211 74.52282715]
[15.53683472 68.07184601]
[-1.36302030 66.71860504]
[-4.74101305 50.10459137]
[10.28859806 42.25939560]
[21.98781204 54.52987671]
[35.52978134 60.98085785]
[49.07174683 67.43183136]
[62.61371613 73.88281250]
[76.15568542 80.33379364]
[89.69764709 86.78476715]
[96.56124115 83.76134491]
[98.18807983 68.84982300]
[110.28842926 77.71449280]
[117.15201569 74.69106293]
[121.53286743 60.34505081]
[125.91371918 45.99903488]
[130.29457092 31.65302086]
[134.67543030 17.30700684]
[127.50737000 3.47744703]
[132.15454102 -11.00904560]
[145.38308716 -17.75746536]
[149.76393127 -32.10348129]
[154.14479065 -46.44949341]
[158.52563477 -60.79550934]
[152.28889465 -75.57666016]
[160.08296204 -89.59921265]
[175.92892456 -92.10626221]
[187.67109680 -81.17460632]
[186.30189514 -65.19009399]
[172.87165833 -56.41465759]
[168.49079895 -42.06864166]
[164.10995483 -27.72262764]
[159.72909546 -13.37661362]
[166.93095398 -0.38935140]
[162.69250488 14.22195435]
[149.02143860 21.68785858]
[144.64059448 36.03387451]
[140.25973511 50.37988663]
[135.87889099 64.72589874]
[131.49803162 79.07191467]
[124.38407135 103.81890106]
[107.20269775 109.02368927]
[110.29237366 123.70203400]
[113.38205719 138.38038635]
[116.47173309 153.05873108]
[126.88565826 164.96925354]
[121.93582153 179.01733398]
[125.02549744 193.69567871]
[128.11517334 208.37402344]
[140.24645996 214.44429016]
[146.52873230 226.24601746]
[144.84024048 239.31146240]
[136.02954102 248.84106445]
[138.68289185 263.60452271]
[141.55473328 278.32705688]
[144.64440918 293.00540161]
[147.73408508 307.68374634]
[150.82376099 322.36209106]
[153.91345215 337.04043579]
[157.00312805 351.71878052]
[160.09280396 366.39712524]
[175.15330505 367.56246948]
[189.27494812 372.92489624]
[201.31295776 382.04974365]
[210.29147339 394.19732666]
[215.48263550 408.38281250]
[216.46562195 423.45632935]
[213.16075134 438.19586182]
[205.83592224 451.40661621]
[195.08494568 462.01760864]
[181.77934265 469.16867065]
[166.99772644 472.28005981]
[151.93841553 471.09960938]
[137.82215881 465.72299194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[15 85]
[16 84]
[19 80]
[20 79]
[21 78]
[23 76]
[24 75]
[25 74]
[26 73]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
