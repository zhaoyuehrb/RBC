%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGUGAACUGCAUUAACCUAAAGUGCUGCAGAGAUAAACUUAAAGCAGGAAGCAACAUACCAUGAAUGUACUGCAAGGGAACACAUUUGUGUCAUGUGAAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[91.94743347 167.84552002]
[80.34001923 165.43197632]
[69.32460022 161.04817200]
[59.23287201 154.82608032]
[49.01519775 165.80784607]
[38.79752731 176.78961182]
[28.57985306 187.77137756]
[33.71679688 202.18908691]
[31.55360985 217.34095764]
[22.58737564 229.74520874]
[8.87846947 236.55142212]
[-6.42290211 236.19557190]
[-19.80059624 228.75946045]
[-28.18051529 215.95181274]
[-29.63701820 200.71577454]
[-23.83540726 186.55244446]
[-12.10885429 176.71646118]
[2.84796691 173.46806335]
[17.59808731 177.55371094]
[27.81576157 166.57194519]
[38.03343201 155.59017944]
[48.25110626 144.60841370]
[40.72661591 133.97830200]
[35.35596085 122.11350250]
[32.33429718 109.44515991]
[31.77141762 96.43360901]
[33.68778229 83.55165100]
[38.01375198 71.26737976]
[44.59213257 60.02717590]
[33.46426773 49.96881485]
[22.33639908 39.91045761]
[11.20853424 29.85209656]
[-8.59636021 26.68374443]
[-14.06805229 8.23212814]
[-25.75691795 -1.16842687]
[-37.44578171 -10.56898117]
[-53.48614120 -10.27482986]
[-63.60571671 -22.72367477]
[-60.04164124 -38.36582565]
[-45.52796555 -45.20196533]
[-31.19834137 -37.98799133]
[-28.04522896 -22.25784683]
[-16.35636330 -12.85729218]
[-4.66749811 -3.45673776]
[5.53805113 -5.47904444]
[15.34454918 -1.38839340]
[21.33261299 7.65594387]
[21.26689339 18.72422981]
[32.39476013 28.78258896]
[43.52262497 38.84095001]
[54.65049362 48.89930725]
[71.13983154 38.07303238]
[90.03491211 32.40890884]
[109.76067352 32.37908554]
[128.67279053 37.98605347]
[145.19479370 48.76242065]
[157.94941711 63.80988312]
[165.87344360 81.87410736]
[180.68537903 79.50624084]
[195.49729919 77.13837433]
[210.30923462 74.77051544]
[219.58297729 62.25510788]
[234.63810730 60.06475830]
[246.51248169 68.98298645]
[261.32440186 66.61511993]
[276.13635254 64.24726105]
[290.94827271 61.87939453]
[305.76019287 59.51152802]
[320.57211304 57.14366150]
[335.38406372 54.77579880]
[350.19598389 52.40793228]
[365.00790405 50.04006958]
[379.88867188 36.59257126]
[397.69635010 43.89240646]
[412.34725952 40.67513275]
[422.17059326 27.99121475]
[438.21343994 27.90719223]
[448.16909790 40.48751831]
[444.40042114 56.08164597]
[429.79846191 62.72709274]
[415.56454468 55.32603836]
[400.91363525 58.54331589]
[396.09368896 67.76345825]
[386.76025391 72.84162140]
[375.95962524 71.83974457]
[367.37576294 64.85199738]
[352.56384277 67.21986389]
[337.75192261 69.58772278]
[322.94000244 71.95558929]
[308.12805176 74.32345581]
[293.31613159 76.69132233]
[278.50421143 79.05918884]
[263.69229126 81.42704773]
[248.88034058 83.79491425]
[240.37808228 95.97059631]
[225.39041138 98.58294678]
[212.67709351 89.58244324]
[197.86515808 91.95030975]
[183.05323792 94.31816864]
[168.24130249 96.68603516]
[167.78677368 108.53300476]
[165.29106140 120.12303162]
[160.82931519 131.10711670]
[154.53590393 141.15451050]
[146.60031128 149.96267700]
[137.26150513 157.26637268]
[126.80070496 162.84568787]
[115.53287506 166.53260803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[29 51]
[30 50]
[31 49]
[32 48]
[34 44]
[35 43]
[36 42]
[58 100]
[59 99]
[60 98]
[61 97]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
