%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGACUGGCGGCGCGCGGAAAACGCGUCACGUGACGACUGGCCCCGCCUCUUCCUCUCGGUCCCAUAUUGAACUCGAGUUGGAAGAGGCGAGUCCGGUCUCAAA\
) } def
/len { sequence length } bind def

/coor [
[129.67417908 166.11592102]
[122.63392639 179.36109924]
[110.91333771 188.72206116]
[96.43941498 192.65977478]
[81.59183502 190.52682495]
[68.81172180 182.67388916]
[60.20026016 170.39207458]
[57.17328262 155.70066833]
[60.22845459 141.01510620]
[68.86398315 128.74937439]
[54.44371033 132.87922668]
[40.02343750 137.00907898]
[32.32011795 150.54779053]
[17.63707924 154.53063965]
[4.77746153 147.10325623]
[-9.64281178 151.23312378]
[-24.06308556 155.36297607]
[-38.48336029 159.49282837]
[-52.90363312 163.62268066]
[-61.91207886 176.89775085]
[-77.91805267 177.98782349]
[-88.64315033 166.05670166]
[-85.85998535 150.25689697]
[-71.70356750 142.70869446]
[-57.03348923 149.20240784]
[-42.61321640 145.07255554]
[-28.19294167 140.94270325]
[-13.77266788 136.81285095]
[0.64760542 132.68298340]
[7.62582684 119.57421112]
[22.19120407 115.18052673]
[35.89358139 122.58881378]
[50.31385422 118.45895386]
[64.73412323 114.32910156]
[78.10920715 107.53887177]
[89.95343018 98.33482361]
[93.95934296 91.18131256]
[102.28316498 89.04055786]
[114.39247894 80.18818665]
[126.50179291 71.33581543]
[138.61111450 62.48344421]
[150.72042847 53.63107300]
[162.82974243 44.77870178]
[162.91596985 29.37419701]
[171.95072937 17.11749840]
[186.30053711 12.58461285]
[200.39912415 17.31405067]
[212.50843811 8.46168041]
[224.61775208 -0.39069003]
[236.72708130 -9.24306107]
[248.83639526 -18.09543228]
[260.94570923 -26.94780159]
[273.05502319 -35.80017090]
[285.16433716 -44.65254211]
[297.27365112 -53.50491333]
[309.38296509 -62.35728455]
[316.33987427 -79.32717896]
[333.76669312 -80.70432281]
[345.61090088 -89.90836334]
[357.45513916 -99.11241150]
[369.29934692 -108.31645203]
[381.00717163 -117.69337463]
[392.57611084 -127.24114990]
[389.95339966 -142.37446594]
[395.26382446 -156.78610229]
[407.07882690 -166.59939575]
[422.22027588 -169.17463684]
[436.61520386 -163.81909180]
[446.39141846 -151.97337341]
[448.91918945 -136.82392883]
[443.51855469 -122.44586182]
[431.64224243 -112.70681763]
[416.48495483 -110.22654724]
[402.12387085 -115.67223358]
[390.55496216 -106.12445068]
[387.34906006 -99.33260345]
[378.50338745 -96.47222900]
[366.65917969 -87.26818848]
[354.81494141 -78.06414795]
[342.97073364 -68.86009979]
[341.11203003 -56.80716705]
[331.18173218 -49.05424881]
[318.23535156 -50.24797058]
[306.12603760 -41.39559937]
[294.01672363 -32.54322815]
[281.90737915 -23.69085693]
[269.79806519 -14.83848572]
[257.68875122 -5.98611546]
[245.57945251 2.86625528]
[233.47012329 11.71862602]
[221.36080933 20.57099724]
[209.25149536 29.42336655]
[209.48007202 44.29232025]
[200.80677795 56.59019852]
[186.38653564 61.47999191]
[171.68211365 56.88801575]
[159.57279968 65.74038696]
[147.46348572 74.59275818]
[135.35415649 83.44512939]
[123.24485016 92.29750061]
[111.13552856 101.14987183]
[99.15747070 110.17904663]
[87.31324768 119.38309479]
[102.31086731 119.65029907]
[115.96949768 125.85044861]
[126.04351044 136.96415710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[12 32]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[35 103]
[36 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[47 92]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[58 80]
[59 79]
[60 78]
[61 77]
[62 75]
[63 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
