%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUCCUCUUCUCGCCAGCCAAUGGAAGCGGUCUGCCUAGCCCUCGCGGGGGCAAGGCGGCGACCGAGGCGCGUGGGUCUGGGAAGGCGCGCGGAUUUGGCCCCUCUUCUCACAUCAGCGGGUCCAGGCCCAACCGACAGACU\
) } def
/len { sequence length } bind def

/coor [
[158.77375793 132.77494812]
[164.37510681 118.86003113]
[175.97808838 109.35554504]
[160.99197388 108.71021271]
[146.00585938 108.06487274]
[131.01974487 107.41954041]
[116.03363800 106.77420807]
[129.86227417 112.58530426]
[138.67269897 124.72517395]
[139.91044617 139.67401123]
[133.21665955 153.09762573]
[120.53209686 161.10398865]
[105.53449249 161.37178040]
[92.57218933 153.82334900]
[85.40345001 140.64726257]
[86.10674286 125.66375732]
[94.47630310 113.21868896]
[82.30322266 121.98316193]
[70.13013458 130.74763489]
[66.14346313 146.28746033]
[51.44986343 152.72776794]
[37.32099915 145.12811279]
[34.59532928 129.31829834]
[45.36375427 117.42625427]
[61.36566162 118.57455444]
[73.53874969 109.81008148]
[85.71183014 101.04560852]
[85.46980286 93.54951477]
[70.47760773 94.03334808]
[69.99400330 79.04114532]
[84.98573303 78.55732727]
[84.74369812 71.06123352]
[72.03058624 63.10028076]
[59.31747437 55.13933182]
[46.60435867 47.17837906]
[33.72290039 39.49280930]
[20.67905998 32.08617401]
[7.63521862 24.67954254]
[-5.40862179 17.27290916]
[-18.45246315 9.86627483]
[-34.27343750 9.78036213]
[-41.52044678 -3.23232818]
[-54.56428909 -10.63896179]
[-67.60813141 -18.04559517]
[-80.65196991 -25.45222855]
[-93.69580841 -32.85886002]
[-110.08172607 -32.20022964]
[-118.61517334 -46.20423889]
[-110.51767731 -60.46476364]
[-94.11924744 -60.31179810]
[-86.28917694 -45.90270233]
[-73.24533844 -38.49606705]
[-60.20149612 -31.08943558]
[-47.15765381 -23.68280220]
[-34.11381531 -16.27616882]
[-19.22582245 -16.72002792]
[-11.04582977 -3.17756581]
[1.99801123 4.22906733]
[15.04185200 11.63570118]
[28.08569336 19.04233360]
[41.12953568 26.44896698]
[45.95438004 26.04227638]
[51.07429123 28.71281242]
[54.56531143 34.46526718]
[67.27842712 42.42621613]
[79.99153900 50.38716507]
[92.70465088 58.34811783]
[116.67897034 91.78809357]
[131.66508484 92.43343353]
[146.65119934 93.07876587]
[161.63731384 93.72409821]
[176.62341309 94.36943054]
[186.87118530 89.40645599]
[196.19470215 93.31558990]
[211.02487183 91.06475830]
[225.80317688 88.49536133]
[240.52276611 85.60858917]
[255.24237061 82.72181702]
[269.96197510 79.83503723]
[284.68154907 76.94826508]
[299.40115356 74.06149292]
[314.12075806 71.17472076]
[328.84036255 68.28794098]
[343.55993652 65.40116882]
[346.84033203 62.30870819]
[350.56832886 60.63593674]
[354.22753906 60.34543228]
[357.36993408 61.23111725]
[359.66616821 62.95666885]
[374.57943726 61.34594727]
[387.46896362 52.17150497]
[400.95349121 58.49739456]
[415.86676025 56.88667679]
[430.78002930 55.27595520]
[443.66955566 46.10151291]
[457.15408325 52.42740250]
[472.06735229 50.81668091]
[486.98062134 49.20596313]
[499.87017822 40.03151703]
[513.35467529 46.35741043]
[528.26794434 44.74668884]
[543.18121338 43.13596725]
[549.98791504 29.29137802]
[563.21075439 21.34411430]
[578.63049316 21.83011818]
[591.32666016 30.59430695]
[597.24798584 44.84006119]
[594.50494385 60.02161407]
[583.97296143 71.29458618]
[569.01263428 75.06181335]
[554.39776611 70.12118530]
[544.79193115 58.04923630]
[529.87866211 59.65995789]
[514.96539307 61.27067947]
[503.14257812 70.32991028]
[488.59133911 64.11923218]
[473.67807007 65.72994995]
[458.76480103 67.34066772]
[446.94198608 76.39990234]
[432.39074707 70.18922424]
[417.47747803 71.79994202]
[402.56420898 73.41066742]
[390.74136353 82.46989441]
[376.19015503 76.25921631]
[361.27688599 77.86993408]
[346.44671631 80.12076569]
[331.72711182 83.00753784]
[317.00753784 85.89431763]
[302.28793335 88.78108978]
[287.56832886 91.66786194]
[272.84872437 94.55463409]
[258.12915039 97.44141388]
[243.40954590 100.32818604]
[228.68994141 103.21495819]
[225.29635620 106.66866302]
[219.67297363 107.98124695]
[213.27569580 105.89492035]
[198.44554138 108.14575195]
[211.00286865 116.35024261]
[218.06549072 129.58351135]
[217.89190674 144.58250427]
[210.52491760 157.64877319]
[197.78108215 165.56045532]
[182.80276489 166.36668396]
[169.28330994 159.86865234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[6 69]
[7 68]
[17 27]
[18 26]
[19 25]
[32 67]
[33 66]
[34 65]
[35 64]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[74 138]
[75 137]
[76 134]
[77 133]
[78 132]
[79 131]
[80 130]
[81 129]
[82 128]
[83 127]
[84 126]
[89 125]
[90 124]
[92 122]
[93 121]
[94 120]
[96 118]
[97 117]
[98 116]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
