%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUAACCCGCGGAGCCAGAAGAGGGAGGAAAGGAGAUGAGAUUUCAUCAUGUUGGCCAGCCUGGUCUCAAACUCCUGACCUCAAGUGACCCGCCUGCCUCAGCCUCCCAAAGUGCUGGGAUUACAGGAAUUUAGUGAUUGACA\
) } def
/len { sequence length } bind def

/coor [
[21.66604424 167.95454407]
[11.79027176 156.66432190]
[6.10872746 142.78195190]
[5.23528767 127.80741119]
[9.26432705 113.35864258]
[17.76051521 100.99681091]
[29.80586052 92.05759430]
[44.09888840 87.50684357]
[59.09527206 87.83625793]
[73.17522430 93.01055908]
[87.52220154 97.38825989]
[77.03032684 86.66815948]
[66.53844452 75.94805145]
[56.04657364 65.22795105]
[47.74395370 61.24481964]
[45.44737625 54.16250992]
[35.18858719 43.21914673]
[21.69548607 49.98791885]
[6.85675764 52.67760468]
[-8.12350845 51.07864380]
[-22.03218079 45.32911301]
[-33.74533463 35.90287018]
[-42.31905746 23.57049942]
[-47.06554413 9.33632851]
[-47.60822678 -5.64336681]
[-43.91166687 -20.15428734]
[-36.28373337 -33.02253723]
[-46.54252625 -43.96590042]
[-56.80131531 -54.90926361]
[-67.06010437 -65.85263062]
[-82.62246704 -66.52388763]
[-92.87045288 -77.76815796]
[-92.13460541 -92.60034943]
[-102.39339447 -103.54371643]
[-112.65218353 -114.48707581]
[-122.91098022 -125.43044281]
[-133.16976929 -136.37380981]
[-150.88847351 -141.26200867]
[-154.28604126 -158.44744873]
[-164.77792358 -169.16755676]
[-175.26979065 -179.88764954]
[-185.76167297 -190.60775757]
[-196.25354004 -201.32785034]
[-206.74542236 -212.04795837]
[-217.23728943 -222.76805115]
[-229.46340942 -218.36692810]
[-242.39796448 -218.94023132]
[-254.10166931 -224.36630249]
[-262.83334351 -233.79864502]
[-267.30895996 -245.79768372]
[-266.89028931 -258.55047607]
[-261.67581177 -270.14459229]
[-271.69677734 -281.30615234]
[-287.57482910 -283.60110474]
[-295.55572510 -297.51815796]
[-289.51718140 -312.38140869]
[-274.09146118 -316.78897095]
[-261.11187744 -307.35980225]
[-260.53521729 -291.32711792]
[-250.51425171 -280.16555786]
[-233.87281799 -284.34219360]
[-217.31103516 -279.53222656]
[-205.37387085 -266.96264648]
[-201.38397217 -250.00244141]
[-206.51719666 -233.25993347]
[-196.02531433 -222.53982544]
[-185.53344727 -211.81973267]
[-175.04156494 -201.09962463]
[-164.54969788 -190.37953186]
[-154.05781555 -179.65942383]
[-143.56594849 -168.93933105]
[-131.43269348 -168.48126221]
[-122.60207367 -159.57261658]
[-122.22640228 -146.63259888]
[-111.96761322 -135.68923950]
[-101.70882416 -124.74587250]
[-91.45003510 -113.80250549]
[-81.19123840 -102.85914612]
[-66.34246826 -102.63665771]
[-55.78269958 -91.68466949]
[-56.11674500 -76.11141968]
[-45.85795212 -65.16805267]
[-35.59915924 -54.22469330]
[-25.34037018 -43.28133011]
[-12.00685406 -50.06326675]
[2.71230078 -52.81604767]
[17.62578773 -51.30817795]
[31.52412415 -45.65335464]
[43.27772903 -36.30194473]
[51.92874146 -24.00511742]
[56.76906967 -9.75452137]
[57.39834976 5.29768944]
[53.75703812 19.93200493]
[46.13195038 32.96035767]
[56.39073944 43.90372086]
[66.76667786 54.73608017]
[77.25855255 65.45617676]
[87.75042725 76.17627716]
[98.24230194 86.89638519]
[111.94110107 93.00725555]
[126.92721558 93.65259552]
[141.91333008 94.29792786]
[156.89942932 94.94326019]
[171.88554382 95.58859253]
[186.87165833 96.23392487]
[201.86384583 96.71799469]
[216.86038208 97.04073334]
[229.39396667 87.02632141]
[245.00556946 90.72195435]
[251.71926880 105.29267120]
[244.38491821 119.56105042]
[228.62878418 122.58162689]
[216.53762817 112.03726196]
[201.54110718 111.71451569]
[194.73687744 114.73706055]
[186.22633362 111.22003937]
[171.24021912 110.57470703]
[156.25410461 109.92936707]
[141.26799011 109.28403473]
[126.28188324 108.63870239]
[111.29576874 107.99337006]
[104.31392670 121.26943970]
[113.33829498 133.25112915]
[122.36265564 145.23281860]
[131.38700867 157.21450806]
[140.41137695 169.19619751]
[155.78816223 167.94795227]
[169.38800049 175.23133850]
[176.87126160 188.72224426]
[175.85003662 204.11576843]
[166.65020752 216.49989319]
[152.20741272 221.92291260]
[137.13027954 218.65432739]
[126.22987366 207.73715210]
[122.98448181 192.65501404]
[128.42968750 178.22056580]
[119.40531921 166.23887634]
[110.38095856 154.25717163]
[101.35659790 142.27548218]
[92.33223724 130.29379272]
[94.50753021 145.13522339]
[88.09542847 158.69564819]
[77.63295746 169.44444275]
[64.25055695 176.22023010]
[49.39416504 178.29090881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[14 96]
[16 95]
[17 94]
[27 84]
[28 83]
[29 82]
[30 81]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[52 60]
[53 59]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 114]
[107 113]
[122 140]
[123 139]
[124 138]
[125 137]
[126 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
