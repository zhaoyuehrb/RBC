%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAGAUUCCGCGGGAGAGCGGCAGAGAUACCGCGAUAUUUGGGAGCGGCCCCGAGACGCGCCUGGCGCGGAUCCUAAAUCCCGACAGCUUUAUAGAGCCCAGGCCUGGCAGGCUCCCAGAACUUGAAGCCACCAGACCCCAC\
) } def
/len { sequence length } bind def

/coor [
[111.25829315 238.43453979]
[105.18766022 252.32421875]
[94.73033142 263.29782104]
[81.14908600 270.03024292]
[66.08391571 271.70852661]
[51.35402298 268.12997437]
[38.73810959 259.72671509]
[29.75960922 247.51351929]
[25.50271606 232.96514893]
[26.48147583 217.83842468]
[32.57769394 203.95996094]
[43.05522537 193.00564575]
[56.64885712 186.29824829]
[71.71708679 184.64775085]
[75.25826263 170.07174683]
[78.79943085 155.49572754]
[69.45917511 150.95585632]
[61.05221939 144.85879517]
[53.83548355 137.39088440]
[48.02949905 128.78033447]
[34.09484863 134.33241272]
[20.16020012 139.88449097]
[6.22554827 145.43655396]
[2.52983212 160.50709534]
[-9.34002113 170.50140381]
[-24.81981087 171.57646179]
[-37.95724106 163.31889343]
[-43.70070267 148.90388489]
[-39.84171677 133.87432861]
[-27.86414337 124.00936890]
[-12.37360287 123.10230255]
[0.67347610 131.50190735]
[14.60812664 125.94982910]
[28.54277802 120.39775848]
[42.47742844 114.84568787]
[41.35563660 90.50899506]
[50.09640503 67.76846313]
[67.22975159 50.44849396]
[89.87426758 41.46189117]
[114.22167969 42.31998062]
[119.62247467 28.32600403]
[125.02326965 14.33202648]
[130.42407227 0.33804834]
[135.82485962 -13.65592957]
[141.22564697 -27.64990807]
[146.62644958 -41.64388657]
[152.02723694 -55.63786316]
[157.42803955 -69.63184357]
[154.13378906 -87.71406555]
[168.13572693 -98.24043274]
[173.23207092 -112.34813690]
[178.32843018 -126.45583344]
[177.37382507 -131.73908997]
[178.47827148 -136.37387085]
[181.03285217 -139.67199707]
[184.24131775 -141.29605103]
[190.24324036 -155.04293823]
[189.56597900 -159.50384521]
[190.31297302 -163.52430725]
[192.15887451 -166.70021057]
[194.67825317 -168.77996826]
[197.40612793 -169.68428040]
[204.57540894 -182.86007690]
[211.74468994 -196.03585815]
[218.91397095 -209.21165466]
[226.08325195 -222.38743591]
[233.25251770 -235.56323242]
[207.55986023 -270.45019531]
[210.14678955 -285.22543335]
[208.53869629 -294.29425049]
[212.95315552 -300.29129028]
[215.85958862 -315.00701904]
[218.76602173 -329.72274780]
[221.67243958 -344.43847656]
[213.97175598 -358.51251221]
[220.30662537 -373.25189209]
[235.81747437 -377.34979248]
[248.60572815 -367.66265869]
[248.86131287 -351.62164307]
[236.38816833 -341.53204346]
[233.48175049 -326.81631470]
[230.57531738 -312.10058594]
[227.66888428 -297.38485718]
[224.92204285 -282.63848877]
[222.33509827 -267.86325073]
[228.67625427 -263.85827637]
[241.95420837 -270.83654785]
[241.35855103 -255.84834290]
[247.69970703 -251.84336853]
[259.92974854 -260.52816772]
[272.15982056 -269.21298218]
[284.38986206 -277.89776611]
[290.72628784 -293.02331543]
[307.02563477 -294.82989502]
[316.52050781 -281.45907593]
[309.44342041 -266.66558838]
[293.07467651 -265.66772461]
[280.84460449 -256.98291016]
[268.61456299 -248.29812622]
[256.38449097 -239.61332703]
[246.42831421 -228.39395142]
[239.25903320 -215.21815491]
[232.08975220 -202.04237366]
[224.92047119 -188.86657715]
[217.75120544 -175.69079590]
[210.58192444 -162.51499939]
[203.99012756 -149.04101562]
[197.98820496 -135.29412842]
[192.43612671 -121.35948181]
[187.33978271 -107.25177765]
[182.24342346 -93.14408112]
[187.10307312 -82.01600647]
[182.91513062 -70.19099426]
[171.42201233 -64.23104858]
[166.02122498 -50.23706818]
[160.62042236 -36.24309158]
[155.21963501 -22.24911308]
[149.81883240 -8.25513554]
[144.41804504 5.73884249]
[139.01724243 19.73282051]
[133.61645508 33.72679901]
[128.21566772 47.72077560]
[135.86524963 52.64047623]
[142.67422485 58.67020798]
[148.48297119 65.66864014]
[153.15536499 73.47174835]
[156.58187866 81.89663696]
[158.68220520 90.74583435]
[159.40711975 99.81193542]
[158.73962402 108.88244629]
[156.69535828 117.74476624]
[153.32225037 126.19117737]
[148.69935608 134.02371216]
[142.93502808 141.05877686]
[136.16438293 147.13150024]
[128.54608154 152.09953308]
[120.25872040 155.84643555]
[111.49652863 158.28439331]
[102.46486664 159.35626221]
[93.37544250 159.03689575]
[89.83427429 173.61291504]
[86.29309845 188.18891907]
[98.92448425 196.56890869]
[107.92547607 208.76554871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[20 35]
[21 34]
[22 33]
[23 32]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 114]
[50 111]
[51 110]
[52 109]
[56 108]
[57 107]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[68 85]
[69 84]
[71 83]
[72 82]
[73 81]
[74 80]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
