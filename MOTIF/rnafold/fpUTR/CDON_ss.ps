%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCCAAGGGAAUGAAAGGUGAGGGGAGCGUGAGUGCAGGCAUGAUGGGAAUCUCCGUGACUUGUGAACCAAGGACUGGGUUUUGCUCUGGAAGCCUGUCCUGAUUGCUUCUGUAAUCUGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[32.20728683 207.48731995]
[17.38524628 208.40528870]
[7.65047169 219.81730652]
[-2.08430290 231.22932434]
[-11.81907749 242.64135742]
[-14.88863373 258.16192627]
[-29.03499031 262.82345581]
[-38.76976395 274.23547363]
[-32.55828857 288.17752075]
[-33.01974869 303.43365479]
[-40.06251907 316.97479248]
[-52.28825378 326.11230469]
[-67.26952362 329.03195190]
[-82.03178406 325.15402222]
[-93.64398956 315.24847412]
[-99.80050659 301.28207397]
[-99.27897644 286.02789307]
[-92.18293762 272.51458740]
[-79.92131042 263.42529297]
[-64.92865753 260.56466675]
[-50.18178177 264.50070190]
[-40.44701004 253.08868408]
[-38.07374954 238.38436890]
[-23.23109627 232.90657043]
[-13.49632168 221.49455261]
[-3.76154685 210.08253479]
[5.97322750 198.67051697]
[4.54322720 183.88908386]
[14.25310421 172.17700195]
[29.76692390 170.77731323]
[39.50169754 159.36529541]
[49.23647308 147.95327759]
[58.97124863 136.54125977]
[68.70602417 125.12923431]
[62.60823059 114.58242798]
[59.95571518 102.69200134]
[60.99287415 90.55352783]
[65.62414551 79.28545380]
[73.42280579 69.92601776]
[65.76519012 57.02792358]
[58.10756683 44.12982559]
[50.44994736 31.23173141]
[42.79232788 18.33363724]
[34.97822189 5.52974081]
[27.00879097 -7.17805862]
[19.03936005 -19.88585854]
[11.06992817 -32.59365845]
[5.27179813 -36.10687637]
[2.59804273 -41.26953125]
[3.03936577 -46.11991501]
[-4.30190182 -59.20065689]
[-11.64316940 -72.28139496]
[-24.66783142 -83.13471985]
[-17.84424782 -98.65486908]
[-1.04167569 -96.39435577]
[1.43757153 -79.62266541]
[8.77883911 -66.54192352]
[16.12010765 -53.46118164]
[23.77772713 -40.56308746]
[31.74715805 -27.85528946]
[39.71659088 -15.14748955]
[47.68601990 -2.43969059]
[53.96992111 1.59717834]
[55.69042206 10.67601681]
[63.34804153 23.57411194]
[71.00566101 36.47220612]
[78.66328430 49.37030029]
[86.32089996 62.26839828]
[95.71101379 59.41184616]
[105.67669678 58.89654160]
[115.63340759 60.83158875]
[124.97822571 65.18006134]
[133.12628174 71.75669098]
[139.54727173 80.23468781]
[143.79953003 90.16142273]
[157.99612427 85.31822205]
[172.19271851 80.47501373]
[186.38931274 75.63180542]
[200.58592224 70.78860474]
[207.78691101 64.99798584]
[215.18757629 66.00489044]
[229.49789429 61.50882339]
[243.80821228 57.01275253]
[258.11853027 52.51668549]
[272.42886353 48.02061844]
[286.73919678 43.52454758]
[301.04949951 39.02848053]
[308.13821411 24.90312576]
[323.16494751 20.00683594]
[337.21456909 27.24449539]
[341.95169067 42.32212830]
[334.56591797 56.29444122]
[319.43902588 60.87191010]
[305.54559326 53.33880615]
[291.23526001 57.83487320]
[276.92492676 62.33094025]
[262.61462402 66.82701111]
[248.30429077 71.32307434]
[233.99395752 75.81914520]
[219.68363953 80.31521606]
[205.42912292 84.98519897]
[191.23252869 89.82840729]
[177.03593445 94.67160797]
[162.83934021 99.51481628]
[148.64273071 104.35802460]
[145.02572632 118.91539764]
[155.30458069 129.83992004]
[165.58343506 140.76443481]
[175.86228943 151.68896484]
[186.14114380 162.61347961]
[196.41999817 173.53800964]
[212.27116394 177.74186707]
[216.29432678 193.63986206]
[204.35079956 204.87748718]
[188.72706604 199.89445496]
[185.49546814 183.81686401]
[175.21661377 172.89233398]
[164.93775940 161.96781921]
[154.65890503 151.04328918]
[144.38005066 140.11877441]
[134.10119629 129.19425964]
[116.96047211 139.84608459]
[97.58465576 141.65011597]
[80.11804199 134.86401367]
[70.38326263 146.27603149]
[60.64849091 157.68804932]
[50.91371536 169.10006714]
[41.17894363 180.51208496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[7 22]
[8 21]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 62]
[45 61]
[46 60]
[47 59]
[50 58]
[51 57]
[52 56]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
