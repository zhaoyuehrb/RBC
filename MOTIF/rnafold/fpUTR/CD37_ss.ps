%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUUCUCUCUCAGCUCUCCGUCUCUCUUUCUCUCUCAGCCUCUUUCUUUCUCCCUGUCUCCCCCACUGUCAGCACCUCUUCUGUGUGGUGAGUGGACCGCUUACCCCACUAGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[-13.93527317 150.23571777]
[-24.15034676 161.23030090]
[-35.18670654 171.40020752]
[-46.97797012 180.68429565]
[-59.45323181 189.02673340]
[-72.53745270 196.37733459]
[-86.15195465 202.69189453]
[-100.21485138 207.93244934]
[-114.64155579 212.06745911]
[-129.34532166 215.07208252]
[-144.23770142 216.92822266]
[-159.22914124 217.62472534]
[-174.22947693 217.15740967]
[-189.14848328 215.52906799]
[-203.89643860 212.74952698]
[-218.38465881 208.83546448]
[-232.52600098 203.81044006]
[-246.23541260 197.70468140]
[-259.43045044 190.55488586]
[-272.03173828 182.40408325]
[-283.96350098 173.30126953]
[-295.15399170 163.30120850]
[-305.53591919 152.46403503]
[-315.04678345 140.85491943]
[-323.62945557 128.54370117]
[-331.23226929 115.60440063]
[-337.80950928 102.11484528]
[-343.32162476 88.15615845]
[-347.73550415 73.81230164]
[-351.02453613 59.16954041]
[-353.16894531 44.31592941]
[-354.15588379 29.34080696]
[-353.97940063 14.33423710]
[-352.64050293 -0.61352992]
[-350.14730835 -15.41259480]
[-346.51480103 -29.97395134]
[-341.76480103 -44.21002579]
[-335.92590332 -58.03520203]
[-329.03320312 -71.36633301]
[-321.12814331 -84.12323761]
[-312.25830078 -96.22919464]
[-302.47702026 -107.61139679]
[-291.84310913 -118.20139313]
[-280.42050171 -127.93549347]
[-268.27792358 -136.75515747]
[-255.48841858 -144.60733032]
[-242.12887573 -151.44479370]
[-228.27964783 -157.22642517]
[-214.02403259 -161.91744995]
[-199.44776917 -165.48966980]
[-184.63851929 -167.92158508]
[-169.68533325 -169.19856262]
[-154.67816162 -169.31295776]
[-139.70724487 -168.26403809]
[-124.86264038 -166.05815125]
[-110.23361969 -162.70854187]
[-95.90814972 -158.23535156]
[-81.97240448 -152.66549683]
[-68.51019287 -146.03247070]
[-55.60247040 -138.37615967]
[-43.32687378 -129.74261475]
[-31.75723076 -120.18376923]
[-20.96311951 -109.75709534]
[-11.00946140 -98.52530670]
[-1.95611906 -86.55596161]
[6.14245987 -73.92103577]
[13.23756886 -60.69652176]
[19.28653526 -46.96195602]
[24.25298119 -32.79993820]
[28.10703659 -18.29564476]
[30.82552338 -3.53630304]
[32.39208984 11.38931847]
[32.79731750 26.39145470]
[32.03876495 41.37988281]
[30.12099648 56.26445389]
[27.05554771 70.95565033]
[41.45779800 75.14793396]
[55.86004639 79.34022522]
[70.26229095 83.53250885]
[84.66454315 87.72479248]
[90.83168793 82.62763214]
[98.51988983 80.41259766]
[106.45363617 81.44716644]
[113.31671143 85.55970001]
[117.97051239 92.06792450]
[119.64295197 99.89209747]
[133.53781128 105.54301453]
[147.43266296 111.19393158]
[163.13095093 109.22559357]
[172.00567627 121.18756104]
[185.90052795 126.83847809]
[199.79539490 132.48939514]
[213.69024658 138.14031982]
[227.58511353 143.79122925]
[241.47996521 149.44215393]
[255.37483215 155.09307861]
[269.26968384 160.74398804]
[286.21969604 161.11016846]
[290.56005859 177.49911499]
[276.01312256 186.20675659]
[263.61877441 174.63885498]
[249.72390747 168.98793030]
[235.82905579 163.33702087]
[221.93418884 157.68609619]
[208.03933716 152.03517151]
[194.14447021 146.38426208]
[180.24961853 140.73333740]
[166.35475159 135.08242798]
[151.65032959 137.45495605]
[141.78175354 125.08879089]
[127.88688660 119.43787384]
[113.99202728 113.78695679]
[93.54636383 118.55283356]
[80.47225952 102.12703705]
[66.07000732 97.93475342]
[51.66775894 93.74246979]
[37.26551056 89.55018616]
[22.86326408 85.35790253]
[17.56510353 99.39919281]
[11.19477558 112.98768616]
[3.79059172 126.04166412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[76 118]
[77 117]
[78 116]
[79 115]
[80 114]
[86 112]
[87 111]
[88 110]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
