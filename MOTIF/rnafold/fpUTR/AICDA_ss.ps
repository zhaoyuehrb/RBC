%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCACUGUCAGACUAAGACAGAGAACCAUCAUUAAUUGAAGUGAGAUUUUUCUGGCCUGAGACUUGCAGGGAGGCAAGAAGACACUCUGGACACCACU\
) } def
/len { sequence length } bind def

/coor [
[96.45236969 224.20892334]
[98.63651276 209.36878967]
[105.40068817 195.98051453]
[116.05090332 185.41770935]
[129.49446106 178.76408386]
[144.35209656 176.70230103]
[159.09927368 179.44384766]
[149.26034546 168.12150574]
[139.42141724 156.79916382]
[129.58248901 145.47680664]
[115.39402008 140.94509888]
[112.18238068 125.45329285]
[102.34345245 114.13094330]
[89.18795776 109.39548492]
[86.33420563 95.70798492]
[76.49527740 84.38563538]
[61.60305405 79.04406738]
[59.09516525 64.36211395]
[49.25623703 53.03977203]
[31.76773453 47.54438019]
[28.91067505 30.30666924]
[18.72438240 19.29579163]
[8.53808880 8.28491402]
[-1.64820385 -2.72596407]
[-11.83449745 -13.73684216]
[-22.02079010 -24.74772072]
[-32.20708466 -35.75859833]
[-47.51929092 -34.07262421]
[-60.73372269 -41.63781738]
[-66.88686371 -55.37108994]
[-63.81025314 -69.92005920]
[-73.99654388 -80.93093872]
[-84.18283844 -91.94181061]
[-94.36913300 -102.95269012]
[-104.55542755 -113.96356964]
[-120.35552979 -114.32738495]
[-131.21005249 -125.81453705]
[-130.67921448 -141.60990906]
[-119.07794189 -152.34237671]
[-103.28907013 -151.64457703]
[-92.67984772 -139.93048096]
[-93.54454803 -124.14986420]
[-83.35825348 -113.13898468]
[-73.17195892 -102.12810516]
[-62.98566818 -91.11722565]
[-52.79937363 -80.10635376]
[-38.05537033 -82.04344940]
[-24.84159851 -74.84204865]
[-18.32581520 -61.07985306]
[-21.19620514 -45.94489288]
[-11.00991249 -34.93401337]
[-0.82361907 -23.92313576]
[9.36267376 -12.91225719]
[19.54896736 -1.90137935]
[29.73526001 9.10949898]
[39.92155457 20.12037659]
[52.10114288 20.94228363]
[60.67730713 30.18749809]
[60.57857895 43.20084381]
[70.41751099 54.52318573]
[84.60597992 59.05490875]
[87.81761932 74.54670715]
[97.65654755 85.86905670]
[110.81204224 90.60451508]
[113.66579437 104.29201508]
[123.50472260 115.61436462]
[138.39694214 120.95593262]
[140.90483093 135.63787842]
[150.74375916 146.96023560]
[160.58268738 158.28257751]
[170.42161560 169.60491943]
[182.87744141 177.96270752]
[197.08451843 182.77508545]
[211.29159546 187.58747864]
[225.49865723 192.39985657]
[236.53935242 181.79978943]
[251.24473572 177.55589294]
[266.23559570 180.64338684]
[278.06713867 190.35281372]
[284.02059937 204.45298767]
[282.72787476 219.70381165]
[274.48605347 232.60073853]
[261.18905640 240.18017578]
[245.89237976 240.70039368]
[232.11112976 234.04187012]
[223.01213074 221.73469543]
[220.68627930 206.60693359]
[206.47920227 201.79454041]
[192.27212524 196.98216248]
[178.06504822 192.16976929]
[186.19252014 204.77708435]
[189.91693115 219.30735779]
[188.85618591 234.26980591]
[183.11911011 248.12931824]
[173.29431152 259.46392822]
[160.38980103 267.11071777]
[145.72955322 270.28515625]
[130.81768799 268.66156006]
[117.18411255 262.40649414]
[106.22763062 252.16172791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 71]
[8 70]
[9 69]
[10 68]
[12 66]
[13 65]
[15 63]
[16 62]
[18 60]
[19 59]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[72 90]
[73 89]
[74 88]
[75 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
