%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUCCACGGAUGCGCUUAAAAGGCGGUGGCGGUGGCGGCAGCGCCCGGCGCCCGGGCUCACCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[103.82572174 271.67910767]
[90.44408417 278.45642090]
[75.44415283 278.49951172]
[62.02379608 271.79919434]
[53.04415894 259.78393555]
[50.41964340 245.01533508]
[54.70977783 230.64193726]
[64.99993134 219.72805786]
[79.09631348 214.60046387]
[93.99365997 216.35235596]
[106.51602173 224.61029053]
[103.94662476 209.83198547]
[101.37722778 195.05368042]
[97.79892731 191.47436523]
[96.63923645 185.50825500]
[99.27983856 178.89859009]
[97.99036407 163.95411682]
[96.70088959 149.00964355]
[95.41142273 134.06517029]
[94.12194824 119.12070465]
[86.77326202 115.00687408]
[81.76901245 108.23309326]
[79.99617767 100.00000000]
[81.76901245 91.76690674]
[86.77326202 84.99312592]
[94.12194824 80.87929535]
[95.41142273 65.93482208]
[96.70088959 50.99034882]
[97.99036407 36.04587936]
[91.46803284 21.63165665]
[100.27079010 9.61663342]
[101.56026459 -5.32783890]
[95.03793335 -19.74206161]
[103.84069061 -31.75708389]
[105.13015747 -46.70155716]
[97.69548798 -61.31858826]
[106.86248016 -74.91632080]
[123.20092010 -73.50656891]
[129.90322876 -58.53956985]
[120.07463074 -45.41208267]
[118.78516388 -30.46761131]
[125.39971924 -17.12231827]
[116.50473785 -4.03836727]
[115.21526337 10.90610504]
[121.82982635 24.25139809]
[112.93483734 37.33535004]
[111.64536285 52.27982330]
[110.35589600 67.22429657]
[109.06642151 82.16876984]
[120.00382233 100.00000000]
[109.06642151 117.83123016]
[110.35589600 132.77571106]
[111.64536285 147.72018433]
[112.93483734 162.66465759]
[114.22431183 177.60911560]
[116.15553284 192.48428345]
[118.72492981 207.26258850]
[121.29432678 222.04087830]
[127.25746918 235.80464172]
[136.28182983 247.78633118]
[145.30618286 259.76803589]
[154.33055115 271.74972534]
[170.01347351 273.70452881]
[179.65466309 286.22741699]
[177.53414917 301.88882446]
[164.91000366 311.39706421]
[149.27191162 309.11108398]
[139.89767456 296.38711548]
[142.34886169 280.77407837]
[133.32449341 268.79238892]
[124.30014038 256.81069946]
[115.27577972 244.82899475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 58]
[12 57]
[13 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[26 49]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[34 41]
[35 40]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
