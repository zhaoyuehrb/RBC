%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCCUGAAGCGGCUGUUUCGAGCCACGCGCCCAUCGGGUACCGAGGCACGCGCCGGGCGUCACGUGCGUUUCGCGGCGAGCGGAAAUGACGCGAGUUGUGUGAGCCGCCAGUAUGGCCGGGCU\
) } def
/len { sequence length } bind def

/coor [
[112.02134705 130.60423279]
[99.37786865 134.78073120]
[93.93889618 148.75991821]
[88.49992371 162.73910522]
[95.09119415 177.10331726]
[89.51662445 191.89183044]
[75.08352661 198.33085632]
[60.35478592 192.60025024]
[54.06871414 178.09986877]
[59.95471954 163.43254089]
[74.52074432 157.30012512]
[79.95971680 143.32095337]
[85.39868927 129.34176636]
[73.85519409 119.76325989]
[61.11920166 127.68756104]
[48.38320923 135.61186218]
[35.64721680 143.53616333]
[32.30695724 158.98342896]
[18.97709274 167.47402954]
[3.56600022 163.97064209]
[-4.78319454 150.55175781]
[-1.11706221 135.17855835]
[12.38934612 126.97171021]
[27.72291756 130.80017090]
[40.45890808 122.87586975]
[53.19490051 114.95156860]
[65.93089294 107.02726746]
[69.02769470 100.39523315]
[73.26531219 95.19330597]
[59.80880356 88.56590271]
[44.01012039 89.40975952]
[36.01102066 76.84538269]
[22.55451202 70.21798706]
[9.09800243 63.59058762]
[2.31192589 63.64674377]
[-2.67819476 60.65294647]
[-4.84782887 56.28816605]
[-17.96012306 49.00340271]
[-31.07241631 41.71864319]
[-44.18471146 34.43387985]
[-60.96694183 32.02701950]
[-63.29992676 15.23435593]
[-47.80936432 8.34387398]
[-36.89994812 21.32158661]
[-23.78765488 28.60634804]
[-10.67536068 35.89110947]
[2.43693280 43.17587280]
[15.72539902 50.13407898]
[29.18190765 56.76147461]
[42.63841629 63.38887024]
[57.47460175 62.07098007]
[66.43620300 75.10939789]
[79.89270782 81.73679352]
[102.68337250 72.96951294]
[123.30551147 86.04647064]
[137.80236816 82.19406128]
[152.29922485 78.34165192]
[163.64935303 67.31961823]
[177.93687439 71.52867889]
[192.43373108 67.67626953]
[206.93058777 63.82385635]
[212.60322571 49.50158691]
[225.47114563 41.36094284]
[240.48753357 42.34669495]
[251.90737915 51.87168121]
[266.40423584 48.01927185]
[274.36590576 34.63085938]
[289.12265015 30.93048286]
[301.83740234 38.60322571]
[316.33425903 34.75081635]
[330.83111572 30.89840698]
[345.27923584 26.86699295]
[359.67636108 22.65719032]
[374.07348633 18.44738770]
[388.41748047 14.05984020]
[402.70608521 9.49522018]
[416.99468994 4.93060064]
[431.28329468 0.36598083]
[445.57189941 -4.19863892]
[459.86050415 -8.76325893]
[467.15032959 -22.52902222]
[481.70602417 -26.95464897]
[494.78463745 -19.92008400]
[509.07324219 -24.48470306]
[523.36187744 -29.04932404]
[529.12365723 -43.58671951]
[542.90637207 -50.97388077]
[558.20227051 -47.72282028]
[567.78906250 -35.36858368]
[567.14019775 -19.74446869]
[556.56201172 -8.22770309]
[541.04919434 -6.25615025]
[527.92645264 -14.76071835]
[513.63787842 -10.19609833]
[499.34927368 -5.63147831]
[492.77117920 7.68259239]
[478.34555054 12.51531315]
[464.42510986 5.52534676]
[450.13650513 10.08996677]
[435.84790039 14.65458679]
[421.55929565 19.21920586]
[407.27069092 23.78382492]
[392.98208618 28.34844589]
[387.50912476 33.43547440]
[378.28329468 32.84452438]
[363.88616943 37.05432892]
[349.48901367 41.26412964]
[343.89190674 46.21423340]
[334.68353271 45.39526749]
[320.18667603 49.24767685]
[305.68981934 53.10008621]
[298.46136475 66.07255554]
[283.81436157 70.18595886]
[270.25665283 62.51613235]
[255.75978088 66.36853790]
[250.57490540 80.30608368]
[238.02882385 88.61631012]
[222.81723022 87.93754578]
[210.78300476 78.32071686]
[196.28614807 82.17312622]
[181.78927612 86.02553558]
[171.47607422 96.77201843]
[156.15164185 92.83850861]
[141.65478516 96.69091797]
[127.15792084 100.54332733]
[126.63462830 111.64511871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[14 27]
[15 26]
[16 25]
[17 24]
[29 53]
[30 52]
[32 50]
[33 49]
[34 48]
[37 47]
[38 46]
[39 45]
[40 44]
[55 125]
[56 124]
[57 123]
[59 121]
[60 120]
[61 119]
[65 115]
[66 114]
[69 111]
[70 110]
[71 109]
[72 107]
[73 106]
[74 105]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
