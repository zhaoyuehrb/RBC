%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:56 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (IDUA)
} def

/sequence { (\
GUCACAUGGGGUGCGCGCCCAGACUCCGACCCGGAGGCGGAACCGGCAGUGCAGCCCGAAGCCCCGCAGUCCCCGAGCACGCGUGGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.025782112 ubox
1 62 0.016186274 ubox
1 87 0.072907066 ubox
2 6 0.025481526 ubox
2 59 0.113196724 ubox
2 61 0.016007091 ubox
2 86 0.073057594 ubox
3 8 0.011940392 ubox
3 58 0.118629740 ubox
3 85 0.073240525 ubox
4 84 0.072987795 ubox
5 83 0.072245395 ubox
7 58 0.609575532 ubox
7 81 0.012193904 ubox
8 57 0.994914146 ubox
8 65 0.005644683 ubox
8 80 0.009179971 ubox
9 20 0.003807601 ubox
9 56 0.995572481 ubox
9 57 0.093287559 ubox
9 64 0.005657658 ubox
10 19 0.003825406 ubox
10 55 0.995366957 ubox
10 56 0.093465438 ubox
10 63 0.005656435 ubox
11 18 0.003837343 ubox
11 55 0.093509256 ubox
11 62 0.005650335 ubox
12 17 0.003691903 ubox
12 53 0.996990742 ubox
12 54 0.054909199 ubox
12 61 0.004943645 ubox
13 52 0.999946086 ubox
14 51 0.999939619 ubox
15 47 0.003180366 ubox
15 50 0.999442482 ubox
15 52 0.003928145 ubox
16 49 0.999204230 ubox
16 51 0.003944418 ubox
17 38 0.003382110 ubox
17 44 0.005474731 ubox
17 47 0.976561310 ubox
17 50 0.003951739 ubox
18 37 0.003386346 ubox
18 40 0.004291124 ubox
18 46 0.976389450 ubox
18 49 0.003958411 ubox
19 39 0.004990816 ubox
19 40 0.099307008 ubox
19 45 0.966299526 ubox
19 46 0.212477782 ubox
20 39 0.139523450 ubox
20 45 0.227238469 ubox
24 36 0.319546575 ubox
24 37 0.011924932 ubox
24 40 0.024627947 ubox
25 35 0.321211785 ubox
25 36 0.005190038 ubox
25 39 0.022563262 ubox
25 40 0.003371426 ubox
25 41 0.925649352 ubox
26 34 0.321497053 ubox
26 37 0.024173037 ubox
26 39 0.003191027 ubox
26 40 0.946438395 ubox
26 46 0.005168051 ubox
27 33 0.321468315 ubox
27 36 0.024197726 ubox
27 39 0.946504928 ubox
27 45 0.005329715 ubox
28 32 0.300733971 ubox
28 38 0.945935478 ubox
28 44 0.005907495 ubox
30 37 0.941746156 ubox
31 36 0.938517273 ubox
31 37 0.072055521 ubox
31 40 0.010114942 ubox
32 36 0.075326455 ubox
32 39 0.010168881 ubox
33 38 0.010222797 ubox
36 44 0.028708163 ubox
37 43 0.033932701 ubox
37 47 0.015916006 ubox
37 82 0.003338086 ubox
38 45 0.017846367 ubox
38 46 0.015587572 ubox
38 81 0.003341015 ubox
39 44 0.044768608 ubox
39 80 0.003335908 ubox
44 75 0.003289942 ubox
45 56 0.003966880 ubox
45 74 0.003299105 ubox
46 55 0.004238790 ubox
46 73 0.003277499 ubox
47 54 0.004482168 ubox
50 68 0.003179937 ubox
51 67 0.003201821 ubox
52 66 0.003200056 ubox
54 62 0.003379497 ubox
55 61 0.003380186 ubox
58 65 0.011444722 ubox
58 71 0.007225628 ubox
59 70 0.007044365 ubox
61 67 0.024897401 ubox
61 70 0.007073968 ubox
61 78 0.020354715 ubox
61 82 0.040540248 ubox
61 87 0.993131024 ubox
62 66 0.024742836 ubox
62 69 0.007363458 ubox
62 77 0.020348331 ubox
62 81 0.040507563 ubox
62 86 0.994250278 ubox
63 85 0.991828583 ubox
63 86 0.074009780 ubox
64 85 0.089180238 ubox
64 86 0.019349933 ubox
65 75 0.019569970 ubox
65 81 0.016463889 ubox
65 83 0.995266320 ubox
65 85 0.019719613 ubox
66 74 0.019334077 ubox
66 78 0.046228165 ubox
66 80 0.016537110 ubox
66 82 0.997694248 ubox
66 84 0.021367650 ubox
67 77 0.046307599 ubox
67 81 0.995497432 ubox
67 83 0.021473355 ubox
69 78 0.531668414 ubox
69 80 0.705704999 ubox
69 82 0.010126141 ubox
69 87 0.004918507 ubox
70 76 0.269960394 ubox
70 77 0.505942997 ubox
70 79 0.695466935 ubox
70 81 0.009588078 ubox
71 75 0.278859002 ubox
71 86 0.005423195 ubox
72 85 0.005468489 ubox
72 86 0.004809249 ubox
73 85 0.004867396 ubox
74 81 0.015874755 ubox
74 83 0.007856842 ubox
75 80 0.024033216 ubox
75 82 0.009192377 ubox
8 57 0.9500000 lbox
9 56 0.9500000 lbox
10 55 0.9500000 lbox
12 53 0.9500000 lbox
13 52 0.9500000 lbox
14 51 0.9500000 lbox
15 50 0.9500000 lbox
16 49 0.9500000 lbox
17 47 0.9500000 lbox
18 46 0.9500000 lbox
19 45 0.9500000 lbox
25 41 0.9500000 lbox
26 40 0.9500000 lbox
27 39 0.9500000 lbox
28 38 0.9500000 lbox
30 37 0.9500000 lbox
31 36 0.9500000 lbox
61 87 0.9500000 lbox
62 86 0.9500000 lbox
63 85 0.9500000 lbox
65 83 0.9500000 lbox
66 82 0.9500000 lbox
67 81 0.9500000 lbox
69 80 0.9500000 lbox
70 79 0.9500000 lbox
showpage
end
%%EOF
