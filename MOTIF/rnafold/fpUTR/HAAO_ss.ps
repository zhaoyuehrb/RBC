%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAGGCGGCUGGGCGGAGCUGCGGGCCUCCGACGGCGGGAGGACAGCGCUGCGAGGAGGCGCCCGGGACAGUC\
) } def
/len { sequence length } bind def

/coor [
[104.63497162 321.90219116]
[99.00682831 307.82742310]
[98.53507233 292.67639160]
[103.27666473 278.27871704]
[112.65904236 266.37295532]
[125.54922485 258.39682007]
[122.47099304 243.71606445]
[119.39276886 229.03532410]
[116.31453705 214.35456848]
[106.13008118 203.48597717]
[110.87069702 188.39170837]
[107.79246521 173.71095276]
[94.14949036 167.79426575]
[86.51625824 154.82516479]
[88.00073242 139.67095947]
[98.24220276 128.16363525]
[95.16397095 113.48288727]
[85.98091125 102.93949127]
[90.15528107 89.59534454]
[87.07704926 74.91458893]
[83.99881744 60.23384094]
[79.04454041 52.20833206]
[81.10998535 44.88329315]
[78.64106750 30.08787346]
[64.91719818 23.09060860]
[58.02560806 9.51270962]
[60.42228317 -5.34393740]
[70.98119354 -15.81519890]
[68.51227570 -30.61061859]
[66.04335785 -45.40603638]
[63.57444000 -60.20145798]
[61.10552216 -74.99687958]
[47.54437256 -82.78335571]
[42.20954132 -97.48279572]
[47.61997986 -112.15457916]
[61.22103882 -119.87113190]
[76.59071350 -116.98893738]
[86.47191620 -104.86888123]
[86.19904327 -89.23368073]
[75.90093994 -77.46579742]
[78.36985779 -62.67037582]
[80.83877563 -47.87495804]
[83.30770111 -33.07953644]
[85.77661896 -18.28411865]
[99.16343689 -11.80869198]
[106.25419617 1.46478176]
[104.14474487 16.54468918]
[93.43648529 27.61895561]
[95.90540314 42.41437531]
[98.67957306 57.15560913]
[101.75779724 71.83636475]
[104.83602905 86.51711273]
[114.01908875 97.06050873]
[109.84471893 110.40465546]
[112.92295074 125.08541107]
[126.92425537 131.50955200]
[134.37106323 144.79106140]
[132.59039307 159.73405457]
[122.47322083 170.63272095]
[125.55145264 185.31347656]
[135.95608521 197.23213196]
[130.99528503 211.27633667]
[134.07351685 225.95709229]
[137.15174866 240.63783264]
[140.22998047 255.31858826]
[155.23844910 257.44500732]
[168.61306763 264.57910156]
[178.73876953 275.85943604]
[184.39283752 289.92385864]
[184.89251709 305.07397461]
[180.17745972 319.48034668]
[170.81704712 331.40338135]
[157.94157410 339.40325928]
[143.10583496 342.51397705]
[128.10131836 340.35992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 65]
[7 64]
[8 63]
[9 62]
[11 60]
[12 59]
[16 55]
[17 54]
[19 52]
[20 51]
[21 50]
[23 49]
[24 48]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
