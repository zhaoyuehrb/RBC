%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAGCUGCGAGUGCAUUCUUGGACUGCCUUGUGAGCAUCCCCGGUCUGGGCAGGACCCUCUCCUUCCCAUCUUUCUAUACCACCCAGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[125.59306335 128.35523987]
[112.80702972 135.98617554]
[98.07483673 138.14863586]
[83.63518524 134.51402283]
[71.68234253 125.63465118]
[64.03265381 112.85982513]
[49.19168091 115.03825378]
[34.35071182 117.21668243]
[19.54695892 119.63514709]
[4.78431225 122.29300690]
[-9.97833443 124.95087433]
[-24.74098206 127.60874176]
[-39.50362778 130.26660156]
[-47.57480621 134.94824219]
[-54.78681564 132.76339722]
[-69.62778473 134.94181824]
[-84.46875763 137.12025452]
[-96.99894714 146.77969360]
[-110.71496582 140.97279358]
[-125.55593872 143.15121460]
[-140.34904480 151.43374634]
[-152.40303040 139.51159668]
[-144.28367615 124.62831116]
[-127.73436737 128.31025696]
[-112.89339447 126.13182068]
[-101.42472839 116.62818909]
[-86.64718628 122.27928162]
[-71.80621338 120.10085297]
[-56.96524429 117.92242432]
[-42.16149521 115.50395966]
[-27.39884758 112.84609222]
[-12.63619995 110.18822479]
[2.12644744 107.53036499]
[16.88909531 104.87249756]
[23.03083229 100.50606537]
[32.17228317 102.37570953]
[47.01325226 100.19728088]
[61.85422516 98.01885223]
[65.51002502 83.58455658]
[74.40693665 71.64475250]
[87.19297028 64.01382446]
[101.92516327 61.85136032]
[116.36481476 65.48597717]
[128.31765747 74.36534882]
[135.96734619 87.14017487]
[150.80831909 84.96174622]
[159.02685547 80.54392242]
[166.16433716 82.96116638]
[181.06806946 81.26445770]
[195.97180176 79.56774902]
[210.87553406 77.87104797]
[225.77926636 76.17433929]
[240.68299866 74.47763062]
[253.51939392 65.22899628]
[267.04019165 71.47700500]
[281.94390869 69.78030396]
[283.28173828 54.78713226]
[287.61062622 40.37027740]
[294.75329590 27.12009811]
[304.41723633 15.57918072]
[316.20675659 6.22011757]
[329.63906860 -0.57384276]
[344.16412354 -4.52449226]
[359.18713379 -5.47005415]
[374.09292603 -3.37180805]
[388.27108765 1.68432379]
[401.14105225 9.49129677]
[412.17581177 19.72941780]
[420.92349243 31.97944641]
[427.02584839 45.73974991]
[430.23303223 60.44684982]
[430.41372681 75.49850464]
[427.56048584 90.27835083]
[421.79016113 104.18116760]
[413.33908081 116.63764954]
[402.55325317 127.13770294]
[389.87442017 135.25135803]
[375.82168579 140.64636230]
[360.97058105 143.10180664]
[345.92919922 142.51713562]
[331.31350708 138.91629028]
[317.72195435 132.44671631]
[305.71118164 123.37334442]
[295.77297974 112.06772614]
[288.31433105 98.99282074]
[283.64062500 84.68402863]
[268.73687744 86.38073730]
[256.96649170 95.50801086]
[242.37969971 89.38136292]
[227.47596741 91.07806396]
[212.57223511 92.77477264]
[197.66850281 94.47148132]
[182.76478577 96.16819000]
[167.86105347 97.86489868]
[152.98674011 99.80271912]
[138.14576721 101.98114777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[8 36]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[15 29]
[16 28]
[17 27]
[19 25]
[20 24]
[45 96]
[46 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[55 87]
[56 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
