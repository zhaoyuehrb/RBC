%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGCUGCCUUAUAAAGCACCAAGAGGCUGCCAGUGGGACAUUUUCUCGGCCCUGCCAGCCCCCAGGAGGAAGGUGGGUCUGAAUCUAGCACC\
) } def
/len { sequence length } bind def

/coor [
[31.50478554 158.67076111]
[23.15229607 160.27705383]
[14.96531391 158.35292053]
[8.35462666 153.31004333]
[-5.75016451 158.41444397]
[-19.85495567 163.51884460]
[-30.19857407 175.49047852]
[-44.79922485 172.54595947]
[-58.90401459 177.65034485]
[-73.00880432 182.75474548]
[-87.11360168 187.85914612]
[-101.21839142 192.96354675]
[-102.71474457 208.15313721]
[-110.66075897 221.18476868]
[-123.47875214 229.47100830]
[-138.62370300 231.36662292]
[-153.08856201 226.49522400]
[-164.00132751 215.82403564]
[-169.19526672 201.47183228]
[-167.63909912 186.28825378]
[-159.64183044 173.28800964]
[-146.79130554 165.05230713]
[-131.63900757 163.21635437]
[-117.19344330 168.14466858]
[-106.32278442 178.85874939]
[-92.21799469 173.75434875]
[-78.11320496 168.64996338]
[-64.00841522 163.54556274]
[-49.90362167 158.44116211]
[-40.56887436 146.83462524]
[-24.95935249 149.41404724]
[-10.85456181 144.30966187]
[3.25022888 139.20526123]
[15.05031967 121.15834808]
[37.13370132 124.23609161]
[50.44204330 117.31597137]
[63.75038528 110.39585114]
[62.38582993 97.30135345]
[65.60572815 84.53576660]
[73.01763153 73.65497589]
[83.71817780 65.98514557]
[96.40316010 62.46107101]
[109.52653503 63.51228333]
[121.48880005 69.01065063]
[130.83200073 78.28603363]
[144.56860352 72.26060486]
[158.30519104 66.23516846]
[163.79113770 54.41887665]
[175.51490784 49.73670578]
[186.88055420 54.22745514]
[200.80886841 48.65949631]
[214.73716736 43.09153748]
[228.66548157 37.52357864]
[242.59379578 31.95561790]
[249.56681824 25.74418640]
[257.07583618 26.44223022]
[271.18060303 21.33783340]
[285.28540039 16.23343468]
[292.04675293 2.20054936]
[306.42373657 -2.77510762]
[319.76028442 3.75728726]
[333.86508179 -1.34711039]
[339.07015991 -16.09299278]
[352.56216431 -23.99866676]
[367.97058105 -21.33131599]
[378.02001953 -9.35037899]
[377.96545410 6.28710890]
[367.83261108 18.19760513]
[352.40597534 20.75733948]
[338.96945190 12.75768089]
[324.86468506 17.86207771]
[318.79739380 31.41654587]
[304.56582642 36.79405975]
[290.38980103 30.33822632]
[276.28500366 35.44262314]
[262.18020630 40.54701996]
[248.16175842 45.88393021]
[234.23344421 51.45188904]
[220.30513000 57.01984787]
[206.37681580 62.58780670]
[192.44851685 68.15576172]
[182.47778320 82.49311829]
[164.33062744 79.97177124]
[150.59402466 85.99720001]
[136.85742188 92.02263641]
[136.69456482 108.69582367]
[129.35792542 123.66897583]
[116.28182220 134.01486206]
[100.02262878 137.71084595]
[83.75901031 134.03437805]
[70.67050171 123.70419312]
[57.36215973 130.62431335]
[44.05381775 137.54443359]
[43.01560593 146.27494812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[35 93]
[36 92]
[37 91]
[45 85]
[46 84]
[47 83]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[56 76]
[57 75]
[58 74]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
