%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACACGUGUCAAUCAACCCCCCUCCGGGGGGCGCGCGCUCCGGGGCUCGCGCCGAGGGCUCGCGCCCCUGCCUCGUGCCUGCGCUGCUCGUAUGUAAAUGAGGGCGCGUGACGCGGGACGCAG\
) } def
/len { sequence length } bind def

/coor [
[123.53656006 138.60572815]
[118.72240448 152.81219482]
[113.90824890 167.01867676]
[109.09409332 181.22514343]
[112.83071899 197.19291687]
[100.68703461 208.21394348]
[85.15543365 202.95074463]
[82.21348572 186.81764221]
[94.88761902 176.41099548]
[99.70177460 162.20451355]
[104.51593018 147.99804688]
[109.33008575 133.79156494]
[103.86281586 128.65747070]
[97.47610474 142.22985840]
[82.59439087 140.34980774]
[79.78374481 125.61549377]
[92.92829132 118.38925934]
[87.46102142 113.25515747]
[73.58486938 118.95184326]
[59.70870590 124.64852905]
[53.84684372 139.32551575]
[39.29093170 145.48190308]
[24.67673683 139.46519470]
[18.67459679 124.84500122]
[24.84547997 110.29523468]
[39.52830887 104.44800568]
[54.01202011 110.77236938]
[67.88817596 105.07568359]
[81.76433563 99.37899780]
[85.49468231 84.85025024]
[76.07931519 73.17331696]
[66.66394806 61.49637985]
[57.24857330 49.81944656]
[47.83320236 38.14250946]
[38.41783524 26.46557617]
[29.00246239 14.78864193]
[14.31701756 8.90236378]
[12.35141563 -5.86197376]
[2.93604517 -17.53890800]
[-6.47932529 -29.21584320]
[-15.89469528 -40.89277649]
[-25.45605469 -52.45047760]
[-35.16189575 -63.88711548]
[-44.86773300 -75.32375336]
[-60.32999802 -74.02066040]
[-73.58770752 -82.08370972]
[-79.54299927 -96.41249847]
[-75.90594482 -111.49730682]
[-64.07506561 -121.53772736]
[-48.59957886 -122.67300415]
[-35.43011856 -114.46660614]
[-29.63061714 -100.07405853]
[-33.43109512 -85.02959442]
[-23.72525787 -73.59295654]
[-14.01941776 -62.15631485]
[-7.21656895 -59.05767822]
[-4.21776104 -50.30814743]
[5.19760942 -38.63121414]
[14.61297989 -26.95427895]
[24.02835083 -15.27734375]
[38.04034424 -10.22627926]
[40.67939758 5.37327099]
[50.09476852 17.05020523]
[59.51013947 28.72714043]
[68.92550659 40.40407562]
[78.34088135 52.08100891]
[87.75624847 63.75794220]
[97.17162323 75.43487549]
[110.22437286 82.82579041]
[125.08129883 84.89263916]
[139.93821716 86.95949554]
[154.79513550 89.02635193]
[169.69931030 90.71920013]
[184.64131165 92.03696442]
[199.58331299 93.35473633]
[214.52532959 94.67250061]
[229.46733093 95.99027252]
[244.40933228 97.30803680]
[257.54882812 85.84082794]
[274.58651733 87.33884430]
[285.10140991 100.39926147]
[300.07180786 101.34111786]
[315.04220581 102.28298187]
[330.01260376 103.22483826]
[344.98303223 104.16669464]
[359.95343018 105.10855103]
[368.82803345 102.50310516]
[375.28671265 106.26685333]
[390.22872925 107.58461761]
[405.17071533 108.90238953]
[420.11273193 110.22015381]
[435.05471802 111.53792572]
[447.00610352 101.19674683]
[462.76309204 102.41864777]
[472.97732544 114.47869873]
[471.58892822 130.22187805]
[459.42153931 140.30804443]
[443.69390869 138.75325012]
[433.73696899 126.47992706]
[418.79495239 125.16216278]
[403.85296631 123.84439087]
[388.91094971 122.52662659]
[373.96893311 121.20885468]
[359.01156616 120.07895660]
[344.04116821 119.13709259]
[329.07077026 118.19523621]
[314.10037231 117.25337982]
[299.12994385 116.31152344]
[284.15954590 115.36966705]
[275.72753906 125.19849396]
[262.97546387 128.38987732]
[250.54379272 123.54982758]
[243.09156799 112.25003815]
[228.14956665 110.93227386]
[213.20755005 109.61450195]
[198.26554871 108.29673767]
[183.32354736 106.97896576]
[168.38154602 105.66120148]
[164.13517761 108.06241608]
[158.31916809 107.74230194]
[152.72828674 103.88327026]
[137.87136841 101.81642151]
[123.01444244 99.74956512]
[108.15752411 97.68270874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[18 29]
[19 28]
[20 27]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[38 60]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[69 124]
[70 123]
[71 122]
[72 121]
[73 118]
[74 117]
[75 116]
[76 115]
[77 114]
[78 113]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
