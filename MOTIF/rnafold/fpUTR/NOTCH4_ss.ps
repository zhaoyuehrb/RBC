%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGUGAGGCUUGCAGCAGGCCGAGGAGGAAGAAGAGGGGCAGUGGGAGCAGAGGAGGUGGCUCCUGCCCCAGUGAGAGCUCUGAGGGUCCCUGCCUGAAGAGGGACAGGGACCGGGGCUUGGAGAAGGGGCUGUGGA\
) } def
/len { sequence length } bind def

/coor [
[152.71549988 191.59513855]
[140.09735107 199.70578003]
[125.61164093 203.59991455]
[110.62754059 202.90950012]
[96.56130981 197.69978333]
[84.74246216 188.46318054]
[76.28809357 176.07272339]
[71.99729156 161.69950867]
[72.27562714 146.70210266]
[77.09674072 132.49806213]
[62.40160751 135.50691223]
[47.70647430 138.51574707]
[33.01134491 141.52459717]
[21.04367638 151.87280273]
[7.02306032 146.84571838]
[-7.67207098 149.85455322]
[-12.21122932 160.94859314]
[-21.47229767 168.36766052]
[-33.05208206 170.33628845]
[-44.01743317 166.47441101]
[-51.64817429 157.86395264]
[-66.46350098 160.21046448]
[-81.27882385 162.55699158]
[-84.14679718 177.44155884]
[-91.93529510 190.44598389]
[-103.70381927 199.99990845]
[-118.03127289 204.94966125]
[-133.18753052 204.69752502]
[-147.34240723 199.27395630]
[-158.78663635 189.33386230]
[-166.13827515 176.07756042]
[-168.50956726 161.10583496]
[-165.61416626 146.22657776]
[-157.80171204 133.23652649]
[-146.01559448 123.70429230]
[-131.67904663 118.78096008]
[-116.52328491 119.06102753]
[-102.37841797 124.51067352]
[-90.95252991 134.47184753]
[-83.62534332 147.74165344]
[-68.81001282 145.39514160]
[-53.99468994 143.04862976]
[-44.22496414 127.63854218]
[-25.99812698 124.12092590]
[-10.68091202 135.15942383]
[4.01421881 132.15058899]
[14.93079376 122.01758575]
[30.00250435 126.82946014]
[44.69763565 123.82061768]
[59.39276505 120.81177521]
[74.08789825 117.80294037]
[77.49282837 111.12038422]
[84.30268097 97.75528717]
[87.70761108 91.07273865]
[81.50423431 77.41558075]
[75.30085754 63.75841522]
[69.09748077 50.10124969]
[62.89410019 36.44408798]
[49.24768829 27.34972572]
[50.57030487 11.00400162]
[65.50136566 4.22199440]
[78.68106079 13.98045254]
[76.55126190 30.24071121]
[82.75463867 43.89787292]
[88.95802307 57.55503845]
[95.16139984 71.21220398]
[101.36477661 84.86936188]
[114.72987366 91.67922211]
[129.42500305 88.67037964]
[144.12013245 85.66153717]
[158.81526184 82.65269470]
[173.51039124 79.64385223]
[177.33938599 63.87017822]
[187.61161804 51.37733078]
[202.24264526 44.62089920]
[218.29792786 44.90043640]
[232.58131409 52.10981750]
[242.27134705 64.76841736]
[256.89526367 61.43060684]
[271.51919556 58.09279251]
[286.14309692 54.75497818]
[300.76702881 51.41716385]
[315.39096069 48.07934952]
[330.01486206 44.74153519]
[333.95578003 41.07028961]
[338.46691895 39.49394226]
[342.63272095 39.87027359]
[345.73413086 41.70635223]
[360.54943848 39.35983658]
[375.36477661 37.01332092]
[390.18011475 34.66680145]
[404.99542236 32.32028580]
[419.81076050 29.97376823]
[434.62606812 27.62725067]
[449.44140625 25.28073502]
[464.22946167 22.76814079]
[478.98840332 20.08978844]
[493.74734497 17.41143417]
[504.02877808 5.09592915]
[520.06390381 5.59972239]
[529.55200195 18.53634834]
[525.21453857 33.98193359]
[510.37890625 40.08794785]
[496.42572021 32.17037964]
[481.66677856 34.84873199]
[466.90783691 37.52708435]
[460.83810425 41.85207748]
[451.78793335 40.09605789]
[436.97259521 42.44257736]
[422.15725708 44.78909302]
[407.34194946 47.13560867]
[392.52661133 49.48212814]
[377.71130371 51.82864380]
[362.89596558 54.17516327]
[348.08065796 56.52167892]
[333.35269165 59.36545563]
[318.72875977 62.70326996]
[304.10482788 66.04108429]
[289.48092651 69.37889862]
[274.85699463 72.71671295]
[260.23309326 76.05452728]
[245.60916138 79.39234161]
[243.17665100 93.09420776]
[235.66894531 104.86296082]
[224.19790649 112.89403534]
[210.48599243 115.94100952]
[196.60768127 113.50889587]
[184.67567444 105.93424225]
[176.51924133 94.33898926]
[161.82411194 97.34783173]
[147.12898254 100.35666656]
[132.43383789 103.36550903]
[117.73871613 106.37435150]
[132.66224670 107.88705444]
[146.42095947 113.86180115]
[157.71443176 123.73386383]
[165.47520447 136.57015991]
[168.96975708 151.15740967]
[167.86778259 166.11688232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 51]
[11 50]
[12 49]
[13 48]
[15 46]
[16 45]
[21 42]
[22 41]
[23 40]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[68 133]
[69 132]
[70 131]
[71 130]
[72 129]
[78 122]
[79 121]
[80 120]
[81 119]
[82 118]
[83 117]
[84 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
