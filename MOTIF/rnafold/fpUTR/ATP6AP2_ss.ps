%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGACGAGUCCGAGCGCGUCACCUCCUCACGCUGCGGCUGUCGCCCGUGUCCCGCCGGCCCGUUCCGUGUCGCCCCGCAGUGCUGCGGCCGCCGCGGCACC\
) } def
/len { sequence length } bind def

/coor [
[152.72155762 201.74664307]
[149.00967407 185.81329346]
[153.81901550 170.07856750]
[143.45779419 159.23213196]
[136.44247437 156.52378845]
[132.95225525 147.89335632]
[122.92663574 136.73597717]
[112.90101624 125.57861328]
[98.41861725 128.60421753]
[84.35800171 124.00061798]
[74.46935272 112.99567413]
[71.39012909 98.52458191]
[75.94161224 84.44700623]
[65.91599274 73.28964233]
[55.89036942 62.13226700]
[45.86474991 50.97489548]
[35.83912659 39.81752396]
[20.86024666 34.72403336]
[18.10885620 20.08575630]
[8.08323479 8.92838478]
[-1.94238567 -2.22898650]
[-16.00612450 3.37784815]
[-31.11122513 3.83387423]
[-45.43401337 -0.89665592]
[-57.25188065 -10.22447014]
[-65.15043640 -23.00861168]
[-68.19280243 -37.69596863]
[-66.03068542 -52.50996017]
[-58.94412613 -65.66542053]
[-68.96974945 -76.82278442]
[-78.99536896 -87.98015594]
[-89.02098846 -99.13752747]
[-101.94342804 -100.63945007]
[-110.06316376 -110.28250122]
[-109.38655090 -122.46690369]
[-119.06724548 -133.92483521]
[-128.74795532 -145.38275146]
[-144.54980469 -148.15423584]
[-152.10847473 -162.30506897]
[-145.62559509 -176.97993469]
[-130.07429504 -180.92155457]
[-117.38417816 -171.10623169]
[-117.29002380 -155.06346130]
[-107.60932159 -143.60552979]
[-97.92862701 -132.14761353]
[-81.16860962 -127.19750214]
[-77.86361694 -109.16315460]
[-67.83799744 -98.00578308]
[-57.81237793 -86.84841156]
[-47.78675461 -75.69104004]
[-33.95111465 -81.33553314]
[-18.99107933 -81.90690613]
[-4.71149731 -77.31691742]
[7.15827179 -68.10116577]
[15.17378616 -55.35668945]
[18.35128593 -40.61139679]
[16.28840065 -25.64087486]
[9.21498585 -12.25460720]
[19.24060631 -1.09723592]
[29.26622581 10.06013489]
[43.52800751 14.35557938]
[46.99649811 29.79190445]
[57.02212143 40.94927597]
[67.04773712 52.10664749]
[77.07336426 63.26401901]
[87.09898376 74.42138672]
[101.58138275 71.39579010]
[115.64199829 75.99938202]
[125.53064728 87.00432587]
[128.60987854 101.47541809]
[124.05838776 115.55299377]
[134.08401489 126.71035767]
[144.10963440 137.86773682]
[154.30422974 148.87091064]
[164.66545105 159.71736145]
[178.15881348 155.69422913]
[191.99739075 157.90380859]
[203.45777893 165.85289001]
[210.30995178 177.92459106]
[211.25102234 191.70683289]
[206.15267944 204.47436523]
[216.17829895 215.63174438]
[226.20391846 226.78910828]
[236.22953796 237.94648743]
[246.25515747 249.10385132]
[256.28076172 260.26123047]
[266.30639648 271.41857910]
[276.33203125 282.57595825]
[286.35763550 293.73333740]
[301.44152832 301.47366333]
[298.17935181 318.11080933]
[281.28933716 319.58172607]
[275.20025635 303.75894165]
[265.17465210 292.60159302]
[255.14901733 281.44421387]
[245.12339783 270.28683472]
[235.09777832 259.12948608]
[225.07215881 247.97210693]
[215.04653931 236.81472778]
[205.02091980 225.65736389]
[194.99530029 214.49998474]
[179.35580444 218.23841858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[6 73]
[7 72]
[8 71]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[19 60]
[20 59]
[21 58]
[29 50]
[30 49]
[31 48]
[32 47]
[35 45]
[36 44]
[37 43]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
