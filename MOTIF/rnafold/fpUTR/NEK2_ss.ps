%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACGGUUAAACGGGGCCCAAGGCAGGGGUGGCGGGUCAGUGCUGCUCGGGGGCUUCUCCAUCCAGGUCCCUGGAGUUCCUGGUCCCUGGAGCUCCGCACUUGGCGGCGCAACCUGCGUGAGGCAGCGCGACUCUGGCGACUGGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[-48.23922729 485.73410034]
[-49.55865479 493.92800903]
[-53.99040222 500.83322144]
[-60.73310852 505.34072876]
[-68.62215424 506.76263428]
[-74.36240387 520.62084961]
[-68.08356476 535.12432861]
[-73.97689819 549.78875732]
[-88.54598236 555.91387939]
[-103.14723969 549.86584473]
[-109.11800385 535.23278809]
[-102.91593170 520.69628906]
[-88.22059631 514.88061523]
[-82.48034668 501.02239990]
[-87.54585266 480.00289917]
[-69.83010864 466.33322144]
[-65.25386810 452.04830933]
[-60.67761993 437.76342773]
[-56.10137558 423.47854614]
[-57.42869568 420.14755249]
[-57.16946030 415.99807739]
[-54.95248795 411.80117798]
[-50.77350998 408.46600342]
[-45.32089233 394.49212646]
[-39.86827087 380.51828003]
[-44.82571411 371.49508667]
[-43.94585037 361.01623535]
[-37.27974319 352.60037231]
[-26.86168480 349.20800781]
[-20.83625412 335.47140503]
[-14.81082153 321.73480225]
[-16.78394890 306.97146606]
[-4.15486908 297.44168091]
[1.87056243 283.70507812]
[7.61081409 269.84689331]
[13.06343365 255.87301636]
[18.51605225 241.89915466]
[23.96867180 227.92527771]
[29.42129135 213.95141602]
[28.91964531 206.53001404]
[35.13370132 199.74700928]
[40.87395096 185.88882446]
[46.61420441 172.03062439]
[52.35445404 158.17243958]
[58.09470749 144.31423950]
[63.83495712 130.45605469]
[69.57521057 116.59785461]
[75.31546021 102.73966217]
[73.76808929 87.81968689]
[65.30609894 75.43442535]
[56.84410095 63.04916763]
[48.38210678 50.66390991]
[39.92011261 38.27865219]
[31.45811653 25.89339066]
[22.99612236 13.50813198]
[14.53412724 1.12287259]
[6.07213259 -11.26238632]
[-9.44175911 -11.57669544]
[-21.78764915 -20.97662163]
[-26.21829033 -35.84770203]
[-21.03001213 -50.47170258]
[-8.21781254 -59.22539902]
[7.29175663 -58.74280930]
[19.53494835 -49.20950699]
[23.80400848 -34.29123688]
[18.45739174 -19.72438049]
[26.91938591 -7.33912182]
[35.38138199 5.04613733]
[43.84337616 17.43139648]
[52.30537033 29.81665611]
[60.76736450 42.20191574]
[69.22936249 54.58717346]
[77.69135284 66.97243500]
[86.15335083 79.35769653]
[101.07332611 77.81032562]
[106.81357574 63.95212936]
[112.55382538 50.09393692]
[118.29407501 36.23574448]
[124.03433228 22.37755013]
[129.77458191 8.51935768]
[135.51483154 -5.33883572]
[127.29267120 -18.49845695]
[128.40940857 -33.97529602]
[138.43565369 -45.81818771]
[153.51608276 -49.47330475]
[167.85200500 -43.53517914]
[175.93092346 -30.28713799]
[174.64634705 -14.82332516]
[164.49223328 -3.08989239]
[149.37303162 0.40141597]
[143.63276672 14.25960922]
[137.89251709 28.11780167]
[132.15226746 41.97599411]
[126.41201782 55.83418655]
[120.67176819 69.69238281]
[114.93151855 83.55057526]
[126.07176971 93.59520721]
[139.26388550 86.45600128]
[152.45597839 79.31678772]
[158.39332581 64.41284180]
[173.78871155 59.90047073]
[186.83212280 69.24117279]
[187.51777649 85.26956940]
[175.31968689 95.69004059]
[159.59519958 92.50889587]
[146.40309143 99.64810944]
[133.21098328 106.78731537]
[136.89326477 121.32832336]
[151.89326477 121.32832336]
[166.89326477 121.32832336]
[181.89326477 121.32832336]
[196.89326477 121.32832336]
[212.73239136 115.28198242]
[222.92715454 128.82832336]
[212.73239136 142.37466431]
[196.89326477 136.32832336]
[181.89326477 136.32832336]
[166.89326477 136.32832336]
[151.89326477 136.32832336]
[136.89326477 136.32832336]
[108.78596497 138.10217285]
[91.19048309 124.91547394]
[89.17365265 108.47991180]
[83.43340302 122.33810425]
[77.69315338 136.19630432]
[71.95289612 150.05448914]
[66.21264648 163.91268921]
[60.47239685 177.77087402]
[54.73214340 191.62907410]
[48.99189377 205.48725891]
[43.39515686 219.40403748]
[37.94253922 233.37789917]
[32.48991776 247.35177612]
[27.03730011 261.32562256]
[21.58468056 275.29949951]
[22.21375465 281.98373413]
[19.70899010 287.17370605]
[15.60716248 289.73049927]
[9.58173084 303.46710205]
[11.12387848 319.21298218]
[-1.07422197 327.76022339]
[-7.09965324 341.49682617]
[-13.12508488 355.23342896]
[-9.94934464 375.09805298]
[-25.89440536 385.97088623]
[-31.34702492 399.94476318]
[-36.79964447 413.91864014]
[-41.81648636 428.05480957]
[-46.39273453 442.33969116]
[-50.96897888 456.62457275]
[-55.54522324 470.90945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[16 151]
[17 150]
[18 149]
[19 148]
[23 147]
[24 146]
[25 145]
[29 143]
[30 142]
[31 141]
[33 139]
[34 138]
[35 135]
[36 134]
[37 133]
[38 132]
[39 131]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[46 125]
[47 124]
[48 123]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[80 91]
[81 90]
[97 107]
[98 106]
[99 105]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
