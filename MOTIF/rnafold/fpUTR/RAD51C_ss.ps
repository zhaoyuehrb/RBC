%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCACGCCGCACGCCCCAGCGAGGGCGUGCGGAGUUUGGCUGCUCCGGGGUUAGCAGGUGAGCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[131.26174927 211.87222290]
[123.92985535 206.48886108]
[118.63939667 199.04713440]
[115.94336700 190.28738403]
[116.13532257 181.08952332]
[119.21757507 172.38462830]
[124.89876556 165.06066895]
[117.97254181 151.75550842]
[105.23267365 144.03897095]
[105.72352600 128.22538757]
[98.79730225 114.92021942]
[78.96166229 105.05625916]
[65.10346985 99.31600189]
[51.24527359 93.57575226]
[37.38708115 87.83550262]
[23.52888680 82.09525299]
[9.67069435 76.35499573]
[-4.18749857 70.61474609]
[-18.04569054 64.87449646]
[-32.54920197 71.15332794]
[-47.21358871 65.26000214]
[-53.33872986 50.69091797]
[-47.29069138 36.08966064]
[-32.65766525 30.11889076]
[-18.12116432 36.32096481]
[-12.30543995 51.01630402]
[1.55275297 56.75655365]
[15.41094589 62.49680710]
[29.26913834 68.23705292]
[43.12733078 73.97731018]
[56.98552322 79.71755981]
[70.84371948 85.45780945]
[84.70191193 91.19805908]
[98.79730225 86.06776428]
[105.72352600 72.76259613]
[112.64975739 59.45743561]
[119.57598877 46.15227127]
[126.50222015 32.84711075]
[121.51133728 17.85155487]
[128.66032410 3.75660777]
[143.70780945 -1.07544768]
[157.72639465 6.22216082]
[162.39907837 21.31989098]
[154.95367432 35.26052856]
[139.80737305 39.77333832]
[132.88114929 53.07850266]
[125.95491791 66.38366699]
[119.02869415 79.68882751]
[112.10246277 92.99398804]
[112.10246277 107.99398804]
[119.02869415 121.29914856]
[132.26397705 129.96736145]
[131.27770996 144.82928467]
[138.20393372 158.13444519]
[160.00111389 162.21951294]
[172.41328430 180.29554749]
[168.48760986 201.61499023]
[178.62145996 212.67414856]
[188.75531006 223.73332214]
[198.88917542 234.79248047]
[209.02302551 245.85163879]
[224.81735229 250.26422119]
[228.63046265 266.21389771]
[216.53974915 277.29299927]
[200.98309326 272.10430908]
[197.96386719 255.98548889]
[187.83000183 244.92633057]
[177.69615173 233.86717224]
[167.56230164 222.80801392]
[157.42845154 211.74885559]
[148.90699768 214.62002563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[10 51]
[11 50]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
