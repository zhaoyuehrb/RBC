%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGCCGUCCCCUUUCCGGGCGCCGCCAUAAAGGGGCCUUGCGGGGGCCCGGGGCCGUGGCCGCAGCGCUCAGCUCCUGCGCCCCGACCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[89.52077484 124.40611267]
[84.79415131 138.64195251]
[80.06752777 152.87779236]
[80.81479645 169.81526184]
[64.74611664 175.22209167]
[55.10233688 161.27813721]
[65.83168793 148.15116882]
[70.55831146 133.91532898]
[75.28493500 119.67948914]
[68.99412537 106.06237793]
[55.09037399 100.43337250]
[41.18662262 94.80436707]
[27.28287315 89.17536163]
[13.37912083 83.54635620]
[-0.52463049 77.91735840]
[-10.34497929 85.99240875]
[-22.61474609 89.03385162]
[-34.92686844 86.50967407]
[-44.89373016 78.97346497]
[-50.61016846 67.94447327]
[-51.01749420 55.60167313]
[-64.53202820 49.09341812]
[-78.04656219 42.58515930]
[-91.56109619 36.07690430]
[-107.35170746 37.06029892]
[-115.46149445 24.56707764]
[-128.97602844 18.05882072]
[-142.57597351 25.53018570]
[-157.96583557 23.54740715]
[-169.22793579 12.87290573]
[-172.03172302 -2.38875628]
[-165.29911804 -16.36915779]
[-151.61892700 -23.69254875]
[-136.25148010 -21.54293823]
[-125.10585022 -10.74689198]
[-122.46777344 4.54428816]
[-108.95323944 11.05254459]
[-94.12927246 9.60363388]
[-85.05283356 22.56237030]
[-71.53830719 29.07062721]
[-58.02376938 35.57888412]
[-44.50923920 42.08713913]
[-29.53969765 33.00466156]
[-11.94762421 34.59916306]
[1.37648511 46.43066025]
[5.10437441 64.01360321]
[19.00812531 69.64260864]
[32.91187668 75.27161407]
[46.81562805 80.90061951]
[60.71937943 86.52962494]
[74.62313080 92.15863037]
[99.33090210 76.85493469]
[118.50016785 93.08940887]
[133.49246216 93.57018280]
[148.48475647 94.05095673]
[163.47705078 94.53173065]
[178.46934509 95.01250458]
[192.51042175 87.72149658]
[204.98315430 95.86274719]
[219.97544861 96.34352112]
[228.84213257 93.44971466]
[235.43838501 97.08763885]
[250.40757751 98.04869843]
[264.67510986 91.21147156]
[276.88052368 99.74831390]
[291.84970093 100.70936584]
[306.81887817 101.67041779]
[321.78805542 102.63147736]
[336.75723267 103.59252930]
[352.95281982 95.01522064]
[367.22451782 105.08805084]
[382.21682739 105.56882477]
[398.24160767 100.03326416]
[407.99694824 113.89939880]
[397.37326050 127.11202240]
[381.73605347 120.56111908]
[366.74374390 120.08034515]
[357.59924316 128.17691040]
[344.98828125 127.78334808]
[335.79617310 118.56170654]
[320.82699585 117.60065460]
[305.85781860 116.63960266]
[290.88864136 115.67855072]
[275.91946411 114.71749878]
[262.72259521 121.62345886]
[249.44651794 113.01787567]
[234.47734070 112.05682373]
[219.49467468 111.33581543]
[204.50238037 110.85504150]
[191.53366089 118.18044281]
[177.98857117 110.00479889]
[162.99627686 109.52402496]
[148.00398254 109.04325104]
[133.01168823 108.56247711]
[118.01939392 108.08170319]
[114.78635406 115.54158020]
[108.41222382 121.57257843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[21 42]
[22 41]
[23 40]
[24 39]
[26 37]
[27 36]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[62 87]
[63 86]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
