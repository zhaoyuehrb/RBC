%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCCCAGUCCUGCUGUCCCAAGGGACUCCGGGGUCAGGUGGAGCAGGCAGGGCAGUCUGCCACGGGCUCCCCAACUGAAGCCACUCUGGGGAGGGUCCGGCCACCAGAAAAUUUGCCCAGCUUUGCUGCCUGUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[16.88767052 260.82708740]
[23.43542290 274.32254028]
[23.60813141 289.32153320]
[17.37286568 302.96417236]
[5.91853237 312.64910889]
[-8.57080936 316.52969360]
[-23.33240509 313.86599731]
[-35.55158234 305.16589355]
[-42.89845276 292.08831787]
[-43.97214508 277.12677002]
[-38.56616592 263.13146973]
[-51.20954895 271.20269775]
[-63.85293198 279.27392578]
[-76.49631500 287.34518433]
[-80.01817322 302.51864624]
[-92.95534515 310.52392578]
[-107.39922333 307.07284546]
[-120.04261017 315.14407349]
[-132.68598938 323.21533203]
[-145.32937622 331.28656006]
[-152.40385437 346.08126831]
[-168.77244568 347.08203125]
[-177.59652710 333.25930786]
[-169.79866028 318.83276367]
[-153.40061951 318.64318848]
[-140.75723267 310.57192993]
[-128.11384583 302.50070190]
[-115.47045898 294.42947388]
[-112.52095795 279.87487793]
[-99.81374359 271.50939941]
[-84.56755066 274.70178223]
[-71.92417145 266.63055420]
[-59.28078461 258.55932617]
[-46.63740158 250.48808289]
[-35.18261719 240.80366516]
[-25.12084579 229.67887878]
[-15.05907536 218.55410767]
[-4.99730444 207.42932129]
[5.06446648 196.30453491]
[4.06391859 181.48783875]
[14.10950851 170.06239319]
[29.65740585 169.11338806]
[39.71917725 157.98860168]
[49.65639114 146.75242615]
[59.46781540 135.40623474]
[69.27924347 124.06005859]
[79.09066772 112.71386719]
[88.90209198 101.36768341]
[98.58650970 89.91290283]
[108.14271545 78.35094452]
[110.97064972 62.78452301]
[125.04283905 57.90366364]
[134.59904480 46.34170532]
[144.15525818 34.77974701]
[153.71147156 23.21778870]
[163.26766968 11.65582943]
[172.82388306 0.09387144]
[181.85556030 -11.88230801]
[190.34475708 -24.24893188]
[198.83396912 -36.61555481]
[207.32318115 -48.98217773]
[200.74316406 -65.80562592]
[205.47712708 -83.07685852]
[219.46931458 -94.00180817]
[237.06071472 -94.39872742]
[244.99058533 -107.13124084]
[252.92047119 -119.86375427]
[260.85037231 -132.59626770]
[268.78024292 -145.32878113]
[276.71014404 -158.06129456]
[284.64001465 -170.79380798]
[292.42758179 -183.61387634]
[300.07180786 -196.51989746]
[307.71606445 -209.42593384]
[302.54913330 -220.23957825]
[303.27478027 -232.08163452]
[309.59381104 -241.98056030]
[319.81826782 -247.50923157]
[331.32064819 -247.37974548]
[339.53222656 -259.93243408]
[336.05310059 -275.34902954]
[344.56466675 -288.66549683]
[360.01718140 -291.98144531]
[373.24291992 -283.32955933]
[376.39532471 -267.84286499]
[367.60409546 -254.70932007]
[352.08493042 -251.72084045]
[343.87335205 -239.16816711]
[348.72848511 -221.57861328]
[339.09011841 -205.71221924]
[320.62210083 -201.78167725]
[312.97784424 -188.87565613]
[305.33358765 -175.96963501]
[304.62551880 -168.55166626]
[297.37252808 -162.86393738]
[289.44265747 -150.13140869]
[281.51275635 -137.39889526]
[273.58288574 -124.66638947]
[265.65298462 -111.93387604]
[257.72311401 -99.20135498]
[249.79322815 -86.46884155]
[256.01074219 -75.93679047]
[257.13525391 -63.68545151]
[252.88914490 -52.06136703]
[244.02943420 -43.31758118]
[232.21363831 -39.17696381]
[219.68980408 -40.49297333]
[211.20059204 -28.12634850]
[202.71138000 -15.75972557]
[194.22218323 -3.39310169]
[194.65882874 -0.54606992]
[193.94738770 2.65126443]
[191.94622803 5.74470329]
[188.68725586 8.23668480]
[184.38583374 9.65007973]
[174.82963562 21.21203804]
[165.27342224 32.77399826]
[155.71720886 44.33595276]
[146.16101074 55.89791107]
[136.60479736 67.45986938]
[134.46038818 82.19930267]
[119.70467377 87.90715027]
[110.14846802 99.46910858]
[107.82201385 107.26016235]
[100.24827576 111.17910767]
[90.43685150 122.52529144]
[80.62542725 133.87147522]
[70.81400299 145.21766663]
[61.00257874 156.56385803]
[57.71908951 165.17634583]
[50.84395981 168.05038452]
[40.78218842 179.17515564]
[41.39422607 194.73995972]
[31.03168297 205.87873840]
[16.18924904 206.36630249]
[6.12747717 217.49108887]
[-3.93429375 228.61587524]
[-13.99606419 239.74064636]
[-24.05783463 250.86543274]
[-9.36149025 247.86253357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 34]
[12 33]
[13 32]
[14 31]
[17 28]
[18 27]
[19 26]
[20 25]
[35 139]
[36 138]
[37 137]
[38 136]
[39 135]
[42 132]
[43 131]
[44 129]
[45 128]
[46 127]
[47 126]
[48 125]
[49 123]
[50 122]
[52 120]
[53 119]
[54 118]
[55 117]
[56 116]
[57 115]
[58 110]
[59 109]
[60 108]
[61 107]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 93]
[73 92]
[74 91]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
