%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGGUGCCUGGAGCACGGCGCUGGGGCCGCCCGCAGCGCUCACUCGCUCGCACUCAGUCGCGGGAGGCUUCCCCGCGCCGGCCGCGUCCCGCCCGCUCCCCGGCACCAGAAGUUCCUCUGCGCGUCCGACGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[238.24102783 249.97904968]
[227.51774597 239.49041748]
[216.79446411 229.00178528]
[206.07118225 218.51316833]
[195.34790039 208.02453613]
[184.62461853 197.53591919]
[173.90133667 187.04728699]
[163.17807007 176.55867004]
[152.45478821 166.07003784]
[141.73150635 155.58142090]
[131.00822449 145.09278870]
[127.41981506 144.79370117]
[123.80862427 142.69197083]
[121.04347229 138.80169678]
[119.95075226 133.53489685]
[109.94671631 122.35816193]
[99.94268799 111.18143463]
[89.81562805 100.11604309]
[79.56679535 89.16336060]
[60.06534576 84.26896667]
[56.32213593 65.34573364]
[45.59885406 54.85710907]
[34.87557602 44.36848068]
[24.15229416 33.87985611]
[13.42901421 23.39123154]
[2.70573425 12.90260601]
[-12.57004929 8.78423214]
[-16.25834656 -5.64648962]
[-26.98162651 -16.13511467]
[-37.70490646 -26.62374115]
[-48.65759277 -36.87257767]
[-59.83432388 -46.87660980]
[-71.01105499 -56.88064575]
[-86.45405579 -60.31928635]
[-90.77706146 -74.57273865]
[-101.95379639 -84.57677460]
[-113.13052368 -94.58080292]
[-124.30725861 -104.58483887]
[-135.48399353 -114.58886719]
[-147.79238892 -123.16228485]
[-161.05041504 -130.17829895]
[-174.30845642 -137.19432068]
[-187.56649780 -144.21032715]
[-202.59544373 -139.32093811]
[-216.64173889 -146.56504822]
[-221.37196350 -161.64485168]
[-213.97975159 -175.61376953]
[-198.85078430 -180.18429565]
[-184.96080017 -172.64482117]
[-180.55047607 -157.46836853]
[-167.29243469 -150.45234680]
[-154.03440857 -143.43634033]
[-140.77636719 -136.42031860]
[-147.01635742 -150.06080627]
[-146.33880615 -165.04548645]
[-138.89328003 -178.06716919]
[-126.32304382 -186.25186157]
[-111.40243530 -187.79313660]
[-97.42454529 -182.35084534]
[-87.47438812 -171.12612915]
[-83.74803162 -156.59635925]
[-87.06790924 -141.96835327]
[-96.70130157 -130.47062683]
[-110.52204895 -124.64080048]
[-125.47995758 -125.76560211]
[-114.30322266 -115.76156616]
[-103.12649536 -105.75753784]
[-91.94976044 -95.75350189]
[-80.77303314 -85.74947357]
[-66.12946320 -83.02638245]
[-61.00702286 -68.05737305]
[-49.83029175 -58.05334091]
[-38.65356064 -48.04930878]
[-33.84594727 -47.42459106]
[-29.40391541 -43.72177887]
[-27.21628189 -37.34701920]
[-16.49300194 -26.85839462]
[-5.76972103 -16.36977005]
[8.73906231 -13.00161266]
[13.19435978 2.17932558]
[23.91764069 12.66795063]
[34.64091873 23.15657616]
[45.36420059 33.64520264]
[56.08747864 44.13382721]
[66.81076050 54.62245178]
[77.07416534 53.59452820]
[86.38381958 58.52640533]
[91.50896454 67.98273468]
[90.51947784 78.91452026]
[100.76831818 89.86721039]
[108.19774628 93.16752625]
[111.11941528 101.17739868]
[121.12345123 112.35413361]
[131.12748718 123.53086090]
[141.49685669 134.36950684]
[152.22012329 144.85813904]
[162.94340515 155.34675598]
[173.66668701 165.83538818]
[184.38996887 176.32400513]
[195.11325073 186.81263733]
[205.83653259 197.30125427]
[216.55981445 207.78988647]
[227.28309631 218.27851868]
[238.00636292 228.76713562]
[248.72964478 239.25576782]
[260.44232178 248.62663269]
[273.02841187 256.78692627]
[285.61450195 264.94723511]
[294.59463501 267.01629639]
[298.38595581 273.42987061]
[310.78845215 281.86660767]
[323.46401978 289.88720703]
[336.39874268 297.48278809]
[349.33346558 305.07839966]
[362.26815796 312.67398071]
[377.49868774 308.45416260]
[391.21081543 316.31250000]
[395.26937866 331.58676147]
[387.26651001 345.21502686]
[371.95016479 349.11187744]
[358.40728760 340.96539307]
[354.67257690 325.60870361]
[341.73785400 318.01309204]
[328.80313110 310.41751099]
[315.86840820 302.82192993]
[312.31369019 303.39633179]
[308.30245972 302.22671509]
[304.68136597 299.11740112]
[302.35171509 294.26910400]
[289.94921875 285.83236694]
[277.45419312 277.53332520]
[264.86810303 269.37301636]
[252.28202820 261.21270752]
[256.39218140 275.63861084]
[252.20153809 290.04132080]
[240.99340820 300.01019287]
[226.20019531 302.49227905]
[212.35217285 296.72750854]
[203.69018555 284.48129272]
[202.86686707 269.50390625]
[210.13436890 256.38204956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[15 94]
[16 93]
[17 92]
[18 90]
[19 89]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[28 78]
[29 77]
[30 76]
[31 73]
[32 72]
[33 71]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 53]
[41 52]
[42 51]
[43 50]
[106 133]
[107 132]
[108 131]
[110 130]
[111 129]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
