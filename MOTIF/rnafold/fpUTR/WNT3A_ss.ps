%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGAGGGCCCAGCGACGCCGCCGCGCCAGCUCCCAGGGCCCGGCCCCCCCCGGCGCUCACGCUCUCGGGGCGGACUCCCGGCCCUCCGCGCCCUCUCGCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[162.92195129 365.31195068]
[172.28572083 353.59362793]
[186.68823242 349.40219116]
[200.87728882 354.26571655]
[194.53800964 340.67108154]
[188.19873047 327.07647705]
[181.85946655 313.48184204]
[175.52018738 299.88723755]
[169.18090820 286.29263306]
[162.84164429 272.69799805]
[156.50236511 259.10339355]
[145.01483154 257.56936646]
[135.64062500 250.55099487]
[130.83544922 239.73948669]
[131.92959595 227.83755493]
[138.76214600 217.88401794]
[133.22404480 203.94380188]
[119.48845673 198.29853821]
[113.67346191 184.24006653]
[119.68786621 169.87118530]
[114.14978027 155.93096924]
[108.61168671 141.99076843]
[103.07359314 128.05055237]
[97.53549957 114.11033630]
[86.68807983 105.28849030]
[88.52428436 91.42775726]
[82.98619080 77.48754120]
[68.75095367 71.16333771]
[63.33312225 56.94708633]
[69.45001221 43.41492844]
[63.91191864 29.47471619]
[58.37382889 15.53450394]
[47.56832886 13.83030319]
[38.56060410 7.76854753]
[32.99689865 -1.45985925]
[31.85879707 -12.09332657]
[35.29064560 -22.13569832]
[42.58536148 -29.73097229]
[38.28331375 -44.10081482]
[33.98126602 -58.47065735]
[29.67921638 -72.84049988]
[25.16862869 -87.14625549]
[20.45045662 -101.38489532]
[15.73228645 -115.62353516]
[11.01411438 -129.86216736]
[-3.21982145 -136.73025513]
[-8.34931087 -151.67897034]
[-1.33111906 -165.83949280]
[13.67098618 -170.81065369]
[27.75652122 -163.64314270]
[32.56878662 -148.58930969]
[25.25275421 -134.58035278]
[29.97092628 -120.34170532]
[34.68909836 -106.10306549]
[39.40726852 -91.86442566]
[44.57859039 -86.42104340]
[44.04905701 -77.14254761]
[48.35110855 -62.77270508]
[52.65315628 -48.40286255]
[56.95520401 -34.03302002]
[74.68055725 -26.28291321]
[81.32314301 -7.79574442]
[72.31404114 9.99641132]
[77.85213470 23.93662453]
[83.39022827 37.87683868]
[97.12581635 43.52210617]
[102.94081879 57.58057022]
[96.92640686 71.94944763]
[102.46450043 85.88966370]
[113.31192017 94.71150970]
[111.47571564 108.57224274]
[117.01380920 122.51245880]
[122.55189514 136.45266724]
[128.08999634 150.39288330]
[133.62808228 164.33309937]
[147.86332703 170.65730286]
[153.28115845 184.87355042]
[147.16426086 198.40571594]
[152.70236206 212.34591675]
[170.29321289 219.04194641]
[177.43241882 236.11660767]
[170.09698486 252.76411438]
[176.43626404 266.35873413]
[182.77552795 279.95333862]
[189.11480713 293.54797363]
[195.45408630 307.14257812]
[201.79335022 320.73718262]
[208.13262939 334.33181763]
[214.47190857 347.92642212]
[222.34655762 360.69317627]
[231.65008545 372.45941162]
[240.95361328 384.22564697]
[250.25714111 395.99188232]
[265.98168945 397.57748413]
[275.91461182 409.87026978]
[274.16284180 425.57717896]
[261.76571655 435.37957764]
[246.07820129 433.46185303]
[236.40744019 420.96176147]
[238.49090576 405.29541016]
[229.18737793 393.52917480]
[219.88385010 381.76293945]
[210.58032227 369.99670410]
[208.55821228 384.85980225]
[198.34852600 395.84899902]
[183.67410278 398.95721436]
[169.88577271 393.05114746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[16 79]
[17 78]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[26 69]
[27 68]
[30 65]
[31 64]
[32 63]
[38 60]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[45 52]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
