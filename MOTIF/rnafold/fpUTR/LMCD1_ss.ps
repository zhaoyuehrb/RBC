%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGCGCCUGGCUGCGCACAGAGCUCCCUCCCAGGCCCGCGAACUUGGCCAUUCAGCCGCCGCUGUCCCCGCUGCGCGCCCUCGCGCCUCUGCCUGAGAAGCCAGGCGCUGUUCCCCCACCCCAGAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[170.50602722 287.40048218]
[182.07614136 277.70330811]
[175.88890076 264.03884888]
[163.59069824 255.63624573]
[164.94677734 239.87326050]
[158.75953674 226.20878601]
[152.57229614 212.54429626]
[146.38505554 198.87982178]
[140.19779968 185.21533203]
[134.01055908 171.55085754]
[127.82331848 157.88638306]
[121.63607788 144.22189331]
[115.44882965 130.55741882]
[109.26158905 116.89293671]
[94.76509094 113.03917694]
[82.60903931 121.82727051]
[81.66191101 137.43614197]
[70.86571503 148.74879456]
[55.31809235 150.42375183]
[42.36015320 141.67013550]
[38.11024094 126.62113953]
[44.57503128 112.38244629]
[58.70204926 105.67712402]
[73.82095337 109.67121887]
[85.97699738 100.88313293]
[71.05431366 99.36209106]
[63.65172577 86.31595612]
[69.99988556 72.72547913]
[84.75563049 70.02959442]
[95.49929047 80.49745178]
[94.43723297 65.53509521]
[85.74224854 52.31738663]
[92.55899048 39.07423019]
[91.49693298 24.11187553]
[90.43487549 9.14952087]
[89.37282562 -5.81283283]
[88.31076813 -20.77518654]
[74.28852844 -38.19065857]
[84.02632904 -57.48077011]
[81.55741119 -72.27619171]
[79.08849335 -87.07160950]
[76.61957550 -101.86702728]
[74.15065765 -116.66244507]
[62.02882004 -119.34129333]
[51.72936249 -127.19893646]
[45.43552399 -139.13647461]
[44.71149826 -153.15354919]
[50.14147568 -166.68103027]
[41.49756241 -178.94001770]
[32.85365295 -191.19900513]
[17.23979378 -193.64501953]
[7.99635220 -206.46430969]
[10.60729885 -222.05143738]
[23.52360535 -231.15882874]
[39.08225632 -228.38322449]
[48.05257797 -215.37135315]
[45.11264038 -199.84292603]
[53.75655365 -187.58393860]
[62.40046310 -175.32495117]
[77.02438354 -178.66276550]
[79.49330139 -193.45817566]
[81.78730774 -208.28172302]
[83.90608978 -223.13133240]
[86.02487183 -237.98094177]
[80.31444550 -252.73565674]
[89.77192688 -264.24240112]
[91.89070892 -279.09201050]
[85.28063202 -294.09997559]
[95.18981934 -307.16671753]
[111.42454529 -304.85031128]
[117.28391266 -289.53366089]
[106.74031067 -276.97323608]
[104.62152863 -262.12362671]
[110.48349762 -248.43106079]
[100.87447357 -235.86215210]
[98.75569916 -221.01254272]
[96.63691711 -206.16294861]
[98.82729340 -199.02885437]
[94.28871918 -190.98925781]
[91.81980133 -176.19384766]
[107.34621429 -156.74049377]
[105.30084991 -133.50057983]
[88.94607544 -119.13136292]
[91.41499329 -104.33594513]
[93.88391113 -89.54052734]
[96.35282898 -74.74510956]
[98.82175446 -59.94968796]
[106.25167847 -56.75674438]
[111.83824158 -50.77932739]
[114.58512115 -42.97213745]
[113.95807648 -34.62464142]
[109.98689270 -27.14815140]
[103.27312469 -21.83724213]
[104.33517456 -6.87488842]
[105.39723206 8.08746529]
[106.45928955 23.04981995]
[107.52134705 38.01217270]
[116.14036560 50.15967560]
[109.39958191 64.47303772]
[110.46163940 79.43539429]
[122.92607117 110.70569611]
[129.11331177 124.37017059]
[135.30055237 138.03465271]
[141.48779297 151.69912720]
[147.67504883 165.36361694]
[153.86228943 179.02809143]
[160.04953003 192.69258118]
[166.23677063 206.35705566]
[172.42401123 220.02153015]
[178.61126709 233.68601990]
[191.35200500 243.06599426]
[189.55337524 257.85159302]
[195.74061584 271.51608276]
[210.66117859 269.21835327]
[225.64822388 271.03247070]
[239.58961487 276.82385254]
[251.45082092 286.16271973]
[260.35165405 298.35607910]
[265.63159180 312.49908447]
[266.89889526 327.54223633]
[264.05944824 342.36923218]
[257.32397461 355.87982178]
[247.19230652 367.07144165]
[234.41627502 375.11355591]
[219.94395447 379.40942383]
[204.84927368 379.64022827]
[190.25238037 375.78887939]
[177.23641968 368.14117432]
[166.76730347 357.26458740]
[159.62188721 343.96624756]
[156.33041382 329.23300171]
[157.13713074 314.15814209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[15 25]
[16 24]
[30 100]
[31 99]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[48 59]
[49 58]
[50 57]
[60 80]
[61 79]
[62 77]
[63 76]
[64 75]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
