%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCGCCCAGCCCCGGGGGCAGGGAGAGCCUAGAUUACGGAAGUACCGCGAGCAAGGAGCGCGGAAUCGGGGAGCGUCCGGAGCUAGCUGGAUCCUCUAGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[-20.57865906 260.04385376]
[-32.05056763 260.12722778]
[-42.64853668 255.87194824]
[-53.63718033 266.08224487]
[-64.62582397 276.29251099]
[-75.46339417 286.66299438]
[-86.14756775 297.19146729]
[-96.83173370 307.71990967]
[-107.51590729 318.24838257]
[-105.06798553 333.57113647]
[-112.12408447 347.39111328]
[-125.97097778 354.39419556]
[-141.28425598 351.88757324]
[-152.17564392 340.83511353]
[-154.45719910 325.48666382]
[-147.25160217 311.74407959]
[-133.32955933 304.89163208]
[-118.04436493 307.56420898]
[-107.36019897 297.03573608]
[-96.67602539 286.50729370]
[-85.99185944 275.97882080]
[-83.39585876 268.93127441]
[-74.83609772 265.30386353]
[-63.84745407 255.09358215]
[-52.85881042 244.88331604]
[-56.26774597 226.67309570]
[-48.11522675 209.87315369]
[-31.44022369 201.14633179]
[-12.69917774 204.06889343]
[-2.65131378 192.93154907]
[7.39655018 181.79420471]
[17.44441414 170.65686035]
[27.49227715 159.51951599]
[37.54014206 148.38217163]
[47.58800507 137.24482727]
[47.48106766 134.29148865]
[48.63284683 131.11785889]
[51.13358688 128.24096680]
[54.87041473 126.20012665]
[59.52623367 125.48058319]
[70.80987549 115.59729767]
[82.09352112 105.71401215]
[81.48408508 96.76694489]
[85.08950806 88.55583191]
[92.08907318 82.94980621]
[100.88944244 81.22499847]
[109.48734283 83.77402496]
[121.59665680 74.92165375]
[133.57472229 65.89247894]
[145.41894531 56.68843460]
[151.56813049 42.11112213]
[166.36540222 40.41111755]
[178.20962524 31.20707703]
[190.05384827 22.00303459]
[191.86087036 4.67965651]
[205.32427979 -5.83329153]
[221.90425110 -3.48047948]
[233.47317505 -13.02825928]
[245.04208374 -22.57603836]
[249.76554871 -30.58331871]
[257.09365845 -32.22826385]
[268.93789673 -41.43230438]
[280.78210449 -50.63634491]
[278.01998901 -65.69055939]
[282.58132935 -80.30056763]
[293.41802979 -91.10911560]
[308.03985596 -95.63246918]
[323.08685303 -92.83119202]
[335.10128784 -83.34899902]
[341.32235718 -69.36483002]
[340.32049561 -54.09214783]
[332.32592773 -41.04049683]
[319.17575073 -33.20905685]
[303.89178467 -32.39743042]
[289.98614502 -38.79212570]
[278.14193726 -29.58808136]
[266.29769897 -20.38404083]
[254.58987427 -11.00711918]
[243.02095032 -1.45933914]
[231.45202637 8.08843994]
[232.01319885 21.05306816]
[224.85662842 32.11170959]
[212.43646240 37.05540085]
[199.25788879 33.84725952]
[187.41366577 43.05130005]
[175.56944275 52.25534058]
[170.26742554 66.17431641]
[154.62298584 68.53265381]
[142.77876282 77.73669434]
[139.37486267 84.43150330]
[130.44902039 87.03096771]
[118.33971405 95.88333893]
[111.74994659 114.67074585]
[91.97680664 116.99765778]
[80.69316101 126.88094330]
[69.40952301 136.76423645]
[58.72534943 147.29269409]
[48.67748642 158.43003845]
[38.62962341 169.56738281]
[28.58175850 180.70472717]
[18.53389359 191.84207153]
[8.48603058 202.97941589]
[-1.56183362 214.11676025]
[2.80991697 225.00332642]
[2.72563863 236.68270874]
[-1.76272428 247.40934753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 21]
[7 20]
[8 19]
[9 18]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[40 96]
[41 95]
[42 94]
[47 92]
[48 91]
[49 89]
[50 88]
[52 86]
[53 85]
[54 84]
[57 80]
[58 79]
[59 78]
[61 77]
[62 76]
[63 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
