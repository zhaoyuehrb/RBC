%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGGCGAGCGGAGCGGCGCGCCUGUCCGGAGCUCGGCGGUGGCGCCGGAGGAGGCUGCAGCGGCGGCGGCGGCGGGCCCGGACGAGCGUCCGGAGGUGGCGGACGAGGCGCCGGGGGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.68656921 186.99974060]
[108.48368835 180.45570374]
[105.53459167 165.74847412]
[102.58549500 151.04122925]
[99.63639832 136.33399963]
[96.68730164 121.62676239]
[82.39869690 117.06214142]
[71.46925354 127.33575439]
[60.53980255 137.60937500]
[49.61035538 147.88298035]
[44.85447311 162.97245789]
[30.28166771 166.05183411]
[19.35221863 176.32545471]
[19.11418343 192.12794495]
[7.71379375 203.07356262]
[-8.08530235 202.66847229]
[-18.90978050 191.15299988]
[-18.33767128 175.35906982]
[-6.70839500 164.65693665]
[9.07860374 165.39599609]
[20.00805283 155.12239075]
[23.98218536 140.76774597]
[39.33673859 136.95353699]
[50.26618958 126.67992401]
[61.19563675 116.40630341]
[72.12508392 106.13269043]
[75.97749329 91.63583374]
[71.58995056 77.29186249]
[67.20240021 62.94789505]
[62.81485367 48.60392761]
[58.42730713 34.25995636]
[54.03976059 19.91598892]
[49.65221405 5.57202101]
[44.09219360 -1.81385350]
[45.33827591 -9.18124866]
[41.30686188 -23.62935257]
[37.27544403 -38.07745743]
[33.24403000 -52.52555847]
[29.21261597 -66.97366333]
[18.05104637 -78.18659973]
[22.08307457 -92.52507782]
[18.05166054 -106.97318268]
[6.89009094 -118.18611908]
[10.92211819 -132.52459717]
[6.89070320 -146.97270203]
[-4.27086592 -158.18563843]
[-0.23883885 -172.52412415]
[-4.27025366 -186.97222900]
[-8.30166817 -201.42033386]
[-12.33308315 -215.86843872]
[-16.36449814 -230.31654358]
[-31.43578911 -232.50195312]
[-44.31174469 -240.63397217]
[-52.76152802 -253.30364990]
[-55.32116318 -268.31591797]
[-51.54717255 -283.06979370]
[-42.09343338 -295.00909424]
[-28.59785271 -302.06524658]
[-13.39862633 -303.01571655]
[0.87088811 -297.69586182]
[11.73841095 -287.02737427]
[17.32107925 -272.85861206]
[16.65166092 -257.64440918]
[9.84613705 -244.02073669]
[-1.91639411 -234.34794617]
[2.11502051 -219.89984131]
[6.14643526 -205.45173645]
[10.17784977 -191.00364685]
[14.20926476 -176.55554199]
[25.08247948 -166.37602234]
[21.33880615 -151.00411987]
[25.37022209 -136.55601501]
[36.24343491 -126.37650299]
[32.49976349 -111.00460052]
[36.53117752 -96.55649567]
[47.40439224 -86.37698364]
[43.66072083 -71.00507355]
[47.69213486 -56.55697250]
[51.72354889 -42.10887146]
[55.75496292 -27.66076660]
[59.78637695 -13.21266365]
[63.99618149 1.18447399]
[68.38372803 15.52844238]
[72.77127838 29.87241173]
[77.15882111 44.21638107]
[81.54637146 58.56034851]
[85.93391418 72.90431976]
[90.32146454 87.24828339]
[98.73806763 75.98027802]
[116.61924744 72.54067993]
[136.49029541 83.27394104]
[151.07800293 86.76660156]
[165.66571045 90.25925446]
[180.25343323 93.75191498]
[194.84114075 97.24457550]
[209.42884827 100.73723602]
[221.88491821 91.28311920]
[237.50120544 92.09908295]
[248.90415955 102.79985809]
[250.70967102 118.33286285]
[242.06523132 131.36387634]
[227.05247498 135.74008179]
[212.75996399 129.39514160]
[205.93618774 115.32495117]
[191.34848022 111.83229065]
[176.76077271 108.33963013]
[162.17306519 104.84696960]
[147.58534241 101.35430908]
[132.99763489 97.86164856]
[127.59686279 103.06565094]
[131.20971680 117.62406158]
[116.79531860 113.47365570]
[111.39453888 118.67766571]
[114.34363556 133.38490295]
[117.29273224 148.09213257]
[120.24182892 162.79937744]
[123.19092560 177.50660706]
[126.50289917 192.13639832]
[130.17572021 206.67980957]
[133.84852600 221.22320557]
[143.58909607 235.09971619]
[132.95133972 248.30102539]
[117.32112122 241.73347473]
[119.30513000 224.89601135]
[115.63231659 210.35261536]
[111.95950317 195.80921936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[6 113]
[7 26]
[8 25]
[9 24]
[10 23]
[12 21]
[13 20]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[41 75]
[42 74]
[44 72]
[45 71]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
[96 104]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
