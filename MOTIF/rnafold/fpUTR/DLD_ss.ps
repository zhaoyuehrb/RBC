%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCGCGCGGGCCAAUCGCGCUGCUCCCGGGUGAUGACGUAGGCUGCGCCUGUGCAUGCGCAGGGAGGGGAGACCUUGGCGGAGCGGCGGAGGCGCCCAGCGGAGGUGAAAGUAUUGGCGGAAAGGAAAAUACAGCGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.75732422 238.30999756]
[75.68047333 226.62835693]
[73.54149628 211.34999084]
[80.02291870 197.35018921]
[93.05654144 189.09620667]
[93.05654144 174.09620667]
[93.05654144 159.09620667]
[93.05654144 144.09620667]
[78.84175110 139.30668640]
[69.76413727 151.24807739]
[60.68651962 163.18948364]
[51.60890961 175.13087463]
[52.34129715 191.15719604]
[40.17364502 201.61320496]
[24.43993759 198.47792053]
[17.20972633 184.15647888]
[24.02940941 169.63507080]
[39.66751099 166.05326843]
[48.74512482 154.11186218]
[57.82273865 142.17047119]
[66.90035248 130.22908020]
[59.01529312 109.27368164]
[62.47916794 88.59656525]
[49.22648621 81.57043457]
[33.40965271 81.94231415]
[25.78917122 69.14476013]
[12.53649044 62.11862946]
[-0.71618980 55.09250259]
[-13.96887016 48.06637573]
[-27.22155190 41.04025269]
[-39.80742264 44.07481384]
[-50.72228241 37.89131927]
[-54.34836197 26.30245972]
[-67.44571686 18.99086952]
[-80.54306793 11.67928028]
[-93.71885681 4.51000118]
[-106.97153473 -2.51612568]
[-120.22422028 -9.54225254]
[-129.34611511 -10.81528187]
[-133.68547058 -16.86685944]
[-146.78282166 -24.17844772]
[-159.88017273 -31.49003792]
[-172.97752380 -38.80162811]
[-186.07489014 -46.11321640]
[-199.17224121 -53.42480850]
[-212.26959229 -60.73639679]
[-229.04685974 -63.17760849]
[-231.34545898 -79.97501373]
[-215.84082031 -86.83377075]
[-204.95799255 -73.83374786]
[-191.86064148 -66.52216339]
[-178.76329041 -59.21057129]
[-165.66593933 -51.89897919]
[-152.56858826 -44.58739090]
[-139.47123718 -37.27580261]
[-126.37387848 -29.96421242]
[-113.19808960 -22.79493332]
[-99.94541168 -15.76880646]
[-86.69273376 -8.74267960]
[-79.25469971 -8.38587761]
[-73.23147583 -1.41807318]
[-60.13412476 5.89351654]
[-47.03676987 13.20510674]
[-29.56271172 11.97387505]
[-20.19542503 27.78757095]
[-6.94274378 34.81369781]
[6.30993700 41.83982468]
[19.56261826 48.86595154]
[32.81529999 55.89207840]
[47.68421173 55.01763916]
[56.25261307 68.31775665]
[69.50529480 75.34387970]
[85.58540344 63.52986908]
[105.39736176 61.15776062]
[123.81198120 68.84168243]
[135.03134155 58.88549042]
[146.25071716 48.92929840]
[157.47007751 38.97310257]
[168.68945312 29.01691055]
[173.87579346 14.06992531]
[188.53086853 11.40942192]
[199.75022888 1.45322931]
[210.86108398 -8.62391663]
[221.86212158 -18.82083511]
[226.07014465 -27.01363754]
[233.21371460 -29.11631012]
[244.43307495 -39.07250214]
[248.81761169 -47.17221832]
[256.00503540 -49.11963654]
[267.43746948 -58.83042908]
[272.44091797 -74.44765472]
[288.52270508 -77.65826416]
[299.13928223 -65.15945435]
[293.36923218 -49.80893326]
[277.14825439 -47.39799881]
[265.71582031 -37.68720245]
[254.38926697 -27.85313416]
[243.16990662 -17.89694023]
[232.05905151 -7.81979465]
[221.05801392 2.37712264]
[218.26994324 9.28207493]
[209.70642090 12.67259789]
[198.48706055 22.62878990]
[194.10319519 36.86364365]
[178.64564514 40.23627853]
[167.42628479 50.19247437]
[156.20690918 60.14866638]
[144.98753357 70.10485840]
[133.76817322 80.06105042]
[137.11602783 87.34096527]
[138.91430664 95.14939117]
[139.08789062 103.16033173]
[137.62956238 111.03932953]
[134.60020447 118.45743561]
[146.24032593 127.91827393]
[157.88046265 137.37911987]
[169.52058411 146.83995056]
[181.16070557 156.30078125]
[194.95120239 149.75976562]
[210.21400452 149.85855103]
[223.91867065 156.57754517]
[233.34411621 168.58268738]
[236.61894226 183.49035645]
[233.09291077 198.34060669]
[223.46612549 210.18490601]
[209.64997864 216.67158508]
[194.38768005 216.51268005]
[180.70959473 209.73977661]
[171.33148193 197.69760132]
[168.11538696 182.77716064]
[171.69987488 167.94091797]
[160.05975342 158.48007202]
[148.41961670 149.01924133]
[136.77949524 139.55839539]
[125.13936615 130.09756470]
[117.83339691 138.04887390]
[108.05654144 144.09620667]
[108.05654144 159.09620667]
[108.05654144 174.09620667]
[108.05654144 189.09620667]
[121.09017181 197.35018921]
[127.57159424 211.34999084]
[125.43261719 226.62835693]
[115.35576630 238.30999756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 140]
[6 139]
[7 138]
[8 137]
[9 21]
[10 20]
[11 19]
[12 18]
[23 72]
[24 71]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[33 63]
[34 62]
[35 61]
[36 59]
[37 58]
[38 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[75 109]
[76 108]
[77 107]
[78 106]
[79 105]
[81 103]
[82 102]
[83 100]
[84 99]
[86 98]
[87 97]
[89 96]
[90 95]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
