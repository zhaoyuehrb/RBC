%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCGUGCCCGCGCCGGUCGGUUGGUGGCGCCUUUGUCCUACGGCGGGCAGGUGGGCCGACGCGGAGGCGGCAGCGGCGGGCCUGAGGCGAAGGAGCGGCCGGGAGCCCGCCGCGCUGGUAGCGAUAUUAAUAAGGCAGCGGAAAGAAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[112.40893555 160.45126343]
[107.62934875 146.23312378]
[102.84976196 132.01498413]
[98.07017517 117.79683685]
[84.88188171 110.65058899]
[70.36072540 114.41037750]
[62.78432465 119.61991882]
[55.50714111 118.09603119]
[40.91276550 121.56074524]
[26.31839371 125.02546692]
[11.72402000 128.49017334]
[-2.87035418 131.95489502]
[-17.46472740 135.41961670]
[-31.98588371 139.17939758]
[-46.42786026 143.23271179]
[-60.86983490 147.28602600]
[-72.06583405 158.46458435]
[-86.41041565 154.45429993]
[-100.85238647 158.50761414]
[-115.29436493 162.56092834]
[-129.73634338 166.61425781]
[-134.69132996 171.13392639]
[-140.33773804 172.25802612]
[-144.84609985 170.52644348]
[-159.44046021 173.99114990]
[-174.03483582 177.45587158]
[-181.71527100 182.51078796]
[-188.96006775 180.83973694]
[-203.62167358 184.00794983]
[-218.28326416 187.17617798]
[-226.63433838 200.59388733]
[-242.04591370 204.09512329]
[-255.37458801 195.60266113]
[-258.71267700 180.15492249]
[-250.07977295 166.91677856]
[-234.59761047 163.74218750]
[-221.45147705 172.51457214]
[-206.78988647 169.34635925]
[-192.12829590 166.17813110]
[-177.49955750 162.86149597]
[-162.90518188 159.39677429]
[-148.31080627 155.93206787]
[-133.78965759 152.17227173]
[-119.34767914 148.11895752]
[-104.90570068 144.06564331]
[-90.46372986 140.01232910]
[-80.30071259 129.12368774]
[-64.92314911 132.84405518]
[-50.48117447 128.79074097]
[-36.03919983 124.73742676]
[-32.93768311 121.03550720]
[-27.45523071 119.27813721]
[-20.92944336 120.82524109]
[-6.33507013 117.36051941]
[8.25930309 113.89580536]
[22.85367775 110.43109131]
[37.44805145 106.96637726]
[52.04242325 103.50165558]
[66.60093689 99.88922119]
[81.12209320 96.12943268]
[89.64596558 84.10173798]
[103.96658325 81.75147247]
[113.02749634 69.79739380]
[122.08840942 57.84332275]
[116.90030670 46.39639282]
[117.09407806 33.90254211]
[122.57083130 22.75198746]
[132.22691345 15.05157661]
[144.17568970 12.22676849]
[156.11607361 14.75805855]
[165.65397644 3.18100452]
[175.19189453 -8.39604950]
[184.72981262 -19.97310448]
[187.79716492 -28.64101028]
[194.58024597 -31.68557930]
[204.35083008 -43.06695175]
[214.12141418 -54.44832230]
[223.89199829 -65.82969666]
[233.66259766 -77.21106720]
[243.43318176 -88.59243774]
[253.20376587 -99.97380829]
[262.97436523 -111.35517883]
[272.74493408 -122.73655701]
[282.39968872 -134.21635437]
[291.93759155 -145.79341125]
[291.48339844 -158.72200012]
[299.71481323 -168.17549133]
[311.78414917 -169.42042542]
[321.55471802 -180.80178833]
[331.32531738 -192.18316650]
[326.81234741 -206.93568420]
[331.01361084 -221.77996826]
[342.58847046 -231.97927856]
[357.84347534 -234.27903748]
[371.91076660 -227.94540405]
[380.30154419 -214.99942017]
[380.33831787 -199.57209778]
[372.00939941 -186.58624268]
[357.97247314 -180.18559265]
[342.70669556 -182.41258240]
[332.93609619 -171.03120422]
[323.16549683 -159.64982605]
[320.88854980 -142.27445984]
[303.51464844 -136.25549316]
[293.97674561 -124.67844391]
[292.14007568 -117.47383881]
[284.12631226 -112.96596527]
[274.35571289 -101.58459473]
[264.58514404 -90.20322418]
[254.81454468 -78.82185364]
[245.04396057 -67.44047546]
[235.27337646 -56.05910873]
[225.50279236 -44.67773438]
[215.73219299 -33.29636383]
[205.96160889 -21.91499138]
[196.30686951 -10.43518925]
[186.76895142 1.14186502]
[177.23103333 12.71891880]
[167.69311523 24.29597282]
[172.92326355 41.11495209]
[167.00027466 57.86868668]
[152.10125732 67.83737946]
[134.04248047 66.90423584]
[124.98156738 78.85830688]
[115.92065430 90.81237793]
[127.19434357 80.91773987]
[141.96482849 78.30377197]
[155.94960022 83.72836304]
[165.09396362 95.61872864]
[166.74662781 110.52740479]
[160.42842102 124.13182831]
[147.97123718 132.48757935]
[132.98684692 133.17199707]
[119.81980896 125.98667145]
[112.28832245 113.01725006]
[117.06790924 127.23538971]
[121.84749603 141.45353699]
[126.62708282 155.67167664]
[141.76884460 155.74739075]
[156.06477356 160.73786926]
[167.96417236 170.10180664]
[176.17625427 182.82345581]
[179.81025696 197.52287292]
[178.47198486 212.60556030]
[172.30659485 226.43548584]
[161.98287964 237.51246643]
[148.62065125 244.63496399]
[133.66937256 247.03036499]
[118.75083923 244.43885803]
[105.48329163 237.14152527]
[95.30590057 225.92994690]
[89.32263947 212.02026367]
[88.18251801 196.92129517]
[92.00920868 182.27087402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 60]
[6 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 50]
[15 49]
[16 48]
[18 46]
[19 45]
[20 44]
[21 43]
[24 42]
[25 41]
[26 40]
[28 39]
[29 38]
[30 37]
[62 125]
[63 124]
[64 123]
[70 119]
[71 118]
[72 117]
[73 116]
[75 115]
[76 114]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 105]
[85 104]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
