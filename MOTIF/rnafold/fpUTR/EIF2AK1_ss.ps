%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAGUGAAGGUGCGCGCGUGGCGGAGGCUGGUUUUCCGUCUGGUGAGGGGUUACUUCCGGGUCGGACGGCGCUAGCUGCAGCAUCGGAGUGUGGCAGUGCUGGGCUGGCCGGCGGGCUGGGCUGCGGCCCGCGCGCGGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[174.47634888 182.26042175]
[172.15344238 178.90267944]
[170.94633484 174.56291199]
[159.84216309 164.47839355]
[148.73799133 154.39387512]
[137.63381958 144.30937195]
[126.52964783 134.22485352]
[115.42548370 124.14034271]
[101.32402039 128.61727905]
[86.86942291 125.46153259]
[75.91696167 115.51479340]
[71.38782501 101.43001556]
[74.49000549 86.96382904]
[63.38583755 76.87931061]
[52.28166580 66.79479980]
[41.17749786 56.71028900]
[30.07332611 46.62577438]
[12.01880455 43.17492294]
[7.25417519 26.31653023]
[-4.06296253 16.47161293]
[-19.61303520 17.38431168]
[-30.94997597 7.23894787]
[-31.72426414 -7.59129381]
[-43.04140091 -17.43621063]
[-58.08153915 -14.10447025]
[-72.03649139 -20.19648170]
[-79.63848877 -33.18392181]
[-78.15303802 -47.98025513]
[-89.47017670 -57.82517242]
[-100.78731537 -67.67008972]
[-112.10445404 -77.51500702]
[-123.42159271 -87.35992432]
[-134.73872375 -97.20484161]
[-146.05586243 -107.04975891]
[-156.93420410 -105.66495514]
[-166.56343079 -110.43436432]
[-171.83314514 -119.54532623]
[-171.19279480 -129.83013916]
[-182.07891846 -140.14964294]
[-192.96505737 -150.46914673]
[-203.85118103 -160.78865051]
[-214.73731995 -171.10815430]
[-225.62344360 -181.42765808]
[-236.50958252 -191.74716187]
[-247.39570618 -202.06666565]
[-262.56448364 -199.38063049]
[-276.24636841 -206.06336975]
[-283.28646851 -219.36378479]
[-281.17013550 -234.08312988]
[-292.05627441 -244.40263367]
[-302.94241333 -254.72213745]
[-313.82852173 -265.04162598]
[-329.89395142 -268.33312988]
[-334.81872559 -283.97534180]
[-323.53665161 -295.87689209]
[-307.65377808 -291.79449463]
[-303.50903320 -275.92776489]
[-292.62289429 -265.60827637]
[-281.73675537 -255.28875732]
[-270.85064697 -244.96925354]
[-256.26531982 -247.86863708]
[-242.60791016 -241.54885864]
[-235.20405579 -228.24336243]
[-237.07620239 -212.95278931]
[-226.19007874 -202.63328552]
[-215.30393982 -192.31378174]
[-204.41781616 -181.99427795]
[-193.53167725 -171.67477417]
[-182.64555359 -161.35527039]
[-171.75941467 -151.03576660]
[-160.87329102 -140.71626282]
[-141.81874084 -137.68101501]
[-136.21095276 -118.36689758]
[-124.89381409 -108.52198029]
[-113.57667542 -98.67706299]
[-102.25953674 -88.83214569]
[-90.94239807 -78.98722839]
[-79.62525940 -69.14231110]
[-68.30812073 -59.29739380]
[-53.86001205 -62.81734848]
[-39.94504547 -57.08692169]
[-31.97941208 -44.10993958]
[-33.19648743 -28.75334930]
[-21.87934685 -18.90843201]
[-7.08475256 -20.19511032]
[4.53267908 -10.37218094]
[5.78195477 5.15447521]
[17.09909248 14.99939251]
[29.22901917 14.48351097]
[38.74494553 22.65451241]
[40.15784073 35.52160263]
[51.26200867 45.60611725]
[62.36618042 55.69063187]
[73.47035217 65.77514648]
[84.57451630 75.85965729]
[98.67597961 71.38272095]
[113.13057709 74.53846741]
[124.08303833 84.48520660]
[128.61218262 98.56998444]
[125.50999451 113.03617096]
[136.61416626 123.12068939]
[147.71833801 133.20520020]
[158.82250977 143.28971863]
[169.92666626 153.37422180]
[181.03083801 163.45874023]
[192.55578613 173.05957031]
[204.48043823 182.15916443]
[216.40509033 191.25875854]
[228.32974243 200.35835266]
[240.25437927 209.45796204]
[252.17903137 218.55755615]
[264.10369873 227.65715027]
[276.02835083 236.75674438]
[284.81600952 239.50366211]
[288.10781860 246.18043518]
[299.83529663 255.53277588]
[315.44882202 258.08776855]
[320.57528687 272.07235718]
[332.30276489 281.42471313]
[341.02972412 284.35879517]
[344.17810059 291.10437012]
[355.70303345 300.70520020]
[367.22799683 310.30603027]
[378.75292969 319.90686035]
[394.99621582 322.16226196]
[400.91308594 337.45681763]
[390.41671753 350.05676270]
[374.30490112 347.00036621]
[369.15209961 331.43179321]
[357.62716675 321.83096313]
[346.10223389 312.23013306]
[334.57727051 302.62930298]
[322.95040894 293.15219116]
[311.22293091 283.79983521]
[296.44824219 281.91378784]
[290.48294067 267.26025391]
[278.75549316 257.90789795]
[266.92874146 248.68139648]
[255.00408936 239.58180237]
[243.07943726 230.48220825]
[231.15478516 221.38261414]
[219.23013306 212.28300476]
[207.30548096 203.18341064]
[195.38082886 194.08381653]
[183.45617676 184.98422241]
[180.59971619 185.27044678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[19 88]
[20 87]
[23 84]
[24 83]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[34 73]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[49 60]
[50 59]
[51 58]
[52 57]
[106 145]
[107 144]
[108 143]
[109 142]
[110 141]
[111 140]
[112 139]
[113 138]
[115 137]
[116 136]
[118 134]
[119 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
