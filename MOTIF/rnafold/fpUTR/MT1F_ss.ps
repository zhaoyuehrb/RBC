%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCUCCCCUGACUAUCAAAGCAGCGGCCGGCUGUUGGGGUCCACCACGCCUUCCACCUGCCCCACUGCUUCUUCGCUUCUCUCUUGGAAAGUCCAGUCUCUCCUCGGCUUGCA\
) } def
/len { sequence length } bind def

/coor [
[113.26759338 306.20617676]
[111.25979614 291.34115601]
[109.25199890 276.47613525]
[95.83379364 274.25006104]
[83.58490753 268.29782104]
[73.51804352 259.10086060]
[66.46855927 247.40930176]
[63.02509689 234.18081665]
[63.48048401 220.50215149]
[67.80683136 207.49984741]
[75.65705872 196.24749756]
[86.39270020 187.67706299]
[99.13582611 182.50170898]
[97.92883301 167.55035400]
[96.72183228 152.59899902]
[95.51483154 137.64764404]
[79.86587524 132.12597656]
[68.07407379 120.44985199]
[62.39840698 104.85609436]
[63.92618561 88.33203888]
[72.36473083 74.04324341]
[63.67879486 61.81399918]
[54.99285889 49.58474731]
[46.30692291 37.35549927]
[37.62099075 25.12624931]
[28.93505669 12.89699841]
[14.63580513 6.12632751]
[13.57401371 -8.73038387]
[4.88807964 -20.95963287]
[-1.14179742 -24.15491104]
[-4.10946846 -29.19488716]
[-3.91499400 -34.08662033]
[-11.93198109 -46.76447296]
[-19.94896889 -59.44232559]
[-35.31271362 -60.56551361]
[-46.93330765 -70.40498352]
[-50.48976517 -85.02742004]
[-44.82182693 -98.77560425]
[-52.83881378 -111.45345306]
[-60.85580063 -124.13130188]
[-69.21027374 -136.58934021]
[-77.89620972 -148.81858826]
[-86.58213806 -161.04785156]
[-102.18253326 -162.12571716]
[-113.40434265 -173.01631165]
[-114.94896698 -188.57742310]
[-106.08709717 -201.46156311]
[-91.00302124 -205.58525085]
[-76.81898499 -199.00138855]
[-70.23226166 -184.81867981]
[-74.35289001 -169.73377991]
[-65.66695404 -157.50453186]
[-56.98102188 -145.27528381]
[-52.38157654 -143.59838867]
[-48.84526443 -138.93974304]
[-48.17794800 -132.14828491]
[-40.16096115 -119.47043610]
[-32.14397430 -106.79258728]
[-17.29337120 -106.01954651]
[-5.60735273 -96.53793335]
[-1.69954181 -81.82119751]
[-7.27111769 -67.45931244]
[0.74586976 -54.78145981]
[8.76285744 -42.10360718]
[17.11732864 -29.64556694]
[25.80326462 -17.41631889]
[39.48123932 -11.52036476]
[41.16430664 4.21106434]
[49.85023880 16.44031334]
[58.53617477 28.66956329]
[67.22210693 40.89881516]
[75.90804291 53.12806320]
[84.59397888 65.35731506]
[97.20258331 62.18947601]
[110.14009857 63.46727753]
[121.88536835 69.04048157]
[131.05743408 78.25380707]
[136.57786560 90.02397156]
[151.54408264 89.01780701]
[166.51029968 88.01164246]
[181.47651672 87.00547791]
[194.72660828 78.35992432]
[207.94421387 85.22608185]
[222.91043091 84.21991730]
[236.22172546 74.64175415]
[251.05909729 81.62635803]
[252.15910339 97.98857117]
[238.39018250 106.89634705]
[223.91659546 99.18613434]
[208.95037842 100.19229889]
[196.77076721 108.76588440]
[182.48268127 101.97169495]
[167.51646423 102.97785950]
[152.55024719 103.98402405]
[137.58403015 104.99018860]
[132.93299866 118.78506470]
[123.42652893 129.81037903]
[110.46619415 136.44064331]
[111.67318726 151.39199829]
[112.88018799 166.34335327]
[114.08718872 181.29472351]
[130.07958984 185.44818115]
[143.69006348 194.77148438]
[153.31060791 208.14218140]
[157.81172180 223.96093750]
[156.67503357 240.34280396]
[150.05287170 255.34181213]
[138.74812317 267.18212891]
[124.11701202 274.46832275]
[126.12480927 289.33334351]
[128.13261414 304.19836426]
[140.85354614 313.57672119]
[143.13446045 329.21554565]
[133.62214661 341.83660889]
[117.96008301 343.95205688]
[105.44028473 334.30685425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[13 101]
[14 100]
[15 99]
[16 98]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[28 66]
[29 65]
[32 64]
[33 63]
[34 62]
[38 58]
[39 57]
[40 56]
[41 53]
[42 52]
[43 51]
[78 95]
[79 94]
[80 93]
[81 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
