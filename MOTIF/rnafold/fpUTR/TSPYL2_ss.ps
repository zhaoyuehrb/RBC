%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACGCCAGAGCGAGGUGGUGAGGAGAGCUGGUUGCGUGAGUCUCCUCAGCUCUGCUUACCGGUGCGACUAGCGGCAGCGACGCGGCUAAAAGCGAAGGGGCGAGUGCGAGUCCCCUGAGCUGUACGAACGCGGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[99.74920654 120.31304932]
[92.67034912 118.94621277]
[86.51467896 115.19305420]
[82.05751801 109.52629089]
[79.86026001 102.65966034]
[65.31491852 98.99456024]
[50.76957703 95.32945251]
[35.96498871 104.57401276]
[19.37104416 100.37407684]
[11.07986164 85.78495789]
[-3.54405737 82.44714355]
[-18.20450592 79.27362061]
[-32.89963531 76.26477814]
[-44.35844803 86.56049347]
[-59.50546646 88.11653900]
[-72.51049042 80.54466248]
[-78.49156189 66.92979431]
[-93.18669128 63.92094803]
[-107.88182068 60.91210938]
[-122.57695770 57.90326691]
[-137.27207947 54.89442444]
[-151.96722412 51.88558578]
[-166.66235352 48.87674332]
[-181.73405457 53.68861771]
[-192.65063477 43.55561829]
[-207.34576416 40.54677582]
[-222.04089355 37.53793716]
[-236.73602295 34.52909470]
[-251.43115234 31.52025414]
[-266.12628174 28.51141167]
[-280.82141113 25.50257111]
[-295.51654053 22.49373055]
[-310.83377075 33.53223038]
[-329.06060791 30.01461029]
[-338.83032227 14.60453033]
[-353.64566040 12.25801373]
[-368.75332642 18.63688850]
[-381.66641235 8.52825546]
[-379.10101318 -7.66899109]
[-363.69619751 -13.29251289]
[-351.29913330 -2.55731177]
[-336.48379517 -0.21079473]
[-328.85305786 -8.82125568]
[-317.88772583 -12.68313599]
[-306.30792236 -10.71449852]
[-297.04687500 -3.29544044]
[-292.50772095 7.79859877]
[-277.81259155 10.80743980]
[-263.11743164 13.81628132]
[-248.42231750 16.82512283]
[-233.72718811 19.83396339]
[-219.03205872 22.84280586]
[-204.33692932 25.85164642]
[-189.64178467 28.86048698]
[-175.62117004 23.83340073]
[-163.65350342 34.18161392]
[-148.95837402 37.19045258]
[-134.26324463 40.19929504]
[-119.56811523 43.20813751]
[-104.87298584 46.21697617]
[-90.17784882 49.22581863]
[-75.48271942 52.23466110]
[-64.63197327 42.06611633]
[-49.69755554 40.21486664]
[-36.38101578 47.59885025]
[-29.89079475 61.56964874]
[-15.19566345 64.57849121]
[-7.95209503 62.82411957]
[-0.20624343 67.82322693]
[14.41767502 71.16104126]
[24.30534935 62.82449341]
[37.38646317 61.71408463]
[48.87436295 68.46222687]
[54.43468094 80.78411102]
[68.98002625 84.44921112]
[83.52536774 88.11431885]
[103.85134125 80.05382538]
[119.71531677 95.10212708]
[134.57955933 97.11562347]
[149.44380188 99.12911987]
[164.30805969 101.14262390]
[179.17230225 103.15612030]
[194.05819702 105.00271606]
[208.96388245 106.68218994]
[223.86956787 108.36165619]
[231.52972412 94.26948547]
[243.97064209 84.20671082]
[259.27896118 79.68309784]
[275.11474609 81.35944366]
[289.06918335 88.95115662]
[299.03091431 101.27611542]
[303.50555420 116.43862915]
[318.44519043 117.78321838]
[333.38479614 119.12780762]
[345.44967651 109.27507782]
[360.58142090 110.85150909]
[369.90014648 122.41425323]
[384.83975220 123.75884247]
[399.77935791 125.10343170]
[414.71896362 126.44802094]
[429.65859985 127.79261017]
[444.63500977 128.63366699]
[459.63122559 128.97023010]
[473.74591064 120.62113953]
[487.89904785 128.90492249]
[487.53106689 145.29994202]
[473.02053833 152.94039917]
[459.29464722 143.96646118]
[444.29843140 143.62988281]
[441.47155762 145.86566162]
[437.39395142 146.79777527]
[432.71206665 145.84124756]
[428.31399536 142.73222351]
[413.37438965 141.38763428]
[398.43478394 140.04304504]
[383.49514771 138.69845581]
[368.55554199 137.35386658]
[357.32196045 147.06686401]
[342.15191650 145.91609192]
[332.04019165 134.06742859]
[317.10058594 132.72283936]
[302.16098022 131.37825012]
[296.10430908 144.08399963]
[286.04360962 153.97062683]
[273.17962646 159.82948303]
[259.05746460 160.93429565]
[245.38116455 157.13122559]
[233.80792236 148.85981750]
[225.74743652 137.10238647]
[222.19010925 123.26733398]
[207.28442383 121.58786774]
[192.37873840 119.90840149]
[185.32159424 122.30501556]
[177.15879822 118.02037048]
[162.29455566 116.00686646]
[147.43031311 113.99337006]
[132.56607056 111.97986603]
[117.70182037 109.96636963]
[113.10610962 115.52136230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[10 70]
[11 69]
[12 67]
[13 66]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[35 42]
[36 41]
[78 138]
[79 137]
[80 136]
[81 135]
[82 134]
[83 132]
[84 131]
[85 130]
[92 122]
[93 121]
[94 120]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
