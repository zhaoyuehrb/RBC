%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUCUCUCUUCGGUGCCACCGGCGGGCGAGGCCGGAUUAAUCACCGCUGCUUCGGCCGCCCAUGUGUCCUG\
) } def
/len { sequence length } bind def

/coor [
[76.52330017 240.59738159]
[67.46219635 252.74942017]
[54.78960037 261.06692505]
[40.03578186 264.54553223]
[24.98233986 262.76516724]
[11.44705105 255.94082642]
[1.06436574 244.89656067]
[-4.91195583 230.96604919]
[-5.76024389 215.83145142]
[-1.37806308 201.32032776]
[7.70541668 189.18501282]
[20.39332008 180.89085388]
[35.15352249 177.43945312]
[50.20365906 179.24755859]
[56.95671463 165.85366821]
[57.16073990 158.23632812]
[64.29121399 152.04376221]
[71.60664368 138.94854736]
[78.64246368 125.70101929]
[85.39552307 112.30712891]
[80.95935059 98.51341248]
[87.48258972 85.57534790]
[101.21059418 80.93981171]
[107.96364594 67.54592133]
[114.71670532 54.15203857]
[121.46975708 40.75814819]
[128.22280884 27.36426163]
[127.52687073 11.55836868]
[140.16557312 3.67722058]
[146.91862488 -9.71666718]
[153.67167664 -23.11055565]
[160.42474365 -36.50444412]
[167.17779541 -49.89833069]
[173.93084717 -63.29221725]
[180.10937500 -76.96064758]
[185.70220947 -90.87898254]
[191.29505920 -104.79731750]
[182.93370056 -117.86893463]
[183.88610840 -133.35675049]
[193.78610229 -145.30538940]
[208.82688904 -149.12036133]
[223.22502136 -143.33471680]
[231.44409180 -130.17315674]
[230.32371521 -114.69658661]
[220.29469299 -102.85604858]
[205.21339417 -99.20446777]
[199.62055969 -85.28613281]
[194.02770996 -71.36779785]
[195.18353271 -66.44654083]
[193.03511047 -60.77005768]
[187.32473755 -56.53916168]
[180.57168579 -43.14527512]
[173.81861877 -29.75138664]
[167.06556702 -16.35749817]
[160.31251526 -2.96361113]
[153.55946350 10.43027687]
[154.73843384 25.27814865]
[141.61669922 34.11731720]
[134.86364746 47.51120377]
[128.11059570 60.90509415]
[121.35753632 74.29898071]
[114.60447693 87.69287109]
[119.04064941 101.48658752]
[112.51741028 114.42465210]
[98.78940582 119.06018829]
[92.03635406 132.45407104]
[90.89863586 141.82942200]
[84.70185089 146.26397705]
[77.38642883 159.35919189]
[70.35060120 172.60671997]
[63.59754562 186.00061035]
[74.00056458 197.02571106]
[80.00254822 210.94520569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 71]
[15 70]
[17 69]
[18 68]
[19 66]
[20 65]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
