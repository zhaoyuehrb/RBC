%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCGCCCCGGCCGACAGCGCCCGGGAACACGGCUCGCAGGCCGGGGGCAAGGGGCGGCCGGGCGCGGCCGAGCUGCCAUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[141.05647278 189.65988159]
[133.79222107 176.53620911]
[126.52797699 163.41255188]
[119.26373291 150.28887939]
[111.99948120 137.16520691]
[104.73523712 124.04153442]
[97.47098541 110.91786957]
[89.97098541 97.92748260]
[82.23767853 85.07463074]
[74.50437164 72.22177124]
[66.77106476 59.36891174]
[59.03775787 46.51605606]
[51.30444717 33.66319656]
[43.57114029 20.81033897]
[35.83783340 7.95748138]
[16.96563530 7.30318308]
[2.24127150 -4.28583241]
[-2.75096345 -22.19550705]
[3.75267220 -39.45791245]
[-5.32494116 -51.39930725]
[-19.83606148 -57.70311737]
[-21.37866592 -72.51762390]
[-30.45627975 -84.45902252]
[-39.53389359 -96.40041351]
[-48.61150742 -108.34181213]
[-57.68911743 -120.28321075]
[-72.15895081 -115.76659393]
[-87.30077362 -116.47444153]
[-101.28613281 -122.32126617]
[-112.42623901 -132.60104370]
[-119.37586212 -146.07244873]
[-121.29580688 -161.10871887]
[-117.95423126 -175.89416504]
[-109.75463867 -188.64338684]
[-97.68717194 -197.81683350]
[-83.20904541 -202.30677795]
[-68.06855011 -201.57102966]
[-54.09398651 -195.69844055]
[-42.97284698 -185.39814758]
[-36.04805756 -171.91397095]
[-34.15582657 -156.87417603]
[-37.52465057 -142.09490967]
[-45.74772263 -129.36082458]
[-36.67010880 -117.41942596]
[-27.59249687 -105.47802734]
[-18.51488304 -93.53662872]
[-9.43727016 -81.59523773]
[4.42455769 -76.14556122]
[6.61645508 -60.47692108]
[15.69406796 -48.53552628]
[26.98658752 -50.92765808]
[38.38730240 -48.81265259]
[48.15784073 -42.47247696]
[54.79294205 -32.83641052]
[57.25230789 -21.34500313]
[55.12354279 -9.73477936]
[48.69068909 0.22417352]
[56.42399979 13.07703114]
[64.15730286 25.92988968]
[71.89061737 38.78274536]
[79.62392426 51.63560486]
[87.35723114 64.48846436]
[95.09053802 77.34131622]
[102.82384491 90.19417572]
[109.49998474 95.06432343]
[110.59465790 103.65361786]
[117.85890198 116.77729034]
[125.12315369 129.90095520]
[132.38740540 143.02462769]
[139.65164185 156.14830017]
[146.91589355 169.27197266]
[154.18014526 182.39564514]
[170.12898254 191.38093567]
[169.39497375 208.81452942]
[177.12828064 221.66738892]
[184.86158752 234.52024841]
[192.59490967 247.37310791]
[207.19692993 254.83721924]
[207.76350403 271.22656250]
[193.71177673 279.68121338]
[179.49696350 271.50372314]
[179.74205017 255.10641479]
[172.00874329 242.25355530]
[164.27543640 229.40069580]
[156.54211426 216.54783630]
[144.75424194 213.24684143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[19 50]
[20 49]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
