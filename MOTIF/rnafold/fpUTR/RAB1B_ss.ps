%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGGGGCCUCUGGGGCGGAGCGGCCACCAUCUUGGAACGGGAGGCGGAGCAGAGUCGACUGGGAGCGACCGAGCGGGCCGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[111.53363800 299.53518677]
[111.04285431 284.54321289]
[110.55206299 269.55123901]
[110.06127930 254.55928040]
[109.08023071 239.59140015]
[107.60997772 224.66363525]
[106.13971710 209.73585510]
[104.66946411 194.80809021]
[102.95515442 179.90637207]
[100.99726105 165.03469849]
[99.03936768 150.16302490]
[97.08147430 135.29135132]
[95.12358093 120.41967773]
[86.15777588 115.78402710]
[80.39151764 107.50000000]
[65.39151764 107.50000000]
[50.39151382 107.50000000]
[35.39352036 107.74542236]
[20.40155411 108.23621368]
[5.40958452 108.72699738]
[-5.20981932 120.43186188]
[-20.99929619 121.11593628]
[-32.59122849 110.37337494]
[-33.10833359 94.57755280]
[-22.24381447 83.09983826]
[-6.44340324 82.74977112]
[4.91879797 93.73503113]
[19.91076660 93.24423981]
[34.90273666 92.75345612]
[41.61480331 89.32165527]
[50.39151382 92.50000000]
[65.39151764 92.50000000]
[80.39151764 92.50000000]
[89.50306702 81.81877136]
[103.30905151 79.26855469]
[110.80905151 66.27817535]
[118.30905151 53.28779221]
[125.80905151 40.29740906]
[133.30905151 27.30702972]
[125.78622437 7.03759766]
[135.09547424 -12.17599010]
[155.15066528 -18.66759491]
[160.43440247 -32.70618439]
[165.71815491 -46.74477386]
[159.44352722 -61.00193787]
[165.00198364 -75.16379547]
[178.63267517 -81.05783844]
[183.91642761 -95.09642029]
[189.20018005 -109.13500977]
[180.55184937 -122.01856232]
[181.16160583 -137.52365112]
[190.79498291 -149.68826294]
[205.74775696 -153.83483887]
[220.27027893 -148.36894226]
[228.77835083 -135.39233398]
[228.00042725 -119.89476776]
[218.23565674 -107.83538818]
[203.23876953 -103.85126495]
[197.95501709 -89.81267548]
[192.67126465 -75.77408600]
[199.03315735 -62.35536575]
[193.87466431 -48.04297256]
[179.75674438 -41.46102142]
[174.47299194 -27.42243195]
[169.18925476 -13.38384342]
[175.54026794 -6.81103325]
[179.32597351 1.55644381]
[180.07730103 10.75396729]
[177.67695618 19.71018791]
[172.37641907 27.37182045]
[164.77009583 32.82749939]
[155.72865295 35.41616440]
[146.29943848 34.80702972]
[138.79943848 47.79740906]
[131.29943848 60.78779221]
[123.79943085 73.77817535]
[116.29943085 86.76855469]
[120.59048462 104.09570312]
[109.99525452 118.46178436]
[111.95314789 133.33346558]
[113.91104126 148.20513916]
[115.86893463 163.07679749]
[117.82682800 177.94847107]
[122.12357330 186.23524475]
[119.59722900 193.33782959]
[121.06748962 208.26559448]
[122.53774261 223.19337463]
[124.00800323 238.12113953]
[127.71357727 243.97711182]
[127.74520874 249.90829468]
[125.05324554 254.06849670]
[125.54403687 269.06045532]
[126.03482056 284.05242920]
[126.52560425 299.04440308]
[129.34536743 318.21987915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 88]
[6 87]
[7 86]
[8 85]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[15 33]
[16 32]
[17 31]
[18 29]
[19 28]
[20 27]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[42 65]
[43 64]
[44 63]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
