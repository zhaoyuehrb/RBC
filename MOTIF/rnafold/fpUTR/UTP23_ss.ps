%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCAUUUCCGGGUGAAACUGGCAUUGAGGGUACUGGGGCGUGCGUGAGGCGUUUACUGAUGCUUCCUGGUCCGGUGGCCUCGGUCCCGGUAAGCCAGGC\
) } def
/len { sequence length } bind def

/coor [
[74.41404724 319.91958618]
[65.68373108 332.49099731]
[52.10585022 339.55496216]
[36.80048370 339.48825073]
[23.28470612 332.30615234]
[14.66433907 319.65911865]
[12.92027950 304.45327759]
[18.45330048 290.18289185]
[29.99195480 280.12713623]
[44.88474274 276.59680176]
[48.54344940 262.04983521]
[44.14419556 247.81973267]
[55.01385498 236.32359314]
[58.67256165 221.77664185]
[62.33126831 207.22969055]
[54.19103241 197.11195374]
[53.40711212 183.95379639]
[60.49570847 172.60919189]
[73.02687836 167.39469910]
[77.13182831 152.96731567]
[81.23677063 138.53993225]
[85.34171295 124.11254883]
[89.44666290 109.68516541]
[86.22286224 96.08006287]
[96.12595367 86.20989227]
[100.23089600 71.78250122]
[104.33584595 57.35511780]
[108.44078827 42.92773438]
[112.54573059 28.50035095]
[116.65068054 14.07296562]
[120.75562286 -0.35441893]
[117.09028625 -15.74519157]
[128.01519775 -25.86919594]
[132.12014771 -40.29658127]
[136.22509766 -54.72396469]
[140.33003235 -69.15135193]
[144.43498230 -83.57873535]
[148.53993225 -98.00611877]
[152.64486694 -112.43350220]
[148.97953796 -127.82427216]
[159.90444946 -137.94827271]
[164.00939941 -152.37565613]
[158.41070557 -159.08215332]
[156.05088806 -167.39462280]
[157.26364136 -175.85379028]
[161.76245117 -183.00703430]
[168.70329285 -187.65798950]
[176.84210205 -189.06626892]
[182.68888855 -202.87985229]
[188.53567505 -216.69343567]
[194.38246155 -230.50701904]
[200.22924805 -244.32060242]
[206.07603455 -258.13418579]
[211.92282104 -271.94775391]
[217.76960754 -285.76135254]
[215.21846008 -301.96084595]
[228.14042664 -312.05810547]
[243.24249268 -305.66595459]
[244.98895264 -289.36007690]
[231.58319092 -279.91455078]
[225.73640442 -266.10098267]
[219.88961792 -252.28739929]
[214.04283142 -238.47381592]
[208.19604492 -224.66023254]
[202.34925842 -210.84664917]
[196.50247192 -197.03306580]
[190.65568542 -183.21948242]
[195.81103516 -162.27020264]
[178.43678284 -148.27072144]
[174.33183289 -133.84333801]
[178.29078674 -119.48450470]
[167.07225037 -108.32855988]
[162.96731567 -93.90117645]
[158.86236572 -79.47378540]
[154.75741577 -65.04640198]
[150.65248108 -50.61901855]
[146.54753113 -36.19163513]
[142.44258118 -21.76424980]
[146.40153503 -7.40542078]
[135.18301392 3.75052595]
[131.07806396 18.17790985]
[126.97312164 32.60529709]
[122.86817169 47.03268051]
[118.76322937 61.46006393]
[114.65828705 75.88745117]
[110.55333710 90.31483459]
[113.77713776 103.91993713]
[103.87404633 113.79010773]
[99.76910400 128.21749878]
[95.66415405 142.64488220]
[91.55921173 157.07226562]
[87.45426941 171.49964905]
[96.24492645 186.52708435]
[91.62239075 202.96376038]
[76.87821960 210.88839722]
[73.21951294 225.43534851]
[69.56081390 239.98229980]
[73.69837189 255.25289917]
[63.09040070 265.70852661]
[59.43169785 280.25549316]
[70.88223267 290.41146851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[13 97]
[14 96]
[15 95]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[31 80]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[41 70]
[42 69]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
