%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCUGCAGGACCCUCUACACACAGACAGCUGUCCAGCACGGAAGGUGGGCUGAGGCCCAGGGUGAAC\
) } def
/len { sequence length } bind def

/coor [
[82.58726501 249.95903015]
[68.53501129 255.64321899]
[53.38599396 256.17532349]
[38.96953964 251.49114990]
[27.02650261 242.15628052]
[18.99906158 229.29797363]
[15.85657120 214.46893311]
[17.97850037 199.45982361]
[25.10861778 186.08308411]
[36.38592529 175.95401001]
[50.44863510 170.29574585]
[65.59860229 169.79153442]
[70.23385620 155.52569580]
[74.86911774 141.25984192]
[79.50437164 126.99399567]
[84.13962555 112.72814941]
[72.36474609 122.02073669]
[57.98522568 126.29032898]
[43.04708862 124.92942810]
[29.67583656 118.13166046]
[19.77402687 106.86426544]
[14.75055981 92.73044586]
[15.32020855 77.74126434]
[21.40192032 64.02948761]
[32.13034439 53.54612732]
[45.97896576 47.78282547]
[60.97730637 47.55962372]
[74.99129486 52.90828705]
[86.02691650 63.06776428]
[92.51441193 76.59423065]
[97.78503418 62.55070877]
[103.05565643 48.50718689]
[100.66075897 32.86828995]
[112.37673187 23.67126656]
[117.64735413 9.62774372]
[122.91797638 -4.41577911]
[117.61908722 -19.55847740]
[126.27597809 -33.06542969]
[142.24783325 -34.57525635]
[153.28239441 -22.92975044]
[150.91491699 -7.06234550]
[136.96150208 0.85484338]
[131.69087219 14.89836597]
[126.42025757 28.94188881]
[129.19213867 43.57629776]
[117.09918213 53.77780914]
[111.82855988 67.82132721]
[106.55792999 81.86485291]
[113.96055603 94.91097260]
[128.71949768 97.58932495]
[143.47843933 100.26767731]
[158.23738098 102.94602966]
[173.48439026 96.90774536]
[186.16740417 107.30358124]
[183.23922729 123.43918610]
[167.71211243 128.71563721]
[155.55903625 117.70497131]
[140.80009460 115.02661896]
[126.04114532 112.34826660]
[111.28220367 109.66991425]
[98.40547180 117.36340332]
[93.77021790 131.62925720]
[89.13496399 145.89509583]
[84.49971008 160.16094971]
[79.86444855 174.42678833]
[91.82466888 183.73963928]
[99.87579346 196.58311462]
[103.04560852 211.40635681]
[100.95133972 226.41934204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[30 48]
[31 47]
[32 46]
[34 44]
[35 43]
[36 42]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
