%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGGAGGCCUCAGGGCCGGGCGCACGUCGAGGGCUGCGGCCGCCGCAGCGGGCACGGCCAACGAGCUGCGGGCCCGGGAUCGCGGCGGCUGGACGGGGCUGGAGCUGUCGGGAGGGCGGAGCUACAGGGCCUGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[91.00460815 146.27919006]
[85.83991241 160.36201477]
[80.67522430 174.44483948]
[75.51052856 188.52766418]
[70.34583282 202.61048889]
[75.75862885 217.71284485]
[67.20372009 231.28462219]
[51.24369812 232.91470337]
[40.12172318 221.35264587]
[42.36962891 205.46784973]
[56.26300812 197.44578552]
[61.42770386 183.36296082]
[66.59239960 169.28013611]
[71.75708771 155.19731140]
[76.92178345 141.11448669]
[67.12429810 131.11286926]
[61.06108093 119.11820221]
[59.00291443 106.40399933]
[60.81486893 94.21807861]
[65.99742126 83.66085815]
[54.03885269 74.60587311]
[42.08028412 65.55089569]
[30.12171936 56.49591446]
[18.16315269 47.44093323]
[6.20458603 38.38595200]
[-5.95000935 29.59585381]
[-18.29476738 21.07488251]
[-30.63952446 12.55391121]
[-45.99071884 15.19561672]
[-58.38867569 6.37828445]
[-60.81253433 -8.27301216]
[-73.15728760 -16.79398346]
[-85.50205231 -25.31495476]
[-100.85324097 -22.67324829]
[-113.25119781 -31.49058151]
[-115.67505646 -46.14188004]
[-128.01982117 -54.66284943]
[-140.36457825 -63.18381882]
[-152.70933533 -71.70478821]
[-165.05409241 -80.22576141]
[-179.62867737 -75.23699951]
[-194.17611694 -79.73422241]
[-203.17948914 -91.79255676]
[-203.35394287 -106.66223907]
[-215.69869995 -115.18321228]
[-228.04345703 -123.70418549]
[-240.38821411 -132.22515869]
[-256.76882935 -133.00468445]
[-264.04251099 -147.70249939]
[-254.72673035 -161.19873047]
[-238.40475464 -159.60961914]
[-231.86723328 -144.56991577]
[-219.52247620 -136.04893494]
[-207.17771912 -127.52796936]
[-194.83296204 -119.00699615]
[-180.86770630 -124.11675262]
[-166.40034485 -119.97439575]
[-157.03675842 -107.96703339]
[-156.53311157 -92.57051849]
[-144.18835449 -84.04955292]
[-131.84359741 -75.52857971]
[-119.49884033 -67.00760651]
[-107.15408325 -58.48663712]
[-92.59537506 -61.41571045]
[-79.95465088 -52.95008850]
[-76.98107910 -37.65971375]
[-64.63632202 -29.13874245]
[-52.29156113 -20.61777115]
[-37.73284912 -23.54684448]
[-25.09212494 -15.08122444]
[-22.11855316 0.20915313]
[-9.77379608 8.73012447]
[2.57096195 17.25109482]
[7.41741419 17.26744461]
[12.28790092 20.38128281]
[15.25956726 26.42738342]
[27.21813393 35.48236465]
[39.17670059 44.53734589]
[51.13526535 53.59232712]
[63.09383392 62.64730835]
[75.05239868 71.70229340]
[95.34591675 62.56361771]
[117.25933838 66.45513153]
[133.16545105 82.02233887]
[147.51054382 77.63851166]
[158.44694519 66.20584869]
[172.87982178 69.88573456]
[187.22492981 65.50190735]
[201.57003784 61.11808395]
[215.91513062 56.73426056]
[230.26023865 52.35043335]
[244.60534668 47.96660995]
[258.95046997 43.58278656]
[273.29556274 39.19895935]
[275.55892944 24.10459518]
[284.15447998 11.49191761]
[297.37551880 3.86518574]
[312.59698486 2.73869157]
[326.79669189 8.33610153]
[337.15527344 19.54604721]
[341.61599731 34.14278412]
[339.29318237 49.22811890]
[330.64807129 61.80685043]
[317.39709473 69.38145447]
[302.17129517 70.44799805]
[287.99374390 64.79471588]
[277.67938232 53.54406738]
[263.33428955 57.92789078]
[248.98918152 62.31171799]
[234.64407349 66.69554138]
[220.29896545 71.07936859]
[205.95385742 75.46318817]
[191.60874939 79.84701538]
[177.26364136 84.23084259]
[167.35330200 95.34994507]
[151.89437866 91.98361969]
[137.54927063 96.36743927]
[140.04379272 108.15612030]
[138.65582275 121.03273010]
[132.99476624 133.68011475]
[141.65083313 145.93054199]
[150.30688477 158.18095398]
[158.96293640 170.43136597]
[166.53140259 175.68592834]
[167.67111206 183.04731750]
[176.05596924 195.48493958]
[184.44082642 207.92254639]
[199.40782166 214.62487793]
[200.81753540 230.96331787]
[187.21978760 240.13027954]
[172.60276794 232.69558716]
[172.00321960 216.30740356]
[163.61836243 203.86979675]
[155.23350525 191.43217468]
[146.71252441 179.08741760]
[138.05647278 166.83700562]
[129.40042114 154.58659363]
[120.74435425 142.33618164]
[113.30941772 143.32192993]
[119.77945709 156.85479736]
[108.90826416 167.19004822]
[95.71949768 160.04466248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 73]
[27 72]
[28 71]
[31 68]
[32 67]
[33 66]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[44 55]
[45 54]
[46 53]
[47 52]
[84 117]
[85 116]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[120 138]
[121 137]
[122 136]
[123 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
