%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUCCGGGGCGGGGCCUGAGUGCGCCUGCGCAGUCCGCGCCACUCAGGGAGCCGGAGGGGACGCGCCGGAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[89.45917511 298.82473755]
[82.93813324 284.97790527]
[83.61057281 269.68716431]
[91.32196045 256.46624756]
[104.30027771 248.35317993]
[103.10852814 233.40058899]
[101.91677094 218.44801331]
[100.72502136 203.49542236]
[99.53327179 188.54284668]
[90.80924225 176.47053528]
[97.42565918 162.09925842]
[96.23390961 147.14666748]
[95.04215240 132.19409180]
[78.45755005 124.43282318]
[68.68032074 108.95082855]
[68.80004120 90.64039612]
[78.77888489 75.28757477]
[71.88941956 61.96333694]
[64.99996185 48.63909531]
[58.11050415 35.31485748]
[51.22104645 21.99061775]
[44.33158493 8.66637897]
[37.44212723 -4.65785980]
[30.55266762 -17.98209953]
[26.61680412 -20.08813286]
[23.79195786 -23.02537537]
[22.20163155 -26.35728073]
[21.81946373 -29.65138054]
[22.48300362 -32.52646255]
[23.92137337 -34.69199371]
[19.79955673 -49.11456680]
[15.67774105 -63.53713989]
[11.55592442 -77.95971680]
[-1.71412051 -86.97555542]
[-2.79527020 -102.98213959]
[9.14184093 -113.70057678]
[24.94008255 -110.90860748]
[32.48039627 -96.74798584]
[25.97849846 -82.08152771]
[30.10031509 -67.65895844]
[34.22212982 -53.23638153]
[38.34394836 -38.81380844]
[43.87690735 -24.87155914]
[50.76636505 -11.54731941]
[57.65582657 1.77691996]
[64.54528809 15.10115910]
[71.43474579 28.42539787]
[78.32420349 41.74963760]
[85.21366119 55.07387543]
[92.10311890 68.39811707]
[103.77544403 67.64592743]
[114.96096802 71.06542969]
[124.21744537 78.21571350]
[130.35136414 88.17483521]
[145.20629883 86.09379578]
[157.79348755 75.58215332]
[173.09519958 81.48043060]
[175.37034607 97.72098541]
[162.27845764 107.59693146]
[147.28733826 100.94873810]
[132.43238831 103.02977753]
[128.86637878 115.09211731]
[120.99595642 124.90400696]
[109.99473572 131.00233459]
[111.18648529 145.95492554]
[112.37824249 160.90750122]
[121.18750763 174.04931641]
[114.48584747 187.35108948]
[115.67760468 202.30368042]
[116.86935425 217.25625610]
[118.06111145 232.20883179]
[119.25286102 247.16142273]
[133.35243225 253.11631775]
[143.06063843 264.94888306]
[146.14660645 279.94006348]
[141.90119934 294.64498901]
[131.29998779 305.68460083]
[116.77905273 310.52206421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[11 66]
[12 65]
[13 64]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[30 42]
[31 41]
[32 40]
[33 39]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
