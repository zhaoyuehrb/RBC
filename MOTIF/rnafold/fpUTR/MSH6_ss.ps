%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAGGCGCCUGUUGAUUGGCCACUGGGGCCCGGGUUCCUCCGGCGGAGCGCGCCUCCCCCCAGAUUUCCCGCCAGCAGGAGCCGCGCGGUAGAUGCGGUGCUUUUAGGAGCUCCGUCCGACAGAACGGUUGGGCCUUGCCGGCUGUCGGU\
) } def
/len { sequence length } bind def

/coor [
[70.12074280 117.49671173]
[66.86741638 97.67829895]
[52.52735519 93.27799988]
[38.18729401 88.87770081]
[22.72450829 92.22626495]
[12.82694817 81.09578705]
[-1.51311338 76.69548798]
[-15.85317421 72.29518127]
[-31.31595802 75.64374542]
[-41.21352005 64.51326752]
[-55.55358124 60.11296844]
[-69.89363861 55.71266937]
[-84.23370361 51.31236649]
[-98.57376099 46.91206741]
[-112.91382599 42.51176834]
[-127.25389099 38.11146545]
[-139.64472961 47.26423264]
[-154.87113953 47.36468506]
[-167.09248352 38.58388138]
[-171.74420166 24.45945168]
[-186.08425903 20.05915070]
[-199.43254089 30.39954376]
[-216.14764404 30.76557350]
[-229.66496277 21.21078491]
[-234.79306030 5.64632082]
[-249.22044373 1.54137611]
[-263.64782715 -2.56356883]
[-278.07522583 -6.66851377]
[-292.50259399 -10.77345848]
[-306.92999268 -14.87840366]
[-323.85482788 -4.15878201]
[-342.93960571 -9.16820335]
[-352.13137817 -26.28492737]
[-366.78408813 -29.49392319]
[-381.92004395 -24.88806725]
[-392.69738770 -35.16902161]
[-407.35009766 -38.37801743]
[-422.00283813 -41.58701324]
[-436.65554810 -44.79600906]
[-451.30828857 -48.00500488]
[-464.47875977 -39.26922226]
[-479.95202637 -42.48686981]
[-488.54809570 -55.74897385]
[-485.16702271 -71.18737030]
[-471.81478882 -79.64272308]
[-456.41299438 -76.09862518]
[-448.09927368 -62.65773010]
[-433.44656372 -59.44873428]
[-418.79382324 -56.23973846]
[-404.14111328 -53.03074265]
[-389.48837280 -49.82174683]
[-375.40051270 -54.65713120]
[-363.57510376 -44.14664841]
[-348.92236328 -40.93765259]
[-342.01367188 -48.67222214]
[-332.43032837 -52.84378052]
[-321.89953613 -52.62657166]
[-312.35040283 -47.99259949]
[-305.56051636 -39.72914124]
[-302.82504272 -29.30578804]
[-288.39767456 -25.20084381]
[-273.97027588 -21.09589767]
[-259.54287720 -16.99095345]
[-245.11550903 -12.88600826]
[-230.68812561 -8.78106403]
[-220.96495056 -17.97954369]
[-207.85749817 -21.18291283]
[-194.77909851 -17.44644356]
[-185.19047546 -7.64718008]
[-181.68395996 5.71908951]
[-167.34390259 10.11938953]
[-155.57049561 1.03506708]
[-140.52749634 0.62043113]
[-127.97808075 9.24399376]
[-122.85358429 23.77140617]
[-108.51352692 28.17170715]
[-94.17346191 32.57200623]
[-79.83340454 36.97230530]
[-65.49333954 41.37260818]
[-51.15328217 45.77290726]
[-36.81322098 50.17320633]
[-22.37613297 46.50990677]
[-11.45287418 57.95512390]
[2.88718700 62.35542297]
[17.22724915 66.75572205]
[31.66433525 63.09241867]
[42.58759308 74.53763580]
[56.92765427 78.93793488]
[71.26771545 83.33824158]
[76.80142975 75.25408936]
[84.59775543 68.98909760]
[94.06346130 65.17142487]
[104.43300629 64.23711395]
[114.83026886 66.38366699]
[124.34259796 71.54322815]
[132.10083008 79.37870026]
[137.35826111 89.30381012]
[151.69833374 84.90351105]
[166.03839111 80.50321198]
[180.37844849 76.10291290]
[191.30171204 64.65769196]
[205.73880005 68.32099915]
[220.07885742 63.92069626]
[234.41891479 59.52039719]
[248.75897217 55.12009811]
[259.52865601 42.75296783]
[275.56970215 46.16135788]
[280.38046265 61.83901215]
[269.01202393 73.65809631]
[253.15928650 69.46015930]
[238.81921387 73.86045837]
[224.47915649 78.26075745]
[210.13909912 82.66105652]
[200.24153137 93.79153442]
[184.77874756 90.44297028]
[170.43869019 94.84327698]
[156.09863281 99.24357605]
[141.75856018 103.64387512]
[137.80195618 118.11264038]
[147.90739441 129.19776917]
[158.01283264 140.28291321]
[168.11825562 151.36804199]
[178.22369385 162.45317078]
[188.32913208 173.53831482]
[198.43457031 184.62344360]
[211.29849243 186.01020813]
[219.48739624 195.50299072]
[219.00317383 207.62849426]
[228.87887573 218.91877747]
[238.75459290 230.20904541]
[248.63029480 241.49932861]
[264.07135010 239.96525574]
[277.44808960 247.82923889]
[283.61691284 262.06741333]
[280.20574951 277.20489502]
[268.52627563 287.42102051]
[253.06948853 288.78750610]
[239.77882385 280.77886963]
[233.76484680 266.47463989]
[237.34001160 251.37503052]
[227.46430969 240.08476257]
[217.58860779 228.79447937]
[207.71289062 217.50419617]
[190.83897400 212.78030396]
[187.34942627 194.72888184]
[177.24400330 183.64375305]
[167.13856506 172.55860901]
[157.03312683 161.47348022]
[146.92768860 150.38835144]
[136.82225037 139.30320740]
[126.71681976 128.21807861]
[105.90583801 136.97933960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[6 85]
[7 84]
[8 83]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[20 71]
[21 70]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[97 118]
[98 117]
[99 116]
[100 115]
[102 113]
[103 112]
[104 111]
[105 110]
[119 151]
[120 150]
[121 149]
[122 148]
[123 147]
[124 146]
[125 145]
[128 143]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
