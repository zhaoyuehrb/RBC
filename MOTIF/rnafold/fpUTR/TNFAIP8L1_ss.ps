%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCGGUCCAGGCAUCGGUGGCGGGGAGCCAGGCCUAGGCCAGCCCGGGCCCACCCAGACUGGCCCCUAAUGAGCUCCCAAGUGGCCUGUGGGGACUUGGCCUCAGUUUUGCCAGCUGUGAACUGGGACCGUCGCUGCUAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[103.90581512 115.36343384]
[101.38942719 119.31710815]
[94.30964661 132.54119873]
[87.22985840 145.76528931]
[80.15007782 158.98937988]
[73.07028961 172.21348572]
[65.99050903 185.43757629]
[58.91072083 198.66166687]
[63.72767639 213.71398926]
[56.41600418 227.72523499]
[41.31359482 232.38278198]
[27.38043404 224.92338562]
[22.88282204 209.77256775]
[30.48911285 195.91905212]
[45.68662643 191.58187866]
[52.76641083 178.35778809]
[59.84619522 165.13369751]
[66.92597961 151.90960693]
[74.00576782 138.68550110]
[81.08554840 125.46141815]
[88.16533661 112.23731995]
[85.29795074 97.51393127]
[73.77301788 87.91310883]
[55.58753204 85.23687744]
[50.10689926 68.59747314]
[38.37942886 59.24512482]
[26.65195465 49.89277649]
[14.92448235 40.54042816]
[3.19701052 31.18808174]
[-8.53046131 21.83573532]
[-20.35719872 12.60923576]
[-32.28184891 3.50963807]
[-44.66309738 10.40223885]
[-58.69528580 12.03704548]
[-72.24592590 8.19900322]
[-83.26844788 -0.49775985]
[-90.11129761 -12.70792484]
[-91.76535797 -26.56301880]
[-88.01263428 -39.95731354]
[-99.74010468 -49.30966187]
[-111.46758270 -58.66200638]
[-123.19505310 -68.01435089]
[-134.92253113 -77.36669922]
[-146.64999390 -86.71904755]
[-161.53402710 -82.74768829]
[-175.73655701 -88.23784637]
[-183.88655090 -100.88859558]
[-183.03469849 -115.73488617]
[-194.76217651 -125.08723450]
[-206.48965454 -134.43957520]
[-222.77745056 -136.34736633]
[-229.01979065 -151.51197815]
[-218.79508972 -164.33334351]
[-202.62164307 -161.62194824]
[-197.13729858 -146.16705322]
[-185.40983582 -136.81469727]
[-173.68235779 -127.46235657]
[-159.39784241 -131.59646606]
[-145.25073242 -126.46585083]
[-136.73786926 -113.84109497]
[-137.29765320 -98.44651794]
[-125.57017517 -89.09417725]
[-113.84270477 -79.74182892]
[-102.11523438 -70.38948059]
[-90.38776398 -61.03713226]
[-78.66028595 -51.68478775]
[-64.43196869 -58.88645935]
[-48.42955399 -59.18026733]
[-33.84103775 -52.45716476]
[-23.59472656 -40.01103592]
[-19.77147675 -24.29001808]
[-23.18225288 -8.41501331]
[-11.25760078 0.68458468]
[-3.98055267 2.25299668]
[0.82188535 10.10826302]
[12.54935741 19.46060944]
[24.27683067 28.81295776]
[36.00430298 38.16530609]
[47.73177338 47.51765060]
[59.45924759 56.86999893]
[71.55605316 55.83628082]
[81.41242981 63.59320450]
[83.37384033 76.38817596]
[94.89878082 85.98899841]
[108.34299469 92.64128876]
[122.96691895 95.97910309]
[137.59083557 99.31691742]
[152.21475220 102.65473175]
[166.83866882 105.99254608]
[181.53057861 109.01708984]
[196.28376770 111.72697449]
[211.03695679 114.43686676]
[225.79013062 117.14675903]
[240.76104736 112.02989960]
[251.88108826 121.93918610]
[266.63427734 124.64907837]
[281.38745117 127.35896301]
[287.84390259 125.47286987]
[293.42214966 126.95774841]
[296.70730591 130.51277161]
[311.33120728 133.85058594]
[326.50711060 129.37809753]
[337.19357300 139.75349426]
[351.81747437 143.09130859]
[366.44140625 146.42912292]
[381.06530762 149.76693726]
[395.68923950 153.10475159]
[410.31314087 156.44256592]
[424.93707275 159.78038025]
[439.56100464 163.11819458]
[449.94873047 151.80491638]
[464.60623169 147.21649170]
[479.59066772 150.58721924]
[490.87133789 161.01037598]
[495.41378784 175.68217468]
[491.99612427 190.65599060]
[481.53765869 201.90393066]
[466.85168457 206.40036011]
[451.88867188 202.93577576]
[440.67355347 192.44210815]
[436.22317505 177.74211121]
[421.59927368 174.40429688]
[406.97534180 171.06648254]
[392.35140991 167.72866821]
[377.72750854 164.39085388]
[363.10357666 161.05303955]
[348.47967529 157.71522522]
[333.85574341 154.37741089]
[319.72586060 159.08863831]
[307.99340820 148.47450256]
[293.36947632 145.13668823]
[278.67758179 142.11215210]
[263.92437744 139.40226746]
[249.17120361 136.69236755]
[235.25553894 142.00306702]
[223.08024597 131.89994812]
[208.32705688 129.19004822]
[193.57388306 126.48016357]
[178.82069397 123.77027130]
[174.39848328 125.73863220]
[168.68730164 124.89941406]
[163.50085449 120.61646271]
[148.87693787 117.27864838]
[134.25302124 113.94083405]
[119.62910461 110.60301971]
[105.00518036 107.26521301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[22 84]
[23 83]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 73]
[32 72]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[48 57]
[49 56]
[50 55]
[85 146]
[86 145]
[87 144]
[88 143]
[89 142]
[90 139]
[91 138]
[92 137]
[93 136]
[95 134]
[96 133]
[97 132]
[100 131]
[101 130]
[103 128]
[104 127]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
