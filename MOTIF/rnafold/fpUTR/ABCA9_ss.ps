%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCACAAUGAAUGUGAAAUUAAAAGCAUGAUGUAGUAGUGACCCAAAAGGAAUGUGAAUUCUCCUCCAGAACAUGCAGAGACCCAUGGAUGAACUGUGUUUCUAGAUUUUUCCUCCAGCUUUCCUGAGAGAAACAGGUCAAA\
) } def
/len { sequence length } bind def

/coor [
[17.28444481 243.50770569]
[-7.22025728 242.44781494]
[-13.55953121 256.04241943]
[-19.89880562 269.63705444]
[-26.23807907 283.23165894]
[-32.57735443 296.82626343]
[-38.91662598 310.42089844]
[-34.80281830 325.92755127]
[-44.47682190 338.72570801]
[-60.51756668 338.99774170]
[-70.61997223 326.53497314]
[-67.03433228 310.89773560]
[-52.51124573 304.08163452]
[-46.17197037 290.48699951]
[-39.83269501 276.89239502]
[-33.49342346 263.29776001]
[-27.15414810 249.70315552]
[-20.81487465 236.10853577]
[-26.60556602 231.64898682]
[-31.68809128 226.39143372]
[-35.95342636 220.44711304]
[-39.30985641 213.94198608]
[-41.68493652 207.01409912]
[-43.02706146 199.81065369]
[-43.30659103 192.48487854]
[-42.51649094 185.19273376]
[-40.67251587 178.08966064]
[-37.81289673 171.32720947]
[-33.99753952 165.04980469]
[-29.30678368 159.39170837]
[-23.83970070 154.47412109]
[-17.71200180 150.40258789]
[-11.05360031 147.26469421]
[-4.00584221 145.12825012]
[3.28148484 144.03981018]
[10.65333748 144.02359009]
[17.95271301 145.08105469]
[25.02400208 147.19071960]
[31.71628952 150.30868530]
[37.88659286 154.36955261]
[48.72204971 143.99685669]
[59.55751038 133.62416077]
[70.39296722 123.25146484]
[81.22843170 112.87876892]
[67.65783691 119.26931000]
[53.78670883 113.56039429]
[48.64590073 99.46883392]
[55.58236313 86.16900635]
[70.08007812 82.31982422]
[82.69999695 90.42694092]
[73.31114960 78.72867584]
[63.92229462 67.03041077]
[54.53344345 55.33214188]
[45.14459229 43.63387299]
[29.67266846 38.19773102]
[26.91088486 22.03281212]
[39.70032501 11.76819992]
[54.88431168 17.96324730]
[56.84285736 34.24502182]
[66.23171234 45.94328690]
[75.62055969 57.64155579]
[85.00941467 69.33982086]
[94.39826965 81.03808594]
[101.85369110 80.22158813]
[100.22091675 65.31071472]
[115.13181305 63.67817688]
[116.76453400 78.58858490]
[124.21995544 77.77208710]
[130.85429382 64.31899261]
[137.48861694 50.86590195]
[132.64164734 36.06236649]
[139.56144714 22.51352882]
[153.70422363 17.98390961]
[160.33854675 4.53081894]
[166.97288513 -8.92227173]
[166.13716125 -24.72139168]
[178.70567322 -32.71401215]
[185.33999634 -46.16710663]
[177.99612427 -59.83630371]
[180.12271118 -75.20697021]
[190.90203857 -86.36875916]
[206.18925476 -89.02973938]
[220.10609436 -82.16671753]
[227.30125427 -68.41865540]
[225.00805664 -53.07196426]
[214.10827637 -42.02776337]
[198.79309082 -39.53277588]
[192.15876770 -26.07968330]
[193.46900940 -11.24281979]
[180.42597961 -2.28794169]
[173.79164124 11.16514969]
[167.15731812 24.61824036]
[172.17330933 38.59591675]
[165.63679504 52.33377457]
[150.94171143 57.50023270]
[144.30737305 70.95332336]
[137.67304993 84.40641022]
[142.95680237 98.44499969]
[156.81498718 104.18525696]
[170.67318726 109.92550659]
[184.53137207 115.66575623]
[198.38957214 121.40600586]
[212.24775696 127.14626312]
[226.10595703 132.88650513]
[219.41822815 119.45988464]
[220.89662170 104.53292084]
[230.08819580 92.67901611]
[244.17677307 87.53002930]
[258.84582520 90.66355133]
[269.60095215 101.11949921]
[273.14697266 115.69432831]
[268.39743042 129.92253113]
[256.80749512 139.44479370]
[241.92808533 141.34361267]
[254.40011597 149.67716980]
[266.87216187 158.01071167]
[275.81958008 160.20259094]
[279.52264404 166.66458130]
[291.80993652 175.26823425]
[307.79534912 173.90962219]
[318.71923828 185.65904236]
[316.20169067 201.50332642]
[302.17398071 209.28811646]
[287.39694214 203.04156494]
[283.20629883 187.55551147]
[270.91900635 178.95187378]
[258.53860474 170.48275757]
[246.06657410 162.14921570]
[233.59452820 153.81565857]
[220.36570740 146.74470520]
[206.50750732 141.00445557]
[192.64932251 135.26420593]
[178.79112244 129.52395630]
[164.93293762 123.78369904]
[151.07473755 118.04344940]
[137.21655273 112.30319214]
[91.60112762 123.71422577]
[80.76566315 134.08692932]
[69.93020630 144.45962524]
[59.09474564 154.83232117]
[48.25928879 165.20501709]
[57.05435181 188.33561707]
[53.82921219 212.81568909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[40 141]
[41 140]
[42 139]
[43 138]
[44 137]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[68 97]
[69 96]
[70 95]
[73 92]
[74 91]
[75 90]
[77 88]
[78 87]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[114 129]
[115 128]
[116 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
