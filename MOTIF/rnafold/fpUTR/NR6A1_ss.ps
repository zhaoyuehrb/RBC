%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGAGGGGGCGCGGCGCGGAGGGGCGCGGAGCGGCGCGGAGCCGGGCGGCUCGGGGCCCAGAGAGAGCCGCGGCCGGGAGCUCGCGGGCUCCUGACAACCUCCUCCCCUCGGCGGACGACGACCACGGCGACUAGGGCGCCGGUCAUGGCGGAGCAACAAACCCGGCGCGGACCCUAGGCACCACCGC\
) } def
/len { sequence length } bind def

/coor [
[116.40901947 343.12078857]
[114.93875885 328.19302368]
[113.46850586 313.26525879]
[111.99824524 298.33749390]
[110.52799225 283.40972900]
[101.58045959 271.50210571]
[107.92784882 257.01000977]
[106.45758820 242.08224487]
[104.98733521 227.15446472]
[103.51707458 212.22669983]
[91.87632751 203.00561523]
[90.17262268 187.88766479]
[99.92347717 175.74029541]
[98.45322418 160.81253052]
[96.98296356 145.88476562]
[95.51271057 130.95698547]
[72.78322601 115.41811371]
[71.14037323 87.93380737]
[59.09226227 78.99831390]
[47.04415131 70.06282806]
[31.35064316 68.05673218]
[25.73710632 54.26044846]
[13.68899345 45.32495880]
[1.64088094 36.38946915]
[-10.40723228 27.45397758]
[-22.45534515 18.51848793]
[-34.50345612 9.58299923]
[-45.17266464 11.80067539]
[-55.09360123 7.85309553]
[-61.07102203 -0.72791934]
[-61.32422256 -10.96271420]
[-73.07352448 -20.28762245]
[-84.82282257 -29.61253166]
[-96.57212830 -38.93743896]
[-111.20765686 -42.22395706]
[-125.81581116 -38.81781387]
[-140.42396545 -35.41167068]
[-155.03211975 -32.00552750]
[-164.69088745 -19.19585228]
[-180.73130798 -18.90473366]
[-190.84852600 -31.35548973]
[-187.28149414 -46.99696732]
[-172.76652527 -53.83036423]
[-158.43826294 -46.61368179]
[-143.83010864 -50.01982498]
[-129.22195435 -53.42596817]
[-114.61380005 -56.83211136]
[-113.02140045 -71.74801636]
[-111.42913055 -86.66259766]
[-124.98897552 -93.07592773]
[-138.54881287 -99.48925018]
[-152.10865784 -105.90258026]
[-165.66848755 -112.31590271]
[-179.22833252 -118.72923279]
[-192.78816223 -125.14255524]
[-204.62185669 -115.50271606]
[-219.46821594 -111.96031189]
[-234.37947083 -115.21869659]
[-246.39498901 -124.63091278]
[-253.12910461 -138.32817078]
[-253.24472046 -153.59085083]
[-246.71888733 -167.38853455]
[-234.84733582 -176.98170471]
[-219.98715210 -180.46562195]
[-205.08883667 -177.14852905]
[-193.11047363 -167.68907166]
[-186.43035889 -153.96540833]
[-186.37484741 -138.70239258]
[-172.81500244 -132.28907776]
[-159.25515747 -125.87574005]
[-145.69532776 -119.46241760]
[-132.13548279 -113.04908752]
[-118.57564545 -106.63576508]
[-105.01580811 -100.22243500]
[-99.29685211 -105.07460785]
[-101.98241425 -119.83224487]
[-87.85894775 -114.77895355]
[-82.13999176 -119.63112640]
[-86.25881958 -134.05455017]
[-90.37764740 -148.47798157]
[-94.49647522 -162.90139771]
[-98.61531067 -177.32482910]
[-102.73413849 -191.74826050]
[-106.85296631 -206.17169189]
[-110.97179413 -220.59510803]
[-123.12580109 -231.60475159]
[-119.40414429 -247.57601929]
[-103.63535309 -252.07904053]
[-92.04100037 -240.48149109]
[-96.54837036 -224.71394348]
[-92.42953491 -210.29051208]
[-88.31070709 -195.86708069]
[-84.19187927 -181.44366455]
[-80.07305145 -167.02023315]
[-75.95422363 -152.59680176]
[-71.83539581 -138.17338562]
[-67.71656036 -123.74995422]
[-60.60536194 -106.53881836]
[-58.76399994 -89.76330566]
[-61.57818604 -74.82640076]
[-68.09278107 -62.86730194]
[-77.10059357 -54.68470764]
[-87.24721527 -50.68674088]
[-75.49791718 -41.36183167]
[-63.74861526 -32.03692245]
[-51.99931335 -22.71201515]
[-32.72415924 -21.29932785]
[-25.56796837 -2.46511412]
[-13.51985550 6.47037554]
[-1.47174251 15.40586472]
[10.57637024 24.34135437]
[22.62448311 33.27684402]
[34.67259598 42.21233368]
[49.50434113 43.57930374]
[55.97964096 58.01471329]
[68.02775574 66.95020294]
[80.07586670 75.88569641]
[85.57833862 70.44362640]
[92.56111145 66.31793213]
[100.69373322 63.90629959]
[109.54068756 63.51998138]
[118.58473969 65.35658264]
[127.25707245 69.47925568]
[134.97259521 75.80394745]
[149.46148682 71.92166138]
[163.95036316 68.03937531]
[178.43925476 64.15708923]
[183.39581299 59.74250031]
[188.99690247 58.66759109]
[193.46586609 60.39311981]
[208.07402039 56.98697662]
[222.68217468 53.58082962]
[237.29032898 50.17468643]
[244.19737244 36.14518738]
[258.52722168 29.88506317]
[273.51379395 34.35015488]
[282.08084106 47.43217850]
[280.18331909 62.95420837]
[268.71713257 73.58721161]
[253.09629822 74.31061554]
[240.69647217 64.78284454]
[226.08831787 68.18898773]
[211.48016357 71.59513092]
[196.87200928 75.00127411]
[182.32153320 78.64597321]
[167.83265686 82.52825928]
[153.34376526 86.41054535]
[138.85487366 90.29283142]
[137.81512451 97.72041321]
[152.67025757 99.80015564]
[150.59027100 114.65524292]
[135.73564148 112.57556915]
[134.69589233 120.00315094]
[147.56181335 127.71469116]
[160.42774963 135.42622375]
[173.81364441 127.89540863]
[189.17140198 128.08251953]
[202.36984253 135.93724060]
[209.85867310 149.34667969]
[209.62341309 164.70376587]
[201.72737122 177.87753296]
[188.29452515 185.32429504]
[172.93824768 185.04089355]
[159.78930664 177.10359192]
[152.38468933 163.64747620]
[152.71620178 148.29216003]
[139.85028076 140.58061218]
[126.98434448 132.86907959]
[118.13929749 132.13793945]
[110.44047546 129.48672485]
[111.91073608 144.41450500]
[113.38099670 159.34226990]
[114.85124969 174.27005005]
[126.78457642 184.28170776]
[128.06297302 199.44152832]
[118.44484711 210.75643921]
[119.91510010 225.68421936]
[121.38536072 240.61198425]
[122.85562134 255.53974915]
[131.90830994 268.51507568]
[125.45576477 281.93945312]
[126.92601776 296.86721802]
[128.39627075 311.79501343]
[129.86653137 326.72277832]
[131.33679199 341.65054321]
[144.34471130 350.32971191]
[148.68086243 365.35409546]
[142.29783630 379.62960815]
[128.20950317 386.41583252]
[113.06793976 382.50851440]
[104.02253723 369.75253296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 185]
[2 184]
[3 183]
[4 182]
[5 181]
[7 179]
[8 178]
[9 177]
[10 176]
[13 173]
[14 172]
[15 171]
[16 170]
[18 117]
[19 116]
[20 115]
[22 113]
[23 112]
[24 111]
[25 110]
[26 109]
[27 108]
[31 106]
[32 105]
[33 104]
[34 103]
[35 47]
[36 46]
[37 45]
[38 44]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[124 148]
[125 147]
[126 146]
[127 145]
[130 144]
[131 143]
[132 142]
[133 141]
[153 168]
[154 167]
[155 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
