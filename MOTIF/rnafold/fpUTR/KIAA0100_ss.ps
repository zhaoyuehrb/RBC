%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCGCGCGCAGCUGGUCGGCCCGCGGCGGUGCUGCGCGGAUCCGGCGUCGGGGCCCGGCAUGGCGGGGGCCGGGGCCAAGCCGGGCCGGACCCGGACCUAA\
) } def
/len { sequence length } bind def

/coor [
[106.92992401 171.65585327]
[94.16310120 179.53038025]
[79.21313477 180.75451660]
[65.33539581 175.06167603]
[55.55177689 163.69149780]
[51.99267578 149.11985779]
[55.43308640 134.51972961]
[65.12430573 123.06999969]
[50.29507446 125.32696533]
[35.46584320 127.58393097]
[20.63661194 129.84089661]
[5.80738068 132.09786987]
[-9.02185059 134.35484314]
[-23.85108185 136.61180115]
[-33.87431717 150.85060120]
[-50.75011826 153.46667480]
[-64.07946014 143.33660889]
[-78.83375549 146.04043579]
[-93.58805847 148.74426270]
[-108.34235382 151.44808960]
[-118.60251617 163.78131104]
[-134.63850403 163.30520630]
[-144.14888000 150.38497925]
[-139.83810425 134.93193054]
[-125.01302338 128.80030823]
[-111.04618073 136.69378662]
[-96.29187775 133.98995972]
[-81.53758240 131.28613281]
[-66.78328705 128.58230591]
[-60.95517731 116.98194885]
[-49.31180954 110.81069946]
[-36.05211639 112.55045319]
[-26.10804939 121.78256989]
[-11.27881813 119.52560425]
[3.55041313 117.26863861]
[18.37964439 115.01167297]
[33.20887375 112.75469971]
[48.03810501 110.49773407]
[62.86733627 108.24076843]
[77.11911774 103.56243896]
[90.40095520 96.59159088]
[95.61151123 90.25096130]
[104.19089508 89.61766052]
[117.67722321 83.05113983]
[131.16354370 76.48462677]
[144.64985657 69.91811371]
[158.13618469 63.35159683]
[164.61402893 56.67010880]
[172.13046265 56.79734039]
[185.80895996 50.64114761]
[199.48745728 44.48495483]
[204.84814453 32.63362885]
[216.50173950 27.83144760]
[227.90200806 32.17915726]
[241.76020813 26.43890572]
[255.61839294 20.69865417]
[269.47659302 14.95840263]
[283.33477783 9.21815109]
[297.19296265 3.47789955]
[311.05117798 -2.26235199]
[324.90936279 -8.00260353]
[334.69812012 -20.43203354]
[349.41751099 -18.15421677]
[363.27572632 -23.89446831]
[377.13391113 -29.63471985]
[390.99209595 -35.37496948]
[392.91726685 -50.61273193]
[402.21615601 -62.83673096]
[416.38742065 -68.75877380]
[431.61907959 -66.78585815]
[443.81387329 -57.44869614]
[449.69146729 -43.25893021]
[447.67080688 -28.03353691]
[438.29547119 -15.86807346]
[424.08734131 -10.03498650]
[408.86837769 -12.10334778]
[396.73236084 -21.51677895]
[382.87414551 -15.77652645]
[369.01596069 -10.03627491]
[355.15777588 -4.29602385]
[346.36022949 7.72282553]
[330.64959717 5.85558939]
[316.79141235 11.59584141]
[302.93322754 17.33609200]
[289.07504272 23.07634354]
[275.21682739 28.81659508]
[261.35864258 34.55684662]
[247.50045776 40.29710007]
[233.64225769 46.03734970]
[223.83033752 60.50028229]
[205.64366150 58.16345215]
[191.96516418 64.31964874]
[178.28666687 70.47583771]
[164.70269775 76.83792114]
[151.21638489 83.40443420]
[137.73005676 89.97094727]
[124.24373627 96.53746796]
[110.75741577 103.10398102]
[97.37180328 109.87343597]
[84.08996582 116.84428406]
[98.68109894 120.32261658]
[110.10529327 130.04310608]
[115.87490845 143.88909912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[17 29]
[18 28]
[19 27]
[20 26]
[40 100]
[41 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[49 93]
[50 92]
[51 91]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[63 80]
[64 79]
[65 78]
[66 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
