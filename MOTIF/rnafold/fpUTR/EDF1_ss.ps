%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGACGUAGCGUCGCCGCGCCAGGUCUCUAGCAGCUGCCGCUGAGCCGCCGGACGGACGCUCGUCUUCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[123.88391113 369.23925781]
[128.84548950 354.70382690]
[140.42060852 344.60867310]
[137.45770264 329.90420532]
[134.49479675 315.19973755]
[131.53187561 300.49530029]
[128.56896973 285.79083252]
[125.60605621 271.08636475]
[122.64314270 256.38189697]
[118.11225891 250.28332520]
[119.86700439 241.03450012]
[117.49103546 226.22387695]
[115.11506653 211.41325378]
[112.73909760 196.60261536]
[110.36312866 181.79199219]
[107.69316101 167.03152466]
[104.73024750 152.32705688]
[101.47556305 137.68441772]
[97.93039703 123.10937500]
[94.38523102 108.53433990]
[89.44862366 101.86320496]
[91.00112915 93.30944061]
[88.03821564 78.60498047]
[83.68347931 73.05077362]
[83.09896088 67.04808044]
[85.47332764 62.61671066]
[83.68805695 47.72332764]
[79.45938873 39.31272507]
[82.14004517 32.20387650]
[80.94829559 17.25129318]
[79.75653839 2.29871011]
[75.86560059 -6.27336121]
[78.82675934 -13.27001667]
[78.23040771 -28.25815773]
[77.63406372 -43.24629974]
[65.15496063 -52.66999435]
[61.70324707 -67.92186737]
[68.90872192 -81.80045319]
[83.36917114 -87.75270844]
[98.25682068 -82.96815491]
[106.54217529 -69.70591736]
[104.31314087 -54.22801971]
[92.62220001 -43.84264755]
[93.21855164 -28.85450554]
[93.81489563 -13.86636448]
[94.70912170 1.10695755]
[95.90087891 16.05953979]
[97.09262848 31.01212311]
[98.58143616 45.93805313]
[100.36670685 60.83143616]
[102.74267578 75.64206696]
[105.70558929 90.34652710]
[108.96027374 104.98917389]
[112.50543976 119.56420898]
[116.05060577 134.13925171]
[121.25022888 141.98678589]
[119.43470764 149.36415100]
[122.39762115 164.06861877]
[127.28113556 172.11665344]
[125.17375946 179.41601562]
[127.54972839 194.22663879]
[129.92568970 209.03727722]
[132.30166626 223.84790039]
[134.67764282 238.65853882]
[137.34761047 253.41900635]
[140.31051636 268.12347412]
[143.27342224 282.82791138]
[146.23634338 297.53237915]
[149.19924927 312.23684692]
[152.16215515 326.94131470]
[155.12507629 341.64575195]
[169.70649719 346.47045898]
[179.91004944 357.95013428]
[182.99104309 372.99682617]
[178.12068176 387.56304932]
[166.60906982 397.73059082]
[151.55279541 400.76437378]
[137.00189209 395.84838867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 58]
[17 57]
[18 55]
[19 54]
[20 53]
[22 52]
[23 51]
[26 50]
[27 49]
[29 48]
[30 47]
[31 46]
[33 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
