%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGCCGCGCGGCGGGCGGGUUUGGAUUUUAAAUCCCCGCGGCCAAUCAGUGGCGCGCAGGCUUUUGUAACGUUCCCAGCGCCGCGUUUGAAUUCGGGGAGGAGCGGAGCGGUGCGGAGGCUCUGCUCGGAUCGAGGUCUGCAGCGCAGCUUCGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[61.42908096 144.13615417]
[59.98710632 129.20562744]
[67.18356323 116.04466248]
[80.53189850 109.20126343]
[66.53864288 114.60392761]
[52.54538727 120.00659943]
[38.55213165 125.40926361]
[24.55887604 130.81193542]
[10.56562042 136.21459961]
[-3.42763495 141.61726379]
[-17.08307838 147.82441711]
[-30.35450554 154.81507874]
[-38.95845413 168.09222412]
[-53.82497406 167.17802429]
[-67.09640503 174.16867065]
[-80.36782837 181.15931702]
[-93.63925934 188.14997864]
[-106.91068268 195.14062500]
[-110.79914856 200.58589172]
[-116.07083893 202.86965942]
[-120.83503723 202.13369751]
[-134.36753845 208.60449219]
[-147.90005493 215.07528687]
[-161.43257141 221.54606628]
[-174.96507263 228.01686096]
[-188.49758911 234.48765564]
[-195.17257690 249.07615662]
[-210.77429199 252.81324768]
[-223.33444214 242.83215332]
[-223.21795654 226.78952026]
[-210.51419067 216.99188232]
[-194.96838379 220.95513916]
[-181.43586731 214.48435974]
[-167.90336609 208.01356506]
[-154.37084961 201.54277039]
[-140.83833313 195.07197571]
[-127.30582428 188.60119629]
[-113.90133667 181.86920166]
[-100.62990570 174.87855530]
[-87.35848236 167.88789368]
[-74.08705139 160.89724731]
[-60.81562805 153.90658569]
[-53.16094208 141.12945557]
[-37.34515762 141.54364014]
[-24.07373238 134.55299377]
[-37.92078781 128.78593445]
[-43.79977036 114.98601532]
[-38.36574554 101.00490570]
[-24.71048355 94.79734802]
[-10.60333157 99.89521790]
[-4.07075214 113.39801025]
[-8.83030128 127.62400818]
[5.16295481 122.22133636]
[19.15620995 116.81867218]
[33.14946747 111.41600800]
[47.14272308 106.01334381]
[61.13597870 100.61067200]
[75.12923431 95.20800781]
[99.16506195 77.06466675]
[106.15571594 63.79323578]
[113.14636230 50.52180862]
[120.13701630 37.25038147]
[126.99866486 23.91179657]
[133.73065186 10.50730801]
[140.46263123 -2.89718175]
[147.19462585 -16.30167198]
[153.92660522 -29.70616150]
[160.65859985 -43.11064911]
[167.39059448 -56.51514053]
[174.12257385 -69.91963196]
[169.38337708 -84.75801849]
[176.40153503 -98.25617981]
[190.57687378 -102.68283081]
[197.30885315 -116.08731842]
[204.04084778 -129.49180603]
[210.77284241 -142.89630127]
[217.50482178 -156.30078125]
[224.23681641 -169.70527649]
[214.21104431 -182.49060059]
[210.76518250 -198.30903625]
[214.53746033 -213.99307251]
[224.72589111 -226.42465210]
[239.25817871 -233.15499878]
[255.21296692 -232.88688660]
[261.68377686 -246.41940308]
[260.65661621 -262.20724487]
[273.12731934 -270.35159302]
[279.59811401 -283.88409424]
[272.08911133 -297.46328735]
[274.02923584 -312.85861206]
[284.67251587 -324.15020752]
[299.92633057 -326.99627686]
[313.92535400 -320.30242920]
[321.28659058 -306.64257812]
[319.17956543 -291.26922607]
[308.41445923 -280.09375000]
[293.13064575 -277.41333008]
[286.65985107 -263.88079834]
[288.14981079 -249.06091309]
[275.21627808 -239.94860840]
[268.74548340 -226.41609192]
[277.96096802 -216.01162720]
[282.52066040 -202.83607483]
[281.70251465 -188.87442017]
[275.59741211 -176.24348450]
[265.10037231 -166.87100220]
[251.77937317 -162.20140076]
[237.64129639 -162.97329712]
[230.90931702 -149.56880188]
[224.17732239 -136.16430664]
[217.44534302 -122.75981903]
[210.71334839 -109.35533142]
[203.98136902 -95.95084381]
[208.89556885 -81.93705750]
[202.25932312 -68.24710083]
[187.52706909 -63.18764114]
[180.79507446 -49.78315353]
[174.06309509 -36.37866211]
[167.33110046 -22.97417259]
[160.59912109 -9.56968403]
[153.86712646 3.83480597]
[147.13513184 17.23929596]
[140.40315247 30.64378548]
[140.21049500 38.06907654]
[133.40844727 44.24103546]
[126.41779327 57.51246262]
[119.42713928 70.78388977]
[112.43648529 84.05531311]
[124.95765686 75.79576111]
[139.50086975 79.46929932]
[146.59770203 92.68424988]
[141.62773132 106.83696747]
[127.82666779 112.71324921]
[114.18006897 106.48765564]
[123.13744354 118.51950836]
[132.09481812 130.55134583]
[141.05220032 142.58320618]
[150.00958252 154.61505127]
[158.96696472 166.64689636]
[166.64099121 171.69367981]
[167.97868347 179.00003052]
[176.70106506 191.20330811]
[185.42344666 203.40658569]
[194.14582825 215.60987854]
[208.27517700 224.97993469]
[203.18269348 241.15098572]
[186.23387146 240.73411560]
[181.94255066 224.33226013]
[173.22016907 212.12896729]
[164.49778748 199.92568970]
[155.77540588 187.72241211]
[146.93511963 175.60427856]
[137.97773743 163.57243347]
[129.02035522 151.54057312]
[120.06297302 139.50872803]
[111.10559845 127.47688293]
[102.14821625 115.44503784]
[109.79171753 128.35150146]
[108.86254120 143.32269287]
[99.68179321 155.18498230]
[85.42208099 159.83908081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[11 45]
[12 44]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[59 128]
[60 127]
[61 126]
[62 125]
[63 123]
[64 122]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 116]
[73 113]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[84 101]
[85 100]
[87 98]
[88 97]
[134 157]
[135 156]
[136 155]
[137 154]
[138 153]
[139 152]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
