%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCCGCAUGCGCGGGAUCCCGGAUGUGGAUCAAGUUGGUGGGAAGCGUGCGGUGCCGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[126.61238861 162.23678589]
[120.44521332 156.75352478]
[116.73676300 149.30296326]
[116.06903076 140.93690491]
[118.59053040 132.85842896]
[108.76761627 121.52218628]
[98.94470978 110.18593597]
[91.43757629 106.47332764]
[88.93980408 98.06861877]
[79.66741943 86.27781677]
[70.39503479 74.48702240]
[54.94929504 72.47035980]
[45.71374130 60.38072968]
[47.73151016 45.66800690]
[38.45912170 33.87721252]
[23.01338577 31.86054993]
[13.77783298 19.77091599]
[15.79559803 5.05819368]
[6.52321339 -6.73260307]
[-2.74917150 -18.52339935]
[-12.02155685 -30.31419563]
[-21.29394150 -42.10499191]
[-36.92834473 -42.42026520]
[-48.66825485 -52.75025177]
[-50.97044373 -68.21743774]
[-42.74788284 -81.51869965]
[-27.88302231 -86.37358856]
[-13.39459038 -80.48976898]
[-6.12358189 -66.64540100]
[-9.50314522 -51.37737656]
[-0.23075998 -39.58658218]
[9.04162502 -27.79578400]
[18.31400871 -16.00498772]
[27.58639526 -4.21419144]
[42.36009598 -2.70642281]
[51.93157578 9.11903286]
[50.24991989 24.60482597]
[59.52230453 36.39562225]
[74.29600525 37.90338898]
[83.86748505 49.72884750]
[82.18582916 65.21463776]
[91.45821381 77.00543213]
[100.73059845 88.79623413]
[110.28095245 100.36302948]
[120.10386658 111.69927216]
[129.92677307 123.03551483]
[152.50323486 127.64184570]
[158.46386719 149.19873047]
[170.68249512 157.89958191]
[179.83235168 160.46347046]
[183.26214600 167.31658936]
[195.05294800 176.58897400]
[206.84375000 185.86135864]
[218.63453674 195.13374329]
[234.93493652 196.93074036]
[241.28024292 212.05255127]
[231.14297485 224.94314575]
[214.95146179 222.34179688]
[209.36215210 206.92454529]
[197.57135010 197.65216064]
[185.78056335 188.37977600]
[173.98976135 179.10739136]
[161.98164368 170.11822510]
[149.76300049 161.41737366]
[142.41970825 164.69531250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[9 43]
[10 42]
[11 41]
[14 38]
[15 37]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
