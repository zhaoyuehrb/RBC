%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCUGGUGACAUCGCAAAGAAUGUUGCAGAUUUUAUCUUCUUCUACCUCUGUGAGUAGGAGGUGAGGUUCUGAAAGUUCUCCCCAGCU\
) } def
/len { sequence length } bind def

/coor [
[61.74685669 315.16842651]
[46.31113434 313.58157349]
[34.77859116 303.19985962]
[31.58372498 288.01522827]
[37.95502853 273.86651611]
[51.44260406 266.19418335]
[52.97656631 251.27282715]
[54.51052856 236.35147095]
[56.04449081 221.43009949]
[49.64929962 207.97831726]
[58.75729752 195.04173279]
[60.29125977 180.12037659]
[48.54438019 189.44833374]
[33.64518738 191.18443298]
[20.06829643 184.80728149]
[11.89120197 172.23210144]
[11.56969738 157.23554993]
[19.20033836 144.32147217]
[32.49144745 137.36831665]
[47.45135498 138.46427917]
[59.58721542 147.28022766]
[65.25421143 161.16757202]
[71.23023224 147.40940857]
[77.20624542 133.65122986]
[83.18225861 119.89306641]
[75.53569794 108.94808960]
[74.31597900 95.65241241]
[79.84353638 83.49887085]
[90.66625977 75.68022156]
[103.94098663 74.25045776]
[110.38323212 60.70433426]
[116.82548523 47.15821457]
[123.26773834 33.61209106]
[129.47778320 19.95795631]
[135.45379639 6.19978714]
[141.42980957 -7.55838251]
[147.40582275 -21.31655121]
[153.38185120 -35.07472229]
[159.35786438 -48.83288956]
[165.33387756 -62.59106064]
[171.30989075 -76.34922791]
[177.28590393 -90.10739899]
[183.26193237 -103.86557007]
[189.23794556 -117.62374115]
[187.63920593 -133.36396790]
[199.80650330 -141.95501709]
[205.78251648 -155.71318054]
[211.52276611 -169.57136536]
[217.02558899 -183.52554321]
[214.07392883 -199.65687561]
[226.74180603 -210.07115173]
[241.99757385 -204.05505371]
[244.14743042 -187.79743958]
[230.97976685 -178.02273560]
[225.47694397 -164.06855774]
[225.96234131 -156.53378296]
[219.54069519 -149.73716736]
[213.56466675 -135.97898865]
[215.59085083 -121.22284698]
[202.99610901 -111.64772034]
[197.02009583 -97.88954926]
[191.04408264 -84.13138580]
[185.06806946 -70.37321472]
[179.09204102 -56.61504364]
[173.11602783 -42.85687637]
[167.14001465 -29.09870529]
[161.16400146 -15.34053612]
[155.18797302 -1.58236611]
[149.21195984 12.17580318]
[143.23594666 25.93397331]
[143.46382141 33.48093033]
[136.81385803 40.05434418]
[130.37161255 53.60046387]
[123.92935944 67.14658356]
[117.48710632 80.69270325]
[125.50927734 94.72296143]
[123.71212006 110.78451538]
[112.78741455 122.69476318]
[96.94042969 125.86907959]
[90.96441650 139.62725830]
[84.98839569 153.38542175]
[79.01238251 167.14358521]
[75.21261597 181.65434265]
[73.67865753 196.57569885]
[79.96412659 211.09477234]
[70.96585083 222.96406555]
[69.43188477 237.88542175]
[67.89792633 252.80677795]
[66.36396027 267.72814941]
[78.00845337 277.98413086]
[81.36785126 293.13320923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 89]
[7 88]
[8 87]
[9 86]
[11 84]
[12 83]
[22 82]
[23 81]
[24 80]
[25 79]
[30 75]
[31 74]
[32 73]
[33 72]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[46 58]
[47 57]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
