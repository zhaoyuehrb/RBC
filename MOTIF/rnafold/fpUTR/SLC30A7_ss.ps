%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCCGGGCCGGAAGUAAGCGAAUUCCCGGGUGUGUGUCUGUGUCUGUCUGUGUCUCGCAGCGGCGCGCGGCCCCGGACAAGCGCUGGGGAUUCCCGUUUGAGGCGUCACUACUGUCACUGCCAUCACCCCACGGAGCCACUUCUAGAGGGGAGUAGACCCGGCCCUUCGCCGGGCAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[139.78941345 326.71313477]
[152.40867615 318.12725830]
[150.13725281 303.30023193]
[147.86582947 288.47320557]
[145.59442139 273.64617920]
[131.63040161 264.29129028]
[128.68438721 247.40084839]
[139.05712891 233.32745361]
[136.53561401 218.54090881]
[134.01409912 203.75436401]
[131.49258423 188.96781921]
[128.97106934 174.18127441]
[126.44956207 159.39472961]
[123.92804718 144.60818481]
[96.24681854 145.72819519]
[74.90027618 132.60031128]
[65.68443298 112.15521240]
[69.19544220 92.66340637]
[55.84186554 85.83098602]
[42.48828888 78.99856567]
[29.13471222 72.16614532]
[15.78113556 65.33372498]
[2.42755914 58.50130081]
[-12.53936672 66.35842896]
[-29.07745934 63.78001022]
[-40.70905685 51.97614670]
[-42.99769592 35.73080063]
[-56.46476364 29.12488937]
[-69.93183136 22.51897621]
[-83.39889526 15.91306400]
[-99.19622040 16.78213310]
[-107.21535492 4.23053265]
[-120.68242645 -2.37537932]
[-134.14949036 -8.98129177]
[-147.61656189 -15.58720398]
[-161.08363342 -22.19311714]
[-176.88095093 -21.32404900]
[-184.90008545 -33.87564850]
[-198.36715698 -40.48155975]
[-211.83422852 -47.08747101]
[-225.30130005 -53.69338608]
[-238.76835632 -60.29929733]
[-252.23542786 -66.90521240]
[-265.91421509 -59.82024002]
[-280.96606445 -62.12140274]
[-291.65036011 -72.71903992]
[-294.01727295 -87.40017700]
[-307.48434448 -94.00608826]
[-320.95141602 -100.61199951]
[-334.41848755 -107.21791840]
[-341.06494141 -107.15280151]
[-345.99526978 -110.03424835]
[-348.22311401 -114.28112793]
[-361.45938110 -121.33811188]
[-374.69567871 -128.39509583]
[-387.93194580 -135.45207214]
[-401.16821289 -142.50906372]
[-415.60516357 -136.50000000]
[-430.51150513 -141.22599792]
[-438.84893799 -154.45555115]
[-436.68075562 -169.94210815]
[-425.03073120 -180.37335205]
[-409.39965820 -180.82398987]
[-397.16802979 -171.08123779]
[-394.11123657 -155.74533081]
[-380.87496948 -148.68835449]
[-367.63870239 -141.63136292]
[-354.40240479 -134.57438660]
[-341.16613770 -127.51740265]
[-327.81256104 -120.68498230]
[-314.34548950 -114.07907104]
[-300.87841797 -107.47315979]
[-287.41134644 -100.86724854]
[-274.35305786 -107.98196411]
[-259.43280029 -106.01996613]
[-248.39976501 -95.52588654]
[-245.62951660 -80.37227631]
[-232.16244507 -73.76636505]
[-218.69538879 -67.16045380]
[-205.22831726 -60.55453873]
[-191.76124573 -53.94862747]
[-178.29417419 -47.34271622]
[-163.46011353 -48.68428421]
[-154.47772217 -35.66018295]
[-141.01065063 -29.05427170]
[-127.54357910 -22.44836044]
[-114.07651520 -15.84244728]
[-100.60944366 -9.23653507]
[-85.77538300 -10.57810211]
[-76.79298401 2.44599605]
[-63.32592010 9.05190849]
[-49.85884857 15.65782070]
[-36.39178085 22.26373291]
[-25.20826912 14.94978619]
[-11.76298046 14.11578655]
[0.43325999 20.08680725]
[8.14269638 31.39695740]
[9.25998116 45.14772415]
[22.61355782 51.98014450]
[35.96713638 58.81256866]
[49.32071304 65.64498901]
[62.67428970 72.47740936]
[76.02786255 79.30982971]
[100.01235962 58.85663605]
[138.34097290 66.94836426]
[148.49038696 55.90348053]
[158.63980103 44.85859680]
[168.69557190 33.72838974]
[178.65698242 22.51366425]
[182.03681946 7.05768490]
[196.27371216 2.68045807]
[206.23513794 -8.53427029]
[209.00445557 -24.69789886]
[224.47891235 -30.12683105]
[236.73971558 -19.23624611]
[233.17399597 -3.22944427]
[217.44985962 1.42714882]
[207.48844910 12.64187717]
[204.82112122 27.29570198]
[189.87171936 32.47508240]
[179.91029358 43.68981171]
[177.81433105 50.79422379]
[169.68467712 55.00800323]
[159.53527832 66.05288696]
[149.38586426 77.09777832]
[152.10906982 84.08592224]
[166.08543396 78.63972473]
[171.53141785 92.61618805]
[157.55548096 98.06221008]
[160.27867126 105.05035400]
[175.22521973 106.31562042]
[190.17176819 107.58088684]
[205.11830139 108.84615326]
[218.26657104 97.32327271]
[235.34533691 98.83405304]
[245.84475708 111.95922089]
[260.81051636 112.97186279]
[275.77630615 113.98451233]
[290.74209595 114.99715424]
[305.21902466 107.29321289]
[318.98406982 116.20695496]
[317.87698364 132.56869507]
[303.03659058 139.54685974]
[289.72943115 129.96293640]
[274.76367188 128.95028687]
[259.79788208 127.93764496]
[244.83210754 126.92499542]
[236.39724731 136.68255615]
[223.69123840 139.84086609]
[211.30644226 135.02719116]
[203.85304260 123.79269409]
[188.90649414 122.52742767]
[173.95996094 121.26216125]
[159.01341248 119.99689484]
[153.93870544 125.51934052]
[166.44892883 133.79547119]
[179.11451721 141.83181763]
[176.71994019 156.63945007]
[162.16699219 160.27423096]
[153.09118652 148.33175659]
[143.78929138 136.56422424]
[138.71459961 142.08666992]
[141.23611450 156.87321472]
[143.75761414 171.65975952]
[146.27912903 186.44630432]
[148.80064392 201.23284912]
[151.32215881 216.01939392]
[153.84367371 230.80595398]
[165.66683960 237.28514099]
[171.50802612 249.21977234]
[169.43273926 262.14691162]
[160.42144775 271.37475586]
[162.69285583 286.20178223]
[164.96427917 301.02880859]
[167.23570251 315.85583496]
[181.84651184 320.27020264]
[193.08926392 330.59317017]
[198.73170471 344.77505493]
[197.65351868 360.00003052]
[190.06877136 373.24517822]
[177.48342896 381.88070679]
[162.39631653 384.19195557]
[147.80299377 379.72006226]
[136.60098267 369.35293579]
[131.01443481 355.14895630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 175]
[3 174]
[4 173]
[5 172]
[8 168]
[9 167]
[10 166]
[11 165]
[12 164]
[13 163]
[14 162]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[27 93]
[28 92]
[29 91]
[30 90]
[32 88]
[33 87]
[34 86]
[35 85]
[36 84]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[47 73]
[48 72]
[49 71]
[50 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[105 125]
[106 124]
[107 123]
[108 121]
[109 120]
[111 118]
[112 117]
[130 154]
[131 153]
[132 152]
[133 151]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
