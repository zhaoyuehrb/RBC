%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCAAACACACACAUCUCACUCAUCCUUCUACUCGUGACGCUUCCCAGCUCUGGCUUUUUGAAAGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[99.82138062 156.31965637]
[92.06130981 155.75762939]
[84.45275116 154.13150024]
[77.14090729 151.47230530]
[70.26530457 147.83079529]
[63.95717621 143.27645874]
[58.33690262 137.89620972]
[53.51174545 131.79273987]
[49.57378769 125.08252716]
[46.59818268 117.89363098]
[44.64171600 110.36324310]
[43.74173355 102.63507843]
[43.91540146 94.85662842]
[45.15941238 87.17633820]
[47.45002365 79.74077606]
[50.74351883 72.69184875]
[54.97704315 66.16407776]
[60.06980133 60.28205109]
[50.93838120 48.38174820]
[41.80695724 36.48144913]
[32.67553711 24.58115005]
[18.00165749 28.54923248]
[2.92688203 26.59485245]
[-10.24999428 19.01604271]
[-19.51959419 6.96851254]
[-23.46836853 -7.71057510]
[-21.49416161 -22.78276634]
[-13.89802361 -35.94966125]
[-1.83831108 -45.20340347]
[12.84595776 -49.13286591]
[27.91553879 -47.13883591]
[41.07242966 -39.52538300]
[50.31030273 -27.45350647]
[54.22044373 -12.76408195]
[52.20658875 2.30286312]
[44.57583618 15.44972801]
[53.70726013 27.35002708]
[62.83868027 39.25032806]
[71.97010040 51.15062714]
[104.90860748 43.89436722]
[136.08666992 56.76010132]
[147.14582825 46.62624741]
[158.20498657 36.49239349]
[162.61758423 20.69805717]
[178.56726074 16.88495064]
[189.64636230 28.97566986]
[184.45765686 44.53232193]
[168.33883667 47.55155563]
[157.27967834 57.68540955]
[146.22052002 67.81925964]
[152.06724548 78.53050995]
[155.46952820 90.24970245]
[156.26763916 102.42665100]
[154.42413330 114.48967743]
[150.02552795 125.87243652]
[162.31280518 134.47608948]
[174.60008240 143.07972717]
[186.88735962 151.68338013]
[199.17465210 160.28703308]
[215.61734009 164.41911316]
[216.19853210 181.36309814]
[200.07762146 186.61213684]
[190.57099915 172.57431030]
[178.28372192 163.97065735]
[165.99644470 155.36701965]
[153.70915222 146.76336670]
[141.42187500 138.15971375]
[135.76759338 143.50421143]
[129.43069458 148.01843262]
[122.53214264 151.61627197]
[115.20357513 154.22903442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 39]
[19 38]
[20 37]
[21 36]
[41 50]
[42 49]
[43 48]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
