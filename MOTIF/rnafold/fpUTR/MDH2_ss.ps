%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGGAGGCGAGCGCGACCGGAAGUCCGGUCACUCUCGCGAGGCCCCAGAGAGCAGGCGCUGGGCAGUGUGGAGGUCGUUGGAGUCACUUCCCCGUCACCAGCUCCUGUGCCUGCCAGUCGGUGCCCCUCCCGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[79.97584534 230.15736389]
[69.89899445 218.47572327]
[67.76001740 203.19735718]
[74.24143982 189.19755554]
[87.27507019 180.94357300]
[87.27507019 165.94357300]
[87.27507019 150.94357300]
[87.27507019 135.94357300]
[74.39591980 128.25413513]
[61.19145203 135.37045288]
[47.98698425 142.48677063]
[34.78251266 149.60308838]
[21.57804489 156.71940613]
[19.38959312 171.96791077]
[8.76614189 182.87643433]
[-6.06814194 185.40783691]
[-19.38907242 178.79792786]
[-32.59354019 185.91424561]
[-45.79800797 193.03056335]
[-59.00247955 200.14689636]
[-72.20694733 207.26321411]
[-85.41141510 214.37953186]
[-93.55826569 228.61192322]
[-109.95606995 228.40214539]
[-117.73617554 213.96600342]
[-108.89507294 200.15417480]
[-92.52773285 201.17506409]
[-79.32326508 194.05874634]
[-66.11879730 186.94241333]
[-52.91432953 179.82609558]
[-39.70986176 172.70977783]
[-26.50539207 165.59346008]
[-24.70191002 150.83251953]
[-14.43090439 139.83386230]
[0.52187908 136.95851135]
[14.46172619 143.51493835]
[27.66619492 136.39862061]
[40.87066269 129.28230286]
[54.07513046 122.16598511]
[67.27960205 115.04966736]
[68.13327789 88.41054535]
[86.39466858 71.25522614]
[109.84239960 71.98331451]
[118.22725677 59.54570770]
[126.61211395 47.10809708]
[127.91071320 31.34027290]
[141.44070435 25.11222649]
[149.82556152 12.67461681]
[152.05485535 3.73468900]
[158.53372192 0.05865967]
[167.18978882 -12.19175625]
[163.89616394 -29.33456802]
[173.79335022 -43.30333328]
[190.39244080 -45.78008270]
[198.77729797 -58.21769333]
[207.16215515 -70.65530396]
[215.54701233 -83.09291077]
[223.93186951 -95.53052521]
[232.31672668 -107.96813202]
[240.70159912 -120.40574646]
[249.08645630 -132.84335327]
[250.38504028 -148.61117554]
[263.91503906 -154.83921814]
[272.29989624 -167.27684021]
[280.54763794 -179.80580139]
[288.65722656 -192.42460632]
[289.07238770 -210.79821777]
[304.90521240 -218.29031372]
[312.73565674 -231.08421326]
[320.56610107 -243.87812805]
[328.25555420 -256.75726318]
[335.80307007 -269.72009277]
[343.35058594 -282.68292236]
[344.98623657 -291.75027466]
[351.20895386 -295.84503174]
[359.03939819 -308.63891602]
[355.55899048 -323.82196045]
[363.68243408 -336.68524170]
[378.17855835 -339.90972900]
[386.00903320 -352.70364380]
[380.86779785 -367.47189331]
[386.47052002 -382.07135010]
[400.17178345 -389.60852051]
[415.50225830 -386.52465820]
[425.22338867 -374.27581787]
[424.74511719 -358.64553833]
[414.29327393 -347.01397705]
[398.80291748 -344.87319946]
[390.97247314 -332.07928467]
[394.69635010 -317.70330811]
[386.93740845 -304.61691284]
[371.83331299 -300.80847168]
[364.00286865 -288.01455688]
[356.31341553 -275.13540649]
[348.76589966 -262.17257690]
[341.21838379 -249.20974731]
[340.56597900 -241.78929138]
[333.36001587 -236.04766846]
[325.52957153 -223.25376892]
[317.69909668 -210.45985413]
[320.22039795 -198.57948303]
[313.73626709 -187.83802795]
[301.27603149 -184.31498718]
[293.16644287 -171.69618225]
[292.18872070 -164.31153870]
[284.73751831 -158.89198303]
[276.35266113 -146.45436096]
[275.65380859 -131.57617188]
[261.52404785 -124.45849609]
[253.13920593 -112.02088928]
[244.75434875 -99.58327484]
[236.36949158 -87.14566803]
[227.98463440 -74.70805359]
[219.59977722 -62.27044296]
[211.21492004 -49.83283234]
[202.83006287 -37.39522171]
[207.04168701 -25.17027473]
[203.36521912 -12.57054138]
[192.93463135 -4.28616381]
[179.44020081 -3.53569961]
[170.78414917 8.71471596]
[162.26316833 21.05947495]
[153.87831116 33.49708557]
[153.17945862 48.37528610]
[139.04972839 55.49295425]
[130.66487122 67.93056488]
[122.28000641 80.36817169]
[127.53517151 86.91695404]
[130.85142517 94.86830139]
[131.85754395 103.64462280]
[130.35510254 112.57153320]
[126.34316254 120.92967987]
[120.02730560 128.01261902]
[111.81185913 133.18605042]
[102.27507019 135.94357300]
[102.27507019 150.94357300]
[102.27507019 165.94357300]
[102.27507019 180.94357300]
[115.30869293 189.19755554]
[121.79011536 203.19735718]
[119.65113831 218.47572327]
[109.57428741 230.15736389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 138]
[6 137]
[7 136]
[8 135]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[43 127]
[44 126]
[45 125]
[47 123]
[48 122]
[50 121]
[51 120]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[61 109]
[63 107]
[64 106]
[65 104]
[66 103]
[68 100]
[69 99]
[70 98]
[71 96]
[72 95]
[73 94]
[75 93]
[76 92]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
