%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGUCGGCGCGCAGUUCUCCCGCCCGUUUCAGCGGCGCAGCUUCUGUAGUUGGGCUACUGGAGGGGUCGCUCAGAAACCUCAUACUUCUCGGGUCAGGGAAGGUUUGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[47.56410599 244.73564148]
[31.35650253 246.92269897]
[24.69182777 260.36077881]
[18.02715111 273.79885864]
[11.36247635 287.23696899]
[4.69780064 300.67504883]
[6.27286291 316.99838257]
[-7.23138046 326.30255127]
[-21.92292213 319.01620483]
[-22.68836212 302.63491821]
[-8.74028301 294.01037598]
[-2.07560754 280.57226562]
[4.58906794 267.13418579]
[11.25374413 253.69610596]
[17.91841888 240.25802612]
[10.63078594 228.98423767]
[9.89332294 215.47149658]
[16.00819778 203.27725220]
[27.45934296 195.66543579]
[41.28684998 194.73307800]
[48.31297684 181.48040771]
[55.33910370 168.22772217]
[62.36523056 154.97503662]
[69.39135742 141.72236633]
[76.41748047 128.46968079]
[69.26643372 121.55527496]
[64.12628937 112.86214447]
[61.43371582 102.97108459]
[61.45869064 92.56819153]
[64.27969360 82.39731598]
[69.77246857 73.20684814]
[77.61339569 65.69475555]
[87.29778290 60.45573807]
[79.56447601 47.60288239]
[71.83116913 34.75002289]
[58.08667755 26.91424179]
[58.15484619 12.01979256]
[50.42153549 -0.83306462]
[42.68822861 -13.68592262]
[28.94373512 -21.52170372]
[29.01190186 -36.41615295]
[21.27859497 -49.26901245]
[13.54528713 -62.12186813]
[5.81197882 -74.97472382]
[-1.92132902 -87.82758331]
[-17.08049774 -93.07917023]
[-22.29016495 -108.25279236]
[-13.55391598 -121.70855713]
[2.42654395 -123.12434387]
[13.39237404 -111.41408539]
[10.93152905 -95.56089020]
[18.66483688 -82.70803070]
[26.39814377 -69.85517883]
[34.13145065 -57.00231934]
[41.86476135 -44.14945984]
[55.05611420 -37.23300171]
[55.54108810 -21.41922951]
[63.27439499 -8.56637287]
[71.00770569 4.28648520]
[84.19905853 11.20294476]
[84.68402863 27.01671600]
[92.41733551 39.86957550]
[100.15064240 52.72243118]
[114.95304108 55.14916229]
[126.38547516 45.43836594]
[137.81790161 35.72757339]
[149.25033569 26.01677895]
[150.68260193 10.50593090]
[162.41503906 0.82066429]
[177.19343567 2.28169441]
[188.62586975 -7.42910004]
[191.35578918 -23.23818207]
[205.48669434 -30.83403778]
[220.17855835 -24.38977623]
[224.16105652 -8.84888363]
[214.37913513 3.86699724]
[198.33665466 4.00333071]
[186.90423584 13.71412563]
[185.95513916 28.53420639]
[174.49935913 38.54519272]
[158.96113586 37.44921112]
[147.52870178 47.16000366]
[136.09626770 56.87079620]
[124.66383362 66.58158875]
[132.78822327 76.40954590]
[137.35195923 87.93782043]
[138.10980225 99.96028137]
[135.20306396 111.28725433]
[148.26062012 118.66967773]
[161.31817627 126.05210114]
[174.37573242 133.43452454]
[187.43328857 140.81695557]
[200.49084473 148.19937134]
[215.65010071 143.73031616]
[229.48927307 151.36268616]
[233.79780579 166.56834412]
[226.01954651 180.32604980]
[210.76918030 184.47357178]
[197.09449768 176.55029297]
[193.10842896 161.25692749]
[180.05087280 153.87451172]
[166.99331665 146.49208069]
[153.93576050 139.10966492]
[140.87820435 131.72723389]
[127.82064056 124.34481049]
[119.89167023 131.16053772]
[110.37151337 135.48365784]
[100.02170563 136.96832275]
[89.67016602 135.49580383]
[82.64403534 148.74848938]
[75.61791229 162.00117493]
[68.59178162 175.25384521]
[61.56565475 188.50653076]
[54.53952789 201.75921631]
[62.17403793 216.78102112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[33 63]
[34 62]
[35 61]
[37 59]
[38 58]
[39 57]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[64 84]
[65 83]
[66 82]
[67 81]
[70 78]
[71 77]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
