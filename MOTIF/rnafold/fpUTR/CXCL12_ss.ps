%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:50:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCACUUUCACUCUCCGUCAGCCGCAUUGCCCGCUCGGCGUCCGGCCCCCGACCCGCGCUCGUCCGCCCGCCCGCCCGCCCGCCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[128.81028748 142.16143799]
[121.36992645 146.37829590]
[113.33015442 149.29429626]
[104.91648102 150.82763672]
[96.36490631 150.93531799]
[87.91529846 149.61431885]
[79.80464935 146.90168762]
[72.26045990 142.87350464]
[65.49433136 137.64277649]
[59.69605255 131.35621643]
[55.02825928 124.19013214]
[51.62187195 116.34555054]
[49.57244110 108.04248810]
[48.93745041 99.51384735]
[49.73471069 90.99884033]
[51.94185638 82.73630524]
[55.49698639 74.95799255]
[60.30037689 67.88208771]
[50.15096664 56.83720398]
[34.83320618 58.47195435]
[21.64414787 50.86260986]
[15.53697300 37.10883331]
[18.66222954 22.57023621]
[8.51282120 11.52535057]
[-1.63658798 0.48046502]
[-11.78599739 -10.56442070]
[-25.34358025 -9.59524345]
[-36.78242874 -16.56763268]
[-41.97903442 -28.70219612]
[-39.21511459 -41.40970230]
[-48.98570251 -52.79107285]
[-58.75628662 -64.17244720]
[-68.52687836 -75.55381775]
[-84.35005188 -78.20082855]
[-92.01987457 -92.29173279]
[-85.65270996 -107.01717377]
[-70.13290405 -111.08106995]
[-57.36592484 -101.36594391]
[-57.14550400 -85.32440186]
[-47.37491608 -73.94303131]
[-37.60432816 -62.56166077]
[-27.83374214 -51.18028641]
[-11.11711693 -50.68518448]
[0.36865592 -38.07231903]
[-0.74111164 -20.71382904]
[9.40829754 -9.66894436]
[19.55770683 1.37594140]
[29.70711517 12.42082691]
[44.45751572 10.53305340]
[57.64712906 17.77861023]
[64.11684418 31.56251907]
[61.19585037 46.68779755]
[71.34526062 57.73268127]
[93.49407196 49.35127640]
[117.04209900 51.86283112]
[136.92491150 64.72718048]
[148.86631775 85.17761230]
[150.29811096 108.81587982]
[164.53231812 113.54740906]
[178.76652527 118.27893829]
[193.00073242 123.01046753]
[207.00201416 116.18389893]
[221.37011719 121.18511200]
[227.79193115 134.57525635]
[242.02612305 139.30679321]
[256.02740479 132.48020935]
[270.39550781 137.48143005]
[276.81732178 150.87156677]
[291.05151367 155.60310364]
[302.48114014 145.34349060]
[317.51257324 142.18891907]
[332.10247803 146.98796082]
[342.32620239 158.44966125]
[345.43365479 173.49092102]
[340.58889771 188.06570435]
[329.09518433 198.25344849]
[314.04428101 201.31373596]
[299.48477173 196.42333984]
[289.33306885 184.89775085]
[286.32000732 169.83731079]
[272.08578491 165.10577393]
[258.92572021 171.98680115]
[244.42282104 167.39112854]
[237.29460144 153.54100037]
[223.06039429 148.80946350]
[209.90032959 155.69049072]
[195.39743042 151.09481812]
[188.26921082 137.24467468]
[174.03500366 132.51315308]
[159.80079651 127.78161621]
[145.56658936 123.05008698]
[141.08071899 130.33142090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 53]
[19 52]
[23 48]
[24 47]
[25 46]
[26 45]
[30 42]
[31 41]
[32 40]
[33 39]
[58 91]
[59 90]
[60 89]
[61 88]
[64 85]
[65 84]
[68 81]
[69 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
