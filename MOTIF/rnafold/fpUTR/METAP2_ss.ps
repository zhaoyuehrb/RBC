%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCCUCCGCCGUCCCAGCAUUCCCUGCGUCCCUACCAUCGAGAGCAGCUUCCGGCGUGGCUGGUGUAGGCGGGUGGAGAAGGAUCGGGGCCCUCGCCGCUCUGUCUCAUUCCCUCGCGCUCUCUCGGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[112.74280548 204.84342957]
[99.30104828 212.00157166]
[84.10945129 213.06712341]
[69.80006409 207.85546875]
[58.85206604 197.26957703]
[53.16226578 183.14349365]
[53.71645355 167.92466736]
[60.41861725 154.24984741]
[72.10756683 144.48826599]
[86.75811768 140.33119202]
[88.84571075 125.47716522]
[90.93330383 110.62314606]
[84.86567688 106.21475983]
[76.04890442 118.35001373]
[67.23191833 130.48512268]
[55.09695816 121.66793823]
[63.91364670 109.53323364]
[72.73042297 97.39797974]
[66.66279602 92.98959351]
[53.18088531 99.56515503]
[39.69897461 106.14072418]
[33.13735580 120.78055573]
[17.56509209 124.63855743]
[4.92789412 114.75520325]
[4.91993761 98.71215057]
[17.54732704 88.81626129]
[33.12340927 92.65881348]
[46.60531998 86.08324432]
[60.08723068 79.50768280]
[45.10324478 78.81471252]
[39.20789337 65.02178192]
[39.48418427 50.02432632]
[45.88356018 36.45790100]
[57.28144073 26.70657349]
[71.67483521 22.48398399]
[86.53433990 24.53218269]
[99.24864197 32.49123001]
[107.58341980 44.96245956]
[110.07396698 59.75425339]
[106.28135681 74.26969147]
[101.97460175 88.63812256]
[112.64273071 78.09340668]
[123.31085968 67.54869080]
[133.97898865 57.00397873]
[144.64710999 46.45926285]
[155.31524658 35.91454697]
[159.26754761 27.57545280]
[166.35643005 25.25219536]
[177.26702881 14.95857048]
[188.17764282 4.66494560]
[182.23127747 1.84229374]
[176.95623779 -3.15850782]
[172.98190308 -10.14113808]
[167.20135498 -23.98257446]
[161.42082214 -37.82401276]
[155.64028931 -51.66544724]
[149.85974121 -65.50688171]
[138.17649841 -77.79256439]
[146.74780273 -92.42024994]
[163.17660522 -88.23325348]
[163.70118713 -71.28742218]
[169.48171997 -57.44598770]
[175.26225281 -43.60454941]
[181.04280090 -29.76311302]
[186.82333374 -15.92167664]
[185.87287903 -30.89153481]
[196.28405762 -41.69002151]
[211.27862549 -41.28673553]
[221.09431458 -29.94423676]
[219.34056091 -15.04711056]
[207.15959167 -6.29429245]
[221.52943420 -10.59634113]
[235.89927673 -14.89838886]
[250.26911926 -19.20043755]
[264.63897705 -23.50248718]
[272.04360962 -29.00997353]
[279.39343262 -27.73325920]
[293.85949707 -31.69977188]
[308.32553101 -35.66628647]
[322.79159546 -39.63279724]
[330.64752197 -53.08352280]
[345.37466431 -56.90005493]
[358.14947510 -49.32773209]
[372.61553955 -53.29424286]
[387.08157349 -57.26075745]
[394.61239624 -62.59445190]
[401.93051147 -61.14706421]
[416.48492432 -64.77589417]
[431.03936768 -68.40471649]
[445.59381104 -72.03354645]
[460.14825439 -75.66237640]
[474.70266724 -79.29120636]
[481.39465332 -93.42454529]
[495.62725830 -99.90277100]
[510.68026733 -95.66706085]
[519.44610596 -82.71739197]
[517.78582764 -67.16819763]
[506.48336792 -56.36132812]
[490.87539673 -55.39946747]
[478.33151245 -64.73677063]
[463.77706909 -61.10794067]
[449.22262573 -57.47911072]
[434.66821289 -53.85028458]
[420.11376953 -50.22145462]
[405.55932617 -46.59262848]
[391.04809570 -42.79470062]
[376.58203125 -38.82818604]
[362.11599731 -34.86167526]
[354.98995972 -21.83265495]
[340.37582397 -17.60397148]
[326.75811768 -25.16674042]
[312.29205322 -21.20022964]
[297.82598877 -17.23371696]
[283.35995483 -13.26720428]
[268.94100952 -9.13264370]
[254.57116699 -4.83059502]
[240.20132446 -0.52854657]
[225.83148193 3.77350187]
[211.46163940 8.07555008]
[198.47126770 15.57555008]
[187.56065369 25.86917496]
[176.65005493 36.16279984]
[165.85995483 46.58267593]
[155.19183350 57.12739182]
[144.52369690 67.67210388]
[133.85557556 78.21681976]
[123.18744659 88.76153564]
[112.51931763 99.30625153]
[105.78733063 112.71074677]
[103.69972992 127.56476593]
[101.61213684 142.41879272]
[114.54930115 150.45306396]
[123.09477997 163.05841064]
[125.76802063 178.05085754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 131]
[11 130]
[12 129]
[19 29]
[20 28]
[21 27]
[41 128]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[48 122]
[49 121]
[50 120]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[71 119]
[72 118]
[73 117]
[74 116]
[75 115]
[77 114]
[78 113]
[79 112]
[80 111]
[83 108]
[84 107]
[85 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
