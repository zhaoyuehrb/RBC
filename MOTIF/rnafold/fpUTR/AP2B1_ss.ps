%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGAGUUUCCUGCCCACCAUCUUUGUCCCUGGCAAAGUGGGUUUUGCGCAGUGGCUUAGACCUAGAAAAGAAUCGUGACGGGCAGGAAACCAUUACACCACCACCUGGGCUGUGCUCUCCGGCUCCCGCCGCCACCCCCGCCCUCGCCUUCGCCUCCGCCUCCGGUGCACAUUAAAGAUCCAAAGUC\
) } def
/len { sequence length } bind def

/coor [
[-10.29341030 165.49850464]
[-15.76644230 155.25234985]
[-20.29012299 144.55308533]
[-23.82735634 133.48846436]
[-26.34913445 122.14920807]
[-27.83477592 110.62832642]
[-28.27209854 99.02027893]
[-43.23930359 98.02892303]
[-58.20650864 97.03755951]
[-73.17371368 96.04620361]
[-88.14091492 95.05484772]
[-103.10812378 94.06348419]
[-118.07532501 93.07212830]
[-133.04252625 92.08077240]
[-148.00973511 91.08940887]
[-162.97694397 90.09805298]
[-177.94413757 89.10668945]
[-189.77294922 99.24163055]
[-204.93769836 98.02304077]
[-214.52691650 86.68361664]
[-229.49412537 85.69226074]
[-244.46133423 84.70089722]
[-259.03228760 88.26284027]
[-271.85418701 96.04738617]
[-284.67605591 103.83193207]
[-297.49795532 111.61647034]
[-310.31985474 119.40101624]
[-323.14172363 127.18556213]
[-335.96362305 134.97010803]
[-346.36492920 148.35850525]
[-362.10946655 142.06994629]
[-360.42520142 125.19987488]
[-343.74816895 122.14821625]
[-330.92626953 114.36367035]
[-318.10440063 106.57912445]
[-305.28250122 98.79457855]
[-292.46060181 91.01004028]
[-279.63870239 83.22549438]
[-266.81683350 75.44094849]
[-269.53002930 60.68837357]
[-284.28262329 57.97516632]
[-299.03518677 55.26195908]
[-313.78775024 52.54875183]
[-328.54034424 49.83554459]
[-343.29290771 47.12233353]
[-358.04550171 44.40912628]
[-375.23657227 50.98500824]
[-388.15072632 39.11388779]
[-402.94613647 36.64496994]
[-415.66119385 46.03129959]
[-431.27655029 43.59495926]
[-440.52792358 30.78138542]
[-437.92663574 15.19264507]
[-425.01596069 6.07726288]
[-409.45559692 8.84323120]
[-400.47723389 21.84955215]
[-385.68179321 24.31847000]
[-375.64703369 17.54331207]
[-363.29083252 19.49152756]
[-355.33227539 29.65655136]
[-340.57971191 32.36975861]
[-325.82711792 35.08296585]
[-311.07455444 37.79617691]
[-296.32199097 40.50938416]
[-281.56939697 43.22259140]
[-266.81683350 45.93579865]
[-266.72082520 30.93610573]
[-259.81713867 17.61923981]
[-247.61462402 8.89578342]
[-232.78031921 6.67236423]
[-218.55647278 11.43494129]
[-208.05189514 22.14258957]
[-203.56248474 36.45500565]
[-206.06948853 51.24402237]
[-215.02496338 63.27729416]
[-228.47155762 69.92478943]
[-243.46997070 69.73369598]
[-228.50276184 70.72505188]
[-213.53556824 71.71641541]
[-202.53453064 61.74079514]
[-187.34153748 62.53295898]
[-176.95278931 74.13948822]
[-161.98558044 75.13084412]
[-147.01837158 76.12220764]
[-132.05117798 77.11356354]
[-117.08396912 78.10491943]
[-102.11676025 79.09628296]
[-87.14955902 80.08763885]
[-72.18235016 81.07900238]
[-57.21514893 82.07035828]
[-42.24794388 83.06171417]
[-27.28073883 84.05307770]
[-23.67919540 65.96842957]
[-17.52190208 48.58702850]
[-8.93609333 32.26803970]
[1.90080786 17.34868622]
[14.76486492 4.13727045]
[29.39025116 -7.09320450]
[45.47474289 -16.11066818]
[62.68596268 -22.72878075]
[80.66825104 -26.81078339]
[99.05001831 -28.27232170]
[117.45141602 -27.08319855]
[135.49218750 -23.26798248]
[152.79954529 -16.90551376]
[169.01583862 -8.12726784]
[183.80595398 2.88535690]
[196.86427307 15.90479279]
[207.92095947 30.66200066]
[220.99322510 23.30564880]
[234.06549072 15.94929600]
[247.13774109 8.59294319]
[244.03601074 -5.47576094]
[245.02662659 -19.83226395]
[250.02021790 -33.31174850]
[258.60296631 -44.82308960]
[270.07098389 -53.43718338]
[283.48785400 -58.46193314]
[297.76132202 -59.49785233]
[311.73202515 -56.46980286]
[324.26773071 -49.63237762]
[334.35510254 -39.54851532]
[347.54721069 -46.68772507]
[360.73931885 -53.82693481]
[373.93142700 -60.96614456]
[382.05358887 -75.21264648]
[398.45172119 -75.03131104]
[406.25686646 -60.60869217]
[397.43972778 -46.78153992]
[381.07064819 -47.77404022]
[367.87854004 -40.63483047]
[354.68643188 -33.49561691]
[341.49432373 -26.35640717]
[344.48931885 -10.99090195]
[342.58993530 4.56768274]
[335.96994019 18.79660988]
[325.26580811 30.29954720]
[311.51531982 37.94359207]
[296.05715942 40.97084427]
[280.40051270 39.07353592]
[266.07766724 32.42526627]
[254.49409485 21.66520691]
[241.42182922 29.02155876]
[228.34957886 36.37791061]
[215.27731323 43.73426437]
[220.99789429 57.40655136]
[225.10324097 71.64742279]
[227.53857422 86.26677704]
[228.27137756 101.06946564]
[227.29187012 115.85787201]
[224.61311340 130.43458557]
[220.27087402 144.60502625]
[214.32312012 158.18002319]
[206.84924316 170.97837830]
[218.83706665 179.99459839]
[231.70588684 178.96530151]
[241.50787354 186.73657227]
[243.31959534 198.70808411]
[255.15669250 207.92126465]
[266.99380493 217.13446045]
[283.30300903 218.84976196]
[289.72399902 233.93957520]
[279.65142822 246.88081360]
[263.44708252 244.36062622]
[257.78060913 228.97157288]
[245.94351196 219.75837708]
[234.10639954 210.54518127]
[216.62602234 209.08403015]
[209.82084656 191.98240662]
[197.83302307 182.96620178]
[189.92642212 191.47639465]
[181.28236389 199.23643494]
[171.97174072 206.18267822]
[162.07090759 212.25814819]
[151.66105652 217.41305542]
[140.82756042 221.60510254]
[129.65925598 224.79991150]
[118.24772644 226.97129822]
[106.68655396 228.10145569]
[95.07054901 228.18109131]
[83.49496460 227.20956421]
[72.05473328 225.19485474]
[60.84366989 222.15348816]
[49.95371246 218.11036682]
[39.47415924 213.09869385]
[29.49095726 207.15953064]
[20.08596802 200.34161377]
[11.33631897 192.70082092]
[3.31376410 184.29983521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[20 79]
[21 78]
[22 77]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[48 57]
[49 56]
[109 145]
[110 144]
[111 143]
[112 142]
[122 133]
[123 132]
[124 131]
[125 130]
[154 170]
[155 169]
[158 167]
[159 166]
[160 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
