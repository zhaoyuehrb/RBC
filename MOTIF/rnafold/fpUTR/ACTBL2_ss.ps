%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGAAAGCAUUUCUGGAGUGUUUUAGGCCUGUUCACUUUCUCUUACUCACUGUCUAUUCACUUGUCCUGUUCACUCGUCUGGAAGAUCUCAGCCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[83.21356201 324.90274048]
[68.61804199 329.36743164]
[53.53207397 327.04876709]
[40.95098114 318.40707397]
[33.37275314 305.15817261]
[32.30205154 289.93264771]
[37.95146561 275.75354004]
[49.19929886 265.43612671]
[63.81228256 261.02893066]
[66.09099579 246.20303345]
[55.71636581 237.65164185]
[50.92412186 224.97366333]
[53.08246613 211.48294067]
[61.72748947 200.76347351]
[74.65763092 195.71736145]
[77.38741302 180.96784973]
[80.11719513 166.21832275]
[82.84698486 151.46881104]
[77.55506897 137.54598999]
[87.67459869 125.38433838]
[90.40438080 110.63482666]
[85.91524506 97.39324951]
[94.84609985 86.63539124]
[97.57588959 71.88587189]
[100.30567169 57.13635635]
[103.03545380 42.38683701]
[105.76523590 27.63732147]
[108.49502563 12.88780308]
[111.22480774 -1.86171508]
[113.95458984 -16.61123276]
[105.26802826 -29.54109955]
[108.24653625 -44.46032333]
[120.62671661 -52.66194534]
[123.35649872 -67.41146088]
[114.66994476 -80.34133148]
[117.64844513 -95.26055145]
[130.02862549 -103.46217346]
[132.75840759 -118.21169281]
[118.71942902 -123.61738586]
[105.91290283 -131.51089478]
[94.77501678 -141.62338257]
[85.68513489 -153.61039734]
[78.95284271 -167.06369019]
[74.80744934 -181.52502441]
[73.39013672 -196.50186157]
[74.74918365 -211.48411560]
[78.83829498 -225.96147156]
[85.51821136 -239.44084167]
[94.56140137 -251.46311951]
[105.65986633 -261.61883545]
[118.43559265 -269.56210327]
[132.45344543 -275.02236938]
[147.23597717 -277.81365967]
[162.27972412 -277.84088135]
[177.07226562 -275.10311890]
[191.10978699 -269.69366455]
[203.91418457 -261.79669189]
[215.04934692 -251.68121338]
[224.13600159 -239.69174194]
[230.86465454 -226.23663330]
[235.00616455 -211.77418518]
[236.41943359 -196.79695129]
[235.05635071 -181.81507874]
[230.96333313 -167.33882141]
[224.27978516 -153.86125183]
[215.23335266 -141.84141541]
[204.13215637 -131.68867493]
[191.35427856 -123.74885559]
[177.33496094 -118.29238129]
[162.55166626 -115.50508118]
[147.50793457 -115.48191071]
[144.77815247 -100.73239136]
[153.40298462 -88.64323425]
[150.84471130 -73.64624023]
[138.10601807 -64.68167877]
[135.37623596 -49.93215942]
[144.00108337 -37.84300613]
[141.44281006 -22.84601212]
[128.70410156 -13.88144875]
[125.97432709 0.86806893]
[123.24453735 15.61758709]
[120.51475525 30.36710548]
[117.78497314 45.11662292]
[115.05519104 59.86614227]
[112.32540131 74.61566162]
[109.59561920 89.36517334]
[114.08475494 102.60675049]
[105.15390015 113.36460876]
[102.42411041 128.11412048]
[107.52077484 143.09193420]
[97.59650421 154.19859314]
[94.86671448 168.94810486]
[92.13693237 183.69763184]
[89.40715027 198.44714355]
[101.18684387 210.47096252]
[103.51839447 226.97448730]
[95.68724823 241.50028992]
[80.91690063 248.48175049]
[78.63819122 263.30764771]
[91.25321198 271.89974976]
[98.88355255 285.11868286]
[100.01420593 300.33987427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 99]
[10 98]
[15 94]
[16 93]
[17 92]
[18 91]
[20 89]
[21 88]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[29 80]
[30 79]
[33 76]
[34 75]
[37 72]
[38 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
