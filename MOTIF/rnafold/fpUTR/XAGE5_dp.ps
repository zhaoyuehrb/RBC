%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:45 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (XAGE5)
} def

/sequence { (\
UGGAAGUGCUCAAGUGUGGUAUACACUCAGGUGCAUUUUUCCAAUCACAAUAUUCUGACUGAAAU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 43 0.873833492 ubox
1 47 0.009174713 ubox
1 49 0.008089068 ubox
1 57 0.004259171 ubox
2 37 0.003201048 ubox
2 38 0.027418908 ubox
2 39 0.035113943 ubox
2 40 0.152940858 ubox
2 41 0.075496714 ubox
2 42 0.970715835 ubox
2 46 0.009594846 ubox
2 48 0.008393627 ubox
2 56 0.006706964 ubox
3 36 0.003391479 ubox
3 37 0.037755411 ubox
3 38 0.046539902 ubox
3 39 0.201822017 ubox
3 40 0.070303728 ubox
3 41 0.970416819 ubox
3 45 0.005769251 ubox
3 46 0.005349189 ubox
3 55 0.006917756 ubox
4 36 0.040954225 ubox
4 37 0.055383582 ubox
4 38 0.272807581 ubox
4 39 0.098117720 ubox
4 40 0.944121627 ubox
4 45 0.004943909 ubox
4 54 0.006815472 ubox
5 36 0.082191872 ubox
5 37 0.490246700 ubox
5 38 0.104949796 ubox
5 39 0.806047938 ubox
5 40 0.012557705 ubox
5 53 0.006229963 ubox
6 34 0.565422704 ubox
6 36 0.746716863 ubox
6 37 0.074789376 ubox
6 38 0.288302570 ubox
6 39 0.006248009 ubox
7 21 0.003207706 ubox
7 33 0.569925177 ubox
7 35 0.813637671 ubox
8 20 0.003259174 ubox
8 32 0.572119893 ubox
8 34 0.818995372 ubox
9 19 0.003267643 ubox
9 30 0.016306356 ubox
9 31 0.575032909 ubox
9 33 0.817411762 ubox
10 29 0.026746752 ubox
10 30 0.574480581 ubox
10 31 0.612970115 ubox
11 30 0.644720085 ubox
11 33 0.015818510 ubox
12 32 0.021261746 ubox
13 27 0.941316656 ubox
14 24 0.006387445 ubox
14 26 0.964005975 ubox
14 32 0.003195072 ubox
15 23 0.006470615 ubox
15 25 0.963956572 ubox
15 29 0.020968715 ubox
15 31 0.004561296 ubox
16 22 0.006630669 ubox
16 24 0.964078932 ubox
16 26 0.263794722 ubox
16 28 0.019864081 ubox
17 21 0.007386649 ubox
17 23 0.954568864 ubox
17 25 0.264204406 ubox
17 29 0.007475728 ubox
18 22 0.794606214 ubox
18 24 0.264318620 ubox
18 27 0.017618067 ubox
18 28 0.007454269 ubox
19 26 0.019626708 ubox
19 27 0.003632100 ubox
20 25 0.018377254 ubox
24 33 0.003648270 ubox
25 32 0.004366985 ubox
26 31 0.004446812 ubox
35 65 0.008876411 ubox
36 64 0.009873474 ubox
37 63 0.010155428 ubox
37 64 0.007533978 ubox
38 62 0.010018825 ubox
38 63 0.008668179 ubox
38 64 0.045568743 ubox
39 61 0.007893820 ubox
39 62 0.008211825 ubox
39 63 0.057597874 ubox
39 64 0.020094605 ubox
40 58 0.004841138 ubox
40 61 0.005552646 ubox
40 62 0.065492849 ubox
40 63 0.026859703 ubox
41 57 0.005388699 ubox
41 61 0.057176263 ubox
42 57 0.011672007 ubox
42 61 0.181631908 ubox
43 54 0.019336004 ubox
43 56 0.011207826 ubox
43 60 0.186542210 ubox
44 51 0.042492350 ubox
44 53 0.031512096 ubox
44 65 0.019958125 ubox
45 50 0.040507322 ubox
45 52 0.031352709 ubox
45 58 0.371956375 ubox
45 62 0.270152151 ubox
45 64 0.019684151 ubox
46 57 0.399366772 ubox
46 61 0.288758647 ubox
47 56 0.389095746 ubox
47 60 0.266488747 ubox
48 57 0.278691964 ubox
48 61 0.062402864 ubox
49 56 0.262544511 ubox
49 60 0.059275252 ubox
50 65 0.090814847 ubox
51 57 0.029792458 ubox
51 61 0.010836764 ubox
51 64 0.100000455 ubox
52 56 0.027151393 ubox
52 60 0.012496653 ubox
52 65 0.072806522 ubox
53 62 0.031829801 ubox
53 63 0.559679723 ubox
53 64 0.070826753 ubox
54 61 0.029106895 ubox
54 62 0.642430923 ubox
54 63 0.058131158 ubox
55 61 0.651951883 ubox
1 43 0.9500000 lbox
2 42 0.9500000 lbox
3 41 0.9500000 lbox
4 40 0.9500000 lbox
5 39 0.9500000 lbox
6 34 0.9500000 lbox
7 33 0.9500000 lbox
8 32 0.9500000 lbox
9 31 0.9500000 lbox
10 30 0.9500000 lbox
13 27 0.9500000 lbox
14 26 0.9500000 lbox
15 25 0.9500000 lbox
16 24 0.9500000 lbox
17 23 0.9500000 lbox
18 22 0.9500000 lbox
showpage
end
%%EOF
