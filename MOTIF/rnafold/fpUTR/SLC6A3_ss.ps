%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGCGGAGCGGGAGGGGAGGCUUCGCGGAACGCUCUCGGCGCCAGGACUCGCGUGCAAAGCCCAGGCCCGGGCGGCCAGACCAAGAGGGAAGAAGCACAGAAUUCCUCAACUCCCAGUGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[98.16091156 269.26849365]
[96.31037140 254.38308716]
[94.45982361 239.49768066]
[92.60928345 224.61227417]
[90.75873566 209.72685242]
[86.76856995 203.40943909]
[89.05122375 194.45094299]
[87.56942749 179.52432251]
[86.08763123 164.59768677]
[84.60583496 149.67105103]
[71.06838226 143.21060181]
[58.53229141 151.44749451]
[51.24769974 165.49189758]
[36.36225891 166.01440430]
[23.82616806 174.25129700]
[11.29007721 182.48818970]
[-1.24601448 190.72508240]
[-5.89234543 206.08058167]
[-20.84745407 211.88784790]
[-34.63905716 203.69204712]
[-36.68742371 187.78028870]
[-25.42121506 176.35873413]
[-9.48290730 178.18899536]
[3.05318451 169.95210266]
[15.58927631 161.71520996]
[28.12536812 153.47831726]
[34.51329803 140.02307129]
[50.29539871 138.91140747]
[62.83148956 130.67451477]
[55.51950455 116.06185913]
[53.60850143 100.14326477]
[57.11771774 84.81398010]
[65.43311310 71.82965088]
[77.40292358 62.60530090]
[71.96395111 48.62611389]
[66.52497864 34.64693069]
[60.91352463 20.73608780]
[55.13044739 6.89570999]
[49.34737396 -6.94466734]
[43.56429672 -20.78504372]
[37.78122330 -34.62542343]
[31.51877403 -41.42591476]
[32.03096390 -48.88037109]
[26.59199142 -62.85955429]
[21.15301895 -76.83873749]
[8.93835926 -86.89421844]
[11.53421783 -101.56087494]
[6.09524536 -115.54005432]
[2.40205669 -118.26669312]
[0.07047071 -121.70692444]
[-0.84411991 -125.32115936]
[-0.47545528 -128.61074829]
[0.88533139 -131.17866516]
[-3.14608335 -145.62677002]
[-17.45972633 -151.92388916]
[-24.33050728 -165.97117615]
[-20.51425362 -181.13594055]
[-7.81288147 -190.25785828]
[7.77640724 -189.02981567]
[18.89282799 -178.03166199]
[20.28754616 -162.45640564]
[11.30202007 -149.65818787]
[15.33343506 -135.21008301]
[20.07442856 -120.97902679]
[25.51340103 -106.99984741]
[37.33903122 -97.94425201]
[35.13220215 -82.27770996]
[40.57117462 -68.29852295]
[46.01014709 -54.31933975]
[51.62160110 -40.40849686]
[57.40467453 -26.56811905]
[63.18775177 -12.72774220]
[68.97082520 1.11263490]
[74.75389862 14.95301247]
[80.29512787 19.96559715]
[80.50415802 29.20796013]
[85.94313049 43.18714523]
[91.38210297 57.16632843]
[99.85788727 56.30822372]
[108.33906555 57.11117172]
[116.50321960 59.54465103]
[124.03995514 63.51613998]
[130.66275024 68.87465668]
[136.11982727 75.41648102]
[140.20372009 82.89291382]
[142.75917053 91.01972198]
[143.68901062 99.48793030]
[158.49552917 101.88940430]
[173.30204773 104.29087830]
[188.10855103 106.69235229]
[202.91506958 109.09381866]
[217.72158813 111.49529266]
[226.41790771 98.95189667]
[239.69961548 91.43134308]
[254.92964172 90.42684937]
[269.08404541 96.13784790]
[279.35247803 107.43043518]
[283.69607544 122.06244659]
[281.25250244 137.12867737]
[272.50683594 149.63774109]
[259.19561768 157.10592651]
[243.96176147 158.05044556]
[229.82995605 152.28375244]
[219.60607910 140.95080566]
[215.32011414 126.30181122]
[200.51359558 123.90033722]
[185.70707703 121.49886322]
[170.90057373 119.09738922]
[156.09405518 116.69591522]
[141.28753662 114.29444122]
[133.09614563 130.77253723]
[118.44161987 142.89546204]
[99.53246307 148.18925476]
[101.01425934 163.11589050]
[102.49605560 178.04252625]
[103.97785187 192.96914673]
[105.64414978 207.87631226]
[107.49468994 222.76171875]
[109.34523773 237.64714050]
[111.19578552 252.53254700]
[113.04632568 267.41796875]
[125.66741180 276.93026733]
[127.78288269 292.59231567]
[118.13768005 305.11212158]
[102.45412445 307.06188965]
[90.03699493 297.28488159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 29]
[12 28]
[14 26]
[15 25]
[16 24]
[17 23]
[34 78]
[35 77]
[36 76]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[43 69]
[44 68]
[45 67]
[47 65]
[48 64]
[53 63]
[54 62]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
