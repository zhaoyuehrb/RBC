%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUGCCUCAGAAGCGUCGCGGAGAAGGGGCCACCUCAGGUGAAGCGCGCUUGUGGAGGAGUUGUGGAGGACGCCUGUCGACGACCAGUAACUGGUCCUCGGCCAUUGCGGUGUGUUUCAGUCAGGAAGCAUCUAAAU\
) } def
/len { sequence length } bind def

/coor [
[93.42373657 191.70503235]
[105.41017151 182.10185242]
[103.06365204 167.28652954]
[100.71713257 152.47120667]
[98.37061310 137.65588379]
[76.49997711 129.46809387]
[63.65080261 109.96775055]
[48.68478012 110.97678375]
[33.71875763 111.98582458]
[18.76499748 113.16271210]
[3.82538366 114.50730133]
[-9.22566700 123.45048523]
[-22.59526825 116.88520050]
[-37.53488159 118.22978973]
[-52.47449875 119.57437897]
[-67.41411591 120.91896820]
[-82.35372925 122.26355743]
[-90.70052338 126.17767334]
[-97.64304352 123.46685791]
[-112.60906219 124.47589111]
[-127.57508850 125.48492432]
[-132.59588623 140.71839905]
[-143.04010010 152.84088135]
[-157.29469299 160.02519226]
[-173.17530823 161.20338440]
[-188.26104736 156.22532654]
[-200.26338196 145.87716675]
[-207.37348938 131.75730896]
[-222.31311035 133.10189819]
[-237.25271606 134.44648743]
[-252.19233704 135.79107666]
[-267.42572021 143.23287964]
[-278.79370117 130.65492249]
[-269.85427856 116.24926758]
[-253.53692627 120.85145569]
[-238.59732056 119.50686646]
[-223.65769958 118.16227722]
[-208.71807861 116.81768799]
[-205.02745056 103.23466492]
[-196.89376831 91.71051025]
[-185.28265381 83.64885712]
[-171.58471680 80.04018402]
[-157.44911194 81.34014130]
[-144.58496094 87.41214752]
[-134.55462646 97.54137421]
[-128.58412170 110.51889801]
[-113.61810303 109.50986481]
[-98.65207672 108.50083160]
[-83.69831848 107.32394409]
[-68.75870514 105.97935486]
[-53.81908798 104.63476562]
[-38.87947464 103.29017639]
[-23.93985939 101.94558716]
[-11.95738888 93.09857178]
[2.48079395 99.56768799]
[17.42040825 98.22309113]
[23.85338593 94.45960236]
[32.70972443 97.01979828]
[47.67574692 96.01076508]
[62.64176941 95.00173187]
[67.19821167 81.43489838]
[76.48390198 70.54472351]
[89.16005707 63.90130234]
[103.39908600 62.46246719]
[117.14804077 66.43566132]
[128.42465210 75.24803925]
[141.47076416 67.84542084]
[154.51687622 60.44279480]
[167.56300354 53.04016876]
[180.60911560 45.63754654]
[188.79327393 32.09759903]
[203.68112183 32.54603577]
[216.72724915 25.14341164]
[229.77336121 17.74078941]
[242.81947327 10.33816624]
[255.86560059 2.93554258]
[265.65713501 -18.06836700]
[288.10073853 -17.73149872]
[300.23599243 -26.54827690]
[312.37124634 -35.36505508]
[324.50650024 -44.18183517]
[336.64175415 -52.99861145]
[343.25845337 -67.36975861]
[358.10290527 -68.59105682]
[370.23815918 -77.40782928]
[382.37341309 -86.22460938]
[394.50866699 -95.04138947]
[406.64392090 -103.85816956]
[418.77917480 -112.67494965]
[428.03936768 -126.87654877]
[444.24942017 -121.90965271]
[443.96405029 -104.95810699]
[427.59597778 -100.53969574]
[415.46069336 -91.72291565]
[403.32543945 -82.90613556]
[391.19018555 -74.08935547]
[379.05493164 -65.27257538]
[366.91967773 -56.45579910]
[361.17098999 -42.71529007]
[345.45852661 -40.86335754]
[333.32327271 -32.04658127]
[321.18801880 -23.22980118]
[309.05276489 -14.41302204]
[296.91751099 -5.59624338]
[297.61724854 1.68643773]
[295.68496704 8.81396770]
[291.32247925 14.85728550]
[285.05142212 19.01109505]
[277.65136719 20.70103836]
[270.06292725 19.66270065]
[263.26821899 15.98165989]
[250.22210693 23.38428307]
[237.17597961 30.78690529]
[224.12986755 38.18952942]
[211.08375549 45.59215164]
[203.83273315 58.60261536]
[188.01173401 58.68366241]
[174.96562195 66.08628845]
[161.91950989 73.48891449]
[148.87338257 80.89153290]
[135.82727051 88.29415894]
[137.51269531 96.33692932]
[137.41500854 104.55382538]
[135.53886414 112.55426025]
[131.97343445 119.95794678]
[126.88819885 126.41296387]
[120.52487946 131.61248779]
[113.18594360 135.30935669]
[115.53245544 150.12469482]
[117.87897491 164.94001770]
[120.22549438 179.75534058]
[134.59281921 185.18449402]
[144.30827332 197.08009338]
[146.75846863 212.24227905]
[141.28431702 226.59251404]
[129.35832214 236.27064514]
[114.18852234 238.67330933]
[99.85552216 233.15419006]
[90.21482086 221.19792175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[4 129]
[5 128]
[7 60]
[8 59]
[9 58]
[10 56]
[11 55]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[19 48]
[20 47]
[21 46]
[28 38]
[29 37]
[30 36]
[31 35]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
[72 115]
[73 114]
[74 113]
[75 112]
[76 111]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
